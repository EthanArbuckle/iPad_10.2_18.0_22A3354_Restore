uint64_t sub_23EBA1800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[13] = a4;
  v5[14] = a5;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v5[15] = swift_task_alloc();
  v6 = sub_23EC2DFA0();
  v5[16] = v6;
  v5[17] = *(_QWORD *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v5[20] = swift_task_alloc();
  v7 = sub_23EC2E264();
  v5[21] = v7;
  v5[22] = *(_QWORD *)(v7 - 8);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBA18F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(inited + 32) = 1701603700;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  swift_bridgeObjectRetain();
  v7 = sub_23EBA7540(inited);
  *(_QWORD *)(v0 + 200) = v7;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 208) = KeyPath;
  sub_23EBBA5A0(KeyPath, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 160), &qword_25433F930);
    if (qword_25433FAC0 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_25433FC38);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Request URL for Utility Territory Lookup API not found", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 128));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 176);
    v18 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v14, *(_QWORD *)(v0 + 160), v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v14, v16);
    sub_23EC2DF58();
    sub_23EC2DF40();
    if (v18)
    {
      v19 = *(_QWORD *)(v0 + 112);
      v20 = HIBYTE(v19) & 0xF;
      if ((v19 & 0x2000000000000000) == 0)
        v20 = *(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFLL;
      if (v20)
        sub_23EC2DF70();
    }
    sub_23EC0A4E0(*(_QWORD *)(v0 + 144));
    v22 = (char *)&dword_256DB7E28 + dword_256DB7E28;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v21;
    *v21 = v0;
    v21[1] = sub_23EBA1C0C;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, unint64_t))v22)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), KeyPath, v7);
  }
}

uint64_t sub_23EBA1C0C()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[17];
  v3 = v2[18];
  v5 = v2[16];
  if (v0)
  {

    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[29] = v6;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[28] = v6;
  }
  v6(v3, v5);
  return swift_task_switch();
}

uint64_t sub_23EBA1CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  if (v4 == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_25433FAC0 != -1)
      swift_once();
    v6 = v5;
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_25433FC38);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Unable to sign Utility Geohash Lookup request", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 128);

    swift_release();
    swift_bridgeObjectRelease();
    v6(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    v16 = 1;
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 80), v3, v1);
    sub_23EC2DF94();
    swift_release();
    swift_bridgeObjectRelease();
    v5(v18, v1);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v20);
    v16 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 80), v16, 1, *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA1F10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 128));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  sub_23EBA3038(*(_QWORD *)(v0 + 120), &qword_25433F918);
  if (qword_25433FAC0 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_25433FC38);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Unable to sign Utility Geohash Lookup request", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 128);

  swift_release();
  swift_bridgeObjectRelease();
  v1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA20C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[13] = a4;
  v5[14] = a5;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v5[15] = swift_task_alloc();
  v6 = sub_23EC2DFA0();
  v5[16] = v6;
  v5[17] = *(_QWORD *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v7 = sub_23EC2E264();
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBA2220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t inited;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;

  v2 = (uint64_t *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v59(v3, 1, 1, v6);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 264) = KeyPath;
  v61 = KeyPath;
  sub_23EBBA5A0(KeyPath, 0);
  sub_23EBA3038(v3, &qword_25433F930);
  sub_23EBA2F90(v4, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 272) = inited;
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(inited + 32) = 0x6E6F69676572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v8;
  sub_23EBA2FD8(v3, v1);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v11(v1, 1, v6) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_8:
    sub_23EBA3038(*v2, &qword_25433F930);
    if (qword_25433FAC0 != -1)
      swift_once();
    v23 = sub_23EC2E684();
    __swift_project_value_buffer(v23, (uint64_t)qword_25433FC38);
    v24 = sub_23EC2E66C();
    v25 = sub_23EC2EA08();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_23EB9F000, v24, v25, "Unable to create All Utilities In Region URL with required query parameters", v26, 2u);
      MEMORY[0x24265B940](v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 80);
    swift_release();

    sub_23EBA3038(v27, &qword_25433F930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v30, 1, 1, v29);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 160);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
  v14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 240), v13);
  swift_bridgeObjectRetain();
  sub_23EC2E1EC();
  sub_23EC2E240();
  v15 = v11(v12, 1, v13);
  v2 = (uint64_t *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 232);
  if (v15 == 1)
  {
    v17 = *(_QWORD *)(v0 + 160);
    sub_23EBA3038(*(_QWORD *)(v0 + 224), &qword_25433F930);
    v59(v16, 1, 1, v17);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v14(v18, *(_QWORD *)(v0 + 224), v19);
    sub_23EC138EC(inited, 1, 0, v16);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  v21 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11(v21, 1, v22) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 160));
    goto LABEL_8;
  }
  v32 = *(_QWORD *)(v0 + 256);
  v33 = *(_QWORD *)(v0 + 232);
  v34 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 200);
  v36 = *(_QWORD *)(v0 + 160);
  v37 = *(_QWORD *)(v0 + 168);
  sub_23EBA3038(v32, &qword_25433F930);
  v14(v35, v33, v36);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v38(v32, v35, v36);
  v59(v32, 0, 1, v36);
  sub_23EBA2FD8(v32, v34);
  if (v11(v34, 1, v36) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 216), &qword_25433F930);
    if (qword_25433FAC0 != -1)
      swift_once();
    v39 = sub_23EC2E684();
    __swift_project_value_buffer(v39, (uint64_t)qword_25433FC38);
    v40 = sub_23EC2E66C();
    v41 = sub_23EC2EA08();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_23EB9F000, v40, v41, "Request URL for Utility Configuration API not found", v42, 2u);
      MEMORY[0x24265B940](v42, -1, -1);
    }
    v43 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 208);
    v47 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 128);
    v49 = *(_QWORD *)(v0 + 136);
    v50 = *(_QWORD *)(v0 + 80);
    swift_release();

    v51 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v51(v45, v47);
    v51(v44, v47);
    sub_23EBA3038(v43, &qword_25433F930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1, 1, v48);
    goto LABEL_13;
  }
  v53 = *(_QWORD *)(v0 + 176);
  v52 = *(_QWORD *)(v0 + 184);
  v54 = *(_QWORD *)(v0 + 160);
  v55 = *(_QWORD *)(v0 + 112);
  v14(v52, *(_QWORD *)(v0 + 216), v54);
  v38(v53, v52, v54);
  sub_23EC2DF58();
  sub_23EC2DF40();
  if (v55)
  {
    v56 = *(_QWORD *)(v0 + 112);
    v57 = HIBYTE(v56) & 0xF;
    if ((v56 & 0x2000000000000000) == 0)
      v57 = *(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFLL;
    if (v57)
      sub_23EC2DF70();
  }
  sub_23EC0A4E0(*(_QWORD *)(v0 + 144));
  v60 = (char *)&dword_256DB7E50 + dword_256DB7E50;
  v58 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 280) = v58;
  *v58 = v0;
  v58[1] = sub_23EBA28A0;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))v60)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 144), v61, 0);
}

uint64_t sub_23EBA28A0()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[17];
  v3 = v2[18];
  v5 = v2[16];
  if (v0)
  {

    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[37] = v6;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[36] = v6;
  }
  v6(v3, v5);
  return swift_task_switch();
}

uint64_t sub_23EBA2948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v30 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  if (v4 == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_25433FAC0 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_25433FC38);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Unable to sign Utilities in Region request", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 256);
    swift_release();

    v30(v14, v15);
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v11, v13);
    v17(v10, v13);
    v17(v9, v13);
    sub_23EBA3038(v28, &qword_25433F930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v26, 1, 1, v15);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v22, v3, v1);
    sub_23EC2DF94();
    swift_release();
    v30(v21, v1);
    v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v23(v18, v20);
    v23(v25, v20);
    v23(v27, v20);
    sub_23EBA3038(v29, &qword_25433F930);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v22, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA2C70()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 128));
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  sub_23EBA3038(*(_QWORD *)(v0 + 120), &qword_25433F918);
  if (qword_25433FAC0 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_25433FC38);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign Utilities in Region request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 256);
  swift_release();

  v17(v10, v11);
  v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v7, v9);
  v13(v6, v9);
  v13(v5, v9);
  sub_23EBA3038(v16, &qword_25433F930);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v15, 1, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23EBA2EB0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_23EBA2EB8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_23EBA2ECC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_23EBA2EFC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_23EBA2F10(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_23EBA2F24(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_23EBA2F38(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_23EBA2F44@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24265B898]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23EBA2F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBA2FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_23EBA3038(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_23EBA3130(a1, &qword_256DB72A8);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_23EBA3130(a1, &qword_256DB72B0);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_23EBA3130(a1, &qword_256DB72B8);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23EBA30C0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23EBA30E0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_23EBA3130(a1, &qword_256DB72C0);
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_23EBA3130(a1, &qword_256DB72C8);
}

void sub_23EBA3130(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_23EBA317C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[10] = a8;
  v8[11] = v12;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  v8[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[12] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v8[18] = swift_task_alloc();
  v10 = sub_23EC2E264();
  v8[19] = v10;
  v8[20] = *(_QWORD *)(v10 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBA32B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 144), &qword_25433F930);
    if (qword_256DB71F0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7720);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for Token API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 40);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23EBBC430(v13, v12, 0xD000000000000011, 0x800000023EC37BE0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v16 = 0xD000000000000012;
    v17 = 0x800000023EC37C00;
LABEL_11:
    sub_23EBBC430(v16, v17, 0x707954746E617267, 0xE900000000000065, v15);
    swift_bridgeObjectRelease();
    v21 = (void *)objc_opt_self();
    v22 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = 0;
    v23 = objc_msgSend(v21, sel_dataWithJSONObject_options_error_, v22, 0, v0 + 16);

    v24 = *(id *)(v0 + 16);
    if (v23)
    {
      v25 = *(_QWORD *)(v0 + 168);
      v26 = *(_QWORD *)(v0 + 160);
      v51 = *(_QWORD *)(v0 + 152);
      v52 = *(_QWORD *)(v0 + 176);
      v28 = *(_QWORD *)(v0 + 128);
      v27 = *(_QWORD *)(v0 + 136);
      v29 = *(_QWORD *)(v0 + 120);
      v30 = *(_QWORD *)(v0 + 104);
      v53 = *(_QWORD *)(v0 + 112);
      v54 = sub_23EC2E2D0();
      v32 = v31;

      *(_QWORD *)(v0 + 184) = v54;
      *(_QWORD *)(v0 + 192) = v32;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v52, v51);
      sub_23EC2DF58();
      sub_23EC0A4E0(v28);
      v33 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      *(_QWORD *)(v0 + 200) = v33;
      v33(v29, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v27, v28, v30);
      sub_23EC2DF70();
      v33(v28, v30);
      sub_23EC2DF40();
      sub_23EBA3E98(v54, v32);
      sub_23EC2DF88();
      v34 = dword_256DB7E40;
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v35;
      *v35 = v0;
      v35[1] = sub_23EBA3960;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E40 + v34))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 80));
    }
    v37 = v24;
    v38 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB71F0 != -1)
      swift_once();
    v39 = sub_23EC2E684();
    __swift_project_value_buffer(v39, (uint64_t)qword_256DC7720);
    v40 = sub_23EC2E66C();
    v41 = sub_23EC2EA08();
    if (!os_log_type_enabled(v40, v41))
      goto LABEL_22;
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    v43 = "Unable to encode Token request body";
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(v0 + 56);
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    sub_23EBBC430(v19, v18, 0x5468736572666572, 0xEC0000006E656B6FLL, v20);
    swift_bridgeObjectRelease();
    v15 = swift_isUniquelyReferenced_nonNull_native();
    v16 = 0x5F48534552464552;
    v17 = 0xED00004E454B4F54;
    goto LABEL_11;
  }
  if (qword_256DB71F0 != -1)
    swift_once();
  v44 = sub_23EC2E684();
  __swift_project_value_buffer(v44, (uint64_t)qword_256DC7720);
  v40 = sub_23EC2E66C();
  v41 = sub_23EC2EA08();
  if (!os_log_type_enabled(v40, v41))
    goto LABEL_22;
  v42 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v42 = 0;
  v43 = "No authorization code or refresh token provided";
LABEL_21:
  _os_log_impl(&dword_23EB9F000, v40, v41, v43, v42, 2u);
  MEMORY[0x24265B940](v42, -1, -1);
LABEL_22:
  v45 = *(_QWORD *)(v0 + 176);
  v46 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 104);
  v49 = *(_QWORD *)(v0 + 112);
  v50 = *(_QWORD *)(v0 + 24);

  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, 1, 1, v48);
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA3960()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBA3A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71E8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign Token request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 192);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    v11 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 104);
    v23 = *(_QWORD *)(v0 + 112);
    v25 = *(_QWORD *)(v0 + 24);

    sub_23EBA3EDC(v10, v8);
    v9(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, 1, 1, v15);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 184);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    v26 = *(_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v21, v3, v1);
    sub_23EC2DF94();
    sub_23EBA3EDC(v17, v16);
    v24(v20, v1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v26, v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v21, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA3CB0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(*(_QWORD *)(v0 + 96), 1, 1, *(_QWORD *)(v0 + 104));
  sub_23EBA3038(*(_QWORD *)(v0 + 96), &qword_25433F918);
  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign Token request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 24);

  sub_23EBA3EDC(v7, v5);
  v6(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBA3E98(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_23EBA3EDC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_23EBA3F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  char v7;
  unsigned __int8 v8;
  id v10;
  _BYTE v11[32];
  _BYTE v12[24];
  uint64_t v13;

  sub_23EBA5560(a1, (uint64_t)v12);
  if (!v13)
    goto LABEL_15;
  sub_23EBA5560((uint64_t)v12, (uint64_t)v11);
  sub_23EBA5604(0, (unint64_t *)&qword_256DB7350);
  if (!swift_dynamicCast())
  {
    sub_23EBA5604(0, &qword_256DB7358);
    if ((swift_dynamicCast() & 1) != 0)
    {

      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      goto LABEL_13;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
LABEL_15:
    sub_23EBA5560(a1, a2);
    return sub_23EBA5520((uint64_t)v12);
  }
  v4 = objc_retainAutorelease(v10);
  objc_msgSend(v4, sel_objCType);
  if (sub_23EC2E840() == 99 && v5 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v7 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_12:
    v8 = objc_msgSend(v4, sel_BOOLValue);
    *(_QWORD *)(a2 + 24) = MEMORY[0x24BEE1328];

    *(_BYTE *)a2 = v8;
    goto LABEL_13;
  }

  sub_23EBA5560(a1, a2);
LABEL_13:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  return sub_23EBA5520((uint64_t)v12);
}

uint64_t sub_23EBA40B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  sub_23EBA5560(v3, (uint64_t)&v11);
  if (!*((_QWORD *)&v12 + 1))
  {
    result = sub_23EBA5520((uint64_t)&v11);
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_7:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = sub_23EBE9A24(a1, a2);
    if ((v9 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v10 + 56) + 32 * v8, (uint64_t)&v11);
    }
    else
    {
      v11 = 0u;
      v12 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_23EBA3F20((uint64_t)&v11, (uint64_t)a3);
  return sub_23EBA5520((uint64_t)&v11);
}

_QWORD *sub_23EBA41C4(CLLocationDegrees a1, CLLocationDegrees a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _QWORD *result;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  const char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  id v74[2];

  v74[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23EC2E7C8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)MEMORY[0x24265B4F0](v6);
  sub_23EBA4A4C(v74);
  objc_autoreleasePoolPop(v9);
  v11 = v74[0];
  if (!v74[0])
  {
    if (qword_256DB71B0 != -1)
LABEL_56:
      swift_once();
    v62 = sub_23EC2E684();
    __swift_project_value_buffer(v62, (uint64_t)qword_256DC7690);
    v63 = sub_23EC2E66C();
    v64 = sub_23EC2EA08();
    if (!os_log_type_enabled(v63, v64))
      goto LABEL_53;
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    v66 = "Unable to retrieve geoJSONs from geohash tile";
    goto LABEL_52;
  }
  v12 = *((_QWORD *)v74[0] + 2);
  if (v12)
  {
    v13 = 0;
    v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v10 = 138412290;
    v68 = v10;
    v72 = v8;
    v70 = v5;
    do
    {
      if (*(_QWORD *)(v11[v13 + 4] + 16))
      {
        swift_bridgeObjectRetain();
        sub_23EBE9A24(6516580, 0xE300000000000000);
        if ((v14 & 1) != 0)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_23EC2E7B0();
          v15 = sub_23EC2E78C();
          v17 = v16;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          if (v17 >> 60 != 15)
          {
            v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB068]), sel_init);
            v73 = v15;
            v19 = (void *)sub_23EC2E2B8();
            v74[0] = 0;
            v20 = objc_msgSend(v18, sel_geoJSONObjectsWithData_error_, v19, v74);

            v21 = v74[0];
            if (v20)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7348);
              v22 = sub_23EC2E930();
              v23 = v21;

              if ((v22 & 0xC000000000000001) != 0)
              {
                MEMORY[0x24265B16C](0, v22);
              }
              else
              {
                if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_56;
                }
                swift_unknownObjectRetain();
              }
              swift_bridgeObjectRelease();
              objc_opt_self();
              v24 = (void *)swift_dynamicCastObjCClass();
              if (v24)
              {
                v25 = v24;
                if ((sub_23EBA4FA4(v24, a1, a2) & 1) != 0)
                {
                  v69 = v4;
                  if (qword_256DB71B0 != -1)
                    swift_once();
                  v26 = sub_23EC2E684();
                  __swift_project_value_buffer(v26, (uint64_t)qword_256DC7690);
                  v27 = sub_23EC2E66C();
                  v28 = sub_23EC2EA14();
                  if (os_log_type_enabled(v27, v28))
                  {
                    v29 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v29 = 0;
                    _os_log_impl(&dword_23EB9F000, v27, v28, "Found matching Polygon", v29, 2u);
                    MEMORY[0x24265B940](v29, -1, -1);
                  }

                  v30 = sub_23EC2E66C();
                  v31 = sub_23EC2E9F0();
                  if (os_log_type_enabled(v30, v31))
                  {
                    v32 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v32 = 0;
                    _os_log_impl(&dword_23EB9F000, v30, v31, "Extracting Utility Info", v32, 2u);
                    MEMORY[0x24265B940](v32, -1, -1);
                  }

                  v33 = objc_msgSend(v25, sel_properties);
                  if (v33)
                  {
                    v34 = v33;
                    v35 = sub_23EC2E2D0();
                    v37 = v36;

                  }
                  else
                  {
                    v35 = 0;
                    v37 = 0xF000000000000000;
                  }
                  v50 = sub_23EBA52E8(v35, v37);
                  v52 = v51;
                  sub_23EBA4CE0(v35, v37);
                  if (v52)
                  {
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v5 = v70;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      v71 = sub_23EC218C0(0, v71[2] + 1, 1, v71);
                    v55 = v71[2];
                    v54 = v71[3];
                    if (v55 >= v54 >> 1)
                      v71 = sub_23EC218C0((_QWORD *)(v54 > 1), v55 + 1, 1, v71);
                    v56 = v71;
                    v71[2] = v55 + 1;
                    v57 = &v56[2 * v55];
                    v57[4] = v50;
                    v57[5] = v52;
                    sub_23EBA4CE0(v73, v17);
                    swift_unknownObjectRelease();
                    v4 = v69;
                    v8 = v72;
                  }
                  else
                  {
                    v58 = sub_23EC2E66C();
                    v59 = sub_23EC2EA08();
                    if (os_log_type_enabled(v58, v59))
                    {
                      v60 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)v60 = 0;
                      _os_log_impl(&dword_23EB9F000, v58, v59, "Unable to extract Utility Information from GeoFeature", v60, 2u);
                      MEMORY[0x24265B940](v60, -1, -1);
                    }
                    sub_23EBA4CE0(v73, v17);

                    swift_unknownObjectRelease();
                    v4 = v69;
                    v5 = v70;
                    v8 = v72;
                  }
                }
                else
                {
                  sub_23EBA4CE0(v73, v17);
                  swift_unknownObjectRelease();
                  v8 = v72;
                }
              }
              else
              {
                swift_unknownObjectRelease();
                sub_23EBA4CE0(v73, v17);
                v8 = v72;
              }
            }
            else
            {
              v38 = v74[0];
              v39 = (void *)sub_23EC2E1D4();

              swift_willThrow();
              if (qword_256DB71B0 != -1)
                swift_once();
              v40 = sub_23EC2E684();
              __swift_project_value_buffer(v40, (uint64_t)qword_256DC7690);
              v41 = v39;
              v42 = v39;
              v43 = sub_23EC2E66C();
              v44 = sub_23EC2EA08();
              if (os_log_type_enabled(v43, v44))
              {
                v45 = swift_slowAlloc();
                v46 = (_QWORD *)swift_slowAlloc();
                *(_DWORD *)v45 = v68;
                v47 = v39;
                v48 = _swift_stdlib_bridgeErrorToNSError();
                *(_QWORD *)(v45 + 4) = v48;
                *v46 = v48;

                _os_log_impl(&dword_23EB9F000, v43, v44, "Error while decoding geoJSON File %@", (uint8_t *)v45, 0xCu);
                __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
                swift_arrayDestroy();
                v49 = v46;
                v5 = v70;
                MEMORY[0x24265B940](v49, -1, -1);
                MEMORY[0x24265B940](v45, -1, -1);
                sub_23EBA4CE0(v73, v17);

              }
              else
              {
                sub_23EBA4CE0(v73, v17);

              }
              v8 = v72;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      ++v13;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
    result = v71;
    if (v71[2])
      return result;
  }
  else
  {
    swift_bridgeObjectRelease();
    result = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      return result;
  }
  swift_bridgeObjectRelease();
  if (qword_256DB71B0 != -1)
    swift_once();
  v67 = sub_23EC2E684();
  __swift_project_value_buffer(v67, (uint64_t)qword_256DC7690);
  v63 = sub_23EC2E66C();
  v64 = sub_23EC2EA14();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    v66 = "No matching utility territory polygon in geohash tile.";
LABEL_52:
    _os_log_impl(&dword_23EB9F000, v63, v64, v66, v65, 2u);
    MEMORY[0x24265B940](v65, -1, -1);
  }
LABEL_53:

  return 0;
}

void sub_23EBA4A4C(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v3 = sub_23EBE0D2C();
  v5 = v4;

  if (v5 >> 60 != 15)
  {
    v6 = (void *)objc_opt_self();
    v7 = (void *)sub_23EC2E2B8();
    *(_QWORD *)&v17 = 0;
    v8 = objc_msgSend(v6, sel_JSONObjectWithData_options_error_, v7, 0, &v17);

    v9 = (id)v17;
    if (v8)
    {
      sub_23EC2EAE0();
      swift_unknownObjectRelease();
    }
    else
    {
      v10 = v9;
      v11 = (void *)sub_23EC2E1D4();

      swift_willThrow();
      memset(v19, 0, sizeof(v19));
    }
    sub_23EBA40B8(1935896420, 0xE400000000000000, &v17);
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256DB7370);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_23EBA4CE0(v3, v5);
        sub_23EBA5520((uint64_t)v19);
        *a1 = v16;
        return;
      }
    }
    else
    {
      sub_23EBA5520((uint64_t)&v17);
    }
    if (qword_256DB71B0 != -1)
      swift_once();
    v12 = sub_23EC2E684();
    __swift_project_value_buffer(v12, (uint64_t)qword_256DC7690);
    v13 = sub_23EC2E66C();
    v14 = sub_23EC2EA08();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_23EB9F000, v13, v14, "Unable to deserialize Geohash GeoJSON document", v15, 2u);
      MEMORY[0x24265B940](v15, -1, -1);
    }
    sub_23EBA4CE0(v3, v5);

    sub_23EBA5520((uint64_t)v19);
  }
  *a1 = 0;
}

uint64_t sub_23EBA4CE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23EBA3EDC(a1, a2);
  return a1;
}

uint64_t sub_23EBA4CF4(void *a1)
{
  char **p_name;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  id v20;

  v3 = objc_msgSend(a1, sel_geometry);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7360);
  v4 = sub_23EC2E930();

  v5 = sub_23EC0F680(v4);
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x24265B16C](0, v5);
  }
  else
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    v6 = *(id *)(v5 + 32);
  }
  v7 = v6;
  p_name = &stru_250F55FF8.name;
  v8 = objc_msgSend(v6, sel_polygons);

  sub_23EBA5604(0, &qword_256DB7368);
  v9 = sub_23EC2E930();

  if (v9 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    v10 = sub_23EC2EC0C();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  swift_bridgeObjectRelease();
  if (v10)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v11 = (id)MEMORY[0x24265B16C](0, v5);
    else
      v11 = *(id *)(v5 + 32);
    v19 = v11;
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v19, p_name[449]);

    v14 = sub_23EC2E930();
    return v14;
  }
  swift_bridgeObjectRelease();
LABEL_11:
  v12 = objc_msgSend(a1, sel_geometry);
  v13 = sub_23EC2E930();

  v14 = sub_23EC0F68C(v13);
  swift_bridgeObjectRelease();
  if (!v14)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v15 = sub_23EC2E684();
    __swift_project_value_buffer(v15, (uint64_t)qword_256DC7690);
    v16 = sub_23EC2E66C();
    v17 = sub_23EC2E9FC();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23EB9F000, v16, v17, "Unable to locate Polygons in current GeoFeature", v18, 2u);
      MEMORY[0x24265B940](v18, -1, -1);
    }

    return 0;
  }
  return v14;
}

uint64_t sub_23EBA4FA4(void *a1, CLLocationDegrees a2, CLLocationDegrees a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **p_name;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  MKMapPoint v18;
  id v19;
  unint64_t v20;
  char **v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  CLLocationCoordinate2D v44;

  v6 = sub_23EC2E4F8();
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23EBA4CF4(a1);
  if (!v8)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v28 = sub_23EC2E684();
    __swift_project_value_buffer(v28, (uint64_t)qword_256DC7690);
    v29 = sub_23EC2E66C();
    v30 = sub_23EC2E9FC();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23EB9F000, v29, v30, "No multiPolygons for the current Geofeature", v31, 2u);
      MEMORY[0x24265B940](v31, -1, -1);
    }

    return 0;
  }
  v9 = v8;
  if (v8 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v10 = sub_23EC2EC0C();
    if (v10)
      goto LABEL_4;
    goto LABEL_22;
  }
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_22:
    swift_bridgeObjectRelease_n();
    return 0;
  }
LABEL_4:
  v38 = v9 & 0xC000000000000001;
  v34 = *MEMORY[0x24BDBD730];
  v32 = &v43;
  v33 = v42;
  v11 = 4;
  p_name = &stru_250F55FF8.name;
  v13 = v35;
  while (1)
  {
    if (v38)
      v14 = (id)MEMORY[0x24265B16C](v11 - 4, v9);
    else
      v14 = *(id *)(v9 + 8 * v11);
    v15 = v14;
    v16 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDB180]), sel_initWithPolygon_, v14);
    v44.latitude = a2;
    v44.longitude = a3;
    v18 = MKMapPointForCoordinate(v44);
    objc_msgSend(v17, sel_pointForMapPoint_, v18.x, v18.y);
    v19 = objc_msgSend(v17, p_name[447]);

    if (!v19)
    {

      goto LABEL_6;
    }
    v40 = v11 - 3;
    v20 = v9;
    v21 = p_name;
    result = (uint64_t)objc_msgSend(v17, p_name[447]);
    if (!result)
      break;
    v23 = (void *)result;
    v25 = v36;
    v24 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v13, v34, v37);
    v26 = v33;
    *v33 = 0;
    v26[1] = 0;
    v41 = 0x3FF0000000000000;
    v42[2] = 0x3FF0000000000000;
    v27 = v32;
    *v32 = 0;
    v27[1] = 0;
    v39 = sub_23EC2EA50();

    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v24);
    v9 = v20;
    p_name = v21;
    v16 = v40;
    if ((v39 & 1) != 0)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
LABEL_6:
    ++v11;
    if (v16 == v10)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_23EBA52E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >> 60 == 15)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v2 = sub_23EC2E684();
    __swift_project_value_buffer(v2, (uint64_t)qword_256DC7690);
    v3 = sub_23EC2E66C();
    v4 = sub_23EC2EA08();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_23EB9F000, v3, v4, "Unable to find utility in matching Polygon", v5, 2u);
      MEMORY[0x24265B940](v5, -1, -1);
    }

    return 0;
  }
  v8 = (void *)objc_opt_self();
  sub_23EBA3E98(a1, a2);
  v9 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v16 = 0;
  v10 = objc_msgSend(v8, sel_JSONObjectWithData_options_error_, v9, 0, &v16);

  v11 = (id)v16;
  if (v10)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = v11;
    v13 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    memset(v18, 0, sizeof(v18));
  }
  sub_23EBA40B8(25705, 0xE200000000000000, &v16);
  sub_23EBA4CE0(a1, a2);
  sub_23EBA5520((uint64_t)v18);
  if (!v17)
  {
    sub_23EBA5520((uint64_t)&v16);
    return 0;
  }
  if (swift_dynamicCast())
    return v15;
  else
    return 0;
}

uint64_t sub_23EBA5520(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBA5560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBA55A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23EBA5604(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t static UtilityServices.fetchUtilityRecords(token:date:recordType:offset:limit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v16;

  *(_BYTE *)(v8 + 32) = *a5;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = sub_23EBA56E4;
  return sub_23EC0C290(a1, a2, a3, a4, (_BYTE *)(v8 + 32), a6, a7, a8);
}

uint64_t sub_23EBA56E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 24) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBA5750()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

HomeUtilityServices::UtilityRecordType_optional __swiftcall UtilityRecordType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HomeUtilityServices::UtilityRecordType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23EC2EC48();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static UtilityRecordType.allCases.getter()
{
  return &unk_250F4E318;
}

uint64_t UtilityRecordType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696F506567617355;
  if (*v0 != 1)
    v1 = 0x6D75536567617355;
  if (*v0)
    return v1;
  else
    return 0x6C61767265746E49;
}

uint64_t sub_23EBA5834(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23EBC18A0(*a1, *a2);
}

uint64_t sub_23EBA5840()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBA58F8()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBA598C()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

HomeUtilityServices::UtilityRecordType_optional sub_23EBA5A40(Swift::String *a1)
{
  return UtilityRecordType.init(rawValue:)(*a1);
}

void sub_23EBA5A4C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00006B636F6C42;
  v4 = 0xEA0000000000746ELL;
  v5 = 0x696F506567617355;
  if (v2 != 1)
  {
    v5 = 0x6D75536567617355;
    v4 = 0xEC0000007972616DLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6C61767265746E49;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_23EBA5AC4(_QWORD *a1@<X8>)
{
  *a1 = &unk_250F4E340;
}

uint64_t UtilityRecordsResponse.records.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UtilityRecordsResponse.records.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*UtilityRecordsResponse.records.modify())()
{
  return nullsub_1;
}

uint64_t UtilityRecordsResponse.offset.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23EBA3E98(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t UtilityRecordsResponse.offset.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23EBA3EDC(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*UtilityRecordsResponse.offset.modify())()
{
  return nullsub_1;
}

uint64_t UtilityRecordsResponse.moreToCome.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t UtilityRecordsResponse.moreToCome.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*UtilityRecordsResponse.moreToCome.modify())()
{
  return nullsub_1;
}

uint64_t UtilityRecordsResponse.init(records:offset:moreToCome:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4;
  return result;
}

unint64_t sub_23EBA5BC0()
{
  unint64_t result;

  result = qword_256DB7388;
  if (!qword_256DB7388)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityRecordType, &type metadata for UtilityRecordType);
    atomic_store(result, (unint64_t *)&qword_256DB7388);
  }
  return result;
}

unint64_t sub_23EBA5C08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB7390;
  if (!qword_256DB7390)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7398);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256DB7390);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24265B8A4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for UtilityRecordType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityRecordType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBA5D80 + 4 * byte_23EC2FC95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBA5DB4 + 4 * byte_23EC2FC90[v4]))();
}

uint64_t sub_23EBA5DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBA5DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBA5DC4);
  return result;
}

uint64_t sub_23EBA5DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBA5DD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBA5DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBA5DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBA5DF0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23EBA5DF8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UtilityRecordType()
{
  return &type metadata for UtilityRecordType;
}

uint64_t initializeBufferWithCopyOfBuffer for UtilityRecordsResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for UtilityRecordsResponse(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_23EBA3EDC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for UtilityRecordsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_23EBA3E98(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for UtilityRecordsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_23EBA3E98(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_23EBA3EDC(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for UtilityRecordsResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23EBA3EDC(v4, v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityRecordsResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityRecordsResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityRecordsResponse()
{
  return &type metadata for UtilityRecordsResponse;
}

uint64_t static UtilityServices.verifyServiceAddress(_:withSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_256DB8700 + dword_256DB8700);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23EBA608C;
  return v7(a1, a2);
}

uint64_t sub_23EBA608C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_23EBA6214(void *a1, void *a2, void *aBlock)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = _Block_copy(aBlock);
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_256DB8700 + dword_256DB8700);
  v6 = a1;
  v7 = a2;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_23EBA62A8;
  return v10((uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_23EBA62A8()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v5 = *(void **)(*v1 + 16);
  v4 = *(void **)(*v1 + 24);
  v6 = *v1;
  swift_task_dealloc();

  if (v0)
  {
    v7 = sub_23EC2E1C8();

    v8 = 0;
    v9 = (void *)v7;
  }
  else
  {
    type metadata accessor for MatchedServiceAddress();
    v8 = sub_23EC2E924();
    swift_bridgeObjectRelease();
    v7 = 0;
    v9 = (void *)v8;
  }
  v10 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 32);
  v10[2](v10, v8, v7);

  _Block_release(v10);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

id MatchedServiceAddress.address.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address);
}

uint64_t MatchedServiceAddress.matchType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType);
}

id MatchedServiceAddress.__allocating_init(address:matchType:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id MatchedServiceAddress.init(address:matchType:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_super v4;

  *(_QWORD *)&v2[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for MatchedServiceAddress();
  return objc_msgSendSuper2(&v4, sel_init);
}

id MatchedServiceAddress.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MatchedServiceAddress.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

BOOL sub_23EBA64C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s19HomeUtilityServices20NetworkInternalErrorO9hashValueSivg_0()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBA651C()
{
  return sub_23EC2EDBC();
}

uint64_t sub_23EBA6544()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBA6584()
{
  _BYTE *v0;

  if (*v0)
    return 0x707954686374616DLL;
  else
    return 0x73736572646461;
}

uint64_t sub_23EBA65C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBA70A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBA65E8()
{
  return 0;
}

void sub_23EBA65F4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23EBA6600()
{
  sub_23EBA6CA8();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBA6628()
{
  sub_23EBA6CA8();
  return sub_23EC2EE04();
}

id MatchedServiceAddress.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedServiceAddress();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23EBA6690(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB73B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBA6CA8();
  sub_23EC2EDE0();
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address);
  HIBYTE(v10) = 0;
  type metadata accessor for UtilityServiceAddress();
  sub_23EBA6D30(&qword_256DB73C8, (uint64_t)&protocol conformance descriptor for UtilityServiceAddress);
  sub_23EC2ED08();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType);
    HIBYTE(v10) = 1;
    sub_23EBA6CEC();
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id MatchedServiceAddress.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MatchedServiceAddress.init(from:)(a1);
}

id MatchedServiceAddress.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  objc_super v18;
  char v19;
  uint64_t v20;

  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB73D8);
  v4 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBA6CA8();
  v17 = v1;
  v8 = v7;
  sub_23EC2EDD4();
  if (v2)
  {
    v11 = v17;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for MatchedServiceAddress();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    type metadata accessor for UtilityServiceAddress();
    v19 = 0;
    sub_23EBA6D30(&qword_256DB73E0, (uint64_t)&protocol conformance descriptor for UtilityServiceAddress);
    v10 = v16;
    sub_23EC2ECA8();
    v13 = v17;
    *(_QWORD *)&v17[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address] = v20;
    v19 = 1;
    sub_23EBA6D70();
    sub_23EC2ECA8();
    *(_QWORD *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType] = v20;

    v14 = (objc_class *)type metadata accessor for MatchedServiceAddress();
    v18.receiver = v13;
    v18.super_class = v14;
    v8 = objc_msgSendSuper2(&v18, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

id sub_23EBA6A70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id result;

  v5 = objc_allocWithZone((Class)type metadata accessor for MatchedServiceAddress());
  result = MatchedServiceAddress.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EBA6AC0(_QWORD *a1)
{
  return sub_23EBA6690(a1);
}

unint64_t ServiceAddressMatchType.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t sub_23EBA6AF4()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBA6B38()
{
  return sub_23EC2EDBC();
}

uint64_t sub_23EBA6B60()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t *sub_23EBA6BA0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_23EBA6BBC()
{
  sub_23EBA73C4();
  return sub_23EC2E90C();
}

uint64_t sub_23EBA6C18()
{
  sub_23EBA73C4();
  return sub_23EC2E8F4();
}

uint64_t type metadata accessor for MatchedServiceAddress()
{
  return objc_opt_self();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23EBA6CA8()
{
  unint64_t result;

  result = qword_256DB73C0;
  if (!qword_256DB73C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3006C, &type metadata for MatchedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB73C0);
  }
  return result;
}

unint64_t sub_23EBA6CEC()
{
  unint64_t result;

  result = qword_256DB73D0;
  if (!qword_256DB73D0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for ServiceAddressMatchType, &type metadata for ServiceAddressMatchType);
    atomic_store(result, (unint64_t *)&qword_256DB73D0);
  }
  return result;
}

uint64_t sub_23EBA6D30(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UtilityServiceAddress();
    result = MEMORY[0x24265B8B0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBA6D70()
{
  unint64_t result;

  result = qword_256DB73E8;
  if (!qword_256DB73E8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for ServiceAddressMatchType, &type metadata for ServiceAddressMatchType);
    atomic_store(result, (unint64_t *)&qword_256DB73E8);
  }
  return result;
}

unint64_t sub_23EBA6DB8()
{
  unint64_t result;

  result = qword_256DB73F0;
  if (!qword_256DB73F0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for ServiceAddressMatchType, &type metadata for ServiceAddressMatchType);
    atomic_store(result, (unint64_t *)&qword_256DB73F0);
  }
  return result;
}

uint64_t method lookup function for MatchedServiceAddress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MatchedServiceAddress.__allocating_init(address:matchType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of MatchedServiceAddress.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of MatchedServiceAddress.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for ServiceAddressMatchType()
{
  return &type metadata for ServiceAddressMatchType;
}

uint64_t getEnumTagSinglePayload for MatchedServiceAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedServiceAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EBA6F40 + 4 * byte_23EC2FDF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EBA6F74 + 4 * asc_23EC2FDF0[v4]))();
}

uint64_t sub_23EBA6F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBA6F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBA6F84);
  return result;
}

uint64_t sub_23EBA6F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBA6F98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EBA6F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBA6FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23EBA6FB0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MatchedServiceAddress.CodingKeys()
{
  return &type metadata for MatchedServiceAddress.CodingKeys;
}

unint64_t sub_23EBA6FD0()
{
  unint64_t result;

  result = qword_256DB7420;
  if (!qword_256DB7420)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30044, &type metadata for MatchedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7420);
  }
  return result;
}

unint64_t sub_23EBA7018()
{
  unint64_t result;

  result = qword_256DB7428;
  if (!qword_256DB7428)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC2FFB4, &type metadata for MatchedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7428);
  }
  return result;
}

unint64_t sub_23EBA7060()
{
  unint64_t result;

  result = qword_256DB7430;
  if (!qword_256DB7430)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC2FFDC, &type metadata for MatchedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7430);
  }
  return result;
}

uint64_t sub_23EBA70A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736572646461 && a2 == 0xE700000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x707954686374616DLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EBA71A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_23EBA71D4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23EBA724C;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_256DB7440 + dword_256DB7440))(v2, v3, v4);
}

uint64_t sub_23EBA724C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBA7298()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23EBA7408;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_256DB8FE0 + dword_256DB8FE0))(v2, v3, v4);
}

uint64_t objectdestroy_5Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23EBA7340(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_256DB8FE8 + dword_256DB8FE8))(a1, v4, v5, v6);
}

unint64_t sub_23EBA73C4()
{
  unint64_t result;

  result = qword_256DB7460;
  if (!qword_256DB7460)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for ServiceAddressMatchType, &type metadata for ServiceAddressMatchType);
    atomic_store(result, (unint64_t *)&qword_256DB7460);
  }
  return result;
}

unint64_t sub_23EBA740C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7938);
  v2 = sub_23EC2EC30();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23EBB2090(v6, (uint64_t)&v15, &qword_256DB7940);
    v7 = v15;
    v8 = v16;
    result = sub_23EBE9A24(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23EBB2080(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23EBA7540(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7490);
  v2 = (_QWORD *)sub_23EC2EC30();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23EBE9A24(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23EBA7660(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7928);
  v2 = sub_23EC2EC30();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23EBB2090(v6, (uint64_t)v15, &qword_256DB7930);
    result = sub_23EBE9AF4((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_23EBB2080(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_23EBA780C()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
  v1 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v0);

  return v1;
}

uint64_t static UtilityServices.configuration(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23EBA78C4;
  return sub_23EBD125C(a1);
}

uint64_t sub_23EBA78C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EBA7A40(void *a1, void *aBlock)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  v4 = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_23EBA7AA8;
  return sub_23EBD125C((uint64_t)v4);
}

uint64_t sub_23EBA7AA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);

  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  if (a1)
  {
    v6 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void (***)(_QWORD, _QWORD))(v3 + 24);
  ((void (**)(_QWORD, void *))v7)[2](v7, v6);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilityServices.isSupportedInRegion(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23EBD14C0();
  LOBYTE(a2) = sub_23EBA7BAC(a1, a2, v4);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t sub_23EBA7BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23EC2EDB0();
    sub_23EC2E744();
    v6 = sub_23EC2EDC8();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_23EC2ED38() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_23EC2ED38() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t static UtilityServices.deviceSupportsUtilityOnboarding()()
{
  return DeviceIdentityIsSupported();
}

id UtilityServices.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UtilityServices();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for UtilityServices()
{
  return objc_opt_self();
}

id UtilityServices.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityServices);
}

uint64_t static UtilityServices.utilityIDLookup(for:withSession:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, double, double);

  v9 = (uint64_t (*)(uint64_t, double, double))((char *)&dword_256DB8810 + dword_256DB8810);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23EBA608C;
  return v9(a1, a2, a3);
}

uint64_t sub_23EBA7FA8(void *a1, void *aBlock, double a3, double a4)
{
  _QWORD *v4;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, double, double);

  v4[2] = a1;
  v4[3] = _Block_copy(aBlock);
  v11 = (uint64_t (*)(uint64_t, double, double))((char *)&dword_256DB8810 + dword_256DB8810);
  v8 = a1;
  v9 = (_QWORD *)swift_task_alloc();
  v4[4] = v9;
  *v9 = v4;
  v9[1] = sub_23EBA8044;
  return v11((uint64_t)v8, a3, a4);
}

uint64_t sub_23EBA8044()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  if (v0)
  {
    v6 = sub_23EC2E1C8();

    v7 = 0;
    v8 = (void *)v6;
  }
  else
  {
    v7 = sub_23EC2E924();
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = (void *)v7;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilityServices.allUtilitiesInRegion(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8800 + dword_256DB8800);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23EBB2154;
  return v9(a1, a2, a3);
}

uint64_t sub_23EBA82B8(int a1, void *a2, void *aBlock)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, id);

  v3[2] = a2;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_23EC2E780();
  v7 = v6;
  v3[4] = v6;
  v11 = (uint64_t (*)(uint64_t, uint64_t, id))((char *)&dword_256DB8800 + dword_256DB8800);
  v8 = a2;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_23EBA8360;
  return v11(v5, v7, v8);
}

uint64_t sub_23EBA8360()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0)
  {
    v6 = sub_23EC2E1C8();

    v7 = 0;
    v8 = (void *)v6;
  }
  else
  {
    type metadata accessor for UtilityRegion();
    v7 = sub_23EC2E924();
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = (void *)v7;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilityServices.utilityConfiguration(for:withSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23EBA849C;
  return sub_23EBF9FB0(a1, a2, a3);
}

uint64_t sub_23EBA849C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EBA8638(int a1, void *a2, void *aBlock)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a2;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_23EC2E780();
  v7 = v6;
  v3[4] = v6;
  v8 = a2;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_23EBA86C8;
  return sub_23EBF9FB0(v5, v7, (uint64_t)v8);
}

uint64_t sub_23EBA86C8(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  if (v3)
  {
    v8 = (void *)sub_23EC2E1C8();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 24), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_23EBA87E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 248);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EBA8874()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 296);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EBA8910()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 240);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      v19 = MEMORY[0x24BEE4AF8];
      sub_23EBAED30(0, v2, 0);
      v3 = v19;
      v4 = (uint64_t *)(v1 + 56);
      do
      {
        v6 = *(v4 - 3);
        v5 = *(v4 - 2);
        v8 = *(v4 - 1);
        v7 = *v4;
        v19 = v3;
        v10 = *(_QWORD *)(v3 + 16);
        v9 = *(_QWORD *)(v3 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v10 >= v9 >> 1)
        {
          sub_23EBAED30(v9 > 1, v10 + 1, 1);
          v3 = v19;
        }
        v4 += 4;
        *(_QWORD *)(v3 + 16) = v10 + 1;
        v11 = (_QWORD *)(v3 + 32 * v10);
        v11[4] = v6;
        v11[5] = v5;
        v11[6] = v8;
        v11[7] = v7;
        --v2;
      }
      while (v2);
    }
    else if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
      v17 = MEMORY[0x24BEE4B00];
      goto LABEL_15;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7490);
    v17 = sub_23EC2EC30();
LABEL_15:
    v19 = v17;
    v18 = (_QWORD *)swift_bridgeObjectRetain();
    sub_23EBAF698(v18, 1, &v19);
    swift_bridgeObjectRelease();
    return v19;
  }
  if (qword_25433FAE8 != -1)
    swift_once();
  v12 = sub_23EC2E684();
  __swift_project_value_buffer(v12, (uint64_t)qword_25433FC80);
  v13 = sub_23EC2E66C();
  v14 = sub_23EC2EA08();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_23EB9F000, v13, v14, "No Alternate Supplier name found in config.", v15, 2u);
    MEMORY[0x24265B940](v15, -1, -1);
  }

  return 0;
}

uint64_t sub_23EBA8B34(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 240);
  if (!v3)
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v18 = sub_23EC2E684();
    __swift_project_value_buffer(v18, (uint64_t)qword_25433FC80);
    v19 = sub_23EC2E66C();
    v20 = sub_23EC2EA08();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_23EB9F000, v19, v20, "No Alternate Supplier name found in config.", v21, 2u);
      MEMORY[0x24265B940](v21, -1, -1);
    }

    return 0;
  }
  v6 = *(_QWORD *)(v3 + 16);
  if (!v6)
  {
LABEL_10:
    if (qword_25433FAE8 != -1)
      swift_once();
    v10 = sub_23EC2E684();
    __swift_project_value_buffer(v10, (uint64_t)qword_25433FC80);
    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23EB9F000, v11, v12, "Could not locate Alternate Supplier id in Utility Config.", v13, 2u);
      MEMORY[0x24265B940](v13, -1, -1);
    }

    if (qword_25433FAA0 != -1)
      swift_once();
    if (byte_25433FC18 == 1)
    {
      swift_bridgeObjectRetain_n();
      v14 = sub_23EC2E66C();
      v15 = sub_23EC2EA08();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v23 = v17;
        *(_DWORD *)v16 = 136315138;
        swift_bridgeObjectRetain();
        sub_23EBAE6D4(a1, a2, &v23);
        sub_23EC2EA68();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23EB9F000, v14, v15, "Missing Alternate Supplier ID: %s", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v17, -1, -1);
        MEMORY[0x24265B940](v16, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    return 0;
  }
  v7 = v3 + 56;
  while (1)
  {
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_QWORD *)(v7 - 24) == a1 && *(_QWORD *)(v7 - 16) == a2;
    if (v9 || (sub_23EC2ED38() & 1) != 0)
      break;
    v7 += 32;
    if (!--v6)
      goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_23EBA8F30()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;
  uint64_t v31;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 112) != 1)
    return 0;
  result = MEMORY[0x24BEE4AF8];
  v31 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 152);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v21 = (objc_class *)type metadata accessor for TAFField();
    swift_bridgeObjectRetain();
    v4 = 0;
    v22 = v2;
    do
    {
      v29 = v3;
      v5 = v2 + v4;
      v7 = *(_QWORD *)(v2 + v4 + 32);
      v6 = *(_QWORD *)(v2 + v4 + 40);
      v8 = *(_QWORD *)(v2 + v4 + 48);
      v9 = *(_QWORD *)(v5 + 56);
      v10 = *(_QWORD *)(v5 + 64);
      v11 = *(_QWORD *)(v5 + 72);
      v12 = *(_QWORD *)(v5 + 104);
      v23 = *(_QWORD *)(v5 + 96);
      v24 = *(_BYTE *)(v5 + 128);
      v25 = *(_QWORD *)(v5 + 136);
      v13 = *(_QWORD *)(v5 + 160);
      v27 = *(_QWORD *)(v5 + 144);
      v28 = *(_QWORD *)(v5 + 152);
      v26 = (*(_BYTE *)(v5 + 168) == 2) | *(_BYTE *)(v5 + 168);
      v14 = objc_allocWithZone(v21);
      v15 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_type];
      *v15 = v7;
      v15[1] = v6;
      v16 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_label];
      *v16 = v8;
      v16[1] = v9;
      v17 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_formKey];
      *v17 = v10;
      v17[1] = v11;
      v18 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_hintText];
      *v18 = 0;
      v18[1] = 0xE000000000000000;
      v19 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_textContextType];
      *v19 = v23;
      v19[1] = v12;
      v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_isSecure] = v24;
      *(_QWORD *)&v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_maxCharacterCount] = v25;
      *(_QWORD *)&v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_minCharacterCount] = v27;
      v20 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_regex];
      *v20 = v28;
      v20[1] = v13;
      v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_required] = v26 & 1;
      v30.receiver = v14;
      v30.super_class = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v30, sel_init);
      MEMORY[0x24265AF20]();
      if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_23EC2E954();
      sub_23EC2E96C();
      sub_23EC2E948();
      v4 += 144;
      v3 = v29 - 1;
      v2 = v22;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease();
    return v31;
  }
  return result;
}

id sub_23EBA9194(void *a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void))
{
  id v6;
  uint64_t v7;
  void *v8;

  v6 = a1;
  v7 = a3();

  if (v7)
  {
    a4();
    v8 = (void *)sub_23EC2E924();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t sub_23EBA9200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  objc_super v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 160);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23EC2EBC4();
    v4 = (objc_class *)type metadata accessor for TAFSection();
    v5 = (uint64_t *)(v1 + 48);
    do
    {
      v7 = *(v5 - 2);
      v6 = *(v5 - 1);
      v8 = *v5;
      v5 += 3;
      v9 = (char *)objc_allocWithZone(v4);
      v10 = &v9[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_header];
      *(_QWORD *)v10 = v7;
      *((_QWORD *)v10 + 1) = v6;
      *(_QWORD *)&v9[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_fields] = v8;
      v12.receiver = v9;
      v12.super_class = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2(&v12, sel_init);
      sub_23EC2EBAC();
      sub_23EC2EBD0();
      sub_23EC2EBDC();
      sub_23EC2EBB8();
      --v2;
    }
    while (v2);
    v3 = v13;
    swift_bridgeObjectRelease();
  }
  return v3;
}

id TAFSection.__allocating_init(header:fields:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_header];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_fields] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t sub_23EBA9464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  unint64_t v18;
  uint64_t v19[2];

  v1 = v0;
  v2 = sub_23EC2E3F0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E3E4();
  v6 = sub_23EC2E3D8();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_25433FAE8 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_25433FC80);
  swift_bridgeObjectRetain_n();
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2EA14();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v19[0] = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    v17 = sub_23EBAE6D4(v6, v8, v19);
    sub_23EC2EA68();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23EB9F000, v10, v11, "OAuth State UUID set to : %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v13, -1, -1);
    MEMORY[0x24265B940](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 88);
  v19[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 80);
  v19[1] = v14;
  v17 = 0x535F4D4F444E4152;
  v18 = 0xEF44495F45544154;
  v16[0] = v6;
  v16[1] = v8;
  sub_23EBAFA74();
  sub_23EC2EA98();
  swift_bridgeObjectRelease();
  sub_23EC2E240();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBA9734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 96);
  result = 3600 * v1;
  if ((unsigned __int128)(v1 * (__int128)3600) >> 64 != (3600 * v1) >> 63)
    __break(1u);
  return result;
}

uint64_t sub_23EBA978C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 104);
  result = 3600 * v1;
  if ((unsigned __int128)(v1 * (__int128)3600) >> 64 != (3600 * v1) >> 63)
    __break(1u);
  return result;
}

uint64_t sub_23EBA9808()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 512);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EBA9844()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 112) == 1)
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 168);
  if (qword_25433FAC0 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_25433FC38);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Current Utility does not support TAF Flow. Check your code!", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  return 0;
}

id sub_23EBA9968()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  objc_class *v24;
  char *v25;
  char *v26;
  char *v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  objc_super v34;
  objc_super v35;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 248);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 256);
  v31 = v2;
  v32 = v1[35];
  v30 = v1[36];
  v5 = v1[2];
  v4 = v1[3];
  v6 = (objc_class *)type metadata accessor for UtilityArtwork();
  v7 = (char *)objc_allocWithZone(v6);
  v8 = &v7[OBJC_IVAR____TtC19HomeUtilityServices14UtilityArtwork_icon];
  *(_QWORD *)v8 = v5;
  *((_QWORD *)v8 + 1) = v4;
  v35.receiver = v7;
  v35.super_class = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = objc_msgSendSuper2(&v35, sel_init);
  v10 = v1[55];
  v9 = v1[56];
  v12 = v1[57];
  v11 = v1[58];
  v13 = v1[59];
  v14 = v1[60];
  v15 = v1[61];
  v16 = v1[62];
  v17 = (objc_class *)type metadata accessor for UtilitySupport();
  v18 = (char *)objc_allocWithZone(v17);
  v19 = &v18[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServicePhone];
  *(_QWORD *)v19 = v10;
  *((_QWORD *)v19 + 1) = v9;
  v20 = &v18[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceEmail];
  *(_QWORD *)v20 = v12;
  *((_QWORD *)v20 + 1) = v11;
  v21 = &v18[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceSMS];
  *(_QWORD *)v21 = v13;
  *((_QWORD *)v21 + 1) = v14;
  v22 = &v18[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceBusinessChat];
  *(_QWORD *)v22 = v15;
  *((_QWORD *)v22 + 1) = v16;
  v34.receiver = v18;
  v34.super_class = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = objc_msgSendSuper2(&v34, sel_init);
  v24 = (objc_class *)type metadata accessor for UtilityOrganization();
  v25 = (char *)objc_allocWithZone(v24);
  v26 = &v25[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_name];
  *(_QWORD *)v26 = v31;
  *((_QWORD *)v26 + 1) = v3;
  v27 = &v25[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_website];
  *(_QWORD *)v27 = v32;
  *((_QWORD *)v27 + 1) = v30;
  *(_QWORD *)&v25[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork] = v29;
  *(_QWORD *)&v25[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support] = v23;
  v33.receiver = v25;
  v33.super_class = v24;
  return objc_msgSendSuper2(&v33, sel_init);
}

id UtilityArtwork.__allocating_init(icon:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC19HomeUtilityServices14UtilityArtwork_icon];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id UtilitySupport.__allocating_init(customerServicePhone:customerServiceEmail:customerServiceSMS:customerServiceBusinessChat:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  objc_super v23;

  v17 = (char *)objc_allocWithZone(v8);
  v18 = &v17[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServicePhone];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  v19 = &v17[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceEmail];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  v20 = &v17[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceSMS];
  *(_QWORD *)v20 = a5;
  *((_QWORD *)v20 + 1) = a6;
  v21 = &v17[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceBusinessChat];
  *(_QWORD *)v21 = a7;
  *((_QWORD *)v21 + 1) = a8;
  v23.receiver = v17;
  v23.super_class = v8;
  return objc_msgSendSuper2(&v23, sel_init);
}

id UtilityOrganization.__allocating_init(name:website:artwork:support:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_name];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_website];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  *(_QWORD *)&v13[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork] = a5;
  *(_QWORD *)&v13[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_23EBA9CF4()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 216))
    return 60;
  else
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 208);
}

uint64_t sub_23EBA9D30()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 233) & 1;
}

uint64_t sub_23EBA9D68()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 232))
    return 0;
  else
    return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config + 224);
}

uint64_t sub_23EBA9D88()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_23EBA9DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config;
  if (*(_BYTE *)(v1 + 112) != 1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_23EC2FB70;
  v3 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v2 + 40) = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_23EBA9E5C;
  return sub_23EBF35CC(v2, 0);
}

uint64_t sub_23EBA9E5C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v2)
  {

    return (*(uint64_t (**)(_QWORD))(v7 + 8))(0);
  }
  else
  {
    *(_QWORD *)(v6 + 40) = a2;
    *(_QWORD *)(v6 + 48) = a1;
    return swift_task_switch();
  }
}

uint64_t sub_23EBA9EFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease();
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v3 != 0);
}

uint64_t sub_23EBAA064(const void *a1, void *a2)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_23EBAA0DC;
  v5[2] = v4;
  return swift_task_switch();
}

uint64_t sub_23EBAA0DC(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc();

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

void UtilityConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAA1A8()
{
  return 1;
}

uint64_t sub_23EBAA1B4()
{
  return sub_23EC2EDBC();
}

uint64_t sub_23EBAA1DC()
{
  return 0x6769666E6F63;
}

uint64_t sub_23EBAA1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6769666E6F63 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_23EBAA27C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23EBAA288()
{
  sub_23EBAFB38();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAA2B0()
{
  sub_23EBAFB38();
  return sub_23EC2EE04();
}

id UtilityConfiguration.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityConfiguration);
}

uint64_t sub_23EBAA324(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[544];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7548);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFB38();
  sub_23EC2EDE0();
  memcpy(v10, (const void *)(v2 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config), sizeof(v10));
  sub_23EBAFB7C();
  sub_23EC2ED08();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

void *UtilityConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityConfiguration.init(from:)(a1);
}

void *UtilityConfiguration.init(from:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v12;
  uint64_t v13;
  objc_super v14;
  _BYTE v15[544];
  uint64_t v16;

  v2 = v1;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7560);
  v4 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFB38();
  v8 = v2;
  v9 = v16;
  sub_23EC2EDD4();
  if (v9)
  {

    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    type metadata accessor for UtilityConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_23EBAFBC0();
    v10 = v13;
    sub_23EC2ECA8();
    memcpy(&v8[OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config], v15, 0x220uLL);

    v12 = (objc_class *)type metadata accessor for UtilityConfiguration();
    v14.receiver = v8;
    v14.super_class = v12;
    v7 = objc_msgSendSuper2(&v14, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_23EBAA624@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityConfiguration, (uint64_t (*)(uint64_t))UtilityConfiguration.init(from:), a2);
}

uint64_t sub_23EBAA648(_QWORD *a1)
{
  return sub_23EBAA324(a1);
}

uint64_t UtilityOrganization.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityOrganization.website.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_website);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityOrganization.artwork.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork);
}

id UtilityOrganization.support.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support);
}

id UtilityOrganization.init(name:website:artwork:support:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = &v6[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_name];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  v8 = &v6[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_website];
  *(_QWORD *)v8 = a3;
  *((_QWORD *)v8 + 1) = a4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork] = a5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support] = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for UtilityOrganization();
  return objc_msgSendSuper2(&v10, sel_init);
}

id UtilityOrganization.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void UtilityOrganization.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

BOOL sub_23EBAA7D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23EBAA7F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBAA81C + 4 * byte_23EC300D0[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_23EBAA81C()
{
  return 0x65746973626577;
}

uint64_t sub_23EBAA834()
{
  return 0x6B726F77747261;
}

uint64_t sub_23EBAA84C()
{
  return 0x74726F70707573;
}

uint64_t sub_23EBAA864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBAFEBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EBAA888(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23EBAA894()
{
  sub_23EBAFC04();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAA8BC()
{
  sub_23EBAFC04();
  return sub_23EC2EE04();
}

id UtilityOrganization.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityOrganization);
}

uint64_t sub_23EBAA950(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7570);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFC04();
  sub_23EC2EDE0();
  LOBYTE(v11) = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    sub_23EC2ECE4();
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork);
    HIBYTE(v10) = 2;
    type metadata accessor for UtilityArtwork();
    sub_23EBAFC48(&qword_256DB7580, type metadata accessor for UtilityArtwork, (uint64_t)&protocol conformance descriptor for UtilityArtwork);
    sub_23EC2ED08();
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support);
    HIBYTE(v10) = 3;
    type metadata accessor for UtilitySupport();
    sub_23EBAFC48(&qword_256DB7588, type metadata accessor for UtilitySupport, (uint64_t)&protocol conformance descriptor for UtilitySupport);
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id UtilityOrganization.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityOrganization.init(from:)(a1);
}

id UtilityOrganization.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  objc_super v22;
  char v23;
  uint64_t v24;

  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7590);
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBAFC04();
  v8 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
    v18 = v8;

    type metadata accessor for UtilityOrganization();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v24) = 0;
    v9 = sub_23EC2EC84();
    v11 = v8;
    v12 = (uint64_t *)&v8[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_name];
    *v12 = v9;
    v12[1] = v13;
    LOBYTE(v24) = 1;
    v14 = sub_23EC2EC84();
    v15 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_website];
    *v15 = v14;
    v15[1] = v16;
    type metadata accessor for UtilityArtwork();
    v23 = 2;
    sub_23EBAFC48(&qword_256DB7598, type metadata accessor for UtilityArtwork, (uint64_t)&protocol conformance descriptor for UtilityArtwork);
    sub_23EC2ECA8();
    *(_QWORD *)&v11[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_artwork] = v24;
    type metadata accessor for UtilitySupport();
    v23 = 3;
    sub_23EBAFC48(&qword_256DB75A0, type metadata accessor for UtilitySupport, (uint64_t)&protocol conformance descriptor for UtilitySupport);
    sub_23EC2ECA8();
    *(_QWORD *)&v11[OBJC_IVAR____TtC19HomeUtilityServices19UtilityOrganization_support] = v24;

    v17 = (objc_class *)type metadata accessor for UtilityOrganization();
    v22.receiver = v11;
    v22.super_class = v17;
    v18 = objc_msgSendSuper2(&v22, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  }
  return v18;
}

uint64_t sub_23EBAAEB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityOrganization, (uint64_t (*)(uint64_t))UtilityOrganization.init(from:), a2);
}

uint64_t sub_23EBAAED8(_QWORD *a1)
{
  return sub_23EBAA950(a1);
}

uint64_t UtilityArtwork.icon.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilityArtwork_icon);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityArtwork.init(icon:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;

  v3 = &v2[OBJC_IVAR____TtC19HomeUtilityServices14UtilityArtwork_icon];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for UtilityArtwork();
  return objc_msgSendSuper2(&v5, sel_init);
}

void UtilityArtwork.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAAFC8()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBAB008()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBAB044()
{
  return 1852793705;
}

uint64_t sub_23EBAB054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1852793705 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23EBAB0D8()
{
  sub_23EBAFC84();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAB100()
{
  sub_23EBAFC84();
  return sub_23EC2EE04();
}

id UtilityArtwork.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityArtwork);
}

uint64_t sub_23EBAB148(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75A8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFC84();
  sub_23EC2EDE0();
  sub_23EC2ECE4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id UtilityArtwork.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityArtwork.init(from:)(a1);
}

id UtilityArtwork.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;
  uint64_t v19;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75B8);
  v3 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFC84();
  v7 = v1;
  v8 = v6;
  v9 = v19;
  sub_23EC2EDD4();
  if (v9)
  {

    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    type metadata accessor for UtilityArtwork();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v17;
    v11 = sub_23EC2EC84();
    v13 = (uint64_t *)&v7[OBJC_IVAR____TtC19HomeUtilityServices14UtilityArtwork_icon];
    *v13 = v11;
    v13[1] = v14;

    v15 = (objc_class *)type metadata accessor for UtilityArtwork();
    v18.receiver = v7;
    v18.super_class = v15;
    v8 = objc_msgSendSuper2(&v18, sel_init);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t sub_23EBAB3F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityArtwork, (uint64_t (*)(uint64_t))UtilityArtwork.init(from:), a2);
}

uint64_t sub_23EBAB41C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75A8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFC84();
  sub_23EC2EDE0();
  sub_23EC2ECE4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t UtilitySupport.customerServicePhone.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServicePhone);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySupport.customerServiceEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceEmail);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySupport.customerServiceSMS.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceSMS);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySupport.customerServiceBusinessChat.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceBusinessChat);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilitySupport.init(customerServicePhone:customerServiceEmail:customerServiceSMS:customerServiceBusinessChat:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  objc_super v14;

  v9 = &v8[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServicePhone];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  v10 = &v8[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceEmail];
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = a4;
  v11 = &v8[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceSMS];
  *(_QWORD *)v11 = a5;
  *((_QWORD *)v11 + 1) = a6;
  v12 = &v8[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceBusinessChat];
  *(_QWORD *)v12 = a7;
  *((_QWORD *)v12 + 1) = a8;
  v14.receiver = v8;
  v14.super_class = (Class)type metadata accessor for UtilitySupport();
  return objc_msgSendSuper2(&v14, sel_init);
}

void UtilitySupport.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAB6B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBAB6F0 + 4 * byte_23EC300D4[a1]))(0xD000000000000014, 0x800000023EC37AB0);
}

uint64_t sub_23EBAB724()
{
  unsigned __int8 *v0;

  return sub_23EBAB6B8(*v0);
}

uint64_t sub_23EBAB72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB0064(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBAB750()
{
  sub_23EBAFCC8();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAB778()
{
  sub_23EBAFCC8();
  return sub_23EC2EE04();
}

id UtilitySupport.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilitySupport);
}

uint64_t sub_23EBAB814(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFCC8();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
    v8[12] = 3;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t UtilitySupport.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilitySupport.init(from:)(a1);
}

unint64_t UtilitySupport.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  objc_class *v25;
  uint64_t v26;
  _QWORD *v27;
  objc_super v28;
  char v29;

  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75D0);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v8 = sub_23EBAFCC8();
  v9 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);

    type metadata accessor for UtilitySupport();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v29 = 0;
    v10 = v26;
    v11 = sub_23EC2EC84();
    v13 = v9;
    v14 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServicePhone];
    *v14 = v11;
    v14[1] = v15;
    v29 = 1;
    v16 = sub_23EC2EC84();
    v17 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceEmail];
    *v17 = v16;
    v17[1] = v18;
    v29 = 2;
    v19 = sub_23EC2EC84();
    v20 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceSMS];
    *v20 = v19;
    v20[1] = v21;
    v29 = 3;
    v22 = sub_23EC2EC84();
    v23 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilitySupport_customerServiceBusinessChat];
    *v23 = v22;
    v23[1] = v24;

    v25 = (objc_class *)type metadata accessor for UtilitySupport();
    v28.receiver = v13;
    v28.super_class = v25;
    v8 = (unint64_t)objc_msgSendSuper2(&v28, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
  }
  return v8;
}

uint64_t sub_23EBABCB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilitySupport, (uint64_t (*)(uint64_t))UtilitySupport.init(from:), a2);
}

uint64_t sub_23EBABCD4(_QWORD *a1)
{
  return sub_23EBAB814(a1);
}

uint64_t TAFField.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_type);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_label);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.formKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_formKey);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.hintText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_hintText);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.textContextType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_textContextType);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.isSecure.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_isSecure);
}

uint64_t TAFField.maxCharacterCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_maxCharacterCount);
}

uint64_t TAFField.minCharacterCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_minCharacterCount);
}

id sub_23EBABEB4()
{
  void *v0;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TAFField.regex.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_regex);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFField.required.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices8TAFField_required);
}

id sub_23EBABF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  objc_super v22;

  v15 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_type];
  *v15 = a1;
  v15[1] = a2;
  v16 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_label];
  *v16 = a3;
  v16[1] = a4;
  v17 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_formKey];
  *v17 = a5;
  v17[1] = a6;
  v18 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_hintText];
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  v19 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_textContextType];
  *v19 = a7;
  v19[1] = a8;
  v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_isSecure] = a9;
  *(_QWORD *)&v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_maxCharacterCount] = a10;
  *(_QWORD *)&v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_minCharacterCount] = a11;
  v20 = &v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_regex];
  *v20 = a12;
  v20[1] = a13;
  v14[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_required] = a14;
  v22.receiver = v14;
  v22.super_class = (Class)type metadata accessor for TAFField();
  return objc_msgSendSuper2(&v22, sel_init);
}

void TAFField.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAC174(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBAC1A0 + 4 * byte_23EC300D8[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_23EBAC1A0()
{
  return 0x6C6562616CLL;
}

uint64_t sub_23EBAC1B4()
{
  return 0x79654B6D726F66;
}

uint64_t sub_23EBAC1CC()
{
  return 0x74786554746E6968;
}

uint64_t sub_23EBAC1E4()
{
  return 0x746E6F4374786574;
}

uint64_t sub_23EBAC208()
{
  return 0x6572756365537369;
}

unint64_t sub_23EBAC220()
{
  return 0xD000000000000011;
}

uint64_t sub_23EBAC248()
{
  return 0x7865676572;
}

uint64_t sub_23EBAC25C()
{
  return 0x6465726975716572;
}

uint64_t sub_23EBAC274()
{
  unsigned __int8 *v0;

  return sub_23EBAC174(*v0);
}

uint64_t sub_23EBAC27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB01F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EBAC2A0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_23EBAC2AC()
{
  sub_23EBAFD0C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAC2D4()
{
  sub_23EBAFD0C();
  return sub_23EC2EE04();
}

id TAFField.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for TAFField);
}

uint64_t sub_23EBAC398(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFD0C();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
    v8[12] = 3;
    sub_23EC2ECE4();
    v8[11] = 4;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECF0();
    v8[9] = 6;
    sub_23EC2ECFC();
    v8[8] = 7;
    sub_23EC2ECFC();
    v8[7] = 8;
    sub_23EC2ECE4();
    v8[6] = 9;
    sub_23EC2ECF0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void (**TAFField.__allocating_init(from:)(_QWORD *a1))(char *, uint64_t)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return TAFField.init(from:)(a1);
}

void (**TAFField.init(from:)(_QWORD *a1))(char *, uint64_t)
{
  void *v1;
  uint64_t v2;
  void (**v4)(char *, uint64_t);
  uint64_t v5;
  char *v6;
  void (**v7)(char *, uint64_t);
  uint64_t v8;
  void *v9;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  void *v30;
  objc_class *v31;
  uint64_t v32;
  char *v33;
  objc_super v34;
  char v35;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB75E8);
  v4 = *(void (***)(char *, uint64_t))(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFD0C();
  v33 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    v9 = v33;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for TAFField();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v7 = v4;
    v35 = 0;
    v8 = sub_23EC2EC84();
    v11 = v33;
    v12 = (uint64_t *)&v33[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_type];
    *v12 = v8;
    v12[1] = v13;
    v35 = 1;
    v14 = sub_23EC2EC84();
    v15 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_label];
    *v15 = v14;
    v15[1] = v16;
    v35 = 2;
    v17 = sub_23EC2EC84();
    v18 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_formKey];
    *v18 = v17;
    v18[1] = v19;
    v35 = 3;
    v20 = sub_23EC2EC84();
    v21 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_hintText];
    *v21 = v20;
    v21[1] = v22;
    v35 = 4;
    v23 = sub_23EC2EC84();
    v24 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_textContextType];
    *v24 = v23;
    v24[1] = v25;
    v35 = 5;
    v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_isSecure] = sub_23EC2EC90() & 1;
    v35 = 6;
    *(_QWORD *)&v11[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_maxCharacterCount] = sub_23EC2EC9C();
    v35 = 7;
    *(_QWORD *)&v33[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_minCharacterCount] = sub_23EC2EC9C();
    v35 = 8;
    v26 = sub_23EC2EC84();
    v27 = (uint64_t *)&v33[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_regex];
    *v27 = v26;
    v27[1] = v28;
    v35 = 9;
    v29 = sub_23EC2EC90();
    v30 = v33;
    v33[OBJC_IVAR____TtC19HomeUtilityServices8TAFField_required] = v29 & 1;

    v31 = (objc_class *)type metadata accessor for TAFField();
    v34.receiver = v30;
    v34.super_class = v31;
    v4 = (void (**)(char *, uint64_t))objc_msgSendSuper2(&v34, sel_init);
    v7[1](v6, v32);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v4;
}

uint64_t sub_23EBACC00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for TAFField, (uint64_t (*)(uint64_t))TAFField.init(from:), a2);
}

uint64_t sub_23EBACC24(_QWORD *a1)
{
  return sub_23EBAC398(a1);
}

id TAFAuthorizationField.__allocating_init(formKey:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_formKey];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v11 = &v9[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_value];
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, sel_init);
}

id TAFAuthorizationField.init(formKey:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = &v4[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_formKey];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v6 = &v4[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_value];
  *(_QWORD *)v6 = a3;
  *((_QWORD *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for TAFAuthorizationField();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t TAFAuthorizationField.formKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_formKey);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFAuthorizationField.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_value);
  swift_bridgeObjectRetain();
  return v1;
}

void TAFAuthorizationField.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBACDD8()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x79654B6D726F66;
}

uint64_t sub_23EBACE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB05FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBACE34()
{
  sub_23EBAFD70();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBACE5C()
{
  sub_23EBAFD70();
  return sub_23EC2EE04();
}

id TAFAuthorizationField.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for TAFAuthorizationField);
}

uint64_t sub_23EBACED0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7600);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFD70();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

id TAFAuthorizationField.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return TAFAuthorizationField.init(from:)(a1);
}

id TAFAuthorizationField.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  objc_class *v19;
  uint64_t v20;
  char *v21;
  objc_super v22;
  char v23;

  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7610);
  v4 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFD70();
  v21 = v1;
  v8 = v7;
  sub_23EC2EDD4();
  if (v2)
  {
    v11 = v21;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for TAFAuthorizationField();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v23 = 0;
    v9 = v20;
    v10 = sub_23EC2EC84();
    v13 = v21;
    v14 = (uint64_t *)&v21[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_formKey];
    *v14 = v10;
    v14[1] = v15;
    v23 = 1;
    v16 = sub_23EC2EC84();
    v17 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21TAFAuthorizationField_value];
    *v17 = v16;
    v17[1] = v18;

    v19 = (objc_class *)type metadata accessor for TAFAuthorizationField();
    v22.receiver = v13;
    v22.super_class = v19;
    v8 = objc_msgSendSuper2(&v22, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t sub_23EBAD228@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for TAFAuthorizationField, (uint64_t (*)(uint64_t))TAFAuthorizationField.init(from:), a2);
}

uint64_t sub_23EBAD24C(_QWORD *a1)
{
  return sub_23EBACED0(a1);
}

uint64_t TAFSection.header.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_header);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TAFSection.fields.getter()
{
  return swift_bridgeObjectRetain();
}

id TAFSection.init(header:fields:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_header];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_fields] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for TAFSection();
  return objc_msgSendSuper2(&v6, sel_init);
}

void TAFSection.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAD358()
{
  _BYTE *v0;

  if (*v0)
    return 0x73646C656966;
  else
    return 0x726564616568;
}

uint64_t sub_23EBAD384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB06E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBAD3A8()
{
  sub_23EBAFDB4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAD3D0()
{
  sub_23EBAFDB4();
  return sub_23EC2EE04();
}

id TAFSection.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for TAFSection);
}

uint64_t sub_23EBAD440(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7618);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBAFDB4();
  sub_23EC2EDE0();
  v12 = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_fields);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBAFDF8(&qword_25433FB28, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id TAFSection.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return TAFSection.init(from:)(a1);
}

id TAFSection.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  objc_super v20;
  char v21;
  uint64_t v22;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7628);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBAFDB4();
  v19 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    v16 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);

    type metadata accessor for TAFSection();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    LOBYTE(v22) = 0;
    v9 = v17;
    v10 = sub_23EC2EC84();
    v12 = v19;
    v13 = (uint64_t *)&v19[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_header];
    *v13 = v10;
    v13[1] = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    v21 = 1;
    sub_23EBAFDF8((unint64_t *)&unk_25433FB30, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    *(_QWORD *)&v12[OBJC_IVAR____TtC19HomeUtilityServices10TAFSection_fields] = v22;

    v15 = (objc_class *)type metadata accessor for TAFSection();
    v20.receiver = v12;
    v20.super_class = v15;
    v16 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  }
  return v16;
}

uint64_t sub_23EBAD810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for TAFSection, (uint64_t (*)(uint64_t))TAFSection.init(from:), a2);
}

uint64_t sub_23EBAD834(_QWORD *a1)
{
  return sub_23EBAD440(a1);
}

uint64_t sub_23EBAD854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  BOOL v5;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor + 16);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor + 24);
  v3 = v1 == 5459283 && v2 == 0xE300000000000000;
  if (v3 || (sub_23EC2ED38() & 1) != 0)
    return 1;
  v5 = v1 == 0x4C49414D45 && v2 == 0xE500000000000000;
  if (v5 || (sub_23EC2ED38() & 1) != 0)
    return 0;
  if (v1 == 0xD000000000000010 && v2 == 0x800000023EC37E60 || (sub_23EC2ED38() & 1) != 0)
    return 3;
  if (v1 == 1280065859 && v2 == 0xE400000000000000)
    return 2;
  if ((sub_23EC2ED38() & 1) != 0)
    return 2;
  return 4;
}

uint64_t sub_23EBAD9A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor + 32);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_23EBAD9E0()
{
  unint64_t result;

  result = sub_23EC261B8();
  if (!result)
    return sub_23EBA740C(MEMORY[0x24BEE4AF8]);
  return result;
}

id TAFVerificationFactor.__allocating_init(dict:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  char *v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  objc_super v20;
  _OWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_23EC2E714();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21[0] = 0;
  v2 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, v1, 0, v21);

  v3 = *(id *)&v21[0];
  if (v2)
  {
    v4 = sub_23EC2E2D0();
    v6 = v5;

    sub_23EC2DFC4();
    swift_allocObject();
    sub_23EC2DFB8();
    sub_23EBAFE58();
    sub_23EC2DFAC();
    swift_release();
    v18 = v21[1];
    v19 = v21[0];
    v16 = v21[3];
    v17 = v21[2];
    v9 = v22;
    v10 = v23;
    v11 = (objc_class *)type metadata accessor for TAFVerificationFactor();
    v12 = (char *)objc_allocWithZone(v11);
    v13 = &v12[OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor];
    *(_OWORD *)v13 = v19;
    *((_OWORD *)v13 + 1) = v18;
    *((_OWORD *)v13 + 2) = v17;
    *((_OWORD *)v13 + 3) = v16;
    *((_QWORD *)v13 + 8) = v9;
    *((_QWORD *)v13 + 9) = v10;
    v20.receiver = v12;
    v20.super_class = v11;
    v14 = objc_msgSendSuper2(&v20, sel_init);
    sub_23EBA3EDC(v4, v6);
  }
  else
  {
    v7 = v3;
    v8 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    return 0;
  }
  return v14;
}

void TAFVerificationFactor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TAFVerificationFactor.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for TAFVerificationFactor);
}

unint64_t TAFVerificationFactorType.init(rawValue:)(unint64_t a1)
{
  return sub_23EBB07C4(a1);
}

unint64_t sub_23EBADD34@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_23EBB07C4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_23EBADD64()
{
  sub_23EBB2038();
  return sub_23EC2E90C();
}

uint64_t sub_23EBADDC0()
{
  sub_23EBB2038();
  return sub_23EC2E8F4();
}

uint64_t UtilityRegion.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityRegion.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityRegion.shortName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityRegion.__allocating_init(name:identifier:shortName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v13[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v13;
  v18.super_class = v6;
  return objc_msgSendSuper2(&v18, sel_init);
}

id UtilityRegion.init(name:identifier:shortName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v7 = &v6[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  v8 = &v6[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier];
  *(_QWORD *)v8 = a3;
  *((_QWORD *)v8 + 1) = a4;
  v9 = &v6[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName];
  *(_QWORD *)v9 = a5;
  *((_QWORD *)v9 + 1) = a6;
  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for UtilityRegion();
  return objc_msgSendSuper2(&v11, sel_init);
}

void UtilityRegion.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBAE008()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0x6D614E74726F6873;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_23EBAE064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB1988(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EBAE088(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23EBAE094()
{
  sub_23EBB07F4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBAE0BC()
{
  sub_23EBB07F4();
  return sub_23EC2EE04();
}

id UtilityRegion.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityRegion);
}

id sub_23EBAE0F0(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_23EBAE174(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7658);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB07F4();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

id UtilityRegion.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityRegion.init(from:)(a1);
}

id UtilityRegion.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  _QWORD *v25;
  objc_super v26;
  char v27;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7668);
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v25 = a1;
  v8 = __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBB07F4();
  v9 = v1;
  v10 = v8;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);

    type metadata accessor for UtilityRegion();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v27 = 0;
    v11 = v24;
    v12 = sub_23EC2EC84();
    v14 = v9;
    v15 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name];
    *v15 = v12;
    v15[1] = v16;
    v27 = 1;
    v17 = sub_23EC2EC84();
    v18 = (uint64_t *)&v14[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier];
    *v18 = v17;
    v18[1] = v19;
    v27 = 2;
    v20 = sub_23EC2EC84();
    v21 = (uint64_t *)&v14[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName];
    *v21 = v20;
    v21[1] = v22;

    v23 = (objc_class *)type metadata accessor for UtilityRegion();
    v26.receiver = v14;
    v26.super_class = v23;
    v10 = objc_msgSendSuper2(&v26, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  }
  return v10;
}

uint64_t sub_23EBAE568@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityRegion, (uint64_t (*)(uint64_t))UtilityRegion.init(from:), a2);
}

uint64_t sub_23EBAE58C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  id v8;
  uint64_t result;

  v8 = objc_allocWithZone((Class)a2());
  result = a3(a1);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_23EBAE5E0(_QWORD *a1)
{
  return sub_23EBAE174(a1);
}

uint64_t sub_23EBAE600(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_23EBAE610(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_23EBAE644(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23EBAE664(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_23EBAE6D4(v6, v7, a3);
  v8 = *a1 + 8;
  sub_23EC2EA68();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_23EBAE6D4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23EBAE7A4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23EBA55A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23EBA55A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_23EBAE7A4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23EC2EA74();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23EBAE95C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23EC2EBA0();
  if (!v8)
  {
    sub_23EC2EBF4();
    __break(1u);
LABEL_17:
    result = sub_23EC2EC3C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23EBAE95C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23EBAE9F0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23EBAEB64(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23EBAEB64(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23EBAE9F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23EBE99C0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23EC2EB58();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23EC2EBF4();
      __break(1u);
LABEL_10:
      v2 = sub_23EC2E858();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23EC2EC3C();
    __break(1u);
LABEL_14:
    result = sub_23EC2EBF4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23EBAEB64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBE0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

_BYTE **sub_23EBAECB0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_23EBAECC0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23EBAED68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23EBAECDC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23EBAEED0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23EBAECF8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23EBAF01C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23EBAED14(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23EBAF204(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23EBAED30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23EBAF388(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23EBAED4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23EBAF510(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23EBAED68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EBAEED0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBE0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EBAF01C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBB8);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25433F920) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25433F920) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EBAF204(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBC0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EBAF388(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7950);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EBAF510(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7918);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7920);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

void sub_23EBAF698(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v45 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_23EBE9A24(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_23EC22748();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    v22 = (_QWORD *)(v20[7] + 16 * v11);
    *v22 = v45;
    v22[1] = v8;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v25;
    v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = a1 + 11;
    while (1)
    {
      v29 = *(v27 - 3);
      v28 = *(v27 - 2);
      v30 = *(v27 - 1);
      v31 = *v27;
      v32 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = sub_23EBE9A24(v29, v28);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v24 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v24)
        break;
      v38 = v34;
      if (v32[3] < v37)
      {
        sub_23EC21E00(v37, 1);
        v33 = sub_23EBE9A24(v29, v28);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_25;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v29;
      v41[1] = v28;
      v42 = (_QWORD *)(v40[7] + 16 * v33);
      *v42 = v30;
      v42[1] = v31;
      v43 = v40[2];
      v24 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v24)
        goto LABEL_24;
      v27 += 4;
      v40[2] = v44;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_23EC21E00(v14, a2 & 1);
  v16 = sub_23EBE9A24(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_23EC2ED68();
  __break(1u);
LABEL_26:
  sub_23EC2EB4C();
  sub_23EC2E834();
  sub_23EC2EBE8();
  sub_23EC2E834();
  sub_23EC2EC00();
  __break(1u);
}

uint64_t type metadata accessor for TAFField()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TAFSection()
{
  return objc_opt_self();
}

unint64_t sub_23EBAFA74()
{
  unint64_t result;

  result = qword_25433FBF8;
  if (!qword_25433FBF8)
  {
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25433FBF8);
  }
  return result;
}

uint64_t type metadata accessor for UtilityArtwork()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UtilitySupport()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UtilityOrganization()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UtilityConfiguration()
{
  return objc_opt_self();
}

unint64_t sub_23EBAFB38()
{
  unint64_t result;

  result = qword_256DB7550;
  if (!qword_256DB7550)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30E44, &type metadata for UtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7550);
  }
  return result;
}

unint64_t sub_23EBAFB7C()
{
  unint64_t result;

  result = qword_256DB7558;
  if (!qword_256DB7558)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34B90, &type metadata for InternalUtilityConfig);
    atomic_store(result, (unint64_t *)&qword_256DB7558);
  }
  return result;
}

unint64_t sub_23EBAFBC0()
{
  unint64_t result;

  result = qword_256DB7568;
  if (!qword_256DB7568)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34B68, &type metadata for InternalUtilityConfig);
    atomic_store(result, (unint64_t *)&qword_256DB7568);
  }
  return result;
}

unint64_t sub_23EBAFC04()
{
  unint64_t result;

  result = qword_256DB7578;
  if (!qword_256DB7578)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30DF4, &type metadata for UtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7578);
  }
  return result;
}

uint64_t sub_23EBAFC48(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x24265B8B0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBAFC84()
{
  unint64_t result;

  result = qword_256DB75B0;
  if (!qword_256DB75B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30DA4, &type metadata for UtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB75B0);
  }
  return result;
}

unint64_t sub_23EBAFCC8()
{
  unint64_t result;

  result = qword_256DB75C8;
  if (!qword_256DB75C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30D54, &type metadata for UtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB75C8);
  }
  return result;
}

unint64_t sub_23EBAFD0C()
{
  unint64_t result;

  result = qword_256DB75E0;
  if (!qword_256DB75E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30D04, &type metadata for TAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB75E0);
  }
  return result;
}

uint64_t type metadata accessor for TAFAuthorizationField()
{
  return objc_opt_self();
}

unint64_t sub_23EBAFD70()
{
  unint64_t result;

  result = qword_256DB7608;
  if (!qword_256DB7608)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30CB4, &type metadata for TAFAuthorizationField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7608);
  }
  return result;
}

unint64_t sub_23EBAFDB4()
{
  unint64_t result;

  result = qword_256DB7620;
  if (!qword_256DB7620)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30C64, &type metadata for TAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7620);
  }
  return result;
}

uint64_t sub_23EBAFDF8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25433FB20);
    v8 = a2;
    result = MEMORY[0x24265B8B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBAFE58()
{
  unint64_t result;

  result = qword_256DB7638;
  if (!qword_256DB7638)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37064, &type metadata for AuthorizationFactor);
    atomic_store(result, (unint64_t *)&qword_256DB7638);
  }
  return result;
}

uint64_t type metadata accessor for TAFVerificationFactor()
{
  return objc_opt_self();
}

uint64_t sub_23EBAFEBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746973626577 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74726F70707573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23EBB0064(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000023EC37AB0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023EC37AD0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC383D0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000023EC37B10)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23EBB01F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79654B6D726F66 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74786554746E6968 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E6F4374786574 && a2 == 0xEF65707954747865 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6572756365537369 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC38480 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC384A0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7865676572 && a2 == 0xE500000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_23EBB05FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79654B6D726F66 && a2 == 0xE700000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EBB06E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726564616568 && a2 == 0xE600000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_23EBB07C4(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

uint64_t type metadata accessor for UtilityRegion()
{
  return objc_opt_self();
}

unint64_t sub_23EBB07F4()
{
  unint64_t result;

  result = qword_256DB7660;
  if (!qword_256DB7660)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30C14, &type metadata for UtilityRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7660);
  }
  return result;
}

unint64_t sub_23EBB083C()
{
  unint64_t result;

  result = qword_256DB7670;
  if (!qword_256DB7670)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFVerificationFactorType, &type metadata for TAFVerificationFactorType);
    atomic_store(result, (unint64_t *)&qword_256DB7670);
  }
  return result;
}

uint64_t method lookup function for UtilityServices()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static UtilityServices.defaultURLSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t method lookup function for UtilityConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityConfiguration.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of UtilityConfiguration.shortName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of UtilityConfiguration.alternateSuppliers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of UtilityConfiguration.alternateSupplierName(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of UtilityConfiguration.tafFields.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of UtilityConfiguration.tafSections.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of UtilityConfiguration.OAuthURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of UtilityConfiguration.accessTokenValidity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of UtilityConfiguration.refreshTokenValidity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of UtilityConfiguration.termsAndAgreement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of UtilityConfiguration.oneTimePasscodeLength.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of UtilityConfiguration.organizationInformation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of UtilityConfiguration.initialPollDelayInSeconds.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of UtilityConfiguration.missingDataRetryEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of UtilityConfiguration.authorizationRefreshPeriod.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of UtilityConfiguration.trustedAccountFingerprintEnabled()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23EBA78C4;
  return v5();
}

uint64_t dispatch thunk of UtilityConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of UtilityConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t method lookup function for UtilityOrganization()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityOrganization.__allocating_init(name:website:artwork:support:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of UtilityOrganization.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of UtilityOrganization.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for UtilityArtwork()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityArtwork.__allocating_init(icon:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of UtilityArtwork.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of UtilityArtwork.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for UtilitySupport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilitySupport.__allocating_init(customerServicePhone:customerServiceEmail:customerServiceSMS:customerServiceBusinessChat:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for TAFField()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TAFField.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of TAFField.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t method lookup function for TAFAuthorizationField()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TAFAuthorizationField.__allocating_init(formKey:value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for TAFSection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TAFSection.__allocating_init(header:fields:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of TAFSection.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TAFSection.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for TAFVerificationFactor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TAFVerificationFactor.factor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of TAFVerificationFactor.dictionary.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

ValueMetadata *type metadata accessor for TAFVerificationFactorType()
{
  return &type metadata for TAFVerificationFactorType;
}

uint64_t method lookup function for UtilityRegion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityRegion.__allocating_init(name:identifier:shortName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of UtilityRegion.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of UtilityRegion.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for UtilityRegion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBB0D84 + 4 * byte_23EC300E7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBB0DB8 + 4 * byte_23EC300E2[v4]))();
}

uint64_t sub_23EBB0DB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB0DC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB0DC8);
  return result;
}

uint64_t sub_23EBB0DD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB0DDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBB0DE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB0DE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityRegion.CodingKeys()
{
  return &type metadata for UtilityRegion.CodingKeys;
}

ValueMetadata *type metadata accessor for TAFSection.CodingKeys()
{
  return &type metadata for TAFSection.CodingKeys;
}

uint64_t _s19HomeUtilityServices10TAFSectionC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EBB0E68 + 4 * byte_23EC300F1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EBB0E9C + 4 * byte_23EC300EC[v4]))();
}

uint64_t sub_23EBB0E9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB0EA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB0EACLL);
  return result;
}

uint64_t sub_23EBB0EB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB0EC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EBB0EC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB0ECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TAFAuthorizationField.CodingKeys()
{
  return &type metadata for TAFAuthorizationField.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TAFField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TAFField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23EBB0FC4 + 4 * byte_23EC300FB[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23EBB0FF8 + 4 * byte_23EC300F6[v4]))();
}

uint64_t sub_23EBB0FF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB1000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB1008);
  return result;
}

uint64_t sub_23EBB1014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB101CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23EBB1020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB1028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TAFField.CodingKeys()
{
  return &type metadata for TAFField.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilitySupport.CodingKeys()
{
  return &type metadata for UtilitySupport.CodingKeys;
}

uint64_t sub_23EBB1068()
{
  return 0;
}

ValueMetadata *type metadata accessor for UtilityArtwork.CodingKeys()
{
  return &type metadata for UtilityArtwork.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UtilityPeaks.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19HomeUtilityServices14UtilitySupportC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EBB115C + 4 * byte_23EC30105[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EBB1190 + 4 * byte_23EC30100[v4]))();
}

uint64_t sub_23EBB1190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB1198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB11A0);
  return result;
}

uint64_t sub_23EBB11AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB11B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EBB11B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB11C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityOrganization.CodingKeys()
{
  return &type metadata for UtilityOrganization.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AuthTokenRefreshResponse.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s19HomeUtilityServices14UtilityArtworkC10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EBB126C + 4 * byte_23EC3010A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EBB128C + 4 * byte_23EC3010F[v4]))();
}

_BYTE *sub_23EBB126C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EBB128C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBB1294(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBB129C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBB12A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBB12AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UtilityConfiguration.CodingKeys()
{
  return &type metadata for UtilityConfiguration.CodingKeys;
}

unint64_t sub_23EBB12CC()
{
  unint64_t result;

  result = qword_256DB77C0;
  if (!qword_256DB77C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC306E4, &type metadata for UtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77C0);
  }
  return result;
}

unint64_t sub_23EBB1314()
{
  unint64_t result;

  result = qword_256DB77C8;
  if (!qword_256DB77C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3079C, &type metadata for UtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77C8);
  }
  return result;
}

unint64_t sub_23EBB135C()
{
  unint64_t result;

  result = qword_256DB77D0;
  if (!qword_256DB77D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30854, &type metadata for UtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77D0);
  }
  return result;
}

unint64_t sub_23EBB13A4()
{
  unint64_t result;

  result = qword_256DB77D8;
  if (!qword_256DB77D8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3090C, &type metadata for UtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77D8);
  }
  return result;
}

unint64_t sub_23EBB13EC()
{
  unint64_t result;

  result = qword_256DB77E0;
  if (!qword_256DB77E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC309C4, &type metadata for TAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77E0);
  }
  return result;
}

unint64_t sub_23EBB1434()
{
  unint64_t result;

  result = qword_256DB77E8;
  if (!qword_256DB77E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30A7C, &type metadata for TAFAuthorizationField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77E8);
  }
  return result;
}

unint64_t sub_23EBB147C()
{
  unint64_t result;

  result = qword_256DB77F0;
  if (!qword_256DB77F0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30B34, &type metadata for TAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77F0);
  }
  return result;
}

unint64_t sub_23EBB14C4()
{
  unint64_t result;

  result = qword_256DB77F8;
  if (!qword_256DB77F8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30BEC, &type metadata for UtilityRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB77F8);
  }
  return result;
}

unint64_t sub_23EBB150C()
{
  unint64_t result;

  result = qword_256DB7800;
  if (!qword_256DB7800)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30B5C, &type metadata for UtilityRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7800);
  }
  return result;
}

unint64_t sub_23EBB1554()
{
  unint64_t result;

  result = qword_256DB7808;
  if (!qword_256DB7808)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30B84, &type metadata for UtilityRegion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7808);
  }
  return result;
}

unint64_t sub_23EBB159C()
{
  unint64_t result;

  result = qword_256DB7810;
  if (!qword_256DB7810)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30AA4, &type metadata for TAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7810);
  }
  return result;
}

unint64_t sub_23EBB15E4()
{
  unint64_t result;

  result = qword_256DB7818;
  if (!qword_256DB7818)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30ACC, &type metadata for TAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7818);
  }
  return result;
}

unint64_t sub_23EBB162C()
{
  unint64_t result;

  result = qword_256DB7820;
  if (!qword_256DB7820)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC309EC, &type metadata for TAFAuthorizationField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7820);
  }
  return result;
}

unint64_t sub_23EBB1674()
{
  unint64_t result;

  result = qword_256DB7828;
  if (!qword_256DB7828)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30A14, &type metadata for TAFAuthorizationField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7828);
  }
  return result;
}

unint64_t sub_23EBB16BC()
{
  unint64_t result;

  result = qword_256DB7830;
  if (!qword_256DB7830)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30934, &type metadata for TAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7830);
  }
  return result;
}

unint64_t sub_23EBB1704()
{
  unint64_t result;

  result = qword_256DB7838;
  if (!qword_256DB7838)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3095C, &type metadata for TAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7838);
  }
  return result;
}

unint64_t sub_23EBB174C()
{
  unint64_t result;

  result = qword_256DB7840;
  if (!qword_256DB7840)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3087C, &type metadata for UtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7840);
  }
  return result;
}

unint64_t sub_23EBB1794()
{
  unint64_t result;

  result = qword_256DB7848;
  if (!qword_256DB7848)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC308A4, &type metadata for UtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7848);
  }
  return result;
}

unint64_t sub_23EBB17DC()
{
  unint64_t result;

  result = qword_256DB7850;
  if (!qword_256DB7850)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC307C4, &type metadata for UtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7850);
  }
  return result;
}

unint64_t sub_23EBB1824()
{
  unint64_t result;

  result = qword_256DB7858;
  if (!qword_256DB7858)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC307EC, &type metadata for UtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7858);
  }
  return result;
}

unint64_t sub_23EBB186C()
{
  unint64_t result;

  result = qword_256DB7860;
  if (!qword_256DB7860)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3070C, &type metadata for UtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7860);
  }
  return result;
}

unint64_t sub_23EBB18B4()
{
  unint64_t result;

  result = qword_256DB7868;
  if (!qword_256DB7868)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30734, &type metadata for UtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7868);
  }
  return result;
}

unint64_t sub_23EBB18FC()
{
  unint64_t result;

  result = qword_256DB7870;
  if (!qword_256DB7870)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC30654, &type metadata for UtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7870);
  }
  return result;
}

unint64_t sub_23EBB1944()
{
  unint64_t result;

  result = qword_256DB7878;
  if (!qword_256DB7878)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3067C, &type metadata for UtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7878);
  }
  return result;
}

uint64_t sub_23EBB1988(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E74726F6873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23EBB1AE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23EBB1B14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_23EBB1B40()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA724C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_256DB7880 + dword_256DB7880))(v2, v3);
}

uint64_t sub_23EBB1BAC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23EBB1DAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_256DB7890 + dword_256DB7890))(v2, v3, v4);
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_23EBB1E64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_256DB78B0 + dword_256DB78B0))(v2, v3, v4);
}

uint64_t sub_23EBB1EE4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23EBB1F10()
{
  double *v0;
  uint64_t v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)*((_QWORD *)v0 + 4);
  v5 = (void *)*((_QWORD *)v0 + 5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(void *, void *, double, double))((char *)&dword_256DB78D0 + dword_256DB78D0))(v4, v5, v2, v3);
}

uint64_t sub_23EBB1F98()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_23EBB1FC4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA7408;
  return ((uint64_t (*)(void *, void *))((char *)&dword_256DB78F0 + dword_256DB78F0))(v2, v3);
}

unint64_t sub_23EBB2038()
{
  unint64_t result;

  result = qword_256DB7910;
  if (!qword_256DB7910)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFVerificationFactorType, &type metadata for TAFVerificationFactorType);
    atomic_store(result, (unint64_t *)&qword_256DB7910);
  }
  return result;
}

_OWORD *sub_23EBB2080(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23EBB2090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t dispatch thunk of UtilitySupport.__allocating_init(from:)()
{
  return dispatch thunk of UtilityOrganization.__allocating_init(from:)();
}

uint64_t dispatch thunk of TAFAuthorizationField.__allocating_init(from:)()
{
  return dispatch thunk of TAFSection.__allocating_init(from:)();
}

uint64_t dispatch thunk of UtilitySupport.encode(to:)()
{
  return dispatch thunk of UtilityOrganization.encode(to:)();
}

uint64_t dispatch thunk of TAFAuthorizationField.encode(to:)()
{
  return dispatch thunk of TAFSection.encode(to:)();
}

void sub_23EBB216C(char a1)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB21C8()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB2260(char a1)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB22B8()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBB2344()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB23F4(char a1)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB244C()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB24B0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBB24E4()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBB2594(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBB25DC()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBB2654(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBB2698()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBB26E0(uint64_t a1, char a2)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB2734()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB2798(uint64_t a1, char a2)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB27EC()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB2878(uint64_t a1, char a2)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB28D0()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBB2968(uint64_t a1, char a2)
{
  sub_23EC2EDB0();
  __asm { BR              X10 }
}

uint64_t sub_23EBB29A8()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBB2A6C()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

id UtilitySubscriptionResponse.subscription.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_subscription);
}

uint64_t UtilitySubscriptionResponse.authorizationToken.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_authorizationToken);
}

void UtilitySubscriptionResponse.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBB2C24()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x7069726373627573;
}

uint64_t sub_23EBB2C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB9CCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBB2C90()
{
  sub_23EBB2EA4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB2CB8()
{
  sub_23EBB2EA4();
  return sub_23EC2EE04();
}

id UtilitySubscriptionResponse.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilitySubscriptionResponse);
}

uint64_t type metadata accessor for UtilitySubscriptionResponse()
{
  return objc_opt_self();
}

uint64_t sub_23EBB2D48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7968);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB2EA4();
  sub_23EC2EDE0();
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_subscription);
  v10[7] = 0;
  type metadata accessor for UtilitySubscriptionInformation();
  sub_23EBAFC48(&qword_256DB7978, type metadata accessor for UtilitySubscriptionInformation, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionInformation);
  sub_23EC2ED08();
  if (!v2)
  {
    v10[6] = 1;
    sub_23EC2ECB4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23EBB2EA4()
{
  unint64_t result;

  result = qword_256DB7970;
  if (!qword_256DB7970)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31DC8, &type metadata for UtilitySubscriptionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7970);
  }
  return result;
}

uint64_t type metadata accessor for UtilitySubscriptionInformation()
{
  return objc_opt_self();
}

id UtilitySubscriptionResponse.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilitySubscriptionResponse.init(from:)(a1);
}

id UtilitySubscriptionResponse.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  objc_super v21;
  char v22;
  uint64_t v23;

  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7980);
  v4 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB2EA4();
  v20 = v1;
  v8 = v7;
  sub_23EC2EDD4();
  if (v2)
  {
    v11 = v20;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    type metadata accessor for UtilitySubscriptionResponse();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    type metadata accessor for UtilitySubscriptionInformation();
    v22 = 0;
    sub_23EBAFC48(&qword_256DB7988, type metadata accessor for UtilitySubscriptionInformation, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionInformation);
    v10 = v19;
    sub_23EC2ECA8();
    v13 = v20;
    *(_QWORD *)&v20[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_subscription] = v23;
    LOBYTE(v23) = 1;
    v14 = sub_23EC2EC54();
    v15 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_authorizationToken];
    *v15 = v14;
    v15[1] = v16;

    v17 = (objc_class *)type metadata accessor for UtilitySubscriptionResponse();
    v21.receiver = v13;
    v21.super_class = v17;
    v8 = objc_msgSendSuper2(&v21, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

uint64_t sub_23EBB3168@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilitySubscriptionResponse, (uint64_t (*)(uint64_t))UtilitySubscriptionResponse.init(from:), a2);
}

uint64_t sub_23EBB318C(_QWORD *a1)
{
  return sub_23EBB2D48(a1);
}

uint64_t UtilitySubscriptionInformation.subscriptionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_subscriptionID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySubscriptionInformation.state.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_state);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySubscriptionInformation.startDate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_startDate);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilitySubscriptionInformation.serviceLocation.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_serviceLocation);
}

uint64_t UtilitySubscriptionInformation.customerAgreements.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_23EBB33B8(char *a1)
{
  sub_23EBC1214(*a1);
}

void sub_23EBB33C4()
{
  char *v0;

  sub_23EBB216C(*v0);
}

void sub_23EBB33CC()
{
  __asm { BR              X10 }
}

uint64_t sub_23EBB3414()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBB3498(uint64_t a1)
{
  char *v1;

  sub_23EBB2878(a1, *v1);
}

uint64_t sub_23EBB34A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9DD0();
  *a1 = result;
  return result;
}

uint64_t sub_23EBB34D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23EBB3510 + 4 * byte_23EC30ED8[*v0]))();
}

void sub_23EBB3510(_QWORD *a1@<X8>)
{
  *a1 = 0x6574617473;
  a1[1] = 0xE500000000000000;
}

void sub_23EBB3528(_QWORD *a1@<X8>)
{
  *a1 = 0x7461447472617473;
  a1[1] = 0xE900000000000065;
}

void sub_23EBB3548(_QWORD *a1@<X8>)
{
  *a1 = 0x4C65636976726573;
  a1[1] = 0xEF6E6F697461636FLL;
}

void sub_23EBB3570(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x800000023EC37840;
}

uint64_t sub_23EBB3590()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBB35CC + 4 * byte_23EC30EDD[*v0]))(0x7069726373627573, 0xEE0064496E6F6974);
}

uint64_t sub_23EBB35CC()
{
  return 0x6574617473;
}

uint64_t sub_23EBB35E0()
{
  return 0x7461447472617473;
}

uint64_t sub_23EBB35FC()
{
  return 0x4C65636976726573;
}

unint64_t sub_23EBB3620()
{
  return 0xD000000000000012;
}

uint64_t sub_23EBB363C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9DD0();
  *a1 = result;
  return result;
}

void sub_23EBB3668(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23EBB3674()
{
  sub_23EBB39B4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB369C()
{
  sub_23EBB39B4();
  return sub_23EC2EE04();
}

void UtilitySubscriptionInformation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilitySubscriptionInformation.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilitySubscriptionInformation);
}

uint64_t sub_23EBB379C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB79B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB39B4();
  sub_23EC2EDE0();
  LOBYTE(v11) = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    sub_23EC2ECE4();
    LOBYTE(v11) = 2;
    sub_23EC2ECE4();
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_serviceLocation);
    HIBYTE(v10) = 3;
    type metadata accessor for UtilityServiceLocation();
    sub_23EBAFC48(&qword_256DB79C8, type metadata accessor for UtilityServiceLocation, (uint64_t)&protocol conformance descriptor for UtilityServiceLocation);
    sub_23EC2ED08();
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_customerAgreements);
    HIBYTE(v10) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB79D0);
    sub_23EBB3A18();
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23EBB39B4()
{
  unint64_t result;

  result = qword_256DB79C0;
  if (!qword_256DB79C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31D78, &type metadata for UtilitySubscriptionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB79C0);
  }
  return result;
}

uint64_t type metadata accessor for UtilityServiceLocation()
{
  return objc_opt_self();
}

unint64_t sub_23EBB3A18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB79D8;
  if (!qword_256DB79D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB79D0);
    v2 = sub_23EBAFC48(&qword_256DB79E0, type metadata accessor for UtilityCustomerAgreement, (uint64_t)&protocol conformance descriptor for UtilityCustomerAgreement);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB79D8);
  }
  return result;
}

uint64_t type metadata accessor for UtilityCustomerAgreement()
{
  return objc_opt_self();
}

id UtilitySubscriptionInformation.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilitySubscriptionInformation.init(from:)(a1);
}

id UtilitySubscriptionInformation.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  objc_super v25;
  char v26;
  uint64_t v27;

  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB79E8);
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBB39B4();
  v8 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
    v21 = v8;

    type metadata accessor for UtilitySubscriptionInformation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v27) = 0;
    v9 = sub_23EC2EC84();
    v11 = v8;
    v12 = (uint64_t *)&v8[OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_subscriptionID];
    *v12 = v9;
    v12[1] = v13;
    LOBYTE(v27) = 1;
    v14 = sub_23EC2EC84();
    v15 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_state];
    *v15 = v14;
    v15[1] = v16;
    LOBYTE(v27) = 2;
    v17 = sub_23EC2EC84();
    v18 = (uint64_t *)&v11[OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_startDate];
    *v18 = v17;
    v18[1] = v19;
    type metadata accessor for UtilityServiceLocation();
    v26 = 3;
    sub_23EBAFC48(&qword_256DB79F0, type metadata accessor for UtilityServiceLocation, (uint64_t)&protocol conformance descriptor for UtilityServiceLocation);
    sub_23EC2ECA8();
    *(_QWORD *)&v11[OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_serviceLocation] = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB79D0);
    v26 = 4;
    sub_23EBB3E8C();
    sub_23EC2ECA8();
    *(_QWORD *)&v11[OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_customerAgreements] = v27;

    v20 = (objc_class *)type metadata accessor for UtilitySubscriptionInformation();
    v25.receiver = v11;
    v25.super_class = v20;
    v21 = objc_msgSendSuper2(&v25, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
  }
  return v21;
}

unint64_t sub_23EBB3E8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB79F8;
  if (!qword_256DB79F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB79D0);
    v2 = sub_23EBAFC48(&qword_256DB7A00, type metadata accessor for UtilityCustomerAgreement, (uint64_t)&protocol conformance descriptor for UtilityCustomerAgreement);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB79F8);
  }
  return result;
}

uint64_t sub_23EBB3F08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilitySubscriptionInformation, (uint64_t (*)(uint64_t))UtilitySubscriptionInformation.init(from:), a2);
}

uint64_t sub_23EBB3F2C(_QWORD *a1)
{
  return sub_23EBB379C(a1);
}

uint64_t UtilityCustomerAgreement.customerAgreementID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_customerAgreementID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityCustomerAgreement.accountID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_accountID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityCustomerAgreement.programs.getter()
{
  return swift_bridgeObjectRetain();
}

id sub_23EBB4050(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  void *v4;

  a4();
  swift_bridgeObjectRetain();
  v4 = (void *)sub_23EC2E924();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t UtilityCustomerAgreement.meters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23EBB4120()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_23EBB41EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBB4248(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier);
  swift_beginAccess();
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_23EBB42B0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23EBB4434(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBB4470 + 4 * byte_23EC30EE2[a1]))(0xD000000000000013, 0x800000023EC37860);
}

uint64_t sub_23EBB4470()
{
  return 0x49746E756F636361;
}

uint64_t sub_23EBB448C()
{
  return 0x736D6172676F7270;
}

uint64_t sub_23EBB44A4()
{
  return 0x73726574656DLL;
}

unint64_t sub_23EBB44B8()
{
  return 0xD000000000000011;
}

uint64_t sub_23EBB44D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBB4510 + 4 * byte_23EC30EE7[a1]))(0xD000000000000013, 0x800000023EC37860);
}

uint64_t sub_23EBB4510()
{
  return 0x49746E756F636361;
}

uint64_t sub_23EBB452C()
{
  return 0x736D6172676F7270;
}

uint64_t sub_23EBB4544()
{
  return 0x73726574656DLL;
}

unint64_t sub_23EBB4558()
{
  return 0xD000000000000011;
}

void sub_23EBB4574(char *a1)
{
  sub_23EBC13DC(*a1);
}

void sub_23EBB4580()
{
  char *v0;

  sub_23EBB2260(*v0);
}

void sub_23EBB4588(uint64_t a1)
{
  char *v1;

  sub_23EBB2594(a1, *v1);
}

void sub_23EBB4590(uint64_t a1)
{
  char *v1;

  sub_23EBB2798(a1, *v1);
}

uint64_t sub_23EBB4598@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9DD0();
  *a1 = result;
  return result;
}

uint64_t sub_23EBB45CC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23EBB4434(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23EBB45F4()
{
  unsigned __int8 *v0;

  return sub_23EBB44D4(*v0);
}

uint64_t sub_23EBB45FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9DD0();
  *a1 = result;
  return result;
}

uint64_t sub_23EBB4628()
{
  sub_23EBB4998();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB4650()
{
  sub_23EBB4998();
  return sub_23EC2EE04();
}

void UtilityCustomerAgreement.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilityCustomerAgreement.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityCustomerAgreement);
}

uint64_t sub_23EBB4750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB4998();
  sub_23EC2EDE0();
  LOBYTE(v10) = 0;
  sub_23EC2ECE4();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v10) = 1;
  sub_23EC2ECE4();
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_programs);
  v11 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A40);
  sub_23EBB49DC();
  sub_23EC2ECD8();
  v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_meters);
  v11 = 3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A58);
  sub_23EBB4A78();
  sub_23EC2ED08();
  swift_beginAccess();
  v11 = 4;
  swift_bridgeObjectRetain();
  sub_23EC2ECB4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

unint64_t sub_23EBB4998()
{
  unint64_t result;

  result = qword_256DB7A38;
  if (!qword_256DB7A38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31D28, &type metadata for UtilityCustomerAgreement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7A38);
  }
  return result;
}

unint64_t sub_23EBB49DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB7A48;
  if (!qword_256DB7A48)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7A40);
    v2 = sub_23EBAFC48(&qword_256DB7A50, type metadata accessor for UtilityProgram, (uint64_t)&protocol conformance descriptor for UtilityProgram);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB7A48);
  }
  return result;
}

uint64_t type metadata accessor for UtilityProgram()
{
  return objc_opt_self();
}

unint64_t sub_23EBB4A78()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB7A60;
  if (!qword_256DB7A60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7A58);
    v2 = sub_23EBAFC48(&qword_256DB7A68, type metadata accessor for UtilityMeter, (uint64_t)&protocol conformance descriptor for UtilityMeter);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB7A60);
  }
  return result;
}

uint64_t type metadata accessor for UtilityMeter()
{
  return objc_opt_self();
}

char *UtilityCustomerAgreement.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityCustomerAgreement.init(from:)(a1);
}

char *UtilityCustomerAgreement.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  objc_class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  objc_super v25;
  uint64_t v26;
  char v27;

  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A70);
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = &v1[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v24 = (uint64_t *)v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB4998();
  v8 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

    swift_bridgeObjectRelease();
    type metadata accessor for UtilityCustomerAgreement();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v9 = v4;
    LOBYTE(v26) = 0;
    v10 = sub_23EC2EC84();
    v12 = (uint64_t *)&v8[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_customerAgreementID];
    *v12 = v10;
    v12[1] = v13;
    LOBYTE(v26) = 1;
    v14 = sub_23EC2EC84();
    v15 = (uint64_t *)&v8[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_accountID];
    *v15 = v14;
    v15[1] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A40);
    v27 = 2;
    sub_23EBB4F18();
    v22 = 0;
    sub_23EC2EC78();
    *(_QWORD *)&v8[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_programs] = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7A58);
    v27 = 3;
    sub_23EBB4F94();
    sub_23EC2ECA8();
    *(_QWORD *)&v8[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_meters] = v26;
    LOBYTE(v26) = 4;
    v17 = sub_23EC2EC54();
    v19 = v18;
    v20 = v24;
    swift_beginAccess();
    *v20 = v17;
    v20[1] = v19;

    swift_bridgeObjectRelease();
    v21 = (objc_class *)type metadata accessor for UtilityCustomerAgreement();
    v25.receiver = v8;
    v25.super_class = v21;
    v8 = (char *)objc_msgSendSuper2(&v25, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v23);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_23EBB4F18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB7A78;
  if (!qword_256DB7A78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7A40);
    v2 = sub_23EBAFC48(&qword_256DB7A80, type metadata accessor for UtilityProgram, (uint64_t)&protocol conformance descriptor for UtilityProgram);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB7A78);
  }
  return result;
}

unint64_t sub_23EBB4F94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256DB7A88;
  if (!qword_256DB7A88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7A58);
    v2 = sub_23EBAFC48(&qword_256DB7A90, type metadata accessor for UtilityMeter, (uint64_t)&protocol conformance descriptor for UtilityMeter);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256DB7A88);
  }
  return result;
}

uint64_t sub_23EBB5010@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityCustomerAgreement, (uint64_t (*)(uint64_t))UtilityCustomerAgreement.init(from:), a2);
}

uint64_t sub_23EBB5034(_QWORD *a1)
{
  return sub_23EBB4750(a1);
}

uint64_t UtilityProgram.programID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityProgram.programDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programDescription);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityProgram.enrollmentStatus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_enrollmentStatus);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityProgram.__allocating_init(programID:programDescription:enrollmentStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programID];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programDescription];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v13[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_enrollmentStatus];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v13;
  v18.super_class = v6;
  return objc_msgSendSuper2(&v18, sel_init);
}

id UtilityProgram.init(programID:programDescription:enrollmentStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v7 = &v6[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programID];
  *(_QWORD *)v7 = a1;
  *((_QWORD *)v7 + 1) = a2;
  v8 = &v6[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programDescription];
  *(_QWORD *)v8 = a3;
  *((_QWORD *)v8 + 1) = a4;
  v9 = &v6[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_enrollmentStatus];
  *(_QWORD *)v9 = a5;
  *((_QWORD *)v9 + 1) = a6;
  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for UtilityProgram();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t sub_23EBB52C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23EBC0DB8(*a1, *a2);
}

uint64_t sub_23EBB52D4()
{
  return sub_23EBB2344();
}

uint64_t sub_23EBB52DC()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBB5368()
{
  return sub_23EBB2A6C();
}

uint64_t sub_23EBB5370@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9E14();
  *a1 = result;
  return result;
}

void sub_23EBB539C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000064;
  v4 = 0xD000000000000012;
  v5 = 0x800000023EC378B0;
  if (v2 != 1)
  {
    v4 = 0xD000000000000010;
    v5 = 0x800000023EC378D0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x496D6172676F7270;
  if (!v6)
    v3 = v5;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_23EBB540C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x496D6172676F7270;
}

uint64_t sub_23EBB5478@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9E14();
  *a1 = result;
  return result;
}

uint64_t sub_23EBB549C()
{
  sub_23EBB5704();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB54C4()
{
  sub_23EBB5704();
  return sub_23EC2EE04();
}

void UtilityProgram.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilityProgram.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityProgram);
}

uint64_t sub_23EBB55A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7AB0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB5704();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBB5704()
{
  unint64_t result;

  result = qword_256DB7AB8;
  if (!qword_256DB7AB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31CD8, &type metadata for UtilityProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7AB8);
  }
  return result;
}

id UtilityProgram.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityProgram.init(from:)(a1);
}

id UtilityProgram.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  objc_class *v23;
  uint64_t v24;
  _QWORD *v25;
  objc_super v26;
  char v27;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7AC0);
  v4 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v25 = a1;
  v8 = __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBB5704();
  v9 = v1;
  v10 = v8;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);

    type metadata accessor for UtilityProgram();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v27 = 0;
    v11 = v24;
    v12 = sub_23EC2EC84();
    v14 = v9;
    v15 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programID];
    *v15 = v12;
    v15[1] = v16;
    v27 = 1;
    v17 = sub_23EC2EC84();
    v18 = (uint64_t *)&v14[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_programDescription];
    *v18 = v17;
    v18[1] = v19;
    v27 = 2;
    v20 = sub_23EC2EC84();
    v21 = (uint64_t *)&v14[OBJC_IVAR____TtC19HomeUtilityServices14UtilityProgram_enrollmentStatus];
    *v21 = v20;
    v21[1] = v22;

    v23 = (objc_class *)type metadata accessor for UtilityProgram();
    v26.receiver = v14;
    v26.super_class = v23;
    v10 = objc_msgSendSuper2(&v26, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  }
  return v10;
}

uint64_t sub_23EBB59DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityProgram, (uint64_t (*)(uint64_t))UtilityProgram.init(from:), a2);
}

uint64_t sub_23EBB5A00(_QWORD *a1)
{
  return sub_23EBB55A4(a1);
}

uint64_t UtilityMeter.meterID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_meterID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityMeter.serialNumber.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_serialNumber);
}

uint64_t UtilityMeter.make.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_make);
}

uint64_t UtilityMeter.model.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_model);
}

uint64_t UtilityMeter.intervalLengthInSeconds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_intervalLengthInSeconds);
}

uint64_t UtilityMeter.commodity.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_commodity);
}

uint64_t UtilityMeter.usagePointID.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_usagePointID);
}

uint64_t sub_23EBB5AF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBB5B1C + 4 * byte_23EC30EEC[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_23EBB5B1C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_23EBB5B3C()
{
  return 1701536109;
}

uint64_t sub_23EBB5B4C()
{
  return 0x6C65646F6DLL;
}

unint64_t sub_23EBB5B60()
{
  return 0xD000000000000015;
}

uint64_t sub_23EBB5B7C()
{
  return 0x7469646F6D6D6F63;
}

uint64_t sub_23EBB5B98()
{
  return 0x696F506567617375;
}

uint64_t sub_23EBB5BB8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBB5BE0 + 4 * byte_23EC30EF3[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_23EBB5BE0()
{
  return 0x754E6C6169726573;
}

uint64_t sub_23EBB5C00()
{
  return 1701536109;
}

uint64_t sub_23EBB5C10()
{
  return 0x6C65646F6DLL;
}

unint64_t sub_23EBB5C24()
{
  return 0xD000000000000015;
}

uint64_t sub_23EBB5C40()
{
  return 0x7469646F6D6D6F63;
}

uint64_t sub_23EBB5C5C()
{
  return 0x696F506567617375;
}

void sub_23EBB5C7C(char *a1)
{
  sub_23EBC101C(*a1);
}

void sub_23EBB5C88()
{
  char *v0;

  sub_23EBB2968(0, *v0);
}

void sub_23EBB5C94(uint64_t a1)
{
  char *v1;

  sub_23EBB24B0(a1, *v1);
}

void sub_23EBB5C9C(uint64_t a1)
{
  char *v1;

  sub_23EBB2968(a1, *v1);
}

uint64_t sub_23EBB5CA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9E5C();
  *a1 = result;
  return result;
}

uint64_t sub_23EBB5CD0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23EBB5AF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23EBB5CF8()
{
  unsigned __int8 *v0;

  return sub_23EBB5BB8(*v0);
}

uint64_t sub_23EBB5D00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBB9E5C();
  *a1 = result;
  return result;
}

void sub_23EBB5D24(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_23EBB5D30()
{
  sub_23EBB60A8();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB5D58()
{
  sub_23EBB60A8();
  return sub_23EC2EE04();
}

void UtilityMeter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilityMeter.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityMeter);
}

uint64_t sub_23EBB5E74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B00);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB60A8();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECB4();
    v8[13] = 2;
    sub_23EC2ECB4();
    v8[12] = 3;
    sub_23EC2ECB4();
    v8[11] = 4;
    sub_23EC2ECCC();
    v8[10] = 5;
    sub_23EC2ECB4();
    v8[9] = 6;
    sub_23EC2ECB4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBB60A8()
{
  unint64_t result;

  result = qword_256DB7B08;
  if (!qword_256DB7B08)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31C88, &type metadata for UtilityMeter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7B08);
  }
  return result;
}

unint64_t UtilityMeter.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityMeter.init(from:)(a1);
}

unint64_t UtilityMeter.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  objc_class *v34;
  _QWORD *v35;
  char *v36;
  objc_super v37;
  char v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B10);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v9 = sub_23EBB60A8();
  v36 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    v11 = v36;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);

    type metadata accessor for UtilityMeter();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v38 = 0;
    v10 = sub_23EC2EC84();
    v13 = v36;
    v14 = (uint64_t *)&v36[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_meterID];
    *v14 = v10;
    v14[1] = v15;
    v38 = 1;
    v16 = sub_23EC2EC54();
    v17 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_serialNumber];
    *v17 = v16;
    v17[1] = v18;
    v38 = 2;
    v19 = sub_23EC2EC54();
    v20 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_make];
    *v20 = v19;
    v20[1] = v21;
    v38 = 3;
    v22 = sub_23EC2EC54();
    v23 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_model];
    *v23 = v22;
    v23[1] = v24;
    v38 = 4;
    v25 = sub_23EC2EC6C();
    v26 = &v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_intervalLengthInSeconds];
    *(_QWORD *)v26 = v25;
    v26[8] = v27 & 1;
    v38 = 5;
    v28 = sub_23EC2EC54();
    v29 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_commodity];
    *v29 = v28;
    v29[1] = v30;
    v38 = 6;
    v31 = sub_23EC2EC54();
    v32 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices12UtilityMeter_usagePointID];
    *v32 = v31;
    v32[1] = v33;

    v34 = (objc_class *)type metadata accessor for UtilityMeter();
    v37.receiver = v13;
    v37.super_class = v34;
    v9 = (unint64_t)objc_msgSendSuper2(&v37, sel_init);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  }
  return v9;
}

uint64_t sub_23EBB6524@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityMeter, (uint64_t (*)(uint64_t))UtilityMeter.init(from:), a2);
}

uint64_t sub_23EBB6548(_QWORD *a1)
{
  return sub_23EBB5E74(a1);
}

uint64_t UtilitySubscriptionTokenSet.accessToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_accessToken);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySubscriptionTokenSet.expiresIn.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_expiresIn);
}

uint64_t UtilitySubscriptionTokenSet.idToken.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_idToken);
}

uint64_t UtilitySubscriptionTokenSet.refreshToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_refreshToken);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilitySubscriptionTokenSet.tokenType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_tokenType);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilitySubscriptionTokenSet.__allocating_init(accessToken:expiresIn:idToken:refreshToken:tokenType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  objc_super v24;

  v18 = (char *)objc_allocWithZone(v9);
  v19 = &v18[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_accessToken];
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  *(_QWORD *)&v18[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_expiresIn] = a3;
  v20 = &v18[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_refreshToken];
  *(_QWORD *)v20 = a6;
  *((_QWORD *)v20 + 1) = a7;
  v21 = &v18[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_idToken];
  *(_QWORD *)v21 = a4;
  *((_QWORD *)v21 + 1) = a5;
  v22 = &v18[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_tokenType];
  *(_QWORD *)v22 = a8;
  *((_QWORD *)v22 + 1) = a9;
  v24.receiver = v18;
  v24.super_class = v9;
  return objc_msgSendSuper2(&v24, sel_init);
}

id UtilitySubscriptionTokenSet.init(accessToken:expiresIn:idToken:refreshToken:tokenType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  objc_super v15;

  v10 = &v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_accessToken];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_expiresIn] = a3;
  v11 = &v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_refreshToken];
  *(_QWORD *)v11 = a6;
  *((_QWORD *)v11 + 1) = a7;
  v12 = &v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_idToken];
  *(_QWORD *)v12 = a4;
  *((_QWORD *)v12 + 1) = a5;
  v13 = &v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_tokenType];
  *(_QWORD *)v13 = a8;
  *((_QWORD *)v13 + 1) = a9;
  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for UtilitySubscriptionTokenSet();
  return objc_msgSendSuper2(&v15, sel_init);
}

uint64_t type metadata accessor for UtilitySubscriptionTokenSet()
{
  return objc_opt_self();
}

void UtilitySubscriptionTokenSet.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBB67F0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBB6828 + 4 * byte_23EC30EFA[*v0]))(0x6F54737365636361, 0xEB000000006E656BLL);
}

uint64_t sub_23EBB6828()
{
  return 0x4973657269707865;
}

uint64_t sub_23EBB6848()
{
  return 0x6E656B6F546469;
}

uint64_t sub_23EBB6860()
{
  return 0x5468736572666572;
}

uint64_t sub_23EBB6880()
{
  return 0x7079546E656B6F74;
}

uint64_t sub_23EBB689C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBB9EA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBB68C0()
{
  sub_23EBB6B48();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB68E8()
{
  sub_23EBB6B48();
  return sub_23EC2EE04();
}

id UtilitySubscriptionTokenSet.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilitySubscriptionTokenSet);
}

uint64_t sub_23EBB6984(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B40);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB6B48();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECFC();
    v8[13] = 2;
    sub_23EC2ECB4();
    v8[12] = 3;
    sub_23EC2ECE4();
    v8[11] = 4;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBB6B48()
{
  unint64_t result;

  result = qword_256DB7B48;
  if (!qword_256DB7B48)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31C38, &type metadata for UtilitySubscriptionTokenSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7B48);
  }
  return result;
}

id UtilitySubscriptionTokenSet.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilitySubscriptionTokenSet.init(from:)(a1);
}

id UtilitySubscriptionTokenSet.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  objc_class *v25;
  uint64_t v26;
  _QWORD *v27;
  objc_super v28;
  char v29;

  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B50);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v27 = a1;
  v8 = __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBB6B48();
  v9 = v1;
  v10 = v8;
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);

    type metadata accessor for UtilitySubscriptionTokenSet();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v29 = 0;
    v11 = v26;
    v12 = sub_23EC2EC84();
    v14 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_accessToken];
    *v14 = v12;
    v14[1] = v15;
    v29 = 1;
    *(_QWORD *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_expiresIn] = sub_23EC2EC9C();
    v29 = 2;
    v16 = sub_23EC2EC54();
    v17 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_idToken];
    *v17 = v16;
    v17[1] = v18;
    v29 = 3;
    v19 = sub_23EC2EC84();
    v20 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_refreshToken];
    *v20 = v19;
    v20[1] = v21;
    v29 = 4;
    v22 = sub_23EC2EC84();
    v23 = (uint64_t *)&v9[OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionTokenSet_tokenType];
    *v23 = v22;
    v23[1] = v24;

    v25 = (objc_class *)type metadata accessor for UtilitySubscriptionTokenSet();
    v28.receiver = v9;
    v28.super_class = v25;
    v10 = objc_msgSendSuper2(&v28, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v11);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
  }
  return v10;
}

uint64_t sub_23EBB6EC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t (*)(uint64_t))UtilitySubscriptionTokenSet.init(from:), a2);
}

uint64_t sub_23EBB6EE8(_QWORD *a1)
{
  return sub_23EBB6984(a1);
}

uint64_t UtilityServiceLocation.serviceLocationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityServiceLocation.address.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_address);
}

id UtilityServiceLocation.__allocating_init(serviceLocationID:address:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_address] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id UtilityServiceLocation.init(serviceLocationID:address:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_address] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for UtilityServiceLocation();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_23EBB7074(char *a1, char *a2)
{
  return sub_23EBC1688(*a1, *a2);
}

uint64_t sub_23EBB7080()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBB7104()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBB7164()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBB71E4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23EC2EC48();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_23EBB7240(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000011;
  if (*v1)
    v2 = 0x73736572646461;
  v3 = 0x800000023EC37930;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_23EBB7284()
{
  _BYTE *v0;

  if (*v0)
    return 0x73736572646461;
  else
    return 0xD000000000000011;
}

uint64_t sub_23EBB72C4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23EC2EC48();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_23EBB7324()
{
  sub_23EBB7570();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB734C()
{
  sub_23EBB7570();
  return sub_23EC2EE04();
}

void UtilityServiceLocation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilityServiceLocation.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityServiceLocation);
}

uint64_t sub_23EBB7414(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB7570();
  sub_23EC2EDE0();
  v12 = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_address);
    v10[15] = 1;
    type metadata accessor for UtilityServiceAddress();
    sub_23EBAFC48(&qword_256DB73C8, type metadata accessor for UtilityServiceAddress, (uint64_t)&protocol conformance descriptor for UtilityServiceAddress);
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23EBB7570()
{
  unint64_t result;

  result = qword_256DB7B70;
  if (!qword_256DB7B70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31BE8, &type metadata for UtilityServiceLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7B70);
  }
  return result;
}

uint64_t type metadata accessor for UtilityServiceAddress()
{
  return objc_opt_self();
}

id UtilityServiceLocation.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityServiceLocation.init(from:)(a1);
}

id UtilityServiceLocation.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  objc_super v20;
  char v21;
  uint64_t v22;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7B78);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBB7570();
  v19 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    v16 = v19;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);

    type metadata accessor for UtilityServiceLocation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v8 = v4;
    LOBYTE(v22) = 0;
    v9 = v17;
    v10 = sub_23EC2EC84();
    v12 = v19;
    v13 = (uint64_t *)&v19[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID];
    *v13 = v10;
    v13[1] = v14;
    type metadata accessor for UtilityServiceAddress();
    v21 = 1;
    sub_23EBAFC48(&qword_256DB73E0, type metadata accessor for UtilityServiceAddress, (uint64_t)&protocol conformance descriptor for UtilityServiceAddress);
    sub_23EC2ECA8();
    *(_QWORD *)&v12[OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_address] = v22;

    v15 = (objc_class *)type metadata accessor for UtilityServiceLocation();
    v20.receiver = v12;
    v20.super_class = v15;
    v16 = objc_msgSendSuper2(&v20, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  }
  return v16;
}

uint64_t sub_23EBB7838@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityServiceLocation, (uint64_t (*)(uint64_t))UtilityServiceLocation.init(from:), a2);
}

uint64_t sub_23EBB785C(_QWORD *a1)
{
  return sub_23EBB7414(a1);
}

uint64_t UtilityServiceAddress.addressLine1.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityServiceAddress.addressLine2.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2);
}

id sub_23EBB78E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v3;

  if (*(_QWORD *)(a1 + *a3 + 8))
  {
    swift_bridgeObjectRetain();
    v3 = (void *)sub_23EC2E774();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

uint64_t UtilityServiceAddress.addressLine3.getter()
{
  return sub_23EBB7948(&OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3);
}

uint64_t sub_23EBB7948(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t UtilityServiceAddress.city.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityServiceAddress.state.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityServiceAddress.postalCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityServiceAddress.country.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilityServiceAddress.__allocating_init(addressLine1:addressLine2:addressLine3:city:state:postalCode:country:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  objc_class *v14;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  objc_super v32;

  v22 = (char *)objc_allocWithZone(v14);
  v23 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1];
  *(_QWORD *)v23 = a1;
  *((_QWORD *)v23 + 1) = a2;
  v24 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2];
  *(_QWORD *)v24 = a3;
  *((_QWORD *)v24 + 1) = a4;
  v25 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3];
  *(_QWORD *)v25 = a5;
  *((_QWORD *)v25 + 1) = a6;
  v26 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city];
  *(_QWORD *)v26 = a7;
  *((_QWORD *)v26 + 1) = a8;
  v27 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state];
  *(_QWORD *)v27 = a9;
  *((_QWORD *)v27 + 1) = a10;
  v28 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode];
  *(_QWORD *)v28 = a11;
  *((_QWORD *)v28 + 1) = a12;
  v29 = &v22[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country];
  *(_QWORD *)v29 = a13;
  *((_QWORD *)v29 + 1) = a14;
  v32.receiver = v22;
  v32.super_class = v14;
  return objc_msgSendSuper2(&v32, sel_init);
}

id UtilityServiceAddress.init(addressLine1:addressLine2:addressLine3:city:state:postalCode:country:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  objc_super v23;

  v15 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  v16 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;
  v17 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3];
  *(_QWORD *)v17 = a5;
  *((_QWORD *)v17 + 1) = a6;
  v18 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city];
  *(_QWORD *)v18 = a7;
  *((_QWORD *)v18 + 1) = a8;
  v19 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state];
  *(_QWORD *)v19 = a9;
  *((_QWORD *)v19 + 1) = a10;
  v20 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode];
  *(_QWORD *)v20 = a11;
  *((_QWORD *)v20 + 1) = a12;
  v21 = &v14[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country];
  *(_QWORD *)v21 = a13;
  *((_QWORD *)v21 + 1) = a14;
  v23.receiver = v14;
  v23.super_class = (Class)type metadata accessor for UtilityServiceAddress();
  return objc_msgSendSuper2(&v23, sel_init);
}

id UtilityServiceAddress.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void UtilityServiceAddress.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23EBB7E48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBB7E80 + 4 * byte_23EC30EFF[*v0]))(0x4C73736572646461, 0xEC00000031656E69);
}

uint64_t sub_23EBB7EA0()
{
  return 2037672291;
}

uint64_t sub_23EBB7EB0()
{
  return 0x6574617473;
}

uint64_t sub_23EBB7EC4()
{
  return 0x6F436C6174736F70;
}

uint64_t sub_23EBB7EE0()
{
  return 0x7972746E756F63;
}

uint64_t sub_23EBB7EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBBA100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBB7F1C()
{
  sub_23EBB824C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB7F44()
{
  sub_23EBB824C();
  return sub_23EC2EE04();
}

id UtilityServiceAddress.__deallocating_deinit()
{
  return sub_23EBAE0F0(type metadata accessor for UtilityServiceAddress);
}

uint64_t sub_23EBB801C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7BB8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB824C();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECB4();
    v8[13] = 2;
    sub_23EC2ECB4();
    v8[12] = 3;
    sub_23EC2ECE4();
    v8[11] = 4;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECE4();
    v8[9] = 6;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBB824C()
{
  unint64_t result;

  result = qword_256DB7BC0;
  if (!qword_256DB7BC0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31B98, &type metadata for UtilityServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7BC0);
  }
  return result;
}

unint64_t UtilityServiceAddress.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return UtilityServiceAddress.init(from:)(a1);
}

unint64_t UtilityServiceAddress.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  objc_class *v34;
  _QWORD *v35;
  char *v36;
  objc_super v37;
  char v38;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7BC8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  v9 = sub_23EBB824C();
  v36 = v1;
  sub_23EC2EDD4();
  if (v2)
  {
    v11 = v36;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);

    type metadata accessor for UtilityServiceAddress();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v38 = 0;
    v10 = sub_23EC2EC84();
    v13 = v36;
    v14 = (uint64_t *)&v36[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1];
    *v14 = v10;
    v14[1] = v15;
    v38 = 1;
    v16 = sub_23EC2EC54();
    v17 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2];
    *v17 = v16;
    v17[1] = v18;
    v38 = 2;
    v19 = sub_23EC2EC54();
    v20 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3];
    *v20 = v19;
    v20[1] = v21;
    v38 = 3;
    v22 = sub_23EC2EC84();
    v23 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city];
    *v23 = v22;
    v23[1] = v24;
    v38 = 4;
    v25 = sub_23EC2EC84();
    v26 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state];
    *v26 = v25;
    v26[1] = v27;
    v38 = 5;
    v28 = sub_23EC2EC84();
    v29 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode];
    *v29 = v28;
    v29[1] = v30;
    v38 = 6;
    v31 = sub_23EC2EC84();
    v32 = (uint64_t *)&v13[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country];
    *v32 = v31;
    v32[1] = v33;

    v34 = (objc_class *)type metadata accessor for UtilityServiceAddress();
    v37.receiver = v13;
    v37.super_class = v34;
    v9 = (unint64_t)objc_msgSendSuper2(&v37, sel_init);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
  }
  return v9;
}

uint64_t sub_23EBB8704@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EBAE58C(a1, type metadata accessor for UtilityServiceAddress, (uint64_t (*)(uint64_t))UtilityServiceAddress.init(from:), a2);
}

uint64_t sub_23EBB8728(_QWORD *a1)
{
  return sub_23EBB801C(a1);
}

id AccountVerificationResponse.accessToken.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t AccountVerificationResponse.authorizationCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccountVerificationResponse.init(accessToken:authorizationCode:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_23EBB87A4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x6F54737365636361;
}

uint64_t sub_23EBB87EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBBA408(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBB8810()
{
  sub_23EBB89B4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBB8838()
{
  sub_23EBB89B4();
  return sub_23EC2EE04();
}

uint64_t AccountVerificationResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  char v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7BD0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v11[1] = v1[2];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB89B4();
  sub_23EC2EDE0();
  v14 = v9;
  v13 = 0;
  type metadata accessor for UtilitySubscriptionTokenSet();
  sub_23EBAFC48(&qword_256DB7BE0, type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionTokenSet);
  sub_23EC2ECD8();
  if (!v2)
  {
    v12 = 1;
    sub_23EC2ECB4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23EBB89B4()
{
  unint64_t result;

  result = qword_256DB7BD8;
  if (!qword_256DB7BD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31B48, &type metadata for AccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7BD8);
  }
  return result;
}

void AccountVerificationResponse.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char v14;
  char v15;
  id v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7BE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBB89B4();
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    type metadata accessor for UtilitySubscriptionTokenSet();
    v15 = 0;
    sub_23EBAFC48(&qword_256DB7BF0, type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionTokenSet);
    sub_23EC2EC78();
    v9 = v16;
    v14 = 1;
    v13 = v16;
    v10 = sub_23EC2EC54();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v12;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();

  }
}

void sub_23EBB8BD0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AccountVerificationResponse.init(from:)(a1, a2);
}

uint64_t sub_23EBB8BE4(_QWORD *a1)
{
  return AccountVerificationResponse.encode(to:)(a1);
}

uint64_t sub_23EBB8BF8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier);
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for UtilitySubscriptionResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for UtilitySubscriptionInformation()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for UtilityCustomerAgreement()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityCustomerAgreement.alternateSupplier.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of UtilityCustomerAgreement.alternateSupplier.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of UtilityCustomerAgreement.alternateSupplier.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of UtilityCustomerAgreement.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of UtilityCustomerAgreement.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for UtilityProgram()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityProgram.__allocating_init(programID:programDescription:enrollmentStatus:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of UtilityProgram.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of UtilityProgram.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for UtilityMeter()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for UtilitySubscriptionTokenSet()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilitySubscriptionTokenSet.__allocating_init(accessToken:expiresIn:idToken:refreshToken:tokenType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of UtilitySubscriptionTokenSet.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of UtilitySubscriptionTokenSet.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t method lookup function for UtilityServiceLocation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityServiceLocation.__allocating_init(serviceLocationID:address:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of UtilityServiceLocation.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of UtilityServiceLocation.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for UtilityServiceAddress()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilityServiceAddress.__allocating_init(addressLine1:addressLine2:addressLine3:city:state:postalCode:country:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of UtilityServiceAddress.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of UtilityServiceAddress.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for AccountVerificationResponse(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s19HomeUtilityServices27AccountVerificationResponseVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccountVerificationResponse(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AccountVerificationResponse(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountVerificationResponse(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountVerificationResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountVerificationResponse()
{
  return &type metadata for AccountVerificationResponse;
}

ValueMetadata *type metadata accessor for AccountVerificationResponse.CodingKeys()
{
  return &type metadata for AccountVerificationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilityServiceAddress.CodingKeys()
{
  return &type metadata for UtilityServiceAddress.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilityServiceLocation.CodingKeys()
{
  return &type metadata for UtilityServiceLocation.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilitySubscriptionTokenSet.CodingKeys()
{
  return &type metadata for UtilitySubscriptionTokenSet.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VerifiedServiceAddress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19HomeUtilityServices21UtilityServiceAddressC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23EBB91B0 + 4 * byte_23EC30F0B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23EBB91E4 + 4 * byte_23EC30F06[v4]))();
}

uint64_t sub_23EBB91E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB91EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB91F4);
  return result;
}

uint64_t sub_23EBB9200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB9208);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23EBB920C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB9214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityMeter.CodingKeys()
{
  return &type metadata for UtilityMeter.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UtilityProgram.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBB927C + 4 * byte_23EC30F15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBB92B0 + 4 * byte_23EC30F10[v4]))();
}

uint64_t sub_23EBB92B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB92B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB92C0);
  return result;
}

uint64_t sub_23EBB92CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB92D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBB92D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB92E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityProgram.CodingKeys()
{
  return &type metadata for UtilityProgram.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilityCustomerAgreement.CodingKeys()
{
  return &type metadata for UtilityCustomerAgreement.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UtilityTariffType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19HomeUtilityServices27UtilitySubscriptionTokenSetC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23EBB93E8 + 4 * byte_23EC30F1F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23EBB941C + 4 * byte_23EC30F1A[v4]))();
}

uint64_t sub_23EBB941C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB9424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB942CLL);
  return result;
}

uint64_t sub_23EBB9438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB9440);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23EBB9444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB944C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilitySubscriptionInformation.CodingKeys()
{
  return &type metadata for UtilitySubscriptionInformation.CodingKeys;
}

uint64_t _s19HomeUtilityServices27AccountVerificationResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EBB94B4 + 4 * byte_23EC30F29[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EBB94E8 + 4 * byte_23EC30F24[v4]))();
}

uint64_t sub_23EBB94E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB94F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBB94F8);
  return result;
}

uint64_t sub_23EBB9504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBB950CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EBB9510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBB9518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilitySubscriptionResponse.CodingKeys()
{
  return &type metadata for UtilitySubscriptionResponse.CodingKeys;
}

unint64_t sub_23EBB9538()
{
  unint64_t result;

  result = qword_256DB7D38;
  if (!qword_256DB7D38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31448, &type metadata for UtilitySubscriptionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D38);
  }
  return result;
}

unint64_t sub_23EBB9580()
{
  unint64_t result;

  result = qword_256DB7D40;
  if (!qword_256DB7D40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31538, &type metadata for UtilitySubscriptionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D40);
  }
  return result;
}

unint64_t sub_23EBB95C8()
{
  unint64_t result;

  result = qword_256DB7D48;
  if (!qword_256DB7D48)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31628, &type metadata for UtilityCustomerAgreement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D48);
  }
  return result;
}

unint64_t sub_23EBB9610()
{
  unint64_t result;

  result = qword_256DB7D50;
  if (!qword_256DB7D50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31718, &type metadata for UtilityProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D50);
  }
  return result;
}

unint64_t sub_23EBB9658()
{
  unint64_t result;

  result = qword_256DB7D58;
  if (!qword_256DB7D58)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31808, &type metadata for UtilityMeter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D58);
  }
  return result;
}

unint64_t sub_23EBB96A0()
{
  unint64_t result;

  result = qword_256DB7D60;
  if (!qword_256DB7D60)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC318C0, &type metadata for UtilitySubscriptionTokenSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D60);
  }
  return result;
}

unint64_t sub_23EBB96E8()
{
  unint64_t result;

  result = qword_256DB7D68;
  if (!qword_256DB7D68)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC319B0, &type metadata for UtilityServiceLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D68);
  }
  return result;
}

unint64_t sub_23EBB9730()
{
  unint64_t result;

  result = qword_256DB7D70;
  if (!qword_256DB7D70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31A68, &type metadata for UtilityServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D70);
  }
  return result;
}

unint64_t sub_23EBB9778()
{
  unint64_t result;

  result = qword_256DB7D78;
  if (!qword_256DB7D78)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31B20, &type metadata for AccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D78);
  }
  return result;
}

unint64_t sub_23EBB97C0()
{
  unint64_t result;

  result = qword_256DB7D80;
  if (!qword_256DB7D80)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31A90, &type metadata for AccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D80);
  }
  return result;
}

unint64_t sub_23EBB9808()
{
  unint64_t result;

  result = qword_256DB7D88;
  if (!qword_256DB7D88)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31AB8, &type metadata for AccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D88);
  }
  return result;
}

unint64_t sub_23EBB9850()
{
  unint64_t result;

  result = qword_256DB7D90;
  if (!qword_256DB7D90)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC319D8, &type metadata for UtilityServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D90);
  }
  return result;
}

unint64_t sub_23EBB9898()
{
  unint64_t result;

  result = qword_256DB7D98;
  if (!qword_256DB7D98)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31A00, &type metadata for UtilityServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7D98);
  }
  return result;
}

unint64_t sub_23EBB98E0()
{
  unint64_t result;

  result = qword_256DB7DA0;
  if (!qword_256DB7DA0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC318E8, &type metadata for UtilityServiceLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DA0);
  }
  return result;
}

unint64_t sub_23EBB9928()
{
  unint64_t result;

  result = qword_256DB7DA8;
  if (!qword_256DB7DA8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31910, &type metadata for UtilityServiceLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DA8);
  }
  return result;
}

unint64_t sub_23EBB9970()
{
  unint64_t result;

  result = qword_256DB7DB0;
  if (!qword_256DB7DB0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31830, &type metadata for UtilitySubscriptionTokenSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DB0);
  }
  return result;
}

unint64_t sub_23EBB99B8()
{
  unint64_t result;

  result = qword_256DB7DB8;
  if (!qword_256DB7DB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31858, &type metadata for UtilitySubscriptionTokenSet.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DB8);
  }
  return result;
}

unint64_t sub_23EBB9A00()
{
  unint64_t result;

  result = qword_256DB7DC0;
  if (!qword_256DB7DC0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31740, &type metadata for UtilityMeter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DC0);
  }
  return result;
}

unint64_t sub_23EBB9A48()
{
  unint64_t result;

  result = qword_256DB7DC8;
  if (!qword_256DB7DC8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31768, &type metadata for UtilityMeter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DC8);
  }
  return result;
}

unint64_t sub_23EBB9A90()
{
  unint64_t result;

  result = qword_256DB7DD0;
  if (!qword_256DB7DD0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31650, &type metadata for UtilityProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DD0);
  }
  return result;
}

unint64_t sub_23EBB9AD8()
{
  unint64_t result;

  result = qword_256DB7DD8;
  if (!qword_256DB7DD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31678, &type metadata for UtilityProgram.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DD8);
  }
  return result;
}

unint64_t sub_23EBB9B20()
{
  unint64_t result;

  result = qword_256DB7DE0;
  if (!qword_256DB7DE0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31560, &type metadata for UtilityCustomerAgreement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DE0);
  }
  return result;
}

unint64_t sub_23EBB9B68()
{
  unint64_t result;

  result = qword_256DB7DE8;
  if (!qword_256DB7DE8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31588, &type metadata for UtilityCustomerAgreement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DE8);
  }
  return result;
}

unint64_t sub_23EBB9BB0()
{
  unint64_t result;

  result = qword_256DB7DF0;
  if (!qword_256DB7DF0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31470, &type metadata for UtilitySubscriptionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DF0);
  }
  return result;
}

unint64_t sub_23EBB9BF8()
{
  unint64_t result;

  result = qword_256DB7DF8;
  if (!qword_256DB7DF8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC31498, &type metadata for UtilitySubscriptionInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7DF8);
  }
  return result;
}

unint64_t sub_23EBB9C40()
{
  unint64_t result;

  result = qword_256DB7E00;
  if (!qword_256DB7E00)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC313B8, &type metadata for UtilitySubscriptionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB7E00);
  }
  return result;
}

unint64_t sub_23EBB9C88()
{
  unint64_t result;

  result = qword_256DB7E08;
  if (!qword_256DB7E08)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC313E0, &type metadata for UtilitySubscriptionResponse.CodingKeys);
    atomic_store(result, &qword_256DB7E08);
  }
  return result;
}

uint64_t sub_23EBB9CCC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7069726373627573 && a2 == 0xEC0000006E6F6974;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC38AE0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EBB9DD0()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_23EBB9E14()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_23EBB9E5C()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_23EBB9EA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F54737365636361 && a2 == 0xEB000000006E656BLL;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4973657269707865 && a2 == 0xE90000000000006ELL || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656B6F546469 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5468736572666572 && a2 == 0xEC0000006E656B6FLL || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7079546E656B6F74 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23EBBA100(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C73736572646461 && a2 == 0xEC00000031656E69;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C73736572646461 && a2 == 0xEC00000032656E69 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4C73736572646461 && a2 == 0xEC00000033656E69 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 2037672291 && a2 == 0xE400000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F436C6174736F70 && a2 == 0xEA00000000006564 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7972746E756F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23EBBA408(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F54737365636361 && a2 == 0xEB000000006E656BLL;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC37BE0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t dispatch thunk of UtilitySubscriptionInformation.__allocating_init(from:)()
{
  return dispatch thunk of UtilitySubscriptionTokenSet.__allocating_init(from:)();
}

uint64_t dispatch thunk of UtilitySubscriptionResponse.__allocating_init(from:)()
{
  return dispatch thunk of UtilityServiceLocation.__allocating_init(from:)();
}

uint64_t dispatch thunk of UtilityMeter.__allocating_init(from:)()
{
  return dispatch thunk of UtilityServiceAddress.__allocating_init(from:)();
}

uint64_t dispatch thunk of UtilitySubscriptionInformation.encode(to:)()
{
  return dispatch thunk of UtilitySubscriptionTokenSet.encode(to:)();
}

uint64_t dispatch thunk of UtilitySubscriptionResponse.encode(to:)()
{
  return dispatch thunk of UtilityServiceLocation.encode(to:)();
}

uint64_t dispatch thunk of UtilityMeter.encode(to:)()
{
  return dispatch thunk of UtilityServiceAddress.encode(to:)();
}

uint64_t sub_23EBBA5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23EC2E264();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UtilityServicesConfigurationsModel();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v19 = &qword_25433FA30;
    v20 = (uint64_t)v14;
LABEL_5:
    sub_23EBA3038(v20, v19);
    v21 = a3;
    if (qword_25433FAF8 != -1)
      swift_once();
    v22 = sub_23EC2E684();
    __swift_project_value_buffer(v22, (uint64_t)qword_25433FC98);
    v23 = sub_23EC2E66C();
    v24 = sub_23EC2EA08();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_23EB9F000, v23, v24, "Unable to baseURL", v25, 2u);
      MEMORY[0x24265B940](v25, -1, -1);
    }

    goto LABEL_10;
  }
  sub_23EBBC840((uint64_t)v14, (uint64_t)v18);
  swift_bridgeObjectRetain();
  sub_23EC2E240();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_23EBBCA34((uint64_t)v18);
    v19 = &qword_25433F930;
    v20 = (uint64_t)v7;
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  v28 = sub_23EBBC0B4(a1, v35);
  v21 = a3;
  if (v29)
  {
    sub_23EC13644(v28, v29, a3);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_23EBBCA34((uint64_t)v18);
    v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, v26, 1, v8);
  }
  if (qword_25433FAF8 != -1)
    swift_once();
  v30 = sub_23EC2E684();
  __swift_project_value_buffer(v30, (uint64_t)qword_25433FC98);
  v31 = sub_23EC2E66C();
  v32 = sub_23EC2EA08();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_23EB9F000, v31, v32, "Unable to generate API Path", v33, 2u);
    MEMORY[0x24265B940](v33, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_23EBBCA34((uint64_t)v18);
LABEL_10:
  v26 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, v26, 1, v8);
}

uint64_t sub_23EBBA958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBBA974()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if ((sub_23EBBCA70() & 1) != 0)
  {
    if (qword_25433FAF8 != -1)
      swift_once();
    v1 = sub_23EC2E684();
    *(_QWORD *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)qword_25433FC98);
    v2 = sub_23EC2E66C();
    v3 = sub_23EC2EA14();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_23EB9F000, v2, v3, "Adding BAA", v4, 2u);
      MEMORY[0x24265B940](v4, -1, -1);
    }

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v5;
    *v5 = v0;
    v5[1] = sub_23EBBAAAC;
    return URLRequest.addBAAHeaders()(*(_QWORD *)(v0 + 88));
  }
  else
  {
    sub_23EC17CD8(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EBBAAAC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBAB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBBAB2C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if ((sub_23EBBCA70() & 1) != 0)
  {
    if (qword_25433FAF8 != -1)
      swift_once();
    v1 = sub_23EC2E684();
    *(_QWORD *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)qword_25433FC98);
    v2 = sub_23EC2E66C();
    v3 = sub_23EC2EA14();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_23EB9F000, v2, v3, "Adding BAA", v4, 2u);
      MEMORY[0x24265B940](v4, -1, -1);
    }

    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v5;
    *v5 = v0;
    v5[1] = sub_23EBBAC64;
    return URLRequest.addBAAHeaders()(*(_QWORD *)(v0 + 88));
  }
  else
  {
    sub_23EC17CD8(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EBBAC64()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBACC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = sub_23EC2DFA0();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBAD1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  unsigned __int8 v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23[2];

  v1 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  if (swift_dynamicCast())
  {
    v3 = *(void **)(v0 + 40);
    v4 = *(_BYTE *)(v0 + 48);
    sub_23EBBC818(v3, v4);
    sub_23EBBC818(v3, v4);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v23[0] = v8;
      *(_DWORD *)v7 = 136315138;
      sub_23EC0F970((uint64_t)v3, v4);
      *(_QWORD *)(v0 + 80) = sub_23EBAE6D4(v9, v10, v23);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();
      sub_23EBBC82C(v3, v4);
      sub_23EBBC82C(v3, v4);
      _os_log_impl(&dword_23EB9F000, v5, v6, "Error while adding BAA Header: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v8, -1, -1);
      MEMORY[0x24265B940](v7, -1, -1);

      sub_23EBBC82C(v3, v4);
    }
    else
    {
      sub_23EBBC82C(v3, v4);
      sub_23EBBC82C(v3, v4);
      sub_23EBBC82C(v3, v4);

    }
  }
  else
  {
    v11 = *(void **)(v0 + 128);
    v12 = v11;
    v13 = v11;
    v14 = sub_23EC2E66C();
    v15 = sub_23EC2EA08();
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(void **)(v0 + 128);
    if (v16)
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v23[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_getErrorValue();
      v20 = sub_23EC2ED74();
      *(_QWORD *)(v0 + 72) = sub_23EBAE6D4(v20, v21, v23);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23EB9F000, v14, v15, "Error while adding BAA Header: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v19, -1, -1);
      MEMORY[0x24265B940](v18, -1, -1);
    }
    else
    {

    }
  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBB078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 152) = v14;
  *(_OWORD *)(v8 + 136) = v13;
  *(_QWORD *)(v8 + 120) = a7;
  *(_QWORD *)(v8 + 128) = a8;
  *(_QWORD *)(v8 + 104) = a5;
  *(_QWORD *)(v8 + 112) = a6;
  *(_QWORD *)(v8 + 88) = a1;
  *(_QWORD *)(v8 + 96) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  *(_QWORD *)(v8 + 160) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  v9 = sub_23EC2E33C();
  *(_QWORD *)(v8 + 176) = v9;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  v10 = sub_23EC2DFA0();
  *(_QWORD *)(v8 + 200) = v10;
  *(_QWORD *)(v8 + 208) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  *(_QWORD *)(v8 + 248) = swift_task_alloc();
  v11 = sub_23EC2E264();
  *(_QWORD *)(v8 + 256) = v11;
  *(_QWORD *)(v8 + 264) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 272) = swift_task_alloc();
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBBB210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  sub_23EBBA5A4(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 248), &qword_25433F930);
    if (qword_256DB7208 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7768);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for resend API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
  }
  else
  {
    v66 = (id *)(v0 + 80);
    v11 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 200);
    v61 = *(_QWORD *)(v0 + 192);
    v62 = *(_QWORD *)(v0 + 184);
    v63 = *(_QWORD *)(v0 + 176);
    v60 = *(_QWORD *)(v0 + 240);
    v64 = *(_QWORD *)(v0 + 120);
    v65 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v12, *(_QWORD *)(v0 + 248), v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v12, v14);
    sub_23EC2DF58();
    sub_23EC0A4E0(v16);
    v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    *(_QWORD *)(v0 + 288) = v20;
    v20(v17, v19);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v21(v15, v16, v19);
    sub_23EC2DF70();
    v20(v16, v19);
    v21(v60, v15, v19);
    sub_23EC2DF70();
    v20(v15, v19);
    sub_23EC2DF40();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
    *(_QWORD *)(inited + 32) = 0x7461447472617473;
    *(_QWORD *)(inited + 40) = 0xE900000000000065;
    sub_23EBBBE40(v61);
    v23 = sub_23EC2E2E8();
    v25 = v24;
    v26 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v26(v61, v63);
    *(_QWORD *)(inited + 48) = v23;
    *(_QWORD *)(inited + 56) = v25;
    sub_23EBA7540(inited);
    sub_23EBBC3E8(v64, v65);
    v27 = sub_23EC2E3CC();
    v28 = *(_QWORD *)(v27 - 8);
    v59 = v20;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v65, 1, v27) == 1)
    {
      sub_23EBA3038(*(_QWORD *)(v0 + 168), &qword_25433F948);
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 192);
      v30 = *(_QWORD *)(v0 + 168);
      v31 = *(_QWORD *)(v0 + 176);
      sub_23EBBBE40(v29);
      v32 = sub_23EC2E2E8();
      v34 = v33;
      v26(v29, v31);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_23EBBC430(v32, v34, 0x65746144646E65, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    v36 = (void *)objc_opt_self();
    v37 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
    *v66 = 0;
    v38 = objc_msgSend(v36, sel_dataWithJSONObject_options_error_, v37, 0, v66);

    v39 = *v66;
    if (v38)
    {
      v40 = sub_23EC2E2D0();
      v42 = v41;

      *(_QWORD *)(v0 + 296) = v40;
      *(_QWORD *)(v0 + 304) = v42;
      sub_23EBA3E98(v40, v42);
      sub_23EC2DF88();
      v43 = dword_256DB7E18;
      v44 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 312) = v44;
      *v44 = v0;
      v44[1] = sub_23EBBB8D0;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E18 + v43))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 144));
    }
    v46 = v39;
    v47 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB7208 != -1)
      swift_once();
    v48 = sub_23EC2E684();
    __swift_project_value_buffer(v48, (uint64_t)qword_256DC7768);
    v49 = sub_23EC2E66C();
    v50 = sub_23EC2EA08();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_23EB9F000, v49, v50, "Unable to encode Token request body", v51, 2u);
      MEMORY[0x24265B940](v51, -1, -1);
    }
    v52 = *(_QWORD *)(v0 + 280);
    v53 = *(_QWORD *)(v0 + 256);
    v54 = *(_QWORD *)(v0 + 264);
    v55 = *(_QWORD *)(v0 + 240);
    v56 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 208);
    v58 = *(_QWORD *)(v0 + 88);

    v59(v55, v56);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v58, 1, 1, v56);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBB8D0()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBBB980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB7208 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7768);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign resend historical data request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 280);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 200);
    v23 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 88);

    sub_23EBA3EDC(v9, v8);
    v11(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, 1, 1, v15);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 304);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v19 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 256);
    v26 = *(_QWORD *)(v0 + 280);
    v20 = *(_QWORD *)(v0 + 240);
    v21 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v21, v3, v1);
    sub_23EC2DF94();
    sub_23EBA3EDC(v17, v16);
    v18(v20, v1);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v21, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBBC38()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 200));
  sub_23EBA3038(*(_QWORD *)(v0 + 160), &qword_25433F918);
  if (qword_256DB7208 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7768);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign resend historical data request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v9 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 88);

  sub_23EBA3EDC(v6, v5);
  v8(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBBE40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7E20);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23EC2E48C();
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8]();
  v23 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23EC2E330();
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23EC2E318();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23EC2E300();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E30C();
  MEMORY[0x24BDAC7A8]();
  (*(void (**)(char *, _QWORD))(v16 + 104))((char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDCE368]);
  v17 = v11;
  v18 = v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BDCE348], v17);
  v19 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v20 = v27;
  v19(v10, *MEMORY[0x24BDCE388], v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCE3D0], v26);
  sub_23EC2E480();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1, v20);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v2, v20);
    return sub_23EC2E324();
  }
  return result;
}

uint64_t sub_23EBBC0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  int64_t v19;

  v3 = sub_23EBBC5A4();
  if (!v4)
  {
    if (qword_25433FAF8 != -1)
      goto LABEL_33;
    goto LABEL_27;
  }
  v5 = v3;
  if (a2)
  {
    v18 = a2 + 64;
    v6 = 1 << *(_BYTE *)(a2 + 32);
    v7 = -1;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    v8 = v7 & *(_QWORD *)(a2 + 64);
    v19 = (unint64_t)(v6 + 63) >> 6;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if (v8)
      {
        v8 &= v8 - 1;
      }
      else
      {
        v10 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (v10 >= v19)
          goto LABEL_25;
        v11 = *(_QWORD *)(v18 + 8 * v10);
        ++v9;
        if (!v11)
        {
          v9 = v10 + 1;
          if (v10 + 1 >= v19)
            goto LABEL_25;
          v11 = *(_QWORD *)(v18 + 8 * v9);
          if (!v11)
          {
            v9 = v10 + 2;
            if (v10 + 2 >= v19)
              goto LABEL_25;
            v11 = *(_QWORD *)(v18 + 8 * v9);
            if (!v11)
            {
              v9 = v10 + 3;
              if (v10 + 3 >= v19)
                goto LABEL_25;
              v11 = *(_QWORD *)(v18 + 8 * v9);
              if (!v11)
              {
                v12 = v10 + 4;
                if (v12 >= v19)
                {
LABEL_25:
                  swift_release();
                  return v5;
                }
                v11 = *(_QWORD *)(v18 + 8 * v12);
                if (!v11)
                {
                  while (1)
                  {
                    v9 = v12 + 1;
                    if (__OFADD__(v12, 1))
                      break;
                    if (v9 >= v19)
                      goto LABEL_25;
                    v11 = *(_QWORD *)(v18 + 8 * v9);
                    ++v12;
                    if (v11)
                      goto LABEL_24;
                  }
LABEL_32:
                  __break(1u);
LABEL_33:
                  swift_once();
LABEL_27:
                  v13 = sub_23EC2E684();
                  __swift_project_value_buffer(v13, (uint64_t)qword_25433FC98);
                  v14 = sub_23EC2E66C();
                  v15 = sub_23EC2EA08();
                  if (os_log_type_enabled(v14, v15))
                  {
                    v16 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v16 = 0;
                    _os_log_impl(&dword_23EB9F000, v14, v15, "Unable decode API Path", v16, 2u);
                    MEMORY[0x24265B940](v16, -1, -1);
                  }

                  return 0;
                }
                v9 = v12;
              }
            }
          }
        }
LABEL_24:
        v8 = (v11 - 1) & v11;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23EC2E834();
      swift_bridgeObjectRelease();
      sub_23EC2E834();
      sub_23EBAFA74();
      v5 = sub_23EC2EA98();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v5;
}

uint64_t sub_23EBBC3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBBC430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_23EBE9A24(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_23EC22748();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23EC21E00(v17, a5 & 1);
  v23 = sub_23EBE9A24(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23EC2ED68();
  __break(1u);
  return result;
}

uint64_t sub_23EBBC5A4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[12];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UtilityServicesConfigurationsModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23EBA3038((uint64_t)v2, &qword_25433FA30);
    if (qword_25433FAF8 != -1)
      swift_once();
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_25433FC98);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Unable to baseURL", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }

    return 0;
  }
  else
  {
    sub_23EBBC840((uint64_t)v2, (uint64_t)v6);
    v12 = *(_OWORD *)(v6 + 184);
    v37[8] = *(_OWORD *)(v6 + 168);
    v37[9] = v12;
    v13 = *(_OWORD *)(v6 + 216);
    v37[10] = *(_OWORD *)(v6 + 200);
    v37[11] = v13;
    v14 = *(_OWORD *)(v6 + 120);
    v37[4] = *(_OWORD *)(v6 + 104);
    v37[5] = v14;
    v15 = *(_OWORD *)(v6 + 152);
    v37[6] = *(_OWORD *)(v6 + 136);
    v37[7] = v15;
    v16 = *(_OWORD *)(v6 + 56);
    v37[0] = *(_OWORD *)(v6 + 40);
    v37[1] = v16;
    v17 = *(_OWORD *)(v6 + 88);
    v37[2] = *(_OWORD *)(v6 + 72);
    v37[3] = v17;
    v18 = *(_OWORD *)(v6 + 184);
    v33 = *(_OWORD *)(v6 + 168);
    v34 = v18;
    v19 = *(_OWORD *)(v6 + 216);
    v35 = *(_OWORD *)(v6 + 200);
    v36 = v19;
    v20 = *(_OWORD *)(v6 + 120);
    v29 = *(_OWORD *)(v6 + 104);
    v30 = v20;
    v21 = *(_OWORD *)(v6 + 152);
    v31 = *(_OWORD *)(v6 + 136);
    v32 = v21;
    v22 = *(_OWORD *)(v6 + 56);
    v25 = *(_OWORD *)(v6 + 40);
    v26 = v22;
    v23 = *(_OWORD *)(v6 + 88);
    v27 = *(_OWORD *)(v6 + 72);
    v28 = v23;
    sub_23EBBC884((uint64_t)v37);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    sub_23EBBC95C((uint64_t)v37);
    sub_23EBBCA34((uint64_t)v6);
    return v24[0];
  }
}

id sub_23EBBC818(id result, unsigned __int8 a2)
{
  if (a2 <= 2u)
    return result;
  return result;
}

void sub_23EBBC82C(id a1, unsigned __int8 a2)
{
  if (a2 <= 2u)

}

uint64_t sub_23EBBC840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UtilityServicesConfigurationsModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBBC884(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23EBBC95C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23EBBCA34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UtilityServicesConfigurationsModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBBCA70()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  sub_23EBBC5A4();
  if (v0)
  {
    v1 = (char *)&loc_23EBBCAB0 + 4 * byte_23EC31E18[sub_23EC12720()];
    __asm { BR              X10 }
  }
  if (qword_25433FAF8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_25433FC98);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Unable decode API Path", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  return 0;
}

uint64_t sub_23EBBCBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[13] = a8;
  v8[14] = v12;
  v8[11] = a6;
  v8[12] = a7;
  v8[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[15] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v8[16] = v9;
  v8[17] = *(_QWORD *)(v9 - 8);
  v8[18] = swift_task_alloc();
  v8[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v10 = sub_23EC2E264();
  v8[23] = v10;
  v8[24] = *(_QWORD *)(v10 - 8);
  v8[25] = swift_task_alloc();
  v8[26] = swift_task_alloc();
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBBCCD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t);
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  _QWORD *v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v4(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 176), &qword_25433F930);
    if (qword_256DB7210 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC7780);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Request URL for peaks API not found", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, 1, 1, v9);
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 192) + 32);
  v16(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 176), v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 232) = inited;
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(inited + 32) = 0x7461447472617473;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = v15;
  *(_QWORD *)(inited + 56) = v14;
  swift_bridgeObjectRetain();
  sub_23EC2E1EC();
  sub_23EC2E240();
  if (v4(v13, 1, v12) == 1)
  {
    v18 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 168);
    sub_23EBA3038(*(_QWORD *)(v0 + 160), &qword_25433F930);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 168);
    v16(v21, *(_QWORD *)(v0 + 160), v22);
    sub_23EC138EC(inited, 1, 0, v24);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  v25 = *(_QWORD *)(v0 + 184);
  v26 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4(v26, 1, v25) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 168), &qword_25433F930);
    if (qword_256DB7210 != -1)
      swift_once();
    v27 = sub_23EC2E684();
    __swift_project_value_buffer(v27, (uint64_t)qword_256DC7780);
    v28 = sub_23EC2E66C();
    v29 = sub_23EC2EA08();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23EB9F000, v28, v29, "Unable to generate Request URL for peaks API.", v30, 2u);
      MEMORY[0x24265B940](v30, -1, -1);
    }
    v31 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 184);
    v33 = *(_QWORD *)(v0 + 192);
    v34 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 136);
    v36 = *(_QWORD *)(v0 + 80);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v36, 1, 1, v34);
    goto LABEL_16;
  }
  v38 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 192);
  v39 = *(_QWORD *)(v0 + 200);
  v41 = *(_QWORD *)(v0 + 184);
  v43 = *(_QWORD *)(v0 + 144);
  v42 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 128);
  v45 = *(_QWORD *)(v0 + 136);
  v16(v38, *(_QWORD *)(v0 + 168), v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v38, v41);
  sub_23EC2DF58();
  sub_23EC0A4E0(v42);
  v46 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  *(_QWORD *)(v0 + 240) = v46;
  v46(v43, v44);
  sub_23EC2DF40();
  v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E48 + dword_256DB7E48);
  v47 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v47;
  *v47 = v0;
  v47[1] = sub_23EBBD1A8;
  return v48(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 104));
}

uint64_t sub_23EBBD1A8()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBBD214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB7208 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7768);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign Peaks API request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v9 = *(_QWORD *)(v0 + 216);
    v25 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 80);

    v8(v12, v14);
    v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v9, v10);
    v16(v25, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, 1, 1, v14);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
    v18 = *(_QWORD *)(v0 + 216);
    v26 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v22, v3, v1);
    sub_23EC2DF94();
    v17(v21, v1);
    v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v23(v18, v20);
    v23(v26, v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v22, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBD4A4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 128));
  sub_23EBA3038(*(_QWORD *)(v0 + 120), &qword_25433F918);
  if (qword_256DB7208 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7768);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign Peaks API request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 240);
  v6 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 80);

  v5(v9, v11);
  v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v13(v6, v7);
  v13(v15, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBD680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[14] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[15] = v9;
  v7[16] = *(_QWORD *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[18] = v10;
  *v10 = v7;
  v10[1] = sub_23EBBD728;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EBBD728()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[19] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = sub_23EBBD798;
  return sub_23EBCCC58(v1[14], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_23EBBD798()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBD7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7200 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7750);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for ServiceLocation Subscription", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 136), v3, v1);
    sub_23EC0A6EC(0xD00000000000003BLL, 0x800000023EC39000, (uint8_t *)0xD00000000000003ALL, 0x800000023EC39040);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v10;
    *v10 = v0;
    v10[1] = sub_23EBBDA10;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBBDA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[21] = a1;
  v5[22] = a2;
  v5[23] = a3;
  v5[24] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBDA80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint8_t *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  id v74;
  id v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(id *)(v0 + 184);
    v4 = objc_msgSend(v2, sel_statusCode);
    switch((unint64_t)v4)
    {
      case 0x190uLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v5 = sub_23EC2E684();
        __swift_project_value_buffer(v5, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v7 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v7))
        {
          v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v8 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
          MEMORY[0x24265B940](v8, -1, -1);
        }
        goto LABEL_41;
      case 0x191uLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v43 = sub_23EC2E684();
        __swift_project_value_buffer(v43, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v44 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v45 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v44, "Request Unauthorized or Access Token Expired.", v45, 2u);
          MEMORY[0x24265B940](v45, -1, -1);
        }
        goto LABEL_41;
      case 0x192uLL:
      case 0x193uLL:
      case 0x194uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x199uLL:
      case 0x19AuLL:
      case 0x19BuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_23;
      case 0x19CuLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v46 = sub_23EC2E684();
        __swift_project_value_buffer(v46, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v47 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v47))
        {
          v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v48 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v47, "Access Token expired. Retry after refreshing token", v48, 2u);
          MEMORY[0x24265B940](v48, -1, -1);
        }
        goto LABEL_41;
      case 0x1ADuLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v49 = sub_23EC2E684();
        __swift_project_value_buffer(v49, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v50 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v50, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v51, 2u);
          MEMORY[0x24265B940](v51, -1, -1);
        }
LABEL_41:
        v52 = *(_QWORD *)(v0 + 176);
        v53 = *(void **)(v0 + 184);
        v54 = *(_QWORD *)(v0 + 168);
        v56 = *(_QWORD *)(v0 + 128);
        v55 = *(_QWORD *)(v0 + 136);
        v57 = *(_QWORD *)(v0 + 120);

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v54, v52);

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
        break;
      default:
        if (v4 == (id)500)
        {
          if (qword_256DB7200 != -1)
            swift_once();
          v58 = sub_23EC2E684();
          __swift_project_value_buffer(v58, (uint64_t)qword_256DC7750);
          v59 = sub_23EC2E66C();
          v60 = sub_23EC2EA08();
          if (os_log_type_enabled(v59, v60))
          {
            v61 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v61 = 0;
            _os_log_impl(&dword_23EB9F000, v59, v60, "Internal Server Error", v61, 2u);
            MEMORY[0x24265B940](v61, -1, -1);
          }
          v63 = *(_QWORD *)(v0 + 176);
          v62 = *(void **)(v0 + 184);
          v64 = *(_QWORD *)(v0 + 168);
          v65 = *(_QWORD *)(v0 + 128);
          v77 = *(_QWORD *)(v0 + 120);
          v78 = *(_QWORD *)(v0 + 136);

          type metadata accessor for NetworkError();
          sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
          swift_allocError();
          *v66 = objc_msgSend(v2, sel_statusCode);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          sub_23EBA3EDC(v64, v63);

          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v78, v77);
        }
        else if (v4 == (id)201)
        {
          if (qword_256DB7200 != -1)
            swift_once();
          v20 = sub_23EC2E684();
          *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v20, (uint64_t)qword_256DC7750);
          v21 = sub_23EC2E66C();
          v22 = sub_23EC2EA14();
          if (os_log_type_enabled(v21, v22))
          {
            v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v23 = 0;
            _os_log_impl(&dword_23EB9F000, v21, v22, "ServiceLocation Subscription Response received", v23, 2u);
            MEMORY[0x24265B940](v23, -1, -1);
          }
          v24 = *(void **)(v0 + 192);

          sub_23EC2DFC4();
          swift_allocObject();
          sub_23EC2DFB8();
          type metadata accessor for UtilitySubscriptionResponse();
          sub_23EBC0AD4(&qword_256DB7E80, (uint64_t (*)(uint64_t))type metadata accessor for UtilitySubscriptionResponse, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionResponse);
          sub_23EC2DFAC();
          v25 = v24;
          swift_release();
          if (!v24)
          {
            *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 48);
            v74 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
            v75 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v74);
            *(_QWORD *)(v0 + 216) = v75;

            v76 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 224) = v76;
            *v76 = v0;
            v76[1] = sub_23EBBE6F0;
            return sub_23EBF9FB0(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), (uint64_t)v75);
          }
          v26 = sub_23EC2E66C();
          v27 = sub_23EC2EA08();
          if (os_log_type_enabled(v26, v27))
          {
            v28 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v28 = 0;
            _os_log_impl(&dword_23EB9F000, v26, v27, "Error while decoding response from server", v28, 2u);
            MEMORY[0x24265B940](v28, -1, -1);
          }
          v29 = *(_QWORD *)(v0 + 176);
          v30 = *(void **)(v0 + 184);
          v31 = *(_QWORD *)(v0 + 168);
          v33 = *(_QWORD *)(v0 + 128);
          v32 = *(_QWORD *)(v0 + 136);
          v34 = *(_QWORD *)(v0 + 120);

          sub_23EC244A4(v25);
          swift_willThrow();
          sub_23EBA3EDC(v31, v29);

          (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        }
        else
        {
LABEL_23:
          if (qword_256DB7200 != -1)
            swift_once();
          v35 = *(void **)(v0 + 184);
          v36 = sub_23EC2E684();
          __swift_project_value_buffer(v36, (uint64_t)qword_256DC7750);
          v37 = v35;
          v38 = sub_23EC2E66C();
          v39 = sub_23EC2EA08();
          v40 = os_log_type_enabled(v38, v39);
          v41 = *(void **)(v0 + 184);
          if (v40)
          {
            v42 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v42 = 134217984;
            *(_QWORD *)(v0 + 40) = objc_msgSend(v2, sel_statusCode);
            sub_23EC2EA68();

            _os_log_impl(&dword_23EB9F000, v38, v39, "Request failed : Status Code %ld", v42, 0xCu);
            MEMORY[0x24265B940](v42, -1, -1);
          }
          else
          {

          }
          v67 = *(_QWORD *)(v0 + 176);
          v68 = *(void **)(v0 + 184);
          v69 = *(_QWORD *)(v0 + 168);
          v70 = *(_QWORD *)(v0 + 128);
          v79 = *(_QWORD *)(v0 + 136);
          v71 = *(_QWORD *)(v0 + 120);
          type metadata accessor for NetworkError();
          sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
          swift_allocError();
          *v72 = objc_msgSend(v2, sel_statusCode);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          sub_23EBA3EDC(v69, v67);

          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v79, v71);
        }
        break;
    }
  }
  else
  {
    if (qword_256DB7200 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7750);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process ServiceLocation Subscription Response.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(void **)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 120);

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v19 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v15, v13);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBE6F0(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(*v2 + 232) = a1;
  swift_task_dealloc();

  if (v1)
  return swift_task_switch();
}

uint64_t sub_23EBBE76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[14] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[15] = v9;
  v7[16] = *(_QWORD *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[18] = v10;
  *v10 = v7;
  v10[1] = sub_23EBBE814;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EBBE814()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[19] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = sub_23EBBE884;
  return sub_23EBCD8C8(v1[14], v1[9], v1[10], v1[11], v1[12], v1[7], v1[8]);
}

uint64_t sub_23EBBE884()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBE8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7200 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7750);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for  Subscription Details", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 136), v3, v1);
    sub_23EC0A6EC(0xD000000000000047, 0x800000023EC38F70, (uint8_t *)0xD00000000000001ALL, 0x800000023EC38FC0);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v10;
    *v10 = v0;
    v10[1] = sub_23EBBEAFC;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBBEAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[21] = a1;
  v5[22] = a2;
  v5[23] = a3;
  v5[24] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBEB6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint8_t *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  id v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    if (qword_256DB7200 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7750);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process ServiceLocation Subscription Response.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(void **)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 120);

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v19 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v15, v13);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_55;
  }
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 184);
  sub_23EC0AFC4(0xD00000000000001BLL, (uint8_t *)0x800000023EC38FE0, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4E798);
  v4 = objc_msgSend(v2, sel_statusCode);
  switch((unint64_t)v4)
  {
    case 0x190uLL:
      if (qword_256DB7200 != -1)
        swift_once();
      v5 = sub_23EC2E684();
      __swift_project_value_buffer(v5, (uint64_t)qword_256DC7750);
      v6 = sub_23EC2E66C();
      v7 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
        MEMORY[0x24265B940](v8, -1, -1);
      }
      goto LABEL_46;
    case 0x191uLL:
      if (qword_256DB7200 != -1)
        swift_once();
      v43 = sub_23EC2E684();
      __swift_project_value_buffer(v43, (uint64_t)qword_256DC7750);
      v6 = sub_23EC2E66C();
      v44 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v44, "Request Unauthorized.", v45, 2u);
        MEMORY[0x24265B940](v45, -1, -1);
      }
      goto LABEL_46;
    case 0x192uLL:
    case 0x193uLL:
    case 0x195uLL:
    case 0x196uLL:
    case 0x197uLL:
    case 0x198uLL:
    case 0x199uLL:
    case 0x19AuLL:
    case 0x19BuLL:
    case 0x19DuLL:
    case 0x19EuLL:
    case 0x19FuLL:
    case 0x1A0uLL:
    case 0x1A1uLL:
    case 0x1A2uLL:
    case 0x1A3uLL:
    case 0x1A4uLL:
    case 0x1A5uLL:
    case 0x1A6uLL:
    case 0x1A7uLL:
    case 0x1A8uLL:
    case 0x1A9uLL:
    case 0x1AAuLL:
    case 0x1ABuLL:
    case 0x1ACuLL:
      goto LABEL_23;
    case 0x194uLL:
      if (qword_256DB7200 != -1)
        swift_once();
      v46 = sub_23EC2E684();
      __swift_project_value_buffer(v46, (uint64_t)qword_256DC7750);
      v6 = sub_23EC2E66C();
      v47 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v47, "Subscription Not Found! Proceed to user Off-boarding Actions.", v48, 2u);
        MEMORY[0x24265B940](v48, -1, -1);
      }
      goto LABEL_46;
    case 0x19CuLL:
      if (qword_256DB7200 != -1)
        swift_once();
      v49 = sub_23EC2E684();
      __swift_project_value_buffer(v49, (uint64_t)qword_256DC7750);
      v6 = sub_23EC2E66C();
      v50 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v50, "Invalid Access Token. Try again after refreshing acces token", v51, 2u);
        MEMORY[0x24265B940](v51, -1, -1);
      }
      goto LABEL_46;
    case 0x1ADuLL:
      if (qword_256DB7200 != -1)
        swift_once();
      v52 = sub_23EC2E684();
      __swift_project_value_buffer(v52, (uint64_t)qword_256DC7750);
      v6 = sub_23EC2E66C();
      v53 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v54 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v53, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v54, 2u);
        MEMORY[0x24265B940](v54, -1, -1);
      }
LABEL_46:
      v55 = *(_QWORD *)(v0 + 176);
      v56 = *(void **)(v0 + 184);
      v57 = *(_QWORD *)(v0 + 168);
      v59 = *(_QWORD *)(v0 + 128);
      v58 = *(_QWORD *)(v0 + 136);
      v60 = *(_QWORD *)(v0 + 120);

      type metadata accessor for NetworkError();
      sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v57, v55);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
      goto LABEL_55;
    default:
      if (v4 == (id)500)
      {
        if (qword_256DB7200 != -1)
          swift_once();
        v61 = sub_23EC2E684();
        __swift_project_value_buffer(v61, (uint64_t)qword_256DC7750);
        v62 = sub_23EC2E66C();
        v63 = sub_23EC2EA08();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl(&dword_23EB9F000, v62, v63, "Internal Server Error", v64, 2u);
          MEMORY[0x24265B940](v64, -1, -1);
        }
        v66 = *(_QWORD *)(v0 + 176);
        v65 = *(void **)(v0 + 184);
        v67 = *(_QWORD *)(v0 + 168);
        v68 = *(_QWORD *)(v0 + 128);
        v74 = *(_QWORD *)(v0 + 120);
        v75 = *(_QWORD *)(v0 + 136);

        goto LABEL_54;
      }
      if (v4 != (id)200)
      {
LABEL_23:
        if (qword_256DB7200 != -1)
          swift_once();
        v35 = *(void **)(v0 + 184);
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC7750);
        v37 = v35;
        v38 = sub_23EC2E66C();
        v39 = sub_23EC2EA08();
        v40 = os_log_type_enabled(v38, v39);
        v41 = *(void **)(v0 + 184);
        if (v40)
        {
          v42 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v42 = 134217984;
          *(_QWORD *)(v0 + 40) = objc_msgSend(v2, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v38, v39, "Request failed : Status Code %ld", v42, 0xCu);
          MEMORY[0x24265B940](v42, -1, -1);
        }
        else
        {

        }
        v66 = *(_QWORD *)(v0 + 176);
        v65 = *(void **)(v0 + 184);
        v67 = *(_QWORD *)(v0 + 168);
        v68 = *(_QWORD *)(v0 + 128);
        v74 = *(_QWORD *)(v0 + 120);
        v75 = *(_QWORD *)(v0 + 136);
LABEL_54:
        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        *v69 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v67, v66);

        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v75, v74);
        goto LABEL_55;
      }
      if (qword_256DB7200 != -1)
        swift_once();
      v20 = sub_23EC2E684();
      *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v20, (uint64_t)qword_256DC7750);
      v21 = sub_23EC2E66C();
      v22 = sub_23EC2EA14();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_23EB9F000, v21, v22, "ServiceLocation Subscription Response received", v23, 2u);
        MEMORY[0x24265B940](v23, -1, -1);
      }
      v24 = *(void **)(v0 + 192);

      sub_23EC2DFC4();
      swift_allocObject();
      sub_23EC2DFB8();
      type metadata accessor for UtilitySubscriptionResponse();
      sub_23EBC0AD4(&qword_256DB7E80, (uint64_t (*)(uint64_t))type metadata accessor for UtilitySubscriptionResponse, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionResponse);
      sub_23EC2DFAC();
      v25 = v24;
      swift_release();
      if (v24)
      {
        v26 = sub_23EC2E66C();
        v27 = sub_23EC2EA08();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_23EB9F000, v26, v27, "Error while decoding response from server", v28, 2u);
          MEMORY[0x24265B940](v28, -1, -1);
        }
        v29 = *(_QWORD *)(v0 + 176);
        v30 = *(void **)(v0 + 184);
        v31 = *(_QWORD *)(v0 + 168);
        v33 = *(_QWORD *)(v0 + 128);
        v32 = *(_QWORD *)(v0 + 136);
        v34 = *(_QWORD *)(v0 + 120);

        sub_23EC244A4(v25);
        swift_willThrow();
        sub_23EBA3EDC(v31, v29);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_55:
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 48);
      v71 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
      v72 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v71);
      *(_QWORD *)(v0 + 216) = v72;

      v73 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v73;
      *v73 = v0;
      v73[1] = sub_23EBBF890;
      return sub_23EBF9FB0(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), (uint64_t)v72);
  }
}

uint64_t sub_23EBBF890(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(*v2 + 232) = a1;
  swift_task_dealloc();

  if (v1)
  return swift_task_switch();
}

uint64_t sub_23EBBF90C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  char *v5;
  void *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 208)
                             + OBJC_IVAR____TtC19HomeUtilityServices27UtilitySubscriptionResponse_subscription)
                 + OBJC_IVAR____TtC19HomeUtilityServices30UtilitySubscriptionInformation_customerAgreements);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_14:
    v13 = v19;
    v14 = (void *)v19[29];
    swift_bridgeObjectRelease();

    v15 = (void *)v19[23];
    v17 = v19[16];
    v16 = v19[17];
    v18 = v19[15];
    sub_23EBA3EDC(v13[21], v13[22]);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(_QWORD))v13[1])(v13[26]);
  }
  swift_bridgeObjectRetain();
  result = sub_23EC2EC0C();
  v2 = result;
  if (!result)
    goto LABEL_14;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        v5 = (char *)MEMORY[0x24265B16C](i, v1);
      else
        v5 = (char *)*(id *)(v1 + 8 * i + 32);
      v6 = v5;
      v7 = (uint64_t *)&v5[OBJC_IVAR____TtC19HomeUtilityServices24UtilityCustomerAgreement_alternateSupplier];
      swift_beginAccess();
      v8 = v7[1];
      if (v8
        && (v9 = *v7,
            swift_bridgeObjectRetain(),
            v10 = sub_23EBA8B34(v9, v8),
            v12 = v11,
            swift_bridgeObjectRelease(),
            v12))
      {
        *v7 = v10;
        v7[1] = v12;

        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_23EBBFAE0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = sub_23EC2E66C();
  v2 = sub_23EC2EA08();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_23EB9F000, v1, v2, "Error while trying to fetch UtilityConfiguration.", v3, 2u);
    MEMORY[0x24265B940](v3, -1, -1);
  }

  v4 = sub_23EC2E66C();
  v5 = sub_23EC2EA08();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_23EB9F000, v4, v5, "Returning Subscription without altering Alternate Supplier Name", v6, 2u);
    MEMORY[0x24265B940](v6, -1, -1);
  }

  v7 = *(void **)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 120);
  sub_23EBA3EDC(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 208));
}

uint64_t sub_23EBBFC3C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBBFC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[10] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[11] = v9;
  v7[12] = *(_QWORD *)(v9 - 8);
  v7[13] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[14] = v10;
  *v10 = v7;
  v10[1] = sub_23EBBFD34;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EBBFD34()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[15] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = sub_23EBBFDA4;
  return sub_23EBCE238(v1[10], v1[5], v1[6], v1[7], v1[8], v1[3], v1[4]);
}

uint64_t sub_23EBBFDA4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBBFDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7200 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7750);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for  Subscription Details", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 104), v3, v1);
    sub_23EC0A6EC(0xD000000000000048, 0x800000023EC38EE0, (uint8_t *)0xD00000000000001ELL, 0x800000023EC38F30);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v10;
    *v10 = v0;
    v10[1] = sub_23EBC0020;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBC0020(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;

  v7 = *v4;
  *(_QWORD *)(v7 + 136) = a3;
  *(_QWORD *)(v7 + 144) = v3;
  swift_task_dealloc();
  if (!v3)
    sub_23EBA3EDC(a1, a2);
  return swift_task_switch();
}

uint64_t sub_23EBC00A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  void *v34;
  uint8_t *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(id *)(v0 + 136);
    sub_23EC0AFC4(0xD00000000000001BLL, (uint8_t *)0x800000023EC38F50, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4E7C0);
    v4 = objc_msgSend(v2, sel_statusCode);
    switch((unint64_t)v4)
    {
      case 0x190uLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v5 = sub_23EC2E684();
        __swift_project_value_buffer(v5, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v7 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v7))
        {
          v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v8 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
          MEMORY[0x24265B940](v8, -1, -1);
        }
        goto LABEL_38;
      case 0x191uLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v37 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v37, "Request Unauthorized or Access Token Expired.", v38, 2u);
          MEMORY[0x24265B940](v38, -1, -1);
        }
        goto LABEL_38;
      case 0x192uLL:
      case 0x193uLL:
      case 0x194uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x199uLL:
      case 0x19AuLL:
      case 0x19BuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_20;
      case 0x19CuLL:
        if (qword_256DB7208 != -1)
          swift_once();
        v39 = sub_23EC2E684();
        __swift_project_value_buffer(v39, (uint64_t)qword_256DC7768);
        v6 = sub_23EC2E66C();
        v40 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v41 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v40, "Authorization Token expired. Retry after refreshing token", v41, 2u);
          MEMORY[0x24265B940](v41, -1, -1);
        }
        goto LABEL_38;
      case 0x1ADuLL:
        if (qword_256DB7200 != -1)
          swift_once();
        v42 = sub_23EC2E684();
        __swift_project_value_buffer(v42, (uint64_t)qword_256DC7750);
        v6 = sub_23EC2E66C();
        v43 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v44 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v43, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v44, 2u);
          MEMORY[0x24265B940](v44, -1, -1);
        }
LABEL_38:
        v13 = *(void **)(v0 + 136);
        v15 = *(_QWORD *)(v0 + 96);
        v14 = *(_QWORD *)(v0 + 104);
        v16 = *(_QWORD *)(v0 + 88);

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        goto LABEL_39;
      default:
        if (v4 == (id)500)
        {
          if (qword_256DB7200 != -1)
            swift_once();
          v46 = sub_23EC2E684();
          __swift_project_value_buffer(v46, (uint64_t)qword_256DC7750);
          v47 = sub_23EC2E66C();
          v48 = sub_23EC2EA08();
          if (os_log_type_enabled(v47, v48))
          {
            v49 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v49 = 0;
            _os_log_impl(&dword_23EB9F000, v47, v48, "Internal Server Error", v49, 2u);
            MEMORY[0x24265B940](v49, -1, -1);
          }
          v50 = *(void **)(v0 + 136);
          v52 = *(_QWORD *)(v0 + 96);
          v51 = *(_QWORD *)(v0 + 104);
          v53 = *(_QWORD *)(v0 + 88);

        }
        else
        {
          if (v4 == (id)204)
          {
            if (qword_256DB7200 != -1)
              swift_once();
            v18 = sub_23EC2E684();
            __swift_project_value_buffer(v18, (uint64_t)qword_256DC7750);
            v19 = sub_23EC2E66C();
            v20 = sub_23EC2EA14();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v21 = 0;
              _os_log_impl(&dword_23EB9F000, v19, v20, "ServiceLocation Subscription revoked successfully", v21, 2u);
              MEMORY[0x24265B940](v21, -1, -1);
            }
            v22 = *(void **)(v0 + 136);
            v24 = *(_QWORD *)(v0 + 96);
            v23 = *(_QWORD *)(v0 + 104);
            v25 = *(_QWORD *)(v0 + 88);

            (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
            swift_task_dealloc();
            swift_task_dealloc();
            v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
            v27 = 1;
            return v26(v27);
          }
LABEL_20:
          if (qword_256DB7200 != -1)
            swift_once();
          v28 = *(void **)(v0 + 136);
          v29 = sub_23EC2E684();
          __swift_project_value_buffer(v29, (uint64_t)qword_256DC7750);
          v30 = v28;
          v31 = sub_23EC2E66C();
          v32 = sub_23EC2EA08();
          v33 = os_log_type_enabled(v31, v32);
          v34 = *(void **)(v0 + 136);
          if (v33)
          {
            v35 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v35 = 134217984;
            *(_QWORD *)(v0 + 16) = objc_msgSend(v2, sel_statusCode);
            sub_23EC2EA68();

            _os_log_impl(&dword_23EB9F000, v31, v32, "Request failed : Status Code %ld", v35, 0xCu);
            MEMORY[0x24265B940](v35, -1, -1);
          }
          else
          {

          }
          v50 = *(void **)(v0 + 136);
          v52 = *(_QWORD *)(v0 + 96);
          v51 = *(_QWORD *)(v0 + 104);
          v53 = *(_QWORD *)(v0 + 88);
        }
        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        *v54 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
        goto LABEL_40;
    }
  }
  if (qword_256DB7200 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_256DC7750);
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2EA08();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process ServiceLocation Subscription Response.", v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
  }
  v13 = *(void **)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 88);

  type metadata accessor for NetworkError();
  sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
  swift_allocError();
  *v17 = 2;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
LABEL_39:

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
LABEL_40:
  swift_task_dealloc();
  swift_task_dealloc();
  v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v27 = 0;
  return v26(v27);
}

uint64_t sub_23EBC0A40()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23EBC0A94(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBC0AD4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24265B8B0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23EBC0B20(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC0B58(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC0BC8 + 4 * byte_23EC31E74[a2]))(0x7954726F74636166);
}

uint64_t sub_23EBC0BC8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7954726F74636166 && v1 == 0xEA00000000006570)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_23EBC0C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

void sub_23EBC0C84(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC0CE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC0D28 + 4 * byte_23EC31E7C[a2]))(7759204);
}

uint64_t sub_23EBC0D28(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7759204 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23EBC0DB8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000064;
  v3 = 0x496D6172676F7270;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000012;
    else
      v5 = 0xD000000000000010;
    if (v4 == 1)
      v6 = 0x800000023EC378B0;
    else
      v6 = 0x800000023EC378D0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x496D6172676F7270;
  v6 = 0xE900000000000064;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000012;
    else
      v3 = 0xD000000000000010;
    if (v7 == 1)
      v2 = 0x800000023EC378B0;
    else
      v2 = 0x800000023EC378D0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23EBC0EC0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC0F1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC0F78 + 4 * byte_23EC31E84[a2]))(0x65746144646E65);
}

uint64_t sub_23EBC0F78(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65746144646E65 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23EBC101C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC1054(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC110C + 4 * byte_23EC31E8F[a2]))(0x754E6C6169726573);
}

uint64_t sub_23EBC110C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x754E6C6169726573 && v1 == 0xEC0000007265626DLL)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23EBC1214(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC1280(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC1308 + 4 * byte_23EC31E9B[a2]))(0x6574617473);
}

uint64_t sub_23EBC1308(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6574617473 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23EBC13DC(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_23EBC1428(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC14AC + 4 * byte_23EC31EA5[a2]))(0x49746E756F636361);
}

uint64_t sub_23EBC14AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x49746E756F636361 && v1 == 0xE900000000000064)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23EBC1574(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x800000023EC37B70;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65646F43646E6573;
    else
      v5 = 0x6F43796669726576;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0xEA00000000006564;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x800000023EC37B70;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x65646F43646E6573;
    else
      v2 = 0x6F43796669726576;
    if (v7 == 1)
      v3 = 0xE800000000000000;
    else
      v3 = 0xEA00000000006564;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23EBC1688(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73736572646461;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x800000023EC37930;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73736572646461;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0x800000023EC37930;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_23EBC1730(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC1770(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23EBC17E4 + 4 * byte_23EC31EAF[a2]))(0x444552454954);
}

uint64_t sub_23EBC17E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x444552454954 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23EBC18A0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xED00006B636F6C42;
  v3 = 0x6C61767265746E49;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x696F506567617355;
    else
      v5 = 0x6D75536567617355;
    if (v4 == 1)
      v6 = 0xEA0000000000746ELL;
    else
      v6 = 0xEC0000007972616DLL;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6C61767265746E49;
  v6 = 0xED00006B636F6C42;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x696F506567617355;
    else
      v3 = 0x6D75536567617355;
    if (v7 == 1)
      v2 = 0xEA0000000000746ELL;
    else
      v2 = 0xEC0000007972616DLL;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23EBC19E0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C6562616CLL;
    else
      v3 = 1802396018;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6C6562616CLL;
      else
        v6 = 1802396018;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x7472617473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x7472617473)
  {
LABEL_21:
    v8 = sub_23EC2ED38();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23EBC1AD8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23EBC1B24(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_23EBC1B74 + 4 * byte_23EC31EB8[a2]))();
}

uint64_t sub_23EBC1B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0x800000023EC37AD0)
    v4 = 1;
  else
    v4 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_23EBC1BF8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void sub_23EBC1C08(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_23EBC4ACC();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_23EBC1C38()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_23EBC1C40(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_23EBC4ACC();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_23EBC1C74()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC1CDC()
{
  sub_23EBC4A88();
  return sub_23EC2E558();
}

uint64_t sub_23EBC1D14()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

BOOL sub_23EBC1D78(uint64_t a1, uint64_t *a2)
{
  return sub_23EBC0C78(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_23EBC1D94()
{
  qword_256DC75B0 = (uint64_t)&unk_250F4E7E8;
}

uint64_t sub_23EBC1DA8@<X0>(_QWORD *a1@<X8>)
{
  if (qword_256DB7130 != -1)
    swift_once();
  *a1 = qword_256DC75B0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23EBC1DF8(uint64_t *a1, uint64_t *a2)
{
  return sub_23EBC431C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_23EBC1E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_23EC2E660();
  __swift_allocate_value_buffer(v0, qword_256DC75B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256DC75B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F00);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F08);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23EC32580;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "NONE";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23EC2E648();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "INVALID_TOKEN";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SUBSCRIPTION_NOT_FOUND";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BAD_REQUEST";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "INTERNAL_SERVER_ERROR";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CLOUDKIT_ERROR";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "UNKNOWN_ERROR";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return sub_23EC2E654();
}

uint64_t sub_23EBC2074@<X0>(uint64_t a1@<X8>)
{
  return sub_23EBC3658(&qword_256DB7138, (uint64_t)qword_256DC75B8, a1);
}

uint64_t sub_23EBC2090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23EC2E660();
  __swift_allocate_value_buffer(v0, qword_256DC75D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256DC75D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F00);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F08);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23EC32590;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "localSerialization";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23EC2E648();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "wireSerialization";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "pccEncryptedMasterKey";
  *(_QWORD *)(v12 + 8) = 21;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23EC2E654();
}

uint64_t sub_23EBC2224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;

  while (1)
  {
    result = sub_23EC2E564();
    v1 = v0;
    if (v0 || (v3 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        type metadata accessor for RecordTransport(0);
        sub_23EC2E594();
LABEL_3:
        v1 = 0;
        break;
      case 2:
        sub_23EBC23C8();
        goto LABEL_3;
      case 1:
        sub_23EBC2300();
        goto LABEL_3;
    }
    v0 = v1;
  }
}

uint64_t sub_23EBC2300()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23EC2E594();
  if (v0)
    return sub_23EBA4CE0(0, 0xF000000000000000);
  return result;
}

uint64_t sub_23EBC23C8()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23EC2E594();
  if (v0)
    return sub_23EBA4CE0(0, 0xF000000000000000);
  return result;
}

uint64_t sub_23EBC2494()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = v0[1];
  if ((~v2 & 0x3000000000000000) != 0)
  {
    if ((v2 & 0x2000000000000000) != 0)
    {
      result = (uint64_t)sub_23EBC25E4(v0);
      if (v1)
        return result;
    }
    else
    {
      result = (uint64_t)sub_23EBC2560(v0);
      if (v1)
        return result;
    }
  }
  result = sub_23EBC2688((uint64_t)v0);
  if (!v1)
  {
    type metadata accessor for RecordTransport(0);
    return sub_23EC2E51C();
  }
  return result;
}

uint64_t *sub_23EBC2560(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result[1];
  if ((v1 & 0x2000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *result;
    sub_23EBC3B0C(*result, v1);
    sub_23EC2E618();
    return (uint64_t *)sub_23EBC3B14(v2, v1);
  }
  return result;
}

uint64_t *sub_23EBC25E4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v3;

  v1 = result[1];
  if ((~v1 & 0x3000000000000000) == 0 || (v1 & 0x2000000000000000) == 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *result;
    sub_23EBC3B0C(*result, v1);
    sub_23EC2E618();
    return (uint64_t *)sub_23EBC3B14(v3, v1);
  }
  return result;
}

uint64_t sub_23EBC2688(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for RecordTransport(0);
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    sub_23EBA3E98(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    sub_23EC2E618();
    return sub_23EBA4CE0(v5, v4);
  }
  return result;
}

double sub_23EBC2724@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  *a2 = xmmword_23EC325B0;
  sub_23EC2E528();
  result = 0.0;
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 24)) = xmmword_23EC325A0;
  return result;
}

uint64_t sub_23EBC276C()
{
  return 0x725464726F636552;
}

uint64_t sub_23EBC2794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23EBC27D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_23EBC2814())()
{
  return nullsub_1;
}

uint64_t sub_23EBC2828()
{
  return sub_23EBC2224();
}

uint64_t sub_23EBC283C()
{
  return sub_23EBC2494();
}

uint64_t sub_23EBC2854()
{
  sub_23EBC0AD4(&qword_256DB7F10, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC3225C);
  return sub_23EC2E54C();
}

uint64_t sub_23EBC28A8@<X0>(uint64_t a1@<X8>)
{
  return sub_23EBC3658(&qword_256DB7140, (uint64_t)qword_256DC75D0, a1);
}

uint64_t sub_23EBC28C4()
{
  sub_23EBC0AD4(&qword_256DB7ED8, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC32294);
  return sub_23EC2E5DC();
}

uint64_t sub_23EBC2908()
{
  sub_23EBC0AD4(&qword_256DB7ED8, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC32294);
  return sub_23EC2E5E8();
}

uint64_t sub_23EBC2960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_23EC2E660();
  __swift_allocate_value_buffer(v0, qword_256DC75E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256DC75E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F00);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F08);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23EC325C0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "token";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23EC2E648();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "limit";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "offset";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "time";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "recordType";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_23EC2E654();
}

uint64_t sub_23EBC2B60()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23EC2E564();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 5:
          sub_23EC2E5B8();
          break;
        case 2:
          sub_23EC2E5AC();
          break;
        case 3:
          sub_23EC2E5A0();
          break;
        default:
          break;
      }
      result = sub_23EC2E564();
    }
  }
  return result;
}

uint64_t sub_23EBC2C58()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = sub_23EC2E630(), !v1))
  {
    if (!v0[2] || (result = sub_23EC2E624(), !v1))
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23EBC2DEC@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_23EC325D0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0xE000000000000000;
  return sub_23EC2E528();
}

uint64_t sub_23EBC2E28()
{
  return 0x6575716552746547;
}

uint64_t sub_23EBC2E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23EBC2E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_23EBC2EC4())()
{
  return nullsub_1;
}

uint64_t sub_23EBC2ED8()
{
  return sub_23EBC2B60();
}

uint64_t sub_23EBC2EEC()
{
  return sub_23EBC2C58();
}

uint64_t sub_23EBC2F00()
{
  sub_23EBC0AD4(&qword_256DB7F20, type metadata accessor for GetRequest, (uint64_t)&unk_23EC320F4);
  return sub_23EC2E54C();
}

uint64_t sub_23EBC2F50@<X0>(uint64_t a1@<X8>)
{
  return sub_23EBC3658(&qword_256DB7148, (uint64_t)qword_256DC75E8, a1);
}

uint64_t sub_23EBC2F6C()
{
  sub_23EBC0AD4(&qword_256DB7EB8, type metadata accessor for GetRequest, (uint64_t)&unk_23EC3212C);
  return sub_23EC2E5DC();
}

uint64_t sub_23EBC2FAC()
{
  sub_23EBC0AD4(&qword_256DB7EB8, type metadata accessor for GetRequest, (uint64_t)&unk_23EC3212C);
  return sub_23EC2E5E8();
}

uint64_t sub_23EBC3000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_23EC2E660();
  __swift_allocate_value_buffer(v0, qword_256DC7600);
  __swift_project_value_buffer(v0, (uint64_t)qword_256DC7600);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F00);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7F08);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23EC325E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "records";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23EC2E648();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "offset";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "moreToCome";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "error";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return sub_23EC2E654();
}

uint64_t sub_23EBC31C0()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23EC2E564();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_23EC2E4EC();
          sub_23EBC0AD4(&qword_256DB7F30, (uint64_t (*)(uint64_t))MEMORY[0x24BE17930], MEMORY[0x24BE17920]);
          v4 = v3;
          sub_23EC2E5C4();
          goto LABEL_5;
        case 2:
          v4 = v3;
          sub_23EC2E5A0();
          goto LABEL_5;
        case 3:
          v4 = v3;
          sub_23EC2E57C();
          goto LABEL_5;
        case 4:
          sub_23EBC4A88();
          v4 = v3;
          sub_23EC2E588();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_23EC2E564();
    }
  }
  return result;
}

uint64_t sub_23EBC3318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (sub_23EC2E4EC(),
        sub_23EBC0AD4(&qword_256DB7F30, (uint64_t (*)(uint64_t))MEMORY[0x24BE17930], MEMORY[0x24BE17920]),
        result = sub_23EC2E63C(),
        !v1))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23EBC34C8@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 8) = xmmword_23EC325F0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  return sub_23EC2E528();
}

uint64_t sub_23EBC350C()
{
  return 0x527364726F636552;
}

uint64_t sub_23EBC3530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23EBC3570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_23EBC35B0())()
{
  return nullsub_1;
}

uint64_t sub_23EBC35C4()
{
  return sub_23EBC31C0();
}

uint64_t sub_23EBC35D8()
{
  return sub_23EBC3318();
}

uint64_t sub_23EBC35EC()
{
  sub_23EBC0AD4(&qword_256DB7F28, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31F8C);
  return sub_23EC2E54C();
}

uint64_t sub_23EBC363C@<X0>(uint64_t a1@<X8>)
{
  return sub_23EBC3658(&qword_256DB7150, (uint64_t)qword_256DC7600, a1);
}

uint64_t sub_23EBC3658@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_23EC2E660();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_23EBC36C4()
{
  sub_23EBC0AD4(&qword_256DB7E98, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31FC4);
  return sub_23EC2E5DC();
}

uint64_t sub_23EBC3704()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC3758()
{
  sub_23EBC0AD4(&qword_256DB7E98, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31FC4);
  return sub_23EC2E5E8();
}

uint64_t sub_23EBC37A8()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC37FC()
{
  return sub_23EBC0AD4(&qword_256DB7E90, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31ED4);
}

uint64_t type metadata accessor for RecordsResponse(uint64_t a1)
{
  return sub_23EBC39C4(a1, qword_256DB80D8);
}

uint64_t sub_23EBC383C()
{
  return sub_23EBC0AD4(&qword_256DB7E98, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31FC4);
}

uint64_t sub_23EBC3868()
{
  return sub_23EBC0AD4(&qword_256DB7EA0, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31EFC);
}

uint64_t sub_23EBC3894()
{
  return sub_23EBC0AD4(&qword_256DB7EA8, type metadata accessor for RecordsResponse, (uint64_t)&unk_23EC31F3C);
}

uint64_t sub_23EBC38C0()
{
  return sub_23EBC0AD4(&qword_256DB7EB0, type metadata accessor for GetRequest, (uint64_t)&unk_23EC3203C);
}

uint64_t type metadata accessor for GetRequest(uint64_t a1)
{
  return sub_23EBC39C4(a1, qword_256DB8038);
}

uint64_t sub_23EBC3900()
{
  return sub_23EBC0AD4(&qword_256DB7EB8, type metadata accessor for GetRequest, (uint64_t)&unk_23EC3212C);
}

uint64_t sub_23EBC392C()
{
  return sub_23EBC0AD4(&qword_256DB7EC0, type metadata accessor for GetRequest, (uint64_t)&unk_23EC32064);
}

uint64_t sub_23EBC3958()
{
  return sub_23EBC0AD4(&qword_256DB7EC8, type metadata accessor for GetRequest, (uint64_t)&unk_23EC320A4);
}

uint64_t sub_23EBC3984()
{
  return sub_23EBC0AD4(&qword_256DB7ED0, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC321A4);
}

uint64_t type metadata accessor for RecordTransport(uint64_t a1)
{
  return sub_23EBC39C4(a1, qword_256DB7FA0);
}

uint64_t sub_23EBC39C4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23EBC39F8()
{
  return sub_23EBC0AD4(&qword_256DB7ED8, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC32294);
}

uint64_t sub_23EBC3A24()
{
  return sub_23EBC0AD4(&qword_256DB7EE0, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC321CC);
}

uint64_t sub_23EBC3A50()
{
  return sub_23EBC0AD4(&qword_256DB7EE8, type metadata accessor for RecordTransport, (uint64_t)&unk_23EC3220C);
}

unint64_t sub_23EBC3A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB7EF0;
  if (!qword_256DB7EF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB7EF8);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256DB7EF0);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_23EBC3B0C(uint64_t a1, uint64_t a2)
{
  return sub_23EBA3E98(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_23EBC3B14(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_23EBC3B28(a1, a2);
  return a1;
}

uint64_t sub_23EBC3B28(uint64_t a1, uint64_t a2)
{
  return sub_23EBA3EDC(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

void sub_23EBC3B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC3B90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x23EBC3D74);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_23EBC3D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_23EC2E4EC();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_23EBC0AD4(qword_256DB7F40, (uint64_t (*)(uint64_t))MEMORY[0x24BE17930], MEMORY[0x24BE17940]);
        v17 = sub_23EC2E768();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_23EBC3F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_23EBC3B30((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_23EBC3FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_23EC2E0F0();
  v11 = result;
  if (result)
  {
    result = sub_23EC2E114();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_23EC2E108();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_23EBC3B30(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_23EBC40A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23EBC40F0()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23EBC4124 + dword_23EBC42FC[v0 >> 62]))();
}

uint64_t sub_23EBC4134@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_23EBC431C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;

  if ((a2 & 0x2000000000000000) != 0)
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      sub_23EBC3B0C(a1, a2);
      sub_23EBC3B0C(a3, a4);
      v8 = a1;
      v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((a4 & 0x2000000000000000) == 0)
  {
    sub_23EBC3B0C(a1, a2);
    sub_23EBC3B0C(a3, a4);
    v8 = a1;
    v9 = a2;
LABEL_7:
    sub_23EBC40A4(v8, v9);
    v10 = v11;
    sub_23EBC3B28(a3, a4);
    sub_23EBC3B28(a1, a2);
    return v10 & 1;
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_23EBC43E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_23EC2E534();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  if ((sub_23EBC3D98(*(_QWORD *)a1, *(_QWORD *)a2) & 1) == 0)
    goto LABEL_6;
  sub_23EBC40A4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v11 & 1) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    goto LABEL_6;
  v12 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a2 + 40) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 32) == v12)
  {
    v15 = type metadata accessor for RecordsResponse(0);
    v16 = a1 + *(int *)(v15 + 32);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(v15 + 32), v4);
    sub_23EBC0AD4(&qword_256DB7F18, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v13 = sub_23EC2E768();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_6:
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_23EBC45BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = sub_23EC2E534();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v35 - v9;
  v12 = *a1;
  v11 = a1[1];
  v14 = *a2;
  v13 = a2[1];
  v15 = v13 & 0x3000000000000000;
  if ((~v11 & 0x3000000000000000) != 0)
  {
    if (v15 != 0x3000000000000000)
    {
      if ((v11 & 0x2000000000000000) != 0)
      {
        if ((v13 & 0x2000000000000000) == 0)
          goto LABEL_17;
        v35 = v13 & 0xDFFFFFFFFFFFFFFFLL;
        v36 = v8;
        sub_23EBC48A8(v12, v11);
        sub_23EBC48A8(v14, v13);
        v17 = v12;
        v18 = v11 & 0xDFFFFFFFFFFFFFFFLL;
      }
      else
      {
        if ((v13 & 0x2000000000000000) != 0)
          goto LABEL_17;
        v16 = *a1;
        v36 = v8;
        sub_23EBC48A8(v16, v11);
        sub_23EBC48A8(v14, v13);
        v17 = v12;
        v18 = v11;
      }
      sub_23EBC40A4(v17, v18);
      v20 = v19;
      sub_23EBC3B14(v14, v13);
      sub_23EBC3B14(v12, v11);
      v8 = v36;
      if ((v20 & 1) == 0)
        goto LABEL_17;
      goto LABEL_12;
    }
LABEL_5:
    sub_23EBC48A8(*a1, a1[1]);
    sub_23EBC48A8(v14, v13);
    sub_23EBC3B14(v12, v11);
    sub_23EBC3B14(v14, v13);
    goto LABEL_17;
  }
  if (v15 != 0x3000000000000000)
    goto LABEL_5;
LABEL_12:
  v36 = v8;
  v21 = type metadata accessor for RecordTransport(0);
  v22 = *(int *)(v21 + 24);
  v23 = *(uint64_t *)((char *)a1 + v22);
  v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  v25 = (uint64_t *)((char *)a2 + v22);
  v26 = *v25;
  v27 = v25[1];
  if (v24 >> 60 == 15)
  {
    if (v27 >> 60 == 15)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v27 >> 60 == 15)
  {
LABEL_16:
    sub_23EBC48BC(v23, v24);
    sub_23EBC48BC(v26, v27);
    sub_23EBA4CE0(v23, v24);
    sub_23EBA4CE0(v26, v27);
    goto LABEL_17;
  }
  sub_23EBC48BC(v23, v24);
  sub_23EBC48BC(v26, v27);
  sub_23EBC40A4(v23, v24);
  LODWORD(v35) = v30;
  sub_23EBA4CE0(v26, v27);
  sub_23EBA4CE0(v23, v24);
  if ((v35 & 1) != 0)
  {
LABEL_20:
    v31 = (char *)a1 + *(int *)(v21 + 20);
    v32 = v36;
    v33 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    v33(v10, v31, v4);
    v33(v7, (char *)a2 + *(int *)(v21 + 20), v4);
    sub_23EBC0AD4(&qword_256DB7F18, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v28 = sub_23EC2E768();
    v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v7, v4);
    v34(v10, v4);
    return v28 & 1;
  }
LABEL_17:
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_23EBC48A8(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_23EBC3B0C(a1, a2);
  return a1;
}

uint64_t sub_23EBC48BC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23EBA3E98(a1, a2);
  return a1;
}

uint64_t sub_23EBC48D0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  char v13;
  uint64_t Request;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_23EC2E534();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (sub_23EC2ED38() & 1) != 0))
  {
    if (a1[2] == *((_QWORD *)a2 + 2) && (sub_23EBC40A4(a1[3], a1[4]), (v13 & 1) != 0))
    {
      if (a1[5] == *((_QWORD *)a2 + 5) && a1[6] == *((_QWORD *)a2 + 6) || (v12 = 0, (sub_23EC2ED38() & 1) != 0))
      {
        if (a1[7] == *((_QWORD *)a2 + 7) && a1[8] == *((_QWORD *)a2 + 8) || (v12 = 0, (sub_23EC2ED38() & 1) != 0))
        {
          Request = type metadata accessor for GetRequest(0);
          v15 = (char *)a1 + *(int *)(Request + 36);
          v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v16(v10, v15, v4);
          v16(v8, &a2[*(int *)(Request + 36)], v4);
          sub_23EBC0AD4(&qword_256DB7F18, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v12 = sub_23EC2E768();
          v17 = *(void (**)(char *, uint64_t))(v5 + 8);
          v17(v8, v4);
          v17(v10, v4);
        }
      }
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

unint64_t sub_23EBC4A88()
{
  unint64_t result;

  result = qword_256DB7F38;
  if (!qword_256DB7F38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32530, &type metadata for DataFetchError);
    atomic_store(result, (unint64_t *)&qword_256DB7F38);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DataFetchError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DataFetchError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23EBC4B44(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23EBC4B60(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DataFetchError()
{
  return &type metadata for DataFetchError;
}

uint64_t *sub_23EBC4B90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if ((~v7 & 0x3000000000000000) != 0)
    {
      v9 = *a2;
      sub_23EBC3B0C(*a2, a2[1]);
      *v4 = v9;
      v4[1] = v7;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23EC2E534();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = *(int *)(a3 + 24);
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      sub_23EBA3E98(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
  }
  return v4;
}

uint64_t sub_23EBC4C8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;

  v4 = a1[1];
  if ((~v4 & 0x3000000000000000) != 0)
    sub_23EBC3B28(*a1, v4);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = sub_23EC2E534();
  result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v8 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_23EBA3EDC(*v8, v9);
  return result;
}

uint64_t *sub_23EBC4D1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  if ((~v6 & 0x3000000000000000) != 0)
  {
    v7 = *a2;
    sub_23EBC3B0C(*a2, a2[1]);
    *a1 = v7;
    a1[1] = v6;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23EC2E534();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *((_QWORD *)v14 + 1);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *(_QWORD *)v14;
    sub_23EBA3E98(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
    *(_QWORD *)v13 = v16;
    *((_QWORD *)v13 + 1) = v15;
  }
  return a1;
}

uint64_t *sub_23EBC4DEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = a2[1];
  v7 = v6 & 0x3000000000000000;
  if ((~a1[1] & 0x3000000000000000) == 0)
  {
    if (v7 != 0x3000000000000000)
    {
      v8 = *a2;
      sub_23EBC3B0C(*a2, a2[1]);
      *a1 = v8;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 == 0x3000000000000000)
  {
    sub_23EBC4F40(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v9 = *a2;
  sub_23EBC3B0C(*a2, a2[1]);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v9;
  a1[1] = v6;
  sub_23EBC3B28(v10, v11);
LABEL_8:
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23EC2E534();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *(uint64_t *)((char *)a2 + v16 + 8);
  if (*(unint64_t *)((char *)a1 + v16 + 8) >> 60 != 15)
  {
    if (v19 >> 60 != 15)
    {
      v21 = *v18;
      sub_23EBA3E98(v21, v19);
      v22 = *v17;
      v23 = v17[1];
      *v17 = v21;
      v17[1] = v19;
      sub_23EBA3EDC(v22, v23);
      return a1;
    }
    sub_23EBC4F6C((uint64_t)v17);
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  v20 = *v18;
  sub_23EBA3E98(v20, v19);
  *v17 = v20;
  v17[1] = v19;
  return a1;
}

uint64_t *sub_23EBC4F40(uint64_t *a1)
{
  sub_23EBC3B28(*a1, a1[1]);
  return a1;
}

uint64_t sub_23EBC4F6C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

_OWORD *sub_23EBC4FA0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23EC2E534();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t *sub_23EBC5018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = a1[1];
  if ((~v6 & 0x3000000000000000) == 0)
    goto LABEL_4;
  v7 = a2[1];
  if ((~v7 & 0x3000000000000000) == 0)
  {
    sub_23EBC4F40(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *a1;
  *a1 = *a2;
  a1[1] = v7;
  sub_23EBC3B28(v8, v6);
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_23EC2E534();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = *(uint64_t *)((char *)a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      v18 = *v14;
      *v14 = *v15;
      v14[1] = v17;
      sub_23EBA3EDC(v18, v16);
      return a1;
    }
    sub_23EBC4F6C((uint64_t)v14);
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t sub_23EBC510C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBC5118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = sub_23EC2E534();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_23EBC51A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBC51B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = sub_23EC2E534();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_23EBC523C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23EC2E534();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RecordTransport.OneOf_Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23EBC3B0C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for RecordTransport.OneOf_Contents(uint64_t *a1)
{
  return sub_23EBC3B28(*a1, a1[1]);
}

uint64_t *assignWithCopy for RecordTransport.OneOf_Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23EBC3B0C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23EBC3B28(v5, v6);
  return a1;
}

uint64_t *assignWithTake for RecordTransport.OneOf_Contents(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23EBC3B28(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordTransport.OneOf_Contents(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RecordTransport.OneOf_Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_23EBC5418(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_23EBC5424(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_23EBC5434(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for RecordTransport.OneOf_Contents()
{
  return &type metadata for RecordTransport.OneOf_Contents;
}

uint64_t *sub_23EBC545C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    v9 = a2[4];
    swift_bridgeObjectRetain();
    sub_23EBA3E98(v8, v9);
    a1[3] = v8;
    a1[4] = v9;
    v10 = a2[6];
    a1[5] = a2[5];
    a1[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    v13 = *(int *)(a3 + 36);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    a1[7] = v11;
    a1[8] = v12;
    v16 = sub_23EC2E534();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_23EBC5540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_23EBA3EDC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_23EBC55A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  v8 = a2[4];
  swift_bridgeObjectRetain();
  sub_23EBA3E98(v7, v8);
  a1[3] = v7;
  a1[4] = v8;
  v9 = a2[6];
  a1[5] = a2[5];
  a1[6] = v9;
  v10 = a2[7];
  v11 = a2[8];
  v12 = *(int *)(a3 + 36);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  a1[7] = v10;
  a1[8] = v11;
  v15 = sub_23EC2E534();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  return a1;
}

_QWORD *sub_23EBC5658(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  sub_23EBA3E98(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  a1[3] = v6;
  a1[4] = v7;
  sub_23EBA3EDC(v8, v9);
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 36);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23EC2E534();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_23EBC5740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23EBC57BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v7;
  sub_23EBA3EDC(v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23EBC5860()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBC586C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23EC2E534();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_23EBC58E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBC58F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23EC2E534();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23EBC5968()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23EC2E534();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23EBC59F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_23EBA3E98(v8, v9);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v10 = *(int *)(a3 + 32);
    v11 = a1 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = sub_23EC2E534();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_23EBC5AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_23EBA3EDC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23EC2E534();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23EBC5B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_23EBA3E98(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_23EBC5BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23EBA3E98(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23EBA3EDC(v8, v9);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_23EBC5C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23EBC5CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23EBA3EDC(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(int *)(a3 + 32);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23EC2E534();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_23EBC5D64()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBC5D70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23EC2E534();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t sub_23EBC5DEC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23EBC5DF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23EC2E534();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23EBC5E6C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23EC2E534();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_23EBC5F04()
{
  unint64_t result;

  result = qword_256DB8120;
  if (!qword_256DB8120)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32490, &type metadata for DataFetchError);
    atomic_store(result, (unint64_t *)&qword_256DB8120);
  }
  return result;
}

unint64_t sub_23EBC5F4C()
{
  unint64_t result;

  result = qword_256DB8128;
  if (!qword_256DB8128)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC324B8, &type metadata for DataFetchError);
    atomic_store(result, (unint64_t *)&qword_256DB8128);
  }
  return result;
}

unint64_t sub_23EBC5F94()
{
  unint64_t result;

  result = qword_256DB8130;
  if (!qword_256DB8130)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC324F8, &type metadata for DataFetchError);
    atomic_store(result, (unint64_t *)&qword_256DB8130);
  }
  return result;
}

uint64_t sub_23EBC5FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t *v19;
  void *v20;

  v8 = OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle) = 0;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_atEof) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_chunkSize) = a6;
  v9 = v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_encoding;
  v10 = sub_23EC2E7C8();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a5, v10);
  v12 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(), sel_fileHandleForReadingAtPath_, v12);

  if (!v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
    swift_bridgeObjectRelease();
LABEL_9:
    v20 = *(void **)(v6 + v8);
    *(_QWORD *)(v6 + v8) = 0;

    *(_OWORD *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData) = xmmword_23EC325A0;
    *(_QWORD *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_buffer) = 0;
    swift_release();
    return 0;
  }
  v14 = sub_23EC2E78C();
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v16 >> 60 == 15)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
LABEL_8:

    goto LABEL_9;
  }
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEC8]), sel_initWithCapacity_, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
  if (!v17)
  {
    sub_23EBA4CE0(v14, v16);
    goto LABEL_8;
  }
  v18 = *(void **)(v6 + v8);
  *(_QWORD *)(v6 + v8) = v13;

  v19 = (uint64_t *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData);
  *v19 = v14;
  v19[1] = v16;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_buffer) = v17;
  return v6;
}

uint64_t sub_23EBC61DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle), sel_closeFile);
  v2 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v3 = v0 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_encoding;
  v4 = sub_23EC2E7C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  sub_23EBA4CE0(*(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData), *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData + 8));
  return swift_deallocClassInstance();
}

uint64_t sub_23EBC6284()
{
  return type metadata accessor for StreamReader();
}

uint64_t type metadata accessor for StreamReader()
{
  uint64_t result;

  result = qword_256DB8160;
  if (!qword_256DB8160)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23EBC62C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23EC2E7C8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

id sub_23EBC6360@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v29[3];
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  v5 = sub_23EC2E7C8();
  result = (id)MEMORY[0x24BDAC7A8](v5);
  v9 = OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle;
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle))
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_atEof;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_atEof) == 1)
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  v11 = *(void **)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_buffer);
  if (!v11)
    goto LABEL_15;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData + 8);
  if (v12 >> 60 == 15)
  {
LABEL_16:
    __break(1u);
    JUMPOUT(0x23EBC6738);
  }
  v30 = v8;
  v31 = result;
  v32 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a2;
  v35 = *(_QWORD *)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_delimData);
  v13 = (void *)sub_23EC2E2B8();
  v14 = (char *)objc_msgSend(v11, sel_rangeOfData_options_range_, v13, 0, 0, objc_msgSend(v11, sel_length));
  v16 = v15;

  if (v14 == (char *)sub_23EC2DF28())
  {
    v34 = v12;
    v29[1] = v10;
    v29[2] = v2;
    v17 = *(void **)(a1 + v9);
    if (v17)
    {
      v18 = objc_msgSend(v17, sel_readDataOfLength_, *(_QWORD *)(a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_chunkSize));
      sub_23EC2E2D0();
      v20 = v19;

      __asm { BR              X9 }
    }
    goto LABEL_14;
  }
  v21 = objc_msgSend(v11, sel_subdataWithRange_, 0, v14);
  v22 = sub_23EC2E2D0();
  v24 = v23;

  (*(void (**)(char *, uint64_t, id))(v30 + 16))(v32, a1 + OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_encoding, v31);
  v25 = sub_23EC2E798();
  v27 = v26;
  sub_23EBA3EDC(v22, v24);
  if (__OFADD__(v14, v16))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = objc_msgSend(v11, sel_replaceBytesInRange_withBytes_length_, 0, &v14[v16], 0, 0);
  v28 = v33;
  *v33 = v25;
  v28[1] = v27;
  return result;
}

id sub_23EBC6748()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB4398]), sel_init);
  qword_256DC7648 = (uint64_t)result;
  return result;
}

uint64_t sub_23EBC6778(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = objc_msgSend(a1, sel_aa_primaryAppleAccount);
  if (!v1)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v6 = sub_23EC2E684();
    __swift_project_value_buffer(v6, (uint64_t)qword_256DC76D8);
    v2 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v2, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v2, v7, "Unable to retrieve User Primary Apple Account information", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }
    goto LABEL_8;
  }
  v2 = v1;
  v3 = -[NSObject aa_personID](v1, sel_aa_personID);
  if (!v3)
  {
LABEL_8:

    return 0;
  }
  v4 = v3;
  v5 = sub_23EC2E780();

  return v5;
}

uint64_t sub_23EBC68A4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 456) = a1;
  return swift_task_switch();
}

uint64_t sub_23EBC68BC()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[57];
  v0[7] = v0 + 55;
  v0[2] = v0;
  v0[3] = sub_23EBC695C;
  v0[44] = swift_continuation_init();
  v0[40] = MEMORY[0x24BDAC760];
  v0[41] = 0x40000000;
  v0[42] = sub_23EBC7488;
  v0[43] = &block_descriptor;
  objc_msgSend(v1, sel_aa_primaryAppleAccountWithCompletion_, v0 + 40);
  return swift_continuation_await();
}

uint64_t sub_23EBC695C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 464) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23EBC69BC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t inited;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;

  v1 = *(void **)(v0 + 440);
  *(_QWORD *)(v0 + 472) = v1;
  if (!v1)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_256DC76D8);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v16, "IDMS | Couldn't find primary apple account to generate GSToken.", v17, 2u);
      MEMORY[0x24265B940](v17, -1, -1);
    }
    goto LABEL_20;
  }
  v2 = objc_msgSend(*(id *)(v0 + 456), sel_aida_accountForiCloudAccount_, v1);
  *(_QWORD *)(v0 + 480) = v2;
  if (!v2)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v29 = sub_23EC2E684();
    __swift_project_value_buffer(v29, (uint64_t)qword_256DC76D8);
    v15 = sub_23EC2E66C();
    v30 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v30, "IDMS | Unknown account type or account store, failed to generate GSToken.", v31, 2u);
      MEMORY[0x24265B940](v31, -1, -1);
    }

LABEL_20:
    v11 = 0;
    v13 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
  }
  v3 = *(void **)(v0 + 456);
  v4 = v2;
  v5 = (void *)sub_23EC2E774();
  v6 = objc_msgSend(v3, sel_credentialForAccount_serviceID_, v4, v5);
  *(_QWORD *)(v0 + 488) = v6;

  if (v6)
  {
    v7 = objc_msgSend(v6, sel_token);
    if (v7)
    {
      v8 = v7;
      v10 = *(void **)(v0 + 472);
      v9 = *(void **)(v0 + 480);
      v11 = sub_23EC2E780();
      v13 = v12;

      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
    }
  }
  if (qword_256DB71D8 != -1)
    swift_once();
  v18 = sub_23EC2E684();
  *(_QWORD *)(v0 + 496) = __swift_project_value_buffer(v18, (uint64_t)qword_256DC76D8);
  v19 = sub_23EC2E66C();
  v20 = sub_23EC2EA08();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_23EB9F000, v19, v20, "IDMS | User account doesn't contain GSToken, so renewing tokens", v21, 2u);
    MEMORY[0x24265B940](v21, -1, -1);
  }
  v32 = *(void **)(v0 + 456);

  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8258);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC32680;
  *(_QWORD *)(v0 + 400) = sub_23EC2E780();
  *(_QWORD *)(v0 + 408) = v23;
  sub_23EC2EB10();
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, 0);
  *(_QWORD *)(inited + 96) = sub_23EBC75A8();
  *(_QWORD *)(inited + 72) = v24;
  *(_QWORD *)(v0 + 416) = sub_23EC2E780();
  *(_QWORD *)(v0 + 424) = v25;
  sub_23EC2EB10();
  *(_QWORD *)(inited + 168) = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
  *(_QWORD *)(inited + 144) = &unk_250F4E878;
  sub_23EBA7660(inited);
  v26 = v4;
  v27 = sub_23EC2E714();
  *(_QWORD *)(v0 + 504) = v27;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = v0 + 432;
  *(_QWORD *)(v0 + 80) = v0;
  *(_QWORD *)(v0 + 88) = sub_23EBC6EBC;
  *(_QWORD *)(v0 + 392) = swift_continuation_init();
  *(_QWORD *)(v0 + 360) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 368) = 0x40000000;
  *(_QWORD *)(v0 + 376) = sub_23EBC7528;
  *(_QWORD *)(v0 + 384) = &block_descriptor_1;
  objc_msgSend(v32, sel_renewCredentialsForAccount_options_completion_, v26, v27, v0 + 360);
  return swift_continuation_await();
}

uint64_t sub_23EBC6EBC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 512) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_23EBC6F1C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  void *v6;
  void *v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  void *v25;
  uint8_t *v26;

  v1 = *(void **)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 432);

  if (v2)
  {
    v3 = sub_23EC2E66C();
    v4 = sub_23EC2EA08();
    v5 = os_log_type_enabled(v3, v4);
    v7 = *(void **)(v0 + 480);
    v6 = *(void **)(v0 + 488);
    v8 = *(void **)(v0 + 472);
    if (v5)
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v3, v4, "IDMS | Couldn't renew credentials while constructing GSToken.", v9, 2u);
      MEMORY[0x24265B940](v9, -1, -1);

LABEL_12:
      v19 = 0;
      v21 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v19, v21);
    }

    goto LABEL_11;
  }
  v10 = *(void **)(v0 + 488);
  v11 = *(void **)(v0 + 456);
  v12 = *(id *)(v0 + 480);
  v13 = (void *)sub_23EC2E774();
  v14 = objc_msgSend(v11, sel_credentialForAccount_serviceID_, v12, v13);

  if (!v14 || (v15 = objc_msgSend(v14, sel_token)) == 0)
  {
    v22 = sub_23EC2E66C();
    v23 = sub_23EC2EA08();
    v24 = os_log_type_enabled(v22, v23);
    v8 = *(void **)(v0 + 472);
    v25 = *(void **)(v0 + 480);
    if (v24)
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_23EB9F000, v22, v23, "IDMS | Error: still no grandslam token even after calling renew credentials.", v26, 2u);
      MEMORY[0x24265B940](v26, -1, -1);

      goto LABEL_12;
    }

LABEL_11:
    goto LABEL_12;
  }
  v16 = v15;
  v18 = *(void **)(v0 + 472);
  v17 = *(void **)(v0 + 480);
  v19 = sub_23EC2E780();
  v21 = v20;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v19, v21);
}

uint64_t sub_23EBC7150()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(void **)(v0 + 464);
  swift_willThrow();

  if (qword_256DB71D8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC76D8);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "IDMS | Couldn't find primary apple account to generate GSToken.", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_23EBC7248()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  uint8_t *v20;

  v2 = *(void **)(v0 + 504);
  v1 = *(void **)(v0 + 512);
  v3 = *(void **)(v0 + 480);
  swift_willThrow();

  v4 = v1;
  v5 = v1;
  v6 = sub_23EC2E66C();
  v7 = sub_23EC2EA08();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 512);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 448) = v12;
    sub_23EC2EA68();
    *v10 = v12;

    _os_log_impl(&dword_23EB9F000, v6, v7, "IDMS | Error renewing credentials while constructing GSToken : %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v10, -1, -1);
    MEMORY[0x24265B940](v9, -1, -1);

  }
  else
  {
    v13 = *(void **)(v0 + 512);

  }
  v14 = *(void **)(v0 + 488);
  v15 = sub_23EC2E66C();
  v16 = sub_23EC2EA08();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(void **)(v0 + 472);
  v19 = *(void **)(v0 + 480);
  if (v17)
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_23EB9F000, v15, v16, "IDMS | Error: still no grandslam token even after calling renew credentials.", v20, 2u);
    MEMORY[0x24265B940](v20, -1, -1);

  }
  else
  {

    v14 = v18;
  }

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_23EBC7488(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v10 = a2;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v9 = a2;
    sub_23EBC75E4((uint64_t)&v10, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_23EBC7528(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

unint64_t sub_23EBC75A8()
{
  unint64_t result;

  result = qword_256DB7350;
  if (!qword_256DB7350)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256DB7350);
  }
  return result;
}

uint64_t sub_23EBC75E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static UtilityServices.utilityPeakPeriods(utilityID:tariffID:start:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_23EBA724C;
  return sub_23EBF6730(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t UtilityPeaks.start.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityPeaks.end.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityPeaks.periods.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UtilityPeaks.descriptor.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_QWORD *)(v0 + 48))
    return 0;
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

void UtilityPeaks.tariffType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 48))
    __asm { BR              X9; loc_23EBC781C }
  *a1 = 4;
}

void *static UtilityTariffType.allCases.getter()
{
  return &unk_250F4E8F8;
}

uint64_t UtilityTariffType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBC7B88 + 4 * byte_23EC326A9[*v0]))(5590868, 0xE300000000000000);
}

uint64_t sub_23EBC7B88()
{
  return 0x444552454954;
}

uint64_t sub_23EBC7B9C()
{
  return 0x4445584946;
}

uint64_t sub_23EBC7BB0()
{
  return 1413565510;
}

uint64_t sub_23EBC7BC0()
{
  return 0x524F505055534E55;
}

uint64_t UtilityPeaks.metadata.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_23EBC7BFC(v2, v3);
}

uint64_t sub_23EBC7BFC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_23EBC7C38(char *a1)
{
  sub_23EBC0EC0(*a1);
}

void sub_23EBC7C44()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EBC7C94()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBC7D00()
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC7D40()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBC7D98()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EBC7DE4()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC7E50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBCAA10();
  *a1 = result;
  return result;
}

uint64_t sub_23EBC7E7C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23EBC7EB0 + 4 * byte_23EC326BA[*v0]))();
}

void sub_23EBC7EB0(_QWORD *a1@<X8>)
{
  *a1 = 0x65746144646E65;
  a1[1] = 0xE700000000000000;
}

void sub_23EBC7ECC(_QWORD *a1@<X8>)
{
  *a1 = 0x736B616570;
  a1[1] = 0xE500000000000000;
}

void sub_23EBC7EE4(_QWORD *a1@<X8>)
{
  *a1 = 0x617461646174656DLL;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_23EBC7F00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBC7F34 + 4 * byte_23EC326BE[*v0]))(0x7461447472617473, 0xE900000000000065);
}

uint64_t sub_23EBC7F34()
{
  return 0x65746144646E65;
}

uint64_t sub_23EBC7F4C()
{
  return 0x736B616570;
}

uint64_t sub_23EBC7F60()
{
  return 0x617461646174656DLL;
}

uint64_t sub_23EBC7F78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBCAA10();
  *a1 = result;
  return result;
}

uint64_t sub_23EBC7F9C()
{
  sub_23EBC8224();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBC7FC4()
{
  sub_23EBC8224();
  return sub_23EC2EE04();
}

void __swiftcall UtilityPeaks.init(start:end:periods:metadata:)(HomeUtilityServices::UtilityPeaks *__return_ptr retstr, Swift::String start, Swift::String end, Swift::OpaquePointer periods, HomeUtilityServices::RateMetaData_optional *metadata)
{
  Swift::String tariffLabel;

  tariffLabel = metadata->value.tariffLabel;
  retstr->metadata.value.tariffProfileId = metadata->value.tariffProfileId;
  retstr->start = start;
  retstr->end = end;
  retstr->periods = periods;
  retstr->metadata.value.tariffLabel = tariffLabel;
  retstr->metadata.value.tariffType = metadata->value.tariffType;
}

uint64_t UtilityPeaks.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8270);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v25 = v1[3];
  v26 = v7;
  v8 = v1[4];
  v23 = v1[5];
  v24 = v8;
  v9 = v1[6];
  v21 = v1[7];
  v22 = v9;
  v10 = v1[8];
  v20 = v1[9];
  v11 = v1[10];
  v18 = v10;
  v19 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC8224();
  sub_23EC2EDE0();
  LOBYTE(v28) = 0;
  v12 = v27;
  sub_23EC2ECE4();
  if (!v12)
  {
    v13 = v23;
    v14 = v24;
    v16 = v21;
    v15 = v22;
    LOBYTE(v28) = 1;
    sub_23EC2ECE4();
    v28 = v14;
    v34 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8280);
    sub_23EBC8690(&qword_256DB8288, (uint64_t (*)(void))sub_23EBC8268, MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
    v28 = v13;
    v29 = v15;
    v30 = v16;
    v31 = v18;
    v32 = v20;
    v33 = v19;
    v34 = 3;
    sub_23EBC82AC();
    sub_23EC2ECD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBC8224()
{
  unint64_t result;

  result = qword_256DB8278;
  if (!qword_256DB8278)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32D5C, &type metadata for UtilityPeaks.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8278);
  }
  return result;
}

unint64_t sub_23EBC8268()
{
  unint64_t result;

  result = qword_256DB8290;
  if (!qword_256DB8290)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityPeakPeriod, &type metadata for UtilityPeakPeriod);
    atomic_store(result, (unint64_t *)&qword_256DB8290);
  }
  return result;
}

unint64_t sub_23EBC82AC()
{
  unint64_t result;

  result = qword_256DB8298;
  if (!qword_256DB8298)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for RateMetaData, &type metadata for RateMetaData);
    atomic_store(result, (unint64_t *)&qword_256DB8298);
  }
  return result;
}

uint64_t UtilityPeaks.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB82A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC8224();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  LOBYTE(v35) = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v33 = v9;
  LOBYTE(v35) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v34 = v13;
  v32 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8280);
  v41 = 2;
  sub_23EBC8690(&qword_256DB82A8, (uint64_t (*)(void))sub_23EBC86F8, MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v14 = v35;
  v41 = 3;
  sub_23EBC873C();
  v31 = v14;
  swift_bridgeObjectRetain();
  sub_23EC2EC78();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v35;
  v16 = v36;
  v27 = v35;
  v28 = v37;
  v29 = v38;
  v30 = v36;
  v25 = v40;
  v26 = v39;
  swift_bridgeObjectRetain();
  v17 = v34;
  swift_bridgeObjectRetain();
  v18 = v31;
  swift_bridgeObjectRetain();
  v19 = v16;
  v20 = v28;
  v21 = v25;
  sub_23EBC7BFC(v15, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v33;
  a2[1] = v11;
  a2[2] = v32;
  a2[3] = v17;
  v22 = v27;
  a2[4] = v18;
  a2[5] = v22;
  a2[6] = v30;
  a2[7] = v20;
  v23 = v26;
  a2[8] = v29;
  a2[9] = v23;
  a2[10] = v21;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_23EBC8780(v22, v30);
}

uint64_t sub_23EBC8690(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8280);
    v8 = a2();
    result = MEMORY[0x24265B8B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBC86F8()
{
  unint64_t result;

  result = qword_256DB82B0;
  if (!qword_256DB82B0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityPeakPeriod, &type metadata for UtilityPeakPeriod);
    atomic_store(result, (unint64_t *)&qword_256DB82B0);
  }
  return result;
}

unint64_t sub_23EBC873C()
{
  unint64_t result;

  result = qword_256DB82B8;
  if (!qword_256DB82B8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for RateMetaData, &type metadata for RateMetaData);
    atomic_store(result, (unint64_t *)&qword_256DB82B8);
  }
  return result;
}

uint64_t sub_23EBC8780(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23EBC87BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UtilityPeaks.init(from:)(a1, a2);
}

uint64_t sub_23EBC87D0(_QWORD *a1)
{
  return UtilityPeaks.encode(to:)(a1);
}

uint64_t UtilityPeakPeriod.start.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityPeakPeriod.peakPeriodLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtilityPeakPeriod.rank.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_23EBC8844(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23EBC19E0(*a1, *a2);
}

uint64_t sub_23EBC8850()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC88E0()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBC894C()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC89D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBCAA58();
  *a1 = result;
  return result;
}

void sub_23EBC8A04(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x6C6562616CLL;
  if (v2 != 1)
  {
    v5 = 1802396018;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7472617473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_23EBC8A54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6562616CLL;
  if (*v0 != 1)
    v1 = 1802396018;
  if (*v0)
    return v1;
  else
    return 0x7472617473;
}

uint64_t sub_23EBC8AA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBCAA58();
  *a1 = result;
  return result;
}

uint64_t sub_23EBC8AC4()
{
  sub_23EBC9B68();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBC8AEC()
{
  sub_23EBC9B68();
  return sub_23EC2EE04();
}

void __swiftcall UtilityPeakPeriod.init(start:peakPeriodLabel:rank:)(HomeUtilityServices::UtilityPeakPeriod *__return_ptr retstr, Swift::String start, Swift::String peakPeriodLabel, Swift::Int rank)
{
  retstr->start = start;
  retstr->peakPeriodLabel = peakPeriodLabel;
  retstr->rank = rank;
}

uint64_t UtilityPeakPeriod.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDBC();
}

uint64_t UtilityPeakPeriod.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB82C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v10[1] = v1[3];
  v10[2] = v7;
  v10[0] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC9B68();
  sub_23EC2EDE0();
  v13 = 0;
  v8 = v10[3];
  sub_23EC2ECE4();
  if (!v8)
  {
    v12 = 1;
    sub_23EC2ECE4();
    v11 = 2;
    sub_23EC2ECFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t UtilityPeakPeriod.hashValue.getter()
{
  sub_23EC2EDB0();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t UtilityPeakPeriod.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB82D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC9B68();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v24 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v21 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v20 = v14;
  v15 = sub_23EC2EC9C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v20;
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v16;
  a2[4] = v15;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBC8FC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UtilityPeakPeriod.init(from:)(a1, a2);
}

uint64_t sub_23EBC8FD4(_QWORD *a1)
{
  return UtilityPeakPeriod.encode(to:)(a1);
}

uint64_t sub_23EBC8FE8()
{
  sub_23EC2EDB0();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBC9084()
{
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDBC();
}

uint64_t sub_23EBC9108()
{
  sub_23EC2EDB0();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t RateMetaData.tariffProfileId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RateMetaData.tariffLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RateMetaData.tariffType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall RateMetaData.init(tariffProfileId:tariffLabel:tariffType:)(HomeUtilityServices::RateMetaData *__return_ptr retstr, Swift::String tariffProfileId, Swift::String tariffLabel, Swift::String tariffType)
{
  retstr->tariffProfileId = tariffProfileId;
  retstr->tariffLabel = tariffLabel;
  retstr->tariffType = tariffType;
}

uint64_t sub_23EBC9238()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x614C666669726174;
  if (*v0 != 1)
    v1 = 0x7954666669726174;
  if (*v0)
    return v1;
  else
    return 0x7250666669726174;
}

uint64_t sub_23EBC92AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBCAAA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBC92D0()
{
  sub_23EBC9BAC();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBC92F8()
{
  sub_23EBC9BAC();
  return sub_23EC2EE04();
}

uint64_t RateMetaData.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB82D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC9BAC();
  sub_23EC2EDE0();
  v14 = 0;
  v9 = v11[5];
  sub_23EC2ECE4();
  if (!v9)
  {
    v13 = 1;
    sub_23EC2ECE4();
    v12 = 2;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t RateMetaData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB82E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBC9BAC();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v27 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v24 = v9;
  v26 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v14 = v13;
  v22 = v12;
  v25 = 2;
  swift_bridgeObjectRetain();
  v23 = v14;
  v15 = sub_23EC2EC84();
  v17 = v16;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v23;
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBC96C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return RateMetaData.init(from:)(a1, a2);
}

uint64_t sub_23EBC96D8(_QWORD *a1)
{
  return RateMetaData.encode(to:)(a1);
}

HomeUtilityServices::UtilityTariffType_optional __swiftcall UtilityTariffType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HomeUtilityServices::UtilityTariffType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23EC2EC48();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_23EBC9744(char *a1)
{
  sub_23EBC1730(*a1);
}

void sub_23EBC9750()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EBC9794()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EBC9814()
{
  __asm { BR              X10 }
}

uint64_t sub_23EBC9848()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EBC98B4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EBC98F4()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

HomeUtilityServices::UtilityTariffType_optional sub_23EBC9974(Swift::String *a1)
{
  return UtilityTariffType.init(rawValue:)(*a1);
}

uint64_t sub_23EBC9980()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23EBC99A8 + 4 * byte_23EC326D1[*v0]))();
}

void sub_23EBC99A8(_QWORD *a1@<X8>)
{
  *a1 = 0x444552454954;
  a1[1] = 0xE600000000000000;
}

void sub_23EBC99C0(_QWORD *a1@<X8>)
{
  *a1 = 0x4445584946;
  a1[1] = 0xE500000000000000;
}

void sub_23EBC99D8(_QWORD *a1@<X8>)
{
  *a1 = 1413565510;
  a1[1] = 0xE400000000000000;
}

void sub_23EBC99EC(_QWORD *a1@<X8>)
{
  *a1 = 0x524F505055534E55;
  a1[1] = 0xEB00000000444554;
}

uint64_t sub_23EBC9A10()
{
  sub_23EBCAC3C();
  return sub_23EC2E900();
}

uint64_t sub_23EBC9A6C()
{
  sub_23EBCAC3C();
  return sub_23EC2E8E8();
}

void sub_23EBC9AB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_250F4EAA0;
}

BOOL _s19HomeUtilityServices0B10PeakPeriodV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  _BOOL8 result;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (v9 = sub_23EC2ED38(), result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6)
      return v4 == v7;
    v12 = sub_23EC2ED38();
    result = 0;
    if ((v12 & 1) != 0)
      return v4 == v7;
  }
  return result;
}

unint64_t sub_23EBC9B68()
{
  unint64_t result;

  result = qword_256DB82C8;
  if (!qword_256DB82C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32D0C, &type metadata for UtilityPeakPeriod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB82C8);
  }
  return result;
}

unint64_t sub_23EBC9BAC()
{
  unint64_t result;

  result = qword_256DB82E0;
  if (!qword_256DB82E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32CBC, &type metadata for RateMetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB82E0);
  }
  return result;
}

unint64_t sub_23EBC9BF4()
{
  unint64_t result;

  result = qword_256DB82F0;
  if (!qword_256DB82F0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityPeakPeriod, &type metadata for UtilityPeakPeriod);
    atomic_store(result, (unint64_t *)&qword_256DB82F0);
  }
  return result;
}

unint64_t sub_23EBC9C3C()
{
  unint64_t result;

  result = qword_256DB82F8;
  if (!qword_256DB82F8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityTariffType, &type metadata for UtilityTariffType);
    atomic_store(result, (unint64_t *)&qword_256DB82F8);
  }
  return result;
}

unint64_t sub_23EBC9C84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB8300;
  if (!qword_256DB8300)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8308);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256DB8300);
  }
  return result;
}

uint64_t destroy for UtilityPeaks(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for UtilityPeaks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    a1[5] = a2[5];
    a1[6] = v6;
    v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    v8 = a2[9];
    v9 = a2[10];
    a1[9] = v8;
    a1[10] = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 7) = v10;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  return a1;
}

_QWORD *assignWithCopy for UtilityPeaks(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 5;
  v5 = a2 + 5;
  v6 = a2[6];
  if (a1[6])
  {
    if (v6)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23EBC9F58((uint64_t)(a1 + 5));
      v8 = *(_OWORD *)(a2 + 7);
      v7 = *(_OWORD *)(a2 + 9);
      *v4 = *v5;
      *(_OWORD *)(a1 + 7) = v8;
      *(_OWORD *)(a1 + 9) = v7;
    }
  }
  else if (v6)
  {
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v10;
    *v4 = v9;
  }
  return a1;
}

uint64_t sub_23EBC9F58(uint64_t a1)
{
  destroy for RateMetaData();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for UtilityPeaks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 48);
  if (!v6)
  {
    sub_23EBC9F58(a1 + 40);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    return a1;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityPeaks(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityPeaks(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityPeaks()
{
  return &type metadata for UtilityPeaks;
}

uint64_t destroy for TAFAuthorizationEndpoints()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UtilityPeakPeriod(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UtilityPeakPeriod(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for UtilityPeakPeriod(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityPeakPeriod(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityPeakPeriod(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityPeakPeriod()
{
  return &type metadata for UtilityPeakPeriod;
}

uint64_t destroy for RateMetaData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RateMetaData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RateMetaData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for RateMetaData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RateMetaData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RateMetaData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RateMetaData()
{
  return &type metadata for RateMetaData;
}

uint64_t storeEnumTagSinglePayload for UtilityTariffType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23EBCA558 + 4 * byte_23EC326DB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23EBCA58C + 4 * byte_23EC326D6[v4]))();
}

uint64_t sub_23EBCA58C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBCA59CLL);
  return result;
}

uint64_t sub_23EBCA5A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBCA5B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23EBCA5B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA5BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityTariffType()
{
  return &type metadata for UtilityTariffType;
}

ValueMetadata *type metadata accessor for RateMetaData.CodingKeys()
{
  return &type metadata for RateMetaData.CodingKeys;
}

uint64_t _s19HomeUtilityServices12RateMetaDataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBCA63C + 4 * byte_23EC326E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBCA670 + 4 * byte_23EC326E0[v4]))();
}

uint64_t sub_23EBCA670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBCA680);
  return result;
}

uint64_t sub_23EBCA68C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBCA694);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBCA698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA6A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityPeakPeriod.CodingKeys()
{
  return &type metadata for UtilityPeakPeriod.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UtilityPeaks.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EBCA708 + 4 * byte_23EC326EF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EBCA73C + 4 * byte_23EC326EA[v4]))();
}

uint64_t sub_23EBCA73C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBCA74CLL);
  return result;
}

uint64_t sub_23EBCA758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBCA760);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EBCA764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBCA76C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityPeaks.CodingKeys()
{
  return &type metadata for UtilityPeaks.CodingKeys;
}

unint64_t sub_23EBCA78C()
{
  unint64_t result;

  result = qword_256DB8310;
  if (!qword_256DB8310)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32AEC, &type metadata for UtilityPeaks.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8310);
  }
  return result;
}

unint64_t sub_23EBCA7D4()
{
  unint64_t result;

  result = qword_256DB8318;
  if (!qword_256DB8318)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32BDC, &type metadata for UtilityPeakPeriod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8318);
  }
  return result;
}

unint64_t sub_23EBCA81C()
{
  unint64_t result;

  result = qword_256DB8320;
  if (!qword_256DB8320)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32C94, &type metadata for RateMetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8320);
  }
  return result;
}

unint64_t sub_23EBCA864()
{
  unint64_t result;

  result = qword_256DB8328;
  if (!qword_256DB8328)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32C04, &type metadata for RateMetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8328);
  }
  return result;
}

unint64_t sub_23EBCA8AC()
{
  unint64_t result;

  result = qword_256DB8330;
  if (!qword_256DB8330)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32C2C, &type metadata for RateMetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8330);
  }
  return result;
}

unint64_t sub_23EBCA8F4()
{
  unint64_t result;

  result = qword_256DB8338;
  if (!qword_256DB8338)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32B14, &type metadata for UtilityPeakPeriod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8338);
  }
  return result;
}

unint64_t sub_23EBCA93C()
{
  unint64_t result;

  result = qword_256DB8340;
  if (!qword_256DB8340)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32B3C, &type metadata for UtilityPeakPeriod.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8340);
  }
  return result;
}

unint64_t sub_23EBCA984()
{
  unint64_t result;

  result = qword_256DB8348;
  if (!qword_256DB8348)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32A24, &type metadata for UtilityPeaks.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8348);
  }
  return result;
}

unint64_t sub_23EBCA9CC()
{
  unint64_t result;

  result = qword_256DB8350;
  if (!qword_256DB8350)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32A4C, &type metadata for UtilityPeaks.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8350);
  }
  return result;
}

uint64_t sub_23EBCAA10()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_23EBCAA58()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_23EBCAAA0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7250666669726174 && a2 == 0xEF6449656C69666FLL;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614C666669726174 && a2 == 0xEB000000006C6562 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7954666669726174 && a2 == 0xEA00000000006570)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_23EBCAC3C()
{
  unint64_t result;

  result = qword_256DB8358;
  if (!qword_256DB8358)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityTariffType, &type metadata for UtilityTariffType);
    atomic_store(result, (unint64_t *)&qword_256DB8358);
  }
  return result;
}

unint64_t sub_23EBCAC84()
{
  return 0xD000000000000012;
}

uint64_t sub_23EBCACA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBCC34C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23EBCACC8()
{
  sub_23EBCC194();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBCACF0()
{
  sub_23EBCC194();
  return sub_23EC2EE04();
}

uint64_t sub_23EBCAD18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8370);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBCC194();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v9 = sub_23EC2EC84();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_23EBCAE3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8380);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBCC194();
  sub_23EC2EDE0();
  sub_23EC2ECE4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23EBCAF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[12] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[13] = v9;
  v7[14] = *(_QWORD *)(v9 - 8);
  v7[15] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[16] = v10;
  *v10 = v7;
  v10[1] = sub_23EBCAFD0;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EBCAFD0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBCB024()
{
  uint64_t *v0;
  uint64_t KeyPath;
  _QWORD *v2;

  KeyPath = swift_getKeyPath();
  v0[17] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc();
  v0[18] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23EBCB098;
  return sub_23EBEBC68(v0[12], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], KeyPath);
}

uint64_t sub_23EBCB098()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23EBCB0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7218 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7798);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for Auth Token Refresh", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 120), v3, v1);
    sub_23EC0A6EC(0xD00000000000003FLL, 0x800000023EC39250, (uint8_t *)0xD00000000000001ELL, 0x800000023EC39290);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = sub_23EBCB304;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBCB304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[20] = a1;
  v5[21] = a2;
  v5[22] = a3;
  v5[23] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBCB374()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint8_t *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    if (qword_256DB7218 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7798);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process ServiceLocation Subscription Response.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 168);
    v14 = *(void **)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 104);

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v19 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v15, v13);
LABEL_47:

    v57 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v58 = v16;
    v59 = v18;
LABEL_48:
    v57(v58, v59);
    goto LABEL_49;
  }
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 176);
  sub_23EC0AFC4(0xD000000000000024, (uint8_t *)0x800000023EC392B0, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4EAC8);
  v4 = objc_msgSend(v2, sel_statusCode);
  switch((unint64_t)v4)
  {
    case 0x190uLL:
      if (qword_256DB7218 != -1)
        swift_once();
      v5 = sub_23EC2E684();
      __swift_project_value_buffer(v5, (uint64_t)qword_256DC7798);
      v6 = sub_23EC2E66C();
      v7 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
        MEMORY[0x24265B940](v8, -1, -1);
      }
      goto LABEL_46;
    case 0x191uLL:
      if (qword_256DB7218 != -1)
        swift_once();
      v43 = sub_23EC2E684();
      __swift_project_value_buffer(v43, (uint64_t)qword_256DC7798);
      v6 = sub_23EC2E66C();
      v44 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v44, "Request Unauthorized or Access Token Expired.", v45, 2u);
        MEMORY[0x24265B940](v45, -1, -1);
      }
      goto LABEL_46;
    case 0x192uLL:
    case 0x193uLL:
    case 0x195uLL:
    case 0x196uLL:
    case 0x197uLL:
    case 0x198uLL:
    case 0x199uLL:
    case 0x19AuLL:
    case 0x19BuLL:
    case 0x19DuLL:
    case 0x19EuLL:
    case 0x19FuLL:
    case 0x1A0uLL:
    case 0x1A1uLL:
    case 0x1A2uLL:
    case 0x1A3uLL:
    case 0x1A4uLL:
    case 0x1A5uLL:
    case 0x1A6uLL:
    case 0x1A7uLL:
    case 0x1A8uLL:
    case 0x1A9uLL:
    case 0x1AAuLL:
    case 0x1ABuLL:
    case 0x1ACuLL:
      goto LABEL_23;
    case 0x194uLL:
      if (qword_256DB7218 != -1)
        swift_once();
      v46 = sub_23EC2E684();
      __swift_project_value_buffer(v46, (uint64_t)qword_256DC7798);
      v6 = sub_23EC2E66C();
      v47 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v47, "Subscription Not Found! Proceed to user Off-boarding Actions.", v48, 2u);
        MEMORY[0x24265B940](v48, -1, -1);
      }
      goto LABEL_46;
    case 0x19CuLL:
      if (qword_256DB7218 != -1)
        swift_once();
      v49 = sub_23EC2E684();
      __swift_project_value_buffer(v49, (uint64_t)qword_256DC7798);
      v6 = sub_23EC2E66C();
      v50 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v50, "Access Token expired or invalid. Retry after refreshing access token", v51, 2u);
        MEMORY[0x24265B940](v51, -1, -1);
      }
      goto LABEL_46;
    case 0x1ADuLL:
      if (qword_256DB7218 != -1)
        swift_once();
      v52 = sub_23EC2E684();
      __swift_project_value_buffer(v52, (uint64_t)qword_256DC7798);
      v6 = sub_23EC2E66C();
      v53 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v54 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v53, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v54, 2u);
        MEMORY[0x24265B940](v54, -1, -1);
      }
LABEL_46:
      v55 = *(_QWORD *)(v0 + 168);
      v14 = *(void **)(v0 + 176);
      v56 = *(_QWORD *)(v0 + 160);
      v17 = *(_QWORD *)(v0 + 112);
      v16 = *(_QWORD *)(v0 + 120);
      v18 = *(_QWORD *)(v0 + 104);

      type metadata accessor for NetworkError();
      sub_23EBCBFD0();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v56, v55);

      goto LABEL_47;
    default:
      if (v4 == (id)500)
      {
        if (qword_256DB7218 != -1)
          swift_once();
        v61 = sub_23EC2E684();
        __swift_project_value_buffer(v61, (uint64_t)qword_256DC7798);
        v62 = sub_23EC2E66C();
        v63 = sub_23EC2EA08();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl(&dword_23EB9F000, v62, v63, "Internal Server Error", v64, 2u);
          MEMORY[0x24265B940](v64, -1, -1);
        }
        v66 = *(_QWORD *)(v0 + 168);
        v65 = *(void **)(v0 + 176);
        v67 = *(_QWORD *)(v0 + 160);
        v68 = *(_QWORD *)(v0 + 112);
        v80 = *(_QWORD *)(v0 + 104);
        v81 = *(_QWORD *)(v0 + 120);

        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        *v69 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v67, v66);

        v57 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
        goto LABEL_57;
      }
      if (v4 != (id)201)
      {
LABEL_23:
        if (qword_256DB7218 != -1)
          swift_once();
        v35 = *(void **)(v0 + 176);
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC7798);
        v37 = v35;
        v38 = sub_23EC2E66C();
        v39 = sub_23EC2EA08();
        v40 = os_log_type_enabled(v38, v39);
        v41 = *(void **)(v0 + 176);
        if (v40)
        {
          v42 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v42 = 134217984;
          *(_QWORD *)(v0 + 32) = objc_msgSend(v2, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v38, v39, "Request failed : Status Code %ld", v42, 0xCu);
          MEMORY[0x24265B940](v42, -1, -1);
        }
        else
        {

        }
        v70 = *(_QWORD *)(v0 + 168);
        v71 = *(void **)(v0 + 176);
        v72 = *(_QWORD *)(v0 + 160);
        v73 = *(_QWORD *)(v0 + 112);
        v80 = *(_QWORD *)(v0 + 104);
        v81 = *(_QWORD *)(v0 + 120);
        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        *v74 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v72, v70);

        v57 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
LABEL_57:
        v59 = v80;
        v58 = v81;
        goto LABEL_48;
      }
      if (qword_256DB7218 != -1)
        swift_once();
      v20 = sub_23EC2E684();
      __swift_project_value_buffer(v20, (uint64_t)qword_256DC7798);
      v21 = sub_23EC2E66C();
      v22 = sub_23EC2EA14();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_23EB9F000, v21, v22, "Auth Token refresh Response received", v23, 2u);
        MEMORY[0x24265B940](v23, -1, -1);
      }
      v24 = *(void **)(v0 + 184);

      sub_23EC2DFC4();
      swift_allocObject();
      sub_23EC2DFB8();
      sub_23EBCC018();
      sub_23EC2DFAC();
      if (v24)
      {
        v25 = v24;
        swift_release();
        v26 = sub_23EC2E66C();
        v27 = sub_23EC2EA08();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_23EB9F000, v26, v27, "Error while decoding response from server", v28, 2u);
          MEMORY[0x24265B940](v28, -1, -1);
        }
        v29 = *(_QWORD *)(v0 + 168);
        v30 = *(void **)(v0 + 176);
        v31 = *(_QWORD *)(v0 + 160);
        v33 = *(_QWORD *)(v0 + 112);
        v32 = *(_QWORD *)(v0 + 120);
        v34 = *(_QWORD *)(v0 + 104);

        sub_23EC244A4(v25);
        swift_willThrow();
        sub_23EBA3EDC(v31, v29);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_49:
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v75 = *(_QWORD *)(v0 + 168);
      v76 = *(void **)(v0 + 176);
      v77 = *(_QWORD *)(v0 + 160);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));

      swift_release();
      sub_23EBA3EDC(v77, v75);
      v79 = *(_QWORD *)(v0 + 16);
      v78 = *(_QWORD *)(v0 + 24);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v79, v78);
  }
}

uint64_t sub_23EBCBF80()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EBCBFD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB7E70;
  if (!qword_256DB7E70)
  {
    v1 = type metadata accessor for NetworkError();
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for NetworkError, v1);
    atomic_store(result, (unint64_t *)&qword_256DB7E70);
  }
  return result;
}

unint64_t sub_23EBCC018()
{
  unint64_t result;

  result = qword_256DB8368;
  if (!qword_256DB8368)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32E84, &type metadata for AuthTokenRefreshResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8368);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for InternalUtilityArtwork(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InternalUtilityArtwork()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for InternalUtilityArtwork(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InternalUtilityArtwork(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalUtilityArtwork(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalUtilityArtwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthTokenRefreshResponse()
{
  return &type metadata for AuthTokenRefreshResponse;
}

unint64_t sub_23EBCC194()
{
  unint64_t result;

  result = qword_256DB8378;
  if (!qword_256DB8378)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32F70, &type metadata for AuthTokenRefreshResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8378);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AuthTokenRefreshResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EBCC218 + 4 * byte_23EC32DEC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EBCC238 + 4 * byte_23EC32DF1[v4]))();
}

_BYTE *sub_23EBCC218(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EBCC238(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBCC240(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBCC248(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBCC250(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBCC258(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AuthTokenRefreshResponse.CodingKeys()
{
  return &type metadata for AuthTokenRefreshResponse.CodingKeys;
}

unint64_t sub_23EBCC278()
{
  unint64_t result;

  result = qword_256DB8388;
  if (!qword_256DB8388)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32F48, &type metadata for AuthTokenRefreshResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8388);
  }
  return result;
}

unint64_t sub_23EBCC2C0()
{
  unint64_t result;

  result = qword_256DB8390;
  if (!qword_256DB8390)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32EB8, &type metadata for AuthTokenRefreshResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8390);
  }
  return result;
}

unint64_t sub_23EBCC308()
{
  unint64_t result;

  result = qword_256DB8398;
  if (!qword_256DB8398)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC32EE0, &type metadata for AuthTokenRefreshResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8398);
  }
  return result;
}

uint64_t sub_23EBCC34C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023EC38AE0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23EBCC3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23EBA7408;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_23EBCC45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83B0);
  v3[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBCC4BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Request;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[4];
  v1 = v0[5];
  sub_23EBCC6D8(v0[3], v1);
  Request = type metadata accessor for GetRequest(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(Request - 8) + 56))(v1, 0, 1, Request);
  v4 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_256DB83B8));
  v5 = sub_23EC2E4E0();
  v0[6] = v5;
  v6 = swift_task_alloc();
  v0[7] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v2;
  v7 = swift_task_alloc();
  v0[8] = v7;
  *(_QWORD *)(v7 + 16) = v5;
  v8 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v8;
  type metadata accessor for RecordsResponse(0);
  *v8 = v0;
  v8[1] = sub_23EBCC5D0;
  return sub_23EC2ED44();
}

uint64_t sub_23EBCC5D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_23EBCC644()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCC680()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCC6D8(uint64_t a1, uint64_t a2)
{
  uint64_t Request;

  Request = type metadata accessor for GetRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Request - 8) + 16))(a2, a1, Request);
  return a2;
}

uint64_t sub_23EBCC71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBCC738()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  type metadata accessor for RecordsResponse(0);
  *v2 = v0;
  v2[1] = sub_23EBCC7D4;
  return sub_23EC2ED50();
}

uint64_t sub_23EBCC7D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBCC848()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCC87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_23EBA724C;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

id sub_23EBCC8E4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_23EC2E4D4();
  result = objc_msgSend(a2, sel_configuration);
  if (result)
  {
    v10 = result;
    objc_msgSend(result, sel_setPreferAnonymousRequests_, 1);

    return (id)sub_23EC2E9E4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23EBCCA00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];

  v2 = type metadata accessor for RecordsResponse(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23EBCCBCC(a1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9[1] = *v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D0);
    return sub_23EC2E984();
  }
  else
  {
    sub_23EBCCC14((uint64_t)v7, (uint64_t)v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D0);
    return sub_23EC2E990();
  }
}

id sub_23EBCCB10()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

id sub_23EBCCB20(uint64_t a1)
{
  uint64_t v1;

  return sub_23EBCC8E4(a1, *(void **)(v1 + 16));
}

uint64_t sub_23EBCCB28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_23EBCCB8C(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D0);
  return sub_23EBCCA00(a1);
}

uint64_t sub_23EBCCBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB83D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBCCC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecordsResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBCCC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v7[12] = a2;
  v7[13] = a3;
  v7[11] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[18] = swift_task_alloc();
  v8 = sub_23EC2DFA0();
  v7[19] = v8;
  v7[20] = *(_QWORD *)(v8 - 8);
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v7[25] = swift_task_alloc();
  v9 = sub_23EC2E264();
  v7[26] = v9;
  v7[27] = *(_QWORD *)(v9 - 8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBCCD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 240) = KeyPath;
  sub_23EBBA5A0(KeyPath, 0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 200), &qword_25433F930);
    if (qword_256DB7200 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC7750);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Request URL for Service Location API not found", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 88);
    swift_release();

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, 1, 1, v9);
  }
  else
  {
    v47 = KeyPath;
    v12 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 160);
    v18 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 152);
    v48 = *(_QWORD *)(v0 + 192);
    v49 = *(_QWORD *)(v0 + 96);
    v50 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v13, *(_QWORD *)(v0 + 200), v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v13, v15);
    sub_23EC2DF58();
    sub_23EC0A4E0(v16);
    v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    *(_QWORD *)(v0 + 248) = v21;
    v21(v18, v20);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    v22(v17, v16, v20);
    sub_23EC2DF70();
    v21(v16, v20);
    v22(v48, v17, v20);
    sub_23EC2DF70();
    v21(v17, v20);
    sub_23EC2DF40();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
    *(_QWORD *)(inited + 32) = 0xD000000000000011;
    *(_QWORD *)(inited + 40) = 0x800000023EC37930;
    *(_QWORD *)(inited + 48) = v49;
    *(_QWORD *)(inited + 56) = v50;
    swift_bridgeObjectRetain();
    sub_23EBA7540(inited);
    v24 = (void *)objc_opt_self();
    v25 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = 0;
    v26 = objc_msgSend(v24, sel_dataWithJSONObject_options_error_, v25, 0, v0 + 80);

    v27 = *(id *)(v0 + 80);
    if (v26)
    {
      v28 = sub_23EC2E2D0();
      v30 = v29;

      *(_QWORD *)(v0 + 256) = v28;
      *(_QWORD *)(v0 + 264) = v30;
      sub_23EBA3E98(v28, v30);
      sub_23EC2DF88();
      v31 = dword_256DB7E28;
      v32 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 272) = v32;
      *v32 = v0;
      v32[1] = sub_23EBCD35C;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E28 + v31))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 192), v47);
    }
    v34 = v27;
    v35 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB7200 != -1)
      swift_once();
    v36 = sub_23EC2E684();
    __swift_project_value_buffer(v36, (uint64_t)qword_256DC7750);
    v37 = sub_23EC2E66C();
    v38 = sub_23EC2EA08();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_23EB9F000, v37, v38, "Unable to encode Token request body", v39, 2u);
      MEMORY[0x24265B940](v39, -1, -1);
    }
    v40 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 208);
    v42 = *(_QWORD *)(v0 + 216);
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 152);
    v45 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 88);
    swift_release();

    v21(v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v44);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCD35C()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBCD40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB7200 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7750);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign subscription creation request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 264);
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v11 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 88);
    swift_release();

    sub_23EBA3EDC(v9, v8);
    v10(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, 1, 1, v15);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 216);
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v24 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v20, v3, v1);
    sub_23EC2DF94();
    swift_release();
    sub_23EBA3EDC(v17, v16);
    v22(v19, v1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v26, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v20, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCD6CC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 160) + 56))(*(_QWORD *)(v0 + 144), 1, 1, *(_QWORD *)(v0 + 152));
  sub_23EBA3038(*(_QWORD *)(v0 + 144), &qword_25433F918);
  if (qword_256DB7200 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7750);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign subscription creation request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v8 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 88);
  swift_release();

  sub_23EBA3EDC(v6, v5);
  v7(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCD8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[15] = a6;
  v7[16] = a7;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[17] = swift_task_alloc();
  v8 = sub_23EC2DFA0();
  v7[18] = v8;
  v7[19] = *(_QWORD *)(v8 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v7[24] = swift_task_alloc();
  v9 = sub_23EC2E264();
  v7[25] = v9;
  v7[26] = *(_QWORD *)(v9 - 8);
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBCD9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 232) = KeyPath;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  strcpy((char *)(inited + 32), "subscriptionId");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  swift_bridgeObjectRetain();
  v8 = sub_23EBA7540(inited);
  *(_QWORD *)(v0 + 240) = v8;
  sub_23EBBA5A0(KeyPath, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 192), &qword_25433F930);
    if (qword_256DB7200 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7750);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Request URL for Service Location API not found", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v28 = KeyPath;
    v15 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v14, *(_QWORD *)(v0 + 192), v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
    sub_23EC2DF58();
    sub_23EC0A4E0(v19);
    v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(_QWORD *)(v0 + 248) = v23;
    v23(v20, v22);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v24(v18, v19, v22);
    sub_23EC2DF70();
    v23(v19, v22);
    v24(v26, v18, v22);
    sub_23EC2DF70();
    v23(v18, v22);
    sub_23EC2DF40();
    v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E28 + dword_256DB7E28);
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v25;
    *v25 = v0;
    v25[1] = sub_23EBCDD98;
    return v27(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), v28);
  }
}

uint64_t sub_23EBCDD98()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBCDE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71E8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign fetch subscription request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 144);

    swift_release();
    swift_bridgeObjectRelease();
    v8(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v14 = 1;
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v20 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 200);
    v15 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 184);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 80), v3, v1);
    sub_23EC2DF94();
    swift_release();
    swift_bridgeObjectRelease();
    v19(v17, v1);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v16);
    v14 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), v14, 1, *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCE074()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 144));
  sub_23EBA3038(*(_QWORD *)(v0 + 136), &qword_25433F918);
  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign fetch subscription request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 144);

  swift_release();
  swift_bridgeObjectRelease();
  v5(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCE238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[15] = a6;
  v7[16] = a7;
  v7[13] = a4;
  v7[14] = a5;
  v7[11] = a2;
  v7[12] = a3;
  v7[10] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[17] = swift_task_alloc();
  v8 = sub_23EC2DFA0();
  v7[18] = v8;
  v7[19] = *(_QWORD *)(v8 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v7[24] = swift_task_alloc();
  v9 = sub_23EC2E264();
  v7[25] = v9;
  v7[26] = *(_QWORD *)(v9 - 8);
  v7[27] = swift_task_alloc();
  v7[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBCE34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t inited;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v0 + 232) = KeyPath;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  strcpy((char *)(inited + 32), "subscriptionId");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  swift_bridgeObjectRetain();
  v8 = sub_23EBA7540(inited);
  *(_QWORD *)(v0 + 240) = v8;
  sub_23EBBA5A0(KeyPath, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 192), &qword_25433F930);
    if (qword_256DB7200 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7750);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Request URL for Service Location API not found", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }

    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 144));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v28 = KeyPath;
    v15 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v14, *(_QWORD *)(v0 + 192), v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
    sub_23EC2DF58();
    sub_23EC0A4E0(v19);
    v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    *(_QWORD *)(v0 + 248) = v23;
    v23(v20, v22);
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    v24(v18, v19, v22);
    sub_23EC2DF70();
    v23(v19, v22);
    v24(v26, v18, v22);
    sub_23EC2DF70();
    v23(v18, v22);
    sub_23EC2DF40();
    v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E28 + dword_256DB7E28);
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v25;
    *v25 = v0;
    v25[1] = sub_23EBCE710;
    return v27(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), v28);
  }
}

uint64_t sub_23EBCE710()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBCE77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB7200 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7750);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign revoke subscription request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v9 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 144);

    swift_release();
    swift_bridgeObjectRelease();
    v8(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v14 = 1;
  }
  else
  {
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    v16 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 80);
    swift_release();
    swift_bridgeObjectRelease();
    v15(v19, v1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v21, v3, v1);
    v14 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), v14, 1, *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBCE9A8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 144));
  sub_23EBA3038(*(_QWORD *)(v0 + 136), &qword_25433F918);
  if (qword_256DB7200 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7750);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign revoke subscription request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 144);

  swift_release();
  swift_bridgeObjectRelease();
  v5(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 80), 1, 1, *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_23EBCEB6C(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_23EC2EC3C();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_23EBCEC00@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_23EBCEC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v8[18] = a8;
  v8[19] = v12;
  v8[16] = a6;
  v8[17] = a7;
  v8[14] = a4;
  v8[15] = a5;
  v8[12] = a2;
  v8[13] = a3;
  v8[11] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[20] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v8[24] = v10;
  *v10 = v8;
  v10[1] = sub_23EBCECD4;
  return sub_23EBD176C(v12);
}

uint64_t sub_23EBCECD4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBCED28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  void *v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t v14;
  uint64_t KeyPath;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  HomeUtilityServices::JWToken v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void **)(v0 + 112);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  JWToken.init(jwt:)(&v26, v3);
  if (v4)
  {

  }
  else
  {
    v5 = JWToken.expired.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v5)
    {
      v12 = *(_QWORD *)(v0 + 88);
      v11 = *(_QWORD *)(v0 + 96);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
      strcpy((char *)(inited + 32), "subscriptionId");
      *(_BYTE *)(inited + 47) = -18;
      *(_QWORD *)(inited + 48) = v12;
      *(_QWORD *)(inited + 56) = v11;
      swift_bridgeObjectRetain();
      v14 = sub_23EBA7540(inited);
      *(_QWORD *)(v0 + 200) = v14;
      KeyPath = swift_getKeyPath();
      *(_QWORD *)(v0 + 208) = KeyPath;
      v16 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v16;
      *v16 = v0;
      v16[1] = sub_23EBCEFC8;
      v17 = *(_QWORD *)(v0 + 160);
      v18 = *(_QWORD *)(v0 + 136);
      v19 = *(_QWORD *)(v0 + 144);
      v20 = *(_QWORD *)(v0 + 120);
      v21 = *(_QWORD *)(v0 + 128);
      v22 = *(_QWORD *)(v0 + 104);
      v23 = *(_QWORD *)(v0 + 112);
      v24 = *(_QWORD *)(v0 + 88);
      v25 = *(_QWORD *)(v0 + 96);
      v28 = KeyPath;
      v29 = v14;
      v27 = v23;
      return sub_23EBBB078(v17, v24, v25, v20, v21, v18, v19, v22);
    }
  }
  if (qword_256DB7208 != -1)
    swift_once();
  v6 = sub_23EC2E684();
  __swift_project_value_buffer(v6, (uint64_t)qword_256DC7768);
  v7 = sub_23EC2E66C();
  v8 = sub_23EC2EA08();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23EB9F000, v7, v8, "Authorization Token Expired. Refresh token and retry", v9, 2u);
    MEMORY[0x24265B940](v9, -1, -1);
  }

  type metadata accessor for NetworkError();
  sub_23EBCBFD0();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23EBCEFC8()
{
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23EBCF030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7208 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7768);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for triggering data resend.", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 184), v3, v1);
    sub_23EC0A6EC(0xD00000000000004ALL, 0x800000023EC39300, (uint8_t *)0xD000000000000026, 0x800000023EC39350);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v10;
    *v10 = v0;
    v10[1] = sub_23EBCF240;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBCF240(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;

  v7 = *v4;
  *(_QWORD *)(v7 + 232) = a3;
  *(_QWORD *)(v7 + 240) = v3;
  swift_task_dealloc();
  if (!v3)
    sub_23EBA3EDC(a1, a2);
  return swift_task_switch();
}

uint64_t sub_23EBCF2C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  uint8_t *v34;
  NSObject *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(id *)(v0 + 232);
    sub_23EC0AFC4(0xD000000000000010, (uint8_t *)0x800000023EC39380, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4EAF0);
    v4 = objc_msgSend(v2, sel_statusCode);
    switch((unint64_t)v4)
    {
      case 0x190uLL:
        if (qword_256DB7208 != -1)
          swift_once();
        v5 = sub_23EC2E684();
        __swift_project_value_buffer(v5, (uint64_t)qword_256DC7768);
        v6 = sub_23EC2E66C();
        v7 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v7))
        {
          v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v8 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
          MEMORY[0x24265B940](v8, -1, -1);
        }
        goto LABEL_38;
      case 0x191uLL:
        if (qword_256DB7208 != -1)
          swift_once();
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC7768);
        v6 = sub_23EC2E66C();
        v37 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v37, "Request Unauthorized or Access Token Expired.", v38, 2u);
          MEMORY[0x24265B940](v38, -1, -1);
        }
        goto LABEL_38;
      case 0x192uLL:
      case 0x193uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x199uLL:
      case 0x19AuLL:
      case 0x19BuLL:
      case 0x19CuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_20;
      case 0x194uLL:
        if (qword_256DB7208 != -1)
          swift_once();
        v39 = sub_23EC2E684();
        __swift_project_value_buffer(v39, (uint64_t)qword_256DC7768);
        v6 = sub_23EC2E66C();
        v40 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v40))
        {
          v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v41 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v40, "Subscription not found. - Should Off-board user!", v41, 2u);
          MEMORY[0x24265B940](v41, -1, -1);
        }
        goto LABEL_38;
      case 0x1ADuLL:
        if (qword_256DB7208 != -1)
          swift_once();
        v42 = sub_23EC2E684();
        __swift_project_value_buffer(v42, (uint64_t)qword_256DC7768);
        v6 = sub_23EC2E66C();
        v43 = sub_23EC2EA08();
        if (os_log_type_enabled(v6, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v44 = 0;
          _os_log_impl(&dword_23EB9F000, v6, v43, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v44, 2u);
          MEMORY[0x24265B940](v44, -1, -1);
        }
LABEL_38:
        v13 = *(void **)(v0 + 232);
        v15 = *(_QWORD *)(v0 + 176);
        v14 = *(_QWORD *)(v0 + 184);
        v16 = *(_QWORD *)(v0 + 168);

        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        goto LABEL_39;
      default:
        if (v4 == (id)500)
        {
          if (qword_256DB7208 != -1)
            swift_once();
          v46 = sub_23EC2E684();
          __swift_project_value_buffer(v46, (uint64_t)qword_256DC7768);
          v31 = sub_23EC2E66C();
          v47 = sub_23EC2EA08();
          if (os_log_type_enabled(v31, v47))
          {
            v48 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v48 = 0;
            _os_log_impl(&dword_23EB9F000, v31, v47, "Internal Server Error", v48, 2u);
            MEMORY[0x24265B940](v48, -1, -1);
          }
          v35 = *(NSObject **)(v0 + 232);
        }
        else
        {
          if (v4 == (id)200)
          {
            if (qword_256DB7208 != -1)
              swift_once();
            v18 = sub_23EC2E684();
            __swift_project_value_buffer(v18, (uint64_t)qword_256DC7768);
            v19 = sub_23EC2E66C();
            v20 = sub_23EC2EA14();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v21 = 0;
              _os_log_impl(&dword_23EB9F000, v19, v20, "Data resend triggered successfully.", v21, 2u);
              MEMORY[0x24265B940](v21, -1, -1);
            }
            v22 = *(void **)(v0 + 232);
            v24 = *(_QWORD *)(v0 + 176);
            v23 = *(_QWORD *)(v0 + 184);
            v25 = *(_QWORD *)(v0 + 168);

            (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
            swift_task_dealloc();
            swift_task_dealloc();
            v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
            v27 = 1;
            return v26(v27);
          }
LABEL_20:
          if (qword_256DB7208 != -1)
            swift_once();
          v28 = *(void **)(v0 + 232);
          v29 = sub_23EC2E684();
          __swift_project_value_buffer(v29, (uint64_t)qword_256DC7768);
          v30 = v28;
          v31 = sub_23EC2E66C();
          v32 = sub_23EC2EA08();
          if (os_log_type_enabled(v31, v32))
          {
            v33 = *(void **)(v0 + 232);
            v34 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v34 = 134217984;
            *(_QWORD *)(v0 + 80) = objc_msgSend(v2, sel_statusCode);
            sub_23EC2EA68();

            _os_log_impl(&dword_23EB9F000, v31, v32, "Request failed : Status Code %ld", v34, 0xCu);
            MEMORY[0x24265B940](v34, -1, -1);
            v35 = *(NSObject **)(v0 + 232);
          }
          else
          {

            v35 = *(NSObject **)(v0 + 232);
            v31 = v35;
          }
        }
        v50 = *(_QWORD *)(v0 + 176);
        v49 = *(_QWORD *)(v0 + 184);
        v51 = *(_QWORD *)(v0 + 168);

        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        *v52 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
        goto LABEL_40;
    }
  }
  if (qword_256DB7208 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_256DC7768);
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2EA08();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process Historical AMI Response.", v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
  }
  v13 = *(void **)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 168);

  type metadata accessor for NetworkError();
  sub_23EBCBFD0();
  swift_allocError();
  *v17 = 2;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
LABEL_39:

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
LABEL_40:
  swift_task_dealloc();
  swift_task_dealloc();
  v26 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v27 = 0;
  return v26(v27);
}

uint64_t sub_23EBCFBCC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t static UtilityServices.internalFrameworkConfiguration(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_256DB8408 + dword_256DB8408);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23EBA78C4;
  return v5(a1);
}

uint64_t sub_23EBCFDAC(void *a1, void *aBlock)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(id);

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  v7 = (uint64_t (*)(id))((char *)&dword_256DB8408 + dword_256DB8408);
  v4 = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_23EBA7AA8;
  return v7(v4);
}

uint64_t static UtilityServices.fetchPrivateAccessToken(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23EBCFE84;
  return sub_23EBF35CC(a1, 0);
}

uint64_t sub_23EBCFE84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_23EBD0014(uint64_t a1, void *aBlock)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = _Block_copy(aBlock);
  if (a1)
    a1 = sub_23EC2E930();
  v2[3] = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_23EBD008C;
  return sub_23EBF35CC(a1, 0);
}

uint64_t sub_23EBD008C()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    v5 = sub_23EC2E1C8();

    v6 = 0;
    v7 = (void *)v5;
  }
  else
  {
    v6 = sub_23EC2E774();
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = (void *)v6;
  }
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 16);
  v8[2](v8, v6, v5);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t static UtilityServices.generateGrandSlamToken()()
{
  return swift_task_switch();
}

uint64_t sub_23EBD0178()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_256DB7158 != -1)
    swift_once();
  v1 = qword_256DC7648;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v2;
  *v2 = v0;
  v2[1] = sub_23EBD01F0;
  return sub_23EBC68A4(v1);
}

uint64_t sub_23EBD01F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_23EBD035C(const void *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  return swift_task_switch();
}

uint64_t sub_23EBD0398()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_256DB7158 != -1)
    swift_once();
  v1 = qword_256DC7648;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_23EBD0410;
  return sub_23EBC68A4(v1);
}

uint64_t sub_23EBD0410(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (a2)
  {
    v6 = (void *)sub_23EC2E774();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void (***)(_QWORD, _QWORD))(v4 + 16);
  ((void (**)(_QWORD, void *))v7)[2](v7, v6);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilityServices.userDSID()()
{
  if (qword_256DB7158 != -1)
    swift_once();
  return sub_23EBC6778((void *)qword_256DC7648);
}

void static UtilityServices.environment()()
{
  char *v0;

  v0 = (char *)sub_23EBD059C + 4 * byte_23EC330BC[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EBD059C()
{
  return 7759204;
}

uint64_t sub_23EBD05B0()
{
  return 1953654115;
}

uint64_t sub_23EBD05C4()
{
  return 1685025392;
}

id sub_23EBD0620()
{
  void *v0;

  v0 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23EBD0670(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  *(_QWORD *)(v1 + 16) = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v3;
  *v3 = v1;
  v3[1] = sub_23EBD06E0;
  return sub_23EBD176C(a1);
}

uint64_t sub_23EBD06E0(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBD073C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(_QWORD *)(v0 + 16);
    sub_23EBD2A34(v1);
    v2 = type metadata accessor for UtilityServicesConfigurationsModel();
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
    v4 = *(_QWORD *)(v0 + 16);
    if (v3 != 1)
    {
      v9 = sub_23EBD2DA4();
      sub_23EBBCA34(v4);
      goto LABEL_11;
    }
    sub_23EBA3038(*(_QWORD *)(v0 + 16), &qword_25433FA30);
  }
  else
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_25433FC80);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Error while looking up configuration!!!", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }

  }
  v9 = 0;
LABEL_11:
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t _s19HomeUtilityServices0bC0C23clearServiceConfigCacheyyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  sub_23EBD0E24();
  v1 = v0;
  v3 = v2;
  v5[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8470);
  v5[0] = MEMORY[0x24BEE4AF8];
  sub_23EBD0AE4(v1, v3, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return sub_23EBA3038((uint64_t)v5, &qword_25433FBF0);
}

uint64_t sub_23EBD0938()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23EBD095C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23EBA724C;
  return ((uint64_t (*)(const void *))((char *)&dword_256DB8420 + dword_256DB8420))(v2);
}

uint64_t sub_23EBD09CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA7408;
  return ((uint64_t (*)(uint64_t, void *))((char *)&dword_256DB8430 + dword_256DB8430))(v2, v3);
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_23EBD0A70()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA7408;
  return ((uint64_t (*)(void *, void *))((char *)&dword_256DB8450 + dword_256DB8450))(v2, v3);
}

void sub_23EBD0AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  __CFString *v11;
  __CFString *v12;
  _QWORD v13[3];
  uint64_t v14;

  v4 = (__CFString *)sub_23EC2E774();
  sub_23EBA5560(a3, (uint64_t)v13);
  v5 = v14;
  if (v14)
  {
    v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
    v7 = *(_QWORD *)(v5 - 8);
    MEMORY[0x24BDAC7A8](v6);
    v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    v10 = (const void *)sub_23EC2ED2C();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  else
  {
    v10 = 0;
  }
  v11 = (__CFString *)sub_23EC2E774();
  CFPreferencesSetAppValue(v4, v10, v11);
  swift_unknownObjectRelease();

  v12 = (__CFString *)sub_23EC2E774();
  CFPreferencesAppSynchronize(v12);

}

uint64_t sub_23EBD0C20()
{
  uint64_t result;

  result = os_variant_has_internal_diagnostics();
  byte_25433FC18 = result;
  return result;
}

uint64_t sub_23EBD0C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    sub_23EBD0D38();
    v1 = v2;
    *(_QWORD *)(v0 + 16) = v2;
    *(_QWORD *)(v0 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EBD0CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    sub_23EBD0D38();
    v1 = v2;
    *(_QWORD *)(v0 + 32) = v2;
    *(_QWORD *)(v0 + 40) = v3;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void sub_23EBD0D38()
{
  char *v0;

  swift_bridgeObjectRetain();
  sub_23EC2E834();
  v0 = (char *)sub_23EBD0DAC + 4 * byte_23EC330C4[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EBD0DAC()
{
  uint64_t v1;

  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2E834();
  return v1;
}

void sub_23EBD0E24()
{
  char *v0;

  sub_23EC2EB4C();
  v0 = (char *)sub_23EBD0E8C + 4 * byte_23EC330C8[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EBD0E8C()
{
  uint64_t v1;

  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  return v1;
}

uint64_t sub_23EBD0F00()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  __CFString *v4;
  __CFString *v5;
  int AppBooleanValue;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  os_log_type_t v11;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (qword_25433FAA0 != -1)
    swift_once();
  if (byte_25433FC18 == 1)
  {
    if (qword_25433FAC0 != -1)
      swift_once();
    v0 = sub_23EC2E684();
    __swift_project_value_buffer(v0, (uint64_t)qword_25433FC38);
    v1 = sub_23EC2E66C();
    v2 = sub_23EC2EA14();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_23EB9F000, v1, v2, "Checking for Utility Enablement Override.", v3, 2u);
      MEMORY[0x24265B940](v3, -1, -1);
    }

    keyExistsAndHasValidFormat = 0;
    v4 = (__CFString *)sub_23EC2E774();
    v5 = (__CFString *)sub_23EC2E774();
    AppBooleanValue = CFPreferencesGetAppBooleanValue(v4, v5, &keyExistsAndHasValidFormat);

    if (keyExistsAndHasValidFormat && AppBooleanValue)
    {
      v7 = sub_23EC2E66C();
      v8 = sub_23EC2EA14();
      if (!os_log_type_enabled(v7, v8))
      {
        v10 = 1;
        goto LABEL_18;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v7, v8, "Utility Enablement Override detected. Returning true", v9, 2u);
      v10 = 1;
    }
    else
    {
      v7 = sub_23EC2E66C();
      v11 = sub_23EC2EA14();
      if (!os_log_type_enabled(v7, v11))
      {
        v10 = 0;
        goto LABEL_18;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v7, v11, "Utility Enablement Override not detected. Returning false", v9, 2u);
      v10 = 0;
    }
    MEMORY[0x24265B940](v9, -1, -1);
LABEL_18:

    return v10;
  }
  return 0;
}

BOOL sub_23EBD1194()
{
  __CFString *v0;
  __CFString *v1;
  int AppBooleanValue;
  BOOL v3;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  keyExistsAndHasValidFormat = 0;
  v0 = (__CFString *)sub_23EC2E774();
  v1 = (__CFString *)sub_23EC2E774();
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (keyExistsAndHasValidFormat)
    v3 = AppBooleanValue == 0;
  else
    v3 = 1;
  return !v3;
}

uint64_t sub_23EBD125C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  *(_QWORD *)(v1 + 16) = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v3;
  *v3 = v1;
  v3[1] = sub_23EBD12CC;
  return sub_23EBD176C(a1);
}

uint64_t sub_23EBD12CC(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBD1328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(_QWORD *)(v0 + 16);
    sub_23EBD2A34(v1);
    v2 = type metadata accessor for UtilityServicesConfigurationsModel();
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
    v4 = *(unsigned __int8 **)(v0 + 16);
    if (v3 == 1)
    {
      sub_23EBA3038(*(_QWORD *)(v0 + 16), &qword_25433FA30);
    }
    else
    {
      v5 = *v4;
      v6 = *((_QWORD *)v4 + 1);
      v7 = *((_QWORD *)v4 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23EBBCA34((uint64_t)v4);
      v8 = sub_23EBD34F8(v5, v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
        goto LABEL_10;
    }
  }
  if (qword_25433FAE8 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_25433FC80);
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2EA08();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_23EB9F000, v10, v11, "Using default configuration values hardcoded in Framework.", v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
  }

  v8 = sub_23EBA740C(MEMORY[0x24BEE4AF8]);
LABEL_10:
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v8);
}

uint64_t sub_23EBD14C0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UtilityServicesConfigurationsModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23EBA3038((uint64_t)v2, &qword_25433FA30);
    if (qword_25433FAE8 != -1)
      swift_once();
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_25433FC80);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "    Returning regions from default config.\n    Ensure this invocation is from a client that needs this value during installation.", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }

    if (qword_256DB7168 != -1)
      swift_once();
    v11 = qword_256DC7650;
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_23EBBC840((uint64_t)v2, (uint64_t)v6);
    if ((sub_23EBD3014() & 1) != 0)
    {
      v12 = swift_bridgeObjectRetain();
      v11 = sub_23EBD6AB8(v12);
      swift_bridgeObjectRelease();
      sub_23EBBCA34((uint64_t)v6);
    }
    else
    {
      if (qword_25433FAE8 != -1)
        swift_once();
      v13 = sub_23EC2E684();
      __swift_project_value_buffer(v13, (uint64_t)qword_25433FC80);
      v14 = sub_23EC2E66C();
      v15 = sub_23EC2EA08();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_23EB9F000, v14, v15, "All Utilities are disabled via config.", v16, 2u);
        MEMORY[0x24265B940](v16, -1, -1);
      }

      sub_23EBBCA34((uint64_t)v6);
      return MEMORY[0x24BEE4B08];
    }
  }
  return v11;
}

uint64_t sub_23EBD176C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v1[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v2 = sub_23EC2DFA0();
  v1[11] = v2;
  v1[12] = *(_QWORD *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v1[16] = swift_task_alloc();
  v3 = sub_23EC2E264();
  v1[17] = v3;
  v1[18] = *(_QWORD *)(v3 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBD189C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _DWORD *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  char v54;
  uint64_t v55;

  v1 = sub_23EBD3BAC();
  if ((v1 & 1) != 0)
    goto LABEL_26;
  if (qword_25433FAE8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  *(_QWORD *)(v0 + 168) = __swift_project_value_buffer(v2, (uint64_t)qword_25433FC80);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA14();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Fetching new config.", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 128);

  sub_23EC12720();
  sub_23EBF60FC();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 128), &qword_25433F930);
    v9 = sub_23EC2E66C();
    v10 = sub_23EC2EA08();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_23EB9F000, v9, v10, "Unable to create config update URL!!!", v11, 2u);
      MEMORY[0x24265B940](v11, -1, -1);
    }

    goto LABEL_26;
  }
  v54 = v1;
  v13 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v12, *(_QWORD *)(v0 + 128), v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
  sub_23EC2DF58();
  sub_23EC0A4E0(v16);
  v21 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  *(_QWORD *)(v0 + 176) = v21;
  v21(v17, v19);
  sub_23EBD2A34(v20);
  v22 = type metadata accessor for UtilityServicesConfigurationsModel();
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  v24 = v23(v20, 1, v22);
  v25 = *(_QWORD *)(v0 + 80);
  if (v24 != 1)
  {
    v26 = sub_23EBD3E10();
    sub_23EBBCA34(v25);
    if ((v26 & 1) == 0)
      goto LABEL_21;
    v27 = *(_QWORD *)(v0 + 72);
    sub_23EBD2A34(v27);
    v28 = v23(v27, 1, v22);
    v25 = *(_QWORD *)(v0 + 72);
    if (v28 != 1)
    {
      v29 = (uint64_t *)(v25 + *(int *)(v22 + 24));
      v30 = *v29;
      v31 = v29[1];
      swift_bridgeObjectRetain();
      sub_23EBBCA34(v25);
      if (v31)
      {
        v32 = sub_23EC2E66C();
        v33 = sub_23EC2EA14();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v34 = 0;
          _os_log_impl(&dword_23EB9F000, v32, v33, "Adding ETag header to config request.", v34, 2u);
          MEMORY[0x24265B940](v34, -1, -1);
        }

        swift_bridgeObjectRetain_n();
        v35 = sub_23EC2E66C();
        v36 = sub_23EC2E9FC();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc();
          v38 = swift_slowAlloc();
          v55 = v38;
          *(_DWORD *)v37 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 48) = sub_23EBAE6D4(v30, v31, &v55);
          sub_23EC2EA68();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23EB9F000, v35, v36, "ETag value: %s", v37, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24265B940](v38, -1, -1);
          MEMORY[0x24265B940](v37, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        sub_23EC2DF70();
        swift_bridgeObjectRelease();
      }
      goto LABEL_21;
    }
  }
  sub_23EBA3038(v25, &qword_25433FA30);
LABEL_21:
  v40 = *(_QWORD *)(v0 + 88);
  v39 = *(_QWORD *)(v0 + 96);
  v41 = *(_QWORD *)(v0 + 64);
  sub_23EC17CD8(v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v41, 1, v40) != 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    sub_23EC0A6EC(0xD000000000000016, 0x800000023EC39560, (uint8_t *)0xD000000000000029, 0x800000023EC39580);
    v46 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v46;
    *v46 = v0;
    v46[1] = sub_23EBD2058;
    return sub_23EC2E9CC();
  }
  v53 = v21;
  sub_23EBA3038(*(_QWORD *)(v0 + 64), &qword_25433F918);
  v42 = sub_23EC2E66C();
  v43 = sub_23EC2EA08();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (_DWORD *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    *v44 = 136315138;
    v45 = (char *)&loc_23EBD1DE8 + 4 * byte_23EC330E0[sub_23EC12720()];
    __asm { BR              X10 }
  }
  v48 = *(_QWORD *)(v0 + 160);
  v50 = *(_QWORD *)(v0 + 136);
  v49 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 120);
  v52 = *(_QWORD *)(v0 + 88);

  v53(v51, v52);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  v1 = v54;
LABEL_26:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t sub_23EBD2058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[24] = a1;
  v5[25] = a2;
  v5[26] = a3;
  v5[27] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBD20C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  char v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    v16 = sub_23EC2E66C();
    v17 = sub_23EC2EA08();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23EB9F000, v16, v17, "Unable to process Config Response.", v18, 2u);
      MEMORY[0x24265B940](v18, -1, -1);
    }
    v19 = *(void **)(v0 + 208);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 144);
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 88);
    sub_23EBA3EDC(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
    goto LABEL_14;
  }
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 208);
  sub_23EC0AFC4(0xD00000000000001DLL, (uint8_t *)0x800000023EC395B0, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4E3D0);
  v4 = objc_msgSend(v2, sel_statusCode);
  if (v4 == (id)401)
  {
    v16 = sub_23EC2E66C();
    v27 = sub_23EC2EA08();
    if (os_log_type_enabled(v16, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_23EB9F000, v16, v27, "Request Unauthorized!!!", v28, 2u);
      MEMORY[0x24265B940](v28, -1, -1);
    }
    v19 = *(void **)(v0 + 208);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 144);
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 88);
    sub_23EBA3EDC(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));

LABEL_14:
    v20(v25, v26);
    v20(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    goto LABEL_15;
  }
  if (v4 == (id)304)
  {
    v30 = sub_23EC2E66C();
    v31 = sub_23EC2EA14();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_23EB9F000, v30, v31, "No change to saved config on disk. Continue using saved config.", v32, 2u);
      MEMORY[0x24265B940](v32, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(void **)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v47 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);

    v15 = sub_23EBD38D0();
    goto LABEL_19;
  }
  if (v4 == (id)200)
  {
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA14();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Saving fetched config to disk", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(void **)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    v47 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);

    v15 = sub_23EBD3710();
LABEL_19:
    v29 = v15;
    sub_23EBA3EDC(v10, v8);

    v11(v13, v14);
    v11(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v49);
    goto LABEL_20;
  }
  v34 = *(id *)(v0 + 208);
  v35 = sub_23EC2E66C();
  v36 = sub_23EC2EA08();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(void **)(v0 + 208);
  v39 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 136);
  v41 = *(_QWORD *)(v0 + 144);
  v50 = *(_QWORD *)(v0 + 120);
  v52 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  v48 = *(_QWORD *)(v0 + 104);
  v42 = *(_QWORD *)(v0 + 88);
  if (v37)
  {
    v44 = *(_QWORD *)(v0 + 192);
    v45 = *(_QWORD *)(v0 + 200);
    v46 = *(_QWORD *)(v0 + 136);
    v43 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v43 = 134217984;
    *(_QWORD *)(v0 + 40) = objc_msgSend(v2, sel_statusCode);
    sub_23EC2EA68();

    _os_log_impl(&dword_23EB9F000, v35, v36, "Unhandled http response code %ld", v43, 0xCu);
    MEMORY[0x24265B940](v43, -1, -1);
    sub_23EBA3EDC(v44, v45);

    v52(v48, v42);
    v52(v50, v42);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v46);
  }
  else
  {
    sub_23EBA3EDC(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));

    v52(v48, v42);
    v52(v50, v42);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  }
LABEL_15:
  v29 = 0;
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v29 & 1);
}

uint64_t sub_23EBD2660()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  char *v15;
  void *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 216);
  v2 = v1;
  v3 = v1;
  v4 = sub_23EC2E66C();
  v5 = sub_23EC2EA08();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 216);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 32) = v10;
    sub_23EC2EA68();
    *v8 = v10;

    _os_log_impl(&dword_23EB9F000, v4, v5, "Error while trying to fetch Config from Server %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v8, -1, -1);
    MEMORY[0x24265B940](v7, -1, -1);
  }
  else
  {
    v11 = *(void **)(v0 + 216);

  }
  v12 = sub_23EC2E66C();
  v13 = sub_23EC2EA08();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v14 = 136315138;
    v15 = (char *)&loc_23EBD284C + 4 * byte_23EC330E4[sub_23EC12720()];
    __asm { BR              X10 }
  }
  v16 = *(void **)(v0 + 216);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 88);

  v17(v22, v23);
  v17(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23EBD2A34@<X0>(uint64_t a1@<X8>)
{
  __CFString *v2;
  __CFString *v3;
  CFPropertyListRef v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23EBD0E24();
  v2 = (__CFString *)sub_23EC2E774();
  v3 = (__CFString *)sub_23EC2E774();
  v4 = CFPreferencesCopyAppValue(v2, v3);
  swift_bridgeObjectRelease();

  if (v4)
  {
    v25[0] = (id)v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = (void *)objc_opt_self();
      v6 = (void *)sub_23EC2E714();
      swift_bridgeObjectRelease();
      v25[0] = 0;
      v7 = objc_msgSend(v5, sel_dataWithJSONObject_options_error_, v6, 0, v25);

      v8 = v25[0];
      if (v7)
      {
        v9 = sub_23EC2E2D0();
        v11 = v10;

        sub_23EBD31C4(a1);
        return sub_23EBA3EDC(v9, v11);
      }
      v13 = v8;
      v14 = (void *)sub_23EC2E1D4();

      swift_willThrow();
      if (qword_25433FAE8 != -1)
        swift_once();
      v15 = sub_23EC2E684();
      __swift_project_value_buffer(v15, (uint64_t)qword_25433FC80);
      v16 = v14;
      v17 = v14;
      v18 = sub_23EC2E66C();
      v19 = sub_23EC2EA08();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = (void *)swift_slowAlloc();
        v25[0] = v21;
        *(_DWORD *)v20 = 136315138;
        swift_getErrorValue();
        v22 = sub_23EC2ED74();
        sub_23EBAE6D4(v22, v23, (uint64_t *)v25);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_23EB9F000, v18, v19, "Error decoding config from disk.%s", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v21, -1, -1);
        MEMORY[0x24265B940](v20, -1, -1);

      }
      else
      {

      }
    }
  }
  v24 = type metadata accessor for UtilityServicesConfigurationsModel();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
}

uint64_t sub_23EBD2DA4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _BYTE v11[32];
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_23EC2DFE8();
  swift_allocObject();
  sub_23EC2DFDC();
  type metadata accessor for UtilityServicesConfigurationsModel();
  sub_23EBC0AD4(&qword_25433FA20, (uint64_t (*)(uint64_t))type metadata accessor for UtilityServicesConfigurationsModel, (uint64_t)&unk_23EC33298);
  v0 = sub_23EC2DFD0();
  v2 = v1;
  swift_release();
  v3 = (void *)objc_opt_self();
  v4 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v16[0] = 0;
  v5 = objc_msgSend(v3, sel_JSONObjectWithData_options_error_, v4, 4, v16);

  v6 = *(id *)&v16[0];
  if (v5)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = v6;
    v8 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    memset(v16, 0, sizeof(v16));
  }
  sub_23EBB2090((uint64_t)v16, (uint64_t)&v13, &qword_25433FBF0);
  if (v14)
  {
    sub_23EBB2080(&v13, v12);
    sub_23EBA55A8((uint64_t)v12, (uint64_t)v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    if ((swift_dynamicCast() & 1) == 0)
      v15 = 0;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
    v9 = v15;
  }
  else
  {
    v9 = 0;
    v15 = 0;
  }
  sub_23EBA3EDC(v0, v2);
  sub_23EBA3038((uint64_t)v16, &qword_25433FBF0);
  return v9;
}

uint64_t sub_23EBD2FCC()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_23EBD6B4C((uint64_t)&unk_250F4E428);
  result = swift_arrayDestroy();
  qword_256DC7650 = v0;
  return result;
}

uint64_t sub_23EBD3014()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UtilityServicesConfigurationsModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (unsigned __int8 *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23EBA3038((uint64_t)v2, &qword_25433FA30);
    if (qword_25433FAE8 != -1)
      swift_once();
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_25433FC80);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Unable to retrieve configuration to check if utility is disabled or not.", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }

    return 0;
  }
  else
  {
    sub_23EBBC840((uint64_t)v2, (uint64_t)v6);
    if ((sub_23EBD0F00() & 1) != 0)
    {
      sub_23EBBCA34((uint64_t)v6);
      return 1;
    }
    else
    {
      v11 = *v6;
      sub_23EBBCA34((uint64_t)v6);
    }
  }
  return v11;
}

uint64_t sub_23EBD31C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  v2 = type metadata accessor for UtilityServicesConfigurationsModel();
  sub_23EBC0AD4(&qword_25433FA28, (uint64_t (*)(uint64_t))type metadata accessor for UtilityServicesConfigurationsModel, (uint64_t)&unk_23EC332C0);
  sub_23EC2DFAC();
  swift_release();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_23EBD34F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _BYTE v16[32];
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_23EC2DFE8();
  swift_allocObject();
  sub_23EC2DFDC();
  *((_QWORD *)&v21 + 1) = a2;
  *(_QWORD *)&v22 = a3;
  sub_23EBD6CEC();
  v5 = sub_23EC2DFD0();
  v7 = v6;
  swift_release();
  v8 = (void *)objc_opt_self();
  v9 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v21 = 0;
  v10 = objc_msgSend(v8, sel_JSONObjectWithData_options_error_, v9, 4, &v21);

  v11 = (id)v21;
  if (v10)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
  }
  else
  {
    v12 = v11;
    v13 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    v21 = 0u;
    v22 = 0u;
  }
  sub_23EBB2090((uint64_t)&v21, (uint64_t)&v18, &qword_25433FBF0);
  if (v19)
  {
    sub_23EBB2080(&v18, v17);
    sub_23EBA55A8((uint64_t)v17, (uint64_t)v16);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    if ((swift_dynamicCast() & 1) == 0)
      v20 = 0;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    v14 = v20;
  }
  else
  {
    v14 = 0;
    v20 = 0;
  }
  sub_23EBA3EDC(v5, v7);
  sub_23EBA3038((uint64_t)&v21, &qword_25433FBF0);
  return v14;
}

uint64_t sub_23EBD3710()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UtilityServicesConfigurationsModel();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD31C4((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_23EBA3038((uint64_t)v5, &qword_25433FA30);
LABEL_6:
    v16 = 0;
    return v16 & 1;
  }
  sub_23EBBC840((uint64_t)v5, (uint64_t)v9);
  v10 = sub_23EBDFE28();
  if (!v11)
  {
    sub_23EBBCA34((uint64_t)v9);
    goto LABEL_6;
  }
  v12 = v10;
  v13 = v11;
  sub_23EBE0220();
  sub_23EC2E36C();
  v14 = sub_23EC2E3CC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v2, 0, 1, v14);
  sub_23EBD648C((uint64_t)v2, (uint64_t)&v9[*(int *)(v6 + 20)]);
  v15 = &v9[*(int *)(v6 + 24)];
  swift_bridgeObjectRelease();
  *(_QWORD *)v15 = v12;
  *((_QWORD *)v15 + 1) = v13;
  v16 = sub_23EBD64D4((uint64_t)v9);
  sub_23EBBCA34((uint64_t)v9);
  return v16 & 1;
}

uint64_t sub_23EBD38D0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v21;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UtilityServicesConfigurationsModel();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_23EBA3038((uint64_t)v5, &qword_25433FA30);
    if (qword_25433FAE8 != -1)
      swift_once();
    v10 = sub_23EC2E684();
    __swift_project_value_buffer(v10, (uint64_t)qword_25433FC80);
    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23EB9F000, v11, v12, "Unable to update Config!!!", v13, 2u);
      MEMORY[0x24265B940](v13, -1, -1);
    }

    v14 = 0;
  }
  else
  {
    sub_23EBBC840((uint64_t)v5, (uint64_t)v9);
    if (qword_25433FAE8 != -1)
      swift_once();
    v15 = sub_23EC2E684();
    __swift_project_value_buffer(v15, (uint64_t)qword_25433FC80);
    v16 = sub_23EC2E66C();
    v17 = sub_23EC2EA14();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23EB9F000, v16, v17, "Updating saved config with new expiry date.", v18, 2u);
      MEMORY[0x24265B940](v18, -1, -1);
    }

    sub_23EBE0220();
    sub_23EC2E36C();
    v19 = sub_23EC2E3CC();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v2, 0, 1, v19);
    sub_23EBD648C((uint64_t)v2, (uint64_t)&v9[*(int *)(v6 + 20)]);
    v14 = sub_23EBD64D4((uint64_t)v9);
    sub_23EBBCA34((uint64_t)v9);
  }
  return v14 & 1;
}

uint64_t sub_23EBD3BAC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UtilityServicesConfigurationsModel();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBD2A34((uint64_t)v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23EBA3038((uint64_t)v2, &qword_25433FA30);
LABEL_6:
    if (qword_25433FAE8 != -1)
      swift_once();
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_25433FC80);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Config saved on disk is invalid!", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }

    return 0;
  }
  sub_23EBBC840((uint64_t)v2, (uint64_t)v6);
  if ((sub_23EBD3E10() & 1) == 0 || (sub_23EBD3F18() & 1) != 0)
  {
    sub_23EBBCA34((uint64_t)v6);
    goto LABEL_6;
  }
  if (qword_25433FAE8 != -1)
    swift_once();
  v12 = sub_23EC2E684();
  __swift_project_value_buffer(v12, (uint64_t)qword_25433FC80);
  v13 = sub_23EC2E66C();
  v14 = sub_23EC2EA14();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_23EB9F000, v13, v14, "Config saved on disk is valid. Skipping reloading", v15, 2u);
    MEMORY[0x24265B940](v15, -1, -1);
  }

  sub_23EBBCA34((uint64_t)v6);
  return 1;
}

uint64_t sub_23EBD3E10()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v1 = v0[4];
  v2 = v0[3] & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
  {
    v3 = v0[6];
    v4 = v0[5] & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0x2000000000000000) != 0)
      v4 = HIBYTE(v3) & 0xF;
    if (v4)
      return 1;
  }
  if (qword_25433FAE8 != -1)
    swift_once();
  v6 = sub_23EC2E684();
  __swift_project_value_buffer(v6, (uint64_t)qword_25433FC80);
  v7 = sub_23EC2E66C();
  v8 = sub_23EC2EA08();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23EB9F000, v7, v8, "Saved Config on disk seems corrupted fetching new Config.", v9, 2u);
    MEMORY[0x24265B940](v9, -1, -1);
  }

  return 0;
}

uint64_t sub_23EBD3F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  const char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v35[3];
  uint64_t v36;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23EC2E3CC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v35 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v35 - v12;
  v14 = type metadata accessor for UtilityServicesConfigurationsModel();
  v15 = (_QWORD *)(v0 + *(int *)(v14 + 24));
  v16 = v15[1];
  if (!v16
    || ((v17 = *v15 & 0xFFFFFFFFFFFFLL, (v16 & 0x2000000000000000) != 0) ? (v18 = HIBYTE(v16) & 0xF) : (v18 = v17),
        !v18))
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v19 = sub_23EC2E684();
    __swift_project_value_buffer(v19, (uint64_t)qword_25433FC80);
    v20 = sub_23EC2E66C();
    v21 = sub_23EC2EA14();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_23;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "No ETag value found. Fetching new config...";
    goto LABEL_22;
  }
  sub_23EBB2090(v0 + *(int *)(v14 + 20), (uint64_t)v3, &qword_25433F948);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_23EBA3038((uint64_t)v3, &qword_25433F948);
LABEL_18:
    if (qword_25433FAE8 != -1)
      swift_once();
    v33 = sub_23EC2E684();
    __swift_project_value_buffer(v33, (uint64_t)qword_25433FC80);
    v20 = sub_23EC2E66C();
    v21 = sub_23EC2EA14();
    if (!os_log_type_enabled(v20, v21))
      goto LABEL_23;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    v23 = "Data no longer valid, as config validUntil date is in the past. Fetching new config...";
LABEL_22:
    _os_log_impl(&dword_23EB9F000, v20, v21, v23, v22, 2u);
    MEMORY[0x24265B940](v22, -1, -1);
LABEL_23:

    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v3, v4);
  sub_23EC2E39C();
  v24 = sub_23EC2E360();
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v11, v4);
  if ((v24 & 1) == 0)
  {
    v25(v13, v4);
    goto LABEL_18;
  }
  if (qword_25433FAE8 != -1)
    swift_once();
  v26 = sub_23EC2E684();
  __swift_project_value_buffer(v26, (uint64_t)qword_25433FC80);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v13, v4);
  v27 = sub_23EC2E66C();
  v28 = sub_23EC2EA14();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v36 = v30;
    *(_DWORD *)v29 = 136315138;
    v35[1] = v29 + 4;
    v31 = sub_23EC0DB10();
    v35[2] = sub_23EBAE6D4(v31, v32, &v36);
    sub_23EC2EA68();
    swift_bridgeObjectRelease();
    v25(v8, v4);
    _os_log_impl(&dword_23EB9F000, v27, v28, "Config expiry in %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v30, -1, -1);
    MEMORY[0x24265B940](v29, -1, -1);

  }
  else
  {

    v25(v8, v4);
  }
  v25(v13, v4);
  return 0;
}

uint64_t sub_23EBD437C(_QWORD *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[288];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBD81E0();
  sub_23EC2EDE0();
  memcpy(v10, v3, 0x108uLL);
  v10[287] = 0;
  sub_23EBD83CC();
  sub_23EC2ED08();
  if (!v2)
  {
    type metadata accessor for UtilityServicesConfigurationsModel();
    v10[0] = 1;
    sub_23EC2E3CC();
    sub_23EBC0AD4(&qword_25433F938, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23EC2ECD8();
    v10[0] = 2;
    sub_23EC2ECB4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBD4530@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  void *v32;
  char v33;
  _BYTE v34[288];

  v26 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB70);
  v5 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UtilityServicesConfigurationsModel();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t)&v11[*(int *)(v9 + 20)];
  v13 = sub_23EC2E3CC();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v31 = v12;
  v14(v12, 1, 1, v13);
  v15 = &v11[*(int *)(v8 + 24)];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v29 = a1;
  v30 = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBD81E0();
  v16 = v7;
  v17 = v32;
  sub_23EC2EDD4();
  if (v17)
  {
    v19 = v31;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    sub_23EBA3038(v19, &qword_25433F948);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v32 = v11;
    v18 = (uint64_t)v27;
    v34[287] = 0;
    sub_23EBD8224();
    sub_23EC2ECA8();
    memcpy(v32, v34, 0x108uLL);
    v33 = 1;
    sub_23EBC0AD4(&qword_25433F940, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_23EC2EC78();
    sub_23EBD648C(v18, v31);
    v33 = 2;
    v20 = sub_23EC2EC54();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v28);
    v23 = (uint64_t *)v30;
    swift_bridgeObjectRelease();
    *v23 = v20;
    v23[1] = v22;
    v24 = (uint64_t)v32;
    sub_23EBD8388((uint64_t)v32, v26);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v29);
    return sub_23EBBCA34(v24);
  }
}

uint64_t sub_23EBD4868(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBDA5AC();
  sub_23EC2EDE0();
  v18 = *v3;
  *(_QWORD *)&v19 = *((_QWORD *)v3 + 2);
  v30 = 0;
  sub_23EBD6CEC();
  sub_23EC2ED08();
  if (!v2)
  {
    LOBYTE(v18) = 1;
    sub_23EC2ECE4();
    v9 = *(__int128 *)((char *)v3 + 184);
    v26 = *(__int128 *)((char *)v3 + 168);
    v27 = v9;
    v10 = *(__int128 *)((char *)v3 + 216);
    v28 = *(__int128 *)((char *)v3 + 200);
    v29 = v10;
    v11 = *(__int128 *)((char *)v3 + 120);
    v22 = *(__int128 *)((char *)v3 + 104);
    v23 = v11;
    v12 = *(__int128 *)((char *)v3 + 152);
    v24 = *(__int128 *)((char *)v3 + 136);
    v25 = v12;
    v13 = *(__int128 *)((char *)v3 + 56);
    v18 = *(__int128 *)((char *)v3 + 40);
    v14 = *(__int128 *)((char *)v3 + 72);
    v15 = *(__int128 *)((char *)v3 + 88);
    v19 = v13;
    v20 = v14;
    v21 = v15;
    v30 = 2;
    sub_23EBDA7D8();
    sub_23EC2ED08();
    v16 = *(__int128 *)((char *)v3 + 248);
    v18 = *(__int128 *)((char *)v3 + 232);
    v19 = v16;
    v30 = 3;
    sub_23EBDA81C();
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBD4A80()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E5564696C6176;
  if (*v0 != 1)
    v1 = 1734431845;
  if (*v0)
    return v1;
  else
    return 0x537974696C697475;
}

uint64_t sub_23EBD4AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBD8454(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBD4B08()
{
  sub_23EBD81E0();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBD4B30()
{
  sub_23EBD81E0();
  return sub_23EC2EE04();
}

uint64_t sub_23EBD4B58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23EBD4530(a1, a2);
}

uint64_t sub_23EBD4B6C(_QWORD *a1)
{
  return sub_23EBD437C(a1);
}

uint64_t sub_23EBD4B80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBD4BBC + 4 * byte_23EC330E8[*v0]))(0x72756769666E6F63, 0xED00006E6F697461);
}

uint64_t sub_23EBD4BBC()
{
  return 0x5255726576726573;
}

uint64_t sub_23EBD4BD8()
{
  return 0x68746150697061;
}

uint64_t sub_23EBD4BF0()
{
  return 0x5065636976726573;
}

uint64_t sub_23EBD4C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBD85C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBD4C34()
{
  sub_23EBDA5AC();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBD4C5C()
{
  sub_23EBDA5AC();
  return sub_23EC2EE04();
}

void *sub_23EBD4C84@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[264];

  result = sub_23EBD87C8(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x108uLL);
  return result;
}

uint64_t sub_23EBD4CD4(_QWORD *a1)
{
  return sub_23EBD4868(a1);
}

unint64_t sub_23EBD4CE8(unsigned __int8 a1)
{
  unint64_t result;

  result = 0xD000000000000010;
  if (a1 >= 2u)
    return 0xD000000000000011;
  return result;
}

uint64_t sub_23EBD4D40(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v12 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB88);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBD8410();
  sub_23EC2EDE0();
  LOBYTE(v14) = 0;
  sub_23EC2ECF0();
  if (!v4)
  {
    v14 = v12;
    v13 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBAFDF8(&qword_25433FB28, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
    v14 = a4;
    v13 = 2;
    sub_23EC2ECD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23EBD4EDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBD4F14 + 4 * byte_23EC330EC[a1]))(0xD000000000000012, 0x800000023EC379C0);
}

uint64_t sub_23EBD4F14()
{
  return 0x696C697455746567;
}

uint64_t sub_23EBD4F30()
{
  return 0x6C6974557473696CLL;
}

uint64_t sub_23EBD4F54()
{
  return 0x5468736572666572;
}

uint64_t sub_23EBD4F74(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_23EBD500C()
{
  return 0x736B616570;
}

uint64_t sub_23EBD5020(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBD5058 + 4 * byte_23EC330F8[a1]))(0xD000000000000012, 0x800000023EC379C0);
}

uint64_t sub_23EBD5058()
{
  return 0x696C697455746567;
}

uint64_t sub_23EBD5074()
{
  return 0x6C6974557473696CLL;
}

uint64_t sub_23EBD5098()
{
  return 0x5468736572666572;
}

uint64_t sub_23EBD50B8(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_23EBD5150()
{
  return 0x736B616570;
}

unint64_t sub_23EBD5164()
{
  unsigned __int8 *v0;

  return sub_23EBD4CE8(*v0);
}

uint64_t sub_23EBD516C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBD8CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBD5190()
{
  sub_23EBD8410();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBD51B8()
{
  sub_23EBD8410();
  return sub_23EC2EE04();
}

uint64_t sub_23EBD51E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23EBD8DF0(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_23EBD5210(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_23EBD4D40(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t sub_23EBD522C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_23EBD4EDC(*a1);
  v5 = v4;
  if (v3 == sub_23EBD4EDC(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23EBD52B4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23EC2EDB0();
  sub_23EBD4EDC(v1);
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBD5314()
{
  unsigned __int8 *v0;

  sub_23EBD4EDC(*v0);
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBD5354()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23EC2EDB0();
  sub_23EBD4EDC(v1);
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBD53B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBD9000();
  *a1 = result;
  return result;
}

uint64_t sub_23EBD53DC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23EBD4EDC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23EBD5404()
{
  unsigned __int8 *v0;

  return sub_23EBD5020(*v0);
}

uint64_t sub_23EBD540C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EBD9000();
  *a1 = result;
  return result;
}

void sub_23EBD5430(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_23EBD543C()
{
  sub_23EBD9A3C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBD5464()
{
  sub_23EBD9A3C();
  return sub_23EC2EE04();
}

uint64_t sub_23EBD548C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBA0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBD9A3C();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
    v8[12] = 4;
    sub_23EC2ECE4();
    v8[11] = 3;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECE4();
    v8[9] = 6;
    sub_23EC2ECE4();
    v8[8] = 7;
    sub_23EC2ECE4();
    v8[7] = 8;
    sub_23EC2ECE4();
    v8[6] = 9;
    sub_23EC2ECE4();
    v8[5] = 11;
    sub_23EC2ECE4();
    v8[4] = 10;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23EBD5730(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBA8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBDAE60();
  sub_23EC2EDE0();
  v14 = 0;
  sub_23EC2ECE4();
  if (!v5)
  {
    v13 = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

double sub_23EBD5858@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_23EBD9048(a1, v11);
  if (!v2)
  {
    v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    result = *(double *)&v12;
    v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_23EBD58B8(_QWORD *a1)
{
  return sub_23EBD548C(a1);
}

uint64_t sub_23EBD58CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7550726575737369;
  else
    return 0x614E726575737369;
}

uint64_t sub_23EBD5918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBDAB94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBD593C()
{
  sub_23EBDAE60();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBD5964()
{
  sub_23EBDAE60();
  return sub_23EC2EE04();
}

uint64_t sub_23EBD598C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23EBDACB4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_23EBD59B8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBD5730(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_23EBD59D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23EC2EDB0();
  swift_bridgeObjectRetain();
  sub_23EC2E744();
  v8 = sub_23EC2EDC8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23EC2ED38() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23EC2ED38() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23EBD5E5C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23EBD5B80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8488);
  v3 = sub_23EC2EB28();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_23EC2EDB0();
      sub_23EC2E744();
      result = sub_23EC2EDC8();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23EBD5E5C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23EBD5B80();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23EBD5FF4();
      goto LABEL_22;
    }
    sub_23EBD61A4();
  }
  v11 = *v4;
  sub_23EC2EDB0();
  sub_23EC2E744();
  result = sub_23EC2EDC8();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23EC2ED38(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23EC2ED5C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23EC2ED38();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_23EBD5FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8488);
  v2 = *v0;
  v3 = sub_23EC2EB1C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23EBD61A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8488);
  v3 = sub_23EC2EB28();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23EC2EDB0();
    swift_bridgeObjectRetain();
    sub_23EC2E744();
    result = sub_23EC2EDC8();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UtilityServicesConfigurationsModel()
{
  uint64_t result;

  result = qword_25433F7A8;
  if (!qword_25433F7A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23EBD648C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBD64D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23EC2E3CC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v40 - v10;
  v12 = sub_23EBD2DA4();
  if (v12)
  {
    v13 = v12;
    sub_23EBD0E24();
    v15 = v14;
    v17 = v16;
    v44[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    v44[0] = v13;
    sub_23EBD0AE4(v15, v17, (uint64_t)v44);
    swift_bridgeObjectRelease();
    sub_23EBA3038((uint64_t)v44, &qword_25433FBF0);
    if (qword_25433FAE8 != -1)
      swift_once();
    v23 = sub_23EC2E684();
    __swift_project_value_buffer(v23, (uint64_t)qword_25433FC80);
    v24 = sub_23EC2E66C();
    v25 = sub_23EC2EA14();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_23EB9F000, v24, v25, "New Config saved to disk.", v26, 2u);
      MEMORY[0x24265B940](v26, -1, -1);
    }

    v27 = type metadata accessor for UtilityServicesConfigurationsModel();
    sub_23EBB2090(a1 + *(int *)(v27 + 20), (uint64_t)v4, &qword_25433F948);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_23EC2E39C();
      sub_23EBA3038((uint64_t)v4, &qword_25433F948);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    }
    v28 = (uint64_t *)(a1 + *(int *)(v27 + 24));
    if (v28[1])
    {
      v29 = *v28;
      v30 = v28[1];
    }
    else
    {
      v29 = 0;
      v30 = 0xE000000000000000;
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = sub_23EC2E66C();
    v32 = sub_23EC2E9FC();
    v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      v34 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v44[0] = v42;
      *(_DWORD *)v34 = 136315394;
      v40[1] = v34 + 4;
      sub_23EBC0AD4(&qword_256DB8480, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
      v41 = v33;
      v35 = sub_23EC2ED20();
      v43 = sub_23EBAE6D4(v35, v36, v44);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();
      v37 = *(void (**)(char *, uint64_t))(v6 + 8);
      v37(v9, v5);
      *(_WORD *)(v34 + 12) = 2080;
      swift_bridgeObjectRetain();
      v43 = sub_23EBAE6D4(v29, v30, v44);
      sub_23EC2EA68();
      swift_bridgeObjectRelease_n();
      v38 = v42;
      swift_arrayDestroy();
      MEMORY[0x24265B940](v38, -1, -1);
      MEMORY[0x24265B940](v34, -1, -1);

      v37(v11, v5);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v39 = *(void (**)(char *, uint64_t))(v6 + 8);
      v39(v9, v5);
      v39(v11, v5);
    }
    return 1;
  }
  else
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v18 = sub_23EC2E684();
    __swift_project_value_buffer(v18, (uint64_t)qword_25433FC80);
    v19 = sub_23EC2E66C();
    v20 = sub_23EC2EA08();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_23EB9F000, v19, v20, "Unable to convert Config Model to dictionary format for saving to disk.", v21, 2u);
      MEMORY[0x24265B940](v21, -1, -1);
    }

    return 0;
  }
}

uint64_t sub_23EBD6AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23EC2E9C0();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23EBD59D4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23EBD6B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8488);
    v3 = sub_23EC2EB34();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_23EC2EDB0();
      swift_bridgeObjectRetain();
      sub_23EC2E744();
      result = sub_23EC2EDC8();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_23EC2ED38(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_23EC2ED38();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t sub_23EBD6CEC()
{
  unint64_t result;

  result = qword_25433F9D0;
  if (!qword_25433F9D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33270, &type metadata for UtilityServiceFrameworkConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433F9D0);
  }
  return result;
}

uint64_t destroy for InternalTAFSection()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s19HomeUtilityServices36UtilityServiceFrameworkConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UtilityServiceFrameworkConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UtilityServiceFrameworkConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalTAFSection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalTAFSection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityServiceFrameworkConfiguration()
{
  return &type metadata for UtilityServiceFrameworkConfiguration;
}

uint64_t *sub_23EBD6ED8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  char *v34;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = a2[6];
    a1[5] = a2[5];
    a1[6] = v8;
    v9 = a2[8];
    a1[7] = a2[7];
    a1[8] = v9;
    v10 = a2[10];
    a1[9] = a2[9];
    a1[10] = v10;
    v11 = a2[12];
    a1[11] = a2[11];
    a1[12] = v11;
    v12 = a2[14];
    a1[13] = a2[13];
    a1[14] = v12;
    v13 = a2[16];
    a1[15] = a2[15];
    a1[16] = v13;
    v14 = a2[18];
    a1[17] = a2[17];
    a1[18] = v14;
    v15 = a2[20];
    a1[19] = a2[19];
    a1[20] = v15;
    v16 = a2[22];
    a1[21] = a2[21];
    a1[22] = v16;
    v17 = a2[24];
    a1[23] = a2[23];
    a1[24] = v17;
    v18 = a2[26];
    a1[25] = a2[25];
    a1[26] = v18;
    v19 = a2[28];
    a1[27] = a2[27];
    a1[28] = v19;
    v20 = a2[30];
    a1[29] = a2[29];
    a1[30] = v20;
    v21 = a2[32];
    v22 = *(int *)(a3 + 20);
    v34 = (char *)a1 + v22;
    v23 = (char *)a2 + v22;
    a1[31] = a2[31];
    a1[32] = v21;
    v24 = sub_23EC2E3CC();
    v32 = *(_QWORD *)(v24 - 8);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v33(v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
      memcpy(v34, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v24);
    }
    v27 = *(int *)(a3 + 24);
    v28 = (uint64_t *)((char *)v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_23EBD7140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23EC2E3CC();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EBD7244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  void *v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v17;
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v19;
  v20 = *(_QWORD *)(a2 + 256);
  v21 = *(int *)(a3 + 20);
  v32 = (void *)(a1 + v21);
  v22 = (const void *)(a2 + v21);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v20;
  v23 = sub_23EC2E3CC();
  v30 = *(_QWORD *)(v23 - 8);
  v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v31(v22, 1, v23))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    memcpy(v32, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v32, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v23);
  }
  v25 = *(int *)(a3 + 24);
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23EBD7480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_23EC2E3CC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23EBD77D4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  memcpy(a1, a2, 0x108uLL);
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23EC2E3CC();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_23EBD78AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v20;
  swift_bridgeObjectRelease();
  v21 = *(int *)(a3 + 20);
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23EC2E3CC();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  v30 = *(int *)(a3 + 24);
  v31 = (_QWORD *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23EBD7AF0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBD7AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_23EBD7B7C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23EBD7B88(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_23EBD7C00()
{
  unint64_t v0;

  sub_23EBD7C7C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_23EBD7C7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25433F950)
  {
    sub_23EC2E3CC();
    v0 = sub_23EC2EA5C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25433F950);
  }
}

uint64_t destroy for InternalUtilityOrganization()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for InternalUtilityOrganization(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  v11 = a2[17];
  a1[16] = a2[16];
  a1[17] = v11;
  v12 = a2[19];
  a1[18] = a2[18];
  a1[19] = v12;
  v13 = a2[21];
  a1[20] = a2[20];
  a1[21] = v13;
  v14 = a2[23];
  a1[22] = a2[22];
  a1[23] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InternalUtilityOrganization(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  a1[19] = a2[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[20] = a2[20];
  a1[21] = a2[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy192_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

_QWORD *assignWithTake for InternalUtilityOrganization(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_bridgeObjectRelease();
  v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  swift_bridgeObjectRelease();
  v14 = a2[21];
  a1[20] = a2[20];
  a1[21] = v14;
  swift_bridgeObjectRelease();
  v15 = a2[23];
  a1[22] = a2[22];
  a1[23] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalUtilityOrganization(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalUtilityOrganization(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityServicesAPIPath()
{
  return &type metadata for UtilityServicesAPIPath;
}

unint64_t sub_23EBD81E0()
{
  unint64_t result;

  result = qword_25433FA08;
  if (!qword_25433FA08)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33670, &type metadata for UtilityServicesConfigurationsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA08);
  }
  return result;
}

unint64_t sub_23EBD8224()
{
  unint64_t result;

  result = qword_25433FA00;
  if (!qword_25433FA00)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33648, &type metadata for UtilityServicesConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433FA00);
  }
  return result;
}

uint64_t sub_23EBD8268(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23EBD8388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UtilityServicesConfigurationsModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23EBD83CC()
{
  unint64_t result;

  result = qword_25433F9F8;
  if (!qword_25433F9F8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33620, &type metadata for UtilityServicesConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433F9F8);
  }
  return result;
}

unint64_t sub_23EBD8410()
{
  unint64_t result;

  result = qword_25433F9B8;
  if (!qword_25433F9B8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC335D0, &type metadata for UtilityServiceFrameworkConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9B8);
  }
  return result;
}

uint64_t sub_23EBD8454(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x537974696C697475 && a2 == 0xEF73656369767265;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E5564696C6176 && a2 == 0xEA00000000006C69 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1734431845 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23EBD85C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5255726576726573 && a2 == 0xE90000000000004CLL || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68746150697061 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5065636976726573 && a2 == 0xEC00000079786F72)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void *sub_23EBD87C8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[33];
  unsigned __int8 v31;
  _BYTE v32[7];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _DWORD v95[5];
  uint64_t v96;

  v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB68);
  v5 = *(_QWORD *)(v96 - 8);
  MEMORY[0x24BDAC7A8](v96);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBDA5AC();
  sub_23EC2EDD4();
  if (v2)
    return (void *)__swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v8 = v5;
  v28 = a2;
  LOBYTE(v30[0]) = 0;
  sub_23EBDA5F0();
  sub_23EC2ECA8();
  v9 = v31;
  v10 = v33;
  v11 = v34;
  v31 = 1;
  swift_bridgeObjectRetain();
  v29 = v10;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v27 = v13;
  v23 = v12;
  v24 = v9;
  v26 = v11;
  v70 = 2;
  sub_23EBDA634();
  swift_bridgeObjectRetain();
  v14 = v96;
  v25 = 0;
  sub_23EC2ECA8();
  v66 = v79;
  v67 = v80;
  v68 = v81;
  v69 = v82;
  v62 = v75;
  v63 = v76;
  v64 = v77;
  v65 = v78;
  v58 = v71;
  v59 = v72;
  v60 = v73;
  v61 = v74;
  v91 = v79;
  v92 = v80;
  v93 = v81;
  v94 = v82;
  v87 = v75;
  v88 = v76;
  v89 = v77;
  v90 = v78;
  v83 = v71;
  v84 = v72;
  v85 = v73;
  v86 = v74;
  v53 = 3;
  sub_23EBBC884((uint64_t)&v58);
  sub_23EBDA678();
  sub_23EC2ECA8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v14);
  *(_OWORD *)&v30[21] = v66;
  *(_OWORD *)&v30[23] = v67;
  *(_OWORD *)&v30[25] = v68;
  *(_OWORD *)&v30[27] = v69;
  *(_OWORD *)&v30[13] = v62;
  *(_OWORD *)&v30[15] = v63;
  *(_OWORD *)&v30[17] = v64;
  *(_OWORD *)&v30[19] = v65;
  *(_OWORD *)&v30[5] = v58;
  *(_OWORD *)&v30[7] = v59;
  *(_OWORD *)&v30[9] = v60;
  *(_OWORD *)&v30[11] = v61;
  v15 = v29;
  v96 = v54;
  v25 = v55;
  v21 = v57;
  v22 = v56;
  v16 = v24;
  LOBYTE(v30[0]) = v24;
  v17 = v26;
  v18 = v27;
  v30[1] = v29;
  v30[2] = v26;
  v19 = v23;
  v30[3] = v23;
  v30[4] = v27;
  v30[29] = v54;
  v30[30] = v55;
  v30[31] = v56;
  v30[32] = v57;
  sub_23EBDA6BC((uint64_t)v30);
  sub_23EBBC95C((uint64_t)&v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v45 = v91;
  v46 = v92;
  v47 = v93;
  v48 = v94;
  v41 = v87;
  v42 = v88;
  v43 = v89;
  v44 = v90;
  v37 = v83;
  v38 = v84;
  v39 = v85;
  v31 = v16;
  *(_DWORD *)v32 = v95[0];
  *(_DWORD *)&v32[3] = *(_DWORD *)((char *)v95 + 3);
  v33 = v15;
  v34 = v17;
  v35 = v19;
  v36 = v18;
  v40 = v86;
  v49 = v96;
  v50 = v25;
  v51 = v22;
  v52 = v21;
  sub_23EBD8268((uint64_t)&v31);
  return memcpy(v28, v30, 0x108uLL);
}

uint64_t sub_23EBD8CB4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023EC395D0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023EC395F0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC39610)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23EBD8DF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB60);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EBD8410();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v7) = sub_23EC2EC90();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    v10 = 1;
    sub_23EBAFDF8((unint64_t *)&unk_25433FB30, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    v10 = 2;
    swift_bridgeObjectRetain();
    sub_23EC2EC78();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7 & 1;
}

uint64_t sub_23EBD9000()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 0xC)
    return 12;
  else
    return v0;
}

uint64_t sub_23EBD9048@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  __int128 v45;
  unsigned __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  unsigned __int128 v87;
  _QWORD v88[25];
  char v89;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v75 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_23EBD9A3C();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v75);
  LOBYTE(v88[0]) = 0;
  v10 = sub_23EC2EC84();
  v12 = v11;
  LOBYTE(v88[0]) = 1;
  swift_bridgeObjectRetain();
  v68 = sub_23EC2EC84();
  v69 = v10;
  LOBYTE(v88[0]) = 2;
  v14 = v13;
  swift_bridgeObjectRetain();
  v15 = sub_23EC2EC84();
  v74 = v14;
  v67 = v15;
  LOBYTE(v88[0]) = 4;
  v17 = v16;
  swift_bridgeObjectRetain();
  v18 = sub_23EC2EC84();
  v73 = v17;
  v66 = v18;
  LOBYTE(v88[0]) = 3;
  v20 = v19;
  swift_bridgeObjectRetain();
  v21 = sub_23EC2EC84();
  v72 = v20;
  v65 = v21;
  LOBYTE(v88[0]) = 5;
  v23 = v22;
  swift_bridgeObjectRetain();
  v24 = sub_23EC2EC84();
  v71 = v23;
  v64 = v24;
  LOBYTE(v88[0]) = 6;
  v26 = v25;
  swift_bridgeObjectRetain();
  v27 = sub_23EC2EC84();
  v70 = v26;
  v63 = v27;
  LOBYTE(v88[0]) = 7;
  v29 = v28;
  swift_bridgeObjectRetain();
  v59 = sub_23EC2EC84();
  v61 = v29;
  LOBYTE(v88[0]) = 8;
  v31 = v30;
  swift_bridgeObjectRetain();
  v32 = sub_23EC2EC84();
  v62 = v33;
  v56 = v32;
  v58 = v31;
  LOBYTE(v88[0]) = 9;
  swift_bridgeObjectRetain();
  v57 = 0;
  v55 = sub_23EC2EC84();
  v60 = v34;
  LOBYTE(v88[0]) = 11;
  swift_bridgeObjectRetain();
  v54 = sub_23EC2EC84();
  v36 = v35;
  v89 = 10;
  swift_bridgeObjectRetain();
  v37 = sub_23EC2EC84();
  v53 = v38;
  v39 = v37;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&v76 = v69;
  *((_QWORD *)&v76 + 1) = v12;
  *(_QWORD *)&v77 = v68;
  *((_QWORD *)&v77 + 1) = v74;
  *(_QWORD *)&v78 = v67;
  *((_QWORD *)&v78 + 1) = v73;
  *(_QWORD *)&v79 = v66;
  *((_QWORD *)&v79 + 1) = v72;
  *(_QWORD *)&v80 = v65;
  *((_QWORD *)&v80 + 1) = v71;
  *(_QWORD *)&v81 = v64;
  *((_QWORD *)&v81 + 1) = v70;
  *(_QWORD *)&v82 = v63;
  *((_QWORD *)&v82 + 1) = v61;
  *(_QWORD *)&v83 = v59;
  *((_QWORD *)&v83 + 1) = v58;
  *(_QWORD *)&v84 = v56;
  *((_QWORD *)&v84 + 1) = v62;
  *(_QWORD *)&v85 = v55;
  *((_QWORD *)&v85 + 1) = v60;
  *(_QWORD *)&v86 = v54;
  *((_QWORD *)&v86 + 1) = v36;
  v52 = v39;
  v87 = __PAIR128__(v53, v39);
  sub_23EBBC884((uint64_t)&v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v70;
  swift_bridgeObjectRelease();
  v41 = v61;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = v62;
  swift_bridgeObjectRelease();
  v43 = v60;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v75);
  v88[0] = v69;
  v88[1] = v12;
  v88[2] = v68;
  v88[3] = v74;
  v88[4] = v67;
  v88[5] = v73;
  v88[6] = v66;
  v88[7] = v72;
  v88[8] = v65;
  v88[9] = v71;
  v88[10] = v64;
  v88[11] = v40;
  v88[12] = v63;
  v88[13] = v41;
  v88[14] = v59;
  v88[15] = v58;
  v88[16] = v56;
  v88[17] = v42;
  v88[18] = v55;
  v88[19] = v43;
  v88[20] = v54;
  v88[21] = v36;
  v88[22] = v52;
  v88[23] = v53;
  result = sub_23EBBC95C((uint64_t)v88);
  v45 = v85;
  a2[8] = v84;
  a2[9] = v45;
  v46 = v87;
  a2[10] = v86;
  a2[11] = v46;
  v47 = v81;
  a2[4] = v80;
  a2[5] = v47;
  v48 = v83;
  a2[6] = v82;
  a2[7] = v48;
  v49 = v77;
  *a2 = v76;
  a2[1] = v49;
  v50 = v79;
  a2[2] = v78;
  a2[3] = v50;
  return result;
}

unint64_t sub_23EBD9A3C()
{
  unint64_t result;

  result = qword_25433FA38;
  if (!qword_25433FA38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33580, &type metadata for UtilityServicesAPIPath.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA38);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UtilityServicesAPIPath.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityServicesAPIPath.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_23EBD9B5C + 4 * byte_23EC33109[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_23EBD9B90 + 4 * byte_23EC33104[v4]))();
}

uint64_t sub_23EBD9B90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBD9B98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBD9BA0);
  return result;
}

uint64_t sub_23EBD9BAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBD9BB4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_23EBD9BB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBD9BC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityServicesAPIPath.CodingKeys()
{
  return &type metadata for UtilityServicesAPIPath.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilityServiceFrameworkConfiguration.CodingKeys()
{
  return &type metadata for UtilityServiceFrameworkConfiguration.CodingKeys;
}

uint64_t _s19HomeUtilityServices36UtilityServiceFrameworkConfigurationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBD9C3C + 4 * byte_23EC33113[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBD9C70 + 4 * byte_23EC3310E[v4]))();
}

uint64_t sub_23EBD9C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBD9C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBD9C80);
  return result;
}

uint64_t sub_23EBD9C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBD9C94);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBD9C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBD9CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityServicesConfigurationsModel.CodingKeys()
{
  return &type metadata for UtilityServicesConfigurationsModel.CodingKeys;
}

uint64_t destroy for UtilityServicesConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UtilityServicesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  v13 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v13;
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v14;
  v15 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v15;
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  v18 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UtilityServicesConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy264_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for UtilityServicesConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityServicesConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 264))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityServicesConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 264) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityServicesConfiguration()
{
  return &type metadata for UtilityServicesConfiguration;
}

unint64_t sub_23EBDA328()
{
  unint64_t result;

  result = qword_256DB8498;
  if (!qword_256DB8498)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC333B0, &type metadata for UtilityServicesConfigurationsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8498);
  }
  return result;
}

unint64_t sub_23EBDA370()
{
  unint64_t result;

  result = qword_256DB84A0;
  if (!qword_256DB84A0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33468, &type metadata for UtilityServiceFrameworkConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB84A0);
  }
  return result;
}

unint64_t sub_23EBDA3B8()
{
  unint64_t result;

  result = qword_256DB84A8;
  if (!qword_256DB84A8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33558, &type metadata for UtilityServicesAPIPath.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB84A8);
  }
  return result;
}

unint64_t sub_23EBDA400()
{
  unint64_t result;

  result = qword_25433FA48;
  if (!qword_25433FA48)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33490, &type metadata for UtilityServicesAPIPath.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA48);
  }
  return result;
}

unint64_t sub_23EBDA448()
{
  unint64_t result;

  result = qword_25433FA40;
  if (!qword_25433FA40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC334B8, &type metadata for UtilityServicesAPIPath.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA40);
  }
  return result;
}

unint64_t sub_23EBDA490()
{
  unint64_t result;

  result = qword_25433F9C8;
  if (!qword_25433F9C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC333D8, &type metadata for UtilityServiceFrameworkConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9C8);
  }
  return result;
}

unint64_t sub_23EBDA4D8()
{
  unint64_t result;

  result = qword_25433F9C0;
  if (!qword_25433F9C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33400, &type metadata for UtilityServiceFrameworkConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9C0);
  }
  return result;
}

unint64_t sub_23EBDA520()
{
  unint64_t result;

  result = qword_25433FA18;
  if (!qword_25433FA18)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33320, &type metadata for UtilityServicesConfigurationsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA18);
  }
  return result;
}

unint64_t sub_23EBDA568()
{
  unint64_t result;

  result = qword_25433FA10;
  if (!qword_25433FA10)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33348, &type metadata for UtilityServicesConfigurationsModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA10);
  }
  return result;
}

unint64_t sub_23EBDA5AC()
{
  unint64_t result;

  result = qword_25433F9E0;
  if (!qword_25433F9E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC337E4, &type metadata for UtilityServicesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9E0);
  }
  return result;
}

unint64_t sub_23EBDA5F0()
{
  unint64_t result;

  result = qword_25433F9D8;
  if (!qword_25433F9D8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33248, &type metadata for UtilityServiceFrameworkConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433F9D8);
  }
  return result;
}

unint64_t sub_23EBDA634()
{
  unint64_t result;

  result = qword_25433FA58;
  if (!qword_25433FA58)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33220, &type metadata for UtilityServicesAPIPath);
    atomic_store(result, (unint64_t *)&qword_25433FA58);
  }
  return result;
}

unint64_t sub_23EBDA678()
{
  unint64_t result;

  result = qword_25433FA90;
  if (!qword_25433FA90)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC337BC, &type metadata for ServiceProxyConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433FA90);
  }
  return result;
}

uint64_t sub_23EBDA6BC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_23EBDA7D8()
{
  unint64_t result;

  result = qword_25433FA50;
  if (!qword_25433FA50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC331F8, &type metadata for UtilityServicesAPIPath);
    atomic_store(result, (unint64_t *)&qword_25433FA50);
  }
  return result;
}

unint64_t sub_23EBDA81C()
{
  unint64_t result;

  result = qword_25433FA88;
  if (!qword_25433FA88)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33794, &type metadata for ServiceProxyConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433FA88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UtilityServicesConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EBDA8AC + 4 * byte_23EC3311D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EBDA8E0 + 4 * byte_23EC33118[v4]))();
}

uint64_t sub_23EBDA8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBDA8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBDA8F0);
  return result;
}

uint64_t sub_23EBDA8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBDA904);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EBDA908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBDA910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityServicesConfiguration.CodingKeys()
{
  return &type metadata for UtilityServicesConfiguration.CodingKeys;
}

_QWORD *initializeWithCopy for TAFAuthorizationEndpoints(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TAFAuthorizationEndpoints(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for TAFAuthorizationEndpoints(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TAFAuthorizationEndpoints(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TAFAuthorizationEndpoints(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceProxyConfiguration()
{
  return &type metadata for ServiceProxyConfiguration;
}

unint64_t sub_23EBDAAC0()
{
  unint64_t result;

  result = qword_256DB84B0;
  if (!qword_256DB84B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3376C, &type metadata for UtilityServicesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB84B0);
  }
  return result;
}

unint64_t sub_23EBDAB08()
{
  unint64_t result;

  result = qword_25433F9F0;
  if (!qword_25433F9F0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC336DC, &type metadata for UtilityServicesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9F0);
  }
  return result;
}

unint64_t sub_23EBDAB50()
{
  unint64_t result;

  result = qword_25433F9E8;
  if (!qword_25433F9E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33704, &type metadata for UtilityServicesConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9E8);
  }
  return result;
}

uint64_t sub_23EBDAB94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x614E726575737369 && a2 == 0xEA0000000000656DLL;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7550726575737369 && a2 == 0xEF79654B63696C62)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EBDACB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBDAE60();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_23EC2EC84();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_23EC2EC84();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_23EBDAE60()
{
  unint64_t result;

  result = qword_25433FA70;
  if (!qword_25433FA70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC338EC, &type metadata for ServiceProxyConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA70);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServiceProxyConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EBDAEF0 + 4 * byte_23EC33127[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EBDAF24 + 4 * byte_23EC33122[v4]))();
}

uint64_t sub_23EBDAF24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBDAF2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBDAF34);
  return result;
}

uint64_t sub_23EBDAF40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBDAF48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EBDAF4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBDAF54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServiceProxyConfiguration.CodingKeys()
{
  return &type metadata for ServiceProxyConfiguration.CodingKeys;
}

unint64_t sub_23EBDAF74()
{
  unint64_t result;

  result = qword_256DB84B8;
  if (!qword_256DB84B8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC338C4, &type metadata for ServiceProxyConfiguration.CodingKeys);
    atomic_store(result, &qword_256DB84B8);
  }
  return result;
}

unint64_t sub_23EBDAFBC()
{
  unint64_t result;

  result = qword_25433FA80;
  if (!qword_25433FA80)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33834, &type metadata for ServiceProxyConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA80);
  }
  return result;
}

unint64_t sub_23EBDB004()
{
  unint64_t result;

  result = qword_25433FA78;
  if (!qword_25433FA78)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3385C, &type metadata for ServiceProxyConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433FA78);
  }
  return result;
}

uint64_t sub_23EBDB048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[9] = swift_task_alloc();
  v8 = sub_23EC2DFA0();
  v7[10] = v8;
  v7[11] = *(_QWORD *)(v8 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v7[16] = swift_task_alloc();
  v9 = sub_23EC2E264();
  v7[17] = v9;
  v7[18] = *(_QWORD *)(v9 - 8);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBDB15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 128), &qword_25433F930);
    if (qword_256DB71F8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7738);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for Service Location API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 80));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 32))(v9, *(_QWORD *)(v0 + 128), v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
    sub_23EC2DF58();
    sub_23EC0A4E0(v14);
    v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    *(_QWORD *)(v0 + 168) = v18;
    v18(v16, v17);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v19(v13, v14, v17);
    sub_23EC2DF70();
    v18(v14, v17);
    v19(v21, v13, v17);
    sub_23EC2DF70();
    v18(v13, v17);
    sub_23EC2DF40();
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E38 + dword_256DB7E38);
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v20;
    *v20 = v0;
    v20[1] = sub_23EBDB480;
    return v22(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_23EBDB480()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBDB4EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71E8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign service location request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 80);

    v9(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
    v14 = 1;
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 160);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 16), v3, v1);
    sub_23EC2DF94();
    v16(v19, v1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
    v14 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), v14, 1, *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDB72C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 80));
  sub_23EBA3038(*(_QWORD *)(v0 + 72), &qword_25433F918);
  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign service location request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 80);

  v6(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDB8D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  swift_bridgeObjectRetain();
  return v1;
}

id UtilitySubscriptionService.configuration.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration);
}

id UtilitySubscriptionService.__allocating_init(configuration:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  objc_super v17;

  v2 = v1;
  v4 = sub_23EC2E3F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_allocWithZone(v2);
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID];
  v10 = v8;
  sub_23EC2E3E4();
  v11 = sub_23EC2E3D8();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *v9 = v11;
  v9[1] = v13;
  *(_QWORD *)&v10[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration] = a1;
  v14 = a1;

  v17.receiver = v10;
  v17.super_class = v2;
  v15 = objc_msgSendSuper2(&v17, sel_init);

  return v15;
}

id UtilitySubscriptionService.init(configuration:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  objc_class *v13;
  id v14;
  objc_super v16;

  v3 = sub_23EC2E3F0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)&v1[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID];
  v8 = v1;
  sub_23EC2E3E4();
  v9 = sub_23EC2E3D8();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *v7 = v9;
  v7[1] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration] = a1;
  v12 = a1;

  v13 = (objc_class *)type metadata accessor for UtilitySubscriptionService();
  v16.receiver = v8;
  v16.super_class = v13;
  v14 = objc_msgSendSuper2(&v16, sel_init);

  return v14;
}

uint64_t type metadata accessor for UtilitySubscriptionService()
{
  return objc_opt_self();
}

uint64_t UtilitySubscriptionService.__allocating_init(utilityID:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = a2;
  v3 = sub_23EC2E3F0();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBDBCA4()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  id v9;
  _QWORD *v10;

  if (qword_25433FAC0 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_25433FC38);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Initializing UtilitySubscriptionService object using UtilityID!!", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }

  v5 = sub_23EC2E66C();
  v6 = sub_23EC2EA08();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_23EB9F000, v5, v6, "This is expensive, consider reusing Object.", v7, 2u);
    MEMORY[0x24265B940](v7, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
  v9 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v8);
  v0[9] = (uint64_t)v9;

  v10 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = sub_23EBDBE68;
  return sub_23EBF9FB0(v0[4], v0[5], (uint64_t)v9);
}

uint64_t sub_23EBDBE68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(void **)(v4 + 72);
  if (v1)
  {

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();

    *(_QWORD *)(v4 + 88) = a1;
    return swift_task_switch();
  }
}

uint64_t sub_23EBDBF10()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  v1 = *(void **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = (objc_class *)type metadata accessor for UtilitySubscriptionService();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID];
  v8 = v6;
  sub_23EC2E3E4();
  v9 = sub_23EC2E3D8();
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *v7 = v9;
  v7[1] = v11;
  *(_QWORD *)&v8[OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration] = v1;
  v12 = v1;

  *(_QWORD *)(v0 + 16) = v8;
  *(_QWORD *)(v0 + 24) = v5;
  v13 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);

  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

uint64_t sub_23EBDBFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBDC010()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID);
  v4 = *v3;
  v5 = v3[1];
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB9328 + dword_256DB9328);
  v6 = (_QWORD *)swift_task_alloc();
  v0[5] = v6;
  *v6 = v0;
  v6[1] = sub_23EBDC0A0;
  return v8(v2, v0[2], v0[3], v4, v5);
}

uint64_t sub_23EBDC0A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_23EBDC22C(int a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v7;
  id v8;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = sub_23EC2E720();
  v7 = a2;
  v8 = a4;
  return swift_task_switch();
}

uint64_t sub_23EBDC2AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration);
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID);
  v4 = *v3;
  v5 = v3[1];
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB9328 + dword_256DB9328);
  v6 = (_QWORD *)swift_task_alloc();
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_23EBDC340;
  return v8(v2, v0[5], v0[2], v4, v5);
}

uint64_t sub_23EBDC340()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(void **)(v2 + 24);

  swift_bridgeObjectRelease();
  type metadata accessor for TAFVerificationFactor();
  v5 = (void *)sub_23EC2E924();
  swift_bridgeObjectRelease();
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v2 + 32);
  ((void (**)(_QWORD, void *, _QWORD))v6)[2](v6, v5, 0);

  _Block_release(v6);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBDC418()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 56);
  v2 = *(void **)(v0 + 24);

  swift_bridgeObjectRelease();
  v3 = (void *)sub_23EC2E1C8();

  v4 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v4)[2](v4, 0, v3);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDC49C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBDC4B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[4];
  v2 = (uint64_t *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v4 = *v2;
  v3 = v2[1];
  v0[5] = v3;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8E40
                                                                                     + dword_256DB8E40);
  v6 = *v5;
  v7 = v5[1];
  v0[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  v0[7] = v8;
  *v8 = v0;
  v8[1] = sub_23EBDC588;
  return v10(v0[2], v0[3], v4, v3, v6, v7);
}

uint64_t sub_23EBDC588(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 1);
}

uint64_t sub_23EBDC61C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23EBDC794(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  id v8;
  id v9;
  id v10;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = a1;
  v9 = a2;
  v10 = a4;
  return swift_task_switch();
}

uint64_t sub_23EBDC7FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[4];
  v2 = (uint64_t *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v4 = *v2;
  v3 = v2[1];
  v0[6] = v3;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8E40
                                                                                     + dword_256DB8E40);
  v6 = *v5;
  v7 = v5[1];
  v0[7] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  v0[8] = v8;
  *v8 = v0;
  v8[1] = sub_23EBDC8CC;
  return v10(v0[2], v0[3], v4, v3, v6, v7);
}

uint64_t sub_23EBDC8CC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = *v2;
  *(_QWORD *)(v4 + 72) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v7 = *(void **)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 40);
  v9 = *(void **)(v4 + 16);
  v8 = *(void **)(v4 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, a1 & 1, 0);
  _Block_release(*(const void **)(v4 + 40));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_23EBDC9A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(void **)(v0 + 72);
  v3 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v5 = *(void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (void *)sub_23EC2E1C8();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v6);

  _Block_release(*(const void **)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDCA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EBDCA54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[7];
  v2 = (uint64_t *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v4 = *v2;
  v3 = v2[1];
  v0[8] = v3;
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_sessionID);
  v6 = *v5;
  v0[9] = v5[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[10] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = sub_23EBDCB18;
  return sub_23EC14BA8(v0[2], v0[3], v0[4], v0[5], v0[6], v4, v3, v6);
}

uint64_t sub_23EBDCB18()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBDCB98()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDCBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EBDCBF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
  {
    v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v0 + 40)
                               + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                   + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
    v4 = *v3;
    v5 = v3[1];
    *(_QWORD *)(v0 + 48) = v5;
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8F40
                                                                                                + dword_256DB8F40);
    swift_bridgeObjectRetain();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v6;
    *v6 = v0;
    v6[1] = sub_23EBDCDD0;
    return v12(*(_QWORD *)(v0 + 16), v1, 0, 0, v4, v5, *(_QWORD *)(v0 + 32));
  }
  else
  {
    if (qword_256DB71F0 != -1)
      swift_once();
    v8 = sub_23EC2E684();
    __swift_project_value_buffer(v8, (uint64_t)qword_256DC7720);
    v9 = sub_23EC2E66C();
    v10 = sub_23EC2EA08();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_23EB9F000, v9, v10, "Attempting to generate token with a empty authorization Token!!!", v11, 2u);
      MEMORY[0x24265B940](v11, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EBDCDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EBDCE58()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDCFC4(int a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v7 = sub_23EC2E780();
  v9 = v8;
  v4[5] = v8;
  v10 = a2;
  v11 = a4;
  v12 = (_QWORD *)swift_task_alloc();
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_23EBDD078;
  v12[4] = v10;
  v12[5] = v11;
  v12[2] = v7;
  v12[3] = v9;
  return swift_task_switch();
}

uint64_t sub_23EBDD078(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v3 = v1;
  v6 = *(void **)(*v2 + 16);
  v5 = *(void **)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  if (v3)
  {
    v9 = (void *)sub_23EC2E1C8();

    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](*(_QWORD *)(v7 + 32), a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_23EBDD148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EBDD164()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(*(_QWORD *)(v0[5] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB88B0 + dword_256DB88B0);
  v2 = *v1;
  v3 = v1[1];
  v0[6] = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_23EBDD20C;
  return v6(v0[2], v0[3], v2, v3, v0[4]);
}

uint64_t sub_23EBDD20C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EBDD294()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDD400(int a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  id v8;
  id v9;

  v4[2] = a2;
  v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  v4[5] = sub_23EC2E780();
  v4[6] = v7;
  v8 = a2;
  v9 = a4;
  return swift_task_switch();
}

uint64_t sub_23EBDD46C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(*(_QWORD *)(v0[3] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB88B0 + dword_256DB88B0);
  v2 = *v1;
  v3 = v1[1];
  v0[7] = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = sub_23EBDD514;
  return v6(v0[5], v0[6], v2, v3, v0[2]);
}

uint64_t sub_23EBDD514()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v5 = *(void **)(v2 + 16);
  v4 = *(void **)(v2 + 24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  type metadata accessor for UtilityServiceLocation();
  v6 = (void *)sub_23EC2E924();
  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v2 + 32);
  ((void (**)(_QWORD, void *, _QWORD))v7)[2](v7, v6, 0);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EBDD5FC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);

  v1 = *(void **)(v0 + 72);
  v3 = *(void **)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v4 = (void *)sub_23EC2E1C8();

  v5 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  ((void (**)(_QWORD, _QWORD, void *))v5)[2](v5, 0, v4);

  _Block_release(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDD684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EBDD6A4()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(*(_QWORD *)(v0[7] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                             + dword_256DB7E88);
  v2 = *v1;
  v3 = v1[1];
  v0[8] = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[9] = v4;
  *v4 = v0;
  v4[1] = sub_23EBDD750;
  return v6(v0[2], v0[3], v0[4], v0[5], v2, v3, v0[6]);
}

uint64_t sub_23EBDD750(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EBDD7D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBDD958(int a1, int a2, void *a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  v5[2] = a3;
  v5[3] = a5;
  v5[4] = _Block_copy(aBlock);
  v5[5] = sub_23EC2E780();
  v5[6] = v8;
  v5[7] = sub_23EC2E780();
  v5[8] = v9;
  v10 = a3;
  v11 = a5;
  return swift_task_switch();
}

uint64_t sub_23EBDD9D4()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(*(_QWORD *)(v0[3] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                             + dword_256DB7E88);
  v2 = *v1;
  v3 = v1[1];
  v0[9] = v3;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[10] = v4;
  *v4 = v0;
  v4[1] = sub_23EBDDA80;
  return v6(v0[5], v0[6], v0[7], v0[8], v2, v3, v0[2]);
}

uint64_t sub_23EBDDA80(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;

  v4 = *v2;
  *(_QWORD *)(v4 + 88) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v7 = *(void **)(v4 + 24);
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  v8 = *(void **)(v4 + 16);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *, _QWORD))v6)[2](v6, a1, 0);
  _Block_release(v6);

  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_23EBDDB54()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void **)(v0 + 88);
  v3 = *(void **)(v0 + 24);
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 32);
  v4 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_23EC2E1C8();

  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v5);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static UtilitySubscriptionService.renewAccessToken(refreshToken:utilityID:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8518 + dword_256DB8518);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_23EBB2154;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_23EBDDDC8(int a1, int a2, void *a3, void *aBlock)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, id);

  v4[2] = a3;
  v4[3] = _Block_copy(aBlock);
  v6 = sub_23EC2E780();
  v8 = v7;
  v4[4] = v7;
  v9 = sub_23EC2E780();
  v11 = v10;
  v4[5] = v10;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, id))((char *)&dword_256DB8518 + dword_256DB8518);
  v12 = a3;
  v13 = (_QWORD *)swift_task_alloc();
  v4[6] = v13;
  *v13 = v4;
  v13[1] = sub_23EBDDE98;
  return v15(v6, v8, v9, v11, v12);
}

uint64_t sub_23EBDDE98(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  if (v3)
  {
    v8 = (void *)sub_23EC2E1C8();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 24), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t static UtilitySubscriptionService.fetchSubscriptionDetails(accessToken:subscriptionID:utilityID:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E78
                                                                                              + dword_256DB7E78);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_23EBA608C;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23EBDE168(int a1, int a2, int a3, void *a4, void *aBlock)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id);

  v5[2] = a4;
  v5[3] = _Block_copy(aBlock);
  v7 = sub_23EC2E780();
  v9 = v8;
  v5[4] = v8;
  v10 = sub_23EC2E780();
  v12 = v11;
  v5[5] = v11;
  v13 = sub_23EC2E780();
  v15 = v14;
  v5[6] = v14;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))((char *)&dword_256DB7E78
                                                                                         + dword_256DB7E78);
  v16 = a4;
  v17 = (_QWORD *)swift_task_alloc();
  v5[7] = v17;
  *v17 = v5;
  v17[1] = sub_23EBDE260;
  return v19(v7, v9, v10, v12, v13, v15, v16);
}

uint64_t sub_23EBDE260(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  if (v3)
  {
    v8 = (void *)sub_23EC2E1C8();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 24), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t static UtilitySubscriptionService.renewAuthorizationToken(utilityID:authorizationToken:accessToken:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8360
                                                                                              + dword_256DB8360);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_23EBCFE84;
  return v17(a1, a2, a5, a6, a3, a4, a7);
}

uint64_t sub_23EBDE540(int a1, int a2, int a3, void *a4, void *aBlock)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id);

  v5[2] = a4;
  v5[3] = _Block_copy(aBlock);
  v7 = sub_23EC2E780();
  v9 = v8;
  v5[4] = v8;
  v10 = sub_23EC2E780();
  v12 = v11;
  v5[5] = v11;
  v13 = sub_23EC2E780();
  v15 = v14;
  v5[6] = v14;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))((char *)&dword_256DB8360
                                                                                         + dword_256DB8360);
  v16 = a4;
  v17 = (_QWORD *)swift_task_alloc();
  v5[7] = v17;
  *v17 = v5;
  v17[1] = sub_23EBDE638;
  return v19(v7, v9, v13, v15, v10, v12, v16);
}

uint64_t sub_23EBDE638()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    v6 = sub_23EC2E1C8();

    v7 = 0;
    v8 = (void *)v6;
  }
  else
  {
    v7 = sub_23EC2E774();
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = (void *)v7;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilitySubscriptionService.revokeSubscription(authorizationToken:subscriptionID:utilityID:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E68
                                                                                              + dword_256DB7E68);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_23EBDE7D4;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23EBDE7D4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    v5 = 0;
  else
    v5 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_23EBDE980(int a1, int a2, int a3, void *a4, void *aBlock)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id);

  v5[2] = a4;
  v5[3] = _Block_copy(aBlock);
  v7 = sub_23EC2E780();
  v9 = v8;
  v5[4] = v8;
  v10 = sub_23EC2E780();
  v12 = v11;
  v5[5] = v11;
  v13 = sub_23EC2E780();
  v15 = v14;
  v5[6] = v14;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, id))((char *)&dword_256DB7E68
                                                                                         + dword_256DB7E68);
  v16 = a4;
  v17 = (_QWORD *)swift_task_alloc();
  v5[7] = v17;
  *v17 = v5;
  v17[1] = sub_23EBDEA78;
  return v19(v7, v9, v10, v12, v13, v15, v16);
}

uint64_t sub_23EBDEA78(char a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 24);
  if (v1)
  {
    v7 = (void *)sub_23EC2E1C8();

    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static UtilitySubscriptionService.resendHistoricalData(authorizationToken:subscriptionID:utilityID:start:end:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB83F8 + dword_256DB83F8);
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_23EBDFE20;
  return v19(a3, a4, a1, a2, a5, a6, a7, a8);
}

void sub_23EBDED7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, const void *a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;

  v7[2] = a6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  v10 = swift_task_alloc();
  v7[3] = v10;
  v11 = sub_23EC2E3CC();
  v7[4] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[5] = v12;
  v7[6] = swift_task_alloc();
  v7[7] = _Block_copy(a7);
  sub_23EC2E780();
  v7[8] = v13;
  sub_23EC2E780();
  v7[9] = v14;
  sub_23EC2E780();
  v7[10] = v15;
  sub_23EC2E390();
  if (a5)
  {
    sub_23EC2E390();
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v16, 1, v11);
  v18 = (char *)&dword_256DB83F8 + dword_256DB83F8;
  a6;
  v17 = (_QWORD *)swift_task_alloc();
  v7[11] = v17;
  *v17 = v7;
  v17[1] = sub_23EBDEF20;
  __asm { BR              X8 }
}

uint64_t sub_23EBDEF20(char a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v7 = *(_QWORD *)(v5 + 48);
  v6 = *(_QWORD *)(v5 + 56);
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v5 + 40);
  sub_23EBDFB10(*(_QWORD *)(v5 + 24));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  if (v1)
  {
    v10 = (void *)sub_23EC2E1C8();

    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v5 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id UtilitySubscriptionService.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void UtilitySubscriptionService.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id UtilitySubscriptionService.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UtilitySubscriptionService();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23EBDF10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23EBDF12C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8F40
                                                                                               + dword_256DB8F40);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_23EBDF2C4;
    return v9(0, 0, *(_QWORD *)(v0 + 16), v1, *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else
  {
    if (qword_256DB71F0 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC7720);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Attempting to generate token with a empty refreshToken!!!", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EBDF2C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t method lookup function for UtilitySubscriptionService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtilitySubscriptionService.utilityID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of UtilitySubscriptionService.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of UtilitySubscriptionService.authorizeAccountWithTAF(fields:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x70);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23EBDFE24;
  return v9(a1, a2);
}

uint64_t dispatch thunk of UtilitySubscriptionService.initiateOTPForAccount(forFactor:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x78);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23EBDF448;
  return v9(a1, a2);
}

uint64_t sub_23EBDF448(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of UtilitySubscriptionService.verifyAccount(factor:oneTimePasscode:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = *(int **)((*MEMORY[0x24BEE4EA0] & *v5) + 0x80);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23EBA724C;
  return v15(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of UtilitySubscriptionService.createAccessToken(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x24BEE4EA0] & *v3) + 0x88);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23EBDFE24;
  return v11(a1, a2, a3);
}

uint64_t dispatch thunk of UtilitySubscriptionService.fetchServiceLocations(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v8 = *(int **)((*MEMORY[0x24BEE4EA0] & *v3) + 0x90);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23EBDF448;
  return v11(a1, a2, a3);
}

uint64_t dispatch thunk of UtilitySubscriptionService.createUtilitySubscription(serviceLocationID:accessToken:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = *(int **)((*MEMORY[0x24BEE4EA0] & *v5) + 0x98);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23EBDFE24;
  return v15(a1, a2, a3, a4, a5);
}

uint64_t sub_23EBDF6FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23EBDF740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, void *, void *, void *))((char *)&dword_256DB8598 + dword_256DB8598))(v2, v3, v4, v5, v6);
}

uint64_t sub_23EBDF7CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *, void *, void *))((char *)&dword_256DB85A8 + dword_256DB85A8))(v2, v3, v5, v4);
}

uint64_t sub_23EBDF850()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *, void *, void *))((char *)&dword_256DB85C8 + dword_256DB85C8))(v2, v3, v5, v4);
}

uint64_t sub_23EBDF8D4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_256DB85E8 + dword_256DB85E8))(v2, v3, v5, v4);
}

uint64_t objectdestroy_42Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_23EBDF994()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *, void *, void *))((char *)&dword_256DB8608 + dword_256DB8608))(v2, v3, v5, v4);
}

uint64_t sub_23EBDFA14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 64));
  return swift_deallocObject();
}

void sub_23EBDFA68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (void *)v0[7];
  v8 = (const void *)v0[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_23EBA7408;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, const void *))((char *)&dword_256DB8628
                                                                                          + dword_256DB8628))(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_23EBDFB10(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBDFB54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *, void *))((char *)&dword_256DB8648 + dword_256DB8648))(v2, v3, v4, v5, v6);
}

uint64_t sub_23EBDFBEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *, void *))((char *)&dword_256DB8668 + dword_256DB8668))(v2, v3, v4, v5, v6);
}

uint64_t objectdestroy_117Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_23EBDFCC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA724C;
  return ((uint64_t (*)(int, int, int, void *, void *))((char *)&dword_256DB8688 + dword_256DB8688))(v2, v3, v4, v5, v6);
}

uint64_t sub_23EBDFD5C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23EBDFD98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, void *, void *))((char *)&dword_256DB86A8 + dword_256DB86A8))(v2, v3, v4, v5);
}

uint64_t sub_23EBDFE28()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21[5];
  __int128 v22;
  __int128 v23;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_allHeaderFields);
  v3 = sub_23EC2E720();

  sub_23EC2EB10();
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_23EBE9AF4((uint64_t)v21), (v5 & 1) != 0))
  {
    sub_23EBA55A8(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v22);
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_23EBE098C((uint64_t)v21);
  if (*((_QWORD *)&v23 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
      return 1734440005;
  }
  else
  {
    sub_23EBA3038((uint64_t)&v22, &qword_25433FBF0);
  }
  if (qword_25433FAC0 != -1)
    swift_once();
  v7 = sub_23EC2E684();
  __swift_project_value_buffer(v7, (uint64_t)qword_25433FC38);
  v8 = sub_23EC2E66C();
  v9 = sub_23EC2EA08();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v21[0] = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)&v22 = sub_23EBAE6D4(1734440005, 0xE400000000000000, v21);
    sub_23EC2EA68();
    _os_log_impl(&dword_23EB9F000, v8, v9, "Unable to retrieve %s header from response.", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v11, -1, -1);
    MEMORY[0x24265B940](v10, -1, -1);
  }

  v12 = v1;
  v13 = sub_23EC2E66C();
  v14 = sub_23EC2EA08();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)v15 = 136380675;
    v16 = objc_msgSend(v12, sel_allHeaderFields);
    sub_23EC2E720();

    v17 = sub_23EC2E72C();
    v19 = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v22 = sub_23EBAE6D4(v17, v19, v21);
    sub_23EC2EA68();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23EB9F000, v13, v14, "%{private}s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v20, -1, -1);
    MEMORY[0x24265B940](v15, -1, -1);

  }
  else
  {

  }
  return 0;
}

double sub_23EBE0220()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char **p_name;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  BOOL v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F960);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F958);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F970);
  v48 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB48);
  v49 = v11;
  sub_23EC2E504();
  p_name = &stru_250F55FF8.name;
  v13 = objc_msgSend(v0, sel_allHeaderFields);
  v14 = sub_23EC2E720();

  strcpy((char *)v51, "Cache-Control");
  HIWORD(v51[1]) = -4864;
  sub_23EC2EB10();
  if (*(_QWORD *)(v14 + 16) && (v15 = sub_23EBE9AF4((uint64_t)&v52), (v16 & 1) != 0))
  {
    sub_23EBA55A8(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v56);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_23EBE098C((uint64_t)&v52);
  if (*((_QWORD *)&v57 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v52 = v51[0];
      v53 = v51[1];
      sub_23EBE09C0();
      sub_23EBE0A04();
      v47 = v9;
      sub_23EC2E750();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_23EBA3038((uint64_t)v4, &qword_25433F960);
        v9 = v47;
        p_name = (char **)(&stru_250F55FF8 + 8);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
        swift_getKeyPath();
        sub_23EC2E510();
        swift_release();
        v35 = MEMORY[0x24265ADE8](v52, v53, v54, v55);
        v37 = v36;
        v38 = swift_bridgeObjectRelease();
        *(_QWORD *)&v56 = 0;
        v39 = MEMORY[0x24BDAC7A8](v38);
        *(&v45 - 2) = (uint8_t *)&v56;
        if ((v37 & 0x1000000000000000) != 0 || !(v37 & 0x2000000000000000 | v35 & 0x1000000000000000))
        {
          sub_23EC2EB40();
          swift_bridgeObjectRelease();
          p_name = (char **)(&stru_250F55FF8 + 8);
        }
        else
        {
          MEMORY[0x24BDAC7A8](v39);
          *(&v45 - 2) = (uint8_t *)sub_23EBE0A50;
          *(&v45 - 1) = v40;
          p_name = (char **)(&stru_250F55FF8 + 8);
          if ((v37 & 0x2000000000000000) != 0)
          {
            v52 = v35;
            v53 = v37 & 0xFFFFFFFFFFFFFFLL;
            v44 = (v35 > 0x20u || ((0x100003E01uLL >> v35) & 1) == 0)
               && (v43 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
               && *v43 == 0;
            LOBYTE(v51[0]) = v44;
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((v35 & 0x1000000000000000) != 0)
            {
              v41 = (v37 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v42 = v35 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v41 = sub_23EC2EBA0();
            }
            LOBYTE(v51[0]) = sub_23EBEA5D8(v41, v42, (void (*)(uint64_t *__return_ptr))sub_23EBE0A68) & 1;
            swift_bridgeObjectRelease();
          }
        }
        v9 = v47;
        if ((v51[0] & 1) != 0)
        {
          v33 = *(double *)&v56;
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          goto LABEL_20;
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
  else
  {
    sub_23EBA3038((uint64_t)&v56, &qword_25433FBF0);
  }
  if (qword_25433FAC0 != -1)
    swift_once();
  v17 = sub_23EC2E684();
  v50 = __swift_project_value_buffer(v17, (uint64_t)qword_25433FC38);
  v18 = sub_23EC2E66C();
  v19 = sub_23EC2EA08();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_23EB9F000, v18, v19, "Unable to generate max age value based on response.", v20, 2u);
    MEMORY[0x24265B940](v20, -1, -1);
  }

  v21 = v1;
  v22 = sub_23EC2E66C();
  v23 = sub_23EC2EA08();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v52 = v46;
    v47 = v9;
    *(_DWORD *)v24 = 136380675;
    v45 = v24 + 4;
    v25 = objc_msgSend(v21, p_name[476], v24 + 4);
    sub_23EC2E720();

    v26 = sub_23EC2E72C();
    v28 = v27;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v56 = sub_23EBAE6D4(v26, v28, &v52);
    v9 = v47;
    sub_23EC2EA68();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23EB9F000, v22, v23, "%{private}s", v24, 0xCu);
    v29 = v46;
    swift_arrayDestroy();
    MEMORY[0x24265B940](v29, -1, -1);
    MEMORY[0x24265B940](v24, -1, -1);

  }
  else
  {

  }
  v30 = sub_23EC2E66C();
  v31 = sub_23EC2EA08();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_23EB9F000, v30, v31, "Returning zero max age value for response.", v32, 2u);
    MEMORY[0x24265B940](v32, -1, -1);
  }

  v33 = 0.0;
LABEL_20:
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v9);
  return v33;
}

uint64_t sub_23EBE098C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t sub_23EBE09C0()
{
  unint64_t result;

  result = qword_25433FB00;
  if (!qword_25433FB00)
  {
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25433FB00);
  }
  return result;
}

unint64_t sub_23EBE0A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25433F968;
  if (!qword_25433F968)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25433F970);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE7460], v1);
    atomic_store(result, (unint64_t *)&qword_25433F968);
  }
  return result;
}

_BYTE *sub_23EBE0A50@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_23EBE9D54(a1, a2);
}

_QWORD *sub_23EBE0A68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23EBEA62C(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_23EBE0A80()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23EBE0AA0();
  qword_25433FC00 = result;
  *(_QWORD *)algn_25433FC08 = v1;
  return result;
}

uint64_t sub_23EBE0AA0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23EC2E264();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = 1;
  v9 = objc_msgSend(v7, sel_URLsForDirectory_inDomains_, 13, 1);
  v10 = sub_23EC2E930();

  if (*(_QWORD *)(v10 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v2, v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v3);
    v8 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v8, 1, v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    sub_23EC2E210();
    v11 = (char *)&loc_23EBE0C54 + dword_23EBE0D1C[sub_23EC12720()];
    __asm { BR              X10 }
  }
  sub_23EBE1350((uint64_t)v2);

  return 0;
}

uint64_t sub_23EBE0D2C()
{
  id v0;
  void *v1;
  unsigned int v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23EC2E21C();
  v1 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_fileExistsAtPath_, v1);

  if (v2)
    return sub_23EC2E27C();
  if (qword_256DB71C0 != -1)
    swift_once();
  v4 = sub_23EC2E684();
  __swift_project_value_buffer(v4, (uint64_t)qword_256DC76A8);
  v5 = sub_23EC2E66C();
  v6 = sub_23EC2EA08();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_23EB9F000, v5, v6, "File not found in provided location!", v7, 2u);
    MEMORY[0x24265B940](v7, -1, -1);
  }

  return 0;
}

void _s19HomeUtilityServices0bC0C05clearB14TerritoryCacheyyFZ_0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  int v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (qword_256DB71C0 != -1)
    swift_once();
  v0 = sub_23EC2E684();
  __swift_project_value_buffer(v0, (uint64_t)qword_256DC76A8);
  v1 = sub_23EC2E66C();
  v2 = sub_23EC2EA14();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_23EB9F000, v1, v2, "Clearing Client cache", v3, 2u);
    MEMORY[0x24265B940](v3, -1, -1);
  }

  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  if (qword_25433FB40 != -1)
    swift_once();
  v5 = (void *)sub_23EC2E774();
  v18[0] = 0;
  v6 = objc_msgSend(v4, sel_removeItemAtPath_error_, v5, v18);

  if (v6)
  {
    v7 = v18[0];
  }
  else
  {
    v8 = v18[0];
    v9 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    v10 = v9;
    v11 = v9;
    v12 = sub_23EC2E66C();
    v13 = sub_23EC2EA08();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v14 = 138412290;
      v16 = v9;
      v17 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v18[0] = v17;
      sub_23EC2EA68();
      *v15 = v17;

      _os_log_impl(&dword_23EB9F000, v12, (os_log_type_t)v13, "Error while trying to clear cache. %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v15, -1, -1);
      MEMORY[0x24265B940](v14, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_23EBE1350(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBE1390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6[5] = a1;
  v6[6] = a4;
  v6[7] = type metadata accessor for NetworkError();
  v6[8] = swift_task_alloc();
  v11 = sub_23EC2E264();
  v6[9] = v11;
  v6[10] = *(_QWORD *)(v11 - 8);
  v6[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v12 = swift_task_alloc();
  v6[12] = v12;
  v13 = sub_23EC2DFA0();
  v6[13] = v13;
  v6[14] = *(_QWORD *)(v13 - 8);
  v6[15] = swift_task_alloc();
  v14 = (_QWORD *)swift_task_alloc();
  v6[16] = v14;
  *v14 = v6;
  v14[1] = sub_23EBE14AC;
  return sub_23EBA1800(v12, a2, a3, a5, a6);
}

uint64_t sub_23EBE14AC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBE1500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71B0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7690);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable generate request URL for Utility ID Lookup", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 120), v3, v1);
    sub_23EC0A6EC(0xD000000000000027, 0x800000023EC39BA0, (uint8_t *)0xD000000000000015, 0x800000023EC39BD0);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v12;
    *v12 = v0;
    v12[1] = sub_23EBE1700;
    return sub_23EC2E9D8();
  }
}

uint64_t sub_23EBE1700(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBE176C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(id *)(v0 + 144);
    sub_23EC0AFC4(0xD000000000000016, (uint8_t *)0x800000023EC39BF0, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4E458);
    v4 = objc_msgSend(v2, sel_statusCode);
    if (v4 == (id)304)
    {
      if (qword_256DB71B0 != -1)
        swift_once();
      v69 = v2;
      v27 = sub_23EC2E684();
      __swift_project_value_buffer(v27, (uint64_t)qword_256DC7690);
      v28 = sub_23EC2E66C();
      v29 = sub_23EC2E9FC();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_23EB9F000, v28, v29, "Geohash File unmodified. Use existing file on disk.", v30, 2u);
        MEMORY[0x24265B940](v30, -1, -1);
      }
      v31 = *(void **)(v0 + 144);
      v33 = *(_QWORD *)(v0 + 112);
      v32 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 104);
      v36 = *(_QWORD *)(v0 + 80);
      v35 = *(_QWORD *)(v0 + 88);
      v37 = *(_QWORD *)(v0 + 72);
      v38 = *(_QWORD *)(v0 + 40);

      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v38, 1, 1, v37);
      goto LABEL_19;
    }
    if (v4 == (id)200)
    {
      if (qword_256DB71B0 != -1)
        swift_once();
      v69 = v2;
      v5 = sub_23EC2E684();
      __swift_project_value_buffer(v5, (uint64_t)qword_256DC7690);
      v6 = sub_23EC2E66C();
      v7 = sub_23EC2E9FC();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v7, "New Geo Tile fetched", v8, 2u);
        MEMORY[0x24265B940](v8, -1, -1);
      }
      v9 = *(void **)(v0 + 144);
      v11 = *(_QWORD *)(v0 + 112);
      v10 = *(_QWORD *)(v0 + 120);
      v12 = *(_QWORD *)(v0 + 104);
      v13 = *(_QWORD *)(v0 + 80);
      v14 = *(_QWORD *)(v0 + 88);
      v15 = *(_QWORD *)(v0 + 72);
      v16 = *(_QWORD *)(v0 + 40);

      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16, v14, v15);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v15);
LABEL_19:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void *))(v0 + 8))(v69);
    }
    if (qword_256DB71B0 != -1)
      swift_once();
    v40 = sub_23EC2E684();
    __swift_project_value_buffer(v40, (uint64_t)qword_256DC7690);
    v41 = sub_23EC2E66C();
    v42 = sub_23EC2EA08();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_23EB9F000, v41, v42, "Error while checking for geohash tiles", v43, 2u);
      MEMORY[0x24265B940](v43, -1, -1);
    }
    v44 = *(void **)(v0 + 144);

    v45 = v44;
    v46 = objc_msgSend(v2, sel_description);
    v47 = sub_23EC2E780();
    v49 = v48;

    swift_bridgeObjectRetain();
    v50 = sub_23EC2E66C();
    v51 = sub_23EC2EA08();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      v70 = v53;
      *(_DWORD *)v52 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = sub_23EBAE6D4(v47, v49, &v70);
      sub_23EC2EA68();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23EB9F000, v50, v51, "%s", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v53, -1, -1);
      MEMORY[0x24265B940](v52, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v54 = *(void **)(v0 + 144);
    v56 = *(_QWORD *)(v0 + 80);
    v55 = *(_QWORD *)(v0 + 88);
    v57 = *(_QWORD *)(v0 + 72);
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v25 = (void *)swift_allocError();
    *v58 = objc_msgSend(v2, sel_statusCode);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
  }
  else
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v17 = sub_23EC2E684();
    __swift_project_value_buffer(v17, (uint64_t)qword_256DC7690);
    v18 = sub_23EC2E66C();
    v19 = sub_23EC2EA08();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_23EB9F000, v18, v19, "Unable to process GeoTiles Response.", v20, 2u);
      MEMORY[0x24265B940](v20, -1, -1);
    }
    v21 = *(void **)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 72);

    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v25 = (void *)swift_allocError();
    *v26 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  if (qword_256DB71B0 != -1)
    swift_once();
  v59 = sub_23EC2E684();
  __swift_project_value_buffer(v59, (uint64_t)qword_256DC7690);
  v60 = v25;
  v61 = v25;
  v62 = sub_23EC2E66C();
  v63 = sub_23EC2EA08();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc();
    v65 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v64 = 138412290;
    v66 = v25;
    v67 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v67;
    sub_23EC2EA68();
    *v65 = v67;

    _os_log_impl(&dword_23EB9F000, v62, v63, "Error while trying to fetch geohash tiles from server %@", v64, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v65, -1, -1);
    MEMORY[0x24265B940](v64, -1, -1);
  }
  else
  {

  }
  *(_QWORD *)(v0 + 16) = v25;
  v68 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  if (swift_dynamicCast())
  {
    sub_23EBE40DC(*(_QWORD *)(v0 + 64));
    swift_willThrow();
  }
  else
  {
    sub_23EC259EC(v25);
    swift_willThrow();

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBE2064()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;

  v1 = *(void **)(v0 + 152);
  if (qword_256DB71B0 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC7690);
  v3 = v1;
  v4 = v1;
  v5 = sub_23EC2E66C();
  v6 = sub_23EC2EA08();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412290;
    v9 = v1;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v10;
    sub_23EC2EA68();
    *v8 = v10;

    _os_log_impl(&dword_23EB9F000, v5, v6, "Error while trying to fetch geohash tiles from server %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v8, -1, -1);
    MEMORY[0x24265B940](v7, -1, -1);
  }
  else
  {

  }
  *(_QWORD *)(v0 + 16) = v1;
  v11 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  if (swift_dynamicCast())
  {
    sub_23EBE40DC(*(_QWORD *)(v0 + 64));
    swift_willThrow();
  }
  else
  {
    sub_23EC259EC(v1);
    swift_willThrow();

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23EBE22CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject *v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD v74[2];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v83 = a2;
  v84 = a3;
  v85 = a1;
  v3 = sub_23EC2E264();
  v82 = *(id *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB86D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB86D8);
  v10 = *(_QWORD *)(v9 - 8);
  v87 = v9;
  v88 = v10;
  MEMORY[0x24BDAC7A8](v9);
  v81 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB86E0);
  v86 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23EC2E7C8();
  v79 = *(_QWORD *)(v15 - 8);
  v80 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v78 = (char *)v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v74 - v18;
  if (qword_256DB71B0 != -1)
    swift_once();
  v20 = sub_23EC2E684();
  __swift_project_value_buffer(v20, (uint64_t)qword_256DC7690);
  v21 = sub_23EC2E66C();
  v22 = sub_23EC2E9F0();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v89 = v5;
    v24 = v3;
    v25 = v23;
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_23EB9F000, v21, v22, "Generating individual geohash tiles from parent geohash.", v23, 2u);
    v26 = v25;
    v3 = v24;
    v5 = v89;
    MEMORY[0x24265B940](v26, -1, -1);
  }

  v27 = v85;
  v28 = sub_23EC2E210();
  v30 = v29;
  sub_23EC2E7B0();
  type metadata accessor for StreamReader();
  swift_allocObject();
  v89 = (char *)sub_23EBC5FDC(v28, v30, 10, 0xE100000000000000, (uint64_t)v19, 4096);
  if (v89)
  {
    if (qword_25433FB40 != -1)
      swift_once();
    v92 = qword_25433FC00;
    v93 = *(_QWORD *)algn_25433FC08;
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    v31 = sub_23EC23B40();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
    {
      v82 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v32 = (void *)MEMORY[0x24265B4F0]();
      v33 = 0;
      sub_23EBC6360((uint64_t)v89, &v92);
      LODWORD(v77) = 0;
      v85 = 0x800000023EC39B70;
      *(_QWORD *)&v34 = 136315138;
      v75 = v34;
      v74[1] = MEMORY[0x24BEE4AD8] + 8;
      while (1)
      {
        objc_autoreleasePoolPop(v32);
        v45 = v93;
        if (!v93)
          break;
        v46 = v92;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256DB86E8);
        sub_23EC2E504();
        v92 = v46;
        v93 = v45;
        sub_23EBE09C0();
        sub_23EBE3C00();
        sub_23EC2E750();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v8, 1, v87) == 1)
        {
          sub_23EBA3038((uint64_t)v8, &qword_256DB86D0);
          v47 = sub_23EC2E66C();
          v48 = sub_23EC2EA08();
          if (os_log_type_enabled(v47, v48))
          {
            v49 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v49 = 0;
            _os_log_impl(&dword_23EB9F000, v47, v48, "No Matching file name found in Geo Hash", v49, 2u);
            MEMORY[0x24265B940](v49, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v86 + 8))(v14, v12);
          swift_bridgeObjectRelease();
          v44 = sub_23EC2E66C();
          v50 = sub_23EC2EA08();
          if (os_log_type_enabled(v44, v50))
          {
            v51 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v51 = 0;
            _os_log_impl(&dword_23EB9F000, v44, v50, "Unable to find file name for the geo hash string", v51, 2u);
            MEMORY[0x24265B940](v51, -1, -1);
          }
        }
        else
        {
          v52 = v87;
          v53 = v81;
          (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v81, v8, v87);
          swift_getKeyPath();
          sub_23EC2E510();
          swift_release();
          v54 = MEMORY[0x24265ADE8](v92, v93, v94, v95);
          v76 = v55;
          v77 = v54;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v53, v52);
          (*(void (**)(char *, uint64_t))(v86 + 8))(v14, v12);
          v92 = qword_25433FC00;
          v93 = *(_QWORD *)algn_25433FC08;
          swift_bridgeObjectRetain();
          sub_23EC2E834();
          sub_23EC2E834();
          sub_23EC2E834();
          sub_23EC2E834();
          v56 = swift_bridgeObjectRelease();
          v57 = v92;
          v58 = v93;
          v59 = (void *)MEMORY[0x24265B4F0](v56);
          v92 = v46;
          v93 = v45;
          v77 = v57;
          v90 = v57;
          v91 = v58;
          v60 = v78;
          sub_23EC2E7B0();
          sub_23EBAFA74();
          sub_23EC2EABC();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v60, v80);
          objc_autoreleasePoolPop(v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain_n();
          v61 = sub_23EC2E66C();
          v62 = sub_23EC2E9FC();
          if (os_log_type_enabled(v61, v62))
          {
            v63 = v58;
            v64 = swift_slowAlloc();
            v65 = swift_slowAlloc();
            v76 = 0;
            v66 = v65;
            v92 = v65;
            *(_DWORD *)v64 = v75;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v64 + 4) = sub_23EBAE6D4(v77, v63, &v92);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23EB9F000, v61, v62, "Successfully wrote to %s", (uint8_t *)v64, 0xCu);
            swift_arrayDestroy();
            v67 = v66;
            v33 = v76;
            MEMORY[0x24265B940](v67, -1, -1);
            MEMORY[0x24265B940](v64, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v44 = sub_23EC2E774();
          swift_bridgeObjectRelease();
          LODWORD(v77) = objc_msgSend(v82, sel_fileExistsAtPath_, v44);
        }

        v32 = (void *)MEMORY[0x24265B4F0]();
        sub_23EBC6360((uint64_t)v89, &v92);
        if (v33)
        {
          objc_autoreleasePoolPop(v32);
          __break(1u);
          return;
        }
      }
      v68 = sub_23EC2E66C();
      v69 = sub_23EC2EA14();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v70 = 0;
        _os_log_impl(&dword_23EB9F000, v68, v69, "Wrote all geohash tile to disk.", v70, 2u);
        MEMORY[0x24265B940](v70, -1, -1);
      }

      v71 = OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle;
      v72 = (uint64_t)v89;
      objc_msgSend(*(id *)&v89[OBJC_IVAR____TtC19HomeUtilityServices12StreamReader_fileHandle], sel_closeFile);
      v73 = *(void **)(v72 + v71);
      *(_QWORD *)(v72 + v71) = 0;

      swift_release();
    }
    else
    {
      v41 = sub_23EC2E66C();
      v42 = sub_23EC2EA08();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_23EB9F000, v41, v42, "Unable to create directory for saving GeoHash Polygons", v43, 2u);
        MEMORY[0x24265B940](v43, -1, -1);
      }
      swift_release();

    }
  }
  else
  {
    (*((void (**)(char *, unint64_t, uint64_t))v82 + 2))(v5, v27, v3);
    v35 = sub_23EC2E66C();
    v36 = sub_23EC2EA08();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v92 = v38;
      *(_DWORD *)v37 = 136315138;
      v39 = sub_23EC2E210();
      v90 = sub_23EBAE6D4(v39, v40, &v92);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v82 + 1))(v5, v3);
      _os_log_impl(&dword_23EB9F000, v35, v36, "Unable to open file stream for file :%s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v38, -1, -1);
      MEMORY[0x24265B940](v37, -1, -1);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v82 + 1))(v5, v3);
    }

  }
}

uint64_t sub_23EBE2EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_0;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v5 = sub_23EC2E3CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256DB71B0 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_256DC7690);
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2E9F0();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_23EB9F000, v10, v11, "Trying to save metadata about downloaded geohash tile.", v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
  }

  result = sub_23EBDFE28();
  if (v14)
  {
    v15 = result;
    v16 = v14;
    sub_23EBE0220();
    sub_23EC2E36C();
    v29 = a2;
    v30 = a3;
    v31 = 0u;
    v32 = 0u;
    swift_bridgeObjectRetain();
    v17 = sub_23EBD0C44();
    v28 = MEMORY[0x24BEE0D00];
    v27[0] = v15;
    v27[1] = v16;
    sub_23EBD0AE4(v17, v18, (uint64_t)v27);
    swift_bridgeObjectRelease();
    sub_23EBA3038((uint64_t)v27, &qword_25433FBF0);
    v19 = sub_23EBD0CC0();
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(boxed_opaque_existential_0, v8, v5);
    sub_23EBD0AE4(v19, v21, (uint64_t)v27);
    swift_bridgeObjectRelease();
    sub_23EBA3038((uint64_t)v27, &qword_25433FBF0);
    v23 = sub_23EC2E66C();
    v24 = sub_23EC2EA14();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_23EB9F000, v23, v24, "Saved metadata about downloaded geohash tile to defaults", v25, 2u);
      MEMORY[0x24265B940](v25, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

void sub_23EBE34C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v5[8];

  v5[7] = *MEMORY[0x24BDAC8D0];
  v0 = sub_23EC2E708();
  v5[3] = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23EC2E6CC();
  v5[1] = *(_QWORD *)(v1 - 8);
  v5[2] = v1;
  MEMORY[0x24BDAC7A8](v1);
  v5[0] = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23EC2E7C8();
  MEMORY[0x24BDAC7A8](v3);
  v4 = (char *)&loc_23EBE35D4 + dword_23EBE3944[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EBE35E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)(v3 - 120) = 0;
  *(_QWORD *)(v3 - 112) = 0xE000000000000000;
  sub_23EC2EB4C();
  v4 = *(_QWORD *)(v3 - 112);
  *(_QWORD *)(v3 - 120) = *(_QWORD *)(v3 - 120);
  *(_QWORD *)(v3 - 112) = v4;
  sub_23EC2E834();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 120) = 0;
  *(_QWORD *)(v3 - 112) = 0xE000000000000000;
  sub_23EC2E9B4();
  sub_23EC2E834();
  sub_23EC2E9B4();
  sub_23EC2E834();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E7B0();
  sub_23EC2E78C();
  v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  if (v6 >> 60 != 15)
  {
    sub_23EBC0AD4(&qword_256DB86C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_23EC2E6C0();
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_23EBE3964()
{
  uint64_t v0;
  __CFString *v1;
  __CFString *v2;
  CFPropertyListRef v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;

  sub_23EBE34C0();
  if (!v0)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_256DC7690);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (!os_log_type_enabled(v10, v11))
      goto LABEL_18;
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    v13 = "Unable to generate key for looking up utility info.";
    goto LABEL_17;
  }
  v1 = (__CFString *)sub_23EC2E774();
  v2 = (__CFString *)sub_23EC2E774();
  v3 = CFPreferencesCopyAppValue(v1, v2);
  swift_bridgeObjectRelease();

  if (!v3 || (__swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20), (swift_dynamicCast() & 1) == 0))
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7690);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (!os_log_type_enabled(v10, v11))
      goto LABEL_18;
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    v13 = "Unable to lookup computed utility from disk.";
LABEL_17:
    _os_log_impl(&dword_23EB9F000, v10, v11, v13, v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
LABEL_18:

    return 0;
  }
  v4 = v16;
  if (qword_256DB71B0 != -1)
    swift_once();
  v5 = sub_23EC2E684();
  __swift_project_value_buffer(v5, (uint64_t)qword_256DC7690);
  v6 = sub_23EC2E66C();
  v7 = sub_23EC2EA14();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_23EB9F000, v6, v7, "Successfully retrieved computed utility from disk.", v8, 2u);
    MEMORY[0x24265B940](v8, -1, -1);
  }

  return v4;
}

unint64_t sub_23EBE3C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB86F0;
  if (!qword_256DB86F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB86E0);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE7460], v1);
    atomic_store(result, &qword_256DB86F0);
  }
  return result;
}

void sub_23EBE3C4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  _QWORD v16[4];

  if (!a1)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v6 = sub_23EC2E684();
    __swift_project_value_buffer(v6, (uint64_t)qword_256DC7690);
    oslog = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (!os_log_type_enabled(oslog, v7))
      goto LABEL_13;
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    v9 = "No utility Territory information to save.";
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  sub_23EBE34C0();
  if (!v3)
  {
    swift_bridgeObjectRelease();
    if (qword_256DB71B0 != -1)
      swift_once();
    v10 = sub_23EC2E684();
    __swift_project_value_buffer(v10, (uint64_t)qword_256DC7690);
    oslog = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (!os_log_type_enabled(oslog, v7))
      goto LABEL_13;
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    v9 = "Unable to generate key for saving utility info.";
LABEL_12:
    _os_log_impl(&dword_23EB9F000, oslog, v7, v9, v8, 2u);
    MEMORY[0x24265B940](v8, -1, -1);
LABEL_13:

    return;
  }
  v4 = v2;
  v5 = v3;
  v16[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
  v16[0] = a1;
  sub_23EBD0AE4(v4, v5, (uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_23EBA3038((uint64_t)v16, &qword_25433FBF0);
  if (qword_256DB71B0 != -1)
    swift_once();
  v11 = sub_23EC2E684();
  __swift_project_value_buffer(v11, (uint64_t)qword_256DC7690);
  v12 = sub_23EC2E66C();
  v13 = sub_23EC2EA14();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23EB9F000, v12, v13, "Saved computed utility for coordinate value.", v14, 2u);
    MEMORY[0x24265B940](v14, -1, -1);
  }

}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23EBE40DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NetworkError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EBE4118(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8738);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE5DE0();
  sub_23EC2EDE0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8720);
  sub_23EBE5E68(&qword_256DB8740, (uint64_t (*)(void))sub_23EBE5ED0, MEMORY[0x24BEE12A0]);
  sub_23EC2ED08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23EBE4234()
{
  return 0x416465686374616DLL;
}

uint64_t sub_23EBE4258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x416465686374616DLL && a2 == 0xEE00737365726464)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23EBE4310()
{
  sub_23EBE5DE0();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBE4338()
{
  sub_23EBE5DE0();
  return sub_23EC2EE04();
}

_QWORD *sub_23EBE4360@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EBE5C9C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EBE4388(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBE4118(a1, *v1);
}

uint64_t sub_23EBE43A0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8780);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE68FC();
  sub_23EC2EDE0();
  v9 = v3[5];
  v18 = v3[4];
  v19 = v9;
  v20 = v3[6];
  v10 = v3[1];
  v14 = *v3;
  v15 = v10;
  v11 = v3[3];
  v16 = v3[2];
  v17 = v11;
  v13[15] = 0;
  sub_23EBE6984();
  sub_23EC2ED08();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBE44E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB87B8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE7418();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECB4();
    v8[13] = 2;
    sub_23EC2ECB4();
    v8[12] = 3;
    sub_23EC2ECE4();
    v8[11] = 4;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECE4();
    v8[9] = 6;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23EBE46C0()
{
  _BYTE *v0;

  if (*v0)
    return 0x686374616DLL;
  else
    return 0x73736572646461;
}

uint64_t sub_23EBE46F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBE6440(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBE471C()
{
  sub_23EBE68FC();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBE4744()
{
  sub_23EBE68FC();
  return sub_23EC2EE04();
}

double sub_23EBE476C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_23EBE6528(a1, v9);
  if (!v2)
  {
    v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_23EBE47BC(_QWORD *a1)
{
  return sub_23EBE43A0(a1);
}

uint64_t sub_23EBE47D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBE4808 + 4 * byte_23EC339F0[*v0]))(0x4C73736572646461, 0xEC00000031656E69);
}

uint64_t sub_23EBE4828()
{
  return 2037672291;
}

uint64_t sub_23EBE4838()
{
  return 0x6574617473;
}

uint64_t sub_23EBE484C()
{
  return 0x6F436C6174736F70;
}

uint64_t sub_23EBE4868()
{
  return 0x7972746E756F63;
}

uint64_t sub_23EBE4880()
{
  sub_23EBE7418();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBE48A8()
{
  sub_23EBE7418();
  return sub_23EC2EE04();
}

__n128 sub_23EBE48D0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_23EBE6ED8(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_23EBE4920(_QWORD *a1)
{
  return sub_23EBE44E4(a1);
}

uint64_t sub_23EBE4934(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[24] = a1;
  v2[25] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v2[26] = swift_task_alloc();
  v4 = sub_23EC2DFA0();
  v2[27] = v4;
  v2[28] = *(_QWORD *)(v4 - 8);
  v2[29] = swift_task_alloc();
  v5 = (_QWORD *)swift_task_alloc();
  v2[30] = v5;
  *v5 = v2;
  v5[1] = sub_23EBE49D0;
  return sub_23EBD176C(a2);
}

uint64_t sub_23EBE49D0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBE4A24()
{
  uint64_t *v0;
  uint64_t KeyPath;
  _QWORD *v2;

  KeyPath = swift_getKeyPath();
  v0[31] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc();
  v0[32] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23EBE4A90;
  return sub_23EBEAEE4(v0[26], v0[24], KeyPath, 0);
}

uint64_t sub_23EBE4A90()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23EBE4AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB71E0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC76F0);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable generate request URL for Address Verification Request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 232), v3, v1);
    sub_23EC0A6EC(0xD000000000000024, 0x800000023EC39C10, (uint8_t *)0xD00000000000001ALL, 0x800000023EC39C40);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v10;
    *v10 = v0;
    v10[1] = sub_23EBE4CF8;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBE4CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[34] = a1;
  v5[35] = a2;
  v5[36] = a3;
  v5[37] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBE4D68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void *v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  void *v46;
  uint8_t *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  objc_super *v93;
  uint64_t v94;
  objc_class *v95;
  char *v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  objc_class *v103;
  objc_super *v104;
  objc_super *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v1 = (_QWORD *)v0;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = (uint64_t *)(v0 + 184);
    v5 = *(id *)(v0 + 288);
    sub_23EC0AFC4(0xD00000000000001FLL, (uint8_t *)0x800000023EC39C60, (unint64_t)objc_msgSend(v3, sel_statusCode), qword_250F4E400);
    v6 = objc_msgSend(v3, sel_statusCode);
    switch((unint64_t)v6)
    {
      case 0x190uLL:
        if (qword_256DB71E0 != -1)
          swift_once();
        v7 = sub_23EC2E684();
        __swift_project_value_buffer(v7, (uint64_t)qword_256DC76F0);
        v8 = sub_23EC2E66C();
        v9 = sub_23EC2EA08();
        if (os_log_type_enabled(v8, v9))
        {
          v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_23EB9F000, v8, v9, "BAD REQUEST | Check request", v10, 2u);
          MEMORY[0x24265B940](v10, -1, -1);
        }
        goto LABEL_40;
      case 0x191uLL:
        if (qword_256DB71E0 != -1)
          swift_once();
        v48 = sub_23EC2E684();
        __swift_project_value_buffer(v48, (uint64_t)qword_256DC76F0);
        v8 = sub_23EC2E66C();
        v49 = sub_23EC2EA08();
        if (os_log_type_enabled(v8, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v50 = 0;
          _os_log_impl(&dword_23EB9F000, v8, v49, "Request Unauthorized.", v50, 2u);
          MEMORY[0x24265B940](v50, -1, -1);
        }
        goto LABEL_40;
      case 0x192uLL:
      case 0x193uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x199uLL:
      case 0x19AuLL:
      case 0x19BuLL:
      case 0x19CuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_22;
      case 0x194uLL:
        if (qword_256DB71E0 != -1)
          swift_once();
        v51 = sub_23EC2E684();
        __swift_project_value_buffer(v51, (uint64_t)qword_256DC76F0);
        v8 = sub_23EC2E66C();
        v52 = sub_23EC2EA08();
        if (os_log_type_enabled(v8, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v53 = 0;
          _os_log_impl(&dword_23EB9F000, v8, v52, "No Matching Address Found.", v53, 2u);
          MEMORY[0x24265B940](v53, -1, -1);
        }
        goto LABEL_40;
      case 0x1ADuLL:
        if (qword_256DB71E0 != -1)
          swift_once();
        v54 = sub_23EC2E684();
        __swift_project_value_buffer(v54, (uint64_t)qword_256DC76F0);
        v8 = sub_23EC2E66C();
        v55 = sub_23EC2EA08();
        if (os_log_type_enabled(v8, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v56 = 0;
          _os_log_impl(&dword_23EB9F000, v8, v55, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v56, 2u);
          MEMORY[0x24265B940](v56, -1, -1);
        }
LABEL_40:
        v57 = *(_QWORD *)(v0 + 280);
        v16 = *(void **)(v0 + 288);
        v58 = v1[34];
        v19 = v1[28];
        v18 = v1[29];
        v20 = v1[27];

        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v58, v57);

        goto LABEL_41;
      default:
        if (v6 == (id)200)
        {
          if (qword_256DB71E0 != -1)
            swift_once();
          v22 = sub_23EC2E684();
          __swift_project_value_buffer(v22, (uint64_t)qword_256DC76F0);
          v23 = sub_23EC2E66C();
          v24 = sub_23EC2EA14();
          if (os_log_type_enabled(v23, v24))
          {
            v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v25 = 0;
            _os_log_impl(&dword_23EB9F000, v23, v24, "Address Verification Response received", v25, 2u);
            MEMORY[0x24265B940](v25, -1, -1);
          }
          v26 = *(void **)(v0 + 296);

          sub_23EC2DFC4();
          swift_allocObject();
          sub_23EC2DFB8();
          sub_23EBE5B20();
          sub_23EC2DFAC();
          v27 = v26;
          swift_release();
          if (!v26)
          {
            v65 = *v4;
            v66 = *(_QWORD *)(*v4 + 16);
            if (v66)
            {
              v104 = (objc_super *)(v1 + 20);
              v105 = (objc_super *)(v1 + 18);
              v67 = v1 + 2;
              v119 = MEMORY[0x24BEE4AF8];
              sub_23EC2EBC4();
              v102 = (uint64_t)(v1 + 2);
              v103 = (objc_class *)type metadata accessor for UtilityServiceAddress();
              v107 = v66 - 1;
              v68 = 32;
              v100 = v65;
              v101 = v1;
              while (1)
              {
                v106 = v68;
                v69 = (__int128 *)(v65 + v68);
                v70 = v69[4];
                v71 = v69[5];
                v72 = v69[6];
                v67[7] = v69[7];
                v73 = *v69;
                v74 = v69[1];
                v75 = v69[3];
                v67[2] = v69[2];
                v67[3] = v75;
                *v67 = v73;
                v67[1] = v74;
                v67[5] = v71;
                v67[6] = v72;
                v67[4] = v70;
                v116 = v1[17];
                v118 = v1[16];
                v76 = v1;
                v77 = v1[3];
                v78 = v1[5];
                v108 = v1[2];
                v109 = v1[4];
                v79 = v1[7];
                v80 = v1[9];
                v110 = v1[6];
                v111 = v1[8];
                v81 = v1[10];
                v82 = v1[11];
                v112 = v81;
                v83 = v76[13];
                v113 = v76[12];
                v84 = v76[15];
                v114 = v76[14];
                v85 = (char *)objc_allocWithZone(v103);
                v86 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1];
                *(_QWORD *)v86 = v108;
                *((_QWORD *)v86 + 1) = v77;
                v87 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2];
                *(_QWORD *)v87 = v109;
                *((_QWORD *)v87 + 1) = v78;
                v88 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3];
                *(_QWORD *)v88 = v110;
                *((_QWORD *)v88 + 1) = v79;
                v89 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city];
                *(_QWORD *)v89 = v111;
                *((_QWORD *)v89 + 1) = v80;
                v67 = (_OWORD *)v102;
                v90 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state];
                *(_QWORD *)v90 = v112;
                *((_QWORD *)v90 + 1) = v82;
                v91 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode];
                *(_QWORD *)v91 = v113;
                *((_QWORD *)v91 + 1) = v83;
                v92 = &v85[OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country];
                *(_QWORD *)v92 = v114;
                *((_QWORD *)v92 + 1) = v84;
                sub_23EBE5B64(v102);
                v76[18] = v85;
                v76[19] = v103;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v93 = -[objc_super init](v105, sel_init);
                if (v118 == 0x5F54434546524550 && v116 == 0xED0000484354414DLL)
                  goto LABEL_50;
                if ((sub_23EC2ED38() & 1) != 0)
LABEL_50:
                  v94 = 2;
                else
                  v94 = v118 == 0x414D5F45534F4C43 && v116 == 0xEB00000000484354 || sub_23EC2ED38() & 1;
                v95 = (objc_class *)type metadata accessor for MatchedServiceAddress();
                v96 = (char *)objc_allocWithZone(v95);
                *(_QWORD *)&v96[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_address] = v93;
                *(_QWORD *)&v96[OBJC_IVAR____TtC19HomeUtilityServices21MatchedServiceAddress_matchType] = v94;
                v1 = v101;
                v101[20] = v96;
                v101[21] = v95;
                -[objc_super init](v104, sel_init);
                sub_23EBE5BF8(v102);
                sub_23EC2EBAC();
                sub_23EC2EBD0();
                sub_23EC2EBDC();
                sub_23EC2EBB8();
                if (!v107)
                  break;
                --v107;
                v68 = v106 + 128;
                v65 = v100;
              }
              v97 = (void *)v101[36];
              v98 = v119;
              sub_23EBA3EDC(v101[34], v101[35]);

              swift_bridgeObjectRelease();
            }
            else
            {
              v99 = (void *)v1[36];
              sub_23EBA3EDC(v1[34], v1[35]);

              swift_bridgeObjectRelease();
              v98 = MEMORY[0x24BEE4AF8];
            }
            (*(void (**)(_QWORD, _QWORD))(v1[28] + 8))(v1[29], v1[27]);
            swift_task_dealloc();
            swift_task_dealloc();
            return ((uint64_t (*)(uint64_t))v1[1])(v98);
          }
          v28 = sub_23EC2E66C();
          v29 = sub_23EC2EA08();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v30 = 0;
            _os_log_impl(&dword_23EB9F000, v28, v29, "Error while decoding response from server", v30, 2u);
            MEMORY[0x24265B940](v30, -1, -1);
          }
          v31 = *(_QWORD *)(v0 + 280);
          v32 = *(void **)(v0 + 288);
          v33 = v1[34];
          v34 = v1;
          v37 = v1 + 28;
          v36 = v1[28];
          v35 = v37[1];
          v38 = v34[27];

          sub_23EC244A4(v27);
          swift_willThrow();
          sub_23EBA3EDC(v33, v31);

          v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
          v1 = v34;
          v39(v35, v38);
        }
        else
        {
LABEL_22:
          if (qword_256DB71E0 != -1)
            swift_once();
          v40 = *(void **)(v0 + 288);
          v41 = sub_23EC2E684();
          __swift_project_value_buffer(v41, (uint64_t)qword_256DC76F0);
          v42 = v40;
          v43 = sub_23EC2E66C();
          v44 = sub_23EC2EA08();
          v45 = os_log_type_enabled(v43, v44);
          v46 = (void *)v1[36];
          if (v45)
          {
            v47 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v47 = 134217984;
            v1[22] = objc_msgSend(v3, sel_statusCode);
            sub_23EC2EA68();

            _os_log_impl(&dword_23EB9F000, v43, v44, "Request failed : Status Code %ld", v47, 0xCu);
            MEMORY[0x24265B940](v47, -1, -1);
          }
          else
          {

          }
          v60 = v1[35];
          v61 = (void *)v1[36];
          v62 = v1[34];
          v63 = v1[28];
          v115 = v1[27];
          v117 = v1[29];
          type metadata accessor for NetworkError();
          sub_23EBCBFD0();
          swift_allocError();
          *v64 = objc_msgSend(v3, sel_statusCode);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          sub_23EBA3EDC(v62, v60);

          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v117, v115);
        }
        break;
    }
  }
  else
  {
    if (qword_256DB71E0 != -1)
      swift_once();
    v11 = sub_23EC2E684();
    __swift_project_value_buffer(v11, (uint64_t)qword_256DC76F0);
    v12 = sub_23EC2E66C();
    v13 = sub_23EC2EA08();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_23EB9F000, v12, v13, "Unable to process Address Verification Response.", v14, 2u);
      MEMORY[0x24265B940](v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 280);
    v16 = *(void **)(v0 + 288);
    v17 = v1[34];
    v19 = v1[28];
    v18 = v1[29];
    v20 = v1[27];

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v21 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v17, v15);
LABEL_41:

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_23EBE5AD0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EBE5B20()
{
  unint64_t result;

  result = qword_256DB8708;
  if (!qword_256DB8708)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33ADC, &type metadata for VerifiedResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8708);
  }
  return result;
}

uint64_t sub_23EBE5B64(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23EBE5BF8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for VerifiedResponse()
{
  return &type metadata for VerifiedResponse;
}

_QWORD *sub_23EBE5C9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8710);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE5DE0();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8720);
    sub_23EBE5E68(&qword_256DB8728, (uint64_t (*)(void))sub_23EBE5E24, MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_23EBE5DE0()
{
  unint64_t result;

  result = qword_256DB8718;
  if (!qword_256DB8718)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33C38, &type metadata for VerifiedResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8718);
  }
  return result;
}

unint64_t sub_23EBE5E24()
{
  unint64_t result;

  result = qword_256DB8730;
  if (!qword_256DB8730)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33C10, &type metadata for VerifiedServiceAddressResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8730);
  }
  return result;
}

uint64_t sub_23EBE5E68(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8720);
    v8 = a2();
    result = MEMORY[0x24265B8B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBE5ED0()
{
  unint64_t result;

  result = qword_256DB8748;
  if (!qword_256DB8748)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33BE8, &type metadata for VerifiedServiceAddressResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8748);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VerifiedResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EBE5F54 + 4 * byte_23EC33A34[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EBE5F74 + 4 * byte_23EC33A39[v4]))();
}

_BYTE *sub_23EBE5F54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EBE5F74(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBE5F7C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBE5F84(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBE5F8C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBE5F94(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VerifiedResponse.CodingKeys()
{
  return &type metadata for VerifiedResponse.CodingKeys;
}

uint64_t destroy for VerifiedServiceAddressResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VerifiedServiceAddressResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VerifiedServiceAddressResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

_QWORD *assignWithTake for VerifiedServiceAddressResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifiedServiceAddressResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifiedServiceAddressResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedServiceAddressResponse()
{
  return &type metadata for VerifiedServiceAddressResponse;
}

unint64_t sub_23EBE636C()
{
  unint64_t result;

  result = qword_256DB8750;
  if (!qword_256DB8750)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33BC0, &type metadata for VerifiedResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8750);
  }
  return result;
}

unint64_t sub_23EBE63B4()
{
  unint64_t result;

  result = qword_256DB8758;
  if (!qword_256DB8758)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33B30, &type metadata for VerifiedResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8758);
  }
  return result;
}

unint64_t sub_23EBE63FC()
{
  unint64_t result;

  result = qword_256DB8760;
  if (!qword_256DB8760)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33B58, &type metadata for VerifiedResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8760);
  }
  return result;
}

uint64_t sub_23EBE6440(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736572646461 && a2 == 0xE700000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x686374616DLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EBE6528@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;

  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8768);
  v5 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE68FC();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v51 = v5;
  v49 = a2;
  LOBYTE(v53) = 0;
  sub_23EBE6940();
  v8 = v52;
  sub_23EC2ECA8();
  v9 = v62;
  v42 = v63;
  v43 = v61;
  v50 = v64;
  v10 = v68;
  v40 = v67;
  v41 = v65;
  v11 = v70;
  v12 = v72;
  v38 = v71;
  v39 = v69;
  v13 = v74;
  v37 = v73;
  v77 = 1;
  v47 = v66;
  swift_bridgeObjectRetain();
  v46 = v10;
  swift_bridgeObjectRetain();
  v45 = v11;
  swift_bridgeObjectRetain();
  v14 = v12;
  swift_bridgeObjectRetain();
  v15 = v13;
  swift_bridgeObjectRetain();
  v48 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_23EC2EC84();
  v44 = v13;
  v17 = *(void (**)(char *, uint64_t))(v51 + 8);
  v18 = v16;
  v35 = v19;
  v36 = v16;
  v20 = v7;
  v21 = v19;
  v17(v20, v8);
  *(_QWORD *)&v53 = v43;
  *((_QWORD *)&v53 + 1) = v48;
  *(_QWORD *)&v54 = v42;
  *((_QWORD *)&v54 + 1) = v50;
  v22 = v46;
  *(_QWORD *)&v55 = v41;
  *((_QWORD *)&v55 + 1) = v47;
  *(_QWORD *)&v56 = v40;
  *((_QWORD *)&v56 + 1) = v46;
  v23 = v45;
  *(_QWORD *)&v57 = v39;
  *((_QWORD *)&v57 + 1) = v45;
  *(_QWORD *)&v58 = v38;
  *((_QWORD *)&v58 + 1) = v14;
  *(_QWORD *)&v59 = v37;
  *((_QWORD *)&v59 + 1) = v15;
  *(_QWORD *)&v60 = v18;
  *((_QWORD *)&v60 + 1) = v21;
  sub_23EBE5B64((uint64_t)&v53);
  swift_bridgeObjectRelease();
  v24 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v47;
  swift_bridgeObjectRelease();
  v26 = v50;
  swift_bridgeObjectRelease();
  v27 = v48;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v61 = v43;
  v62 = v27;
  v63 = v42;
  v64 = v26;
  v65 = v41;
  v66 = v25;
  v67 = v40;
  v68 = v22;
  v69 = v39;
  v70 = v23;
  v71 = v38;
  v72 = v24;
  v73 = v37;
  v74 = v44;
  v75 = v36;
  v76 = v35;
  result = sub_23EBE5BF8((uint64_t)&v61);
  v29 = v58;
  v30 = v49;
  v49[4] = v57;
  v30[5] = v29;
  v31 = v60;
  v30[6] = v59;
  v30[7] = v31;
  v32 = v54;
  *v30 = v53;
  v30[1] = v32;
  v33 = v56;
  v30[2] = v55;
  v30[3] = v33;
  return result;
}

unint64_t sub_23EBE68FC()
{
  unint64_t result;

  result = qword_256DB8770;
  if (!qword_256DB8770)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33DB0, &type metadata for VerifiedServiceAddressResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8770);
  }
  return result;
}

unint64_t sub_23EBE6940()
{
  unint64_t result;

  result = qword_256DB8778;
  if (!qword_256DB8778)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33D88, &type metadata for VerifiedServiceAddress);
    atomic_store(result, (unint64_t *)&qword_256DB8778);
  }
  return result;
}

unint64_t sub_23EBE6984()
{
  unint64_t result;

  result = qword_256DB8788;
  if (!qword_256DB8788)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33D60, &type metadata for VerifiedServiceAddress);
    atomic_store(result, (unint64_t *)&qword_256DB8788);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VerifiedServiceAddressResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EBE6A14 + 4 * byte_23EC33A43[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EBE6A48 + 4 * byte_23EC33A3E[v4]))();
}

uint64_t sub_23EBE6A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBE6A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBE6A58);
  return result;
}

uint64_t sub_23EBE6A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBE6A6CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EBE6A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBE6A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifiedServiceAddressResponse.CodingKeys()
{
  return &type metadata for VerifiedServiceAddressResponse.CodingKeys;
}

uint64_t destroy for InternalUtilityAddress()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for InternalUtilityAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InternalUtilityAddress(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

_QWORD *assignWithTake for InternalUtilityAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalUtilityAddress(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalUtilityAddress(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifiedServiceAddress()
{
  return &type metadata for VerifiedServiceAddress;
}

unint64_t sub_23EBE6E04()
{
  unint64_t result;

  result = qword_256DB8790;
  if (!qword_256DB8790)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33D38, &type metadata for VerifiedServiceAddressResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8790);
  }
  return result;
}

unint64_t sub_23EBE6E4C()
{
  unint64_t result;

  result = qword_256DB8798;
  if (!qword_256DB8798)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33CA8, &type metadata for VerifiedServiceAddressResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8798);
  }
  return result;
}

unint64_t sub_23EBE6E94()
{
  unint64_t result;

  result = qword_256DB87A0;
  if (!qword_256DB87A0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33CD0, &type metadata for VerifiedServiceAddressResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB87A0);
  }
  return result;
}

uint64_t sub_23EBE6ED8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB87A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBE7418();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v54 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v47 = v9;
  v53 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC54();
  v14 = v13;
  v45 = v12;
  v46 = v11;
  v52 = 2;
  swift_bridgeObjectRetain();
  v42 = sub_23EC2EC54();
  v44 = v14;
  v51 = 3;
  v16 = v15;
  swift_bridgeObjectRetain();
  v17 = sub_23EC2EC84();
  v43 = v18;
  v39 = v17;
  v50 = 4;
  swift_bridgeObjectRetain();
  v41 = 0;
  v38 = sub_23EC2EC84();
  v49 = 5;
  v20 = v19;
  swift_bridgeObjectRetain();
  v21 = sub_23EC2EC84();
  v40 = v20;
  v37 = v21;
  v48 = 6;
  v23 = v22;
  swift_bridgeObjectRetain();
  v24 = sub_23EC2EC84();
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v41 = v24;
  v26 = v8;
  v28 = v27;
  v25(v26, v5);
  swift_bridgeObjectRetain();
  v29 = v44;
  swift_bridgeObjectRetain();
  v30 = v16;
  swift_bridgeObjectRetain();
  v31 = v43;
  swift_bridgeObjectRetain();
  v32 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v33 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v46;
  result = swift_bridgeObjectRelease();
  *a2 = v47;
  a2[1] = v34;
  a2[2] = v45;
  a2[3] = v29;
  a2[4] = v42;
  a2[5] = v30;
  a2[6] = v39;
  a2[7] = v31;
  a2[8] = v38;
  a2[9] = v32;
  a2[10] = v37;
  a2[11] = v23;
  a2[12] = v41;
  a2[13] = v33;
  return result;
}

unint64_t sub_23EBE7418()
{
  unint64_t result;

  result = qword_256DB87B0;
  if (!qword_256DB87B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33EB8, &type metadata for VerifiedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB87B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VerifiedServiceAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23EBE74A8 + 4 * byte_23EC33A4D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23EBE74DC + 4 * byte_23EC33A48[v4]))();
}

uint64_t sub_23EBE74DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBE74E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBE74ECLL);
  return result;
}

uint64_t sub_23EBE74F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBE7500);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23EBE7504(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBE750C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifiedServiceAddress.CodingKeys()
{
  return &type metadata for VerifiedServiceAddress.CodingKeys;
}

unint64_t sub_23EBE752C()
{
  unint64_t result;

  result = qword_256DB87C0;
  if (!qword_256DB87C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33E90, &type metadata for VerifiedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB87C0);
  }
  return result;
}

unint64_t sub_23EBE7574()
{
  unint64_t result;

  result = qword_256DB87C8;
  if (!qword_256DB87C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33E00, &type metadata for VerifiedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB87C8);
  }
  return result;
}

unint64_t sub_23EBE75BC()
{
  unint64_t result;

  result = qword_256DB87D0;
  if (!qword_256DB87D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC33E28, &type metadata for VerifiedServiceAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB87D0);
  }
  return result;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JWToken.init(jwt:)(HomeUtilityServices::JWToken *__return_ptr retstr, Swift::String jwt)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  v3 = v2;
  object = jwt._object;
  countAndFlagsBits = jwt._countAndFlagsBits;
  sub_23EBAFA74();
  v7 = (_QWORD *)sub_23EC2EA80();
  v8 = v7;
  v9 = v7[2];
  if (v9 != 3)
  {
    swift_bridgeObjectRelease();
    sub_23EBE77D4();
    swift_allocError();
    *(_QWORD *)v18 = countAndFlagsBits;
    *(_QWORD *)(v18 + 8) = object;
    *(_QWORD *)(v18 + 16) = v9;
    *(_BYTE *)(v18 + 24) = 2;
    swift_willThrow();
    return;
  }
  v10 = v7[4];
  v11 = v7[5];
  swift_bridgeObjectRetain();
  v12 = v10;
  v13 = v3;
  v14 = sub_23EBE7AEC(v12, v11);
  swift_bridgeObjectRelease();
  if (v13)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  if (v8[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v15 = v8[6];
    v16 = v8[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_23EBE7AEC(v15, v16);
    swift_bridgeObjectRelease();
    if (v8[2] >= 3uLL)
    {
      v20 = v8[8];
      v19 = (void *)v8[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      retstr->header._rawValue = v14;
      retstr->body._rawValue = v17;
      retstr->signature.value._countAndFlagsBits = v20;
      retstr->signature.value._object = v19;
      retstr->string._countAndFlagsBits = countAndFlagsBits;
      retstr->string._object = object;
      return;
    }
  }
  __break(1u);
}

unint64_t sub_23EBE77D4()
{
  unint64_t result;

  result = qword_25433F7C8[0];
  if (!qword_25433F7C8[0])
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for DecodeError, &type metadata for DecodeError);
    atomic_store(result, qword_25433F7C8);
  }
  return result;
}

BOOL JWToken.expired.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];

  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23EC2E3CC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  v10 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v11 = sub_23EBE9B38(7370853, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v12 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v18);
    }
    else
    {
      v18 = 0u;
      v19 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  sub_23EBE9A38((uint64_t)&v18, (uint64_t)v20);
  Claim.double.getter();
  if ((v13 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    sub_23EC2E378();
    v14 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, v14, 1, v3);
  sub_23EBE9A80((uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23EBA3038((uint64_t)v2, &qword_25433F948);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v2, v3);
    sub_23EC2E3C0();
    v16 = sub_23EC2E3A8();
    v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v7, v3);
    v17(v9, v3);
    return v16 != 1;
  }
}

uint64_t JWToken.header.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JWToken.body.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t JWToken.signature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t JWToken.string.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_23EBE7AEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  _OWORD v18[2];
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23EBE953C(a1, a2);
  if (v5 >> 60 == 15)
  {
    sub_23EBE77D4();
    swift_allocError();
    *(_QWORD *)v6 = a1;
    *(_QWORD *)(v6 + 8) = a2;
    *(_QWORD *)(v6 + 16) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    swift_bridgeObjectRetain();
    return (id)swift_willThrow();
  }
  v8 = v4;
  v9 = v5;
  v10 = (void *)objc_opt_self();
  v11 = (void *)sub_23EC2E2B8();
  v17 = 0;
  v12 = objc_msgSend(v10, sel_JSONObjectWithData_options_error_, v11, 0, &v17);

  v13 = v17;
  if (v12)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
    sub_23EBB2080(v18, v19);
    sub_23EBB2080(v19, v18);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_23EBA4CE0(v8, v9);
      return v17;
    }
  }
  else
  {
    v14 = v13;
    v15 = (void *)sub_23EC2E1D4();

    swift_willThrow();
  }
  sub_23EBE77D4();
  swift_allocError();
  *(_QWORD *)v16 = a1;
  *(_QWORD *)(v16 + 8) = a2;
  *(_QWORD *)(v16 + 16) = 0;
  *(_BYTE *)(v16 + 24) = 1;
  swift_bridgeObjectRetain();
  swift_willThrow();
  return (id)sub_23EBA4CE0(v8, v9);
}

uint64_t JWToken.expiresAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  v3 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_23EBE9B38(7370853, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v5 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v10);
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v10, (uint64_t)v12);
  Claim.double.getter();
  if ((v6 & 1) != 0)
  {
    v8 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    sub_23EC2E378();
    v7 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  return sub_23EBE9A80((uint64_t)v12);
}

uint64_t JWT.claim(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    v9 = sub_23EBE9B38(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v10 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v12);
    }
    else
    {
      v12 = 0u;
      v13 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease();
  return sub_23EBE9A38((uint64_t)&v12, a5);
}

uint64_t Claim.date.getter@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  Claim.double.getter();
  if ((v2 & 1) != 0)
  {
    v3 = sub_23EC2E3CC();
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a1;
    v6 = 1;
  }
  else
  {
    sub_23EC2E378();
    v3 = sub_23EC2E3CC();
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a1;
    v6 = 0;
  }
  return v4(v5, v6, 1, v3);
}

uint64_t JWToken.issuer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[32];

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    v2 = sub_23EBE9B38(7566185, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v3 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v7, (uint64_t)v9);
  sub_23EBA5560((uint64_t)v9, (uint64_t)&v7);
  if (*((_QWORD *)&v8 + 1))
  {
    if (swift_dynamicCast())
      v4 = v6;
    else
      v4 = 0;
  }
  else
  {
    sub_23EBA3038((uint64_t)&v7, &qword_25433FBF0);
    v4 = 0;
  }
  sub_23EBE9A80((uint64_t)v9);
  return v4;
}

uint64_t Claim.string.getter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  sub_23EBA5560(v0, (uint64_t)v3);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
    else
      return 0;
  }
  else
  {
    sub_23EBA3038((uint64_t)v3, &qword_25433FBF0);
    return 0;
  }
}

uint64_t JWToken.subject.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[32];

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    v2 = sub_23EBE9B38(6452595, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v3 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v7, (uint64_t)v9);
  sub_23EBA5560((uint64_t)v9, (uint64_t)&v7);
  if (*((_QWORD *)&v8 + 1))
  {
    if (swift_dynamicCast())
      v4 = v6;
    else
      v4 = 0;
  }
  else
  {
    sub_23EBA3038((uint64_t)&v7, &qword_25433FBF0);
    v4 = 0;
  }
  sub_23EBE9A80((uint64_t)v9);
  return v4;
}

uint64_t JWToken.audience.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _BYTE v8[32];

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    v2 = sub_23EBE9B38(6583649, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v3 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v6);
    }
    else
    {
      v6 = 0u;
      v7 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v6, (uint64_t)v8);
  v4 = Claim.array.getter();
  sub_23EBE9A80((uint64_t)v8);
  return v4;
}

uint64_t Claim.array.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  sub_23EBA5560(v0, (uint64_t)v4);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    if ((swift_dynamicCast() & 1) != 0)
      return v2;
  }
  else
  {
    sub_23EBA3038((uint64_t)v4, &qword_25433FBF0);
  }
  sub_23EBA5560(v0, (uint64_t)v4);
  if (v5)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_23EC2FB70;
      *(_QWORD *)(result + 32) = v2;
      *(_QWORD *)(result + 40) = v3;
      return result;
    }
  }
  else
  {
    sub_23EBA3038((uint64_t)v4, &qword_25433FBF0);
  }
  return 0;
}

uint64_t JWToken.issuedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  v3 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_23EBE9B38(7627113, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v5 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v10);
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v10, (uint64_t)v12);
  Claim.double.getter();
  if ((v6 & 1) != 0)
  {
    v8 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    sub_23EC2E378();
    v7 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  return sub_23EBE9A80((uint64_t)v12);
}

uint64_t JWToken.notBefore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  v3 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v4 = sub_23EBE9B38(6709870, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v5 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v10);
    }
    else
    {
      v10 = 0u;
      v11 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v10, (uint64_t)v12);
  Claim.double.getter();
  if ((v6 & 1) != 0)
  {
    v8 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    sub_23EC2E378();
    v7 = sub_23EC2E3CC();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  return sub_23EBE9A80((uint64_t)v12);
}

uint64_t JWToken.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[32];

  v1 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    v2 = sub_23EBE9B38(6911082, 0xE300000000000000, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
    if ((v3 & 1) != 0)
    {
      sub_23EBA55A8(*(_QWORD *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  sub_23EBE9A38((uint64_t)&v7, (uint64_t)v9);
  sub_23EBA5560((uint64_t)v9, (uint64_t)&v7);
  if (*((_QWORD *)&v8 + 1))
  {
    if (swift_dynamicCast())
      v4 = v6;
    else
      v4 = 0;
  }
  else
  {
    sub_23EBA3038((uint64_t)&v7, &qword_25433FBF0);
    v4 = 0;
  }
  sub_23EBE9A80((uint64_t)v9);
  return v4;
}

uint64_t sub_23EBE8644()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23EBE864C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23EBE8654()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EBE8680()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void static JWToken.mockJWToken()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;

  v55 = sub_23EC2E3CC();
  v51 = *(_QWORD *)(v55 - 8);
  v0 = MEMORY[0x24BDAC7A8](v55);
  v53 = (char *)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v49 - v2;
  v4 = sub_23EC2E3F0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v49 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v49 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB87D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC32580;
  *(_QWORD *)(inited + 32) = 0x6C7974696C697475;
  *(_QWORD *)(inited + 40) = 0xE900000000000064;
  sub_23EC2E3E4();
  v14 = sub_23EC2E3D8();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v12, v4);
  v18 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v16;
  *(_QWORD *)(inited + 72) = v18;
  *(_QWORD *)(inited + 80) = 7370853;
  *(_QWORD *)(inited + 88) = 0xE300000000000000;
  sub_23EC2E36C();
  sub_23EC2E384();
  v20 = v19;
  v51 = *(_QWORD *)(v51 + 8);
  ((void (*)(char *, uint64_t))v51)(v3, v55);
  v21 = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 96) = v20;
  *(_QWORD *)(inited + 120) = v21;
  *(_QWORD *)(inited + 128) = 6709870;
  v22 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 136) = 0xE300000000000000;
  *(_QWORD *)(inited + 144) = 1644170208;
  *(_QWORD *)(inited + 168) = v22;
  strcpy((char *)(inited + 176), "subscriptionld");
  *(_BYTE *)(inited + 191) = -18;
  sub_23EC2E3E4();
  v23 = sub_23EC2E3D8();
  v25 = v24;
  v50 = v17;
  v17(v10, v4);
  *(_QWORD *)(inited + 192) = v23;
  *(_QWORD *)(inited + 200) = v25;
  v26 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 224) = 6911082;
  *(_QWORD *)(inited + 232) = 0xE300000000000000;
  v27 = v52;
  sub_23EC2E3E4();
  v28 = sub_23EC2E3D8();
  v30 = v29;
  v17(v27, v4);
  *(_QWORD *)(inited + 240) = v28;
  *(_QWORD *)(inited + 248) = v30;
  *(_QWORD *)(inited + 264) = v26;
  *(_QWORD *)(inited + 272) = 7566185;
  *(_QWORD *)(inited + 280) = 0xE300000000000000;
  *(_QWORD *)(inited + 288) = 0xD000000000000018;
  *(_QWORD *)(inited + 296) = 0x800000023EC39C80;
  *(_QWORD *)(inited + 312) = v26;
  *(_QWORD *)(inited + 320) = 7627113;
  *(_QWORD *)(inited + 328) = 0xE300000000000000;
  v31 = v53;
  sub_23EC2E39C();
  sub_23EC2E384();
  v33 = v32;
  ((void (*)(char *, uint64_t))v51)(v31, v55);
  *(_QWORD *)(inited + 360) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 336) = v33;
  v34 = sub_23EBA740C(inited);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_23EC32590;
  *(_QWORD *)(v35 + 32) = 6777953;
  *(_QWORD *)(v35 + 40) = 0xE300000000000000;
  *(_QWORD *)(v35 + 48) = 0x3635325345;
  *(_QWORD *)(v35 + 56) = 0xE500000000000000;
  *(_QWORD *)(v35 + 64) = 1701869940;
  *(_QWORD *)(v35 + 72) = 0xE400000000000000;
  *(_QWORD *)(v35 + 80) = 5527370;
  *(_QWORD *)(v35 + 88) = 0xE300000000000000;
  *(_QWORD *)(v35 + 96) = 6580587;
  *(_QWORD *)(v35 + 104) = 0xE300000000000000;
  sub_23EC2E3E4();
  v36 = sub_23EC2E3D8();
  v38 = v37;
  v50(v12, v4);
  *(_QWORD *)(v35 + 112) = v36;
  *(_QWORD *)(v35 + 120) = v38;
  v39 = sub_23EBA7540(v35);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7920);
  v56[0] = v39;
  v40 = v54;
  v41 = sub_23EBE8C00(v56);
  if (v40)
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    swift_getErrorValue();
    v45 = sub_23EC2ED74();
    v47 = v46;
    sub_23EBE9AB0();
    swift_allocError();
    *v48 = v45;
    v48[1] = v47;
    swift_willThrow();

  }
  else
  {
    v43 = v41;
    v44 = v42;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    v56[0] = v34;
    sub_23EBE8C00(v56);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v56);
    v56[0] = v43;
    v56[1] = v44;
    sub_23EC2E834();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    sub_23EC2E834();
    sub_23EC2E834();
  }
}

id sub_23EBE8C00(_QWORD *a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_opt_self();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17 = 0;
  v3 = objc_msgSend(v2, sel_dataWithJSONObject_options_error_, sub_23EC2ED2C(), 0, &v17);
  swift_unknownObjectRelease();
  v4 = v17;
  if (v3)
  {
    v5 = sub_23EC2E2D0();
    v7 = v6;

    v17 = (id)sub_23EC2E2C4();
    v18 = v8;
    sub_23EBAFA74();
    v9 = (void *)sub_23EC2EA98();
    v11 = v10;
    swift_bridgeObjectRelease();
    v17 = v9;
    v18 = v11;
    v12 = (void *)sub_23EC2EA98();
    v14 = v13;
    swift_bridgeObjectRelease();
    v17 = v12;
    v18 = v14;
    v3 = (id)sub_23EC2EA98();
    swift_bridgeObjectRelease();
    sub_23EBA3EDC(v5, v7);
  }
  else
  {
    v15 = v4;
    sub_23EC2E1D4();

    swift_willThrow();
  }
  return v3;
}

uint64_t Claim.rawValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23EBA5560(v1, a1);
}

uint64_t Claim.BOOLean.getter()
{
  uint64_t v0;
  unsigned __int8 v2;
  _BYTE v3[24];
  uint64_t v4;

  sub_23EBA5560(v0, (uint64_t)v3);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
    else
      return 2;
  }
  else
  {
    sub_23EBA3038((uint64_t)v3, &qword_25433FBF0);
    return 2;
  }
}

uint64_t Claim.double.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  int v3;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;

  sub_23EBA5560(v0, (uint64_t)v8);
  if (!v9)
  {
    sub_23EBA3038((uint64_t)v8, &qword_25433FBF0);
LABEL_10:
    sub_23EBA5560(v0, (uint64_t)v8);
    if (v9)
    {
      if ((swift_dynamicCast() & 1) != 0)
        return 0;
    }
    else
    {
      sub_23EBA3038((uint64_t)v8, &qword_25433FBF0);
    }
    sub_23EBA5560(v0, (uint64_t)v8);
    if (v9)
    {
      if (swift_dynamicCast())
        return v6;
      else
        return 0;
    }
    sub_23EBA3038((uint64_t)v8, &qword_25433FBF0);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_10;
  MEMORY[0x24BDAC7A8]();
  if ((v7 & 0x1000000000000000) != 0 || !(v7 & 0x2000000000000000 | v1 & 0x1000000000000000))
  {
    sub_23EC2EB40();
    swift_bridgeObjectRelease();
    v3 = LOBYTE(v8[0]);
  }
  else if ((v7 & 0x2000000000000000) != 0)
  {
    v8[0] = v1;
    v8[1] = v7 & 0xFFFFFFFFFFFFFFLL;
    v3 = (v1 > 0x20u || ((0x100003E01uLL >> v1) & 1) == 0)
      && (v5 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
      && *v5 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
      v2 = (_BYTE *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v2 = (_BYTE *)sub_23EC2EBA0();
    sub_23EBEA668(v2, (BOOL *)v8);
    v3 = LOBYTE(v8[0]);
    swift_bridgeObjectRelease();
  }
  if (v3)
    return 0;
  else
    return 0;
}

uint64_t Claim.integer.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char v7;
  char v8;
  double v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[3];
  uint64_t v27;

  sub_23EBA5560(v0, (uint64_t)v26);
  if (v27)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      result = v24;
      v2 = HIBYTE(v25) & 0xF;
      v3 = v24 & 0xFFFFFFFFFFFFLL;
      if ((v25 & 0x2000000000000000) != 0)
        v4 = HIBYTE(v25) & 0xF;
      else
        v4 = v24 & 0xFFFFFFFFFFFFLL;
      if (v4)
      {
        if ((v25 & 0x1000000000000000) != 0)
        {
          v6 = (uint64_t)sub_23EBE9DBC(v24, v25, 10);
          v8 = v23;
LABEL_62:
          swift_bridgeObjectRelease();
          if ((v8 & 1) != 0)
            return 0;
          else
            return v6;
        }
        if ((v25 & 0x2000000000000000) == 0)
        {
          if ((v24 & 0x1000000000000000) != 0)
            v5 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v5 = (unsigned __int8 *)sub_23EC2EBA0();
          v6 = (uint64_t)sub_23EBE9EA0(v5, v3, 10);
          v8 = v7 & 1;
          goto LABEL_62;
        }
        v26[0] = v24;
        v26[1] = v25 & 0xFFFFFFFFFFFFFFLL;
        if (v24 == 43)
        {
          if (!v2)
            goto LABEL_78;
          if (v2 == 1 || (BYTE1(v24) - 48) > 9u)
            goto LABEL_49;
          v6 = (BYTE1(v24) - 48);
          if (v2 != 2)
          {
            if ((BYTE2(v24) - 48) > 9u)
              goto LABEL_49;
            v6 = 10 * (BYTE1(v24) - 48) + (BYTE2(v24) - 48);
            v11 = v2 - 3;
            if (v11)
            {
              v12 = (unsigned __int8 *)v26 + 3;
              while (1)
              {
                v13 = *v12 - 48;
                if (v13 > 9)
                  goto LABEL_49;
                v14 = 10 * v6;
                if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
                  goto LABEL_49;
                v6 = v14 + v13;
                if (__OFADD__(v14, v13))
                  goto LABEL_49;
                v8 = 0;
                ++v12;
                if (!--v11)
                  goto LABEL_62;
              }
            }
          }
        }
        else
        {
          if (v24 == 45)
          {
            if (v2)
            {
              if (v2 != 1 && (BYTE1(v24) - 48) <= 9u)
              {
                if (v2 == 2)
                {
                  v8 = 0;
                  v6 = -(uint64_t)(BYTE1(v24) - 48);
                  goto LABEL_62;
                }
                if ((BYTE2(v24) - 48) <= 9u)
                {
                  v6 = -10 * (BYTE1(v24) - 48) - (BYTE2(v24) - 48);
                  v19 = v2 - 3;
                  if (!v19)
                    goto LABEL_61;
                  v20 = (unsigned __int8 *)v26 + 3;
                  while (1)
                  {
                    v21 = *v20 - 48;
                    if (v21 > 9)
                      break;
                    v22 = 10 * v6;
                    if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
                      break;
                    v6 = v22 - v21;
                    if (__OFSUB__(v22, v21))
                      break;
                    v8 = 0;
                    ++v20;
                    if (!--v19)
                      goto LABEL_62;
                  }
                }
              }
LABEL_49:
              v6 = 0;
              v8 = 1;
              goto LABEL_62;
            }
            __break(1u);
LABEL_78:
            __break(1u);
            return result;
          }
          if (!v2 || (v24 - 48) > 9u)
            goto LABEL_49;
          v6 = (v24 - 48);
          if (v2 != 1)
          {
            if ((BYTE1(v24) - 48) > 9u)
              goto LABEL_49;
            v6 = 10 * (v24 - 48) + (BYTE1(v24) - 48);
            v15 = v2 - 2;
            if (v15)
            {
              v16 = (unsigned __int8 *)v26 + 2;
              while (1)
              {
                v17 = *v16 - 48;
                if (v17 > 9)
                  goto LABEL_49;
                v18 = 10 * v6;
                if ((unsigned __int128)(v6 * (__int128)10) >> 64 != (10 * v6) >> 63)
                  goto LABEL_49;
                v6 = v18 + v17;
                if (__OFADD__(v18, v17))
                  goto LABEL_49;
                v8 = 0;
                ++v16;
                if (!--v15)
                  goto LABEL_62;
              }
            }
          }
        }
LABEL_61:
        v8 = 0;
        goto LABEL_62;
      }
      goto LABEL_74;
    }
  }
  else
  {
    sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
  }
  v9 = COERCE_DOUBLE(Claim.double.getter());
  if ((v10 & 1) == 0)
  {
    if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -9.22337204e18)
      {
        if (v9 < 9.22337204e18)
          return (uint64_t)v9;
        goto LABEL_73;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    swift_bridgeObjectRelease();
    return 0;
  }
  sub_23EBA5560(v0, (uint64_t)v26);
  if (v27)
  {
    if ((swift_dynamicCast() & 1) != 0)
      return 0;
  }
  else
  {
    sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
  }
  sub_23EBA5560(v0, (uint64_t)v26);
  if (!v27)
  {
    sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
    return 0;
  }
  if (swift_dynamicCast())
    return v24;
  else
    return 0;
}

uint64_t sub_23EBE953C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = sub_23EC2E7C8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1;
  v21 = a2;
  v18 = 45;
  v19 = 0xE100000000000000;
  v16 = 43;
  v17 = 0xE100000000000000;
  sub_23EBAFA74();
  v20 = sub_23EC2EA98();
  v21 = v8;
  v18 = 95;
  v19 = 0xE100000000000000;
  v16 = 47;
  v17 = 0xE100000000000000;
  v9 = sub_23EC2EA98();
  v11 = v10;
  swift_bridgeObjectRelease();
  v20 = v9;
  v21 = v11;
  v18 = v9;
  v19 = v11;
  swift_bridgeObjectRetain();
  sub_23EC2E7B0();
  v12 = sub_23EC2EA8C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = swift_bridgeObjectRelease();
  v14 = ceil((double)v12 * 0.25) * 4.0 - (double)v12;
  if (v14 <= 0.0)
    goto LABEL_6;
  v18 = 0;
  v19 = 0xE000000000000000;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v14 < 9.22337204e18)
  {
    v16 = 61;
    v17 = 0xE100000000000000;
    sub_23EC2EAC8();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
LABEL_6:
    v15 = sub_23EC2E288();
    swift_bridgeObjectRelease();
    return v15;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t DecodeError.localizedDescription.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 24) && *(_BYTE *)(v0 + 24) != 1)
  {
    sub_23EC2EB4C();
    sub_23EC2E834();
    sub_23EC2E834();
    sub_23EC2E834();
    sub_23EC2ED20();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23EC2EB4C();
    sub_23EC2E834();
  }
  sub_23EC2E834();
  return 0;
}

uint64_t EncodeError.localizedDescription.getter()
{
  sub_23EC2EB4C();
  sub_23EC2E834();
  sub_23EC2E834();
  return 0;
}

_QWORD *sub_23EBE99C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBE0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23EBE9A24(uint64_t a1, uint64_t a2)
{
  return sub_23EBE9B38(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
}

uint64_t sub_23EBE9A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EBE9A80(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

unint64_t sub_23EBE9AB0()
{
  unint64_t result;

  result = qword_256DB87E0;
  if (!qword_256DB87E0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for EncodeError, &type metadata for EncodeError);
    atomic_store(result, &qword_256DB87E0);
  }
  return result;
}

unint64_t sub_23EBE9AF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23EC2EAF8();
  return sub_23EBE9C90(a1, v2);
}

uint64_t sub_23EBE9B24(uint64_t a1, uint64_t a2)
{
  return sub_23EBE9B38(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_23EBE9BB0);
}

uint64_t sub_23EBE9B38(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_23EC2EDB0();
  a3(v10, a1, a2);
  v7 = sub_23EC2EDC8();
  return a4(a1, a2, v7);
}

unint64_t sub_23EBE9BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23EC2ED38() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23EC2ED38() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23EBE9C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_23EBEAEA8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x24265B10C](v9, a1);
      sub_23EBE098C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

_BYTE *sub_23EBE9D54@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unsigned __int8 *sub_23EBE9DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23EC2E8C4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23EBEA11C();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23EC2EBA0();
  }
LABEL_7:
  v11 = sub_23EBE9EA0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_23EBE9EA0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_23EBEA11C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_23EC2E8D0();
  v4 = sub_23EBEA198(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23EBEA198(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_23EBEA2DC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_23EBE99C0(v9, 0);
      v12 = sub_23EBEA3C8((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24265AE00](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24265AE00);
LABEL_9:
      sub_23EC2EBA0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24265AE00]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_23EBEA2DC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_23EC0EC48(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_23EC0EC48(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_23EC2E87C();
  }
  __break(1u);
  return result;
}

unint64_t sub_23EBEA3C8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_23EC0EC48(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_23EC2E888();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_23EC2EBA0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_23EC0EC48(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_23EC2E864();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23EBEA5D8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_23EBEA62C@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

_BYTE *sub_23EBEA668@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t destroy for JWToken()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for JWToken(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for JWToken(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for JWToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JWToken(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JWToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for JWToken()
{
  return &type metadata for JWToken;
}

uint64_t dispatch thunk of JWT.header.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of JWT.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of JWT.signature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of JWT.string.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of JWT.expiresAt.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of JWT.issuer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of JWT.subject.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of JWT.audience.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of JWT.issuedAt.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of JWT.notBefore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of JWT.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of JWT.expired.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t destroy for Claim(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t initializeWithCopy for Claim(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for Claim(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for Claim(uint64_t a1, _OWORD *a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for Claim(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Claim(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Claim()
{
  return &type metadata for Claim;
}

uint64_t sub_23EBEAC90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for DecodeError(uint64_t a1)
{
  return sub_23EBEACBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_23EBEACBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for DecodeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23EBEAC90(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for DecodeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_23EBEAC90(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_23EBEACBC(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for DecodeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_23EBEACBC(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DecodeError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DecodeError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_23EBEAE78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_23EBEAE80(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DecodeError()
{
  return &type metadata for DecodeError;
}

ValueMetadata *type metadata accessor for EncodeError()
{
  return &type metadata for EncodeError;
}

uint64_t sub_23EBEAEA8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_23EBEAEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v4[6] = swift_task_alloc();
  v5 = sub_23EC2DFA0();
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v4[11] = swift_task_alloc();
  v6 = sub_23EC2E264();
  v4[12] = v6;
  v4[13] = *(_QWORD *)(v6 - 8);
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBEAFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 88), &qword_25433F930);
    if (qword_256DB71E0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC76F0);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for Address Verification API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

  }
  else
  {
    v8 = *(void **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    v9 = objc_msgSend(v8, sel_data);
    if (v9)
    {
      v10 = v9;
      v12 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 120);
      v13 = *(_QWORD *)(v0 + 96);
      v14 = *(_QWORD *)(v0 + 104);
      v15 = *(_QWORD *)(v0 + 72);
      v16 = sub_23EC2E2D0();
      v18 = v17;

      *(_QWORD *)(v0 + 128) = v16;
      *(_QWORD *)(v0 + 136) = v18;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
      sub_23EC2DF58();
      sub_23EC2DF40();
      sub_23EBA3E98(v16, v18);
      sub_23EC2DF88();
      sub_23EC0A4E0(v15);
      v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E58 + dword_256DB7E58);
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v19;
      *v19 = v0;
      v19[1] = sub_23EBEB340;
      return v28(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 32));
    }
    if (qword_256DB71E0 != -1)
      swift_once();
    v21 = sub_23EC2E684();
    __swift_project_value_buffer(v21, (uint64_t)qword_256DC76F0);
    v22 = sub_23EC2E66C();
    v23 = sub_23EC2EA08();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_23EB9F000, v22, v23, "Unable to encode service address to data", v24, 2u);
      MEMORY[0x24265B940](v24, -1, -1);
    }
    v25 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEB340()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[8];
  v3 = v2[9];
  v5 = v2[7];
  if (v0)
  {

    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[20] = v6;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[19] = v6;
  }
  v6(v3, v5);
  return swift_task_switch();
}

uint64_t sub_23EBEB3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  if (v4 == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71E0 != -1)
      swift_once();
    v6 = v5;
    v7 = sub_23EC2E684();
    __swift_project_value_buffer(v7, (uint64_t)qword_256DC76F0);
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Unable to address verification request", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 56);

    sub_23EBA3EDC(v12, v11);
    v6(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    v18 = 1;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 96);
    v25 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 16), v3, v1);
    sub_23EC2DF94();
    sub_23EBA3EDC(v20, v19);
    v5(v22, v1);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v24);
    v18 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 16), v18, 1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEB63C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 48), 1, 1, *(_QWORD *)(v0 + 56));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  sub_23EBA3038(*(_QWORD *)(v0 + 48), &qword_25433F918);
  if (qword_256DB71E0 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC76F0);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Unable to address verification request", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 56);

  sub_23EBA3EDC(v7, v6);
  v1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEB7EC()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v26[44];

  v26[43] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB87D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(inited + 32) = 0x73736572646461;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_23EC32580;
  strcpy((char *)(v2 + 32), "addressLine1");
  *(_BYTE *)(v2 + 45) = 0;
  *(_WORD *)(v2 + 46) = -5120;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1 + 8);
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine1);
  *(_QWORD *)(v2 + 56) = v3;
  strcpy((char *)(v2 + 64), "addressLine2");
  *(_BYTE *)(v2 + 77) = 0;
  *(_WORD *)(v2 + 78) = -5120;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2 + 8))
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine2 + 8);
  }
  else
  {
    v4 = 0;
    v5 = 0xE000000000000000;
  }
  *(_QWORD *)(v2 + 80) = v4;
  *(_QWORD *)(v2 + 88) = v5;
  strcpy((char *)(v2 + 96), "addressLine3");
  *(_BYTE *)(v2 + 109) = 0;
  *(_WORD *)(v2 + 110) = -5120;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3 + 8))
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3);
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_addressLine3 + 8);
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)(v2 + 112) = v6;
  *(_QWORD *)(v2 + 120) = v7;
  *(_QWORD *)(v2 + 128) = 2037672291;
  *(_QWORD *)(v2 + 136) = 0xE400000000000000;
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city + 8);
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_city);
  *(_QWORD *)(v2 + 152) = v8;
  *(_QWORD *)(v2 + 160) = 0x6574617473;
  *(_QWORD *)(v2 + 168) = 0xE500000000000000;
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state + 8);
  *(_QWORD *)(v2 + 176) = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_state);
  *(_QWORD *)(v2 + 184) = v9;
  *(_QWORD *)(v2 + 192) = 0x6F436C6174736F70;
  *(_QWORD *)(v2 + 200) = 0xEA00000000006564;
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode + 8);
  *(_QWORD *)(v2 + 208) = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_postalCode);
  *(_QWORD *)(v2 + 216) = v10;
  *(_QWORD *)(v2 + 224) = 0x7972746E756F63;
  *(_QWORD *)(v2 + 232) = 0xE700000000000000;
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC19HomeUtilityServices21UtilityServiceAddress_country + 8);
  *(_QWORD *)(v2 + 240) = v11;
  *(_QWORD *)(v2 + 248) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_23EBA7540(v2);
  *(_QWORD *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7920);
  *(_QWORD *)(inited + 48) = v13;
  sub_23EBA740C(inited);
  v14 = (void *)objc_opt_self();
  v15 = (void *)sub_23EC2E714();
  swift_bridgeObjectRelease();
  v26[0] = 0;
  v16 = objc_msgSend(v14, sel_dataWithJSONObject_options_error_, v15, 0, v26);

  v17 = v26[0];
  if (v16)
  {
    v18 = sub_23EC2E2D0();

  }
  else
  {
    v19 = v17;
    v20 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB71E0 != -1)
      swift_once();
    v21 = sub_23EC2E684();
    __swift_project_value_buffer(v21, (uint64_t)qword_256DC76F0);
    v22 = sub_23EC2E66C();
    v23 = sub_23EC2EA08();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_23EB9F000, v22, v23, "Unable to encode service Address to Request Payload!!!", v24, 2u);
      MEMORY[0x24265B940](v24, -1, -1);
    }

    return 0;
  }
  return v18;
}

uint64_t sub_23EBEBC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[18] = a8;
  v8[19] = v12;
  v8[16] = a6;
  v8[17] = a7;
  v8[14] = a4;
  v8[15] = a5;
  v8[12] = a2;
  v8[13] = a3;
  v8[11] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[20] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  v8[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v8[27] = swift_task_alloc();
  v10 = sub_23EC2E264();
  v8[28] = v10;
  v8[29] = *(_QWORD *)(v10 - 8);
  v8[30] = swift_task_alloc();
  v8[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBEBDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 216), &qword_25433F930);
    if (qword_256DB7218 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7798);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for auth token refresh API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 240);
    v12 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    v48 = *(_QWORD *)(v0 + 136);
    v47 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 32))(v12, *(_QWORD *)(v0 + 216), v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v12, v14);
    sub_23EC2DF58();
    sub_23EC0A4E0(v16);
    v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    *(_QWORD *)(v0 + 256) = v20;
    v20(v17, v19);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v21(v15, v16, v19);
    sub_23EC2DF70();
    v20(v16, v19);
    v21(v46, v15, v19);
    sub_23EC2DF70();
    v20(v15, v19);
    sub_23EC2DF40();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
    *(_QWORD *)(inited + 32) = 0xD000000000000012;
    *(_QWORD *)(inited + 40) = 0x800000023EC38AE0;
    *(_QWORD *)(inited + 48) = v47;
    *(_QWORD *)(inited + 56) = v48;
    swift_bridgeObjectRetain();
    sub_23EBA7540(inited);
    v23 = (void *)objc_opt_self();
    v24 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = 0;
    v25 = objc_msgSend(v23, sel_dataWithJSONObject_options_error_, v24, 0, v0 + 80);

    v26 = *(id *)(v0 + 80);
    if (v25)
    {
      v27 = sub_23EC2E2D0();
      v29 = v28;

      *(_QWORD *)(v0 + 264) = v27;
      *(_QWORD *)(v0 + 272) = v29;
      sub_23EBA3E98(v27, v29);
      sub_23EC2DF88();
      v30 = dword_256DB7E30;
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 280) = v31;
      *v31 = v0;
      v31[1] = sub_23EBEC348;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E30 + v30))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 144));
    }
    v33 = v26;
    v34 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB7218 != -1)
      swift_once();
    v35 = sub_23EC2E684();
    __swift_project_value_buffer(v35, (uint64_t)qword_256DC7798);
    v36 = sub_23EC2E66C();
    v37 = sub_23EC2EA08();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_23EB9F000, v36, v37, "Unable to encode Token request body", v38, 2u);
      MEMORY[0x24265B940](v38, -1, -1);
    }
    v39 = *(_QWORD *)(v0 + 248);
    v40 = *(_QWORD *)(v0 + 224);
    v41 = *(_QWORD *)(v0 + 232);
    v42 = *(_QWORD *)(v0 + 208);
    v43 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 88);

    v20(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, 1, 1, v43);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEC348()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23EBEC3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB7218 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7798);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to sign authorization token refresh request", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 272);
    v10 = *(_QWORD *)(v0 + 248);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
    v12 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 208);
    v15 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 88);

    sub_23EBA3EDC(v9, v8);
    v11(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, 1, 1, v15);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 272);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
    v19 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v21, v3, v1);
    sub_23EC2DF94();
    sub_23EBA3EDC(v17, v16);
    v18(v20, v1);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v21, 0, 1, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEC69C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 168));
  sub_23EBA3038(*(_QWORD *)(v0 + 160), &qword_25433F918);
  if (qword_256DB7218 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7798);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to sign authorization token refresh request", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 248);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 256);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 232);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 176);
  v15 = *(_QWORD *)(v0 + 88);

  sub_23EBA3EDC(v6, v5);
  v8(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UtilityLookupError.hash(into:)()
{
  return sub_23EC2EDBC();
}

BOOL static UtilityLookupError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t UtilityLookupError.hashValue.getter()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EBEC910(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8828);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF2F08();
  sub_23EC2EDE0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB10);
  sub_23EBF3208(&qword_256DB8830, (uint64_t (*)(void))sub_23EBF3270, MEMORY[0x24BEE12A0]);
  sub_23EC2ED08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23EBECA2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8820);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF31C4();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23EBECB6C()
{
  unint64_t result;

  result = qword_256DB87F8;
  if (!qword_256DB87F8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityLookupError, &type metadata for UtilityLookupError);
    atomic_store(result, (unint64_t *)&qword_256DB87F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UtilityLookupError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EBECBFC + 4 * byte_23EC340A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EBECC30 + 4 * asc_23EC340A0[v4]))();
}

uint64_t sub_23EBECC30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBECC38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBECC40);
  return result;
}

uint64_t sub_23EBECC4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBECC54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EBECC58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBECC60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityLookupError()
{
  return &type metadata for UtilityLookupError;
}

uint64_t sub_23EBECC7C()
{
  return 0x656974696C697475;
}

uint64_t sub_23EBECC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656974696C697475 && a2 == 0xE900000000000073)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23EBECD38()
{
  sub_23EBF2F08();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBECD60()
{
  sub_23EBF2F08();
  return sub_23EC2EE04();
}

_QWORD *sub_23EBECD88@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EBF2DC4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EBECDB0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBEC910(a1, *v1);
}

uint64_t sub_23EBECDC8()
{
  sub_23EBF31C4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBECDF0()
{
  sub_23EBF31C4();
  return sub_23EC2EE04();
}

double sub_23EBECE18@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_23EBF2F90(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_23EBECE58(_QWORD *a1)
{
  return sub_23EBECA2C(a1);
}

uint64_t sub_23EBECE6C(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 184) = a1;
  *(double *)(v3 + 168) = a2;
  *(double *)(v3 + 176) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  *(_QWORD *)(v3 + 192) = swift_task_alloc();
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  *(_QWORD *)(v3 + 208) = swift_task_alloc();
  *(_QWORD *)(v3 + 216) = swift_task_alloc();
  v4 = type metadata accessor for UtilityServicesConfigurationsModel();
  *(_QWORD *)(v3 + 224) = v4;
  *(_QWORD *)(v3 + 232) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 240) = swift_task_alloc();
  *(_QWORD *)(v3 + 248) = swift_task_alloc();
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  v5 = sub_23EC2E264();
  *(_QWORD *)(v3 + 272) = v5;
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  *(_QWORD *)(v3 + 328) = swift_task_alloc();
  v6 = sub_23EC2E3CC();
  *(_QWORD *)(v3 + 336) = v6;
  *(_QWORD *)(v3 + 344) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBED044()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  unsigned int v17;
  __CFString *v18;
  __CFString *v19;
  CFPropertyListRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(uint64_t, uint64_t);
  __objc2_meth_list **p_base_meths;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  __objc2_meth_list **v47;
  __objc2_meth_list *v48;
  __objc2_meth_list *v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  char v63;
  char *v64;
  char v65;
  _QWORD *v66;
  void (*v67)(uint64_t, uint64_t);
  __objc2_meth_list **v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __CFString *v75;
  __CFString *v76;
  CFPropertyListRef v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  _BYTE *v98;
  CLLocationDegrees v99;
  CLLocationDegrees v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  char v124;
  char *v125;
  char v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v2 = *(double *)(v0 + 168);
  v1 = *(double *)(v0 + 176);
  type metadata accessor for Geohash();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  sub_23EC204F4(12, v2, v1);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = sub_23EC233C4(2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = MEMORY[0x24265ADE8](v4, v6, v8, v10);
  v13 = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 368) = v11;
  *(_QWORD *)(v0 + 376) = v13;
  if (qword_25433FB40 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  *(_QWORD *)(v0 + 16) = v11;
  *(_QWORD *)(v0 + 24) = v13;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 432) = 1;
  v14 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v15 = objc_msgSend(v14, sel_defaultManager);
  v16 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, sel_fileExistsAtPath_isDirectory_, v16, v0 + 432);

  if (!v17)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v40 = sub_23EC2E684();
    __swift_project_value_buffer(v40, (uint64_t)qword_256DC7690);
    v41 = sub_23EC2E66C();
    v42 = sub_23EC2EA08();
    if (!os_log_type_enabled(v41, v42))
      goto LABEL_70;
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    v44 = "Unable to find GeoHash 2 folder on disk. Proceed to fetch new file.";
    goto LABEL_69;
  }
  sub_23EBD0CC0();
  v18 = (__CFString *)sub_23EC2E774();
  v19 = (__CFString *)sub_23EC2E774();
  v20 = CFPreferencesCopyAppValue(v18, v19);

  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v0 + 336);
  v22 = *(_QWORD *)(v0 + 344);
  v23 = *(_QWORD *)(v0 + 328);
  if (!v20)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v22 + 56))(*(_QWORD *)(v0 + 328), 1, 1, *(_QWORD *)(v0 + 336));
    goto LABEL_61;
  }
  *(_QWORD *)(v0 + 160) = v20;
  v24 = swift_dynamicCast();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v23, v24 ^ 1u, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) == 1)
  {
LABEL_61:
    sub_23EBA3038(*(_QWORD *)(v0 + 328), &qword_25433F948);
    goto LABEL_62;
  }
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD *)(v0 + 344);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v27 + 32))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 328), v26);
  sub_23EC2E39C();
  v28 = sub_23EC2E360();
  v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v29(v25, v26);
  if ((v28 & 1) == 0)
  {
    v29(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 336));
LABEL_62:
    sub_23EBD0C44();
    v75 = (__CFString *)sub_23EC2E774();
    v76 = (__CFString *)sub_23EC2E774();
    v77 = CFPreferencesCopyAppValue(v75, v76);

    swift_bridgeObjectRelease();
    if (v77)
    {
      *(_QWORD *)(v0 + 152) = v77;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v78 = *(_QWORD *)(v0 + 96);
        v79 = *(_QWORD *)(v0 + 104);
        v80 = 1;
LABEL_71:
        *(_BYTE *)(v0 + 433) = v80;
        *(_QWORD *)(v0 + 384) = v78;
        *(_QWORD *)(v0 + 392) = v79;
        v82 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 400) = v82;
        *v82 = v0;
        v82[1] = sub_23EBEE578;
        return sub_23EBD176C(*(_QWORD *)(v0 + 184));
      }
    }
    if (qword_256DB71B0 != -1)
      swift_once();
    v81 = sub_23EC2E684();
    __swift_project_value_buffer(v81, (uint64_t)qword_256DC7690);
    v41 = sub_23EC2E66C();
    v42 = sub_23EC2EA08();
    if (!os_log_type_enabled(v41, v42))
    {
LABEL_70:

      v78 = 0;
      v79 = 0;
      v80 = 0;
      goto LABEL_71;
    }
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    v44 = "Geohash folder exist, but no ETag for geohash stored in disk.";
LABEL_69:
    _os_log_impl(&dword_23EB9F000, v41, v42, v44, v43, 2u);
    MEMORY[0x24265B940](v43, -1, -1);
    goto LABEL_70;
  }
  swift_bridgeObjectRelease();
  p_base_meths = &StreamReader.base_meths;
  if (qword_256DB71B0 != -1)
    goto LABEL_140;
  while (1)
  {
    v152 = sub_23EC2E684();
    __swift_project_value_buffer(v152, (uint64_t)qword_256DC7690);
    v31 = sub_23EC2E66C();
    v32 = sub_23EC2EA14();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_23EB9F000, v31, v32, "Geohash folder exist, and valid. Use local geohash tiles. Skipping fetching", v33, 2u);
      MEMORY[0x24265B940](v33, -1, -1);
    }
    v34 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 336);

    v29(v34, v35);
    v36 = sub_23EBE3964();
    if (!v36)
      break;
    v37 = *(_QWORD *)(v36 + 16);
    if (!v37)
    {
      v153 = MEMORY[0x24BEE4AF8];
LABEL_81:
      swift_bridgeObjectRelease();
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v153);
    }
    v38 = 0;
    v150 = *(_QWORD *)(v0 + 264);
    v154 = *(_QWORD *)(v0 + 232);
    p_base_meths = (__objc2_meth_list **)(v36 + 32);
    v153 = MEMORY[0x24BEE4AF8];
    v39 = v152;
    while (1)
    {
      v46 = *(_QWORD *)(v0 + 216);
      v45 = *(_QWORD *)(v0 + 224);
      v47 = &p_base_meths[2 * v38];
      v48 = *v47;
      v49 = v47[1];
      swift_bridgeObjectRetain();
      sub_23EBD2A34(v46);
      v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48);
      if (v50(v46, 1, v45) != 1)
        break;
      sub_23EBA3038(*(_QWORD *)(v0 + 216), &qword_25433FA30);
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v39, (uint64_t)qword_25433FC80);
      v51 = sub_23EC2E66C();
      v52 = sub_23EC2EA08();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        _os_log_impl(&dword_23EB9F000, v51, v52, "Unable to retrieve configuration to check if utility is disabled or not.", v53, 2u);
        MEMORY[0x24265B940](v53, -1, -1);
      }

LABEL_18:
      swift_bridgeObjectRelease();
LABEL_19:
      if (++v38 == v37)
        goto LABEL_81;
    }
    v54 = *(_QWORD *)(v0 + 224);
    v55 = *(_QWORD *)(v0 + 208);
    sub_23EBBC840(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 264));
    sub_23EBD2A34(v55);
    if (v50(v55, 1, v54) == 1)
    {
      sub_23EBA3038(*(_QWORD *)(v0 + 208), &qword_25433FA30);
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v39, (uint64_t)qword_25433FC80);
      v56 = sub_23EC2E66C();
      v57 = sub_23EC2EA08();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v58 = 0;
        _os_log_impl(&dword_23EB9F000, v56, v57, "Unable to retrieve configuration to check if utility is disabled or not.", v58, 2u);
        MEMORY[0x24265B940](v58, -1, -1);
      }

LABEL_31:
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v39, (uint64_t)qword_25433FC80);
      v59 = sub_23EC2E66C();
      v60 = sub_23EC2EA14();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_23EB9F000, v59, v60, "All Utilities are disabled!!!", v61, 2u);
        MEMORY[0x24265B940](v61, -1, -1);
      }
      v62 = *(_QWORD *)(v0 + 264);

      sub_23EBF2D24(v62, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      goto LABEL_18;
    }
    sub_23EBBC840(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 256));
    v63 = sub_23EBD0F00();
    v64 = *(char **)(v0 + 256);
    if ((v63 & 1) == 0)
    {
      v65 = *v64;
      sub_23EBF2D24((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      if ((v65 & 1) != 0)
        goto LABEL_39;
      goto LABEL_31;
    }
    sub_23EBF2D24((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_39:
    v66 = *(_QWORD **)(v150 + 16);
    if (!v66)
      goto LABEL_55;
    v67 = (void (*)(uint64_t, uint64_t))v66[2];
    if (!v67)
      goto LABEL_55;
    if ((__objc2_meth_list *)v66[4] == v48 && (__objc2_meth_list *)v66[5] == v49 || (sub_23EC2ED38() & 1) != 0)
    {
LABEL_44:
      sub_23EBF2D24(*(_QWORD *)(v0 + 264), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      swift_bridgeObjectRelease();
      v39 = v152;
      goto LABEL_19;
    }
    v39 = v152;
    if (v67 == (void (*)(uint64_t, uint64_t))1)
    {
LABEL_55:
      sub_23EBF2D24(*(_QWORD *)(v0 + 264), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      v71 = v153;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23EBAECC0(0, *(_QWORD *)(v153 + 16) + 1, 1);
        v71 = v153;
      }
      v73 = *(_QWORD *)(v71 + 16);
      v72 = *(_QWORD *)(v71 + 24);
      if (v73 >= v72 >> 1)
      {
        sub_23EBAECC0(v72 > 1, v73 + 1, 1);
        v71 = v153;
      }
      *(_QWORD *)(v71 + 16) = v73 + 1;
      v153 = v71;
      v74 = v71 + 16 * v73;
      *(_QWORD *)(v74 + 32) = v48;
      *(_QWORD *)(v74 + 40) = v49;
      goto LABEL_19;
    }
    v68 = (__objc2_meth_list **)(v66 + 7);
    v69 = 1;
    while (1)
    {
      v29 = (void (*)(uint64_t, uint64_t))(v69 + 1);
      if (__OFADD__(v69, 1))
        break;
      v70 = *(v68 - 1) == v48 && *v68 == v49;
      if (v70 || (sub_23EC2ED38() & 1) != 0)
        goto LABEL_44;
      ++v69;
      v68 += 2;
      v70 = v29 == v67;
      v39 = v152;
      if (v70)
        goto LABEL_55;
    }
    __break(1u);
LABEL_140:
    swift_once();
  }
  v84 = *(_QWORD *)(v0 + 304);
  v86 = *(_QWORD *)(v0 + 272);
  v85 = *(_QWORD *)(v0 + 280);
  sub_23EC23540(v84, *(double *)(v0 + 168), *(double *)(v0 + 176));
  v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v84, 1, v86);
  v88 = *(_QWORD *)(v0 + 304);
  if (v87 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EBA3038(v88, &qword_25433F930);
    v89 = v152;
    if (p_base_meths[54] != (__objc2_meth_list *)-1)
      goto LABEL_142;
    goto LABEL_75;
  }
  v100 = *(double *)(v0 + 168);
  v99 = *(double *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 272));
  v101 = sub_23EBA41C4(v100, v99);
  sub_23EBE3C4C((uint64_t)v101);
  v102 = v152;
  if (!v101)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (p_base_meths[54] != (__objc2_meth_list *)-1)
      swift_once();
    __swift_project_value_buffer(v152, (uint64_t)qword_256DC7690);
    v136 = sub_23EC2E66C();
    v137 = sub_23EC2EA08();
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v138 = 0;
      _os_log_impl(&dword_23EB9F000, v136, v137, "No Utility Territory found for provided coordinates", v138, 2u);
      MEMORY[0x24265B940](v138, -1, -1);
    }

    v139 = sub_23EC2E66C();
    v140 = sub_23EC2E9FC();
    if (os_log_type_enabled(v139, v140))
    {
      v142 = *(_QWORD *)(v0 + 168);
      v141 = *(_QWORD *)(v0 + 176);
      v143 = swift_slowAlloc();
      *(_DWORD *)v143 = 134218240;
      *(_QWORD *)(v0 + 136) = v142;
      sub_23EC2EA68();
      *(_WORD *)(v143 + 12) = 2048;
      *(_QWORD *)(v0 + 144) = v141;
      sub_23EC2EA68();
      _os_log_impl(&dword_23EB9F000, v139, v140, "Utility Territory not found for coordinate %f:%f", (uint8_t *)v143, 0x16u);
      MEMORY[0x24265B940](v143, -1, -1);
    }
    v145 = *(_QWORD *)(v0 + 280);
    v144 = *(_QWORD *)(v0 + 288);
    v146 = *(_QWORD *)(v0 + 272);

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v144, v146);
    goto LABEL_136;
  }
  v103 = v101[2];
  if (!v103)
  {
    v153 = MEMORY[0x24BEE4AF8];
LABEL_138:
    v148 = *(_QWORD *)(v0 + 280);
    v147 = *(_QWORD *)(v0 + 288);
    v149 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v149);
    goto LABEL_82;
  }
  v104 = 0;
  v151 = *(_QWORD *)(v0 + 248);
  v155 = *(_QWORD *)(v0 + 232);
  v105 = v101 + 4;
  v153 = MEMORY[0x24BEE4AF8];
  while (2)
  {
    v106 = *(_QWORD *)(v0 + 224);
    v107 = *(_QWORD *)(v0 + 200);
    v108 = &v105[2 * v104];
    v109 = *v108;
    v110 = v108[1];
    swift_bridgeObjectRetain();
    sub_23EBD2A34(v107);
    v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
    if (v111(v107, 1, v106) == 1)
    {
      sub_23EBA3038(*(_QWORD *)(v0 + 200), &qword_25433FA30);
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v102, (uint64_t)qword_25433FC80);
      v112 = sub_23EC2E66C();
      v113 = sub_23EC2EA08();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v114 = 0;
        _os_log_impl(&dword_23EB9F000, v112, v113, "Unable to retrieve configuration to check if utility is disabled or not.", v114, 2u);
        MEMORY[0x24265B940](v114, -1, -1);
      }

      goto LABEL_87;
    }
    v115 = *(_QWORD *)(v0 + 224);
    v116 = *(_QWORD *)(v0 + 192);
    sub_23EBBC840(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 248));
    sub_23EBD2A34(v116);
    if (v111(v116, 1, v115) == 1)
    {
      sub_23EBA3038(*(_QWORD *)(v0 + 192), &qword_25433FA30);
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v102, (uint64_t)qword_25433FC80);
      v117 = sub_23EC2E66C();
      v118 = sub_23EC2EA08();
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v119 = 0;
        _os_log_impl(&dword_23EB9F000, v117, v118, "Unable to retrieve configuration to check if utility is disabled or not.", v119, 2u);
        MEMORY[0x24265B940](v119, -1, -1);
      }

      goto LABEL_100;
    }
    sub_23EBBC840(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 240));
    v124 = sub_23EBD0F00();
    v125 = *(char **)(v0 + 240);
    if ((v124 & 1) == 0)
    {
      v126 = *v125;
      sub_23EBF2D24((uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      if ((v126 & 1) != 0)
        goto LABEL_108;
LABEL_100:
      if (qword_25433FAE8 != -1)
        swift_once();
      __swift_project_value_buffer(v102, (uint64_t)qword_25433FC80);
      v120 = sub_23EC2E66C();
      v121 = sub_23EC2EA14();
      if (os_log_type_enabled(v120, v121))
      {
        v122 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v122 = 0;
        _os_log_impl(&dword_23EB9F000, v120, v121, "All Utilities are disabled!!!", v122, 2u);
        MEMORY[0x24265B940](v122, -1, -1);
      }
      v123 = *(_QWORD *)(v0 + 248);

      sub_23EBF2D24(v123, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_87:
      swift_bridgeObjectRelease();
LABEL_88:
      if (++v104 == v103)
        goto LABEL_138;
      continue;
    }
    break;
  }
  sub_23EBF2D24((uint64_t)v125, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_108:
  v127 = *(_QWORD **)(v151 + 16);
  if (!v127)
    goto LABEL_124;
  v89 = v127[2];
  if (!v89)
    goto LABEL_124;
  if (v127[4] == v109 && v127[5] == v110 || (sub_23EC2ED38() & 1) != 0)
  {
LABEL_113:
    sub_23EBF2D24(*(_QWORD *)(v0 + 248), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
    swift_bridgeObjectRelease();
    v102 = v152;
    goto LABEL_88;
  }
  v102 = v152;
  if (v89 == 1)
  {
LABEL_124:
    sub_23EBF2D24(*(_QWORD *)(v0 + 248), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
    v132 = v153;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23EBAECC0(0, *(_QWORD *)(v153 + 16) + 1, 1);
      v132 = v153;
    }
    v134 = *(_QWORD *)(v132 + 16);
    v133 = *(_QWORD *)(v132 + 24);
    if (v134 >= v133 >> 1)
    {
      sub_23EBAECC0(v133 > 1, v134 + 1, 1);
      v132 = v153;
    }
    *(_QWORD *)(v132 + 16) = v134 + 1;
    v153 = v132;
    v135 = v132 + 16 * v134;
    *(_QWORD *)(v135 + 32) = v109;
    *(_QWORD *)(v135 + 40) = v110;
    goto LABEL_88;
  }
  v128 = v127 + 7;
  v129 = 1;
  while (1)
  {
    v130 = v129 + 1;
    if (__OFADD__(v129, 1))
      break;
    v131 = *(v128 - 1) == v109 && *v128 == v110;
    if (v131 || (sub_23EC2ED38() & 1) != 0)
      goto LABEL_113;
    ++v129;
    v128 += 2;
    v70 = v130 == v89;
    v102 = v152;
    if (v70)
      goto LABEL_124;
  }
  __break(1u);
LABEL_142:
  swift_once();
LABEL_75:
  __swift_project_value_buffer(v89, (uint64_t)qword_256DC7690);
  v90 = sub_23EC2E66C();
  v91 = sub_23EC2E9FC();
  if (os_log_type_enabled(v90, v91))
  {
    v93 = *(_QWORD *)(v0 + 168);
    v92 = *(_QWORD *)(v0 + 176);
    v94 = swift_slowAlloc();
    *(_DWORD *)v94 = 134218240;
    *(_QWORD *)(v0 + 120) = v93;
    sub_23EC2EA68();
    *(_WORD *)(v94 + 12) = 2048;
    *(_QWORD *)(v0 + 128) = v92;
    sub_23EC2EA68();
    _os_log_impl(&dword_23EB9F000, v90, v91, "Unable to locate matching geohash tile for coordinate %f:%f)", (uint8_t *)v94, 0x16u);
    MEMORY[0x24265B940](v94, -1, -1);
  }

  v95 = sub_23EC2E66C();
  v96 = sub_23EC2EA08();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v97 = 0;
    _os_log_impl(&dword_23EB9F000, v95, v96, "Returning no utility information. This could be intentional as the region is not supported", v97, 2u);
    MEMORY[0x24265B940](v97, -1, -1);
  }

  sub_23EBF2D60();
  swift_allocError();
  *v98 = 2;
  swift_willThrow();
LABEL_136:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBEE578()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[51] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = sub_23EBEE61C;
  return sub_23EBE1390(v1[40], v1[46], v1[47], v1[23], v1[48], v1[49]);
}

uint64_t sub_23EBEE61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 416) = a1;
  *(_QWORD *)(v3 + 424) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23EBEE700()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _BYTE *v51;
  _QWORD *v52;
  CLLocationDegrees v53;
  CLLocationDegrees v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  char v76;
  char *v77;
  char v78;
  _QWORD *v79;
  id v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  _BYTE *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  _BYTE *v105;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v1 = *(void **)(v0 + 416);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256DB71B0 != -1)
      swift_once();
    v11 = sub_23EC2E684();
    __swift_project_value_buffer(v11, (uint64_t)qword_256DC7690);
    v12 = sub_23EC2E66C();
    v13 = sub_23EC2EA08();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_23EB9F000, v12, v13, "Unknown error occurred while fetching geohash tile from server.", v14, 2u);
      MEMORY[0x24265B940](v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 320);

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v16 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_95;
  }
  v2 = v1;
  v3 = objc_msgSend(v2, sel_statusCode);
  if (v3 == (id)304)
  {
    v17 = *(_QWORD *)(v0 + 392);
    if (*(_BYTE *)(v0 + 433) == 1)
    {
      swift_bridgeObjectRelease();
      if (v17)
      {
        if (qword_256DB71B0 != -1)
          goto LABEL_108;
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (qword_256DB71B0 != -1)
      swift_once();
    v101 = sub_23EC2E684();
    __swift_project_value_buffer(v101, (uint64_t)qword_256DC7690);
    v102 = sub_23EC2E66C();
    v103 = sub_23EC2EA08();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v104 = 0;
      _os_log_impl(&dword_23EB9F000, v102, v103, "Error while trying to fetch new Geohash tile from server.", v104, 2u);
      MEMORY[0x24265B940](v104, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 320);

    sub_23EBF2D60();
    swift_allocError();
    *v105 = 1;
    goto LABEL_94;
  }
  if (v3 != (id)200)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256DB71B0 != -1)
      swift_once();
    v24 = sub_23EC2E684();
    __swift_project_value_buffer(v24, (uint64_t)qword_256DC7690);
    v25 = sub_23EC2E66C();
    v26 = sub_23EC2EA08();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_23EB9F000, v25, v26, "Unknown error occurred while fetching geohash tile from server.", v27, 2u);
      MEMORY[0x24265B940](v27, -1, -1);
    }

    v2 = v2;
    v28 = sub_23EC2E66C();
    v29 = sub_23EC2EA08();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v30 = 134217984;
      *(_QWORD *)(v0 + 112) = objc_msgSend(v2, sel_statusCode);
      v0 = v125;
      sub_23EC2EA68();

      _os_log_impl(&dword_23EB9F000, v28, v29, "Status Code returned %ld", v30, 0xCu);
      MEMORY[0x24265B940](v30, -1, -1);
    }
    else
    {

    }
    v15 = *(_QWORD *)(v0 + 320);
    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v52 = objc_msgSend(v2, sel_statusCode);
    swift_storeEnumTagMultiPayload();
    goto LABEL_94;
  }
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRelease();
  sub_23EBA2FD8(v4, v5);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v9 = *(_QWORD *)(v0 + 376);
  if (v8 != 1)
  {
    v31 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 296);
    (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(v32, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 272));
    sub_23EBE22CC(v32, v31, v9);
    if ((v33 & 1) == 0)
    {
      v93 = *(_QWORD *)(v0 + 296);
      v94 = *(_QWORD *)(v0 + 272);
      v95 = *(_QWORD *)(v0 + 280);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v93, v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    v34 = *(_QWORD *)(v0 + 296);
    v35 = *(_QWORD *)(v0 + 272);
    v36 = *(_QWORD *)(v0 + 280);
    sub_23EBE2EDC((uint64_t)v2, *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
LABEL_25:
    sub_23EBA3038(*(_QWORD *)(v0 + 320), &qword_25433F930);
    v37 = *(_QWORD *)(v0 + 304);
    v38 = *(_QWORD *)(v0 + 272);
    v39 = *(_QWORD *)(v0 + 280);
    sub_23EC23540(v37, *(double *)(v0 + 168), *(double *)(v0 + 176));
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38);
    v41 = *(_QWORD *)(v0 + 304);
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23EBA3038(v41, &qword_25433F930);
      if (qword_256DB71B0 != -1)
        swift_once();
      v42 = sub_23EC2E684();
      __swift_project_value_buffer(v42, (uint64_t)qword_256DC7690);
      v43 = sub_23EC2E66C();
      v44 = sub_23EC2E9FC();
      if (os_log_type_enabled(v43, v44))
      {
        v46 = *(_QWORD *)(v0 + 168);
        v45 = *(_QWORD *)(v0 + 176);
        v47 = swift_slowAlloc();
        *(_DWORD *)v47 = 134218240;
        *(_QWORD *)(v125 + 120) = v46;
        sub_23EC2EA68();
        *(_WORD *)(v47 + 12) = 2048;
        *(_QWORD *)(v125 + 128) = v45;
        sub_23EC2EA68();
        _os_log_impl(&dword_23EB9F000, v43, v44, "Unable to locate matching geohash tile for coordinate %f:%f)", (uint8_t *)v47, 0x16u);
        MEMORY[0x24265B940](v47, -1, -1);
      }

      v48 = sub_23EC2E66C();
      v49 = sub_23EC2EA08();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_23EB9F000, v48, v49, "Returning no utility information. This could be intentional as the region is not supported", v50, 2u);
        MEMORY[0x24265B940](v50, -1, -1);
      }

      sub_23EBF2D60();
      swift_allocError();
      *v51 = 2;
      goto LABEL_96;
    }
    v54 = *(double *)(v0 + 168);
    v53 = *(double *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 272));
    v55 = sub_23EBA41C4(v54, v53);
    sub_23EBE3C4C((uint64_t)v55);
    if (!v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_256DB71B0 != -1)
        swift_once();
      v107 = sub_23EC2E684();
      __swift_project_value_buffer(v107, (uint64_t)qword_256DC7690);
      v108 = sub_23EC2E66C();
      v109 = sub_23EC2EA08();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v110 = 0;
        _os_log_impl(&dword_23EB9F000, v108, v109, "No Utility Territory found for provided coordinates", v110, 2u);
        MEMORY[0x24265B940](v110, -1, -1);
      }

      v111 = sub_23EC2E66C();
      v112 = sub_23EC2E9FC();
      if (os_log_type_enabled(v111, v112))
      {
        v114 = *(_QWORD *)(v0 + 168);
        v113 = *(_QWORD *)(v0 + 176);
        v115 = swift_slowAlloc();
        *(_DWORD *)v115 = 134218240;
        *(_QWORD *)(v0 + 136) = v114;
        sub_23EC2EA68();
        *(_WORD *)(v115 + 12) = 2048;
        *(_QWORD *)(v0 + 144) = v113;
        sub_23EC2EA68();
        _os_log_impl(&dword_23EB9F000, v111, v112, "Utility Territory not found for coordinate %f:%f", (uint8_t *)v115, 0x16u);
        MEMORY[0x24265B940](v115, -1, -1);
      }
      v117 = *(_QWORD *)(v0 + 280);
      v116 = *(_QWORD *)(v0 + 288);
      v118 = *(_QWORD *)(v0 + 272);

      type metadata accessor for NetworkError();
      sub_23EBCBFD0();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v118);
      goto LABEL_97;
    }
    v56 = v55[2];
    if (!v56)
    {
      v124 = MEMORY[0x24BEE4AF8];
LABEL_106:
      v119 = *(_QWORD *)(v0 + 280);
      v120 = *(_QWORD *)(v0 + 288);
      v121 = *(_QWORD *)(v0 + 272);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v120, v121);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v125 + 8))(v124);
    }
    v57 = 0;
    v123 = *(_QWORD *)(v0 + 248);
    v58 = *(_QWORD *)(v0 + 232);
    v59 = v55 + 4;
    v124 = MEMORY[0x24BEE4AF8];
    v122 = v58;
    while (1)
    {
      v60 = *(_QWORD *)(v0 + 224);
      v61 = *(_QWORD *)(v0 + 200);
      v62 = &v59[2 * v57];
      v63 = *v62;
      v64 = v62[1];
      swift_bridgeObjectRetain();
      sub_23EBD2A34(v61);
      v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
      if (v65(v61, 1, v60) == 1)
      {
        sub_23EBA3038(*(_QWORD *)(v0 + 200), &qword_25433FA30);
        if (qword_25433FAE8 != -1)
          swift_once();
        v66 = sub_23EC2E684();
        __swift_project_value_buffer(v66, (uint64_t)qword_25433FC80);
        v67 = sub_23EC2E66C();
        v68 = sub_23EC2EA08();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v69 = 0;
          _os_log_impl(&dword_23EB9F000, v67, v68, "Unable to retrieve configuration to check if utility is disabled or not.", v69, 2u);
          v0 = v125;
          MEMORY[0x24265B940](v69, -1, -1);
        }

      }
      else
      {
        v70 = *(_QWORD *)(v0 + 224);
        v71 = *(_QWORD *)(v0 + 192);
        sub_23EBBC840(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 248));
        sub_23EBD2A34(v71);
        if (v65(v71, 1, v70) == 1)
        {
          sub_23EBA3038(*(_QWORD *)(v0 + 192), &qword_25433FA30);
          if (qword_25433FAE8 != -1)
            swift_once();
          v72 = sub_23EC2E684();
          __swift_project_value_buffer(v72, (uint64_t)qword_25433FC80);
          v73 = sub_23EC2E66C();
          v74 = sub_23EC2EA08();
          if (os_log_type_enabled(v73, v74))
          {
            v75 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v75 = 0;
            _os_log_impl(&dword_23EB9F000, v73, v74, "Unable to retrieve configuration to check if utility is disabled or not.", v75, 2u);
            MEMORY[0x24265B940](v75, -1, -1);
          }

        }
        else
        {
          sub_23EBBC840(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 240));
          v76 = sub_23EBD0F00();
          v77 = *(char **)(v0 + 240);
          if ((v76 & 1) != 0)
          {
            sub_23EBF2D24((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_56:
            v79 = *(_QWORD **)(v123 + 16);
            if (v79)
            {
              v80 = (id)v79[2];
              if (v80)
              {
                if (v79[4] == v63 && v79[5] == v64 || (sub_23EC2ED38() & 1) != 0)
                {
LABEL_61:
                  v0 = v125;
                  sub_23EBF2D24(*(_QWORD *)(v125 + 248), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
                  swift_bridgeObjectRelease();
LABEL_81:
                  v58 = v122;
                  goto LABEL_41;
                }
                if (v80 != (id)1)
                {
                  v86 = v79 + 7;
                  v87 = 1;
                  while (1)
                  {
                    v2 = (id)(v87 + 1);
                    if (__OFADD__(v87, 1))
                      break;
                    v88 = *(v86 - 1) == v63 && *v86 == v64;
                    if (v88 || (sub_23EC2ED38() & 1) != 0)
                      goto LABEL_61;
                    ++v87;
                    v86 += 2;
                    if (v2 == v80)
                      goto LABEL_76;
                  }
                  __break(1u);
LABEL_108:
                  swift_once();
LABEL_14:
                  v18 = sub_23EC2E684();
                  __swift_project_value_buffer(v18, (uint64_t)qword_256DC7690);
                  v19 = sub_23EC2E66C();
                  v20 = sub_23EC2EA14();
                  if (os_log_type_enabled(v19, v20))
                  {
                    v21 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v21 = 0;
                    _os_log_impl(&dword_23EB9F000, v19, v20, "Geohash file unmodified. Continue using locally stored geohash tile", v21, 2u);
                    MEMORY[0x24265B940](v21, -1, -1);
                  }
                  v23 = *(_QWORD *)(v0 + 368);
                  v22 = *(_QWORD *)(v0 + 376);

                  sub_23EBE2EDC((uint64_t)v2, v23, v22);
                  swift_bridgeObjectRelease();
                  goto LABEL_25;
                }
              }
            }
LABEL_76:
            sub_23EBF2D24(*(_QWORD *)(v125 + 248), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
            v89 = v124;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23EBAECC0(0, *(_QWORD *)(v124 + 16) + 1, 1);
              v89 = v124;
            }
            v91 = *(_QWORD *)(v89 + 16);
            v90 = *(_QWORD *)(v89 + 24);
            if (v91 >= v90 >> 1)
            {
              sub_23EBAECC0(v90 > 1, v91 + 1, 1);
              v89 = v124;
            }
            *(_QWORD *)(v89 + 16) = v91 + 1;
            v124 = v89;
            v92 = v89 + 16 * v91;
            *(_QWORD *)(v92 + 32) = v63;
            *(_QWORD *)(v92 + 40) = v64;
            v0 = v125;
            goto LABEL_81;
          }
          v78 = *v77;
          sub_23EBF2D24((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
          if ((v78 & 1) != 0)
            goto LABEL_56;
        }
        if (qword_25433FAE8 != -1)
          swift_once();
        v81 = sub_23EC2E684();
        __swift_project_value_buffer(v81, (uint64_t)qword_25433FC80);
        v82 = sub_23EC2E66C();
        v83 = sub_23EC2EA14();
        if (os_log_type_enabled(v82, v83))
        {
          v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v84 = 0;
          _os_log_impl(&dword_23EB9F000, v82, v83, "All Utilities are disabled!!!", v84, 2u);
          MEMORY[0x24265B940](v84, -1, -1);
        }
        v0 = v125;
        v85 = *(_QWORD *)(v125 + 248);

        sub_23EBF2D24(v85, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      }
      swift_bridgeObjectRelease();
LABEL_41:
      if (++v57 == v56)
        goto LABEL_106;
    }
  }
  v10 = *(_QWORD *)(v0 + 312);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23EBA3038(v10, &qword_25433F930);
LABEL_83:
  if (qword_256DB71B0 != -1)
    swift_once();
  v96 = sub_23EC2E684();
  __swift_project_value_buffer(v96, (uint64_t)qword_256DC7690);
  v97 = sub_23EC2E66C();
  v98 = sub_23EC2EA08();
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v99 = 0;
    _os_log_impl(&dword_23EB9F000, v97, v98, "Error while creating geoHash tiles.", v99, 2u);
    MEMORY[0x24265B940](v99, -1, -1);
  }
  v15 = *(_QWORD *)(v0 + 320);

  sub_23EBF2D60();
  swift_allocError();
  *v100 = 0;
LABEL_94:
  swift_willThrow();

LABEL_95:
  sub_23EBA3038(v15, &qword_25433F930);
LABEL_96:
  swift_willThrow();
LABEL_97:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v125 + 8))();
}

uint64_t sub_23EBEFA38()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23EBEFB70()
{
  char *v0;

  v0 = (char *)sub_23EBEFBC8 + 4 * byte_23EC340AA[sub_23EC12720()];
  __asm { BR              X10 }
}

unint64_t sub_23EBEFBC8()
{
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2E834();
  return 0xD000000000000017;
}

uint64_t sub_23EBEFC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v3[20] = type metadata accessor for NetworkError();
  v3[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v4 = type metadata accessor for UtilityServicesConfigurationsModel();
  v3[24] = v4;
  v3[25] = *(_QWORD *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v3[28] = swift_task_alloc();
  v5 = sub_23EC2DFA0();
  v3[29] = v5;
  v3[30] = *(_QWORD *)(v5 - 8);
  v3[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  v3[32] = swift_task_alloc();
  v6 = sub_23EC2E3CC();
  v3[33] = v6;
  v3[34] = *(_QWORD *)(v6 - 8);
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v7 = sub_23EC2E1E0();
  v3[37] = v7;
  v3[38] = *(_QWORD *)(v7 - 8);
  v3[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v8 = sub_23EC2E264();
  v3[42] = v8;
  v3[43] = *(_QWORD *)(v8 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBEFE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, uint64_t, _QWORD);
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  __CFString *v27;
  CFPropertyListRef v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(uint64_t, uint64_t);
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __CFString *v46;
  __CFString *v47;
  CFPropertyListRef v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  objc_class *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  void (*v116)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v117;
  objc_super *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  sub_23EBEFB70();
  *(_QWORD *)(v0 + 368) = v1;
  *(_QWORD *)(v0 + 376) = v2;
  if (qword_25433FB40 != -1)
    swift_once();
  v119 = qword_25433FC00;
  v121 = *(_QWORD *)algn_25433FC08;
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  sub_23EC1AE84();
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 384) = v119;
  *(_QWORD *)(v0 + 392) = v121;
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v4 = (void *)sub_23EC2E774();
  v5 = objc_msgSend(v3, sel_fileExistsAtPath_, v4);

  if (!v5)
  {
    if (qword_25433FAD8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_25433FC68);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v16, "No perviously fetched Config file found on disk. Proceed to fetch new file.", v17, 2u);
      MEMORY[0x24265B940](v17, -1, -1);
    }

    v18 = 0;
    v19 = 0;
    v20 = 1;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 344) + 56);
  v9(*(_QWORD *)(v0 + 328), 1, 1, *(_QWORD *)(v0 + 336));
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104);
  LODWORD(v6) = *MEMORY[0x24BDCD7A0];
  v10(v7, *MEMORY[0x24BDCD7A0], v8);
  swift_bridgeObjectRetain();
  sub_23EC2E24C();
  v11 = sub_23EC2E27C();
  v13 = v12;
  v116 = v9;
  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EBF2CE0();
  sub_23EC2DFAC();
  v114 = v6;
  v23 = *(_QWORD *)(v0 + 360);
  v25 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 344);
  sub_23EBA3EDC(v11, v13);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  sub_23EC006DC();
  v26 = (__CFString *)sub_23EC2E774();
  v27 = (__CFString *)sub_23EC2E774();
  v28 = CFPreferencesCopyAppValue(v26, v27);

  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 272);
  v31 = *(_QWORD *)(v0 + 256);
  if (!v28)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v30 + 56))(*(_QWORD *)(v0 + 256), 1, 1, *(_QWORD *)(v0 + 264));
    goto LABEL_20;
  }
  *(_QWORD *)(v0 + 128) = v28;
  v32 = swift_dynamicCast();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v31, v32 ^ 1u, 1, v29);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) == 1)
  {
LABEL_20:
    sub_23EBA3038(*(_QWORD *)(v0 + 256), &qword_25433F948);
LABEL_21:
    sub_23EC00830();
    v46 = (__CFString *)sub_23EC2E774();
    v47 = (__CFString *)sub_23EC2E774();
    v48 = CFPreferencesCopyAppValue(v46, v47);

    swift_bridgeObjectRelease();
    if (v48 && (*(_QWORD *)(v0 + 112) = v48, (swift_dynamicCast() & 1) != 0))
    {
      v20 = 0;
      v18 = *(_QWORD *)(v0 + 40);
      v19 = *(_QWORD *)(v0 + 48);
    }
    else
    {
      if (qword_25433FAD8 != -1)
        swift_once();
      v49 = sub_23EC2E684();
      __swift_project_value_buffer(v49, (uint64_t)qword_25433FC68);
      v50 = sub_23EC2E66C();
      v51 = sub_23EC2EA08();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_23EB9F000, v50, v51, "Config file exists on disk. But no eTag Value!", v52, 2u);
        MEMORY[0x24265B940](v52, -1, -1);
      }

      v18 = 0;
      v19 = 0;
      v20 = 0;
    }
LABEL_10:
    *(_BYTE *)(v0 + 472) = v20;
    *(_QWORD *)(v0 + 400) = v18;
    *(_QWORD *)(v0 + 408) = v19;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v21;
    *v21 = v0;
    v21[1] = sub_23EBF1154;
    return sub_23EBD176C(*(_QWORD *)(v0 + 152));
  }
  v33 = *(_QWORD *)(v0 + 280);
  v35 = *(_QWORD *)(v0 + 264);
  v34 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v34 + 32))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 256), v35);
  sub_23EC2E39C();
  v36 = sub_23EC2E360();
  v37 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v37(v33, v35);
  if ((v36 & 1) == 0)
  {
    v37(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  if (qword_25433FAD8 != -1)
    swift_once();
  v118 = (objc_super *)sub_23EC2E684();
  __swift_project_value_buffer((uint64_t)v118, (uint64_t)qword_25433FC68);
  v38 = sub_23EC2E66C();
  v39 = sub_23EC2EA14();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v40 = 0;
    _os_log_impl(&dword_23EB9F000, v38, v39, "Configuration exists locally and is Valid. Skip Fetching.", v40, 2u);
    MEMORY[0x24265B940](v40, -1, -1);
  }
  v41 = *(_QWORD *)(v0 + 288);
  v42 = *(_QWORD *)(v0 + 264);

  v37(v41, v42);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 312);
  v45 = *(_QWORD *)(v0 + 296);
  v116(*(_QWORD *)(v0 + 328), 1, 1, *(_QWORD *)(v0 + 336));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v43 + 104))(v44, v114, v45);
  sub_23EC2E24C();
  v53 = sub_23EC2E27C();
  v55 = v54;
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EC2DFAC();
  swift_release();
  v56 = *(_QWORD *)(v0 + 88);
  if (qword_25433FAD8 != -1)
    goto LABEL_87;
  while (1)
  {
    __swift_project_value_buffer((uint64_t)v118, (uint64_t)qword_25433FC68);
    v57 = sub_23EC2E66C();
    v58 = sub_23EC2EA14();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_23EB9F000, v57, v58, "> Utility Config values being returned", v59, 2u);
      MEMORY[0x24265B940](v59, -1, -1);
    }

    v115 = *(_QWORD *)(v56 + 16);
    v106 = v53;
    v107 = (unint64_t)v55;
    if (!v115)
      break;
    v60 = 0;
    v108 = *(_QWORD *)(v0 + 216);
    v113 = v56 + 32;
    v111 = MEMORY[0x24BEE4AF8];
    v112 = *(_QWORD *)(v0 + 200);
    while (1)
    {
      v62 = *(_QWORD *)(v0 + 184);
      v61 = *(_QWORD *)(v0 + 192);
      v63 = (uint64_t *)(v113 + 48 * v60);
      v53 = v63[1];
      v117 = *v63;
      v64 = v63[2];
      v56 = v63[3];
      v65 = v63[4];
      v66 = v63[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23EBD2A34(v62);
      v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
      if (v67(v62, 1, v61) == 1)
      {
        sub_23EBA3038(*(_QWORD *)(v0 + 184), &qword_25433FA30);
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer((uint64_t)v118, (uint64_t)qword_25433FC80);
        v68 = sub_23EC2E66C();
        v69 = sub_23EC2EA08();
        if (os_log_type_enabled(v68, v69))
        {
          v70 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v70 = 0;
          _os_log_impl(&dword_23EB9F000, v68, v69, "Unable to retrieve configuration to check if utility is disabled or not.", v70, 2u);
          MEMORY[0x24265B940](v70, -1, -1);
        }

        goto LABEL_36;
      }
      v71 = *(_QWORD *)(v0 + 192);
      v72 = *(_QWORD *)(v0 + 176);
      sub_23EBBC840(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 216));
      sub_23EBD2A34(v72);
      if (v67(v72, 1, v71) == 1)
      {
        sub_23EBA3038(*(_QWORD *)(v0 + 176), &qword_25433FA30);
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer((uint64_t)v118, (uint64_t)qword_25433FC80);
        v73 = sub_23EC2E66C();
        v74 = sub_23EC2EA08();
        if (os_log_type_enabled(v73, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v75 = 0;
          _os_log_impl(&dword_23EB9F000, v73, v74, "Unable to retrieve configuration to check if utility is disabled or not.", v75, 2u);
          MEMORY[0x24265B940](v75, -1, -1);
        }

LABEL_49:
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer((uint64_t)v118, (uint64_t)qword_25433FC80);
        v76 = sub_23EC2E66C();
        v77 = sub_23EC2EA14();
        if (os_log_type_enabled(v76, v77))
        {
          v78 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v78 = 0;
          _os_log_impl(&dword_23EB9F000, v76, v77, "All Utilities are disabled!!!", v78, 2u);
          MEMORY[0x24265B940](v78, -1, -1);
        }
        v79 = *(_QWORD *)(v0 + 216);

        v80 = v79;
        goto LABEL_54;
      }
      sub_23EBBC840(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 208));
      v81 = sub_23EBD0F00();
      v82 = *(char **)(v0 + 208);
      if ((v81 & 1) != 0)
      {
        sub_23EBF2D24((uint64_t)v82, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      }
      else
      {
        v83 = *v82;
        sub_23EBF2D24((uint64_t)v82, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
        if ((v83 & 1) == 0)
          goto LABEL_49;
      }
      v84 = *(_QWORD **)(v108 + 16);
      if (!v84)
        goto LABEL_73;
      v109 = v84[2];
      if (!v109)
        goto LABEL_73;
      if ((v84[4] != v64 || v84[5] != v56) && (sub_23EC2ED38() & 1) == 0)
        break;
LABEL_63:
      v80 = *(_QWORD *)(v0 + 216);
LABEL_54:
      sub_23EBF2D24(v80, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      if (++v60 == v115)
      {
        swift_bridgeObjectRelease();
        v53 = v106;
        v55 = (_QWORD *)v107;
        v92 = v111;
        goto LABEL_80;
      }
    }
    if (v109 == 1)
    {
LABEL_73:
      sub_23EBF2D24(*(_QWORD *)(v0 + 216), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      v88 = v111;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23EBAED14(0, *(_QWORD *)(v111 + 16) + 1, 1);
        v88 = v111;
      }
      v90 = *(_QWORD *)(v88 + 16);
      v89 = *(_QWORD *)(v88 + 24);
      if (v90 >= v89 >> 1)
      {
        sub_23EBAED14(v89 > 1, v90 + 1, 1);
        v88 = v111;
      }
      *(_QWORD *)(v88 + 16) = v90 + 1;
      v111 = v88;
      v91 = (_QWORD *)(v88 + 48 * v90);
      v91[4] = v117;
      v91[5] = v53;
      v91[6] = v64;
      v91[7] = v56;
      v91[8] = v65;
      v91[9] = v66;
      goto LABEL_37;
    }
    v55 = v84 + 7;
    v85 = 1;
    while (1)
    {
      v86 = v85 + 1;
      if (__OFADD__(v85, 1))
        break;
      v87 = *(v55 - 1) == v64 && *v55 == v56;
      if (v87 || (sub_23EC2ED38() & 1) != 0)
        goto LABEL_63;
      ++v85;
      v55 += 2;
      if (v86 == v109)
        goto LABEL_73;
    }
    __break(1u);
LABEL_87:
    swift_once();
  }
  swift_bridgeObjectRelease();
  v92 = MEMORY[0x24BEE4AF8];
LABEL_80:
  v93 = *(_QWORD *)(v92 + 16);
  if (v93)
  {
    v120 = MEMORY[0x24BEE4AF8];
    sub_23EC2EBC4();
    v94 = (objc_class *)type metadata accessor for UtilityRegion();
    v95 = (uint64_t *)(v92 + 72);
    do
    {
      v97 = *(v95 - 5);
      v96 = *(v95 - 4);
      v98 = *(v95 - 3);
      v99 = *(v95 - 2);
      v100 = *(v95 - 1);
      v101 = *v95;
      v102 = (char *)objc_allocWithZone(v94);
      v103 = &v102[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name];
      *(_QWORD *)v103 = v97;
      *((_QWORD *)v103 + 1) = v96;
      v104 = &v102[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier];
      *(_QWORD *)v104 = v98;
      *((_QWORD *)v104 + 1) = v99;
      v105 = &v102[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName];
      *(_QWORD *)v105 = v100;
      *((_QWORD *)v105 + 1) = v101;
      *(_QWORD *)(v0 + 56) = v102;
      *(_QWORD *)(v0 + 64) = v94;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2((objc_super *)(v0 + 56), sel_init);
      sub_23EC2EBAC();
      sub_23EC2EBD0();
      sub_23EC2EBDC();
      sub_23EC2EBB8();
      v95 += 6;
      --v93;
    }
    while (v93);
    v110 = v120;
    sub_23EBA3EDC(v106, v107);
    swift_release();
  }
  else
  {
    sub_23EBA3EDC(v53, (unint64_t)v55);
    swift_release();
    v110 = MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v110);
}

uint64_t sub_23EBF1154()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[53] = (uint64_t)v3;
  *v3 = v2;
  v3[1] = sub_23EBF11C0;
  return sub_23EBA20C4(v1[28], v1[17], v1[18], v1[50], v1[51]);
}

uint64_t sub_23EBF11C0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBF1214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 224);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_25433FAD8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_25433FC68);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate Request URL for All Utility Region Lookup", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 248), v3, v1);
    sub_23EC2EB4C();
    swift_bridgeObjectRelease();
    sub_23EC2E834();
    sub_23EC0A6EC(0xD00000000000001ALL, 0x800000023EC39E30, (uint8_t *)0xD000000000000022, 0x800000023EC39E50);
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 432) = v10;
    *v10 = v0;
    v10[1] = sub_23EBF1530;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBF1530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[55] = a1;
  v5[56] = a2;
  v5[57] = a3;
  v5[58] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23EBF15C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  void *v41;
  uint8_t *v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void *v48;
  _BYTE *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  id v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  objc_super **v72;
  unint64_t v73;
  unint64_t v74;
  objc_super *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  objc_super **v82;
  objc_super *v83;
  objc_super *v84;
  objc_super *v85;
  objc_super *v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char *v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  objc_class *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  objc_super *v131;
  id receiver;
  uint64_t v133;
  objc_super *v134;
  uint64_t v135;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  v2 = 0x25433F000uLL;
  if (!v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_25433FAD8 != -1)
      swift_once();
    v21 = sub_23EC2E684();
    __swift_project_value_buffer(v21, (uint64_t)qword_25433FC68);
    v22 = sub_23EC2E66C();
    v23 = sub_23EC2EA08();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_23EB9F000, v22, v23, "Unable to process All Utility Region response.", v24, 2u);
      MEMORY[0x24265B940](v24, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 448);
    v25 = *(void **)(v0 + 456);
    v26 = *(_QWORD *)(v0 + 440);

    sub_23EBCBFD0();
    v18 = (void *)swift_allocError();
    *v27 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_33;
  }
  v3 = (void *)v1;
  v4 = *(id *)(v0 + 456);
  sub_23EC2EB4C();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2E834();
  sub_23EC0AFC4(0xD000000000000024, (uint8_t *)0x800000023EC39E80, (unint64_t)objc_msgSend(v3, sel_statusCode), qword_250F4E488);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_statusCode);
  swift_bridgeObjectRelease();
  if (v5 != (id)304)
  {
    if (v5 != (id)200)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_25433FAD8 != -1)
        swift_once();
      v36 = *(void **)(v0 + 456);
      v37 = sub_23EC2E684();
      __swift_project_value_buffer(v37, (uint64_t)qword_25433FC68);
      v38 = v36;
      v39 = sub_23EC2E66C();
      v40 = sub_23EC2EA08();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = *(void **)(v0 + 456);
        v42 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v42 = 134217984;
        *(_QWORD *)(v0 + 96) = objc_msgSend(v3, sel_statusCode);
        sub_23EC2EA68();

        v2 = 0x25433F000;
        _os_log_impl(&dword_23EB9F000, v39, v40, "Unhandled Response code %ld", v42, 0xCu);
        MEMORY[0x24265B940](v42, -1, -1);
        v43 = *(NSObject **)(v0 + 456);
      }
      else
      {

        v43 = *(NSObject **)(v0 + 456);
        v39 = v43;
      }
      v52 = *(_QWORD *)(v0 + 440);
      v51 = *(_QWORD *)(v0 + 448);

      sub_23EBCBFD0();
      v18 = (void *)swift_allocError();
      *v53 = objc_msgSend(v3, sel_statusCode);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      v20 = v52;
      v50 = v51;
      goto LABEL_37;
    }
    v6 = *(void **)(v0 + 464);
    sub_23EBFC8A0();
    v7 = v6;
    if (!v6)
    {
      v9 = *(_QWORD *)(v0 + 440);
      v8 = *(_QWORD *)(v0 + 448);
      v10 = *(_QWORD *)(v0 + 320);
      swift_bridgeObjectRelease();
      sub_23EBFCE28(v9, v8, v10);
      sub_23EBA3038(*(_QWORD *)(v0 + 320), &qword_25433F930);
      sub_23EC00914();
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_25433FAD8 != -1)
      swift_once();
    v11 = sub_23EC2E684();
    __swift_project_value_buffer(v11, (uint64_t)qword_25433FC68);
    v12 = sub_23EC2E66C();
    v13 = sub_23EC2EA08();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_23EB9F000, v12, v13, "Error while decoding all Utility region response from server.", v14, 2u);
      MEMORY[0x24265B940](v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 448);
    v16 = *(void **)(v0 + 456);
    v17 = *(_QWORD *)(v0 + 440);

    sub_23EBCBFD0();
    v18 = (void *)swift_allocError();
    *v19 = 1;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    v20 = v17;
LABEL_34:
    v50 = v15;
LABEL_37:
    sub_23EBA3EDC(v20, v50);
    goto LABEL_38;
  }
  if ((*(_BYTE *)(v0 + 472) & 1) != 0 || !*(_QWORD *)(v0 + 408))
  {
    swift_bridgeObjectRelease();
    if (qword_25433FAD8 != -1)
      swift_once();
    v44 = sub_23EC2E684();
    __swift_project_value_buffer(v44, (uint64_t)qword_25433FC68);
    v45 = sub_23EC2E66C();
    v46 = sub_23EC2E9FC();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_23EB9F000, v45, v46, "Server return 304, but inconsistency in stored Config detected!", v47, 2u);
      MEMORY[0x24265B940](v47, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 448);
    v48 = *(void **)(v0 + 456);
    v26 = *(_QWORD *)(v0 + 440);

    sub_23EC00C58();
    swift_bridgeObjectRelease();
    sub_23EBF2C9C();
    v18 = (void *)swift_allocError();
    *v49 = 1;
    swift_willThrow();

LABEL_33:
    v20 = v26;
    goto LABEL_34;
  }
  if (qword_25433FAD8 != -1)
    swift_once();
  v28 = sub_23EC2E684();
  __swift_project_value_buffer(v28, (uint64_t)qword_25433FC68);
  v29 = sub_23EC2E66C();
  v30 = sub_23EC2E9FC();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_23EB9F000, v29, v30, "Utility Territory on disk unmodified. Use existing file on disk.", v31, 2u);
    MEMORY[0x24265B940](v31, -1, -1);
  }
  v32 = *(void **)(v0 + 464);

  sub_23EC00914();
  if (v32)
  {
    v18 = v32;
    v33 = *(_QWORD *)(v0 + 448);
    v34 = *(void **)(v0 + 456);
    v35 = *(_QWORD *)(v0 + 440);

    sub_23EBA3EDC(v35, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_38:
    if (*(_QWORD *)(v2 + 2776) != -1)
      swift_once();
    v54 = sub_23EC2E684();
    __swift_project_value_buffer(v54, (uint64_t)qword_25433FC68);
    v55 = sub_23EC2E66C();
    v56 = sub_23EC2EA08();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_23EB9F000, v55, v56, "Error while trying to fetch All Utility Region data.", v57, 2u);
      MEMORY[0x24265B940](v57, -1, -1);
    }

    *(_QWORD *)(v0 + 120) = v18;
    v58 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    v59 = swift_dynamicCast();
    v61 = *(_QWORD *)(v0 + 240);
    v60 = *(_QWORD *)(v0 + 248);
    v62 = *(_QWORD *)(v0 + 232);
    if (v59)
    {
      sub_23EBF2D24(*(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for NetworkError);
      swift_willThrow();
    }
    else
    {
      sub_23EC259EC(v18);
      swift_willThrow();

    }
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_46:
  v64 = *(_QWORD *)(v0 + 448);
  v65 = *(void **)(v0 + 456);
  v66 = *(_QWORD *)(v0 + 440);
  v67 = *(_QWORD *)(v0 + 344);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));

  sub_23EBA3EDC(v66, v64);
  swift_bridgeObjectRelease();
  v68 = *MEMORY[0x24BDCD7A0];
  v69 = *(_QWORD *)(v0 + 304);
  v70 = *(_QWORD *)(v0 + 312);
  v71 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v67 + 56))(*(_QWORD *)(v0 + 328), 1, 1, *(_QWORD *)(v0 + 336));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 104))(v70, v68, v71);
  sub_23EC2E24C();
  v72 = (objc_super **)sub_23EC2E27C();
  v74 = v73;
  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EBF2CE0();
  sub_23EC2DFAC();
  v124 = v74;
  swift_release();
  v75 = *(objc_super **)(v0 + 88);
  if (qword_25433FAD8 != -1)
    goto LABEL_103;
  while (1)
  {
    v133 = sub_23EC2E684();
    __swift_project_value_buffer(v133, (uint64_t)qword_25433FC68);
    v76 = sub_23EC2E66C();
    v77 = sub_23EC2EA14();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v78 = 0;
      _os_log_impl(&dword_23EB9F000, v76, v77, "> Utility Config values being returned", v78, 2u);
      MEMORY[0x24265B940](v78, -1, -1);
    }

    receiver = v75[1].receiver;
    v125 = (uint64_t)v72;
    if (!receiver)
      break;
    v79 = 0;
    v126 = *(_QWORD *)(v0 + 216);
    v131 = v75 + 2;
    v129 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v130 = *(_QWORD *)(v0 + 200);
    while (1)
    {
      v81 = *(_QWORD *)(v0 + 184);
      v80 = *(_QWORD *)(v0 + 192);
      v82 = (objc_super **)&v131[3 * (_QWORD)v79];
      v75 = v82[1];
      v134 = *v82;
      v83 = v82[2];
      v84 = v82[3];
      v85 = v82[4];
      v86 = v82[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23EBD2A34(v81);
      v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
      if (v87(v81, 1, v80) == 1)
      {
        v88 = v0;
        sub_23EBA3038(*(_QWORD *)(v0 + 184), &qword_25433FA30);
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer(v133, (uint64_t)qword_25433FC80);
        v89 = sub_23EC2E66C();
        v90 = sub_23EC2EA08();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v91 = 0;
          _os_log_impl(&dword_23EB9F000, v89, v90, "Unable to retrieve configuration to check if utility is disabled or not.", v91, 2u);
          MEMORY[0x24265B940](v91, -1, -1);
        }

        goto LABEL_52;
      }
      v92 = *(_QWORD *)(v0 + 192);
      v93 = *(_QWORD *)(v0 + 176);
      sub_23EBBC840(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 216));
      sub_23EBD2A34(v93);
      if (v87(v93, 1, v92) == 1)
      {
        v88 = v0;
        sub_23EBA3038(*(_QWORD *)(v0 + 176), &qword_25433FA30);
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer(v133, (uint64_t)qword_25433FC80);
        v94 = sub_23EC2E66C();
        v95 = sub_23EC2EA08();
        if (os_log_type_enabled(v94, v95))
        {
          v96 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v96 = 0;
          _os_log_impl(&dword_23EB9F000, v94, v95, "Unable to retrieve configuration to check if utility is disabled or not.", v96, 2u);
          MEMORY[0x24265B940](v96, -1, -1);
        }

LABEL_65:
        if (qword_25433FAE8 != -1)
          swift_once();
        __swift_project_value_buffer(v133, (uint64_t)qword_25433FC80);
        v97 = sub_23EC2E66C();
        v98 = sub_23EC2EA14();
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v99 = 0;
          _os_log_impl(&dword_23EB9F000, v97, v98, "All Utilities are disabled!!!", v99, 2u);
          MEMORY[0x24265B940](v99, -1, -1);
        }
        v100 = *(_QWORD *)(v88 + 216);

        v101 = v100;
        goto LABEL_70;
      }
      sub_23EBBC840(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 208));
      v102 = sub_23EBD0F00();
      v88 = v0;
      v103 = *(char **)(v0 + 208);
      if ((v102 & 1) != 0)
      {
        sub_23EBF2D24((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      }
      else
      {
        v104 = *v103;
        sub_23EBF2D24((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
        if ((v104 & 1) == 0)
          goto LABEL_65;
      }
      v105 = *(_QWORD **)(v126 + 16);
      if (!v105)
        goto LABEL_89;
      v127 = v105[2];
      if (!v127)
        goto LABEL_89;
      if (((objc_super *)v105[4] != v83 || (objc_super *)v105[5] != v84) && (sub_23EC2ED38() & 1) == 0)
        break;
LABEL_79:
      v101 = *(_QWORD *)(v88 + 216);
LABEL_70:
      sub_23EBF2D24(v101, (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
LABEL_52:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_53:
      v79 = (char *)v79 + 1;
      v0 = v88;
      if (v79 == receiver)
      {
        swift_bridgeObjectRelease();
        v72 = (objc_super **)v125;
        goto LABEL_96;
      }
    }
    if (v127 == 1)
    {
LABEL_89:
      sub_23EBF2D24(*(_QWORD *)(v88 + 216), (uint64_t (*)(_QWORD))type metadata accessor for UtilityServicesConfigurationsModel);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_23EBAED14(0, v129[2] + 1, 1);
      v109 = v129[2];
      v108 = v129[3];
      if (v109 >= v108 >> 1)
        sub_23EBAED14(v108 > 1, v109 + 1, 1);
      v129[2] = v109 + 1;
      v110 = &v129[6 * v109];
      v110[4] = v134;
      v110[5] = v75;
      v110[6] = v83;
      v110[7] = v84;
      v110[8] = v85;
      v110[9] = v86;
      goto LABEL_53;
    }
    v72 = (objc_super **)(v105 + 7);
    v0 = 1;
    while (1)
    {
      v106 = v0 + 1;
      if (__OFADD__(v0, 1))
        break;
      v107 = *(v72 - 1) == v83 && *v72 == v84;
      if (v107 || (sub_23EC2ED38() & 1) != 0)
        goto LABEL_79;
      ++v0;
      v72 += 2;
      if (v106 == v127)
        goto LABEL_89;
    }
    __break(1u);
LABEL_103:
    swift_once();
  }
  swift_bridgeObjectRelease();
  v129 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_96:
  v111 = v129[2];
  if (v111)
  {
    v135 = MEMORY[0x24BEE4AF8];
    sub_23EC2EBC4();
    v112 = (objc_class *)type metadata accessor for UtilityRegion();
    v113 = v129 + 9;
    do
    {
      v115 = *(v113 - 5);
      v114 = *(v113 - 4);
      v117 = *(v113 - 3);
      v116 = *(v113 - 2);
      v119 = *(v113 - 1);
      v118 = *v113;
      v120 = (char *)objc_allocWithZone(v112);
      v121 = &v120[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_name];
      *(_QWORD *)v121 = v115;
      *((_QWORD *)v121 + 1) = v114;
      v122 = &v120[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_identifier];
      *(_QWORD *)v122 = v117;
      *((_QWORD *)v122 + 1) = v116;
      v123 = &v120[OBJC_IVAR____TtC19HomeUtilityServices13UtilityRegion_shortName];
      *(_QWORD *)v123 = v119;
      *((_QWORD *)v123 + 1) = v118;
      *(_QWORD *)(v0 + 56) = v120;
      *(_QWORD *)(v0 + 64) = v112;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      objc_msgSendSuper2((objc_super *)(v0 + 56), sel_init);
      sub_23EC2EBAC();
      sub_23EC2EBD0();
      sub_23EC2EBDC();
      sub_23EC2EBB8();
      v113 += 6;
      --v111;
    }
    while (v111);
    v128 = v135;
    sub_23EBA3EDC(v125, v124);
    swift_release();
  }
  else
  {
    sub_23EBA3EDC((uint64_t)v72, v124);
    swift_release();
    v128 = MEMORY[0x24BEE4AF8];
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v128);
}

uint64_t sub_23EBF2A64()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 464);
  if (qword_25433FAD8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_25433FC68);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Error while trying to fetch All Utility Region data.", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  *(_QWORD *)(v0 + 120) = v1;
  v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v7 = swift_dynamicCast();
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 232);
  if (v7)
  {
    sub_23EBF2D24(*(_QWORD *)(v0 + 168), (uint64_t (*)(_QWORD))type metadata accessor for NetworkError);
    swift_willThrow();
  }
  else
  {
    sub_23EC259EC(v1);
    swift_willThrow();

  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EBF2C9C()
{
  unint64_t result;

  result = qword_256DB8808;
  if (!qword_256DB8808)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityTerritoryConfigError, &type metadata for UtilityTerritoryConfigError);
    atomic_store(result, (unint64_t *)&qword_256DB8808);
  }
  return result;
}

unint64_t sub_23EBF2CE0()
{
  unint64_t result;

  result = qword_25433F9B0;
  if (!qword_25433F9B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34280, &type metadata for InternalAllUtilityConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_25433F9B0);
  }
  return result;
}

uint64_t sub_23EBF2D24(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_23EBF2D60()
{
  unint64_t result;

  result = qword_256DB8818;
  if (!qword_256DB8818)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityLookupError, &type metadata for UtilityLookupError);
    atomic_store(result, (unint64_t *)&qword_256DB8818);
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalAllUtilityConfiguration()
{
  return &type metadata for InternalAllUtilityConfiguration;
}

ValueMetadata *type metadata accessor for InternalAllUtilityConfigurationResponse()
{
  return &type metadata for InternalAllUtilityConfigurationResponse;
}

_QWORD *sub_23EBF2DC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB58);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF2F08();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB10);
    sub_23EBF3208(&qword_25433FB18, (uint64_t (*)(void))sub_23EBF2F4C, MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_23EBF2F08()
{
  unint64_t result;

  result = qword_25433F998;
  if (!qword_25433F998)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34474, &type metadata for InternalAllUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F998);
  }
  return result;
}

unint64_t sub_23EBF2F4C()
{
  unint64_t result;

  result = qword_25433F990;
  if (!qword_25433F990)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34258, &type metadata for InternalAllUtilityConfiguration);
    atomic_store(result, (unint64_t *)&qword_25433F990);
  }
  return result;
}

uint64_t sub_23EBF2F90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF31C4();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v27 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v24 = v9;
  v26 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v14 = v13;
  v22 = v12;
  v25 = 2;
  swift_bridgeObjectRetain();
  v23 = v14;
  v15 = sub_23EC2EC84();
  v17 = v16;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  v19 = v23;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unint64_t sub_23EBF31C4()
{
  unint64_t result;

  result = qword_25433F978;
  if (!qword_25433F978)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34424, &type metadata for InternalAllUtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F978);
  }
  return result;
}

uint64_t sub_23EBF3208(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25433FB10);
    v8 = a2();
    result = MEMORY[0x24265B8B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EBF3270()
{
  unint64_t result;

  result = qword_256DB8838;
  if (!qword_256DB8838)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34230, &type metadata for InternalAllUtilityConfiguration);
    atomic_store(result, (unint64_t *)&qword_256DB8838);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InternalAllUtilityConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EBF3300 + 4 * byte_23EC340B3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EBF3334 + 4 * byte_23EC340AE[v4]))();
}

uint64_t sub_23EBF3334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBF333C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBF3344);
  return result;
}

uint64_t sub_23EBF3350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBF3358);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EBF335C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBF3364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalAllUtilityConfiguration.CodingKeys()
{
  return &type metadata for InternalAllUtilityConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for InternalAllUtilityConfigurationResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EBF33C0 + 4 * byte_23EC340B8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EBF33E0 + 4 * byte_23EC340BD[v4]))();
}

_BYTE *sub_23EBF33C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EBF33E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBF33E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBF33F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBF33F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBF3400(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InternalAllUtilityConfigurationResponse.CodingKeys()
{
  return &type metadata for InternalAllUtilityConfigurationResponse.CodingKeys;
}

unint64_t sub_23EBF3420()
{
  unint64_t result;

  result = qword_256DB8840;
  if (!qword_256DB8840)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34344, &type metadata for InternalAllUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8840);
  }
  return result;
}

unint64_t sub_23EBF3468()
{
  unint64_t result;

  result = qword_256DB8848;
  if (!qword_256DB8848)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC343FC, &type metadata for InternalAllUtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8848);
  }
  return result;
}

unint64_t sub_23EBF34B0()
{
  unint64_t result;

  result = qword_25433F988;
  if (!qword_25433F988)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3436C, &type metadata for InternalAllUtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F988);
  }
  return result;
}

unint64_t sub_23EBF34F8()
{
  unint64_t result;

  result = qword_25433F980;
  if (!qword_25433F980)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34394, &type metadata for InternalAllUtilityConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F980);
  }
  return result;
}

unint64_t sub_23EBF3540()
{
  unint64_t result;

  result = qword_25433F9A8;
  if (!qword_25433F9A8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC342B4, &type metadata for InternalAllUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9A8);
  }
  return result;
}

unint64_t sub_23EBF3588()
{
  unint64_t result;

  result = qword_25433F9A0;
  if (!qword_25433F9A0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC342DC, &type metadata for InternalAllUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25433F9A0);
  }
  return result;
}

uint64_t sub_23EBF35CC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 + 584) = a2;
  *(_QWORD *)(v2 + 416) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  *(_QWORD *)(v2 + 424) = swift_task_alloc();
  v3 = type metadata accessor for UtilityServicesConfigurationsModel();
  *(_QWORD *)(v2 + 432) = v3;
  *(_QWORD *)(v2 + 440) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 448) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBF3654()
{
  uint64_t v0;
  __CFString *v1;
  unint64_t v2;
  unint64_t v3;
  __CFString *v4;
  uint64_t v5;
  id v7;
  id v8;
  _QWORD *v9;

  v1 = sub_23EBF50EC();
  v3 = v2;
  if (v2)
  {
    v4 = v1;
    v5 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v5 = (unint64_t)v1 & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(__CFString *, unint64_t))(v0 + 8))(v4, v3);
    }
    swift_bridgeObjectRelease();
  }
  v7 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
  v8 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v7);
  *(_QWORD *)(v0 + 456) = v8;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 464) = v9;
  *v9 = v0;
  v9[1] = sub_23EBF3794;
  return sub_23EBD176C((uint64_t)v8);
}

uint64_t sub_23EBF3794()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 456);
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_23EBF37EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _BYTE *v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 424);
  sub_23EBD2A34(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 424), &qword_25433FA30);
    if (qword_256DB71D8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC76D8);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to retrieve serviceProxy configuration", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_9;
  }
  v10 = *(_QWORD *)(v0 + 416);
  sub_23EBBC840(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 448));
  v8 = sub_23EBF56E4(v10);
  v12 = *(_QWORD *)(v0 + 448);
  if (v11)
  {
    v9 = v11;
    sub_23EBBCA34(v12);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v8, v9);
  }
  v14 = *(_QWORD *)(v12 + 256);
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v12 + 248);
  *(_QWORD *)(v0 + 264) = v14;
  *(_QWORD *)(v0 + 224) = 45;
  *(_QWORD *)(v0 + 232) = 0xE100000000000000;
  *(_QWORD *)(v0 + 208) = 43;
  *(_QWORD *)(v0 + 216) = 0xE100000000000000;
  v15 = sub_23EBAFA74();
  *(_QWORD *)(v0 + 472) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v0 + 144) = sub_23EC2EA98();
  *(_QWORD *)(v0 + 152) = v17;
  *(_QWORD *)(v0 + 160) = 95;
  *(_QWORD *)(v0 + 168) = 0xE100000000000000;
  *(_QWORD *)(v0 + 176) = 47;
  *(_QWORD *)(v0 + 184) = 0xE100000000000000;
  v50 = v16;
  sub_23EC2EA98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((sub_23EC2E810() & 3) != 0)
  {
    v18 = sub_23EC2E810();
    swift_bridgeObjectRelease();
    v19 = v18 & 3;
    if (v18 <= 0)
      v19 = -(-v18 & 3);
    MEMORY[0x24265AEA8](61, 0xE100000000000000, 4 - v19);
    sub_23EC2E834();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = sub_23EC2E288();
  v22 = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 480) = v20;
  *(_QWORD *)(v0 + 488) = v22;
  if (v22 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    if (qword_256DB71D8 != -1)
      swift_once();
    v23 = sub_23EC2E684();
    __swift_project_value_buffer(v23, (uint64_t)qword_256DC76D8);
    v24 = sub_23EC2E66C();
    v25 = sub_23EC2EA08();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_23EB9F000, v24, v25, "Unable to generate encoded Token Key.", v26, 2u);
      MEMORY[0x24265B940](v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 448);

    sub_23EBF5F34();
    swift_allocError();
    *v28 = 2;
    swift_willThrow();
LABEL_32:
    sub_23EBBCA34(v27);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v29 = *(_QWORD *)(v0 + 416);
  swift_bridgeObjectRetain();
  v30 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  if (v29)
  {
    v31 = (void *)sub_23EC2E924();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE6B738]), sel_initRSABlindSignatureChallengeWithIssuerName_redemptionNonce_originNames_, v30, 0, v31, v50, v15, v15, v15);
  *(_QWORD *)(v0 + 496) = v32;

  v33 = objc_msgSend(v32, sel_challengeData);
  if (!v33)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v45 = sub_23EC2E684();
    __swift_project_value_buffer(v45, (uint64_t)qword_256DC76D8);
    v46 = sub_23EC2E66C();
    v47 = sub_23EC2EA08();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_23EB9F000, v46, v47, "Unable to generate challenge data", v48, 2u);
      MEMORY[0x24265B940](v48, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 448);

    sub_23EBF5F34();
    swift_allocError();
    *v49 = 3;
    swift_willThrow();

    sub_23EBA4CE0(v20, v22);
    goto LABEL_32;
  }
  v34 = v33;
  v35 = sub_23EC2E2D0();
  v37 = v36;

  *(_QWORD *)(v0 + 504) = v35;
  *(_QWORD *)(v0 + 512) = v37;
  v38 = objc_allocWithZone(MEMORY[0x24BE6B740]);
  sub_23EBA3E98(v35, v37);
  sub_23EBC48BC(v20, v22);
  v39 = (void *)sub_23EC2E2B8();
  v40 = (void *)sub_23EC2E2B8();
  v41 = objc_msgSend(v38, sel_initWithChallenge_tokenKey_originNameKey_, v39, v40, 0);
  *(_QWORD *)(v0 + 520) = v41;
  sub_23EBA4CE0(v20, v22);
  sub_23EBA3EDC(v35, v37);

  objc_msgSend(v41, sel_setSystemClient_, 1);
  if (qword_256DB7178 != -1)
    swift_once();
  v42 = qword_256DC7658;
  *(_QWORD *)(v0 + 56) = v0 + 192;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_23EBF3F40;
  v43 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v44 = (_QWORD *)(v0 + 80);
  v44[1] = 0x40000000;
  v44[2] = sub_23EBF4E28;
  v44[3] = &block_descriptor_0;
  v44[4] = v43;
  objc_msgSend(v41, sel_fetchTokenWithQueue_completionHandler_, v42, v44);
  return swift_continuation_await();
}

uint64_t sub_23EBF3F40()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 528) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void sub_23EBF3FA0()
{
  __asm { BR              X10 }
}

uint64_t sub_23EBF4670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 560) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 568) = a2;
    *(_QWORD *)(v6 + 576) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_23EBF46EC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 544);
  v2 = *(void **)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(void **)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 448);

  sub_23EBA4CE0(v7, v5);
  sub_23EBA3EDC(v4, v3);
  sub_23EBBCA34(v8);
  v9 = *(_QWORD *)(v0 + 576);
  v10 = *(_QWORD *)(v0 + 568);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v10);
}

uint64_t sub_23EBF47A4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  char v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;

  swift_willThrow();
  v1 = *(void **)(v0 + 528);
  *(_QWORD *)(v0 + 536) = v1;
  if (qword_256DB71D8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC76D8);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Error while trying to fetch Private Access Token", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  v6 = (void *)sub_23EC2E1C8();
  *(_QWORD *)(v0 + 544) = v6;
  if (objc_msgSend(v6, sel_code) != (id)1007)
    goto LABEL_9;
  v7 = sub_23EC2E66C();
  v8 = sub_23EC2EA08();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23EB9F000, v7, v8, "Private Access Token Error caused by Token issuance server error", v9, 2u);
    MEMORY[0x24265B940](v9, -1, -1);
  }
  v10 = *(_BYTE *)(v0 + 584);

  if ((v10 & 1) == 0)
  {
    v28 = sub_23EC2E66C();
    v29 = sub_23EC2EA14();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23EB9F000, v28, v29, "Trying to fetch token again.", v30, 2u);
      MEMORY[0x24265B940](v30, -1, -1);
    }

    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 552) = v31;
    *v31 = v0;
    v31[1] = sub_23EBF4670;
    return sub_23EBF35CC(*(_QWORD *)(v0 + 416), 1);
  }
  else
  {
LABEL_9:

    v11 = v1;
    v12 = v1;
    v13 = sub_23EC2E66C();
    v14 = sub_23EC2EA08();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v33 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue();
      v17 = sub_23EC2ED74();
      *(_QWORD *)(v0 + 400) = sub_23EBAE6D4(v17, v18, &v33);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23EB9F000, v13, v14, "%s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v16, -1, -1);
      MEMORY[0x24265B940](v15, -1, -1);
    }
    else
    {

    }
    v19 = v1;
    v20 = *(void **)(v0 + 520);
    v21 = *(_QWORD *)(v0 + 504);
    v32 = *(_QWORD *)(v0 + 512);
    v23 = *(_QWORD *)(v0 + 488);
    v22 = *(void **)(v0 + 496);
    v24 = *(_QWORD *)(v0 + 480);
    v25 = *(_QWORD *)(v0 + 448);
    sub_23EBF5F34();
    swift_allocError();
    *v26 = 1;
    swift_willThrow();

    sub_23EBA4CE0(v24, v23);
    sub_23EBA3EDC(v21, v32);
    sub_23EBBCA34(v25);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EBF4BD8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 544);
  v2 = *(void **)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(void **)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 448);

  sub_23EBA4CE0(v7, v5);
  sub_23EBA3EDC(v4, v3);
  sub_23EBBCA34(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBF4C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = sub_23EC2EA2C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23EC2EA20();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23EC2E69C();
  MEMORY[0x24BDAC7A8](v5);
  sub_23EBF5F78();
  sub_23EC2E690();
  v7[1] = MEMORY[0x24BEE4AF8];
  sub_23EBF5FB4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8880);
  sub_23EBF5FFC((unint64_t *)&qword_256DB8888, &qword_256DB8880, MEMORY[0x24BEE12C8]);
  sub_23EC2EAEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_23EC2EA38();
  qword_256DC7658 = result;
  return result;
}

uint64_t sub_23EBF4E28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = a2;
    v9 = sub_23EC2E2D0();
    v11 = v10;

    v12 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v12 = v9;
    v12[1] = v11;
    return swift_continuation_throwingResume();
  }
}

uint64_t TokenGenerationError.hash(into:)()
{
  return sub_23EC2EDBC();
}

BOOL static TokenGenerationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TokenGenerationError.hashValue.getter()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

unint64_t sub_23EBF4F4C()
{
  unint64_t result;

  result = qword_256DB8850;
  if (!qword_256DB8850)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TokenGenerationError, &type metadata for TokenGenerationError);
    atomic_store(result, (unint64_t *)&qword_256DB8850);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TokenGenerationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23EBF506C + 4 * byte_23EC344D9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23EBF50A0 + 4 * byte_23EC344D4[v4]))();
}

uint64_t sub_23EBF50A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBF50A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EBF50B0);
  return result;
}

uint64_t sub_23EBF50BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EBF50C4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23EBF50C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EBF50D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationError()
{
  return &type metadata for TokenGenerationError;
}

__CFString *sub_23EBF50EC()
{
  __CFString *v0;
  __CFString *v1;
  int AppBooleanValue;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BYTE *v6;
  __CFString *v7;
  __CFString *v8;
  CFPropertyListRef v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  __CFString *v16;
  unint64_t v17;
  CFPropertyListRef v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((os_variant_has_internal_diagnostics() & 1) == 0 && !sub_23EBD1194())
    return 0;
  LOBYTE(v16) = 0;
  v0 = (__CFString *)sub_23EC2E774();
  v1 = (__CFString *)sub_23EC2E774();
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, (Boolean *)&v16);

  if ((_BYTE)v16 && AppBooleanValue)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v3 = sub_23EC2E684();
    __swift_project_value_buffer(v3, (uint64_t)qword_256DC76D8);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA08();
    if (os_log_type_enabled(v4, v5))
    {
      v0 = (__CFString *)swift_slowAlloc();
      LOWORD(v0->isa) = 0;
      _os_log_impl(&dword_23EB9F000, v4, v5, "PAT feature has been disabled by Defaults override.", (uint8_t *)v0, 2u);
      MEMORY[0x24265B940](v0, -1, -1);
    }

    sub_23EBF5F34();
    swift_allocError();
    *v6 = 5;
    swift_willThrow();
    return v0;
  }
  v7 = (__CFString *)sub_23EC2E774();
  v8 = (__CFString *)sub_23EC2E774();
  v9 = CFPreferencesCopyAppValue(v7, v8);

  if (!v9)
    return 0;
  v18 = v9;
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v0 = v16;
  v10 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v10 = (unint64_t)v16 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (qword_256DB71D8 != -1)
    swift_once();
  v11 = sub_23EC2E684();
  __swift_project_value_buffer(v11, (uint64_t)qword_256DC76D8);
  v12 = sub_23EC2E66C();
  v13 = sub_23EC2EA08();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23EB9F000, v12, v13, "PAT | Using overridden value provided by defaults.", v14, 2u);
    MEMORY[0x24265B940](v14, -1, -1);
  }

  return v0;
}

uint64_t sub_23EBF5410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UtilityServicesConfigurationsModel();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_256DC76D8);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (!os_log_type_enabled(v10, v11))
      goto LABEL_12;
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    v13 = "Token Storage | Token Storage requires origin name";
    goto LABEL_11;
  }
  sub_23EBD2A34((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    sub_23EBBC840((uint64_t)v4, (uint64_t)v8);
    v16 = *((_QWORD *)v8 + 32);
    v20 = *((_QWORD *)v8 + 31);
    v21 = v16;
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    v18 = v20;
    v17 = v21;
    v20 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBF5FFC(&qword_256DB8858, &qword_25433FB20, MEMORY[0x24BEE12B0]);
    sub_23EC2E75C();
    v20 = v18;
    v21 = v17;
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v20;
    sub_23EBBCA34((uint64_t)v8);
    return v15;
  }
  sub_23EBA3038((uint64_t)v4, &qword_25433FA30);
  if (qword_256DB71D8 != -1)
    swift_once();
  v9 = sub_23EC2E684();
  __swift_project_value_buffer(v9, (uint64_t)qword_256DC76D8);
  v10 = sub_23EC2E66C();
  v11 = sub_23EC2EA08();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    v13 = "Token Storage | Unable to retrieve serviceProxy configuration required for token lookup key";
LABEL_11:
    _os_log_impl(&dword_23EB9F000, v10, v11, v13, v12, 2u);
    MEMORY[0x24265B940](v12, -1, -1);
  }
LABEL_12:

  return 0;
}

uint64_t sub_23EBF56E4(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;
  __CFString *v3;
  CFPropertyListRef v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;

  if (!a1)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v10 = sub_23EC2E684();
    __swift_project_value_buffer(v10, (uint64_t)qword_256DC76D8);
    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_25;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Token Storage requires origin name";
    goto LABEL_24;
  }
  sub_23EBF5410(a1);
  if (!v1)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v16 = sub_23EC2E684();
    __swift_project_value_buffer(v16, (uint64_t)qword_256DC76D8);
    v17 = sub_23EC2E66C();
    v18 = sub_23EC2EA08();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_23EB9F000, v17, v18, "Token Storage | Unable generate token save key", v19, 2u);
      MEMORY[0x24265B940](v19, -1, -1);
    }

    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_25;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Token Storage | unable to retrieve key from storage.";
    goto LABEL_24;
  }
  v2 = (__CFString *)sub_23EC2E774();
  v3 = (__CFString *)sub_23EC2E774();
  v4 = CFPreferencesCopyAppValue(v2, v3);
  swift_bridgeObjectRelease();

  if (!v4 || (swift_dynamicCast() & 1) == 0)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v15 = sub_23EC2E684();
    __swift_project_value_buffer(v15, (uint64_t)qword_256DC76D8);
    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_25;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Token Storage | no key found in storage";
LABEL_24:
    _os_log_impl(&dword_23EB9F000, v11, v12, v14, v13, 2u);
    MEMORY[0x24265B940](v13, -1, -1);
LABEL_25:

    return 0;
  }
  v5 = v21;
  if (qword_256DB71D8 != -1)
    swift_once();
  v6 = sub_23EC2E684();
  __swift_project_value_buffer(v6, (uint64_t)qword_256DC76D8);
  v7 = sub_23EC2E66C();
  v8 = sub_23EC2EA14();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23EB9F000, v7, v8, "Token Storage | returning stored key", v9, 2u);
    MEMORY[0x24265B940](v9, -1, -1);
  }

  return v5;
}

void sub_23EBF5A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *oslog;
  _QWORD v20[4];

  if (qword_256DB71D8 != -1)
    swift_once();
  v6 = sub_23EC2E684();
  __swift_project_value_buffer(v6, (uint64_t)qword_256DC76D8);
  v7 = sub_23EC2E66C();
  v8 = sub_23EC2EA14();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23EB9F000, v7, v8, "Token Storage | Initiating storing token in storage", v9, 2u);
    MEMORY[0x24265B940](v9, -1, -1);
  }

  v10 = sub_23EBF5410(a1);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v20[3] = MEMORY[0x24BEE0D00];
    v20[0] = a2;
    v20[1] = a3;
    swift_bridgeObjectRetain();
    sub_23EBD0AE4(v12, v13, (uint64_t)v20);
    swift_bridgeObjectRelease();
    sub_23EBA3038((uint64_t)v20, &qword_25433FBF0);
  }
  else
  {
    v14 = sub_23EC2E66C();
    v15 = sub_23EC2EA08();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_23EB9F000, v14, v15, "Token Storage | Unable generate token save key", v16, 2u);
      MEMORY[0x24265B940](v16, -1, -1);
    }

    oslog = sub_23EC2E66C();
    v17 = sub_23EC2EA08();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23EB9F000, oslog, v17, "Token Storage | Unable to store token in storage.", v18, 2u);
      MEMORY[0x24265B940](v18, -1, -1);
    }

  }
}

void sub_23EBF5CE8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  _OWORD v14[2];

  if (qword_256DB71D8 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC76D8);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA14();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Token Storage | Initiating removal of token from storage", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  v6 = sub_23EBF5410(a1);
  if (v7)
  {
    memset(v14, 0, sizeof(v14));
    sub_23EBD0AE4(v6, v7, (uint64_t)v14);
    sub_23EBA3038((uint64_t)v14, &qword_25433FBF0);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23EB9F000, v8, v9, "Token Storage | Unable generate token save key", v10, 2u);
      MEMORY[0x24265B940](v10, -1, -1);
    }

    oslog = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, oslog, v11, "Token Storage | Unable to remove token from storage without lookup key.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }

  }
}

unint64_t sub_23EBF5F34()
{
  unint64_t result;

  result = qword_256DB8868;
  if (!qword_256DB8868)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TokenGenerationError, &type metadata for TokenGenerationError);
    atomic_store(result, (unint64_t *)&qword_256DB8868);
  }
  return result;
}

unint64_t sub_23EBF5F78()
{
  unint64_t result;

  result = qword_256DB8870;
  if (!qword_256DB8870)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256DB8870);
  }
  return result;
}

unint64_t sub_23EBF5FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB8878;
  if (!qword_256DB8878)
  {
    v1 = sub_23EC2EA20();
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_256DB8878);
  }
  return result;
}

uint64_t sub_23EBF5FFC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24265B8B0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23EBF603C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_23EBF6044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_23EBF604C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_23EBF6054(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23EBF605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_23EBF6064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_23EBF606C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_23EBF6074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 64) + *(_QWORD *)(a4 + 64));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_23EBA724C;
  return v11(a1, a2, a3, a4);
}

void sub_23EBF60FC()
{
  uint64_t v0;

  v0 = sub_23EC2E0CC();
  MEMORY[0x24BDAC7A8](v0);
  __asm { BR              X10; loc_23EBF61BC }
}

uint64_t sub_23EBF61FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (a1 == 7759204 && v4 == 0xE300000000000000)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    *(_QWORD *)(v5 - 88) = 0x6E7265746E496171;
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __asm { BR              X10; loc_23EBF62F8 }
    }
  }
  sub_23EC2E0C0();
  sub_23EC2E0B4();
  swift_bridgeObjectRetain();
  sub_23EC2E090();
  sub_23EC2E09C();
  sub_23EC2E084();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t destroy for InternalOtpProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19HomeUtilityServices9ConfigURLVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfigURL(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ConfigURL(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalOtpProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalOtpProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfigURL()
{
  return &type metadata for ConfigURL;
}

ValueMetadata *type metadata accessor for UtilityPeakPeriodsController()
{
  return &type metadata for UtilityPeakPeriodsController;
}

uint64_t sub_23EBF6730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[32] = a6;
  v7[33] = a7;
  v7[30] = a4;
  v7[31] = a5;
  v7[28] = a2;
  v7[29] = a3;
  v7[27] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[34] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[35] = v9;
  v7[36] = *(_QWORD *)(v9 - 8);
  v7[37] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[38] = v10;
  *v10 = v7;
  v10[1] = sub_23EBF67D8;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EBF67D8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBF682C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = sub_23EC2E138();
  if ((v2 & 1) != 0 || (v3 = v1, v4 = sub_23EC2E144(), (v5 & 1) != 0) || (v6 = v4, v7 = sub_23EC2E12C(), (v8 & 1) != 0))
  {
    if (qword_256DB7210 != -1)
      swift_once();
    v23 = sub_23EC2E684();
    __swift_project_value_buffer(v23, (uint64_t)qword_256DC7780);
    v24 = sub_23EC2E66C();
    v25 = sub_23EC2EA08();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_23EB9F000, v24, v25, "Unable to compute start date. Check DateComponents.", v26, 2u);
      MEMORY[0x24265B940](v26, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v7;
    v11 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 232);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23EC32680;
    *(_QWORD *)(inited + 32) = 0x497974696C697475;
    *(_QWORD *)(inited + 40) = 0xE900000000000064;
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 56) = v12;
    *(_QWORD *)(inited + 64) = 0x7250666669726174;
    *(_QWORD *)(inited + 72) = 0xEF6449656C69666FLL;
    *(_QWORD *)(inited + 80) = v11;
    *(_QWORD *)(inited + 88) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 312) = sub_23EBA7540(inited);
    KeyPath = swift_getKeyPath();
    *(_QWORD *)(v0 + 320) = KeyPath;
    *(_QWORD *)(v0 + 200) = v3;
    v16 = MEMORY[0x24BEE1768];
    v27 = sub_23EC2ED20();
    v28 = v17;
    sub_23EC2E834();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88A0);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_23EC2FB70;
    v19 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v18 + 56) = v16;
    *(_QWORD *)(v18 + 64) = v19;
    *(_QWORD *)(v18 + 32) = v6;
    sub_23EC2E7A4();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    sub_23EC2E834();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_23EC2FB70;
    *(_QWORD *)(v20 + 56) = v16;
    *(_QWORD *)(v20 + 64) = v19;
    *(_QWORD *)(v20 + 32) = v9;
    sub_23EC2E7A4();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 328) = v28;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 336) = v21;
    *v21 = v0;
    v21[1] = sub_23EBF6BAC;
    return sub_23EBBCBA4(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), v27, v28, KeyPath);
  }
}

uint64_t sub_23EBF6BAC()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23EBF6C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB7210 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7780);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for utility rate peaks.", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 296), v3, v1);
    sub_23EC0A6EC(0xD00000000000002ALL, 0x800000023EC39FA0, (uint8_t *)0xD000000000000025, 0x800000023EC39FD0);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v10;
    *v10 = v0;
    v10[1] = sub_23EBF6E30;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBF6E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[44] = a1;
  v5[45] = a2;
  v5[46] = a3;
  v5[47] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBF6EA0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  uint8_t *v41;
  NSObject *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v56;
  os_log_type_t v57;
  uint8_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    if (qword_256DB7210 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7780);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process Utility Rate Peaks Response.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 360);
    v14 = *(void **)(v0 + 368);
    v15 = *(_QWORD *)(v0 + 352);
    v17 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 280);

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v19 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v15, v13);
LABEL_42:

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_43;
  }
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 368);
  sub_23EC0AFC4(0xD000000000000028, (uint8_t *)0x800000023EC3A000, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4E8A8);
  v4 = objc_msgSend(v2, sel_statusCode);
  switch((unint64_t)v4)
  {
    case 0x190uLL:
      if (qword_256DB7210 != -1)
        swift_once();
      v5 = sub_23EC2E684();
      __swift_project_value_buffer(v5, (uint64_t)qword_256DC7780);
      v6 = sub_23EC2E66C();
      v7 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
        MEMORY[0x24265B940](v8, -1, -1);
      }
      goto LABEL_41;
    case 0x191uLL:
      if (qword_256DB7210 != -1)
        swift_once();
      v43 = sub_23EC2E684();
      __swift_project_value_buffer(v43, (uint64_t)qword_256DC7780);
      v6 = sub_23EC2E66C();
      v44 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v44, "Request Unauthorized or Access Token Expired.", v45, 2u);
        MEMORY[0x24265B940](v45, -1, -1);
      }
      goto LABEL_41;
    case 0x192uLL:
    case 0x193uLL:
    case 0x195uLL:
    case 0x196uLL:
    case 0x197uLL:
    case 0x198uLL:
    case 0x199uLL:
    case 0x19AuLL:
    case 0x19BuLL:
    case 0x19CuLL:
    case 0x19DuLL:
    case 0x19EuLL:
    case 0x19FuLL:
    case 0x1A0uLL:
    case 0x1A1uLL:
    case 0x1A2uLL:
    case 0x1A3uLL:
    case 0x1A4uLL:
    case 0x1A5uLL:
    case 0x1A6uLL:
    case 0x1A7uLL:
    case 0x1A8uLL:
    case 0x1A9uLL:
    case 0x1AAuLL:
    case 0x1ABuLL:
    case 0x1ACuLL:
      goto LABEL_23;
    case 0x194uLL:
      if (qword_256DB7210 != -1)
        swift_once();
      v46 = sub_23EC2E684();
      __swift_project_value_buffer(v46, (uint64_t)qword_256DC7780);
      v6 = sub_23EC2E66C();
      v47 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v47, "Tariff Identifier or Utility Identifier not found.", v48, 2u);
        MEMORY[0x24265B940](v48, -1, -1);
      }
      goto LABEL_41;
    case 0x1ADuLL:
      if (qword_256DB7208 != -1)
        swift_once();
      v49 = sub_23EC2E684();
      __swift_project_value_buffer(v49, (uint64_t)qword_256DC7768);
      v6 = sub_23EC2E66C();
      v50 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v50, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v51, 2u);
        MEMORY[0x24265B940](v51, -1, -1);
      }
LABEL_41:
      v52 = *(_QWORD *)(v0 + 360);
      v14 = *(void **)(v0 + 368);
      v53 = *(_QWORD *)(v0 + 352);
      v17 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 296);
      v18 = *(_QWORD *)(v0 + 280);

      type metadata accessor for NetworkError();
      sub_23EBCBFD0();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v53, v52);

      goto LABEL_42;
    default:
      if (v4 == (id)500)
      {
        if (qword_256DB7208 != -1)
          swift_once();
        v56 = sub_23EC2E684();
        __swift_project_value_buffer(v56, (uint64_t)qword_256DC7768);
        v38 = sub_23EC2E66C();
        v57 = sub_23EC2EA08();
        if (os_log_type_enabled(v38, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_23EB9F000, v38, v57, "Internal Server Error", v58, 2u);
          MEMORY[0x24265B940](v58, -1, -1);
        }
        v42 = *(NSObject **)(v0 + 368);
        goto LABEL_51;
      }
      if (v4 != (id)200)
      {
LABEL_23:
        if (qword_256DB7208 != -1)
          swift_once();
        v35 = *(void **)(v0 + 368);
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC7768);
        v37 = v35;
        v38 = sub_23EC2E66C();
        v39 = sub_23EC2EA08();
        if (os_log_type_enabled(v38, v39))
        {
          v40 = *(void **)(v0 + 368);
          v41 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v41 = 134217984;
          *(_QWORD *)(v0 + 208) = objc_msgSend(v2, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v38, v39, "Request failed : Status Code %ld", v41, 0xCu);
          MEMORY[0x24265B940](v41, -1, -1);
          v42 = *(NSObject **)(v0 + 368);
        }
        else
        {

          v42 = *(NSObject **)(v0 + 368);
          v38 = v42;
        }
LABEL_51:
        v60 = *(_QWORD *)(v0 + 352);
        v59 = *(_QWORD *)(v0 + 360);
        v61 = *(_QWORD *)(v0 + 288);
        v72 = *(_QWORD *)(v0 + 280);
        v73 = *(_QWORD *)(v0 + 296);

        type metadata accessor for NetworkError();
        sub_23EBCBFD0();
        swift_allocError();
        *v62 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v60, v59);

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v72);
        goto LABEL_43;
      }
      if (qword_256DB7210 != -1)
        swift_once();
      v20 = sub_23EC2E684();
      __swift_project_value_buffer(v20, (uint64_t)qword_256DC7780);
      v21 = sub_23EC2E66C();
      v22 = sub_23EC2EA14();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_23EB9F000, v21, v22, "Utility Rate Peaks Response received.", v23, 2u);
        MEMORY[0x24265B940](v23, -1, -1);
      }
      v24 = *(void **)(v0 + 376);

      sub_23EC2DFC4();
      swift_allocObject();
      sub_23EC2DFB8();
      sub_23EBF799C();
      sub_23EC2DFAC();
      if (!v24)
      {
        v63 = *(_QWORD *)(v0 + 360);
        v64 = *(void **)(v0 + 368);
        v65 = *(_QWORD *)(v0 + 352);
        v66 = *(_QWORD *)(v0 + 216);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));

        swift_release();
        sub_23EBA3EDC(v65, v63);
        v67 = *(_QWORD *)(v0 + 128);
        v68 = *(_OWORD *)(v0 + 136);
        v69 = *(_OWORD *)(v0 + 152);
        v70 = *(_OWORD *)(v0 + 168);
        v71 = *(_OWORD *)(v0 + 184);
        *(_OWORD *)v66 = *(_OWORD *)(v0 + 112);
        *(_QWORD *)(v66 + 16) = v67;
        *(_OWORD *)(v66 + 24) = v68;
        *(_OWORD *)(v66 + 40) = v69;
        *(_OWORD *)(v66 + 56) = v70;
        *(_OWORD *)(v66 + 72) = v71;
        swift_task_dealloc();
        swift_task_dealloc();
        v54 = *(uint64_t (**)(void))(v0 + 8);
        return v54();
      }
      v25 = v24;
      swift_release();
      v26 = sub_23EC2E66C();
      v27 = sub_23EC2EA08();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_23EB9F000, v26, v27, "Error while decoding response from server", v28, 2u);
        MEMORY[0x24265B940](v28, -1, -1);
      }
      v29 = *(_QWORD *)(v0 + 360);
      v30 = *(void **)(v0 + 368);
      v31 = *(_QWORD *)(v0 + 352);
      v33 = *(_QWORD *)(v0 + 288);
      v32 = *(_QWORD *)(v0 + 296);
      v34 = *(_QWORD *)(v0 + 280);

      sub_23EC244A4(v25);
      swift_willThrow();
      sub_23EBA3EDC(v31, v29);

      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_43:
      swift_task_dealloc();
      swift_task_dealloc();
      v54 = *(uint64_t (**)(void))(v0 + 8);
      return v54();
  }
}

uint64_t sub_23EBF794C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 280));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EBF799C()
{
  unint64_t result;

  result = qword_256DB88A8;
  if (!qword_256DB88A8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityPeaks, &type metadata for UtilityPeaks);
    atomic_store(result, (unint64_t *)&qword_256DB88A8);
  }
  return result;
}

uint64_t sub_23EBF79E0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88D8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF91B4();
  sub_23EC2EDE0();
  v9[1] = a2;
  sub_23EBF923C();
  sub_23EC2ECD8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23EBF7AD8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8920);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF954C();
  sub_23EC2EDE0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8910);
  sub_23EBF9590(&qword_256DB8928, &qword_256DB79C8, (uint64_t)&protocol conformance descriptor for UtilityServiceLocation, MEMORY[0x24BEE12A0]);
  sub_23EC2ED08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23EBF7BFC()
{
  return 0xD000000000000018;
}

uint64_t sub_23EBF7C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBF9010(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23EBF7C40()
{
  sub_23EBF91B4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBF7C68()
{
  sub_23EBF91B4();
  return sub_23EC2EE04();
}

_QWORD *sub_23EBF7C90@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EBF9094(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EBF7CB8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBF79E0(a1, *v1);
}

unint64_t sub_23EBF7CD0()
{
  return 0xD000000000000010;
}

uint64_t sub_23EBF7CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EBF937C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23EBF7D14()
{
  sub_23EBF954C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBF7D3C()
{
  sub_23EBF954C();
  return sub_23EC2EE04();
}

_QWORD *sub_23EBF7D64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EBF9400(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EBF7D8C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBF7AD8(a1, *v1);
}

uint64_t sub_23EBF7DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v5[9] = swift_task_alloc();
  v7 = sub_23EC2DFA0();
  v5[10] = v7;
  v5[11] = *(_QWORD *)(v7 - 8);
  v5[12] = swift_task_alloc();
  v8 = (_QWORD *)swift_task_alloc();
  v5[13] = v8;
  *v8 = v5;
  v8[1] = sub_23EBF7E48;
  return sub_23EBD176C(a5);
}

uint64_t sub_23EBF7E48()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBF7E9C()
{
  uint64_t *v0;
  uint64_t KeyPath;
  _QWORD *v2;

  KeyPath = swift_getKeyPath();
  v0[14] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc();
  v0[15] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23EBF7F0C;
  return sub_23EBDB048(v0[9], v0[4], v0[5], v0[6], v0[7], KeyPath, 0);
}

uint64_t sub_23EBF7F0C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23EBF7F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB71F8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7738);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for Service Location Lookup", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 96), v3, v1);
    sub_23EC0A6EC(0xD000000000000011, 0x800000023EC3A030, (uint8_t *)0xD000000000000030, 0x800000023EC3A050);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v10;
    *v10 = v0;
    v10[1] = sub_23EBF818C;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBF818C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[17] = a1;
  v5[18] = a2;
  v5[19] = a3;
  v5[20] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBF81FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  void *v42;
  uint8_t *v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    if (qword_256DB71F8 != -1)
      swift_once();
    v10 = sub_23EC2E684();
    __swift_project_value_buffer(v10, (uint64_t)qword_256DC7738);
    v11 = sub_23EC2E66C();
    v12 = sub_23EC2EA08();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23EB9F000, v11, v12, "Unable to process Service Location Response.", v13, 2u);
      MEMORY[0x24265B940](v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 144);
    v15 = *(void **)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 80);

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v20 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v16, v14);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    goto LABEL_50;
  }
  v2 = (void *)v1;
  v3 = (uint64_t *)(v0 + 24);
  v4 = *(id *)(v0 + 152);
  sub_23EC0AFC4(0xD00000000000001BLL, (uint8_t *)0x800000023EC3A090, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4ECD0);
  v5 = objc_msgSend(v2, sel_statusCode);
  switch((unint64_t)v5)
  {
    case 0x190uLL:
      if (qword_256DB71F8 != -1)
        swift_once();
      v6 = sub_23EC2E684();
      __swift_project_value_buffer(v6, (uint64_t)qword_256DC7738);
      v7 = sub_23EC2E66C();
      v8 = sub_23EC2EA08();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_23EB9F000, v7, v8, "BAD REQUEST | Check request", v9, 2u);
        MEMORY[0x24265B940](v9, -1, -1);
      }
      goto LABEL_41;
    case 0x191uLL:
      if (qword_256DB71F8 != -1)
        swift_once();
      v44 = sub_23EC2E684();
      __swift_project_value_buffer(v44, (uint64_t)qword_256DC7738);
      v7 = sub_23EC2E66C();
      v45 = sub_23EC2EA08();
      if (os_log_type_enabled(v7, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v46 = 0;
        _os_log_impl(&dword_23EB9F000, v7, v45, "Request Unauthorized.", v46, 2u);
        MEMORY[0x24265B940](v46, -1, -1);
      }
      goto LABEL_41;
    case 0x192uLL:
    case 0x193uLL:
    case 0x194uLL:
    case 0x195uLL:
    case 0x196uLL:
    case 0x197uLL:
    case 0x198uLL:
    case 0x199uLL:
    case 0x19AuLL:
    case 0x19BuLL:
    case 0x19DuLL:
    case 0x19EuLL:
    case 0x19FuLL:
    case 0x1A0uLL:
    case 0x1A1uLL:
    case 0x1A2uLL:
    case 0x1A3uLL:
    case 0x1A4uLL:
    case 0x1A5uLL:
    case 0x1A6uLL:
    case 0x1A7uLL:
    case 0x1A8uLL:
    case 0x1A9uLL:
    case 0x1AAuLL:
    case 0x1ABuLL:
    case 0x1ACuLL:
      goto LABEL_23;
    case 0x19CuLL:
      if (qword_256DB71F8 != -1)
        swift_once();
      v47 = sub_23EC2E684();
      __swift_project_value_buffer(v47, (uint64_t)qword_256DC7738);
      v7 = sub_23EC2E66C();
      v48 = sub_23EC2EA08();
      if (os_log_type_enabled(v7, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_23EB9F000, v7, v48, "Access Token expired. Retry after refreshing token", v49, 2u);
        MEMORY[0x24265B940](v49, -1, -1);
      }
      goto LABEL_41;
    case 0x1ADuLL:
      if (qword_256DB71F8 != -1)
        swift_once();
      v50 = sub_23EC2E684();
      __swift_project_value_buffer(v50, (uint64_t)qword_256DC7738);
      v7 = sub_23EC2E66C();
      v51 = sub_23EC2EA08();
      if (os_log_type_enabled(v7, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_23EB9F000, v7, v51, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v52, 2u);
        MEMORY[0x24265B940](v52, -1, -1);
      }
LABEL_41:
      v53 = *(_QWORD *)(v0 + 144);
      v54 = *(void **)(v0 + 152);
      v55 = *(_QWORD *)(v0 + 136);
      v57 = *(_QWORD *)(v0 + 88);
      v56 = *(_QWORD *)(v0 + 96);
      v58 = *(_QWORD *)(v0 + 80);

      type metadata accessor for NetworkError();
      sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v55, v53);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      goto LABEL_50;
    default:
      if (v5 == (id)500)
      {
        if (qword_256DB71F8 != -1)
          swift_once();
        v59 = sub_23EC2E684();
        __swift_project_value_buffer(v59, (uint64_t)qword_256DC7738);
        v60 = sub_23EC2E66C();
        v61 = sub_23EC2EA08();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v62 = 0;
          _os_log_impl(&dword_23EB9F000, v60, v61, "Internal Server Error", v62, 2u);
          MEMORY[0x24265B940](v62, -1, -1);
        }
        v64 = *(_QWORD *)(v0 + 144);
        v63 = *(void **)(v0 + 152);
        v65 = *(_QWORD *)(v0 + 136);
        v66 = *(_QWORD *)(v0 + 88);
        v77 = *(_QWORD *)(v0 + 80);
        v78 = *(_QWORD *)(v0 + 96);

        goto LABEL_49;
      }
      if (v5 != (id)200)
      {
LABEL_23:
        if (qword_256DB71F8 != -1)
          swift_once();
        v36 = *(void **)(v0 + 152);
        v37 = sub_23EC2E684();
        __swift_project_value_buffer(v37, (uint64_t)qword_256DC7738);
        v38 = v36;
        v39 = sub_23EC2E66C();
        v40 = sub_23EC2EA08();
        v41 = os_log_type_enabled(v39, v40);
        v42 = *(void **)(v0 + 152);
        if (v41)
        {
          v43 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v43 = 134217984;
          *(_QWORD *)(v0 + 16) = objc_msgSend(v2, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v39, v40, "Request failed : Status Code %ld", v43, 0xCu);
          MEMORY[0x24265B940](v43, -1, -1);
        }
        else
        {

        }
        v64 = *(_QWORD *)(v0 + 144);
        v63 = *(void **)(v0 + 152);
        v65 = *(_QWORD *)(v0 + 136);
        v66 = *(_QWORD *)(v0 + 88);
        v77 = *(_QWORD *)(v0 + 80);
        v78 = *(_QWORD *)(v0 + 96);
LABEL_49:
        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        *v67 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v65, v64);

        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v78, v77);
        goto LABEL_50;
      }
      if (qword_256DB71F8 != -1)
        swift_once();
      v21 = sub_23EC2E684();
      __swift_project_value_buffer(v21, (uint64_t)qword_256DC7738);
      v22 = sub_23EC2E66C();
      v23 = sub_23EC2EA14();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_23EB9F000, v22, v23, "Service Locations Response received", v24, 2u);
        MEMORY[0x24265B940](v24, -1, -1);
      }
      v25 = *(void **)(v0 + 160);

      sub_23EC2DFC4();
      swift_allocObject();
      sub_23EC2DFB8();
      sub_23EBF8E68();
      sub_23EC2DFAC();
      v26 = v25;
      swift_release();
      if (v25)
        goto LABEL_20;
      v69 = *v3;
      if (!*v3)
      {
        v73 = sub_23EC2E66C();
        v74 = sub_23EC2EA08();
        if (os_log_type_enabled(v73, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v75 = 0;
          _os_log_impl(&dword_23EB9F000, v73, v74, "Error while decoding response from server", v75, 2u);
          MEMORY[0x24265B940](v75, -1, -1);
        }

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        v26 = (void *)swift_allocError();
        *v76 = 1;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
LABEL_20:
        v27 = sub_23EC2E66C();
        v28 = sub_23EC2EA08();
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v29 = 0;
          _os_log_impl(&dword_23EB9F000, v27, v28, "Error while decoding response from server", v29, 2u);
          MEMORY[0x24265B940](v29, -1, -1);
        }
        v30 = *(_QWORD *)(v0 + 144);
        v31 = *(void **)(v0 + 152);
        v32 = *(_QWORD *)(v0 + 136);
        v34 = *(_QWORD *)(v0 + 88);
        v33 = *(_QWORD *)(v0 + 96);
        v35 = *(_QWORD *)(v0 + 80);

        sub_23EC244A4(v26);
        swift_willThrow();
        sub_23EBA3EDC(v32, v30);

        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
LABEL_50:
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v70 = *(_QWORD *)(v0 + 144);
      v71 = *(void **)(v0 + 152);
      v72 = *(_QWORD *)(v0 + 136);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));

      sub_23EBA3EDC(v72, v70);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v69);
  }
}

uint64_t sub_23EBF8E18()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EBF8E68()
{
  unint64_t result;

  result = qword_256DB88B8;
  if (!qword_256DB88B8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC347D8, &type metadata for UtilityServiceLocationsResponse);
    atomic_store(result, (unint64_t *)&qword_256DB88B8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for UtilityServiceLocationsResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UtilityServiceLocationsResponse()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for UtilityServiceLocationsResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for UtilityServiceLocationsResponse(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityServiceLocationsResponse(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityServiceLocationsResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityServiceLocationsResponse()
{
  return &type metadata for UtilityServiceLocationsResponse;
}

uint64_t sub_23EBF9010(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000018 && a2 == 0x800000023EC3A0B0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_QWORD *sub_23EBF9094(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF91B4();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    sub_23EBF91F8();
    sub_23EC2EC78();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_23EBF91B4()
{
  unint64_t result;

  result = qword_256DB88C8;
  if (!qword_256DB88C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34930, &type metadata for UtilityServiceLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB88C8);
  }
  return result;
}

unint64_t sub_23EBF91F8()
{
  unint64_t result;

  result = qword_256DB88D0;
  if (!qword_256DB88D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34908, &type metadata for UtilityServiceLocations);
    atomic_store(result, (unint64_t *)&qword_256DB88D0);
  }
  return result;
}

unint64_t sub_23EBF923C()
{
  unint64_t result;

  result = qword_256DB88E0;
  if (!qword_256DB88E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC348E0, &type metadata for UtilityServiceLocations);
    atomic_store(result, (unint64_t *)&qword_256DB88E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UtilityServiceLocationsResponse.CodingKeys()
{
  return &type metadata for UtilityServiceLocationsResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for UtilityServiceLocations()
{
  return &type metadata for UtilityServiceLocations;
}

unint64_t sub_23EBF92A8()
{
  unint64_t result;

  result = qword_256DB88E8;
  if (!qword_256DB88E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC348B8, &type metadata for UtilityServiceLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB88E8);
  }
  return result;
}

unint64_t sub_23EBF92F0()
{
  unint64_t result;

  result = qword_256DB88F0;
  if (!qword_256DB88F0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34828, &type metadata for UtilityServiceLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB88F0);
  }
  return result;
}

unint64_t sub_23EBF9338()
{
  unint64_t result;

  result = qword_256DB88F8;
  if (!qword_256DB88F8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34850, &type metadata for UtilityServiceLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB88F8);
  }
  return result;
}

uint64_t sub_23EBF937C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023EC37A20)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_QWORD *sub_23EBF9400(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8900);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBF954C();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8910);
    sub_23EBF9590(&qword_256DB8918, &qword_256DB79F0, (uint64_t)&protocol conformance descriptor for UtilityServiceLocation, MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_23EBF954C()
{
  unint64_t result;

  result = qword_256DB8908;
  if (!qword_256DB8908)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34A38, &type metadata for UtilityServiceLocations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8908);
  }
  return result;
}

uint64_t sub_23EBF9590(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8910);
    v10 = sub_23EBC0AD4(a2, (uint64_t (*)(uint64_t))type metadata accessor for UtilityServiceLocation, a3);
    result = MEMORY[0x24265B8B0](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s19HomeUtilityServices31UtilityServiceLocationsResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EBF9654 + 4 * byte_23EC3473C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EBF9674 + 4 * byte_23EC34741[v4]))();
}

_BYTE *sub_23EBF9654(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EBF9674(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBF967C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBF9684(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EBF968C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EBF9694(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UtilityServiceLocations.CodingKeys()
{
  return &type metadata for UtilityServiceLocations.CodingKeys;
}

unint64_t sub_23EBF96B4()
{
  unint64_t result;

  result = qword_256DB8930;
  if (!qword_256DB8930)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34A10, &type metadata for UtilityServiceLocations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8930);
  }
  return result;
}

unint64_t sub_23EBF96FC()
{
  unint64_t result;

  result = qword_256DB8938;
  if (!qword_256DB8938)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34980, &type metadata for UtilityServiceLocations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8938);
  }
  return result;
}

unint64_t sub_23EBF9744()
{
  unint64_t result;

  result = qword_256DB8940;
  if (!qword_256DB8940)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC349A8, &type metadata for UtilityServiceLocations.CodingKeys);
    atomic_store(result, &qword_256DB8940);
  }
  return result;
}

uint64_t sub_23EBF978C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[5] = a8;
  v8[6] = v12;
  v8[3] = a4;
  v8[4] = a5;
  v8[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[7] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v8[8] = v9;
  v8[9] = *(_QWORD *)(v9 - 8);
  v8[10] = swift_task_alloc();
  v8[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v8[12] = swift_task_alloc();
  v10 = sub_23EC2E264();
  v8[13] = v10;
  v8[14] = *(_QWORD *)(v10 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBF9888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_23EBBA5A0(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(*(_QWORD *)(v0 + 96), &qword_25433F930);
    if (qword_25433FAC0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_25433FC38);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Request URL for Utility Configuration API not found", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 32))(v10, *(_QWORD *)(v0 + 96), v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v10, v11);
    sub_23EC2DF58();
    sub_23EC2DF40();
    if (v13)
    {
      v14 = *(_QWORD *)(v0 + 32);
      v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0)
        v15 = *(_QWORD *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      if (v15)
        sub_23EC2DF70();
    }
    sub_23EC0A4E0(*(_QWORD *)(v0 + 80));
    v17 = (char *)&dword_256DB7E50 + dword_256DB7E50;
    v16 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v16;
    *v16 = v0;
    v16[1] = sub_23EBF9B10;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v17)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_23EBF9B10()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  v4 = v2[9];
  v3 = v2[10];
  v5 = v2[8];
  if (v0)
  {

    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[19] = v6;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[18] = v6;
  }
  v6(v3, v5);
  return swift_task_switch();
}

uint64_t sub_23EBF9BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  if (v4 == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_25433FAC0 != -1)
      swift_once();
    v6 = sub_23EC2E684();
    __swift_project_value_buffer(v6, (uint64_t)qword_25433FC38);
    v7 = sub_23EC2E66C();
    v8 = sub_23EC2EA08();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v7, v8, "Unable to sign Utility Configuration request", v9, 2u);
      MEMORY[0x24265B940](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 64);

    v5(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v15 = 1;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 16), v3, v1);
    sub_23EC2DF94();
    v5(v19, v1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    v15 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), v15, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EBF9DE8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 56), 1, 1, *(_QWORD *)(v0 + 64));
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  sub_23EBA3038(*(_QWORD *)(v0 + 56), &qword_25433F918);
  if (qword_25433FAC0 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_25433FC38);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "Unable to sign Utility Configuration request", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);

  v1(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *__swift_memcpy544_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x220uLL);
}

ValueMetadata *type metadata accessor for InternalUtilityConfig()
{
  return &type metadata for InternalUtilityConfig;
}

uint64_t sub_23EBF9FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[156] = a3;
  v3[155] = a2;
  v3[154] = a1;
  v3[157] = type metadata accessor for NetworkError();
  v3[158] = swift_task_alloc();
  v4 = sub_23EC2E1E0();
  v3[159] = v4;
  v3[160] = *(_QWORD *)(v4 - 8);
  v3[161] = swift_task_alloc();
  v5 = sub_23EC2E264();
  v3[162] = v5;
  v3[163] = *(_QWORD *)(v5 - 8);
  v3[164] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v3[165] = swift_task_alloc();
  v3[166] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v3[167] = swift_task_alloc();
  v6 = sub_23EC2DFA0();
  v3[168] = v6;
  v3[169] = *(_QWORD *)(v6 - 8);
  v3[170] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  v3[171] = swift_task_alloc();
  v7 = sub_23EC2E3CC();
  v3[172] = v7;
  v3[173] = *(_QWORD *)(v7 - 8);
  v3[174] = swift_task_alloc();
  v3[175] = swift_task_alloc();
  v3[176] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EBFA14C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  unsigned int v4;
  __CFString *v5;
  __CFString *v6;
  CFPropertyListRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __CFString *v42;
  __CFString *v43;
  CFPropertyListRef v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  objc_class *v63;
  char *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t __dst[70];

  if (qword_25433FB40 != -1)
    swift_once();
  __dst[0] = qword_25433FC00;
  __dst[1] = *(_QWORD *)algn_25433FC08;
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  sub_23EC1AE84();
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = __dst[1];
  *(_QWORD *)(v0 + 1416) = __dst[0];
  *(_QWORD *)(v0 + 1424) = v1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v3 = (void *)sub_23EC2E774();
  v4 = objc_msgSend(v2, sel_fileExistsAtPath_, v3);
  *(_BYTE *)(v0 + 1520) = v4;

  if (!v4 || (sub_23EC01140() & 1) == 0)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v33 = sub_23EC2E684();
    __swift_project_value_buffer(v33, (uint64_t)qword_256DC7690);
    v34 = sub_23EC2E66C();
    v35 = sub_23EC2EA08();
    if (!os_log_type_enabled(v34, v35))
      goto LABEL_17;
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "No perviously fetched Config file found on disk. Proceed to fetch new file.";
    goto LABEL_16;
  }
  sub_23EC006DC();
  v5 = (__CFString *)sub_23EC2E774();
  v6 = (__CFString *)sub_23EC2E774();
  v7 = CFPreferencesCopyAppValue(v5, v6);

  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v0 + 1384);
  v9 = *(_QWORD *)(v0 + 1376);
  v10 = *(_QWORD *)(v0 + 1368);
  if (!v7)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v8 + 56))(*(_QWORD *)(v0 + 1368), 1, 1, *(_QWORD *)(v0 + 1376));
    goto LABEL_20;
  }
  *(_QWORD *)(v0 + 1216) = v7;
  v11 = swift_dynamicCast();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, v11 ^ 1u, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9) == 1)
  {
LABEL_20:
    sub_23EBA3038(*(_QWORD *)(v0 + 1368), &qword_25433F948);
    goto LABEL_21;
  }
  v12 = *(_QWORD *)(v0 + 1400);
  v13 = *(_QWORD *)(v0 + 1384);
  v14 = *(_QWORD *)(v0 + 1376);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v13 + 32))(*(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1368), v14);
  sub_23EC2E39C();
  v15 = sub_23EC2E360();
  v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v16(v12, v14);
  if ((v15 & 1) == 0)
  {
    v16(*(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1376));
LABEL_21:
    sub_23EC00830();
    v42 = (__CFString *)sub_23EC2E774();
    v43 = (__CFString *)sub_23EC2E774();
    v44 = CFPreferencesCopyAppValue(v42, v43);

    swift_bridgeObjectRelease();
    if (v44)
    {
      *(_QWORD *)(v0 + 1200) = v44;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v38 = *(_QWORD *)(v0 + 1128);
        v39 = *(_QWORD *)(v0 + 1136);
        goto LABEL_18;
      }
    }
    if (qword_25433FAD8 != -1)
      swift_once();
    v45 = sub_23EC2E684();
    __swift_project_value_buffer(v45, (uint64_t)qword_25433FC68);
    v34 = sub_23EC2E66C();
    v35 = sub_23EC2EA08();
    if (!os_log_type_enabled(v34, v35))
    {
LABEL_17:

      v38 = 0;
      v39 = 0;
LABEL_18:
      *(_QWORD *)(v0 + 1440) = v39;
      *(_QWORD *)(v0 + 1432) = v38;
      v40 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1448) = v40;
      *v40 = v0;
      v40[1] = sub_23EBFADB8;
      return sub_23EBD176C(*(_QWORD *)(v0 + 1248));
    }
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    v37 = "Config file exists on disk. But no eTag Value!";
LABEL_16:
    _os_log_impl(&dword_23EB9F000, v34, v35, v37, v36, 2u);
    MEMORY[0x24265B940](v36, -1, -1);
    goto LABEL_17;
  }
  v17 = 0x25433F000uLL;
  if (qword_25433FAD8 != -1)
    swift_once();
  v18 = *(_QWORD *)(v0 + 1408);
  v19 = *(_QWORD *)(v0 + 1392);
  v20 = *(_QWORD *)(v0 + 1384);
  v21 = *(_QWORD *)(v0 + 1376);
  v22 = sub_23EC2E684();
  __swift_project_value_buffer(v22, (uint64_t)qword_25433FC68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
  v23 = sub_23EC2E66C();
  v24 = sub_23EC2EA14();
  v25 = os_log_type_enabled(v23, v24);
  v26 = *(_QWORD *)(v0 + 1392);
  if (v25)
  {
    v66 = *(_QWORD *)(v0 + 1376);
    v27 = (uint8_t *)swift_slowAlloc();
    v67 = v22;
    __dst[0] = swift_slowAlloc();
    v28 = __dst[0];
    *(_DWORD *)v27 = 136315138;
    v29 = sub_23EC0DB10();
    *(_QWORD *)(v0 + 1224) = sub_23EBAE6D4(v29, v30, __dst);
    sub_23EC2EA68();
    swift_bridgeObjectRelease();
    v16(v26, v66);
    _os_log_impl(&dword_23EB9F000, v23, v24, "Utility config will expire in %s", v27, 0xCu);
    swift_arrayDestroy();
    v31 = v28;
    v22 = v67;
    MEMORY[0x24265B940](v31, -1, -1);
    v32 = v27;
    v17 = 0x25433F000;
    MEMORY[0x24265B940](v32, -1, -1);
  }
  else
  {
    v16(*(_QWORD *)(v0 + 1392), *(_QWORD *)(v0 + 1376));
  }

  v46 = sub_23EC2E66C();
  v47 = sub_23EC2EA14();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_23EB9F000, v46, v47, "Utility Configuration exists locally and is Valid. Skip Fetching.", v48, 2u);
    MEMORY[0x24265B940](v48, -1, -1);
  }
  v49 = *(_QWORD *)(v0 + 1408);
  v50 = *(_QWORD *)(v0 + 1376);

  v16(v49, v50);
  v51 = *(_QWORD *)(v0 + 1288);
  v52 = *(_QWORD *)(v0 + 1280);
  v53 = *(_QWORD *)(v0 + 1272);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1304) + 56))(*(_QWORD *)(v0 + 1320), 1, 1, *(_QWORD *)(v0 + 1296));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v51, *MEMORY[0x24BDCD7A0], v53);
  sub_23EC2E24C();
  v54 = sub_23EC2E27C();
  v56 = v55;
  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EC02D20();
  sub_23EC2DFAC();
  swift_release();
  memcpy(__dst, (const void *)(v0 + 16), 0x220uLL);
  if (*(_QWORD *)(v17 + 2776) != -1)
    swift_once();
  __swift_project_value_buffer(v22, (uint64_t)qword_25433FC68);
  v57 = sub_23EC2E66C();
  v58 = sub_23EC2EA14();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v59 = 0;
    _os_log_impl(&dword_23EB9F000, v57, v58, "> Utility Config values being returned", v59, 2u);
    MEMORY[0x24265B940](v59, -1, -1);
  }
  v60 = *(_QWORD *)(v0 + 1312);
  v61 = *(_QWORD *)(v0 + 1304);
  v62 = *(_QWORD *)(v0 + 1296);

  v63 = (objc_class *)type metadata accessor for UtilityConfiguration();
  v64 = (char *)objc_allocWithZone(v63);
  memcpy(&v64[OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config], __dst, 0x220uLL);
  *(_QWORD *)(v0 + 1144) = v64;
  *(_QWORD *)(v0 + 1152) = v63;
  v65 = objc_msgSendSuper2((objc_super *)(v0 + 1144), sel_init);
  sub_23EBA3EDC(v54, v56);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v65);
}

uint64_t sub_23EBFADB8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EBFAE0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  _QWORD *v5;

  v1 = v0[155];
  v2 = v0[154];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(v3 + 32) = 0x497974696C697475;
  *(_QWORD *)(v3 + 40) = 0xE900000000000064;
  *(_QWORD *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 56) = v1;
  swift_bridgeObjectRetain();
  v0[182] = sub_23EBA7540(v3);
  KeyPath = swift_getKeyPath();
  v0[183] = KeyPath;
  v5 = (_QWORD *)swift_task_alloc();
  v0[184] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23EBFAEFC;
  return sub_23EBF978C(v0[167], v0[154], v0[155], v0[179], v0[180], 21333, 0xE200000000000000, KeyPath);
}

uint64_t sub_23EBFAEFC()
{
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23EBFAF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 1352);
  v2 = *(_QWORD *)(v0 + 1344);
  v3 = *(_QWORD *)(v0 + 1336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71B0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7690);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable generate request URL for Utility Configuration Fetch", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 32))(*(_QWORD *)(v0 + 1360), v3, v2);
    sub_23EC0A6EC(0xD000000000000013, 0x800000023EC3A0D0, (uint8_t *)0xD00000000000001ELL, 0x800000023EC3A0F0);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1480) = v10;
    *v10 = v0;
    v10[1] = sub_23EBFB214;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EBFB214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[186] = a1;
  v5[187] = a2;
  v5[188] = a3;
  v5[189] = v3;
  swift_task_dealloc();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23EBFB2A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  char **p_name;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void *v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v73;
  id v74;
  uint64_t v75;
  id v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  _QWORD *v81;
  id v82;
  _QWORD *v83;
  uint64_t v84;
  id v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  objc_class *v114;
  char *v115;
  id v116;
  uint64_t *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t __src[70];

  v1 = (_QWORD *)v0;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  v3 = 0x25433F000uLL;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_25433FAD8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_25433FC68);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v16, "Unable to process Utility Territory Configuration Response.", v17, 2u);
      MEMORY[0x24265B940](v17, -1, -1);
    }
    v18 = *(void **)(v0 + 1504);
    v19 = v1[187];
    v20 = v1[186];

    sub_23EBCBFD0();
    v13 = (void *)swift_allocError();
    *v21 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_46;
  }
  v4 = (void *)v2;
  v5 = *(id *)(v0 + 1504);
  p_name = &stru_250F55FF8.name;
  sub_23EC0AFC4(0xD00000000000001CLL, (uint8_t *)0x800000023EC3A110, (unint64_t)objc_msgSend(v4, sel_statusCode), qword_250F4E4B8);
  v7 = objc_msgSend(v4, sel_statusCode);
  swift_bridgeObjectRelease();
  if (v7 == (id)304)
  {
    if (*((_BYTE *)v1 + 1520) != 1 || !v1[180])
    {
      swift_bridgeObjectRelease();
      if (qword_25433FAD8 != -1)
        swift_once();
      v44 = (void *)v1[188];
      v45 = sub_23EC2E684();
      __swift_project_value_buffer(v45, (uint64_t)qword_25433FC68);
      v46 = v44;
      v47 = sub_23EC2E66C();
      v48 = sub_23EC2E9FC();
      v49 = os_log_type_enabled(v47, v48);
      v50 = (void *)v1[188];
      v119 = v1;
      if (v49)
      {
        v117 = v1 + 148;
        v51 = (uint8_t *)swift_slowAlloc();
        v118 = swift_slowAlloc();
        __src[0] = v118;
        *(_DWORD *)v51 = 136315138;
        v52 = objc_msgSend(v4, sel_allHeaderFields);
        sub_23EC2E720();

        v53 = sub_23EC2E72C();
        v55 = v54;
        swift_bridgeObjectRelease();
        *v117 = sub_23EBAE6D4(v53, v55, __src);
        sub_23EC2EA68();
        v3 = 0x25433F000;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_23EB9F000, v47, v48, "Headers: %s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v118, -1, -1);
        MEMORY[0x24265B940](v51, -1, -1);
      }
      else
      {

      }
      v63 = sub_23EC2E66C();
      v64 = sub_23EC2E9FC();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v65 = 0;
        _os_log_impl(&dword_23EB9F000, v63, v64, "Server return 304, but inconsistency in stored Config detected!", v65, 2u);
        MEMORY[0x24265B940](v65, -1, -1);
      }
      v1 = v119;
      v66 = (void *)v119[188];
      v67 = v119[187];
      v68 = v119[186];

      sub_23EC00C58();
      sub_23EBF2C9C();
      v13 = (void *)swift_allocError();
      *v69 = 1;
      swift_willThrow();

      v58 = v68;
      v59 = v67;
      goto LABEL_41;
    }
    if (qword_25433FAD8 != -1)
      swift_once();
    v22 = sub_23EC2E684();
    __swift_project_value_buffer(v22, (uint64_t)qword_25433FC68);
    v23 = sub_23EC2E66C();
    v24 = sub_23EC2E9FC();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_23EB9F000, v23, v24, "Utility Territory on disk unmodified. Use existing file on disk.", v25, 2u);
      MEMORY[0x24265B940](v25, -1, -1);
    }
    v26 = (void *)v1[189];

    sub_23EC00914();
    v27 = (void *)v1[188];
    v28 = v1[187];
    v29 = v1[186];
    if (!v26)
    {
      (*(void (**)(_QWORD, _QWORD))(v1[169] + 8))(v1[170], v1[168]);

      sub_23EBA3EDC(v29, v28);
      goto LABEL_59;
    }
    v13 = v26;
    swift_bridgeObjectRelease();

LABEL_35:
    v58 = v29;
    v59 = v28;
LABEL_41:
    sub_23EBA3EDC(v58, v59);
LABEL_47:
    v74 = v13;
    if (*(_QWORD *)(v3 + 2776) != -1)
      swift_once();
    v75 = sub_23EC2E684();
    __swift_project_value_buffer(v75, (uint64_t)qword_25433FC68);
    v76 = v13;
    v77 = v13;
    v78 = sub_23EC2E66C();
    v79 = sub_23EC2EA08();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc();
      v81 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v80 = 138412290;
      v82 = v13;
      v83 = v1;
      v84 = _swift_stdlib_bridgeErrorToNSError();
      v83[151] = v84;
      sub_23EC2EA68();
      *v81 = v84;
      v1 = v83;

      _os_log_impl(&dword_23EB9F000, v78, v79, "Error while trying to fetch Utility Territory Config from server %@", v80, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v81, -1, -1);
      MEMORY[0x24265B940](v80, -1, -1);
    }
    else
    {

    }
    v1[147] = v13;
    v85 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
    v86 = swift_dynamicCast();
    v87 = v1[170];
    v88 = v1[169];
    v89 = v1[168];
    if (v86)
    {
      sub_23EBE40DC(v1[158]);
      swift_willThrow();
    }
    else
    {
      sub_23EC259EC(v13);
      swift_willThrow();

    }
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v1[1])();
  }
  if (v7 != (id)200)
  {
    swift_bridgeObjectRelease();
    if (qword_25433FAD8 != -1)
      swift_once();
    v30 = sub_23EC2E684();
    __swift_project_value_buffer(v30, (uint64_t)qword_25433FC68);
    v31 = sub_23EC2E66C();
    v32 = sub_23EC2EA08();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_23EB9F000, v31, v32, "Error while checking for Utility Territory Config", v33, 2u);
      MEMORY[0x24265B940](v33, -1, -1);
    }
    v34 = (void *)v1[188];

    v35 = v34;
    v36 = objc_msgSend(v4, sel_description);
    v37 = sub_23EC2E780();
    v39 = v38;

    swift_bridgeObjectRetain();
    v40 = sub_23EC2E66C();
    v41 = sub_23EC2EA08();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      __src[0] = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain();
      v1[149] = sub_23EBAE6D4(v37, v39, __src);
      p_name = (char **)(&stru_250F55FF8 + 8);
      sub_23EC2EA68();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23EB9F000, v40, v41, "%s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v43, -1, -1);
      MEMORY[0x24265B940](v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v3 = 0x25433F000;
    v56 = (void *)v1[188];
    v28 = v1[187];
    v29 = v1[186];
    sub_23EBCBFD0();
    v13 = (void *)swift_allocError();
    *v57 = objc_msgSend(v4, p_name[454]);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    goto LABEL_35;
  }
  if (qword_25433FAD8 != -1)
    swift_once();
  v8 = sub_23EC2E684();
  __swift_project_value_buffer(v8, (uint64_t)qword_25433FC68);
  v9 = sub_23EC2E66C();
  v10 = sub_23EC2E9FC();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_23EB9F000, v9, v10, "New Configuration Fetched", v11, 2u);
    MEMORY[0x24265B940](v11, -1, -1);
  }
  v12 = (void *)v1[189];

  sub_23EBFCB5C(__src);
  v13 = v12;
  if (v12)
  {
    swift_bridgeObjectRelease();
    v70 = sub_23EC2E66C();
    v71 = sub_23EC2EA08();
    if (os_log_type_enabled(v70, v71))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_23EB9F000, v70, v71, "Unable to decode response from server", v73, 2u);
      MEMORY[0x24265B940](v73, -1, -1);
    }
    v18 = (void *)v1[188];
    v19 = v1[187];
    v20 = v1[186];

    swift_willThrow();
LABEL_46:

    sub_23EBA3EDC(v20, v19);
    goto LABEL_47;
  }
  v60 = v1[187];
  v61 = v1[186];
  v62 = v1[166];
  memcpy(v1 + 70, __src, 0x220uLL);
  sub_23EBB1BAC((uint64_t)(v1 + 70));
  sub_23EBFCE28(v61, v60, v62);
  sub_23EBA3038(v1[166], &qword_25433F930);
  sub_23EC00914();
  v91 = sub_23EC2E66C();
  v92 = sub_23EC2EA14();
  v93 = os_log_type_enabled(v91, v92);
  v94 = (void *)v1[188];
  v95 = v1[187];
  v96 = v1[186];
  v97 = v1[170];
  v98 = v1[169];
  v99 = v1[168];
  if (v93)
  {
    v100 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v100 = 0;
    _os_log_impl(&dword_23EB9F000, v91, v92, "New Utility Territory Config saved to disk", v100, 2u);
    MEMORY[0x24265B940](v100, -1, -1);
  }
  sub_23EBA3EDC(v96, v95);

  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
LABEL_59:
  v101 = v1[161];
  v102 = v1[160];
  v103 = v1[159];
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[163] + 56))(v1[165], 1, 1, v1[162]);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v102 + 104))(v101, *MEMORY[0x24BDCD7A0], v103);
  sub_23EC2E24C();
  v104 = sub_23EC2E27C();
  v106 = v105;
  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EC02D20();
  sub_23EC2DFAC();
  swift_release();
  memcpy(__src, v1 + 2, 0x220uLL);
  if (qword_25433FAD8 != -1)
    swift_once();
  v107 = sub_23EC2E684();
  __swift_project_value_buffer(v107, (uint64_t)qword_25433FC68);
  v108 = sub_23EC2E66C();
  v109 = sub_23EC2EA14();
  if (os_log_type_enabled(v108, v109))
  {
    v110 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v110 = 0;
    _os_log_impl(&dword_23EB9F000, v108, v109, "> Utility Config values being returned", v110, 2u);
    MEMORY[0x24265B940](v110, -1, -1);
  }
  v111 = v1[164];
  v112 = v1[163];
  v113 = v1[162];

  v114 = (objc_class *)type metadata accessor for UtilityConfiguration();
  v115 = (char *)objc_allocWithZone(v114);
  memcpy(&v115[OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config], __src, 0x220uLL);
  v1[143] = v115;
  v1[144] = v114;
  v116 = objc_msgSendSuper2((objc_super *)(v1 + 143), sel_init);
  sub_23EBA3EDC(v104, v106);
  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(id))v1[1])(v116);
}

uint64_t sub_23EBFC5C0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 1512);
  v2 = v1;
  if (qword_25433FAD8 != -1)
    swift_once();
  v3 = sub_23EC2E684();
  __swift_project_value_buffer(v3, (uint64_t)qword_25433FC68);
  v4 = v1;
  v5 = v1;
  v6 = sub_23EC2E66C();
  v7 = sub_23EC2EA08();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v1;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 1208) = v11;
    sub_23EC2EA68();
    *v9 = v11;

    _os_log_impl(&dword_23EB9F000, v6, v7, "Error while trying to fetch Utility Territory Config from server %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v9, -1, -1);
    MEMORY[0x24265B940](v8, -1, -1);
  }
  else
  {

  }
  *(_QWORD *)(v0 + 1176) = v1;
  v12 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v13 = swift_dynamicCast();
  v14 = *(_QWORD *)(v0 + 1360);
  v15 = *(_QWORD *)(v0 + 1352);
  v16 = *(_QWORD *)(v0 + 1344);
  if (v13)
  {
    sub_23EBE40DC(*(_QWORD *)(v0 + 1264));
    swift_willThrow();
  }
  else
  {
    sub_23EC259EC(v1);
    swift_willThrow();

  }
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23EBFC8A0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EBF2CE0();
  sub_23EC2DFAC();
  if (v0)
  {
    swift_release();
    v1 = (void *)sub_23EC244A4(v0);
    if (qword_25433FAD8 != -1)
      swift_once();
    v2 = sub_23EC2E684();
    __swift_project_value_buffer(v2, (uint64_t)qword_25433FC68);
    v3 = sub_23EC2E66C();
    v4 = sub_23EC2EA08();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_23EB9F000, v3, v4, "Error while decoding response.", v5, 2u);
      MEMORY[0x24265B940](v5, -1, -1);
    }

    v6 = v1;
    v7 = v1;
    v8 = sub_23EC2E66C();
    v9 = sub_23EC2EA08();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v14 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue();
      v12 = sub_23EC2ED74();
      sub_23EBAE6D4(v12, v13, &v14);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23EB9F000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v11, -1, -1);
      MEMORY[0x24265B940](v10, -1, -1);
    }
    else
    {

    }
    swift_willThrow();

  }
  else
  {
    swift_release();
  }
}

void sub_23EBFCB5C(void *a1@<X8>)
{
  void *v1;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t __src[69];

  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EC02D20();
  sub_23EC2DFAC();
  if (v1)
  {
    swift_release();
    v3 = (void *)sub_23EC244A4(v1);
    if (qword_25433FAD8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_25433FC68);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Error while decoding response.", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    v8 = v3;
    v9 = v3;
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      __src[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue();
      v14 = sub_23EC2ED74();
      sub_23EBAE6D4(v14, v15, __src);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23EB9F000, v10, v11, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v13, -1, -1);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    else
    {

    }
    swift_willThrow();

  }
  else
  {
    swift_release();
    memcpy(a1, __src, 0x220uLL);
  }
}

uint64_t sub_23EBFCE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(_QWORD);
  char *v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  char *v32;
  void *v33;
  unsigned __int8 v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void *v45;
  unsigned int v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD *v57;
  id v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v66;
  unsigned int v67;
  void (*v68)(char *, _QWORD, uint64_t);
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char v82;
  id v83;
  uint64_t v84;
  uint64_t v85;

  v76 = a1;
  v77 = a2;
  v66 = a3;
  v85 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23EC2E1E0();
  v80 = *(_QWORD **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23EC2E264();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v69 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v66 - v12;
  if (qword_25433FB40 != -1)
    swift_once();
  v83 = (id)qword_25433FC00;
  v84 = *(_QWORD *)algn_25433FC08;
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  v15 = v83;
  v14 = v84;
  sub_23EC1AE84();
  v83 = v15;
  v84 = v14;
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v83;
  v17 = v84;
  v81 = v9;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v79 = v8;
  v71 = v18;
  v18(v7, 1, 1, v8);
  v19 = (void (*)(_QWORD))v80[13];
  v20 = v72;
  v67 = *MEMORY[0x24BDCD7A0];
  v70 = v3;
  v68 = (void (*)(char *, _QWORD, uint64_t))v19;
  v19(v72);
  swift_bridgeObjectRetain();
  v80 = v16;
  v74 = v17;
  sub_23EC2E24C();
  v21 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v82 = 1;
  swift_bridgeObjectRetain();
  v22 = (void *)sub_23EC2E774();
  v23 = objc_msgSend(v21, sel_fileExistsAtPath_isDirectory_, v22, &v82);

  v73 = v13;
  v78 = v21;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v24 = v79;
  }
  else
  {
    v25 = v7;
    if (qword_256DB71B0 != -1)
      swift_once();
    v26 = sub_23EC2E684();
    __swift_project_value_buffer(v26, (uint64_t)qword_256DC7690);
    v27 = sub_23EC2E66C();
    v28 = sub_23EC2EA14();
    v29 = os_log_type_enabled(v27, v28);
    v30 = v70;
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23EB9F000, v27, v28, "Creating folder to save config.", v31, 2u);
      v21 = v78;
      MEMORY[0x24265B940](v31, -1, -1);
    }

    v24 = v79;
    v71(v25, 1, 1, v79);
    v68(v20, v67, v30);
    v32 = v69;
    sub_23EC2E24C();
    v33 = (void *)sub_23EC2E1F8();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v32, v24);
    v83 = 0;
    v34 = objc_msgSend(v21, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v33, 1, 0, &v83);

    v35 = v83;
    if ((v34 & 1) == 0)
    {
      v36 = v35;
      v37 = (void *)sub_23EC2E1D4();

      swift_willThrow();
      v75 = 0;
    }
  }
  v38 = (void *)sub_23EC2E774();
  v39 = objc_msgSend(v21, sel_fileExistsAtPath_, v38);

  if (v39)
  {
    v40 = v73;
    if (qword_25433FAD8 != -1)
      swift_once();
    v41 = sub_23EC2E684();
    __swift_project_value_buffer(v41, (uint64_t)qword_25433FC68);
    v42 = sub_23EC2E66C();
    v43 = sub_23EC2EA14();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_23EB9F000, v42, v43, "Removing existing file from disk", v44, 2u);
      v21 = v78;
      MEMORY[0x24265B940](v44, -1, -1);
    }

    v45 = (void *)sub_23EC2E774();
    swift_bridgeObjectRelease();
    v83 = 0;
    v46 = objc_msgSend(v21, sel_removeItemAtPath_error_, v45, &v83);

    if (v46)
    {
      v47 = v83;
      v48 = v75;
    }
    else
    {
      v49 = v83;
      v50 = (void *)sub_23EC2E1D4();

      swift_willThrow();
      v48 = 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v48 = v75;
    v40 = v73;
  }
  sub_23EC2E2DC();
  if (v48)
  {
    if (qword_25433FAD8 != -1)
      swift_once();
    v51 = sub_23EC2E684();
    __swift_project_value_buffer(v51, (uint64_t)qword_25433FC68);
    v52 = v48;
    v53 = v48;
    v54 = sub_23EC2E66C();
    v55 = sub_23EC2EA08();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v56 = 138412290;
      v58 = v48;
      v59 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v83 = v59;
      v24 = v79;
      sub_23EC2EA68();
      *v57 = v59;

      _os_log_impl(&dword_23EB9F000, v54, v55, "Error while trying to write config to disk. %@", v56, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v57, -1, -1);
      MEMORY[0x24265B940](v56, -1, -1);
    }
    else
    {

    }
    swift_willThrow();

    return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v40, v24);
  }
  else
  {
    if (qword_25433FAD8 != -1)
      swift_once();
    v60 = sub_23EC2E684();
    __swift_project_value_buffer(v60, (uint64_t)qword_25433FC68);
    v61 = sub_23EC2E66C();
    v62 = sub_23EC2EA14();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      _os_log_impl(&dword_23EB9F000, v61, v62, "Successfully wrote config to disk", v63, 2u);
      v21 = v78;
      MEMORY[0x24265B940](v63, -1, -1);
    }

    v64 = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v66, v40, v24);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v71)(v64, 0, 1, v24);
  }
}

uint64_t sub_23EBFD688(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v10[544];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8B20);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC08278();
  sub_23EC2EDE0();
  memcpy(v10, v2, sizeof(v10));
  sub_23EBAFB7C();
  sub_23EC2ED08();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23EBFD798()
{
  return 0x7974696C697475;
}

uint64_t sub_23EBFD7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7974696C697475 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23EBFD844()
{
  sub_23EC08278();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFD86C()
{
  sub_23EC08278();
  return sub_23EC2EE04();
}

void *sub_23EBFD894@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[544];

  result = (void *)sub_23EC01558(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x220uLL);
  return result;
}

uint64_t sub_23EBFD8E4(_QWORD *a1)
{
  return sub_23EBFD688(a1);
}

uint64_t sub_23EBFD8F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBFD930 + 4 * byte_23EC34A90[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23EBFD930()
{
  return 0x6B726F77747261;
}

uint64_t sub_23EBFD948()
{
  return 0x6D6E6F7269766E65;
}

unint64_t sub_23EBFD968()
{
  return 0xD000000000000012;
}

uint64_t sub_23EBFD9E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[26];
  char v40;
  _BYTE v41[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8950);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EBFF554();
  sub_23EC2EDE0();
  LOBYTE(v28) = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    v28 = *(_OWORD *)(v3 + 16);
    v40 = 1;
    sub_23EBFF598();
    sub_23EC2ED08();
    v9 = *(_OWORD *)(v3 + 208);
    v38 = *(_OWORD *)(v3 + 192);
    *(_OWORD *)v39 = v9;
    *(_OWORD *)&v39[10] = *(_OWORD *)(v3 + 218);
    v10 = *(_OWORD *)(v3 + 144);
    v34 = *(_OWORD *)(v3 + 128);
    v35 = v10;
    v11 = *(_OWORD *)(v3 + 176);
    v36 = *(_OWORD *)(v3 + 160);
    v37 = v11;
    v12 = *(_OWORD *)(v3 + 80);
    v30 = *(_OWORD *)(v3 + 64);
    v31 = v12;
    v13 = *(_OWORD *)(v3 + 112);
    v32 = *(_OWORD *)(v3 + 96);
    v33 = v13;
    v14 = *(_OWORD *)(v3 + 32);
    v29 = *(_OWORD *)(v3 + 48);
    v28 = v14;
    v40 = 2;
    sub_23EBFF5DC();
    sub_23EC2ED08();
    sub_23EC09238(v3 + 240, (uint64_t)v41, &qword_256DB8970);
    sub_23EC09238((uint64_t)v41, (uint64_t)&v28, &qword_256DB8970);
    v40 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8978);
    sub_23EC0938C(&qword_256DB8980, &qword_256DB8978, (uint64_t (*)(void))sub_23EBFF620, MEMORY[0x24BEE12A0]);
    sub_23EC2ECD8();
    v15 = *(_OWORD *)(v3 + 392);
    v16 = *(_OWORD *)(v3 + 408);
    v17 = *(_OWORD *)(v3 + 360);
    v36 = *(_OWORD *)(v3 + 376);
    v37 = v15;
    v18 = *(_OWORD *)(v3 + 424);
    v38 = v16;
    *(_OWORD *)v39 = v18;
    v19 = *(_OWORD *)(v3 + 328);
    v20 = *(_OWORD *)(v3 + 344);
    v21 = *(_OWORD *)(v3 + 296);
    v32 = *(_OWORD *)(v3 + 312);
    v33 = v19;
    v34 = v20;
    v35 = v17;
    v22 = *(_OWORD *)(v3 + 264);
    v23 = *(_OWORD *)(v3 + 280);
    v28 = *(_OWORD *)(v3 + 248);
    v29 = v22;
    v30 = v23;
    v31 = v21;
    v40 = 4;
    sub_23EBFF664();
    sub_23EC2ED08();
    v24 = *(_OWORD *)(v3 + 456);
    v28 = *(_OWORD *)(v3 + 440);
    v29 = v24;
    v25 = *(_OWORD *)(v3 + 488);
    v30 = *(_OWORD *)(v3 + 472);
    v31 = v25;
    v40 = 5;
    sub_23EBFF6A8();
    sub_23EC2ED08();
    *(_QWORD *)&v28 = *(_QWORD *)(v3 + 504);
    v40 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB89A0);
    sub_23EC0938C(&qword_256DB89A8, &qword_256DB89A0, (uint64_t (*)(void))sub_23EBFF6EC, MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
    v26 = *(_OWORD *)(v3 + 528);
    v28 = *(_OWORD *)(v3 + 512);
    v29 = v26;
    v40 = 7;
    sub_23EBFF730();
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBFDDBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23EBFF308(a1, a2, a3, a4, a5, &qword_256DB8A68, (void (*)(_QWORD *, uint64_t, uint64_t))sub_23EC0433C);
}

uint64_t sub_23EBFDDE8(_QWORD *a1)
{
  return sub_23EBFF170(a1, &qword_256DB8AA0, (void (*)(void))sub_23EC0444C);
}

uint64_t sub_23EBFDE14(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBFDE4C + 4 * byte_23EC34A98[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23EBFDE4C()
{
  return 1701667182;
}

uint64_t sub_23EBFDE5C()
{
  return 0x6966697373616C63;
}

unint64_t sub_23EBFDE80()
{
  return 0xD000000000000012;
}

uint64_t sub_23EBFDE9C()
{
  return 0x616F626E4F666174;
}

unint64_t sub_23EBFDEC0()
{
  return 0xD000000000000019;
}

uint64_t sub_23EBFDF14(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8A48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC04270();
  sub_23EC2EDE0();
  LOBYTE(v14) = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_23EC2ECE4();
    LOBYTE(v14) = 2;
    sub_23EC2ECE4();
    v9 = v3[4];
    v14 = v3[3];
    v15 = v9;
    v20 = 3;
    sub_23EC042B4();
    sub_23EC2ED08();
    v10 = v3[8];
    v16 = v3[7];
    v17 = v10;
    v11 = v3[10];
    v18 = v3[9];
    v19 = v11;
    v12 = v3[6];
    v14 = v3[5];
    v15 = v12;
    v20 = 4;
    sub_23EC042F8();
    sub_23EC2ED08();
    LOBYTE(v14) = 5;
    sub_23EC2ECCC();
    LOBYTE(v14) = 6;
    sub_23EC2ECCC();
    LOBYTE(v14) = 7;
    sub_23EC2ECC0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23EBFE160(char a1)
{
  if (!a1)
    return 0xD000000000000015;
  if (a1 == 1)
    return 0xD000000000000013;
  return 0xD000000000000014;
}

uint64_t sub_23EBFE1B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;

  v12[0] = a5;
  v12[1] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8BE8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC0916C();
  sub_23EC2EDE0();
  v15 = 0;
  sub_23EC2ECE4();
  if (!v5)
  {
    v14 = 1;
    sub_23EC2ECFC();
    v13 = 2;
    sub_23EC2ECFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23EBFE308(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBFE33C + 4 * byte_23EC34AA0[a1]))(0x64656C62616E65, 0xE700000000000000);
}

unint64_t sub_23EBFE33C()
{
  return 0xD000000000000015;
}

uint64_t sub_23EBFE35C()
{
  return 0x6449746E65696C63;
}

uint64_t sub_23EBFE374()
{
  return 0x73646C656966;
}

uint64_t sub_23EBFE388()
{
  return 0x736E6F6974636573;
}

uint64_t sub_23EBFE3A0()
{
  return 0x65706F725070746FLL;
}

unint64_t sub_23EBFE3C4()
{
  return 0xD000000000000012;
}

uint64_t sub_23EBFE3E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  _BYTE v13[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8BF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC091B0();
  sub_23EC2EDE0();
  LOBYTE(v10) = 0;
  sub_23EC2ECF0();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    sub_23EC2ECE4();
    LOBYTE(v10) = 2;
    sub_23EC2ECE4();
    *(_QWORD *)&v10 = *(_QWORD *)(v3 + 40);
    v12 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C08);
    sub_23EC0938C(&qword_256DB8C10, &qword_256DB8C08, (uint64_t (*)(void))sub_23EC091F4, MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
    sub_23EC09238(v3 + 48, (uint64_t)v13, &qword_256DB8C20);
    sub_23EC09238((uint64_t)v13, (uint64_t)&v10, &qword_256DB8C20);
    v12 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C28);
    sub_23EC0938C(&qword_256DB8C30, &qword_256DB8C28, (uint64_t (*)(void))sub_23EC0927C, MEMORY[0x24BEE12A0]);
    sub_23EC2ECD8();
    v10 = *(_OWORD *)(v3 + 56);
    v11 = *(_QWORD *)(v3 + 72);
    v12 = 5;
    sub_23EC092C0();
    sub_23EC2ED08();
    LOBYTE(v10) = 6;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBFE684(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;

  v11[0] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8CF0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09E80();
  sub_23EC2EDE0();
  v13 = 0;
  sub_23EC2ECE4();
  if (!v4)
  {
    v11[1] = v11[0];
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBAFDF8(&qword_25433FB28, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_23EC2ED08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23EBFE7E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBFE814 + 4 * byte_23EC34AA7[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_23EBFE814()
{
  return 0x6C6562616CLL;
}

uint64_t sub_23EBFE828()
{
  return 0x79654B6D726F66;
}

uint64_t sub_23EBFE840()
{
  return 0x74786554746E6968;
}

uint64_t sub_23EBFE858()
{
  return 0x746E6F4374786574;
}

uint64_t sub_23EBFE87C()
{
  return 0x6472616F6279656BLL;
}

uint64_t sub_23EBFE89C()
{
  return 0x6572756365537369;
}

unint64_t sub_23EBFE8B4()
{
  return 0xD000000000000011;
}

uint64_t sub_23EBFE908(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8CE0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09E3C();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
    v8[12] = 3;
    sub_23EC2ECB4();
    v8[11] = 4;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECE4();
    v8[9] = 6;
    sub_23EC2ECF0();
    v8[8] = 7;
    sub_23EC2ECFC();
    v8[7] = 8;
    sub_23EC2ECFC();
    v8[6] = 9;
    sub_23EC2ECE4();
    v8[5] = 10;
    sub_23EC2ECC0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23EBFEB84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;

  v11[1] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8D00);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09EC4();
  sub_23EC2EDE0();
  v13 = 0;
  sub_23EC2ECFC();
  if (!v4)
  {
    v12 = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23EBFECAC(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8A78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC04380();
  sub_23EC2EDE0();
  LOBYTE(v14) = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_23EC2ECE4();
    LOBYTE(v14) = 2;
    sub_23EC2ECE4();
    LOBYTE(v14) = 3;
    sub_23EC2ECB4();
    v9 = v3[9];
    v18 = v3[8];
    v19 = v9;
    v20 = v3[10];
    v10 = v3[5];
    v14 = v3[4];
    v15 = v10;
    v11 = v3[7];
    v16 = v3[6];
    v17 = v11;
    v13[15] = 4;
    sub_23EC043C4();
    sub_23EC2ED08();
    LOBYTE(v14) = 5;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBFEE90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C48);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09304();
  sub_23EC2EDE0();
  v8[15] = 0;
  sub_23EC2ECE4();
  if (!v1)
  {
    v8[14] = 1;
    sub_23EC2ECE4();
    v8[13] = 2;
    sub_23EC2ECE4();
    v8[12] = 3;
    sub_23EC2ECE4();
    v8[11] = 4;
    sub_23EC2ECE4();
    v8[10] = 5;
    sub_23EC2ECE4();
    v8[9] = 6;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23EBFF06C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBFF0A4 + 4 * byte_23EC34AB2[a1]))(0xD000000000000014, 0x800000023EC37AB0);
}

uint64_t sub_23EBFF0D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EBFF110 + 4 * byte_23EC34AB6[a1]))(0xD000000000000014, 0x800000023EC37AB0);
}

uint64_t sub_23EBFF144(_QWORD *a1)
{
  return sub_23EBFF170(a1, &qword_256DB8A90, (void (*)(void))sub_23EC04408);
}

uint64_t sub_23EBFF170(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_23EC2EDE0();
  v15 = 0;
  v9 = v11[1];
  sub_23EC2ECE4();
  if (!v9)
  {
    v14 = 1;
    sub_23EC2ECE4();
    v13 = 2;
    sub_23EC2ECE4();
    v12 = 3;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EBFF2DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23EBFF308(a1, a2, a3, a4, a5, &qword_256DB8AB0, (void (*)(_QWORD *, uint64_t, uint64_t))sub_23EC04490);
}

uint64_t sub_23EBFF308(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  char v19;
  char v20;

  v18[2] = a3;
  v18[0] = a4;
  v18[1] = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(a6);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a7(v13, v14, v15);
  sub_23EC2EDE0();
  v20 = 0;
  v16 = v18[3];
  sub_23EC2ECE4();
  if (!v16)
  {
    v19 = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_23EBFF42C()
{
  unsigned __int8 *v0;

  return sub_23EBFD8F8(*v0);
}

uint64_t sub_23EBFF434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC01688(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EBFF458(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_23EBFF464()
{
  sub_23EBFF554();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFF48C()
{
  sub_23EBFF554();
  return sub_23EC2EE04();
}

void *sub_23EBFF4B4@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[544];

  result = sub_23EC019F4(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x220uLL);
  return result;
}

uint64_t sub_23EBFF504(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[544];

  memcpy(v4, v1, sizeof(v4));
  return sub_23EBFD9E8(a1);
}

unint64_t sub_23EBFF554()
{
  unint64_t result;

  result = qword_256DB8958;
  if (!qword_256DB8958)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35030, &type metadata for InternalUtilityConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8958);
  }
  return result;
}

unint64_t sub_23EBFF598()
{
  unint64_t result;

  result = qword_256DB8960;
  if (!qword_256DB8960)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35008, &type metadata for InternalUtilityArtwork);
    atomic_store(result, (unint64_t *)&qword_256DB8960);
  }
  return result;
}

unint64_t sub_23EBFF5DC()
{
  unint64_t result;

  result = qword_256DB8968;
  if (!qword_256DB8968)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34FE0, &type metadata for InternalUtilityEnvironment);
    atomic_store(result, (unint64_t *)&qword_256DB8968);
  }
  return result;
}

unint64_t sub_23EBFF620()
{
  unint64_t result;

  result = qword_256DB8988;
  if (!qword_256DB8988)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34FB8, &type metadata for InternalAlternateSuppliers);
    atomic_store(result, (unint64_t *)&qword_256DB8988);
  }
  return result;
}

unint64_t sub_23EBFF664()
{
  unint64_t result;

  result = qword_256DB8990;
  if (!qword_256DB8990)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34F90, &type metadata for InternalUtilityOrganization);
    atomic_store(result, (unint64_t *)&qword_256DB8990);
  }
  return result;
}

unint64_t sub_23EBFF6A8()
{
  unint64_t result;

  result = qword_256DB8998;
  if (!qword_256DB8998)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34F68, &type metadata for InternalUtilitySupport);
    atomic_store(result, (unint64_t *)&qword_256DB8998);
  }
  return result;
}

unint64_t sub_23EBFF6EC()
{
  unint64_t result;

  result = qword_256DB89B0;
  if (!qword_256DB89B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34F40, &type metadata for InternalUtilityApplicationsList);
    atomic_store(result, (unint64_t *)&qword_256DB89B0);
  }
  return result;
}

unint64_t sub_23EBFF730()
{
  unint64_t result;

  result = qword_256DB89B8;
  if (!qword_256DB89B8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34F18, &type metadata for InternalUtilityTermsAndConditions);
    atomic_store(result, (unint64_t *)&qword_256DB89B8);
  }
  return result;
}

uint64_t sub_23EBFF774()
{
  _BYTE *v0;

  if (*v0)
    return 1701667182;
  else
    return 1701080931;
}

uint64_t sub_23EBFF798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC044D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBFF7BC()
{
  sub_23EC0433C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFF7E4()
{
  sub_23EC0433C();
  return sub_23EC2EE04();
}

uint64_t sub_23EBFF80C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EC00670(a1, &qword_256DB8AE0, (void (*)(void))sub_23EC0433C, a2);
}

uint64_t sub_23EBFF838(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBFF308(a1, *v1, v1[1], v1[2], v1[3], &qword_256DB8A68, (void (*)(_QWORD *, uint64_t, uint64_t))sub_23EC0433C);
}

uint64_t sub_23EBFF86C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EBFF894 + 4 * byte_23EC34ABA[*v0]))(1701667182, 0xE400000000000000);
}

unint64_t sub_23EBFF894()
{
  return 0xD000000000000010;
}

uint64_t sub_23EBFF8B0()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_23EBFF8C8()
{
  return 0x6B726F77747261;
}

uint64_t sub_23EBFF8E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC045A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBFF904()
{
  sub_23EC0444C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFF92C()
{
  sub_23EC0444C();
  return sub_23EC2EE04();
}

double sub_23EBFF954@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23EC00558(a1, &qword_256DB8B00, (void (*)(void))sub_23EC0444C, a2);
}

uint64_t sub_23EBFF980()
{
  sub_23EC0422C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFF9A8()
{
  sub_23EC0422C();
  return sub_23EC2EE04();
}

uint64_t sub_23EBFF9D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8AC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC0422C();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v9 = sub_23EC2EC84();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_23EBFFAF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8A38);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC0422C();
  sub_23EC2EDE0();
  sub_23EC2ECE4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23EBFFBE0()
{
  unsigned __int8 *v0;

  return sub_23EBFDE14(*v0);
}

uint64_t sub_23EBFFBE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC04744(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBFFC0C()
{
  sub_23EC04270();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFFC34()
{
  sub_23EC04270();
  return sub_23EC2EE04();
}

__n128 sub_23EBFFC5C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[11];
  _OWORD v11[2];

  sub_23EC04AAC(a1, v10);
  if (!v2)
  {
    v5 = v11[0];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 186) = *(_OWORD *)((char *)v11 + 10);
    v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_23EBFFCC4(_QWORD *a1)
{
  return sub_23EBFDF14(a1);
}

unint64_t sub_23EBFFCD8()
{
  char *v0;

  return sub_23EBFE160(*v0);
}

uint64_t sub_23EBFFCE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC052A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBFFD04()
{
  sub_23EC0916C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFFD2C()
{
  sub_23EC0916C();
  return sub_23EC2EE04();
}

uint64_t sub_23EBFFD54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23EC053E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_23EBFFD80(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBFE1B8(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_23EBFFD9C()
{
  unsigned __int8 *v0;

  return sub_23EBFE308(*v0);
}

uint64_t sub_23EBFFDA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC055A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EBFFDC8()
{
  sub_23EC091B0();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFFDF0()
{
  sub_23EC091B0();
  return sub_23EC2EE04();
}

double sub_23EBFFE18@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_23EC0589C(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_23EBFFE60(_QWORD *a1)
{
  return sub_23EBFE3E0(a1);
}

uint64_t sub_23EBFFEA0()
{
  sub_23EC09E80();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFFEC8()
{
  sub_23EC09E80();
  return sub_23EC2EE04();
}

uint64_t sub_23EBFFEF0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23EC05DFC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_23EBFFF1C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBFE684(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_23EBFFF38()
{
  unsigned __int8 *v0;

  return sub_23EBFE7E8(*v0);
}

uint64_t sub_23EBFFF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC05FDC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EBFFF64(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_23EBFFF70()
{
  sub_23EC09E3C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EBFFF98()
{
  sub_23EC09E3C();
  return sub_23EC2EE04();
}

__n128 sub_23EBFFFC0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_23EC0645C(a1, v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 121) = *(_OWORD *)((char *)v9 + 9);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_23EC00018(_QWORD *a1)
{
  return sub_23EBFE908(a1);
}

uint64_t sub_23EC0002C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6472616F6279656BLL;
  else
    return 0x6874676E656CLL;
}

uint64_t sub_23EC0006C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC06B80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EC00090()
{
  sub_23EC09EC4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC000B8()
{
  sub_23EC09EC4();
  return sub_23EC2EE04();
}

uint64_t sub_23EC000E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_23EC06C80(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_23EC0010C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBFEB84(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_23EC00128()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EC00150 + 4 * byte_23EC34ABE[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_23EC00150()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_23EC00170()
{
  return 0x65746973626577;
}

uint64_t sub_23EC00188()
{
  return 0x6D614E74726F6873;
}

uint64_t sub_23EC001A4()
{
  return 0x73736572646461;
}

uint64_t sub_23EC001BC()
{
  return 0x746E656449616965;
}

uint64_t sub_23EC001E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC06DD4(a1, a2);
  *a3 = result;
  return result;
}

void sub_23EC00204(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23EC00210()
{
  sub_23EC04380();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC00238()
{
  sub_23EC04380();
  return sub_23EC2EE04();
}

double sub_23EC00260@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_23EC0708C(a1, v11);
  if (!v2)
  {
    v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    result = *(double *)&v12;
    v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_23EC002C0(_QWORD *a1)
{
  return sub_23EBFECAC(a1);
}

uint64_t sub_23EC002D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EC0030C + 4 * byte_23EC34AC4[*v0]))(0x4C73736572646461, 0xEC00000031656E69);
}

uint64_t sub_23EC0032C()
{
  return 2037672291;
}

uint64_t sub_23EC0033C()
{
  return 0x6574617473;
}

uint64_t sub_23EC00350()
{
  return 0x6F436C6174736F70;
}

uint64_t sub_23EC0036C()
{
  return 0x7972746E756F63;
}

uint64_t sub_23EC00384()
{
  sub_23EC09304();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC003AC()
{
  sub_23EC09304();
  return sub_23EC2EE04();
}

__n128 sub_23EC003D4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_23EC07784(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_23EC00424(_QWORD *a1)
{
  return sub_23EBFEE90(a1);
}

void sub_23EC00438(char *a1)
{
  sub_23EBC1AD8(*a1);
}

void sub_23EC00444()
{
  char *v0;

  sub_23EBB23F4(*v0);
}

void sub_23EC0044C(uint64_t a1)
{
  char *v1;

  sub_23EBB2654(a1, *v1);
}

void sub_23EC00454(uint64_t a1)
{
  char *v1;

  sub_23EBB26E0(a1, *v1);
}

uint64_t sub_23EC0045C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC07CC4();
  *a1 = result;
  return result;
}

uint64_t sub_23EC00488@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23EBFF06C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23EC004B0()
{
  unsigned __int8 *v0;

  return sub_23EBFF0D8(*v0);
}

uint64_t sub_23EC004B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC07CC4();
  *a1 = result;
  return result;
}

uint64_t sub_23EC004DC()
{
  sub_23EC04408();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC00504()
{
  sub_23EC04408();
  return sub_23EC2EE04();
}

double sub_23EC0052C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23EC00558(a1, &qword_256DB8AF8, (void (*)(void))sub_23EC04408, a2);
}

double sub_23EC00558@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;

  sub_23EC07D0C(a1, a2, a3, (uint64_t *)v9);
  if (!v4)
  {
    v7 = v9[1];
    *a4 = v9[0];
    a4[1] = v7;
    result = *(double *)&v10;
    v8 = v11;
    a4[2] = v10;
    a4[3] = v8;
  }
  return result;
}

uint64_t sub_23EC005A4()
{
  _BYTE *v0;

  if (*v0)
    return 6910581;
  else
    return 1954047348;
}

uint64_t sub_23EC005D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC07FEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EC005F4()
{
  sub_23EC04490();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC0061C()
{
  sub_23EC04490();
  return sub_23EC2EE04();
}

uint64_t sub_23EC00644@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23EC00670(a1, &qword_256DB8B08, (void (*)(void))sub_23EC04490, a2);
}

uint64_t sub_23EC00670@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_23EC080BC(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

uint64_t sub_23EC006A8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EBFF308(a1, *v1, v1[1], v1[2], v1[3], &qword_256DB8AB0, (void (*)(_QWORD *, uint64_t, uint64_t))sub_23EC04490);
}

void sub_23EC006DC()
{
  char *v0;

  v0 = (char *)sub_23EC00738 + 4 * byte_23EC34ACB[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EC00738()
{
  uint64_t v0;

  sub_23EC1AE84();
  sub_23EC2EB4C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  return v0;
}

void sub_23EC00830()
{
  char *v0;

  v0 = (char *)sub_23EC00884 + 4 * byte_23EC34ACF[sub_23EC12720()];
  __asm { BR              X10 }
}

uint64_t sub_23EC00884()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  sub_23EC2E834();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  return v0;
}

uint64_t sub_23EC00914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  v28 = sub_23EC2E3CC();
  v1 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EBE0220();
  sub_23EC2E36C();
  v4 = sub_23EBDFE28();
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    sub_23EC00830();
    v27 = MEMORY[0x24BEE0D00];
    v26[0] = v6;
    v26[1] = v7;
    sub_23EBD0AE4(v8, v9, (uint64_t)v26);
    if (v0)
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v28);
LABEL_8:
      swift_bridgeObjectRelease();
      sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
      if (qword_25433FAD8 != -1)
        swift_once();
      v17 = sub_23EC2E684();
      __swift_project_value_buffer(v17, (uint64_t)qword_25433FC68);
      v18 = sub_23EC2E66C();
      v19 = sub_23EC2EA08();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_23EB9F000, v18, v19, "Error while trying to save Utility Territory config metadata.", v20, 2u);
        MEMORY[0x24265B940](v20, -1, -1);
      }

      return swift_willThrow();
    }
    swift_bridgeObjectRelease();
    sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
  }
  v10 = v1;
  v11 = v28;
  sub_23EC006DC();
  v13 = v12;
  v15 = v14;
  v27 = v11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v26);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_0, v3, v11);
  sub_23EBD0AE4(v13, v15, (uint64_t)v26);
  if (v0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v3, v11);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  sub_23EBA3038((uint64_t)v26, &qword_25433FBF0);
  if (qword_25433FAD8 != -1)
    swift_once();
  v22 = sub_23EC2E684();
  __swift_project_value_buffer(v22, (uint64_t)qword_25433FC68);
  v23 = sub_23EC2E66C();
  v24 = sub_23EC2EA14();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_23EB9F000, v23, v24, "Utility Territory Config MetaData saved.", v25, 2u);
    MEMORY[0x24265B940](v25, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v3, v11);
}

uint64_t sub_23EC00C58()
{
  id v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  unsigned int v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (qword_25433FB40 != -1)
    swift_once();
  v21 = (id)qword_25433FC00;
  v22 = *(_QWORD *)algn_25433FC08;
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  sub_23EC1AE84();
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = (void *)sub_23EC2E774();
  v2 = objc_msgSend(v0, sel_fileExistsAtPath_, v1);

  if (v2)
  {
    if (qword_25433FAD8 != -1)
      swift_once();
    v3 = sub_23EC2E684();
    __swift_project_value_buffer(v3, (uint64_t)qword_25433FC68);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA14();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23EB9F000, v4, v5, "Removing existing file from disk", v6, 2u);
      MEMORY[0x24265B940](v6, -1, -1);
    }

    v7 = (void *)sub_23EC2E774();
    swift_bridgeObjectRelease();
    v21 = 0;
    v8 = objc_msgSend(v0, sel_removeItemAtPath_error_, v7, &v21);

    if (v8)
    {
      v9 = v21;
    }
    else
    {
      v10 = v21;
      v11 = (void *)sub_23EC2E1D4();

      swift_willThrow();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_23EC00830();
  v13 = v12;
  v15 = v14;
  sub_23EC006DC();
  v17 = v16;
  v19 = v18;
  v23 = MEMORY[0x24BEE0D00];
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_23EBD0AE4(v13, v15, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  sub_23EBA3038((uint64_t)&v21, &qword_25433FBF0);
  v23 = sub_23EC2E3CC();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v21);
  sub_23EC2E39C();
  sub_23EBD0AE4(v17, v19, (uint64_t)&v21);
  swift_bridgeObjectRelease();

  return sub_23EBA3038((uint64_t)&v21, &qword_25433FBF0);
}

uint64_t sub_23EC01140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[544];
  _BYTE v16[544];

  v0 = sub_23EC2E1E0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_23EC2E264();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCD7A0], v0);
  swift_bridgeObjectRetain();
  sub_23EC2E24C();
  v11 = sub_23EC2E27C();
  v13 = v12;
  sub_23EC2DFC4();
  swift_allocObject();
  sub_23EC2DFB8();
  sub_23EC02D20();
  sub_23EC2DFAC();
  sub_23EBA3EDC(v11, v13);
  swift_release();
  memcpy(v15, v16, sizeof(v15));
  sub_23EBB1BAC((uint64_t)v15);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return 1;
}

uint64_t sub_23EC01558@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  _BYTE v11[544];
  void *v12;

  v12 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8B10);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC08278();
  sub_23EC2EDD4();
  if (!v2)
  {
    v8 = v12;
    sub_23EBAFBC0();
    sub_23EC2ECA8();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    memcpy(v8, v11, 0x220uLL);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t sub_23EC01688(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6E6F7269766E65 && a2 == 0xEB00000000746E65 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC38180 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x617A696E6167726FLL && a2 == 0xEC0000006E6F6974 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74726F70707573 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023EC3A130 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC3A150)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

void *sub_23EC019F4@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  _OWORD v42[34];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[26];
  int v59;
  __int16 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[26];
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _OWORD v139[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  __int16 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _OWORD v165[3];
  _QWORD *v166;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB89C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v166 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_23EBFF554();
  sub_23EC2EDD4();
  if (v2)
    return (void *)__swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
  v10 = v6;
  v41 = a2;
  LOBYTE(v43) = 0;
  v11 = sub_23EC2EC84();
  v13 = v12;
  LOBYTE(v42[0]) = 1;
  sub_23EC027C8();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v40 = v13;
  v14 = v43;
  v15 = v44;
  v127 = 2;
  sub_23EC0280C();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  *(_QWORD *)&v39 = v14;
  *((_QWORD *)&v39 + 1) = v15;
  v125 = v138;
  *(_OWORD *)v126 = v139[0];
  *(_OWORD *)&v126[10] = *(_OWORD *)((char *)v139 + 10);
  v121 = v134;
  v122 = v135;
  v124 = v137;
  v123 = v136;
  v117 = v130;
  v118 = v131;
  v120 = v133;
  v119 = v132;
  v116 = v129;
  v115 = v128;
  v164 = v138;
  v165[0] = v139[0];
  *(_OWORD *)((char *)v165 + 10) = *(_OWORD *)((char *)v139 + 10);
  v160 = v134;
  v161 = v135;
  v163 = v137;
  v162 = v136;
  v156 = v130;
  v157 = v131;
  v159 = v133;
  v158 = v132;
  v155 = v129;
  v154 = v128;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8978);
  LOBYTE(v42[0]) = 3;
  sub_23EC02850((uint64_t)&v115);
  sub_23EC0938C(&qword_256DB89D8, &qword_256DB8978, (uint64_t (*)(void))sub_23EC02900, MEMORY[0x24BEE12D0]);
  sub_23EC2EC78();
  v16 = v43;
  v102 = 4;
  sub_23EC02944();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v35 = v16;
  v98 = v111;
  v99 = v112;
  v100 = v113;
  v101 = v114;
  v94 = v107;
  v95 = v108;
  v96 = v109;
  v97 = v110;
  v90 = v103;
  v91 = v104;
  v92 = v105;
  v93 = v106;
  v148 = v111;
  v149 = v112;
  v150 = v113;
  v151 = v114;
  v144 = v107;
  v145 = v108;
  v146 = v109;
  v147 = v110;
  v140 = v103;
  v141 = v104;
  v142 = v105;
  v143 = v106;
  LOBYTE(v42[0]) = 5;
  sub_23EC02988((uint64_t)&v90);
  sub_23EC02A60();
  sub_23EC2ECA8();
  v17 = v44;
  v32 = v45;
  v33 = v43;
  v18 = v46;
  v30 = v48;
  *((_QWORD *)&v37 + 1) = *((_QWORD *)&v47 + 1);
  v31 = v47;
  v38 = *((_QWORD *)&v48 + 1);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB89A0);
  LOBYTE(v42[0]) = 6;
  sub_23EC0938C(&qword_256DB89F8, &qword_256DB89A0, (uint64_t (*)(void))sub_23EC02AA4, MEMORY[0x24BEE12D0]);
  *(_QWORD *)&v37 = v17;
  swift_bridgeObjectRetain();
  v36 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v19 = v43;
  v87 = 7;
  sub_23EC02AE8();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  v42[12] = v125;
  v42[13] = *(_OWORD *)v126;
  *(_OWORD *)((char *)&v42[13] + 10) = *(_OWORD *)&v126[10];
  v42[8] = v121;
  v42[9] = v122;
  v42[10] = v123;
  v42[11] = v124;
  v42[4] = v117;
  v42[5] = v118;
  v42[6] = v119;
  v42[7] = v120;
  v42[2] = v115;
  v42[3] = v116;
  *(_OWORD *)((char *)&v42[24] + 8) = v99;
  *(_OWORD *)((char *)&v42[25] + 8) = v100;
  *(_OWORD *)((char *)&v42[26] + 8) = v101;
  *(_OWORD *)((char *)&v42[20] + 8) = v95;
  *(_OWORD *)((char *)&v42[21] + 8) = v96;
  *(_OWORD *)((char *)&v42[22] + 8) = v97;
  *(_OWORD *)((char *)&v42[23] + 8) = v98;
  *(_OWORD *)((char *)&v42[16] + 8) = v91;
  *(_OWORD *)((char *)&v42[17] + 8) = v92;
  *(_OWORD *)((char *)&v42[18] + 8) = v93;
  *(_OWORD *)((char *)&v42[19] + 8) = v94;
  v26 = *((_QWORD *)&v88 + 1);
  v27 = v88;
  v28 = v89;
  v29 = v11;
  v34 = *((_QWORD *)&v89 + 1);
  v20 = *((_QWORD *)&v39 + 1);
  *(_QWORD *)&v42[0] = v11;
  *((_QWORD *)&v42[0] + 1) = v40;
  v42[1] = v39;
  *(_OWORD *)((char *)&v42[15] + 8) = v90;
  v21 = v35;
  v22 = v36;
  *(_QWORD *)&v42[15] = v35;
  *((_QWORD *)&v42[27] + 1) = v33;
  v23 = v37;
  *(_QWORD *)&v42[28] = v37;
  *((_QWORD *)&v42[28] + 1) = v32;
  *(_QWORD *)&v42[29] = v36;
  *((_QWORD *)&v42[29] + 1) = v31;
  *(_QWORD *)&v42[30] = *((_QWORD *)&v37 + 1);
  *((_QWORD *)&v42[30] + 1) = v30;
  *(_QWORD *)&v42[31] = v38;
  *((_QWORD *)&v42[31] + 1) = v19;
  v42[32] = v88;
  v42[33] = v89;
  sub_23EC02B2C((uint64_t)v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23EC02640((uint64_t)&v90);
  swift_bridgeObjectRelease();
  sub_23EC02718((uint64_t)&v115);
  v24 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v166);
  v57 = v164;
  *(_OWORD *)v58 = v165[0];
  *(_OWORD *)&v58[10] = *(_OWORD *)((char *)v165 + 10);
  v53 = v160;
  v54 = v161;
  v55 = v162;
  v56 = v163;
  v49 = v156;
  v50 = v157;
  v51 = v158;
  v52 = v159;
  v47 = v154;
  v48 = v155;
  v71 = v149;
  v72 = v150;
  v73 = v151;
  v67 = v145;
  v68 = v146;
  v69 = v147;
  v70 = v148;
  v63 = v141;
  v64 = v142;
  v65 = v143;
  v66 = v144;
  v43 = v29;
  v44 = v24;
  v45 = v39;
  v46 = v20;
  v59 = v152;
  v60 = v153;
  v62 = v140;
  v61 = v21;
  v74 = v33;
  v75 = v23;
  v76 = v32;
  v77 = v22;
  v78 = v31;
  v79 = *((_QWORD *)&v23 + 1);
  v80 = v30;
  v81 = v38;
  v82 = v19;
  v83 = v27;
  v84 = v26;
  v85 = v28;
  v86 = v34;
  sub_23EBB1BAC((uint64_t)&v43);
  return memcpy(v41, v42, 0x220uLL);
}

uint64_t sub_23EC02640(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23EC02718(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_23EC027C8()
{
  unint64_t result;

  result = qword_256DB89C8;
  if (!qword_256DB89C8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34EF0, &type metadata for InternalUtilityArtwork);
    atomic_store(result, (unint64_t *)&qword_256DB89C8);
  }
  return result;
}

unint64_t sub_23EC0280C()
{
  unint64_t result;

  result = qword_256DB89D0;
  if (!qword_256DB89D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34EC8, &type metadata for InternalUtilityEnvironment);
    atomic_store(result, (unint64_t *)&qword_256DB89D0);
  }
  return result;
}

uint64_t sub_23EC02850(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_23EC02900()
{
  unint64_t result;

  result = qword_256DB89E0;
  if (!qword_256DB89E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34EA0, &type metadata for InternalAlternateSuppliers);
    atomic_store(result, (unint64_t *)&qword_256DB89E0);
  }
  return result;
}

unint64_t sub_23EC02944()
{
  unint64_t result;

  result = qword_256DB89E8;
  if (!qword_256DB89E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34E78, &type metadata for InternalUtilityOrganization);
    atomic_store(result, (unint64_t *)&qword_256DB89E8);
  }
  return result;
}

uint64_t sub_23EC02988(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_23EC02A60()
{
  unint64_t result;

  result = qword_256DB89F0;
  if (!qword_256DB89F0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34E50, &type metadata for InternalUtilitySupport);
    atomic_store(result, (unint64_t *)&qword_256DB89F0);
  }
  return result;
}

unint64_t sub_23EC02AA4()
{
  unint64_t result;

  result = qword_256DB8A00;
  if (!qword_256DB8A00)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34E28, &type metadata for InternalUtilityApplicationsList);
    atomic_store(result, (unint64_t *)&qword_256DB8A00);
  }
  return result;
}

unint64_t sub_23EC02AE8()
{
  unint64_t result;

  result = qword_256DB8A08;
  if (!qword_256DB8A08)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34E00, &type metadata for InternalUtilityTermsAndConditions);
    atomic_store(result, &qword_256DB8A08);
  }
  return result;
}

uint64_t sub_23EC02B2C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_23EC02D20()
{
  unint64_t result;

  result = qword_256DB8A18;
  if (!qword_256DB8A18)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34DD8, &type metadata for InternalUtilityConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8A18);
  }
  return result;
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v12;
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  v13 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
  v14 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v14;
  v15 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v15;
  v16 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v16;
  v17 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v17;
  v18 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v18;
  v19 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v19;
  v20 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v20;
  v21 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v21;
  v22 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v22;
  v23 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v23;
  v24 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v24;
  v25 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v25;
  v26 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v26;
  v27 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = v27;
  v28 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = v28;
  v29 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = v29;
  v30 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v30;
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v4;
  v5 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v5;
  *(_BYTE *)(a1 + 233) = *(_BYTE *)(a2 + 233);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v17;
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v24;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v25;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v28;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 544))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23EC03858(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 536) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 544) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 544) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityConfigurationResponse()
{
  return &type metadata for InternalUtilityConfigurationResponse;
}

ValueMetadata *type metadata accessor for InternalUtilityConfig.CodingKeys()
{
  return &type metadata for InternalUtilityConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalUtilityTermsAndConditions()
{
  return &type metadata for InternalUtilityTermsAndConditions;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityApplicationsList()
{
  return &type metadata for InternalUtilityApplicationsList;
}

uint64_t _s19HomeUtilityServices22InternalUtilitySupportVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HomeUtilityServices22InternalUtilitySupportVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s19HomeUtilityServices22InternalUtilitySupportVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s19HomeUtilityServices22InternalUtilitySupportVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityTransactionData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtilityTransactionData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilitySupport()
{
  return &type metadata for InternalUtilitySupport;
}

ValueMetadata *type metadata accessor for InternalUtilityOrganization()
{
  return &type metadata for InternalUtilityOrganization;
}

ValueMetadata *type metadata accessor for InternalAlternateSuppliers()
{
  return &type metadata for InternalAlternateSuppliers;
}

uint64_t destroy for InternalUtilityEnvironment()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InternalUtilityEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v10;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v11 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v11;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InternalUtilityEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v4;
  v5 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v5;
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  return a1;
}

__n128 __swift_memcpy202_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 186) = *(_OWORD *)(a2 + 186);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for InternalUtilityEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalUtilityEnvironment(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 202))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalUtilityEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 200) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 202) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 202) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityEnvironment()
{
  return &type metadata for InternalUtilityEnvironment;
}

ValueMetadata *type metadata accessor for InternalUtilityArtwork()
{
  return &type metadata for InternalUtilityArtwork;
}

unint64_t sub_23EC04158()
{
  unint64_t result;

  result = qword_256DB8A20;
  if (!qword_256DB8A20)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34D88, &type metadata for InternalUtilityConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A20);
  }
  return result;
}

unint64_t sub_23EC041A0()
{
  unint64_t result;

  result = qword_256DB8A28;
  if (!qword_256DB8A28)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34CF8, &type metadata for InternalUtilityConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A28);
  }
  return result;
}

unint64_t sub_23EC041E8()
{
  unint64_t result;

  result = qword_256DB8A30;
  if (!qword_256DB8A30)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC34D20, &type metadata for InternalUtilityConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A30);
  }
  return result;
}

unint64_t sub_23EC0422C()
{
  unint64_t result;

  result = qword_256DB8A40;
  if (!qword_256DB8A40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC359F4, &type metadata for InternalUtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A40);
  }
  return result;
}

unint64_t sub_23EC04270()
{
  unint64_t result;

  result = qword_256DB8A50;
  if (!qword_256DB8A50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC359A4, &type metadata for InternalUtilityEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A50);
  }
  return result;
}

unint64_t sub_23EC042B4()
{
  unint64_t result;

  result = qword_256DB8A58;
  if (!qword_256DB8A58)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3597C, &type metadata for InternalPasswordOnboarding);
    atomic_store(result, (unint64_t *)&qword_256DB8A58);
  }
  return result;
}

unint64_t sub_23EC042F8()
{
  unint64_t result;

  result = qword_256DB8A60;
  if (!qword_256DB8A60)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35954, &type metadata for InternalTAfOnboarding);
    atomic_store(result, (unint64_t *)&qword_256DB8A60);
  }
  return result;
}

unint64_t sub_23EC0433C()
{
  unint64_t result;

  result = qword_256DB8A70;
  if (!qword_256DB8A70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35904, &type metadata for InternalAlternateSuppliers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A70);
  }
  return result;
}

unint64_t sub_23EC04380()
{
  unint64_t result;

  result = qword_256DB8A80;
  if (!qword_256DB8A80)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC358B4, &type metadata for InternalUtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A80);
  }
  return result;
}

unint64_t sub_23EC043C4()
{
  unint64_t result;

  result = qword_256DB8A88;
  if (!qword_256DB8A88)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3588C, &type metadata for InternalUtilityAddress);
    atomic_store(result, (unint64_t *)&qword_256DB8A88);
  }
  return result;
}

unint64_t sub_23EC04408()
{
  unint64_t result;

  result = qword_256DB8A98;
  if (!qword_256DB8A98)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3583C, &type metadata for InternalUtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8A98);
  }
  return result;
}

unint64_t sub_23EC0444C()
{
  unint64_t result;

  result = qword_256DB8AA8;
  if (!qword_256DB8AA8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC357EC, &type metadata for InternalUtilityApplicationsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8AA8);
  }
  return result;
}

unint64_t sub_23EC04490()
{
  unint64_t result;

  result = qword_256DB8AB8;
  if (!qword_256DB8AB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3579C, &type metadata for InternalUtilityTermsAndConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8AB8);
  }
  return result;
}

uint64_t sub_23EC044D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080931 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EC045A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023EC3A190 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6B726F77747261 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23EC04744(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966697373616C63 && a2 == 0xEE006E6F69746163 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC3A170 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616F626E4F666174 && a2 == 0xED0000676E696472 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023EC382C0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023EC38300 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023EC382E0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_23EC04AAC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  void (*v25)(_QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _BYTE v97[7];
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  char v102;
  _BYTE v103[7];
  char v104;
  _DWORD v105[3];
  _QWORD *v106;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8AC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v106 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_23EC04270();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v106);
  LOBYTE(v74) = 0;
  v10 = sub_23EC2EC84();
  v12 = v11;
  v61 = v10;
  LOBYTE(v74) = 1;
  swift_bridgeObjectRetain();
  v13 = sub_23EC2EC84();
  v15 = v14;
  v60 = v13;
  LOBYTE(v74) = 2;
  swift_bridgeObjectRetain();
  v16 = sub_23EC2EC84();
  v18 = v17;
  *(_QWORD *)&v59 = v16;
  LOBYTE(v62) = 3;
  sub_23EC0521C();
  *((_QWORD *)&v59 + 1) = v18;
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v19 = v75;
  v50 = v76;
  v51 = v74;
  v49 = v77;
  LOBYTE(v62) = 4;
  sub_23EC05260();
  v58 = v19;
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v45 = v74;
  v46 = v77;
  v47 = v75;
  v54 = v78;
  v55 = v76;
  v57 = *((_QWORD *)&v78 + 1);
  v20 = v82;
  v43 = v81;
  v44 = v80;
  v21 = v84;
  v42 = v83;
  LOBYTE(v74) = 5;
  v53 = v79;
  swift_bridgeObjectRetain();
  v56 = v20;
  swift_bridgeObjectRetain();
  v52 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = 0;
  v41 = sub_23EC2EC6C();
  v104 = v22 & 1;
  LOBYTE(v74) = 6;
  v40 = v22;
  v39 = sub_23EC2EC6C();
  v38 = v23 & 1;
  v102 = v23 & 1;
  v101 = 7;
  v24 = sub_23EC2EC60();
  v25 = *(void (**)(_QWORD, _QWORD))(v6 + 8);
  LOBYTE(v20) = v24;
  v37 = v24;
  v25(v8, v5);
  *(_QWORD *)&v62 = v61;
  *((_QWORD *)&v62 + 1) = v12;
  *(_QWORD *)&v63 = v60;
  *((_QWORD *)&v63 + 1) = v15;
  v64 = v59;
  *(_QWORD *)&v65 = v51;
  *((_QWORD *)&v65 + 1) = v58;
  *(_QWORD *)&v66 = v50;
  *((_QWORD *)&v66 + 1) = v49;
  LOBYTE(v67) = v45;
  *((_QWORD *)&v67 + 1) = v47;
  *(_QWORD *)&v68 = v55;
  *((_QWORD *)&v68 + 1) = v46;
  *(_QWORD *)&v69 = v54;
  *((_QWORD *)&v69 + 1) = v57;
  *(_QWORD *)&v70 = v53;
  *((_QWORD *)&v70 + 1) = v44;
  *(_QWORD *)&v71 = v43;
  *((_QWORD *)&v71 + 1) = v56;
  *(_QWORD *)&v72 = v42;
  *((_QWORD *)&v72 + 1) = v52;
  *(_QWORD *)&v73[0] = v41;
  BYTE8(v73[0]) = v40 & 1;
  *(_QWORD *)&v73[1] = v39;
  BYTE8(v73[1]) = v38;
  BYTE9(v73[1]) = v20;
  sub_23EC02850((uint64_t)&v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = v53;
  swift_bridgeObjectRelease();
  v27 = v57;
  swift_bridgeObjectRelease();
  v28 = v54;
  swift_bridgeObjectRelease();
  v29 = v55;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v106);
  v74 = v61;
  v75 = v12;
  v76 = v60;
  v77 = v15;
  v78 = v59;
  v79 = v51;
  v80 = v58;
  v81 = v50;
  v82 = v49;
  LOBYTE(v83) = v45;
  *(_DWORD *)((char *)&v83 + 1) = v105[0];
  HIDWORD(v83) = *(_DWORD *)((char *)v105 + 3);
  v84 = v47;
  v85 = v29;
  v86 = v46;
  v87 = v28;
  v88 = v27;
  v89 = v26;
  v90 = v44;
  v91 = v43;
  v92 = v56;
  v93 = v42;
  v94 = v52;
  v95 = v41;
  v96 = v104;
  *(_DWORD *)v97 = *(_DWORD *)v103;
  *(_DWORD *)&v97[3] = *(_DWORD *)&v103[3];
  v98 = v39;
  v99 = v102;
  v100 = v37;
  result = sub_23EC02718((uint64_t)&v74);
  v31 = v73[0];
  a2[10] = v72;
  a2[11] = v31;
  *(_OWORD *)((char *)a2 + 186) = *(_OWORD *)((char *)v73 + 10);
  v32 = v69;
  a2[6] = v68;
  a2[7] = v32;
  v33 = v71;
  a2[8] = v70;
  a2[9] = v33;
  v34 = v65;
  a2[2] = v64;
  a2[3] = v34;
  v35 = v67;
  a2[4] = v66;
  a2[5] = v35;
  v36 = v63;
  *a2 = v62;
  a2[1] = v36;
  return result;
}

unint64_t sub_23EC0521C()
{
  unint64_t result;

  result = qword_256DB8AD0;
  if (!qword_256DB8AD0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35774, &type metadata for InternalPasswordOnboarding);
    atomic_store(result, (unint64_t *)&qword_256DB8AD0);
  }
  return result;
}

unint64_t sub_23EC05260()
{
  unint64_t result;

  result = qword_256DB8AD8;
  if (!qword_256DB8AD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3574C, &type metadata for InternalTAfOnboarding);
    atomic_store(result, (unint64_t *)&qword_256DB8AD8);
  }
  return result;
}

uint64_t sub_23EC052A4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x800000023EC3A1B0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023EC38200 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023EC38220)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23EC053E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C58);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC0916C();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v12 = 0;
    v7 = sub_23EC2EC84();
    v11 = 1;
    swift_bridgeObjectRetain();
    sub_23EC2EC9C();
    v10 = 2;
    sub_23EC2EC9C();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_23EC055A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656C62616E65 && a2 == 0xE700000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023EC3A1B0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736E6F6974636573 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65706F725070746FLL && a2 == 0xED00007365697472 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023EC3A1D0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23EC0589C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC091B0();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  LOBYTE(v40) = 0;
  v9 = sub_23EC2EC90();
  LOBYTE(v40) = 1;
  v38 = sub_23EC2EC84();
  LOBYTE(v40) = 2;
  v11 = v10;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v39 = v11;
  v36 = v12;
  v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C08);
  v43 = 3;
  sub_23EC0938C(&qword_256DB8C68, &qword_256DB8C08, (uint64_t (*)(void))sub_23EC09348, MEMORY[0x24BEE12D0]);
  v37 = v14;
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v15 = v37;
  v16 = v40;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C28);
  v43 = 4;
  sub_23EC0938C(&qword_256DB8C78, &qword_256DB8C28, (uint64_t (*)(void))sub_23EC093F0, MEMORY[0x24BEE12D0]);
  v34 = v16;
  swift_bridgeObjectRetain();
  sub_23EC2EC78();
  v17 = v40;
  v43 = 5;
  sub_23EC09434();
  v35 = v17;
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v31 = v41;
  v32 = v40;
  LOBYTE(v40) = 6;
  v33 = v42;
  swift_bridgeObjectRetain();
  v18 = sub_23EC2EC84();
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v30 = v18;
  v21(v8, v5);
  v22 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v34;
  swift_bridgeObjectRetain();
  v24 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  v25 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v9 & 1;
  *(_QWORD *)(a2 + 8) = v38;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v36;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v24;
  v27 = v31;
  *(_QWORD *)(a2 + 56) = v32;
  *(_QWORD *)(a2 + 64) = v27;
  v28 = v30;
  *(_QWORD *)(a2 + 72) = v25;
  *(_QWORD *)(a2 + 80) = v28;
  *(_QWORD *)(a2 + 88) = v20;
  return result;
}

uint64_t sub_23EC05DFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8D18);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09E80();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v9[31] = 0;
    v7 = sub_23EC2EC84();
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    v9[15] = 1;
    sub_23EBAFDF8((unint64_t *)&unk_25433FB30, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    sub_23EC2ECA8();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_23EC05FDC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79654B6D726F66 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74786554746E6968 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E6F4374786574 && a2 == 0xEF65707954746E65 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6472616F6279656BLL && a2 == 0xEC00000065707954 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6572756365537369 && a2 == 0xE800000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC38480 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC384A0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7865676572 && a2 == 0xE500000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_23EC0645C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  _QWORD v65[12];
  char v66;
  _BYTE v67[7];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  _DWORD v74[3];
  _QWORD *v75;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8D10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v75 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_23EC09E3C();
  sub_23EC2EDD4();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v75);
    return v5;
  }
  else
  {
    LOBYTE(v65[0]) = 0;
    v10 = sub_23EC2EC84();
    v12 = v11;
    LOBYTE(v65[0]) = 1;
    swift_bridgeObjectRetain();
    v51 = sub_23EC2EC84();
    v52 = v10;
    LOBYTE(v65[0]) = 2;
    v14 = v13;
    swift_bridgeObjectRetain();
    v15 = sub_23EC2EC84();
    v56 = v14;
    v50 = v15;
    LOBYTE(v65[0]) = 3;
    v17 = v16;
    swift_bridgeObjectRetain();
    v18 = sub_23EC2EC54();
    v55 = v17;
    v49 = v18;
    LOBYTE(v65[0]) = 4;
    v20 = v19;
    swift_bridgeObjectRetain();
    v21 = sub_23EC2EC84();
    v54 = v20;
    v48 = v21;
    LOBYTE(v65[0]) = 5;
    v23 = v22;
    swift_bridgeObjectRetain();
    v24 = sub_23EC2EC84();
    v53 = v23;
    v47 = v24;
    LOBYTE(v65[0]) = 6;
    v26 = v25;
    swift_bridgeObjectRetain();
    v46 = sub_23EC2EC90();
    LOBYTE(v65[0]) = 7;
    v45 = sub_23EC2EC9C();
    LOBYTE(v65[0]) = 8;
    v44 = sub_23EC2EC9C();
    LOBYTE(v65[0]) = 9;
    v42 = sub_23EC2EC84();
    v43 = v27;
    v73 = 10;
    swift_bridgeObjectRetain();
    v41 = sub_23EC2EC60();
    v46 &= 1u;
    v28 = v46;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v29 = v53;
    *(_QWORD *)&v57 = v52;
    *((_QWORD *)&v57 + 1) = v12;
    *(_QWORD *)&v58 = v51;
    *((_QWORD *)&v58 + 1) = v56;
    *(_QWORD *)&v59 = v50;
    *((_QWORD *)&v59 + 1) = v55;
    v30 = v54;
    *(_QWORD *)&v60 = v49;
    *((_QWORD *)&v60 + 1) = v54;
    *(_QWORD *)&v61 = v48;
    *((_QWORD *)&v61 + 1) = v53;
    *(_QWORD *)&v62 = v47;
    *((_QWORD *)&v62 + 1) = v26;
    v40 = v26;
    LOBYTE(v63) = v28;
    v31 = v43;
    *((_QWORD *)&v63 + 1) = v45;
    *(_QWORD *)&v64[0] = v44;
    *((_QWORD *)&v64[0] + 1) = v42;
    *(_QWORD *)&v64[1] = v43;
    BYTE8(v64[1]) = v41;
    sub_23EC09F08((uint64_t)&v57);
    swift_bridgeObjectRelease();
    v32 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v75);
    v65[0] = v52;
    v65[1] = v12;
    v65[2] = v51;
    v65[3] = v32;
    v65[4] = v50;
    v65[5] = v55;
    v65[6] = v49;
    v65[7] = v30;
    v65[8] = v48;
    v65[9] = v29;
    v65[10] = v47;
    v65[11] = v33;
    v66 = v46;
    *(_DWORD *)v67 = v74[0];
    *(_DWORD *)&v67[3] = *(_DWORD *)((char *)v74 + 3);
    v68 = v45;
    v69 = v44;
    v70 = v42;
    v71 = v31;
    v72 = v41;
    result = sub_23EC09F90((uint64_t)v65);
    v35 = v64[0];
    a2[6] = v63;
    a2[7] = v35;
    *(_OWORD *)((char *)a2 + 121) = *(_OWORD *)((char *)v64 + 9);
    v36 = v60;
    a2[2] = v59;
    a2[3] = v36;
    v37 = v62;
    a2[4] = v61;
    a2[5] = v37;
    v38 = v58;
    *a2 = v57;
    a2[1] = v38;
  }
  return result;
}

uint64_t sub_23EC06B80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6874676E656CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6472616F6279656BLL && a2 == 0xEC00000065707954)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EC06C80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8D20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23EC09EC4();
  sub_23EC2EDD4();
  if (!v1)
  {
    v9[15] = 0;
    v7 = sub_23EC2EC9C();
    v9[14] = 1;
    sub_23EC2EC84();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v7;
}

uint64_t sub_23EC06DD4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65746973626577 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D614E74726F6873 && a2 == 0xE900000000000065 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746E656449616965 && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23EC0708C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _QWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8AE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_23EC04380();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v65);
  v10 = v6;
  v64 = a2;
  LOBYTE(v78) = 0;
  v11 = sub_23EC2EC84();
  v13 = v12;
  LOBYTE(v78) = 1;
  swift_bridgeObjectRetain();
  v59 = sub_23EC2EC84();
  LOBYTE(v78) = 2;
  v15 = v14;
  swift_bridgeObjectRetain();
  v16 = sub_23EC2EC84();
  v63 = v17;
  v53 = v16;
  v58 = v15;
  LOBYTE(v78) = 3;
  swift_bridgeObjectRetain();
  v57 = 0;
  v52 = sub_23EC2EC54();
  LOBYTE(v66) = 4;
  v19 = v18;
  sub_23EC07740();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v56 = v19;
  v20 = v81;
  v21 = v83;
  v48 = v82;
  v49 = v80;
  v46 = v86;
  v47 = v84;
  v61 = v85;
  v62 = v87;
  v45 = v88;
  v51 = v89;
  v22 = v91;
  v43 = v78;
  v44 = v90;
  v102 = 5;
  v55 = v79;
  swift_bridgeObjectRetain();
  v54 = v20;
  swift_bridgeObjectRetain();
  v50 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = v22;
  swift_bridgeObjectRetain();
  v23 = sub_23EC2EC84();
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25 = v23;
  v41 = v26;
  v42 = v23;
  v27 = v26;
  v24(v8, v5);
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = v13;
  *(_QWORD *)&v67 = v59;
  *((_QWORD *)&v67 + 1) = v58;
  *(_QWORD *)&v68 = v53;
  *((_QWORD *)&v68 + 1) = v63;
  *(_QWORD *)&v69 = v52;
  *((_QWORD *)&v69 + 1) = v56;
  *(_QWORD *)&v70 = v43;
  *((_QWORD *)&v70 + 1) = v55;
  *(_QWORD *)&v71 = v49;
  *((_QWORD *)&v71 + 1) = v54;
  *(_QWORD *)&v72 = v48;
  *((_QWORD *)&v72 + 1) = v50;
  *(_QWORD *)&v73 = v47;
  *((_QWORD *)&v73 + 1) = v61;
  *(_QWORD *)&v74 = v46;
  *((_QWORD *)&v74 + 1) = v62;
  *(_QWORD *)&v75 = v45;
  *((_QWORD *)&v75 + 1) = v51;
  *(_QWORD *)&v76 = v44;
  *((_QWORD *)&v76 + 1) = v60;
  *(_QWORD *)&v77 = v25;
  *((_QWORD *)&v77 + 1) = v27;
  sub_23EC02988((uint64_t)&v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v63;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v61;
  swift_bridgeObjectRelease();
  v30 = v50;
  swift_bridgeObjectRelease();
  v31 = v54;
  swift_bridgeObjectRelease();
  v32 = v55;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v65);
  v78 = v11;
  v79 = v13;
  v80 = v59;
  v81 = v58;
  v82 = v53;
  v83 = v28;
  v84 = v52;
  v85 = v56;
  v86 = v43;
  v87 = v32;
  v88 = v49;
  v89 = v31;
  v90 = v48;
  v91 = v30;
  v92 = v47;
  v93 = v29;
  v94 = v46;
  v95 = v62;
  v96 = v45;
  v97 = v51;
  v98 = v44;
  v99 = v60;
  v100 = v42;
  v101 = v41;
  result = sub_23EC02640((uint64_t)&v78);
  v34 = v75;
  v35 = v64;
  v64[8] = v74;
  v35[9] = v34;
  v36 = v77;
  v35[10] = v76;
  v35[11] = v36;
  v37 = v71;
  v35[4] = v70;
  v35[5] = v37;
  v38 = v73;
  v35[6] = v72;
  v35[7] = v38;
  v39 = v67;
  *v35 = v66;
  v35[1] = v39;
  v40 = v69;
  v35[2] = v68;
  v35[3] = v40;
  return result;
}

unint64_t sub_23EC07740()
{
  unint64_t result;

  result = qword_256DB8AF0;
  if (!qword_256DB8AF0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35724, &type metadata for InternalUtilityAddress);
    atomic_store(result, (unint64_t *)&qword_256DB8AF0);
  }
  return result;
}

uint64_t sub_23EC07784@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8C90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC09304();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v54 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v47 = v9;
  v53 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v14 = v13;
  v45 = v12;
  v46 = v11;
  v52 = 2;
  swift_bridgeObjectRetain();
  v42 = sub_23EC2EC84();
  v44 = v14;
  v51 = 3;
  v16 = v15;
  swift_bridgeObjectRetain();
  v17 = sub_23EC2EC84();
  v43 = v18;
  v39 = v17;
  v50 = 4;
  swift_bridgeObjectRetain();
  v41 = 0;
  v38 = sub_23EC2EC84();
  v49 = 5;
  v20 = v19;
  swift_bridgeObjectRetain();
  v21 = sub_23EC2EC84();
  v40 = v20;
  v37 = v21;
  v48 = 6;
  v23 = v22;
  swift_bridgeObjectRetain();
  v24 = sub_23EC2EC84();
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v41 = v24;
  v26 = v8;
  v28 = v27;
  v25(v26, v5);
  swift_bridgeObjectRetain();
  v29 = v44;
  swift_bridgeObjectRetain();
  v30 = v16;
  swift_bridgeObjectRetain();
  v31 = v43;
  swift_bridgeObjectRetain();
  v32 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v33 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v46;
  result = swift_bridgeObjectRelease();
  *a2 = v47;
  a2[1] = v34;
  a2[2] = v45;
  a2[3] = v29;
  a2[4] = v42;
  a2[5] = v30;
  a2[6] = v39;
  a2[7] = v31;
  a2[8] = v38;
  a2[9] = v32;
  a2[10] = v37;
  a2[11] = v23;
  a2[12] = v41;
  a2[13] = v33;
  return result;
}

uint64_t sub_23EC07CC4()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_23EC07D0C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = a4;
  v32 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_23EC2EDD4();
  if (v4)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v30 = a1;
  v10 = v7;
  v36 = 0;
  v11 = sub_23EC2EC84();
  v13 = v12;
  v35 = 1;
  swift_bridgeObjectRetain();
  v14 = sub_23EC2EC84();
  v16 = v15;
  v29 = v14;
  v34 = 2;
  swift_bridgeObjectRetain();
  v17 = sub_23EC2EC84();
  v19 = v18;
  v28 = v17;
  v33 = 3;
  swift_bridgeObjectRetain();
  v20 = sub_23EC2EC84();
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24 = v20;
  v23(v9, v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v26 = v31;
  *v31 = v11;
  v26[1] = v13;
  v26[2] = v29;
  v26[3] = v16;
  v26[4] = v28;
  v26[5] = v19;
  v26[6] = v24;
  v26[7] = v22;
  return result;
}

uint64_t sub_23EC07FEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1954047348 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6910581 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EC080BC(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v14 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  a3();
  sub_23EC2EDD4();
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v10 = v6;
    v16 = 0;
    v11 = v14;
    v9 = sub_23EC2EC84();
    v15 = 1;
    swift_bridgeObjectRetain();
    sub_23EC2EC84();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v11);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t sub_23EC08278()
{
  unint64_t result;

  result = qword_256DB8B18;
  if (!qword_256DB8B18)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC356D4, &type metadata for InternalUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B18);
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityConfigurationResponse.CodingKeys()
{
  return &type metadata for InternalUtilityConfigurationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalUtilityTermsAndConditions.CodingKeys()
{
  return &type metadata for InternalUtilityTermsAndConditions.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalUtilityApplicationsList.CodingKeys()
{
  return &type metadata for InternalUtilityApplicationsList.CodingKeys;
}

uint64_t _s19HomeUtilityServices31InternalUtilityApplicationsListV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EC08344 + 4 * byte_23EC34AD8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EC08378 + 4 * byte_23EC34AD3[v4]))();
}

uint64_t sub_23EC08378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC08380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC08388);
  return result;
}

uint64_t sub_23EC08394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC0839CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EC083A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC083A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilitySupport.CodingKeys()
{
  return &type metadata for InternalUtilitySupport.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for InternalUtilityOrganization.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23EC08410 + 4 * byte_23EC34AE2[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23EC08444 + 4 * byte_23EC34ADD[v4]))();
}

uint64_t sub_23EC08444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0844C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC08454);
  return result;
}

uint64_t sub_23EC08460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC08468);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23EC0846C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC08474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityOrganization.CodingKeys()
{
  return &type metadata for InternalUtilityOrganization.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalAlternateSuppliers.CodingKeys()
{
  return &type metadata for InternalAlternateSuppliers.CodingKeys;
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s19HomeUtilityServices21InternalUtilityConfigV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23EC0857C + 4 * byte_23EC34AEC[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23EC085B0 + 4 * byte_23EC34AE7[v4]))();
}

uint64_t sub_23EC085B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC085B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC085C0);
  return result;
}

uint64_t sub_23EC085CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC085D4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23EC085D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC085E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityEnvironment.CodingKeys()
{
  return &type metadata for InternalUtilityEnvironment.CodingKeys;
}

uint64_t _s19HomeUtilityServices36InternalUtilityConfigurationResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EC0863C + 4 * byte_23EC34AF1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EC0865C + 4 * byte_23EC34AF6[v4]))();
}

_BYTE *sub_23EC0863C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EC0865C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC08664(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC0866C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC08674(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC0867C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityArtwork.CodingKeys()
{
  return &type metadata for InternalUtilityArtwork.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalUtilityAddress()
{
  return &type metadata for InternalUtilityAddress;
}

uint64_t destroy for InternalTAfOnboarding()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InternalTAfOnboarding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InternalTAfOnboarding(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for InternalTAfOnboarding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalTAfOnboarding(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalTAfOnboarding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalTAfOnboarding()
{
  return &type metadata for InternalTAfOnboarding;
}

uint64_t initializeWithCopy for InternalPasswordOnboarding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InternalPasswordOnboarding(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for InternalPasswordOnboarding(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for InternalPasswordOnboarding()
{
  return &type metadata for InternalPasswordOnboarding;
}

unint64_t sub_23EC08AB0()
{
  unint64_t result;

  result = qword_256DB8B28;
  if (!qword_256DB8B28)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3516C, &type metadata for InternalUtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B28);
  }
  return result;
}

unint64_t sub_23EC08AF8()
{
  unint64_t result;

  result = qword_256DB8B30;
  if (!qword_256DB8B30)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35224, &type metadata for InternalUtilityEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B30);
  }
  return result;
}

unint64_t sub_23EC08B40()
{
  unint64_t result;

  result = qword_256DB8B38;
  if (!qword_256DB8B38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC352DC, &type metadata for InternalAlternateSuppliers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B38);
  }
  return result;
}

unint64_t sub_23EC08B88()
{
  unint64_t result;

  result = qword_256DB8B40;
  if (!qword_256DB8B40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35394, &type metadata for InternalUtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B40);
  }
  return result;
}

unint64_t sub_23EC08BD0()
{
  unint64_t result;

  result = qword_256DB8B48;
  if (!qword_256DB8B48)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35484, &type metadata for InternalUtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B48);
  }
  return result;
}

unint64_t sub_23EC08C18()
{
  unint64_t result;

  result = qword_256DB8B50;
  if (!qword_256DB8B50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3553C, &type metadata for InternalUtilityApplicationsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B50);
  }
  return result;
}

unint64_t sub_23EC08C60()
{
  unint64_t result;

  result = qword_256DB8B58;
  if (!qword_256DB8B58)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC355F4, &type metadata for InternalUtilityTermsAndConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B58);
  }
  return result;
}

unint64_t sub_23EC08CA8()
{
  unint64_t result;

  result = qword_256DB8B60;
  if (!qword_256DB8B60)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC356AC, &type metadata for InternalUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B60);
  }
  return result;
}

unint64_t sub_23EC08CF0()
{
  unint64_t result;

  result = qword_256DB8B68;
  if (!qword_256DB8B68)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3561C, &type metadata for InternalUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B68);
  }
  return result;
}

unint64_t sub_23EC08D38()
{
  unint64_t result;

  result = qword_256DB8B70;
  if (!qword_256DB8B70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35644, &type metadata for InternalUtilityConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B70);
  }
  return result;
}

unint64_t sub_23EC08D80()
{
  unint64_t result;

  result = qword_256DB8B78;
  if (!qword_256DB8B78)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35564, &type metadata for InternalUtilityTermsAndConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B78);
  }
  return result;
}

unint64_t sub_23EC08DC8()
{
  unint64_t result;

  result = qword_256DB8B80;
  if (!qword_256DB8B80)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3558C, &type metadata for InternalUtilityTermsAndConditions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B80);
  }
  return result;
}

unint64_t sub_23EC08E10()
{
  unint64_t result;

  result = qword_256DB8B88;
  if (!qword_256DB8B88)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC354AC, &type metadata for InternalUtilityApplicationsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B88);
  }
  return result;
}

unint64_t sub_23EC08E58()
{
  unint64_t result;

  result = qword_256DB8B90;
  if (!qword_256DB8B90)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC354D4, &type metadata for InternalUtilityApplicationsList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B90);
  }
  return result;
}

unint64_t sub_23EC08EA0()
{
  unint64_t result;

  result = qword_256DB8B98;
  if (!qword_256DB8B98)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC353BC, &type metadata for InternalUtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8B98);
  }
  return result;
}

unint64_t sub_23EC08EE8()
{
  unint64_t result;

  result = qword_256DB8BA0;
  if (!qword_256DB8BA0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC353E4, &type metadata for InternalUtilitySupport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BA0);
  }
  return result;
}

unint64_t sub_23EC08F30()
{
  unint64_t result;

  result = qword_256DB8BA8;
  if (!qword_256DB8BA8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35304, &type metadata for InternalUtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BA8);
  }
  return result;
}

unint64_t sub_23EC08F78()
{
  unint64_t result;

  result = qword_256DB8BB0;
  if (!qword_256DB8BB0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3532C, &type metadata for InternalUtilityOrganization.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BB0);
  }
  return result;
}

unint64_t sub_23EC08FC0()
{
  unint64_t result;

  result = qword_256DB8BB8;
  if (!qword_256DB8BB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3524C, &type metadata for InternalAlternateSuppliers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BB8);
  }
  return result;
}

unint64_t sub_23EC09008()
{
  unint64_t result;

  result = qword_256DB8BC0;
  if (!qword_256DB8BC0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35274, &type metadata for InternalAlternateSuppliers.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BC0);
  }
  return result;
}

unint64_t sub_23EC09050()
{
  unint64_t result;

  result = qword_256DB8BC8;
  if (!qword_256DB8BC8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35194, &type metadata for InternalUtilityEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BC8);
  }
  return result;
}

unint64_t sub_23EC09098()
{
  unint64_t result;

  result = qword_256DB8BD0;
  if (!qword_256DB8BD0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC351BC, &type metadata for InternalUtilityEnvironment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BD0);
  }
  return result;
}

unint64_t sub_23EC090E0()
{
  unint64_t result;

  result = qword_256DB8BD8;
  if (!qword_256DB8BD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC350DC, &type metadata for InternalUtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BD8);
  }
  return result;
}

unint64_t sub_23EC09128()
{
  unint64_t result;

  result = qword_256DB8BE0;
  if (!qword_256DB8BE0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35104, &type metadata for InternalUtilityArtwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BE0);
  }
  return result;
}

unint64_t sub_23EC0916C()
{
  unint64_t result;

  result = qword_256DB8BF0;
  if (!qword_256DB8BF0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35E5C, &type metadata for InternalPasswordOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8BF0);
  }
  return result;
}

unint64_t sub_23EC091B0()
{
  unint64_t result;

  result = qword_256DB8C00;
  if (!qword_256DB8C00)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35E0C, &type metadata for InternalTAfOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8C00);
  }
  return result;
}

unint64_t sub_23EC091F4()
{
  unint64_t result;

  result = qword_256DB8C18;
  if (!qword_256DB8C18)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35DE4, &type metadata for InternalTAFField);
    atomic_store(result, (unint64_t *)&qword_256DB8C18);
  }
  return result;
}

uint64_t sub_23EC09238(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_23EC0927C()
{
  unint64_t result;

  result = qword_256DB8C38;
  if (!qword_256DB8C38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35DBC, &type metadata for InternalTAFSection);
    atomic_store(result, (unint64_t *)&qword_256DB8C38);
  }
  return result;
}

unint64_t sub_23EC092C0()
{
  unint64_t result;

  result = qword_256DB8C40;
  if (!qword_256DB8C40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35D94, &type metadata for InternalOtpProperties);
    atomic_store(result, (unint64_t *)&qword_256DB8C40);
  }
  return result;
}

unint64_t sub_23EC09304()
{
  unint64_t result;

  result = qword_256DB8C50;
  if (!qword_256DB8C50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35D44, &type metadata for InternalUtilityAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8C50);
  }
  return result;
}

unint64_t sub_23EC09348()
{
  unint64_t result;

  result = qword_256DB8C70;
  if (!qword_256DB8C70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35D1C, &type metadata for InternalTAFField);
    atomic_store(result, (unint64_t *)&qword_256DB8C70);
  }
  return result;
}

uint64_t sub_23EC0938C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x24265B8B0](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23EC093F0()
{
  unint64_t result;

  result = qword_256DB8C80;
  if (!qword_256DB8C80)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35CF4, &type metadata for InternalTAFSection);
    atomic_store(result, (unint64_t *)&qword_256DB8C80);
  }
  return result;
}

unint64_t sub_23EC09434()
{
  unint64_t result;

  result = qword_256DB8C88;
  if (!qword_256DB8C88)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35CCC, &type metadata for InternalOtpProperties);
    atomic_store(result, (unint64_t *)&qword_256DB8C88);
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalUtilityAddress.CodingKeys()
{
  return &type metadata for InternalUtilityAddress.CodingKeys;
}

uint64_t _s19HomeUtilityServices22InternalUtilityAddressV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23EC094D8 + 4 * byte_23EC34B00[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23EC0950C + 4 * byte_23EC34AFB[v4]))();
}

uint64_t sub_23EC0950C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC09514(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC0951CLL);
  return result;
}

uint64_t sub_23EC09528(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC09530);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23EC09534(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0953C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalTAfOnboarding.CodingKeys()
{
  return &type metadata for InternalTAfOnboarding.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for InternalPasswordOnboarding.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EC095A4 + 4 * byte_23EC34B0A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EC095D8 + 4 * byte_23EC34B05[v4]))();
}

uint64_t sub_23EC095D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC095E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC095E8);
  return result;
}

uint64_t sub_23EC095F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC095FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EC09600(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC09608(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalPasswordOnboarding.CodingKeys()
{
  return &type metadata for InternalPasswordOnboarding.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for InternalOtpProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InternalOtpProperties(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InternalOtpProperties(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InternalOtpProperties()
{
  return &type metadata for InternalOtpProperties;
}

_QWORD *sub_23EC096EC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InternalTAFSection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InternalTAFSection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InternalTAFSection()
{
  return &type metadata for InternalTAFSection;
}

uint64_t destroy for InternalTAFField()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InternalTAFField(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InternalTAFField(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for InternalTAFField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalTAFField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalTAFField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalTAFField()
{
  return &type metadata for InternalTAFField;
}

unint64_t sub_23EC09BB8()
{
  unint64_t result;

  result = qword_256DB8C98;
  if (!qword_256DB8C98)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35B34, &type metadata for InternalPasswordOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8C98);
  }
  return result;
}

unint64_t sub_23EC09C00()
{
  unint64_t result;

  result = qword_256DB8CA0;
  if (!qword_256DB8CA0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35BEC, &type metadata for InternalTAfOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CA0);
  }
  return result;
}

unint64_t sub_23EC09C48()
{
  unint64_t result;

  result = qword_256DB8CA8;
  if (!qword_256DB8CA8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35CA4, &type metadata for InternalUtilityAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CA8);
  }
  return result;
}

unint64_t sub_23EC09C90()
{
  unint64_t result;

  result = qword_256DB8CB0;
  if (!qword_256DB8CB0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35C14, &type metadata for InternalUtilityAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CB0);
  }
  return result;
}

unint64_t sub_23EC09CD8()
{
  unint64_t result;

  result = qword_256DB8CB8;
  if (!qword_256DB8CB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35C3C, &type metadata for InternalUtilityAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CB8);
  }
  return result;
}

unint64_t sub_23EC09D20()
{
  unint64_t result;

  result = qword_256DB8CC0;
  if (!qword_256DB8CC0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35B5C, &type metadata for InternalTAfOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CC0);
  }
  return result;
}

unint64_t sub_23EC09D68()
{
  unint64_t result;

  result = qword_256DB8CC8;
  if (!qword_256DB8CC8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35B84, &type metadata for InternalTAfOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CC8);
  }
  return result;
}

unint64_t sub_23EC09DB0()
{
  unint64_t result;

  result = qword_256DB8CD0;
  if (!qword_256DB8CD0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35AA4, &type metadata for InternalPasswordOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CD0);
  }
  return result;
}

unint64_t sub_23EC09DF8()
{
  unint64_t result;

  result = qword_256DB8CD8;
  if (!qword_256DB8CD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35ACC, &type metadata for InternalPasswordOnboarding.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CD8);
  }
  return result;
}

unint64_t sub_23EC09E3C()
{
  unint64_t result;

  result = qword_256DB8CE8;
  if (!qword_256DB8CE8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36174, &type metadata for InternalTAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CE8);
  }
  return result;
}

unint64_t sub_23EC09E80()
{
  unint64_t result;

  result = qword_256DB8CF8;
  if (!qword_256DB8CF8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36124, &type metadata for InternalTAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8CF8);
  }
  return result;
}

unint64_t sub_23EC09EC4()
{
  unint64_t result;

  result = qword_256DB8D08;
  if (!qword_256DB8D08)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC360D4, &type metadata for InternalOtpProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D08);
  }
  return result;
}

uint64_t sub_23EC09F08(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23EC09F90(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for InternalOtpProperties.CodingKeys()
{
  return &type metadata for InternalOtpProperties.CodingKeys;
}

uint64_t _s19HomeUtilityServices33InternalUtilityTermsAndConditionsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EC0A074 + 4 * byte_23EC34B14[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EC0A0A8 + 4 * byte_23EC34B0F[v4]))();
}

uint64_t sub_23EC0A0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0A0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC0A0B8);
  return result;
}

uint64_t sub_23EC0A0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC0A0CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EC0A0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0A0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalTAFSection.CodingKeys()
{
  return &type metadata for InternalTAFSection.CodingKeys;
}

uint64_t getEnumTagSinglePayload for InternalTAFField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalTAFField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23EC0A1D0 + 4 * byte_23EC34B1E[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23EC0A204 + 4 * byte_23EC34B19[v4]))();
}

uint64_t sub_23EC0A204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0A20C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC0A214);
  return result;
}

uint64_t sub_23EC0A220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC0A228);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23EC0A22C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC0A234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalTAFField.CodingKeys()
{
  return &type metadata for InternalTAFField.CodingKeys;
}

unint64_t sub_23EC0A254()
{
  unint64_t result;

  result = qword_256DB8D28;
  if (!qword_256DB8D28)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35F3C, &type metadata for InternalTAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D28);
  }
  return result;
}

unint64_t sub_23EC0A29C()
{
  unint64_t result;

  result = qword_256DB8D30;
  if (!qword_256DB8D30)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35FF4, &type metadata for InternalTAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D30);
  }
  return result;
}

unint64_t sub_23EC0A2E4()
{
  unint64_t result;

  result = qword_256DB8D38;
  if (!qword_256DB8D38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC360AC, &type metadata for InternalOtpProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D38);
  }
  return result;
}

unint64_t sub_23EC0A32C()
{
  unint64_t result;

  result = qword_256DB8D40;
  if (!qword_256DB8D40)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3601C, &type metadata for InternalOtpProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D40);
  }
  return result;
}

unint64_t sub_23EC0A374()
{
  unint64_t result;

  result = qword_256DB8D48;
  if (!qword_256DB8D48)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36044, &type metadata for InternalOtpProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D48);
  }
  return result;
}

unint64_t sub_23EC0A3BC()
{
  unint64_t result;

  result = qword_256DB8D50;
  if (!qword_256DB8D50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35F64, &type metadata for InternalTAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D50);
  }
  return result;
}

unint64_t sub_23EC0A404()
{
  unint64_t result;

  result = qword_256DB8D58;
  if (!qword_256DB8D58)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35F8C, &type metadata for InternalTAFSection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D58);
  }
  return result;
}

unint64_t sub_23EC0A44C()
{
  unint64_t result;

  result = qword_256DB8D60;
  if (!qword_256DB8D60)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35EAC, &type metadata for InternalTAFField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8D60);
  }
  return result;
}

unint64_t sub_23EC0A494()
{
  unint64_t result;

  result = qword_256DB8D68;
  if (!qword_256DB8D68)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC35ED4, &type metadata for InternalTAFField.CodingKeys);
    atomic_store(result, &qword_256DB8D68);
  }
  return result;
}

uint64_t sub_23EC0A4E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v12;

  v3 = sub_23EC2E3F0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23EC2DFA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v1, v7);
  sub_23EC2E3E4();
  sub_23EC2E3D8();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_23EC2E7D4();
  swift_bridgeObjectRelease();
  sub_23EC2DF70();
  swift_bridgeObjectRelease();
  sub_23EC0C184();
  sub_23EC2DF70();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  LOBYTE(v3) = objc_msgSend(v8, sel_isMacCatalystApp);

  if ((v3 & 1) == 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v10 = objc_msgSend(v9, sel_systemName);

    sub_23EC2E780();
  }
  sub_23EC2DF70();
  return swift_bridgeObjectRelease();
}

void sub_23EC0A6EC(uint64_t a1, unint64_t a2, uint8_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  os_log_type_t v34;
  uint8_t *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;

  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_23EC2DF4C();
    if (v8)
    {
      v9 = v8;
      if (qword_25433FAF8 == -1)
        goto LABEL_4;
      while (1)
      {
        swift_once();
LABEL_4:
        v10 = sub_23EC2E684();
        __swift_project_value_buffer(v10, (uint64_t)qword_25433FC98);
        swift_bridgeObjectRetain_n();
        v11 = sub_23EC2E66C();
        v12 = sub_23EC2EA14();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = a1;
          v14 = a3;
          a3 = (uint8_t *)swift_slowAlloc();
          v62 = v9;
          v15 = swift_slowAlloc();
          v64 = v15;
          *(_DWORD *)a3 = 136315138;
          swift_bridgeObjectRetain();
          v16 = (uint64_t)v14;
          a1 = v13;
          sub_23EBAE6D4(v16, a4, &v64);
          sub_23EC2EA68();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23EB9F000, v11, v12, ">>> %s", a3, 0xCu);
          swift_arrayDestroy();
          v17 = v15;
          v9 = v62;
          MEMORY[0x24265B940](v17, -1, -1);
          MEMORY[0x24265B940](a3, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRetain_n();
        v31 = sub_23EC2E66C();
        v32 = sub_23EC2EA14();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          a3 = (uint8_t *)swift_slowAlloc();
          v64 = (uint64_t)a3;
          *(_DWORD *)v33 = 136315138;
          swift_bridgeObjectRetain();
          sub_23EBAE6D4(a1, a2, &v64);
          sub_23EC2EA68();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23EB9F000, v31, v32, "%s", v33, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24265B940](a3, -1, -1);
          MEMORY[0x24265B940](v33, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a4 = sub_23EC2E66C();
        v34 = sub_23EC2EA14();
        a2 = v34;
        if (os_log_type_enabled((os_log_t)a4, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_23EB9F000, (os_log_t)a4, (os_log_type_t)a2, "======== Headers =======", v35, 2u);
          MEMORY[0x24265B940](v35, -1, -1);
        }

        v36 = 0;
        v37 = *(_QWORD *)(v9 + 64);
        v60 = v9 + 64;
        v38 = 1 << *(_BYTE *)(v9 + 32);
        v39 = -1;
        if (v38 < 64)
          v39 = ~(-1 << v38);
        a1 = v39 & v37;
        v61 = (unint64_t)(v38 + 63) >> 6;
        if ((v39 & v37) != 0)
        {
          do
          {
            while (1)
            {
              v40 = __clz(__rbit64(a1));
              a1 &= a1 - 1;
              v63 = v36;
              v41 = v40 | (v36 << 6);
LABEL_40:
              v46 = 16 * v41;
              v47 = (unint64_t *)(*(_QWORD *)(v9 + 48) + v46);
              a2 = *v47;
              v48 = v47[1];
              v49 = (uint64_t *)(*(_QWORD *)(v9 + 56) + v46);
              v51 = *v49;
              v50 = v49[1];
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              a3 = (uint8_t *)sub_23EC2E66C();
              v52 = sub_23EC2EA14();
              a4 = v52;
              if (os_log_type_enabled((os_log_t)a3, v52))
                break;

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              v36 = v63;
              if (!a1)
                goto LABEL_26;
            }
            v53 = v9;
            v54 = swift_slowAlloc();
            v55 = swift_slowAlloc();
            v64 = v55;
            *(_DWORD *)v54 = 136315394;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v54 + 4) = sub_23EBAE6D4(a2, v48, &v64);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v54 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v54 + 14) = sub_23EBAE6D4(v51, v50, &v64);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23EB9F000, (os_log_t)a3, (os_log_type_t)a4, "%s: %s", (uint8_t *)v54, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x24265B940](v55, -1, -1);
            v56 = v54;
            v9 = v53;
            MEMORY[0x24265B940](v56, -1, -1);

            v36 = v63;
          }
          while (a1);
        }
LABEL_26:
        v42 = v36 + 1;
        if (__OFADD__(v36, 1))
        {
          __break(1u);
        }
        else
        {
          if (v42 >= v61)
            goto LABEL_43;
          v43 = *(_QWORD *)(v60 + 8 * v42);
          v44 = v36 + 1;
          if (v43)
            goto LABEL_39;
          v44 = v36 + 2;
          if (v36 + 2 >= v61)
            goto LABEL_43;
          v43 = *(_QWORD *)(v60 + 8 * v44);
          if (v43)
            goto LABEL_39;
          v44 = v36 + 3;
          if (v36 + 3 >= v61)
            goto LABEL_43;
          v43 = *(_QWORD *)(v60 + 8 * v44);
          if (v43)
            goto LABEL_39;
          v45 = v36 + 4;
          if (v36 + 4 >= v61)
          {
LABEL_43:
            swift_release();
            v57 = sub_23EC2E66C();
            v58 = sub_23EC2EA14();
            if (os_log_type_enabled(v57, v58))
            {
              v59 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v59 = 0;
              _os_log_impl(&dword_23EB9F000, v57, v58, "========================", v59, 2u);
              MEMORY[0x24265B940](v59, -1, -1);
            }

            return;
          }
          v43 = *(_QWORD *)(v60 + 8 * v45);
          if (v43)
          {
            v44 = v36 + 4;
LABEL_39:
            a1 = (v43 - 1) & v43;
            v63 = v44;
            v41 = __clz(__rbit64(v43)) + (v44 << 6);
            goto LABEL_40;
          }
          while (1)
          {
            v44 = v45 + 1;
            if (__OFADD__(v45, 1))
              break;
            if (v44 >= v61)
              goto LABEL_43;
            v43 = *(_QWORD *)(v60 + 8 * v44);
            ++v45;
            if (v43)
              goto LABEL_39;
          }
        }
        __break(1u);
      }
    }
  }
  v18 = sub_23EC2DF4C();
  if (v18)
  {
    v19 = v18;
    if (*(_QWORD *)(v18 + 16) && (v20 = sub_23EBE9A24(0x7365757165522D58, 0xEB00000000644974), (v21 & 1) != 0))
    {
      v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v20);
      v24 = *v22;
      v23 = v22[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_25433FAF8 != -1)
        swift_once();
      v25 = sub_23EC2E684();
      __swift_project_value_buffer(v25, (uint64_t)qword_25433FC98);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v26 = sub_23EC2E66C();
      v27 = sub_23EC2EA14();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint64_t)a3;
        v29 = swift_slowAlloc();
        v30 = swift_slowAlloc();
        v64 = v30;
        *(_DWORD *)v29 = 136315394;
        swift_bridgeObjectRetain();
        sub_23EBAE6D4(v28, a4, &v64);
        sub_23EC2EA68();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_23EBAE6D4(v24, v23, &v64);
        sub_23EC2EA68();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23EB9F000, v26, v27, ">>> %s : requestID: %s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v30, -1, -1);
        MEMORY[0x24265B940](v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_23EC0AFC4(uint64_t a1, uint8_t *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  int v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  os_log_type_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t **v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint8_t *v114;
  uint64_t v115;
  os_log_t v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  char *v126;
  uint64_t v127;
  uint8_t *v128;
  os_log_t v129;
  id v130;
  _OWORD v131[2];
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  v8 = sub_23EC2E7C8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = ((char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v16 = ((char *)&v121 - v15);
  v17 = sub_23EC2DFA0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a4[2];
  if (v21)
  {
    if (a4[4] == a3)
      return;
    if (v21 != 1)
    {
      if (a4[5] == a3)
        return;
      if (v21 != 2)
      {
        v43 = 6;
        do
        {
          v44 = v43 - 3;
          if (__OFADD__(v43 - 4, 1))
          {
            while (1)
            {
              __break(1u);
LABEL_86:
              swift_once();
LABEL_7:
              v22 = sub_23EC2E684();
              v23 = __swift_project_value_buffer(v22, (uint64_t)qword_25433FC98);
              swift_bridgeObjectRetain_n();
              v126 = (char *)v23;
              v24 = sub_23EC2E66C();
              v25 = sub_23EC2EA08();
              LODWORD(v128) = v25;
              v26 = os_log_type_enabled(v24, v25);
              *(_QWORD *)&v125 = a1;
              v129 = v14;
              if (v26)
              {
                v27 = swift_slowAlloc();
                v124 = swift_slowAlloc();
                *(_QWORD *)&v132 = v124;
                *(_DWORD *)v27 = 136315394;
                v122 = v27 + 4;
                swift_bridgeObjectRetain();
                *(_QWORD *)&v131[0] = sub_23EBAE6D4(a1, (unint64_t)a2, (uint64_t *)&v132);
                sub_23EC2EA68();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v27 + 12) = 2048;
                *(_QWORD *)&v131[0] = a3;
                sub_23EC2EA68();
                _os_log_impl(&dword_23EB9F000, v24, (os_log_type_t)v128, "Failure while trying to %s, with status Code: %ld", (uint8_t *)v27, 0x16u);
                v28 = v124;
                swift_arrayDestroy();
                MEMORY[0x24265B940](v28, -1, -1);
                v29 = v27;
                v14 = v129;
                MEMORY[0x24265B940](v29, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n();
              }
              (*(void (**)(char *, uint64_t, unint64_t))(v18 + 16))(v20, v123, v17);
              v45 = sub_23EC2E66C();
              v46 = sub_23EC2EA08();
              v47 = os_log_type_enabled(v45, (os_log_type_t)v46);
              v122 = v10;
              if (v47)
              {
                LODWORD(v124) = v46;
                v128 = a2;
                v48 = (uint8_t *)swift_slowAlloc();
                v121 = swift_slowAlloc();
                *(_QWORD *)&v132 = v121;
                *(_DWORD *)v48 = 136315138;
                sub_23EC2DF64();
                v49 = sub_23EC2E264();
                v50 = *(_QWORD *)(v49 - 8);
                if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v50 + 48))(v16, 1, v49) == 1)
                {
                  sub_23EBE1350((uint64_t)v16);
                  v51 = 0;
                  v52 = 0xE000000000000000;
                }
                else
                {
                  v51 = sub_23EC2E1EC();
                  v52 = v53;
                  (*(void (**)(NSObject *, uint64_t))(v50 + 8))(v16, v49);
                }
                *(_QWORD *)&v131[0] = sub_23EBAE6D4(v51, v52, (uint64_t *)&v132);
                sub_23EC2EA68();
                swift_bridgeObjectRelease();
                (*(void (**)(char *, unint64_t))(v18 + 8))(v20, v17);
                _os_log_impl(&dword_23EB9F000, v45, (os_log_type_t)v124, "Request : %s", v48, 0xCu);
                v54 = v121;
                swift_arrayDestroy();
                MEMORY[0x24265B940](v54, -1, -1);
                MEMORY[0x24265B940](v48, -1, -1);

                a2 = v128;
                v14 = v129;
              }
              else
              {
                (*(void (**)(char *, unint64_t))(v18 + 8))(v20, v17);

              }
              v20 = v126;
              v55 = v127;
              if (*(_QWORD *)(v127 + 16))
              {
                v56 = sub_23EBE9A24(0x7365757165522D58, 0xEB00000000644974);
                if ((v57 & 1) != 0)
                {
                  v58 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 16 * v56);
                  v60 = *v58;
                  v59 = v58[1];
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain_n();
                  v61 = sub_23EC2E66C();
                  v62 = sub_23EC2EA08();
                  if (os_log_type_enabled(v61, v62))
                  {
                    v63 = swift_slowAlloc();
                    v17 = swift_slowAlloc();
                    *(_QWORD *)&v132 = v17;
                    *(_DWORD *)v63 = 136315394;
                    swift_bridgeObjectRetain();
                    *(_QWORD *)&v131[0] = sub_23EBAE6D4(v125, (unint64_t)a2, (uint64_t *)&v132);
                    a2 = (uint8_t *)v131 + 8;
                    sub_23EC2EA68();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v63 + 12) = 2080;
                    swift_bridgeObjectRetain();
                    *(_QWORD *)&v131[0] = sub_23EBAE6D4(v60, v59, (uint64_t *)&v132);
                    sub_23EC2EA68();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl(&dword_23EB9F000, v61, v62, ">>> %s : requestID: %s", (uint8_t *)v63, 0x16u);
                    swift_arrayDestroy();
                    MEMORY[0x24265B940](v17, -1, -1);
                    MEMORY[0x24265B940](v63, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();
                  }
                  v14 = v129;
                }
              }
              sub_23EC2DF64();
              v64 = sub_23EC2E264();
              a1 = *(_QWORD *)(v64 - 8);
              if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(a1 + 48))(v14, 1, v64) == 1)
              {
                sub_23EBE1350((uint64_t)v14);
              }
              else
              {
                v65 = sub_23EC2E228();
                v66 = v14;
                v14 = v67;
                (*(void (**)(NSObject *, uint64_t))(a1 + 8))(v66, v64);
                if (v14)
                {
                  swift_bridgeObjectRetain();
                  v68 = sub_23EC2E66C();
                  v69 = sub_23EC2EA08();
                  if (os_log_type_enabled(v68, v69))
                  {
                    v70 = (uint8_t *)swift_slowAlloc();
                    a1 = swift_slowAlloc();
                    *(_QWORD *)&v132 = a1;
                    *(_DWORD *)v70 = 136315138;
                    a2 = v70 + 12;
                    v17 = (unint64_t)(v70 + 4);
                    swift_bridgeObjectRetain();
                    *(_QWORD *)&v131[0] = sub_23EBAE6D4(v65, (unint64_t)v14, (uint64_t *)&v132);
                    sub_23EC2EA68();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl(&dword_23EB9F000, v68, v69, "Query : %s", v70, 0xCu);
                    swift_arrayDestroy();
                    MEMORY[0x24265B940](a1, -1, -1);
                    MEMORY[0x24265B940](v70, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                }
              }
              v16 = sub_23EC2E66C();
              v71 = sub_23EC2EA08();
              if (os_log_type_enabled(v16, v71))
              {
                a1 = swift_slowAlloc();
                *(_WORD *)a1 = 0;
                _os_log_impl(&dword_23EB9F000, v16, v71, "======== Headers =======", (uint8_t *)a1, 2u);
                MEMORY[0x24265B940](a1, -1, -1);
              }

              v10 = 0;
              v18 = v127;
              v73 = *(_QWORD *)(v127 + 64);
              v128 = (uint8_t *)(v127 + 64);
              v74 = 1 << *(_BYTE *)(v127 + 32);
              v75 = -1;
              if (v74 < 64)
                v75 = ~(-1 << v74);
              a3 = v75 & v73;
              v129 = (os_log_t)((unint64_t)(v74 + 63) >> 6);
              *(_QWORD *)&v72 = 136315394;
              v125 = v72;
              v124 = MEMORY[0x24BEE4AD8] + 8;
              if ((v75 & v73) != 0)
              {
                do
                {
                  while (1)
                  {
                    v76 = __clz(__rbit64(a3));
                    a3 &= a3 - 1;
                    v77 = v76 | (v10 << 6);
LABEL_66:
                    v81 = 16 * v77;
                    v82 = *(_QWORD *)(v18 + 48) + v81;
                    v16 = *(NSObject **)v82;
                    v17 = *(_QWORD *)(v82 + 8);
                    v83 = (uint8_t **)(*(_QWORD *)(v18 + 56) + v81);
                    a2 = *v83;
                    v14 = v83[1];
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain_n();
                    v84 = sub_23EC2E66C();
                    v85 = sub_23EC2EA08();
                    a1 = v85;
                    if (os_log_type_enabled(v84, v85))
                      break;

                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();
                    if (!a3)
                      goto LABEL_52;
                  }
                  v86 = swift_slowAlloc();
                  v87 = swift_slowAlloc();
                  *(_QWORD *)&v132 = v87;
                  *(_DWORD *)v86 = v125;
                  swift_bridgeObjectRetain();
                  *(_QWORD *)(v86 + 4) = sub_23EBAE6D4((uint64_t)v16, v17, (uint64_t *)&v132);
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v86 + 12) = 2080;
                  swift_bridgeObjectRetain();
                  *(_QWORD *)(v86 + 14) = sub_23EBAE6D4((uint64_t)a2, (unint64_t)v14, (uint64_t *)&v132);
                  swift_bridgeObjectRelease_n();
                  _os_log_impl(&dword_23EB9F000, v84, (os_log_type_t)a1, "%s: %s", (uint8_t *)v86, 0x16u);
                  swift_arrayDestroy();
                  v88 = v87;
                  v18 = v127;
                  MEMORY[0x24265B940](v88, -1, -1);
                  v89 = v86;
                  v20 = v126;
                  MEMORY[0x24265B940](v89, -1, -1);

                }
                while (a3);
              }
LABEL_52:
              v78 = v10 + 1;
              if (__OFADD__(v10, 1))
              {
                __break(1u);
              }
              else
              {
                if (v78 >= (uint64_t)v129)
                  goto LABEL_69;
                v79 = *(_QWORD *)&v128[8 * v78];
                ++v10;
                if (v79)
                  goto LABEL_65;
                v10 = v78 + 1;
                if (v78 + 1 >= (uint64_t)v129)
                  goto LABEL_69;
                v79 = *(_QWORD *)&v128[8 * v10];
                if (v79)
                  goto LABEL_65;
                v10 = v78 + 2;
                if (v78 + 2 >= (uint64_t)v129)
                  goto LABEL_69;
                v79 = *(_QWORD *)&v128[8 * v10];
                if (v79)
                  goto LABEL_65;
                v80 = v78 + 3;
                if (v80 >= (uint64_t)v129)
                {
LABEL_69:
                  swift_release();
                  v90 = sub_23EC2E66C();
                  v91 = sub_23EC2EA08();
                  if (os_log_type_enabled(v90, v91))
                  {
                    v92 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v92 = 0;
                    _os_log_impl(&dword_23EB9F000, v90, v91, "========================", v92, 2u);
                    MEMORY[0x24265B940](v92, -1, -1);
                  }

                  v93 = sub_23EC2DF7C();
                  if (v94 >> 60 != 15)
                  {
                    v95 = v93;
                    v96 = v94;
                    v97 = (void *)objc_opt_self();
                    v98 = (void *)sub_23EC2E2B8();
                    v130 = 0;
                    v99 = objc_msgSend(v97, sel_JSONObjectWithData_options_error_, v98, 0, &v130);

                    v100 = v130;
                    if (v99)
                    {
                      sub_23EC2EAE0();
                      swift_unknownObjectRelease();
                      sub_23EBB2080(v131, &v132);
                      __swift_project_boxed_opaque_existential_1(&v132, v133);
                      v101 = sub_23EC2ED2C();
                      *(_QWORD *)&v131[0] = 0;
                      v102 = objc_msgSend(v97, sel_dataWithJSONObject_options_error_, v101, 1, v131);
                      swift_unknownObjectRelease();
                      v103 = *(id *)&v131[0];
                      if (v102)
                      {
                        v104 = sub_23EC2E2D0();
                        v106 = v105;

                        sub_23EC2E7B0();
                        v107 = sub_23EC2E798();
                        if (v108)
                        {
                          v109 = v107;
                          v110 = v108;
                          swift_bridgeObjectRetain();
                          v111 = sub_23EC2E66C();
                          v112 = sub_23EC2EA08();
                          if (os_log_type_enabled(v111, v112))
                          {
                            v113 = swift_slowAlloc();
                            v129 = v111;
                            v114 = (uint8_t *)v113;
                            v115 = swift_slowAlloc();
                            *(_QWORD *)&v131[0] = v115;
                            *(_DWORD *)v114 = 136315138;
                            v128 = v114 + 4;
                            swift_bridgeObjectRetain();
                            v130 = (id)sub_23EBAE6D4(v109, v110, (uint64_t *)v131);
                            sub_23EC2EA68();
                            swift_bridgeObjectRelease_n();
                            v116 = v129;
                            _os_log_impl(&dword_23EB9F000, v129, v112, "Body : %s", v114, 0xCu);
                            swift_arrayDestroy();
                            MEMORY[0x24265B940](v115, -1, -1);
                            MEMORY[0x24265B940](v114, -1, -1);
                            sub_23EBA4CE0(v95, v96);
                            sub_23EBA3EDC(v104, v106);

                          }
                          else
                          {
                            sub_23EBA4CE0(v95, v96);
                            sub_23EBA3EDC(v104, v106);

                            swift_bridgeObjectRelease_n();
                          }
                        }
                        else
                        {
                          sub_23EBA3EDC(v104, v106);
                          sub_23EBA4CE0(v95, v96);
                        }
                      }
                      else
                      {
                        v119 = v103;
                        v120 = (void *)sub_23EC2E1D4();

                        swift_willThrow();
                        sub_23EBA4CE0(v95, v96);

                      }
                      __swift_destroy_boxed_opaque_existential_0((uint64_t)&v132);
                    }
                    else
                    {
                      v117 = v100;
                      v118 = (void *)sub_23EC2E1D4();

                      swift_willThrow();
                      sub_23EBA4CE0(v95, v96);
                    }
                  }
                  return;
                }
                v79 = *(_QWORD *)&v128[8 * v80];
                if (v79)
                {
                  v10 = v80;
LABEL_65:
                  a3 = (v79 - 1) & v79;
                  v77 = __clz(__rbit64(v79)) + (v10 << 6);
                  goto LABEL_66;
                }
                while (1)
                {
                  v10 = v80 + 1;
                  if (__OFADD__(v80, 1))
                    break;
                  if (v10 >= (uint64_t)v129)
                    goto LABEL_69;
                  v79 = *(_QWORD *)&v128[8 * v10];
                  ++v80;
                  if (v79)
                    goto LABEL_65;
                }
              }
              __break(1u);
            }
          }
          if (a4[v43] == a3)
            return;
          ++v43;
        }
        while (v44 != v21);
      }
    }
  }
  if (os_variant_has_internal_diagnostics())
  {
    v127 = sub_23EC2DF4C();
    if (v127)
    {
      if (qword_25433FAF8 == -1)
        goto LABEL_7;
      goto LABEL_86;
    }
  }
  v30 = sub_23EC2DF4C();
  if (v30)
  {
    v31 = v30;
    if (*(_QWORD *)(v30 + 16) && (v32 = sub_23EBE9A24(0x7365757165522D58, 0xEB00000000644974), (v33 & 1) != 0))
    {
      v34 = a1;
      v35 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 16 * v32);
      v37 = *v35;
      v36 = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_25433FAF8 != -1)
        swift_once();
      v38 = sub_23EC2E684();
      __swift_project_value_buffer(v38, (uint64_t)qword_25433FC98);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v39 = sub_23EC2E66C();
      v40 = sub_23EC2EA08();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc();
        v42 = swift_slowAlloc();
        *(_QWORD *)&v132 = v42;
        *(_DWORD *)v41 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v131[0] = sub_23EBAE6D4(v34, (unint64_t)a2, (uint64_t *)&v132);
        sub_23EC2EA68();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v131[0] = sub_23EBAE6D4(v37, v36, (uint64_t *)&v132);
        sub_23EC2EA68();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23EB9F000, v39, v40, ">>> %s : requestID: %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v42, -1, -1);
        MEMORY[0x24265B940](v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_23EC0C0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v0 = sub_23EC2DF4C();
  if (!v0)
    return 0;
  v1 = v0;
  if (*(_QWORD *)(v0 + 16) && (v2 = sub_23EBE9A24(0x7365757165522D58, 0xEB00000000644974), (v3 & 1) != 0))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v2);
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23EC0C184()
{
  id v0;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  objc_msgSend(v0, sel_operatingSystemVersion);

  v2 = sub_23EC2ED20();
  sub_23EC2E834();
  sub_23EC2ED20();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EC2E834();
  sub_23EC2ED20();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23EC0C290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  v10 = sub_23EC2E4EC();
  *(_QWORD *)(v8 + 72) = v10;
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  *(_QWORD *)(v8 + 96) = swift_task_alloc();
  type metadata accessor for RecordsResponse(0);
  *(_QWORD *)(v8 + 104) = swift_task_alloc();
  *(_QWORD *)(v8 + 112) = type metadata accessor for GetRequest(0);
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  v11 = sub_23EC2E33C();
  *(_QWORD *)(v8 + 128) = v11;
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 144) = swift_task_alloc();
  *(_BYTE *)(v8 + 176) = *a5;
  return swift_task_switch();
}

uint64_t sub_23EC0C384()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  HomeUtilityServices::JWToken v36;

  sub_23EC0D53C();
  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  JWToken.init(jwt:)(&v36, v3);
  if (v4)
  {
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = JWToken.expired.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (qword_256DB7220 != -1)
      swift_once();
    v6 = sub_23EC2E684();
    __swift_project_value_buffer(v6, (uint64_t)qword_256DC77B0);
    v7 = sub_23EC2E66C();
    v8 = sub_23EC2EA08();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v7, v8, "Authorization Token expired. Retry after refreshing token", v9, 2u);
      MEMORY[0x24265B940](v9, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_8;
  }
  if (qword_256DB7188 != -1)
    swift_once();
  v11 = *(unsigned __int8 *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = (void *)qword_256DC7668;
  sub_23EC12720();
  v16 = (void *)sub_23EC2E774();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v15, sel_codeServiceWithName_databaseScope_, v16, 1);
  *(_QWORD *)(v0 + 152) = v17;

  v35 = v17;
  sub_23EBBBE40(v12);
  v33 = sub_23EC2E2E8();
  v34 = v18;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v19 = 0xEA0000000000746ELL;
  v20 = 0x696F506567617355;
  if (v11 != 1)
  {
    v20 = 0x6D75536567617355;
    v19 = 0xEC0000007972616DLL;
  }
  if (v11)
    v21 = v20;
  else
    v21 = 0x6C61767265746E49;
  if (v11)
    v22 = v19;
  else
    v22 = 0xED00006B636F6C42;
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 48);
  v32 = *(_OWORD *)(v0 + 24);
  v26 = swift_task_alloc();
  *(_OWORD *)(v26 + 16) = v32;
  *(_QWORD *)(v26 + 32) = v24;
  *(_QWORD *)(v26 + 40) = v25;
  *(_QWORD *)(v26 + 48) = v23;
  *(_QWORD *)(v26 + 56) = v33;
  *(_QWORD *)(v26 + 64) = v34;
  *(_QWORD *)(v26 + 72) = v21;
  *(_QWORD *)(v26 + 80) = v22;
  sub_23EBC0AD4(&qword_256DB7EB8, type metadata accessor for GetRequest, (uint64_t)&unk_23EC3212C);
  sub_23EC2E5F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (qword_256DB7220 != -1)
    swift_once();
  v27 = sub_23EC2E684();
  __swift_project_value_buffer(v27, (uint64_t)qword_256DC77B0);
  v28 = sub_23EC2E66C();
  v29 = sub_23EC2EA14();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_23EB9F000, v28, v29, "Fetching Utility Records from Dropbox", v30, 2u);
    MEMORY[0x24265B940](v30, -1, -1);
  }

  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v31;
  *v31 = v0;
  v31[1] = sub_23EC0C878;
  return sub_23EBCC45C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 120), (uint64_t)v35);
}

uint64_t sub_23EC0C878()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC0C8DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v31;

  v1 = v0[21];
  sub_23EC0CE50(*(_QWORD *)(v0[13] + 32), *(_BYTE *)(v0[13] + 40));
  if (v1)
  {
    v2 = (void *)v0[19];
    v3 = v0[15];
    v4 = v0[13];

    sub_23EBF2D24(v4, type metadata accessor for RecordsResponse);
    sub_23EBF2D24(v3, type metadata accessor for GetRequest);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v6 = (uint64_t *)v0[13];
    v7 = *v6;
    v8 = *(_QWORD *)(*v6 + 16);
    v9 = MEMORY[0x24BEE4AF8];
    if (v8)
    {
      v10 = v0[10];
      v31 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_23EC2EBC4();
      sub_23EC0D880();
      v11 = v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v12 = *(_QWORD *)(v10 + 72);
      v13 = v10;
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      do
      {
        v15 = v0[11];
        v16 = v0[12];
        v17 = v0[9];
        v14(v16, v11, v17);
        v14(v15, v16, v17);
        sub_23EC2EA44();
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v17);
        sub_23EC2EBAC();
        sub_23EC2EBD0();
        sub_23EC2EBDC();
        sub_23EC2EBB8();
        v11 += v12;
        --v8;
      }
      while (v8);
      v18 = v31;
      swift_bridgeObjectRelease();
      v9 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v18 = MEMORY[0x24BEE4AF8];
    }
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v19; ++i)
      {
        v21 = *(void **)(v18 + 8 * i + 32);
        if (v21)
        {
          v22 = v21;
          MEMORY[0x24265AF20]();
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_23EC2E954();
          sub_23EC2E96C();
          sub_23EC2E948();
        }
      }
      swift_bridgeObjectRelease();
    }
    v23 = (void *)v0[19];
    v24 = v0[15];
    v25 = v0[13];
    v26 = v0[2];
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_BYTE *)(v25 + 24);
    *(_QWORD *)v26 = v9;
    *(_QWORD *)(v26 + 8) = v27;
    *(_QWORD *)(v26 + 16) = v28;
    *(_BYTE *)(v26 + 24) = v29;
    sub_23EBA3E98(v27, v28);

    sub_23EBF2D24(v25, type metadata accessor for RecordsResponse);
    sub_23EBF2D24(v24, type metadata accessor for GetRequest);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_23EC0CBD0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 120);

  sub_23EBF2D24(v2, type metadata accessor for GetRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23EC0CC60()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;

  if ((sub_23EC12720() - 1) >= 2u)
    v0 = 1;
  else
    v0 = 2;
  v1 = objc_allocWithZone(MEMORY[0x24BDB9038]);
  v2 = (void *)sub_23EC2E774();
  v3 = objc_msgSend(v1, sel_initWithContainerIdentifier_environment_, v2, v0);

  qword_256DC7660 = (uint64_t)v3;
}

void sub_23EC0CCF0()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  if (qword_256DB7180 != -1)
    swift_once();
  v0 = (void *)qword_256DC7660;
  v1 = objc_allocWithZone(MEMORY[0x24BDB9030]);
  v2 = v0;
  v3 = objc_msgSend(v1, sel_initWithContainerID_, v2);

  qword_256DC7668 = (uint64_t)v3;
}

uint64_t sub_23EC0CD74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  unint64_t v19;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  v18 = a1[3];
  v19 = a1[4];
  sub_23EBA3E98(a5, a6);
  sub_23EBA3EDC(v18, v19);
  a1[3] = a5;
  a1[4] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a7;
  a1[6] = a8;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  a1[7] = a9;
  a1[8] = a10;
  return result;
}

uint64_t sub_23EC0CE50(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if ((a2 & 1) != 0)
    __asm { BR              X9 }
  if (qword_256DB7220 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC77B0);
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA08();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23EB9F000, v3, v4, "CKFunction | Uncaught Error", v5, 2u);
    MEMORY[0x24265B940](v5, -1, -1);
  }

  type metadata accessor for NetworkError();
  sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

void sub_23EC0D53C()
{
  __CFString *v0;
  __CFString *v1;
  int AppBooleanValue;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  __int16 v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  Boolean v17;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (qword_25433FAA0 != -1)
    swift_once();
  if (byte_25433FC18 == 1)
  {
    keyExistsAndHasValidFormat = 0;
    v0 = (__CFString *)sub_23EC2E774();
    v1 = (__CFString *)sub_23EC2E774();
    AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

    if (keyExistsAndHasValidFormat)
    {
      if (AppBooleanValue)
      {
        if (qword_256DB7220 != -1)
          swift_once();
        v3 = sub_23EC2E684();
        __swift_project_value_buffer(v3, (uint64_t)qword_256DC77B0);
        v4 = sub_23EC2E66C();
        v5 = sub_23EC2EA14();
        if (os_log_type_enabled(v4, v5))
        {
          v6 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v6 = 0;
          _os_log_impl(&dword_23EB9F000, v4, v5, "Dropbox Error Inducer Enabled", v6, 2u);
          MEMORY[0x24265B940](v6, -1, -1);
        }

        v7 = sub_23EC2E66C();
        v8 = sub_23EC2EA14();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_23EB9F000, v7, v8, "Dropbox Error Inducer | Checking induced error type.", v9, 2u);
          MEMORY[0x24265B940](v9, -1, -1);
        }

        v17 = 0;
        v10 = (__CFString *)sub_23EC2E774();
        v11 = (__CFString *)sub_23EC2E774();
        CFPreferencesGetAppIntegerValue(v10, v11, &v17);

        if (!v17 || (sub_23EBC4ACC(), (v13 & 0x100) != 0))
        {
          v14 = sub_23EC2E66C();
          v15 = sub_23EC2EA14();
          if (os_log_type_enabled(v14, v15))
          {
            v16 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v16 = 0;
            _os_log_impl(&dword_23EB9F000, v14, v15, "Dropbox Error Inducer type not found in defaults!!", v16, 2u);
            MEMORY[0x24265B940](v16, -1, -1);
          }

        }
        else
        {
          sub_23EC0CE50(v12, v13 & 1);
        }
      }
    }
  }
}

uint64_t sub_23EC0D84C(_QWORD *a1)
{
  uint64_t v1;

  return sub_23EC0CD74(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

unint64_t sub_23EC0D880()
{
  unint64_t result;

  result = qword_256DB8D78;
  if (!qword_256DB8D78)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256DB8D78);
  }
  return result;
}

id sub_23EC0D8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v0 = sub_23EC2E7C8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self();
  v5 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v25 = 0;
  v6 = objc_msgSend(v4, sel_JSONObjectWithData_options_error_, v5, 0, &v25);

  v7 = (id)v25;
  if (!v6)
  {
    v18 = v7;
    v19 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    return 0;
  }
  sub_23EC2EAE0();
  swift_unknownObjectRelease();
  sub_23EBB2080(v24, &v25);
  __swift_project_boxed_opaque_existential_1(&v25, v26);
  v8 = sub_23EC2ED2C();
  *(_QWORD *)&v24[0] = 0;
  v9 = objc_msgSend(v4, sel_dataWithJSONObject_options_error_, v8, 1, v24);
  swift_unknownObjectRelease();
  v10 = *(id *)&v24[0];
  if (!v9)
  {
    v20 = v10;
    v21 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
    return 0;
  }
  v11 = sub_23EC2E2D0();
  v13 = v12;

  sub_23EC2E7B0();
  v14 = sub_23EC2E7BC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v15 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
  v16 = (void *)sub_23EC2E2B8();
  v17 = objc_msgSend(v15, sel_initWithData_encoding_, v16, v14);
  sub_23EBA3EDC(v11, v13);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v25);
  return v17;
}

uint64_t sub_23EC0DB10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_23EC2E3CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E384();
  v5 = v4;
  sub_23EC2E39C();
  sub_23EC2E384();
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = v5 - v7;
  if ((~COERCE__INT64(v5 - v7) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (!__OFSUB__((uint64_t)v9, 3600 * ((uint64_t)v9 / 3600)))
  {
    v10 = (uint64_t)v9 % 3600;
    v13 = (uint64_t)v9 / 3600;
    v14 = sub_23EC2ED20();
    v15 = v11;
    sub_23EC2E834();
    v13 = v10 / 60;
    sub_23EC2ED20();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    sub_23EC2E834();
    return v14;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_23EC0DCA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;

  v0 = sub_23EC2E420();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23EC2E474();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23EC2E414();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  sub_23EC2E3FC();
  v12 = (void *)sub_23EC2E408();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  objc_msgSend(v11, sel_setLocale_, v12);

  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCEF50], v0);
  sub_23EC2E42C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v13 = (void *)sub_23EC2E444();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  objc_msgSend(v11, sel_setCalendar_, v13);

  v14 = (void *)sub_23EC2E774();
  objc_msgSend(v11, sel_setDateFormat_, v14);

  return v11;
}

uint64_t URLRequest.addBAAHeaders()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_23EC2E7C8();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  v4 = sub_23EC2E3CC();
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = swift_task_alloc();
  v5 = (_QWORD *)swift_task_alloc();
  v2[15] = v5;
  *v5 = v2;
  v5[1] = sub_23EC0DF40;
  return sub_23EC0FC38();
}

uint64_t sub_23EC0DF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v5 = (_QWORD *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = v3;
  v6 = (_QWORD *)*v4;
  v5[16] = a1;
  v5[17] = a3;
  v5[18] = v3;
  swift_task_dealloc();
  if (!v3)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_23EC0DFD8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __SecKey *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(void **)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 64);
  v38 = *(_QWORD *)(v0 + 80);
  v39 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = sub_23EC2DFA0();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v7, v6);
  v9 = v1;
  swift_bridgeObjectRetain();
  sub_23EC186E4();
  sub_23EC2E7D4();
  swift_bridgeObjectRelease();
  sub_23EC2E39C();
  sub_23EC2E384();
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88A0);
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE13C8];
  *(_OWORD *)(v12 + 16) = xmmword_23EC2FB70;
  v14 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v12 + 56) = v13;
  *(_QWORD *)(v12 + 64) = v14;
  *(double *)(v12 + 32) = v11 * 1000.0;
  sub_23EC2E7A4();
  sub_23EC2DF70();
  sub_23EC2E7B0();
  v15 = sub_23EC2E78C();
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v5, v39);
  if (v17 >> 60 == 15)
  {
    if (qword_256DB71A0 != -1)
      swift_once();
    v18 = sub_23EC2E684();
    __swift_project_value_buffer(v18, (uint64_t)qword_256DC7678);
    v19 = sub_23EC2E66C();
    v20 = sub_23EC2EA08();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_23EB9F000, v19, v20, "String encoding failed. Returning empty string", v21, 2u);
      MEMORY[0x24265B940](v21, -1, -1);
    }

    v22 = 0;
    v23 = 0xE000000000000000;
  }
  else
  {
    v22 = sub_23EC2E2C4();
    v23 = v24;
    sub_23EBA4CE0(v15, v17);
  }
  v25 = *(_QWORD *)(v0 + 144);
  v26 = *(__SecKey **)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  v27 = sub_23EC0E448(v22, v23);
  v29 = v28;
  v30 = sub_23EC0E944(v27, v28, v26);
  v32 = *(void **)(v0 + 128);
  if (v25)
  {
    (*(void (**)(_QWORD, uint64_t))(v36 + 8))(*(_QWORD *)(v0 + 56), v37);
    swift_bridgeObjectRelease();
    sub_23EBA3EDC(v27, v29);

    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = v30;
    v34 = v31;
    sub_23EBA3EDC(v27, v29);
    sub_23EC2E2C4();
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EBA3EDC(v33, v34);

  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC0E448(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8D98);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_23EC0EDFC((uint64_t)v14);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_23EC2EBA0();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_23EC0F4F0(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_23EC2E858();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_23EC0F554(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_23EC0EE3C();
    __asm { BR              X12 }
  }
  sub_23EC0F64C(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_23EC2E180();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_23EC0E944(uint64_t a1, uint64_t a2, __SecKey *a3)
{
  const __CFString *v4;
  const __CFData *v5;
  CFDataRef Signature;
  const __CFData *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  CFErrorRef v14;
  CFErrorRef *v15;
  uint64_t v16;
  CFErrorRef v17;
  CFErrorRef *v18;
  uint64_t v19;
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  error[0] = 0;
  v4 = (const __CFString *)*MEMORY[0x24BDE92D0];
  v5 = (const __CFData *)sub_23EC2E2B8();
  Signature = SecKeyCreateSignature(a3, v4, v5, error);

  if (Signature)
  {
    v7 = Signature;
    v8 = sub_23EC2E2D0();

  }
  else
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC76D8);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138412290;
      swift_beginAccess();
      v14 = error[0];
      if (error[0])
      {
        type metadata accessor for CFError(0);
        sub_23EC0ED70();
        swift_allocError();
        *v15 = v14;
        v16 = _swift_stdlib_bridgeErrorToNSError();
        sub_23EC2EA68();
      }
      else
      {
        sub_23EC2EA68();
        v16 = 0;
      }
      *v13 = v16;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to Create Signature: %@", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v13, -1, -1);
      MEMORY[0x24265B940](v12, -1, -1);
    }

    swift_beginAccess();
    v17 = error[0];
    if (error[0])
    {
      type metadata accessor for CFError(0);
      sub_23EC0ED70();
      v8 = swift_allocError();
      *v18 = v17;
    }
    else
    {
      v8 = 0;
    }
    sub_23EC0EDB8();
    swift_allocError();
    *(_QWORD *)v19 = v8;
    *(_BYTE *)(v19 + 8) = 1;
    swift_willThrow();
  }
  return v8;
}

uint64_t sub_23EC0EC20(uint64_t (*a1)(void))
{
  uint64_t result;

  result = a1();
  if (result)
    return _swift_stdlib_bridgeErrorToNSError();
  return result;
}

uint64_t sub_23EC0EC48(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23EC2E894();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24265AE78](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_23EC0ECC0(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_23EC2EA68();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

unint64_t sub_23EC0ED70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB8D88;
  if (!qword_256DB8D88)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BDCFD90], v1);
    atomic_store(result, (unint64_t *)&qword_256DB8D88);
  }
  return result;
}

unint64_t sub_23EC0EDB8()
{
  unint64_t result;

  result = qword_256DB8D90;
  if (!qword_256DB8D90)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC362A4, &type metadata for BAASigningError);
    atomic_store(result, (unint64_t *)&qword_256DB8D90);
  }
  return result;
}

uint64_t sub_23EC0EDFC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23EC0EE3C()
{
  __asm { BR              X11 }
}

_QWORD *sub_23EC0EE9C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_23EC0F12C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_23EC0F338(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_23EC0F3F8((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_23EC0F470((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_23EC0F1A0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_23EC0F204(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_23EC2E0F0();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_23EC2E114();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_23EC2E108();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_23EC0F2B0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_23EC2EB58();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23EC0F338(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_23EC0F3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23EC2E120();
  swift_allocObject();
  result = sub_23EC2E0E4();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23EC2E294();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23EC0F470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23EC2E120();
  swift_allocObject();
  result = sub_23EC2E0E4();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_23EC0F4F0(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_23EC0F338(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_23EC0F3F8((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_23EC0F470((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_23EC0F554(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_23EC2E120();
      swift_allocObject();
      sub_23EC2E0FC();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_23EC2E294();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_23EC0F5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_23EC0F1A0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_23EC0F664, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_23EC0F64C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23EC0F664@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23EC0F2B0(a1, a2);
}

uint64_t sub_23EC0F680(unint64_t a1)
{
  return sub_23EC0F698(a1);
}

uint64_t sub_23EC0F68C(unint64_t a1)
{
  return sub_23EC0F698(a1);
}

uint64_t sub_23EC0F698(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v1 = a1;
  v12 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_23EC2EBC4();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x24265B16C](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_23EC2EBAC();
        sub_23EC2EBD0();
        sub_23EC2EBDC();
        sub_23EC2EBB8();
        if (v4 == v2)
          return v12;
      }
      __break(1u);
    }
    else
    {
      v5 = 0;
      v6 = v1 + 32;
      while (1)
      {
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v8 = *(void **)(v6 + 8 * v5);
        objc_opt_self();
        v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v9;
        v10 = v8;
        sub_23EC2EBAC();
        sub_23EC2EBD0();
        sub_23EC2EBDC();
        sub_23EC2EBB8();
        ++v5;
        if (v7 == v2)
          return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_23EC2EC0C();
    swift_bridgeObjectRelease();
    sub_23EC2EBC4();
    swift_bridgeObjectRetain();
    v2 = sub_23EC2EC0C();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_23EC0F878(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(a1 + 16);
  sub_23EC2EBC4();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    sub_23EBA55A8(i, (uint64_t)v5);
    type metadata accessor for SecCertificate(0);
    if (!swift_dynamicCast())
      break;
    sub_23EC2EBAC();
    sub_23EC2EBD0();
    sub_23EC2EBDC();
    sub_23EC2EBB8();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

void sub_23EC0F970(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23EC0F9A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;
  id v30;
  id v31;

  *(_QWORD *)(v29 - 48) = 0;
  *(_QWORD *)(v29 - 40) = 0xE000000000000000;
  v30 = v28;
  sub_23EC2EB4C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v29 - 48) = 0xD000000000000021;
  *(_QWORD *)(v29 - 40) = 0x800000023EC3A4A0;
  if (v28)
  {
    swift_getErrorValue();
    v31 = v28;
    sub_23EC2ED74();
    sub_23EBBC82C(v28, 0);
  }
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  sub_23EBBC82C(v28, 0);
  return *(_QWORD *)(v29 - 48);
}

uint64_t sub_23EC0FC38()
{
  return swift_task_switch();
}

uint64_t sub_23EC0FC4C()
{
  _QWORD *v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  SecAccessControlRef v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB87D8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC32580;
  *(_QWORD *)(inited + 32) = sub_23EC2E780();
  *(_QWORD *)(inited + 40) = v2;
  v3 = sub_23EC11014();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 80) = sub_23EC2E780();
  *(_QWORD *)(inited + 88) = v5;
  v6 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 96) = 1;
  *(_QWORD *)(inited + 128) = sub_23EC2E780();
  v7 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 168) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = 60;
  *(_QWORD *)(inited + 176) = sub_23EC2E780();
  *(_QWORD *)(inited + 216) = v7;
  *(_QWORD *)(inited + 184) = v9;
  *(_QWORD *)(inited + 192) = 1440;
  *(_QWORD *)(inited + 224) = sub_23EC2E780();
  *(_QWORD *)(inited + 232) = v10;
  v11 = MEMORY[0x24265B484]();
  *(_QWORD *)(inited + 264) = v6;
  *(_BYTE *)(inited + 240) = v11 ^ 1;
  *(_QWORD *)(inited + 272) = sub_23EC2E780();
  *(_QWORD *)(inited + 280) = v12;
  v13 = sub_23EC110E4();
  type metadata accessor for SecAccessControl(0);
  *(_QWORD *)(inited + 312) = v14;
  *(_QWORD *)(inited + 288) = v13;
  *(_QWORD *)(inited + 320) = sub_23EC2E780();
  *(_QWORD *)(inited + 328) = v15;
  *(_QWORD *)(inited + 360) = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8470);
  *(_QWORD *)(inited + 336) = MEMORY[0x24BEE4AF8];
  v16 = sub_23EBA740C(inited);
  v0[51] = v16;
  v17 = swift_task_alloc();
  v0[52] = v17;
  *(_QWORD *)(v17 + 16) = v16;
  v18 = (_QWORD *)swift_task_alloc();
  v0[53] = v18;
  *v18 = v0;
  v18[1] = sub_23EC0FEFC;
  return sub_23EC2ED50();
}

uint64_t sub_23EC0FEFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_23EC0FF70()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
}

uint64_t sub_23EC0FF84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC0FFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_23EC2EA2C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23EC2EA20();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  v6 = sub_23EC2E69C();
  MEMORY[0x24BDAC7A8](v6);
  sub_23EBF5F78();
  sub_23EC2E690();
  v8[1] = MEMORY[0x24BEE4AF8];
  sub_23EBC0AD4((unint64_t *)&qword_256DB8878, v5, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8880);
  sub_23EC11950();
  sub_23EC2EAEC();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_23EC2EA38();
  qword_256DC7670 = result;
  return result;
}

void sub_23EC1016C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DB0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  if (qword_256DB7190 != -1)
    swift_once();
  sub_23EC10304(a2);
  v7 = (void *)sub_23EC2E714();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_23EC1145C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23EC10B58;
  aBlock[3] = &block_descriptor_1;
  v10 = _Block_copy(aBlock);
  swift_release();
  DeviceIdentityIssueClientCertificateWithCompletion();
  _Block_release(v10);

}

uint64_t sub_23EC10304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7928);
    v2 = sub_23EC2EC30();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_23EBA55A8(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_23EBB2080(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_23EBB2080(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_23EBB2080(v36, v37);
    sub_23EBB2080(v37, &v33);
    result = sub_23EC2EAF8();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_23EBB2080(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_23EC11948();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_23EC106C8(void *a1, uint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;

  if (a1 && a2)
  {
    v5 = a1;
    v6 = sub_23EC0F878(a2);
    if (v6)
    {
      v7 = v6;
      if (v6 >> 62)
      {
        if (sub_23EC2EC0C())
          goto LABEL_6;
      }
      else if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        v8 = sub_23EC114CC(v7);
        v10 = v9;
        swift_bridgeObjectRelease();
        sub_23EC2E2C4();
        sub_23EBA3EDC(v8, v10);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DB0);
        return sub_23EC2E990();
      }

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
  if (qword_256DB71D8 != -1)
    swift_once();
  v12 = sub_23EC2E684();
  __swift_project_value_buffer(v12, (uint64_t)qword_256DC76D8);
  v13 = a3;
  v14 = a3;
  v15 = sub_23EC2E66C();
  v16 = sub_23EC2EA08();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v17 = 138412290;
    if (a3)
    {
      v19 = a3;
      v20 = _swift_stdlib_bridgeErrorToNSError();
      sub_23EC2EA68();
    }
    else
    {
      sub_23EC2EA68();
      v20 = 0;
    }
    *v18 = v20;

    _os_log_impl(&dword_23EB9F000, v15, v16, "Unable to Issue Client Certificate. underlying error: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v18, -1, -1);
    MEMORY[0x24265B940](v17, -1, -1);
  }
  else
  {

  }
  sub_23EC0EDB8();
  v21 = (void *)swift_allocError();
  *(_QWORD *)v22 = a3;
  *(_BYTE *)(v22 + 8) = 2;
  v23 = a3;
  swift_willThrow();
  if (qword_256DB71D8 != -1)
    swift_once();
  v24 = sub_23EC2E684();
  __swift_project_value_buffer(v24, (uint64_t)qword_256DC76D8);
  v25 = v21;
  v26 = v21;
  v27 = sub_23EC2E66C();
  v28 = sub_23EC2EA08();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v29 = 138412290;
    v31 = v21;
    v32 = _swift_stdlib_bridgeErrorToNSError();
    sub_23EC2EA68();
    *v30 = v32;

    _os_log_impl(&dword_23EB9F000, v27, v28, "Error while generating BAA key and certificate %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v30, -1, -1);
    MEMORY[0x24265B940](v29, -1, -1);
  }
  else
  {

  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DB0);
  return sub_23EC2E984();
}

uint64_t sub_23EC10B58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void (*v6)(void *, uint64_t, void *);
  uint64_t v7;
  id v8;
  id v9;

  v6 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  if (a3)
    v7 = sub_23EC2E930();
  else
    v7 = 0;
  swift_retain();
  v8 = a2;
  v9 = a4;
  v6(a2, v7, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_23EC10BF4()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (void *)sub_23EC2E2B8();
  v5[0] = 0;
  v1 = objc_msgSend(v0, sel_compressedDataUsingAlgorithm_error_, 3, v5);

  v2 = v5[0];
  if (v1)
  {
    v3 = (void *)sub_23EC2E2D0();

  }
  else
  {
    v3 = v2;
    sub_23EC2E1D4();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_23EC10CC4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DC0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC11C94();
  sub_23EC2EDE0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
  sub_23EBAFDF8(&qword_25433FB28, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_23EC2ED08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_23EC10DE0()
{
  uint64_t v0;

  sub_23EC0F970(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

uint64_t sub_23EC10DEC()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC10E38()
{
  return sub_23EC2E744();
}

uint64_t sub_23EC10E4C()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC10E94@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23EC2EC48();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_23EC10EE4(_QWORD *a1@<X8>)
{
  *a1 = 0x7374726563;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_23EC10EFC()
{
  return 0x7374726563;
}

uint64_t sub_23EC10F10@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23EC2EC48();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_23EC10F64()
{
  sub_23EC11C94();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC10F8C()
{
  sub_23EC11C94();
  return sub_23EC2EE04();
}

_QWORD *sub_23EC10FB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EC11CD8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EC10FDC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EC10CC4(a1, *v1);
}

uint64_t sub_23EC10FF4(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

unint64_t sub_23EC11014()
{
  id v0;
  id v1;

  sub_23EC2EB4C();
  swift_bridgeObjectRelease();
  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_processName);

  sub_23EC2E780();
  sub_23EC2E834();
  swift_bridgeObjectRelease();
  return 0xD00000000000002ELL;
}

SecAccessControlRef sub_23EC110E4()
{
  SecAccessControlRef v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  CFErrorRef v6;
  CFErrorRef *v7;
  uint64_t v8;
  CFErrorRef v9;
  uint64_t v10;
  CFErrorRef *v11;
  uint64_t v12;
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  error[0] = 0;
  v0 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x24BDE8F70], 0x40000000uLL, error);
  if (!v0)
  {
    if (qword_256DB71D8 != -1)
      swift_once();
    v1 = sub_23EC2E684();
    __swift_project_value_buffer(v1, (uint64_t)qword_256DC76D8);
    v2 = sub_23EC2E66C();
    v3 = sub_23EC2EA08();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v4 = 138412290;
      swift_beginAccess();
      v6 = error[0];
      if (error[0])
      {
        type metadata accessor for CFError(0);
        sub_23EBC0AD4((unint64_t *)&qword_256DB8D88, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
        swift_allocError();
        *v7 = v6;
        v8 = _swift_stdlib_bridgeErrorToNSError();
        sub_23EC2EA68();
      }
      else
      {
        sub_23EC2EA68();
        v8 = 0;
      }
      *v5 = v8;
      _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to create access Control object for BAA %@", v4, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v5, -1, -1);
      MEMORY[0x24265B940](v4, -1, -1);
    }

    swift_beginAccess();
    v9 = error[0];
    if (error[0])
    {
      type metadata accessor for CFError(0);
      sub_23EBC0AD4((unint64_t *)&qword_256DB8D88, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
      v10 = swift_allocError();
      *v11 = v9;
    }
    else
    {
      v10 = 0;
    }
    sub_23EC0EDB8();
    swift_allocError();
    *(_QWORD *)v12 = v10;
    *(_BYTE *)(v12 + 8) = 0;
    swift_willThrow();
  }
  return v0;
}

uint64_t sub_23EC113B0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7940);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23EC113F0(uint64_t a1)
{
  uint64_t v1;

  sub_23EC1016C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23EC113F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DB0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_23EC1145C(void *a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DB0);
  return sub_23EC106C8(a1, a2, a3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_23EC114CC(unint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint8_t *v5;
  uint64_t result;
  uint64_t v7;
  __SecCertificate *v8;
  CFDataRef v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id *v19;
  __SecCertificate *v20;
  CFDataRef v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_23EC2EC0C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = (uint8_t *)MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v42 = MEMORY[0x24BEE4AF8];
    result = sub_23EBAECC0(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v5 = (uint8_t *)v42;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v7 = 0;
      do
      {
        v8 = (__SecCertificate *)MEMORY[0x24265B16C](v7, a1);
        v9 = SecCertificateCopyData(v8);
        v10 = sub_23EC2E2D0();
        v12 = v11;

        v13 = sub_23EC2E2C4();
        v15 = v14;
        sub_23EBA3EDC(v10, v12);
        swift_unknownObjectRelease();
        v17 = *(_QWORD *)(v42 + 16);
        v16 = *(_QWORD *)(v42 + 24);
        if (v17 >= v16 >> 1)
          sub_23EBAECC0(v16 > 1, v17 + 1, 1);
        ++v7;
        *(_QWORD *)(v42 + 16) = v17 + 1;
        v18 = v42 + 16 * v17;
        *(_QWORD *)(v18 + 32) = v13;
        *(_QWORD *)(v18 + 40) = v15;
      }
      while (v4 != v7);
    }
    else
    {
      v19 = (id *)(a1 + 32);
      do
      {
        v20 = (__SecCertificate *)*v19;
        v21 = SecCertificateCopyData(v20);
        v22 = sub_23EC2E2D0();
        v24 = v23;

        v25 = sub_23EC2E2C4();
        v27 = v26;
        sub_23EBA3EDC(v22, v24);

        v29 = *(_QWORD *)(v42 + 16);
        v28 = *(_QWORD *)(v42 + 24);
        if (v29 >= v28 >> 1)
          sub_23EBAECC0(v28 > 1, v29 + 1, 1);
        *(_QWORD *)(v42 + 16) = v29 + 1;
        v30 = v42 + 16 * v29;
        *(_QWORD *)(v30 + 32) = v25;
        *(_QWORD *)(v30 + 40) = v27;
        ++v19;
        --v4;
      }
      while (v4);
    }
    v2 = v1;
  }
  sub_23EC2DFE8();
  swift_allocObject();
  sub_23EC2DFDC();
  sub_23EC11904();
  v31 = sub_23EC2DFD0();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_256DB71D8 != -1)
      swift_once();
    v35 = sub_23EC2E684();
    __swift_project_value_buffer(v35, (uint64_t)qword_256DC76D8);
    v36 = v2;
    v37 = v2;
    v38 = sub_23EC2E66C();
    v39 = sub_23EC2EA08();
    if (os_log_type_enabled(v38, v39))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v40 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v5 = 138412290;
      v41 = v2;
      v43 = _swift_stdlib_bridgeErrorToNSError();
      sub_23EC2EA68();
      *v40 = v43;

      _os_log_impl(&dword_23EB9F000, v38, v39, "Error while encoding Cert Chain for BAA. %@", v5, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v40, -1, -1);
      MEMORY[0x24265B940](v5, -1, -1);
    }
    else
    {

    }
    swift_willThrow();
  }
  else
  {
    v33 = v31;
    v34 = v32;
    swift_release();
    swift_bridgeObjectRelease();
    v5 = (uint8_t *)sub_23EC10BF4();
    sub_23EBA3EDC(v33, v34);
  }
  return (uint64_t)v5;
}

unint64_t sub_23EC11904()
{
  unint64_t result;

  result = qword_256DB8DB8;
  if (!qword_256DB8DB8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3627C, &type metadata for Attestation);
    atomic_store(result, (unint64_t *)&qword_256DB8DB8);
  }
  return result;
}

uint64_t sub_23EC11948()
{
  return swift_release();
}

unint64_t sub_23EC11950()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB8888;
  if (!qword_256DB8888)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8880);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_256DB8888);
  }
  return result;
}

ValueMetadata *type metadata accessor for Attestation()
{
  return &type metadata for Attestation;
}

uint64_t assignWithCopy for BAAValues(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BAAValues(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BAAValues(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BAAValues(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BAAValues()
{
  return &type metadata for BAAValues;
}

uint64_t initializeBufferWithCopyOfBuffer for BAASigningError(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23EBBC818(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for BAASigningError(uint64_t a1)
{
  sub_23EBBC82C(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for BAASigningError(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23EBBC818(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_23EBBC82C(v5, v6);
  return a1;
}

uint64_t assignWithTake for BAASigningError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_23EBBC82C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BAASigningError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BAASigningError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23EC11C54(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_23EC11C6C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BAASigningError()
{
  return &type metadata for BAASigningError;
}

unint64_t sub_23EC11C94()
{
  unint64_t result;

  result = qword_256DB8DC8;
  if (!qword_256DB8DC8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC363E0, &type metadata for Attestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8DC8);
  }
  return result;
}

_QWORD *sub_23EC11CD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8DD0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC11C94();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBAFDF8((unint64_t *)&unk_25433FB30, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for Attestation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EC11E5C + 4 * byte_23EC361E4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EC11E7C + 4 * byte_23EC361E9[v4]))();
}

_BYTE *sub_23EC11E5C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EC11E7C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC11E84(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC11E8C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC11E94(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC11E9C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Attestation.CodingKeys()
{
  return &type metadata for Attestation.CodingKeys;
}

unint64_t sub_23EC11EBC()
{
  unint64_t result;

  result = qword_256DB8DD8;
  if (!qword_256DB8DD8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC363B8, &type metadata for Attestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8DD8);
  }
  return result;
}

unint64_t sub_23EC11F04()
{
  unint64_t result;

  result = qword_256DB8DE0;
  if (!qword_256DB8DE0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC362F0, &type metadata for Attestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8DE0);
  }
  return result;
}

unint64_t sub_23EC11F4C()
{
  unint64_t result;

  result = qword_256DB8DE8;
  if (!qword_256DB8DE8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36318, &type metadata for Attestation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8DE8);
  }
  return result;
}

uint64_t sub_23EC11F94(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;

  v4 = v3;
  if (a3 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    if (!v6)
      return v7;
    v21 = MEMORY[0x24BEE4AF8];
    result = sub_23EBAECC0(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v21;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v10 = MEMORY[0x24265B16C](v9, a3);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 8 * v9 + 32);
        swift_retain();
      }
      v19 = v10;
      a1(v20, &v19);
      if (v4)
      {
        swift_release();
        swift_release();
        return v7;
      }
      v11 = v6;
      swift_release();
      v13 = v20[0];
      v12 = v20[1];
      v21 = v7;
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_23EBAECC0(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v12;
      v6 = v11;
      v17 = v11 == v9;
      v4 = 0;
      if (v17)
        return v7;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    v6 = sub_23EC2EC0C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_23EC12134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  _QWORD v20[4];
  uint64_t v21;

  v4 = v3;
  v19[0] = a1;
  v19[1] = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F920);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_23EBAECF8(0, v10, 0);
    v11 = v21;
    v12 = (uint64_t *)(a3 + 56);
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = *v12;
      v20[0] = *(v12 - 3);
      v20[1] = v13;
      v20[2] = v14;
      v20[3] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(_QWORD *))v19[0])(v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v11;
      v17 = *(_QWORD *)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_23EBAECF8(v16 > 1, v17 + 1, 1);
        v11 = v21;
      }
      v12 += 4;
      *(_QWORD *)(v11 + 16) = v17 + 1;
      sub_23EC13450((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17);
      if (!--v10)
        return v11;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

void sub_23EC122C0(char *a1)
{
  sub_23EBC0C84(*a1);
}

void sub_23EC122CC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EC1231C()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EC12374()
{
  __asm { BR              X10 }
}

uint64_t sub_23EC123B4()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EC123F8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EC12444()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC1249C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC135FC();
  *a1 = result;
  return result;
}

uint64_t sub_23EC124C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23EC124FC + 4 * byte_23EC3644C[*v0]))();
}

void sub_23EC124FC(_QWORD *a1@<X8>)
{
  *a1 = 7759204;
  a1[1] = 0xE300000000000000;
}

void sub_23EC12510(_QWORD *a1@<X8>)
{
  *a1 = 1953654115;
  a1[1] = 0xE400000000000000;
}

void sub_23EC12524(_QWORD *a1@<X8>)
{
  *a1 = 1685025392;
  a1[1] = 0xE400000000000000;
}

void sub_23EC12538(_QWORD *a1@<X8>)
{
  *a1 = &unk_250F4EE68;
}

uint64_t sub_23EC12548()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBE8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23EC36690;
  *(_QWORD *)(v0 + 32) = swift_getKeyPath();
  *(_QWORD *)(v0 + 40) = swift_getKeyPath();
  *(_QWORD *)(v0 + 48) = swift_getKeyPath();
  *(_QWORD *)(v0 + 56) = swift_getKeyPath();
  *(_QWORD *)(v0 + 64) = swift_getKeyPath();
  *(_QWORD *)(v0 + 72) = swift_getKeyPath();
  *(_QWORD *)(v0 + 80) = swift_getKeyPath();
  *(_QWORD *)(v0 + 88) = swift_getKeyPath();
  *(_QWORD *)(v0 + 96) = swift_getKeyPath();
  result = sub_23EC2E948();
  qword_25433FC10 = v0;
  return result;
}

uint64_t sub_23EC12638(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[12];

  v2 = *(_OWORD *)(a2 + 184);
  v9[8] = *(_OWORD *)(a2 + 168);
  v9[9] = v2;
  v3 = *(_OWORD *)(a2 + 216);
  v9[10] = *(_OWORD *)(a2 + 200);
  v9[11] = v3;
  v4 = *(_OWORD *)(a2 + 120);
  v9[4] = *(_OWORD *)(a2 + 104);
  v9[5] = v4;
  v5 = *(_OWORD *)(a2 + 152);
  v9[6] = *(_OWORD *)(a2 + 136);
  v9[7] = v5;
  v6 = *(_OWORD *)(a2 + 56);
  v9[0] = *(_OWORD *)(a2 + 40);
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 88);
  v9[2] = *(_OWORD *)(a2 + 72);
  v9[3] = v7;
  sub_23EBBC884((uint64_t)v9);
  swift_getAtKeyPath();
  return sub_23EBBC95C((uint64_t)v9);
}

uint64_t sub_23EC12720()
{
  __CFString *v0;
  __CFString *v1;
  CFPropertyListRef v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11[2];

  v0 = (__CFString *)sub_23EC2E774();
  v1 = (__CFString *)sub_23EC2E774();
  v2 = CFPreferencesCopyAppValue(v0, v1);

  if (v2 && (swift_dynamicCast() & 1) != 0)
  {
    v4 = v11[0];
    v3 = v11[1];
    if (qword_256DB71D0 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC76C0);
    swift_bridgeObjectRetain_n();
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA14();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v11[0] = v9;
      *(_DWORD *)v8 = 136315138;
      swift_bridgeObjectRetain();
      sub_23EBAE6D4(v4, v3, v11);
      sub_23EC2EA68();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23EB9F000, v6, v7, "Environment override detected. Using user set env value : %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v9, -1, -1);
      MEMORY[0x24265B940](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    __asm { BR              X10; loc_23EC1297C }
  }
  return 3;
}

uint64_t sub_23EC12BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __CFString *v11;
  __CFString *v12;
  int AppBooleanValue;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD v36[3];
  Boolean keyExistsAndHasValidFormat[8];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UtilityServicesConfigurationsModel();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  keyExistsAndHasValidFormat[0] = 0;
  v11 = (__CFString *)sub_23EC2E774();
  v12 = (__CFString *)sub_23EC2E774();
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v11, v12, keyExistsAndHasValidFormat);

  if (keyExistsAndHasValidFormat[0] && AppBooleanValue)
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_25433FC80);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA14();
    if (!os_log_type_enabled(v15, v16))
      goto LABEL_13;
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    v18 = "BAA Auth disabled via defaults override";
LABEL_12:
    _os_log_impl(&dword_23EB9F000, v15, v16, v18, v17, 2u);
    MEMORY[0x24265B940](v17, -1, -1);
LABEL_13:

    return 0;
  }
  sub_23EBD2A34((uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_23EC133F4((uint64_t)v6);
    if (qword_25433FAE8 != -1)
      swift_once();
    v19 = sub_23EC2E684();
    __swift_project_value_buffer(v19, (uint64_t)qword_25433FC80);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (!os_log_type_enabled(v15, v16))
      goto LABEL_13;
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    v18 = "Unable to retrieve config to check if URL required BAA Auth";
    goto LABEL_12;
  }
  v21 = sub_23EBBC840((uint64_t)v6, (uint64_t)v10);
  if (qword_25433FA68 != -1)
    v21 = swift_once();
  v22 = qword_25433FC10;
  MEMORY[0x24BDAC7A8](v21);
  v36[-2] = v10;
  swift_bridgeObjectRetain();
  v23 = sub_23EC11F94((void (*)(_QWORD *__return_ptr, uint64_t *))sub_23EC13434, (uint64_t)&v36[-4], v22);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    sub_23EBAFA74();
    v25 = (uint64_t *)(v23 + 40);
    while (1)
    {
      v26 = *(v25 - 1);
      v27 = *v25;
      *(_QWORD *)keyExistsAndHasValidFormat = a1;
      v38 = a2;
      v36[1] = v26;
      v36[2] = v27;
      swift_bridgeObjectRetain();
      if ((sub_23EC2EAD4() & 1) != 0)
        break;
      v25 += 2;
      swift_bridgeObjectRelease();
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (qword_25433FAE8 != -1)
      swift_once();
    v32 = sub_23EC2E684();
    __swift_project_value_buffer(v32, (uint64_t)qword_25433FC80);
    v33 = sub_23EC2E66C();
    v34 = sub_23EC2EA14();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_23EB9F000, v33, v34, "API Path requires BAA Auth Headers", v35, 2u);
      MEMORY[0x24265B940](v35, -1, -1);
    }

    sub_23EBBCA34((uint64_t)v10);
    return 1;
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    if (qword_25433FAE8 != -1)
      swift_once();
    v28 = sub_23EC2E684();
    __swift_project_value_buffer(v28, (uint64_t)qword_25433FC80);
    v29 = sub_23EC2E66C();
    v30 = sub_23EC2EA14();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23EB9F000, v29, v30, "API Path does not require BAA Auth Header", v31, 2u);
      MEMORY[0x24265B940](v31, -1, -1);
    }

    sub_23EBBCA34((uint64_t)v10);
    return 0;
  }
}

uint64_t sub_23EC1313C()
{
  __CFString *v0;
  __CFString *v1;
  int AppBooleanValue;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  keyExistsAndHasValidFormat = 0;
  v0 = (__CFString *)sub_23EC2E774();
  v1 = (__CFString *)sub_23EC2E774();
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (keyExistsAndHasValidFormat && AppBooleanValue)
  {
    if (qword_25433FAE8 != -1)
      swift_once();
    v3 = sub_23EC2E684();
    __swift_project_value_buffer(v3, (uint64_t)qword_25433FC80);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA14();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      v7 = "HMAC Authentication enforced by Defaults override.";
LABEL_12:
      _os_log_impl(&dword_23EB9F000, v4, v5, v7, v6, 2u);
      v9 = 1;
LABEL_18:
      MEMORY[0x24265B940](v6, -1, -1);
      goto LABEL_20;
    }
  }
  else
  {
    if (sub_23EC12720() > 2u)
    {
      if (qword_25433FAE8 != -1)
        swift_once();
      v10 = sub_23EC2E684();
      __swift_project_value_buffer(v10, (uint64_t)qword_25433FC80);
      v4 = sub_23EC2E66C();
      v11 = sub_23EC2EA14();
      if (!os_log_type_enabled(v4, v11))
      {
        v9 = 0;
        goto LABEL_20;
      }
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23EB9F000, v4, v11, "Current environment does not requires HMAC Authentication.", v6, 2u);
      v9 = 0;
      goto LABEL_18;
    }
    if (qword_25433FAE8 != -1)
      swift_once();
    v8 = sub_23EC2E684();
    __swift_project_value_buffer(v8, (uint64_t)qword_25433FC80);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA14();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      v7 = "Current environment requires HMAC Authentication.";
      goto LABEL_12;
    }
  }
  v9 = 1;
LABEL_20:

  return v9;
}

uint64_t sub_23EC133F4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433FA30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23EC13434(uint64_t a1)
{
  uint64_t v1;

  return sub_23EC12638(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23EC13450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for Environment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EC134E4 + 4 * byte_23EC36465[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EC13518 + 4 * byte_23EC36460[v4]))();
}

uint64_t sub_23EC13518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC13520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC13528);
  return result;
}

uint64_t sub_23EC13534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC1353CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EC13540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC13548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

unint64_t sub_23EC13568()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256DB8DF0;
  if (!qword_256DB8DF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB8DF8);
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256DB8DF0);
  }
  return result;
}

unint64_t sub_23EC135B8()
{
  unint64_t result;

  result = qword_256DB8E00;
  if (!qword_256DB8E00)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36660, &type metadata for Environment);
    atomic_store(result, (unint64_t *)&qword_256DB8E00);
  }
  return result;
}

uint64_t sub_23EC135FC()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_23EC13644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v26 = a3;
  v5 = sub_23EC2E1E0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23EC2E264();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E240();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_23EBA3038((uint64_t)v11, &qword_25433F930);
LABEL_11:
    v27 = a1;
    v28 = a2;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCD7A0], v5);
    sub_23EBAFA74();
    sub_23EC2E258();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(v15, v11, v12);
  sub_23EC2E234();
  v17 = v16;
  swift_bridgeObjectRelease();
  if (!v17 || (sub_23EC2E204(), v19 = v18, swift_bridgeObjectRelease(), !v19))
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    goto LABEL_11;
  }
  if (qword_25433FAF8 != -1)
    swift_once();
  v20 = sub_23EC2E684();
  __swift_project_value_buffer(v20, (uint64_t)qword_25433FC98);
  v21 = sub_23EC2E66C();
  v22 = sub_23EC2EA14();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_23EB9F000, v21, v22, "Full URL Path noticed in path component", v23, 2u);
    MEMORY[0x24265B940](v23, -1, -1);
  }

  return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v26, v15, v12);
}

uint64_t sub_23EC138EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;

  v5 = v4;
  LODWORD(v59) = a3;
  v57 = a2;
  v58 = a1;
  v60 = a4;
  v6 = sub_23EC2E03C();
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v66 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v53 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F920);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v53 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F928);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23EC2E0CC();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v5;
  sub_23EC2E078();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_23EBA3038((uint64_t)v21, &qword_25433F928);
    v27 = sub_23EC2E264();
    v28 = v60;
    v29 = *(_QWORD *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v60, v5, v27);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v28, 0, 1, v27);
  }
  else
  {
    v31 = v59;
    v61 = v16;
    v62 = v18;
    v55 = v26;
    v56 = v23;
    v63 = v11;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
    v32 = sub_23EC2E06C();
    if (v32)
    {
      v33 = sub_23EC13E88(v32, v58, v57 & 1, v31 & 1);
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = v25;
      v59 = v22;
      MEMORY[0x24BDAC7A8](0);
      *((_BYTE *)&v53 - 16) = v57 & 1;
      *(&v53 - 1) = v55;
      v34 = sub_23EC12134((uint64_t)sub_23EC1496C, (uint64_t)(&v53 - 4), v58);
      v35 = *(_QWORD *)(v34 + 16);
      if (v35)
      {
        v36 = v13;
        v37 = *(unsigned __int8 *)(v13 + 80);
        v58 = v34;
        v38 = v34 + ((v37 + 32) & ~v37);
        v39 = *(_QWORD *)(v36 + 72);
        v33 = MEMORY[0x24BEE4AF8];
        v41 = (uint64_t)v62;
        v40 = v63;
        v42 = (uint64_t)v61;
        v43 = v65;
        do
        {
          v44 = v33;
          sub_23EC1498C(v38, v41);
          sub_23EC09238(v41, v42, &qword_25433F920);
          v45 = v42;
          v46 = v42;
          v47 = v64;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1, v64) == 1)
          {
            sub_23EBA3038(v46, &qword_25433F920);
            v42 = v46;
            v33 = v44;
          }
          else
          {
            v48 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
            v48(v40, v46, v47);
            v48(v66, (uint64_t)v40, v47);
            v33 = v44;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v33 = sub_23EC219CC(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
            v50 = *(_QWORD *)(v33 + 16);
            v49 = *(_QWORD *)(v33 + 24);
            if (v50 >= v49 >> 1)
              v33 = sub_23EC219CC(v49 > 1, v50 + 1, 1, v33);
            *(_QWORD *)(v33 + 16) = v50 + 1;
            v48((char *)(v33+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v50), (uint64_t)v66, v47);
            v41 = (uint64_t)v62;
            v40 = v63;
            v42 = (uint64_t)v61;
          }
          v38 += v39;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v33 = MEMORY[0x24BEE4AF8];
      }
      v22 = v59;
      v25 = v54;
    }
    v51 = v56;
    if (!*(_QWORD *)(v33 + 16))
      swift_bridgeObjectRelease();
    sub_23EC2E048();
    sub_23EC2E0A8();
    if (v52)
      sub_23EC2E060();
    sub_23EC2E084();
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v25, v22);
  }
}

void sub_23EC13D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  v0 = sub_23EC2E018();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v2, qword_25433FC20);
  __swift_project_value_buffer(v0, (uint64_t)qword_25433FC20);
  sub_23EC2DFF4();
  v5 = sub_23EC2E000();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v8 = (void *)sub_23EC2E2B8();
  v9 = objc_msgSend((id)objc_opt_self(), sel_characterSetWithBitmapRepresentation_, v8);
  sub_23EBA3EDC(v5, v7);

  v10 = (void *)sub_23EC2E774();
  objc_msgSend(v9, sel_removeCharactersInString_, v10);

  sub_23EC2E00C();
}

uint64_t sub_23EC13E88(unint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  int64_t *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;

  v88 = a4;
  v92 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E08);
  MEMORY[0x24BDAC7A8](v6);
  v87 = (char *)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E10);
  v97 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v95 = (char *)v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E18);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD *)((char *)v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (_QWORD *)((char *)v83 - v14);
  v16 = sub_23EC2E03C();
  v101 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v85 = (char *)v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v84 = (char *)v83 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v86 = (uint64_t)v83 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v100 = (char *)v83 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v83 - v25;
  v104 = a1;
  v91 = *(_QWORD *)(a2 + 16);
  if (!v91)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  v90 = a2 + 32;
  swift_bridgeObjectRetain();
  v83[1] = a2;
  swift_bridgeObjectRetain();
  v27 = 0;
  v98 = v16;
  v93 = v26;
  while (2)
  {
    v28 = (uint64_t *)(v90 + 32 * v27);
    v30 = *v28;
    v29 = v28[1];
    v31 = v28[3];
    if ((v92 & 1) != 0)
    {
      v96 = v28[2];
      v102 = v30;
      v103 = v29;
      v32 = qword_25433FAB0;
      v99 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v32 != -1)
        swift_once();
      v33 = sub_23EC2E018();
      v34 = __swift_project_value_buffer(v33, (uint64_t)qword_25433FC20);
      sub_23EBAFA74();
      v89 = v34;
      v30 = sub_23EC2EAA4();
      v36 = v35;
      swift_bridgeObjectRelease();
      if (!v36)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v94 = v27;
      v102 = v96;
      v103 = v31;
      sub_23EC2EAA4();
      swift_bridgeObjectRelease();
      v37 = v36;
    }
    else
    {
      v94 = v27;
      v38 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = v38;
    }
    v99 = v37;
    sub_23EC2E024();
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(v104 + 16);
    v96 = v104;
    result = swift_bridgeObjectRetain();
    v41 = 0;
    v42 = v101;
    if (!v39)
    {
LABEL_12:
      v43 = 1;
      v41 = v39;
      goto LABEL_15;
    }
    while (1)
    {
      if (v41 >= *(_QWORD *)(v96 + 16))
      {
        __break(1u);
        goto LABEL_44;
      }
      v44 = v96
          + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
          + *(_QWORD *)(v42 + 72) * v41;
      v45 = v42;
      v46 = &v95[*(int *)(v8 + 48)];
      (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v46, v44, v16);
      v47 = (char *)v13 + *(int *)(v8 + 48);
      *v13 = v41;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v47, v46, v16);
      v43 = 0;
      ++v41;
LABEL_15:
      v48 = v97;
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v13, v43, 1, v8);
      sub_23EC09238((uint64_t)v13, (uint64_t)v15, &qword_256DB8E18);
      if ((*(unsigned int (**)(int64_t *, uint64_t, uint64_t))(v48 + 48))(v15, 1, v8) == 1)
        break;
      v49 = *v15;
      v50 = v15;
      v51 = (char *)v15 + *(int *)(v8 + 48);
      v52 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
      v52(v100, v51, v16);
      if (sub_23EC2E030() == v30 && v53 == v99)
      {
        swift_bridgeObjectRelease();
        v27 = v94;
LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v59 = v86;
        sub_23EC14830(v49, v86);
        v60 = v101;
        v61 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v62 = v59;
        v63 = v98;
        v61(v62, v98);
        result = ((uint64_t (*)(char *, uint64_t))v61)(v100, v63);
        v64 = v104;
        v65 = *(_QWORD *)(v104 + 16);
        if (v49 >= v65)
        {
          v69 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
          if ((v88 & 1) != 0)
          {
            v70 = (uint64_t)v87;
            v71 = v93;
            v72 = v98;
            v69(v87, v93, v98);
            sub_23EC149D4(0, 0, v70);
            v61((uint64_t)v71, v72);
            v16 = v72;
            v15 = v50;
          }
          else
          {
            v79 = v93;
            v69(v84, v93, v98);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v64 = sub_23EC219CC(0, v65 + 1, 1, v64);
            v81 = *(_QWORD *)(v64 + 16);
            v80 = *(_QWORD *)(v64 + 24);
            if (v81 >= v80 >> 1)
              v64 = sub_23EC219CC(v80 > 1, v81 + 1, 1, v64);
            *(_QWORD *)(v64 + 16) = v81 + 1;
            v82 = v98;
            v52((char *)(v64+ ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(_QWORD *)(v101 + 72) * v81), v84, v98);
            v104 = v64;
            v61((uint64_t)v79, v82);
            v16 = v82;
            v15 = v50;
          }
          goto LABEL_4;
        }
        if ((v49 & 0x8000000000000000) == 0)
        {
          v15 = v50;
          v66 = (uint64_t)v87;
          v67 = v93;
          v68 = v98;
          (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v87, v93, v98);
          sub_23EC149D4(v49, v49, v66);
          v61((uint64_t)v67, v68);
          v16 = v68;
          goto LABEL_4;
        }
LABEL_44:
        __break(1u);
        return result;
      }
      v54 = sub_23EC2ED38();
      swift_bridgeObjectRelease();
      if ((v54 & 1) != 0)
      {
        v27 = v94;
        goto LABEL_25;
      }
      v42 = v101;
      v16 = v98;
      result = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v100, v98);
      v15 = v50;
      if (v41 == v39)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v101;
    v56 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
    if ((v88 & 1) != 0)
    {
      v57 = (uint64_t)v87;
      v58 = v93;
      v56(v87, v93, v16);
      sub_23EC149D4(0, 0, v57);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v58, v16);
      v27 = v94;
    }
    else
    {
      v73 = v93;
      v56(v85, v93, v16);
      v74 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v74 = sub_23EC219CC(0, *(_QWORD *)(v74 + 16) + 1, 1, v74);
      v27 = v94;
      v76 = *(_QWORD *)(v74 + 16);
      v75 = *(_QWORD *)(v74 + 24);
      if (v76 >= v75 >> 1)
        v74 = sub_23EC219CC(v75 > 1, v76 + 1, 1, v74);
      *(_QWORD *)(v74 + 16) = v76 + 1;
      v77 = v101;
      v78 = v74
          + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
          + *(_QWORD *)(v101 + 72) * v76;
      v16 = v98;
      (*(void (**)(unint64_t, char *, uint64_t))(v101 + 32))(v78, v85, v98);
      v104 = v74;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v16);
    }
LABEL_4:
    if (++v27 != v91)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return v104;
}

uint64_t sub_23EC14680@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if ((a1 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  v3 = qword_25433FAB0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v4 = sub_23EC2E018();
  __swift_project_value_buffer(v4, (uint64_t)qword_25433FC20);
  sub_23EBAFA74();
  sub_23EC2EAA4();
  v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    sub_23EC2EAA4();
    swift_bridgeObjectRelease();
LABEL_7:
    sub_23EC2E024();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = sub_23EC2E03C();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1, v7);
  }
  v9 = sub_23EC2E03C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EC14830@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_23EC22C70(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = sub_23EC2E03C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = sub_23EC2EC3C();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_23EC1496C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23EC14680(*(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_23EC1498C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F920);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EC149D4(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_23EC219CC(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = sub_23EC2E03C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    result = sub_23EC2EC3C();
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  return sub_23EBA3038(a3, &qword_256DB8E08);
}

uint64_t sub_23EC14BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8[27] = a8;
  v8[28] = v13;
  v8[25] = a6;
  v8[26] = a7;
  v8[23] = a4;
  v8[24] = a5;
  v8[21] = a2;
  v8[22] = a3;
  v8[20] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E28);
  v8[29] = swift_task_alloc();
  v9 = type metadata accessor for NetworkError();
  v8[30] = v9;
  v8[31] = *(_QWORD *)(v9 - 8);
  v8[32] = swift_task_alloc();
  v10 = sub_23EC2E3CC();
  v8[33] = v10;
  v8[34] = *(_QWORD *)(v10 - 8);
  v8[35] = swift_task_alloc();
  v8[36] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v8[37] = swift_task_alloc();
  v11 = sub_23EC2DFA0();
  v8[38] = v11;
  v8[39] = *(_QWORD *)(v11 - 8);
  v8[40] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC14CC4()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  v0[41] = v1;
  v0[42] = __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA14();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Verifying TAF OTP....", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }

  v5 = (_QWORD *)swift_task_alloc();
  v0[43] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23EC14DD4;
  return sub_23EC1CA40(v0[37], v0[21], v0[22], v0[23]);
}

uint64_t sub_23EC14DD4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC14E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _BYTE *v7;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA08();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23EB9F000, v4, v5, "Unable to create request URL for TAF Account Verification | OTP.", v6, 2u);
      MEMORY[0x24265B940](v6, -1, -1);
    }

    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v7 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 320), v3, v1);
    sub_23EC0A6EC(0xD000000000000018, 0x800000023EC3A600, (uint8_t *)0xD00000000000002BLL, 0x800000023EC3A620);
    sub_23EC2E3C0();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 352) = v9;
    *v9 = v0;
    v9[1] = sub_23EC15050;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EC15050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[45] = a1;
  v5[46] = a2;
  v5[47] = a3;
  v5[48] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC150C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  int v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, _QWORD);
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  void *v54;
  uint8_t *v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  id v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t (*v78)(void);
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _QWORD *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = *(_QWORD *)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v102 = *(_QWORD *)(v0 + 200);
  v104 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRetain();
  v7 = sub_23EC0C0F0();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23EC2A9C8(v102, v6, v7, v9, v104, v5, 2, v2, v0 + 16);
  sub_23EC2AB0C();
  sub_23EC162CC(v0 + 16);
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = *(id *)(v0 + 376);
    sub_23EC0AFC4(0xD000000000000018, (uint8_t *)0x800000023EC3A650, (unint64_t)objc_msgSend(v11, sel_statusCode), qword_250F4EC80);
    v13 = objc_msgSend(v11, sel_statusCode);
    v14 = (_QWORD *)v0;
    switch((unint64_t)v13)
    {
      case 0x190uLL:
        v15 = sub_23EC2E66C();
        v16 = sub_23EC2EA08();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v17 = 0;
          _os_log_impl(&dword_23EB9F000, v15, v16, "BAD REQUEST | Check request", v17, 2u);
          MEMORY[0x24265B940](v17, -1, -1);
        }
        v18 = v14[46];
        v19 = (void *)v14[47];
        v20 = v14[45];
        v21 = v14[36];
        v22 = v14[33];
        v23 = v14[34];

        sub_23EC16288();
        v24 = (void *)swift_allocError();
        *v25 = 0;
        goto LABEL_37;
      case 0x191uLL:
        v57 = sub_23EC2E66C();
        v58 = sub_23EC2EA08();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v59 = 0;
          _os_log_impl(&dword_23EB9F000, v57, v58, "Unauthorized | Incorrect passcode.", v59, 2u);
          MEMORY[0x24265B940](v59, -1, -1);
        }
        v18 = v14[46];
        v19 = (void *)v14[47];
        v20 = v14[45];
        v21 = v14[36];
        v22 = v14[33];
        v23 = v14[34];

        sub_23EC16288();
        v24 = (void *)swift_allocError();
        v61 = 1;
        goto LABEL_36;
      case 0x192uLL:
      case 0x193uLL:
      case 0x194uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x199uLL:
      case 0x19BuLL:
      case 0x19CuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_22;
      case 0x19AuLL:
        v62 = sub_23EC2E66C();
        v63 = sub_23EC2EA08();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl(&dword_23EB9F000, v62, v63, "Passcode | Expired", v64, 2u);
          MEMORY[0x24265B940](v64, -1, -1);
        }
        v18 = v14[46];
        v19 = (void *)v14[47];
        v20 = v14[45];
        v21 = v14[36];
        v22 = v14[33];
        v23 = v14[34];

        sub_23EC16288();
        v24 = (void *)swift_allocError();
        v61 = 7;
        goto LABEL_36;
      case 0x1ADuLL:
        v65 = sub_23EC2E66C();
        v66 = sub_23EC2EA08();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v67 = 0;
          _os_log_impl(&dword_23EB9F000, v65, v66, "Passcode | Too Many requests", v67, 2u);
          MEMORY[0x24265B940](v67, -1, -1);
        }
        v18 = v14[46];
        v19 = (void *)v14[47];
        v20 = v14[45];
        v21 = v14[36];
        v22 = v14[33];
        v23 = v14[34];

        sub_23EC16288();
        v24 = (void *)swift_allocError();
        v61 = 5;
        goto LABEL_36;
      default:
        if (v13 == (id)500)
        {
          v68 = sub_23EC2E66C();
          v69 = sub_23EC2EA08();
          if (os_log_type_enabled(v68, v69))
          {
            v70 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v70 = 0;
            _os_log_impl(&dword_23EB9F000, v68, v69, "Internal Server Error", v70, 2u);
            MEMORY[0x24265B940](v70, -1, -1);
          }
          v18 = v14[46];
          v19 = (void *)v14[47];
          v20 = v14[45];
          v21 = v14[36];
          v22 = v14[33];
          v23 = v14[34];

          sub_23EC16288();
          v24 = (void *)swift_allocError();
          v61 = 6;
LABEL_36:
          *v60 = v61;
LABEL_37:
          swift_willThrow();
          sub_23EBA3EDC(v20, v18);

          goto LABEL_38;
        }
        if (v13 == (id)201)
        {
          if (qword_256DB71E0 != -1)
            swift_once();
          __swift_project_value_buffer(*(_QWORD *)(v0 + 328), (uint64_t)qword_256DC76F0);
          v32 = sub_23EC2E66C();
          v33 = sub_23EC2EA14();
          if (os_log_type_enabled(v32, v33))
          {
            v34 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v34 = 0;
            _os_log_impl(&dword_23EB9F000, v32, v33, "TAF Account Verification(OTP) succeeded!", v34, 2u);
            MEMORY[0x24265B940](v34, -1, -1);
          }
          v35 = (void *)v14[48];

          sub_23EC2DFC4();
          swift_allocObject();
          sub_23EC2DFB8();
          sub_23EC16314();
          sub_23EC2DFAC();
          v36 = v35;
          swift_release();
          if (v35)
            goto LABEL_18;
          v84 = v14[11];
          v85 = v14[13];
          v109 = v14[14];
          if (v84)
          {
            v101 = v14[10];
            swift_bridgeObjectRelease();
            v85 = v84;
          }
          else
          {
            if (!v85)
            {
              if (!v14[14])
              {
                v97 = sub_23EC2E66C();
                v98 = sub_23EC2EA08();
                if (os_log_type_enabled(v97, v98))
                {
                  v99 = (uint8_t *)swift_slowAlloc();
                  v100 = swift_slowAlloc();
                  v110 = v100;
                  *(_DWORD *)v99 = 136315138;
                  v14[19] = sub_23EBAE6D4(0xD000000000000035, 0x800000023EC3A670, &v110);
                  sub_23EC2EA68();
                  _os_log_impl(&dword_23EB9F000, v97, v98, "TAF Account Verification(OTP) failed | %s", v99, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x24265B940](v100, -1, -1);
                  MEMORY[0x24265B940](v99, -1, -1);
                }

                sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
                v36 = (void *)swift_allocError();
                swift_storeEnumTagMultiPayload();
                swift_willThrow();
LABEL_18:
                v37 = sub_23EC2E66C();
                v38 = sub_23EC2EA08();
                if (os_log_type_enabled(v37, v38))
                {
                  v39 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v39 = 0;
                  _os_log_impl(&dword_23EB9F000, v37, v38, "TAF Account Verification(OTP) failed | Decoding Error", v39, 2u);
                  MEMORY[0x24265B940](v39, -1, -1);
                }
                v107 = v14[34];
                v40 = v14[31];

                v14[18] = v36;
                v41 = v36;
                __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
                v42 = swift_dynamicCast();
                v43 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v40 + 56);
                v45 = v14[46];
                v44 = (void *)v14[47];
                v46 = v14[45];
                v47 = v14[36];
                v105 = v14[33];
                if (v42)
                {
                  v103 = v14[36];
                  v48 = v14[32];
                  v49 = v14[29];
                  v43(v49, 0, 1, v14[30]);
                  sub_23EC16358(v49, v48);
                  sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
                  v24 = (void *)swift_allocError();
                  sub_23EC1639C(v48, v50);
                  swift_willThrow();
                  sub_23EBA3EDC(v46, v45);

                  sub_23EBE40DC(v48);
                  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v103, v105);
                }
                else
                {
                  v86 = v14[29];
                  v43(v86, 1, 1, v14[30]);
                  sub_23EBA3038(v86, &qword_256DB8E28);
                  sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
                  v24 = (void *)swift_allocError();
                  *v87 = 1;
                  swift_storeEnumTagMultiPayload();
                  swift_willThrow();
                  sub_23EBA3EDC(v46, v45);

                  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v47, v105);
                }
                break;
              }
              v85 = 0;
            }
            v101 = v14[12];
          }
          v88 = v14;
          v89 = (void *)v14[47];
          v91 = v88[39];
          v90 = v88[40];
          v92 = v88[38];
          v93 = v88[36];
          v94 = v88[33];
          v95 = v88[34];
          v96 = (_QWORD *)v88[20];
          sub_23EBA3EDC(v88[45], v88[46]);

          (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v93, v94);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
          *v96 = v109;
          v96[1] = v101;
          v96[2] = v85;
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          v78 = (uint64_t (*)(void))v88[1];
          return v78();
        }
LABEL_22:
        v51 = *(id *)(v0 + 376);
        v52 = sub_23EC2E66C();
        v53 = sub_23EC2EA08();
        if (os_log_type_enabled(v52, v53))
        {
          v54 = *(void **)(v0 + 376);
          v55 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v55 = 134217984;
          *(_QWORD *)(v0 + 128) = objc_msgSend(v11, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v52, v53, "Request failed : Status Code %ld", v55, 0xCu);
          MEMORY[0x24265B940](v55, -1, -1);
          v56 = *(NSObject **)(v0 + 376);
        }
        else
        {

          v56 = *(NSObject **)(v0 + 376);
          v52 = v56;
        }
        v80 = *(_QWORD *)(v0 + 360);
        v81 = *(_QWORD *)(v0 + 368);
        v82 = v14[34];
        v106 = v14[33];
        v108 = v14[36];

        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        v24 = (void *)swift_allocError();
        *v83 = objc_msgSend(v11, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v80, v81);

        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v108, v106);
        break;
    }
  }
  else
  {
    v14 = (_QWORD *)v0;
    if (qword_256DB71E0 != -1)
      swift_once();
    __swift_project_value_buffer(*(_QWORD *)(v0 + 328), (uint64_t)qword_256DC76F0);
    v26 = sub_23EC2E66C();
    v27 = sub_23EC2EA08();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_23EB9F000, v26, v27, "Unable to process TAF Account Verification(OTP) response from Utility.", v28, 2u);
      MEMORY[0x24265B940](v28, -1, -1);
    }
    v29 = v14[46];
    v19 = (void *)v14[47];
    v30 = v14[45];
    v21 = v14[36];
    v22 = v14[33];
    v23 = v14[34];

    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v24 = (void *)swift_allocError();
    *v31 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v30, v29);
LABEL_38:

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  v14[17] = v24;
  v71 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v72 = swift_dynamicCast();
  v74 = v14[39];
  v73 = v14[40];
  v75 = v14[38];
  if (v72)
  {
    v76 = v14[15];
    sub_23EC16288();
    swift_allocError();
    *v77 = v76;
  }
  else
  {
    sub_23EC259EC(v24);
  }
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v78 = (uint64_t (*)(void))v14[1];
  return v78();
}

uint64_t sub_23EC15E78()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
  v1 = *(void **)(v0 + 384);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v3 = swift_dynamicCast();
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 304);
  if (v3)
  {
    v7 = *(_QWORD *)(v0 + 120);
    sub_23EC16288();
    swift_allocError();
    *v8 = v7;
  }
  else
  {
    sub_23EC259EC(v1);
  }
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC15FB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[8];
  _BYTE v12[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E58);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC17AA8();
  sub_23EC2EDE0();
  v11[0] = 0;
  sub_23EC2ECB4();
  if (!v2)
  {
    v11[0] = 1;
    sub_23EC2ECB4();
    sub_23EC17AEC(v3 + 32, (uint64_t)v12);
    sub_23EC17AEC((uint64_t)v12, (uint64_t)v11);
    v10[15] = 2;
    type metadata accessor for UtilitySubscriptionTokenSet();
    sub_23EBC0AD4(&qword_256DB7BE0, (uint64_t (*)(uint64_t))type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionTokenSet);
    sub_23EC2ECD8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EC16134()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x7365526E656B6F74;
  if (*v0)
    return v1;
  else
    return 1701080931;
}

uint64_t sub_23EC16198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC176EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EC161BC()
{
  sub_23EC17AA8();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC161E4()
{
  sub_23EC17AA8();
  return sub_23EC2EE04();
}

double sub_23EC1620C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_23EC1784C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_23EC16250(_QWORD *a1)
{
  return sub_23EC15FB0(a1);
}

unint64_t sub_23EC16288()
{
  unint64_t result;

  result = qword_256DB8E30;
  if (!qword_256DB8E30)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB8E30);
  }
  return result;
}

uint64_t sub_23EC162CC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_23EC16314()
{
  unint64_t result;

  result = qword_256DB8E38;
  if (!qword_256DB8E38)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3675C, &type metadata for InternalAccountVerificationResponse);
    atomic_store(result, (unint64_t *)&qword_256DB8E38);
  }
  return result;
}

uint64_t sub_23EC16358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NetworkError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EC1639C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NetworkError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23EC163E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[17] = a5;
  v6[18] = a6;
  v6[15] = a3;
  v6[16] = a4;
  v6[13] = a1;
  v6[14] = a2;
  v7 = sub_23EC2E3CC();
  v6[19] = v7;
  v6[20] = *(_QWORD *)(v7 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v6[23] = swift_task_alloc();
  v8 = sub_23EC2DFA0();
  v6[24] = v8;
  v6[25] = *(_QWORD *)(v8 - 8);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC164E0()
{
  uint64_t *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  v0[28] = v1;
  v0[29] = __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA14();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "Initiate TAF OTP....", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }

  v5 = (_QWORD *)swift_task_alloc();
  v0[30] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23EC16618;
  return sub_23EC1C68C(v0[23], v0[13]);
}

uint64_t sub_23EC16618()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC16698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _BYTE *v7;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  __CFString *v10;
  __CFString *v11;
  int AppBooleanValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA08();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23EB9F000, v4, v5, "Unable to create request URL for TAF Account Verification | OTP.", v6, 2u);
      MEMORY[0x24265B940](v6, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v7 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v9(*(_QWORD *)(v0 + 216), v3, v1);
    if (os_variant_has_internal_diagnostics())
    {
      *(_BYTE *)(v0 + 272) = 0;
      v10 = (__CFString *)sub_23EC2E774();
      v11 = (__CFString *)sub_23EC2E774();
      AppBooleanValue = CFPreferencesGetAppBooleanValue(v10, v11, (Boolean *)(v0 + 272));

      if (*(_BYTE *)(v0 + 272))
      {
        if (AppBooleanValue)
        {
          v13 = *(_QWORD *)(v0 + 208);
          v14 = *(_QWORD *)(v0 + 216);
          v15 = *(_QWORD *)(v0 + 192);
          v16 = *(_QWORD *)(v0 + 200);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v13, v14, v15);
          sub_23EC2DF70();
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
          v9(v14, v13, v15);
          v17 = sub_23EC2E66C();
          v18 = sub_23EC2EA14();
          if (os_log_type_enabled(v17, v18))
          {
            v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v19 = 0;
            _os_log_impl(&dword_23EB9F000, v17, v18, "Adding additional OTP override header.", v19, 2u);
            MEMORY[0x24265B940](v19, -1, -1);
          }

        }
      }
    }
    sub_23EC0A6EC(0xD000000000000018, 0x800000023EC3A6B0, (uint8_t *)0xD000000000000027, 0x800000023EC3A6D0);
    sub_23EC2E3C0();
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v20;
    *v20 = v0;
    v20[1] = sub_23EC16A50;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EC16A50(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;

  v7 = *v4;
  *(_QWORD *)(v7 + 256) = a3;
  *(_QWORD *)(v7 + 264) = v3;
  swift_task_dealloc();
  if (!v3)
    sub_23EBA3EDC(a1, a2);
  return swift_task_switch();
}

uint64_t sub_23EC16B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  void *v52;
  uint8_t *v53;
  _QWORD *v54;
  id v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v63;
  uint64_t v64;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v64 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 128);
  v63 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  v7 = sub_23EC0C0F0();
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_bridgeObjectRetain();
  sub_23EC2A9C8(v63, v6, v7, v9, v64, v5, 1, v2, v0 + 16);
  sub_23EC2AB0C();
  sub_23EC162CC(v0 + 16);
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
    v14 = (_QWORD *)v0;
    if (qword_256DB71E0 != -1)
      swift_once();
    __swift_project_value_buffer(*(_QWORD *)(v0 + 224), (uint64_t)qword_256DC76F0);
    v22 = sub_23EC2E66C();
    v23 = sub_23EC2EA08();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_23EB9F000, v22, v23, "Unable to process TAF Account Verification(OTP) response from Utility.", v24, 2u);
      MEMORY[0x24265B940](v24, -1, -1);
    }
    v18 = v14[32];

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v20 = (void *)swift_allocError();
    *v25 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_36;
  }
  v11 = (void *)v10;
  v12 = *(id *)(v0 + 256);
  v13 = (uint64_t)objc_msgSend(v11, sel_statusCode);
  v14 = (_QWORD *)v0;
  if (v13 > 403)
  {
    switch(v13)
    {
      case 404:
        v30 = sub_23EC2E66C();
        v31 = sub_23EC2EA08();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v32 = 0;
          _os_log_impl(&dword_23EB9F000, v30, v31, "Invalid Factor | OTP Expired session.", v32, 2u);
          MEMORY[0x24265B940](v32, -1, -1);
        }
        v18 = v14[32];

        sub_23EC16288();
        v20 = (void *)swift_allocError();
        v21 = 8;
        goto LABEL_25;
      case 429:
        v33 = sub_23EC2E66C();
        v34 = sub_23EC2EA08();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_23EB9F000, v33, v34, "Too Many Request | User requested too many OTP verification for the same account.", v35, 2u);
          MEMORY[0x24265B940](v35, -1, -1);
        }
        v18 = v14[32];

        sub_23EC16288();
        v20 = (void *)swift_allocError();
        v21 = 5;
        goto LABEL_25;
      case 500:
        v15 = sub_23EC2E66C();
        v16 = sub_23EC2EA08();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v17 = 0;
          _os_log_impl(&dword_23EB9F000, v15, v16, "Internal Server Error", v17, 2u);
          MEMORY[0x24265B940](v17, -1, -1);
        }
        v18 = v14[32];

        sub_23EC16288();
        v20 = (void *)swift_allocError();
        v21 = 6;
LABEL_25:
        *v19 = v21;
LABEL_35:
        swift_willThrow();

LABEL_36:
        (*(void (**)(_QWORD, _QWORD))(v14[20] + 8))(v14[22], v14[19]);
        v14[10] = v20;
        v55 = v20;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
        v56 = swift_dynamicCast();
        v57 = v14[27];
        v59 = v14[24];
        v58 = v14[25];
        if (v56)
        {
          v60 = v14[11];
          sub_23EC16288();
          swift_allocError();
          *v61 = v60;
        }
        else
        {
          sub_23EC259EC(v20);
        }
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v47 = (uint64_t (*)(uint64_t))v14[1];
        v48 = 0;
        return v47(v48);
    }
LABEL_31:
    v49 = *(id *)(v0 + 256);
    v50 = sub_23EC2E66C();
    v51 = sub_23EC2EA08();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = *(void **)(v0 + 256);
      v53 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v53 = 134217984;
      *(_QWORD *)(v0 + 96) = objc_msgSend(v11, sel_statusCode);
      sub_23EC2EA68();

      _os_log_impl(&dword_23EB9F000, v50, v51, "Request failed : Status Code %ld", v53, 0xCu);
      MEMORY[0x24265B940](v53, -1, -1);
      v18 = *(NSObject **)(v0 + 256);
    }
    else
    {

      v18 = *(NSObject **)(v0 + 256);
      v50 = v18;
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v20 = (void *)swift_allocError();
    *v54 = objc_msgSend(v11, sel_statusCode);
    swift_storeEnumTagMultiPayload();
    goto LABEL_35;
  }
  if (v13 != 204)
  {
    if (v13 == 400)
    {
      v26 = sub_23EC2E66C();
      v27 = sub_23EC2EA08();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_23EB9F000, v26, v27, "BAD REQUEST | Check request", v28, 2u);
        MEMORY[0x24265B940](v28, -1, -1);
      }
      v18 = v14[32];

      sub_23EC16288();
      v20 = (void *)swift_allocError();
      *v29 = 0;
      goto LABEL_35;
    }
    goto LABEL_31;
  }
  if (qword_256DB71E0 != -1)
    swift_once();
  __swift_project_value_buffer(*(_QWORD *)(v0 + 224), (uint64_t)qword_256DC76F0);
  v36 = sub_23EC2E66C();
  v37 = sub_23EC2EA14();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    _os_log_impl(&dword_23EB9F000, v36, v37, "TAF Account Verification(OTP) Initiated successfully!", v38, 2u);
    MEMORY[0x24265B940](v38, -1, -1);
  }
  v39 = (void *)v14[32];
  v40 = v14[27];
  v41 = v14;
  v42 = v14[25];
  v43 = v41[24];
  v44 = v41[22];
  v46 = v41[19];
  v45 = v41[20];

  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v47 = (uint64_t (*)(uint64_t))v41[1];
  v48 = 1;
  return v47(v48);
}

uint64_t sub_23EC17378()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(void **)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152));
  *(_QWORD *)(v0 + 80) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v3 = swift_dynamicCast();
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  if (v3)
  {
    v7 = *(_QWORD *)(v0 + 88);
    sub_23EC16288();
    swift_allocError();
    *v8 = v7;
  }
  else
  {
    sub_23EC259EC(v1);
  }
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void destroy for InternalAccountVerificationResponse(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for InternalAccountVerificationResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for InternalAccountVerificationResponse(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  v5 = (void *)a2[4];
  a1[4] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for InternalAccountVerificationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for InternalAccountVerificationResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalAccountVerificationResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalAccountVerificationResponse()
{
  return &type metadata for InternalAccountVerificationResponse;
}

uint64_t sub_23EC176EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080931 && a2 == 0xE400000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023EC37BE0 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7365526E656B6F74 && a2 == 0xED000065736E6F70)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23EC1784C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  char v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E48);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC17AA8();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v25 = 0;
  v9 = sub_23EC2EC54();
  v11 = v10;
  v21 = v9;
  v24 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC54();
  v14 = v13;
  v19 = v12;
  type metadata accessor for UtilitySubscriptionTokenSet();
  v23 = 2;
  sub_23EBC0AD4(&qword_256DB7BF0, (uint64_t (*)(uint64_t))type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionTokenSet);
  v20 = v14;
  swift_bridgeObjectRetain();
  sub_23EC2EC78();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = (uint64_t)v22;
  v16 = v22;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);

  v17 = v20;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v15;
  return result;
}

unint64_t sub_23EC17AA8()
{
  unint64_t result;

  result = qword_256DB8E50;
  if (!qword_256DB8E50)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36848, &type metadata for InternalAccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8E50);
  }
  return result;
}

uint64_t sub_23EC17AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8E60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for InternalAccountVerificationResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EC17B80 + 4 * byte_23EC366E1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EC17BB4 + 4 * byte_23EC366DC[v4]))();
}

uint64_t sub_23EC17BB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC17BBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC17BC4);
  return result;
}

uint64_t sub_23EC17BD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC17BD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EC17BDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC17BE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalAccountVerificationResponse.CodingKeys()
{
  return &type metadata for InternalAccountVerificationResponse.CodingKeys;
}

unint64_t sub_23EC17C04()
{
  unint64_t result;

  result = qword_256DB8E68;
  if (!qword_256DB8E68)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36820, &type metadata for InternalAccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8E68);
  }
  return result;
}

unint64_t sub_23EC17C4C()
{
  unint64_t result;

  result = qword_256DB8E70;
  if (!qword_256DB8E70)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36790, &type metadata for InternalAccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8E70);
  }
  return result;
}

unint64_t sub_23EC17C94()
{
  unint64_t result;

  result = qword_256DB8E78;
  if (!qword_256DB8E78)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC367B8, &type metadata for InternalAccountVerificationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB8E78);
  }
  return result;
}

uint64_t sub_23EC17CD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_23EC2DFA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  if ((sub_23EC1313C() & 1) != 0)
  {
    if (qword_25433FAC8 != -1)
      swift_once();
    v16 = sub_23EC2E684();
    __swift_project_value_buffer(v16, (uint64_t)qword_25433FC50);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA14();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "Adding HMAC Auth header to request", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }

    v9 = (char *)&loc_23EC17DFC + 4 * byte_23EC368A8[sub_23EC12720()];
    __asm { BR              X10 }
  }
  if (qword_25433FAC8 != -1)
    swift_once();
  v10 = sub_23EC2E684();
  __swift_project_value_buffer(v10, (uint64_t)qword_25433FC50);
  v11 = sub_23EC2E66C();
  v12 = sub_23EC2EA14();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v13 = 136315138;
    v14 = (char *)&loc_23EC17EF8 + 4 * word_23EC368A0[sub_23EC12720()];
    __asm { BR              X10 }
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, v2, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

uint64_t sub_23EC184F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_23EC2E6CC();
  sub_23EBC0AD4(&qword_256DB8F18, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC62E8]);
  v0 = sub_23EC2E6FC();
  v2 = sub_23EC1AB38(v0, v1);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_23EBAECC0(0, v3, 0);
    v4 = 0;
    v5 = MEMORY[0x24BEE42B0];
    do
    {
      v6 = *(_BYTE *)(v2 + v4 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88A0);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_23EC2FB70;
      *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v7 + 64) = v5;
      *(_BYTE *)(v7 + 32) = v6;
      v8 = sub_23EC2E7A4();
      v10 = v9;
      v12 = *(_QWORD *)(v16 + 16);
      v11 = *(_QWORD *)(v16 + 24);
      if (v12 >= v11 >> 1)
        sub_23EBAECC0(v11 > 1, v12 + 1, 1);
      ++v4;
      *(_QWORD *)(v16 + 16) = v12 + 1;
      v13 = v16 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v8;
      *(_QWORD *)(v13 + 40) = v10;
    }
    while (v3 != v4);
  }
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
  sub_23EBF5FFC(&qword_256DB8858, &qword_25433FB20, MEMORY[0x24BEE12B0]);
  v14 = sub_23EC2E75C();
  swift_bridgeObjectRelease();
  return v14;
}

void sub_23EC186E4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = sub_23EC2E708();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  MEMORY[0x24BDAC7A8](v0);
  v2 = sub_23EC2E6CC();
  MEMORY[0x24BDAC7A8](v2);
  sub_23EC2DF7C();
  if (v3 >> 60 == 15)
    v4 = 0xC000000000000000;
  else
    v4 = v3;
  sub_23EBC0AD4(&qword_256DB86C8, v1, MEMORY[0x24BDC6AE8]);
  sub_23EC2E6C0();
  __asm { BR              X10 }
}

uint64_t sub_23EC187F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 - 112) = v4;
  *(_WORD *)(v7 - 104) = v5;
  *(_BYTE *)(v7 - 102) = BYTE2(v5);
  *(_BYTE *)(v7 - 101) = BYTE3(v5);
  *(_BYTE *)(v7 - 100) = BYTE4(v5);
  *(_BYTE *)(v7 - 99) = BYTE5(v5);
  sub_23EC2E6A8();
  sub_23EBA3EDC(v4, v5);
  sub_23EC2E6B4();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  v8 = sub_23EC184F8();
  sub_23EBA3EDC(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 120) + 8))(v3, v6);
  return v8;
}

uint64_t sub_23EC189EC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HMACConstants()
{
  return objc_opt_self();
}

uint64_t sub_23EC18A1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = v5;
  v12 = sub_23EC2E3CC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E39C();
  sub_23EC2E384();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB88A0);
  v18 = swift_allocObject();
  v19 = MEMORY[0x24BEE13C8];
  *(_OWORD *)(v18 + 16) = xmmword_23EC2FB70;
  v20 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v18 + 56) = v19;
  *(_QWORD *)(v18 + 64) = v20;
  *(double *)(v18 + 32) = v17 * 1000.0;
  v21 = sub_23EC2E7A4();
  sub_23EC18D00(a1, a2, a3, a4, v21, v22);
  if (v23)
  {
    v24 = sub_23EC2DFA0();
    v25 = *(_QWORD *)(v24 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a5, v6, v24);
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(a5, 0, 1, v24);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_256DB71A0 != -1)
      swift_once();
    v27 = sub_23EC2E684();
    __swift_project_value_buffer(v27, (uint64_t)qword_256DC7678);
    v28 = sub_23EC2E66C();
    v29 = sub_23EC2EA08();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23EB9F000, v28, v29, "Unable to generate HMAC Signature", v30, 2u);
      MEMORY[0x24265B940](v30, -1, -1);
    }

    v31 = sub_23EC2DFA0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a5, 1, 1, v31);
  }
}

uint64_t sub_23EC18D00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v110 = a5;
  v111 = a3;
  v107 = a1;
  v108 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8F20);
  v117 = *(_QWORD *)(v8 - 8);
  v118 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v116 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23EC2E6E4();
  v114 = *(_QWORD *)(v10 - 8);
  v115 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v113 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F928);
  MEMORY[0x24BDAC7A8](v12);
  v112 = (char *)v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_23EC2E7C8();
  v14 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v16 = (char *)v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23EC2E264();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2DF64();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_23EBA3038((uint64_t)v19, &qword_25433F930);
    if (qword_256DB71A0 != -1)
      swift_once();
    v24 = sub_23EC2E684();
    __swift_project_value_buffer(v24, (uint64_t)qword_256DC7678);
    v25 = sub_23EC2E66C();
    v26 = sub_23EC2EA08();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_23EB9F000, v25, v26, "Unable to retrieve URL from request.", v27, 2u);
      MEMORY[0x24265B940](v27, -1, -1);
    }

    return 0;
  }
  v29 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v106 = v20;
  v29(v23, v19, v20);
  sub_23EC2DF34();
  v105 = v21;
  if (v30)
  {
    sub_23EC2E7D4();
    swift_bridgeObjectRelease();
  }
  v109 = v23;
  sub_23EC2E210();
  v104[1] = sub_23EC2E7D4();
  swift_bridgeObjectRelease();
  v31 = sub_23EC2DF4C();
  if (v31)
    v32 = v31;
  else
    v32 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v122 = v32;
  sub_23EBBC430(v110, a6, 0xD00000000000001BLL, 0x800000023EC3A7B0, isUniquelyReferenced_nonNull_native);
  v34 = v122;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v35 = swift_isUniquelyReferenced_nonNull_native();
  v122 = v34;
  sub_23EBBC430(v111, a4, 0xD00000000000001BLL, 0x800000023EC3A7F0, v35);
  v36 = v122;
  swift_bridgeObjectRelease();
  v111 = sub_23EC197D0(v36);
  v38 = v37;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23EC32680;
  sub_23EC2E7B0();
  v40 = sub_23EC2E78C();
  v42 = v41;
  v43 = *(void (**)(char *, uint64_t))(v14 + 8);
  v43(v16, v119);
  v44 = v38;
  if (v42 >> 60 == 15)
  {
    if (qword_256DB71A0 != -1)
      swift_once();
    v45 = sub_23EC2E684();
    __swift_project_value_buffer(v45, (uint64_t)qword_256DC7678);
    v46 = sub_23EC2E66C();
    v47 = sub_23EC2EA08();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_23EB9F000, v46, v47, "String encoding failed. Returning empty string", v48, 2u);
      MEMORY[0x24265B940](v48, -1, -1);
    }

    v49 = 0;
    v50 = 0xE000000000000000;
  }
  else
  {
    v49 = sub_23EC2E2C4();
    v50 = v51;
    sub_23EBA4CE0(v40, v42);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v39 + 32) = v49;
  *(_QWORD *)(v39 + 40) = v50;
  sub_23EC2E7B0();
  v52 = sub_23EC2E78C();
  v54 = v53;
  v43(v16, v119);
  if (v54 >> 60 == 15)
  {
    v55 = v111;
    if (qword_256DB71A0 != -1)
      swift_once();
    v56 = sub_23EC2E684();
    __swift_project_value_buffer(v56, (uint64_t)qword_256DC7678);
    v57 = sub_23EC2E66C();
    v58 = sub_23EC2EA08();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_23EB9F000, v57, v58, "String encoding failed. Returning empty string", v59, 2u);
      MEMORY[0x24265B940](v59, -1, -1);
    }

    v60 = 0;
    v61 = 0xE000000000000000;
  }
  else
  {
    v60 = sub_23EC2E2C4();
    v61 = v62;
    sub_23EBA4CE0(v52, v54);
    v55 = v111;
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v39 + 48) = v60;
  *(_QWORD *)(v39 + 56) = v61;
  v63 = (uint64_t)v112;
  sub_23EC2E078();
  v64 = sub_23EC2E0CC();
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64) == 1)
  {
    sub_23EBA3038(v63, &qword_25433F928);
LABEL_38:
    v70 = v108;
    goto LABEL_39;
  }
  v66 = sub_23EC2E054();
  v68 = v67;
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
  if (!v68)
    goto LABEL_38;
  v69 = HIBYTE(v68) & 0xF;
  if ((v68 & 0x2000000000000000) == 0)
    v69 = v66 & 0xFFFFFFFFFFFFLL;
  v70 = v108;
  if (v69)
  {
    sub_23EC2E7B0();
    v71 = sub_23EC2E78C();
    v73 = v72;
    v43(v16, v119);
    if (v73 >> 60 == 15)
    {
      if (qword_256DB71A0 != -1)
        swift_once();
      v74 = sub_23EC2E684();
      __swift_project_value_buffer(v74, (uint64_t)qword_256DC7678);
      v75 = sub_23EC2E66C();
      v76 = sub_23EC2EA08();
      v77 = os_log_type_enabled(v75, v76);
      v78 = v107;
      v55 = v111;
      if (v77)
      {
        v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v79 = 0;
        _os_log_impl(&dword_23EB9F000, v75, v76, "String encoding failed. Returning empty string", v79, 2u);
        MEMORY[0x24265B940](v79, -1, -1);
      }

      v80 = 0;
      v81 = 0xE000000000000000;
    }
    else
    {
      v80 = sub_23EC2E2C4();
      v81 = v100;
      sub_23EBA4CE0(v71, v73);
      v78 = v107;
      v55 = v111;
    }
    swift_bridgeObjectRelease();
    v102 = *(_QWORD *)(v39 + 16);
    v101 = *(_QWORD *)(v39 + 24);
    if (v102 >= v101 >> 1)
      v39 = (uint64_t)sub_23EC218C0((_QWORD *)(v101 > 1), v102 + 1, 1, (_QWORD *)v39);
    *(_QWORD *)(v39 + 16) = v102 + 1;
    v103 = v39 + 16 * v102;
    *(_QWORD *)(v103 + 32) = v80;
    *(_QWORD *)(v103 + 40) = v81;
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
LABEL_39:
  v78 = v107;
LABEL_40:
  v83 = *(_QWORD *)(v39 + 16);
  v82 = *(_QWORD *)(v39 + 24);
  if (v83 >= v82 >> 1)
    v39 = (uint64_t)sub_23EC218C0((_QWORD *)(v82 > 1), v83 + 1, 1, (_QWORD *)v39);
  *(_QWORD *)(v39 + 16) = v83 + 1;
  v84 = v39 + 16 * v83;
  *(_QWORD *)(v84 + 32) = v55;
  *(_QWORD *)(v84 + 40) = v44;
  v122 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
  sub_23EBF5FFC(&qword_256DB8858, &qword_25433FB20, MEMORY[0x24BEE12B0]);
  v85 = sub_23EC2E75C();
  v87 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v88 = sub_23EC0E448(v85, v87);
  v119 = v88;
  v90 = v89;
  swift_bridgeObjectRetain();
  v122 = sub_23EC0E448(v78, v70);
  v123 = v91;
  v92 = v113;
  sub_23EC2E6D8();
  v122 = v88;
  v123 = v90;
  sub_23EC2E708();
  sub_23EBC0AD4(&qword_256DB86C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_23EC1B084();
  v93 = v116;
  sub_23EC2E6F0();
  v94 = v118;
  v124 = v118;
  v125 = sub_23EBF5FFC(&qword_256DB8F30, &qword_256DB8F20, MEMORY[0x24BDC6538]);
  v95 = __swift_allocate_boxed_opaque_existential_0(&v122);
  v96 = v117;
  (*(void (**)(uint64_t *, char *, uint64_t))(v117 + 16))(v95, v93, v94);
  __swift_project_boxed_opaque_existential_1(&v122, v124);
  sub_23EC2E180();
  v97 = v120;
  v98 = v121;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v122);
  v28 = sub_23EC2E2C4();
  sub_23EBA3EDC(v97, v98);
  sub_23EBA3EDC(v119, v90);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v93, v94);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v92, v115);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v109, v106);
  return v28;
}

uint64_t sub_23EC197D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v2 = sub_23EC2E7C8();
  v32 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v38 = 0xE000000000000000;
  v5 = swift_bridgeObjectRetain();
  v35 = sub_23EC19BF0(v5);
  sub_23EC19CD4((uint64_t *)&v35);
  swift_bridgeObjectRelease();
  v6 = v35[2];
  if (v6)
  {
    v30 = v35;
    v31 = v2;
    v7 = v35 + 5;
    do
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v8 = *(v7 - 1);
        v9 = *v7;
        swift_bridgeObjectRetain();
        v10 = sub_23EBE9A24(v8, v9);
        if ((v11 & 1) != 0)
        {
          v12 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
          v13 = v12[1];
          v33 = *v12;
          v34 = v13;
          v35 = 0;
          v36 = 0xE000000000000000;
          swift_bridgeObjectRetain();
          sub_23EC2E7B0();
          v14 = sub_23EC2E78C();
          v16 = v15;
          v17 = *(void (**)(char *, uint64_t))(v32 + 8);
          v17(v4, v2);
          if (v16 >> 60 == 15)
          {
            if (qword_256DB71A0 != -1)
              swift_once();
            v18 = sub_23EC2E684();
            __swift_project_value_buffer(v18, (uint64_t)qword_256DC7678);
            v19 = sub_23EC2E66C();
            v20 = sub_23EC2EA08();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v21 = 0;
              _os_log_impl(&dword_23EB9F000, v19, v20, "String encoding failed. Returning empty string", v21, 2u);
              MEMORY[0x24265B940](v21, -1, -1);
            }
            swift_bridgeObjectRelease();

          }
          else
          {
            sub_23EC2E2C4();
            sub_23EBA4CE0(v14, v16);
            swift_bridgeObjectRelease();
          }
          sub_23EC2E834();
          swift_bridgeObjectRelease();
          sub_23EC2E834();
          sub_23EC2E834();
          swift_bridgeObjectRelease();
          v35 = 0;
          v36 = 0xE000000000000000;
          sub_23EC2E7B0();
          v22 = sub_23EC2E78C();
          v24 = v23;
          v2 = v31;
          v17(v4, v31);
          if (v24 >> 60 == 15)
          {
            if (qword_256DB71A0 != -1)
              swift_once();
            v25 = sub_23EC2E684();
            __swift_project_value_buffer(v25, (uint64_t)qword_256DC7678);
            v26 = sub_23EC2E66C();
            v27 = sub_23EC2EA08();
            if (os_log_type_enabled(v26, v27))
            {
              v28 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v28 = 0;
              _os_log_impl(&dword_23EB9F000, v26, v27, "String encoding failed. Returning empty string", v28, 2u);
              MEMORY[0x24265B940](v28, -1, -1);
            }
            swift_bridgeObjectRelease();

          }
          else
          {
            sub_23EC2E2C4();
            sub_23EBA4CE0(v22, v24);
            swift_bridgeObjectRelease();
          }
          sub_23EC2E834();
          swift_bridgeObjectRelease();
          sub_23EC2E834();
          sub_23EC2E834();
        }
        swift_bridgeObjectRelease();
      }
      v7 += 2;
      --v6;
    }
    while (v6);
    swift_release();
    return v37;
  }
  else
  {
    swift_release();
    return 0;
  }
}

_QWORD *sub_23EC19BF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_23EC1A93C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_23EC11948();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_23EC19CD4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23EC1AD68(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23EC19D3C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23EC19D3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_23EC2ED14();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23EC1A424(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_23EC1A4F0((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_23EC1A928((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23EC2E960();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_23EC2ED38();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_23EC2ED38()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23EC1A788(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_23EC1A788((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_23EC1A4F0((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_23EC2ED38() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_23EC2EBF4();
  __break(1u);
  return result;
}

uint64_t sub_23EC1A424(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_23EC2ED38(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23EC1A4F0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_23EC2ED38() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_23EC2ED38() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_23EC1A880((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

char *sub_23EC1A788(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB8F38);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23EC1A880(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_23EC2EC3C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_23EC1A928(uint64_t a1)
{
  return sub_23EC1A788(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23EC1A93C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23EC1AB38(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v6 = result;
      result = swift_bridgeObjectRetain();
      v4 = 0;
      v7 = v3 + 4;
      while (1)
      {
        v8 = *(_BYTE *)(v6 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBE0);
          v12 = (_QWORD *)swift_allocObject();
          v13 = 2 * _swift_stdlib_malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          v14 = (unint64_t)(v12 + 4);
          v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32)
              memmove(v12 + 4, v3 + 4, v15);
            v3[2] = 0;
          }
          v7 = (_BYTE *)(v14 + v15);
          v4 = (v13 >> 1) - v15;
          result = swift_release();
          v3 = v12;
        }
        v17 = __OFSUB__(v4--, 1);
        if (v17)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_23EC1ACA4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23EC2E0F0();
  if (!result || (result = sub_23EC2E114(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23EC2E108();
      sub_23EC2E708();
      sub_23EBC0AD4(&qword_256DB86C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_23EC2E6A8();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23EC1AD68(uint64_t a1)
{
  return sub_23EBAED68(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23EC1AD7C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  return sub_23EC23F9C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23EC1AD84(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  sub_23EBAECDC(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 32;
    do
    {
      v7 = a2(v5, *(unsigned __int8 *)(v6 + v5));
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_23EBAECDC(v8 > 1, v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_BYTE *)(v11 + v9 + 32) = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_23EC1AE84()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_preferredLanguages);
  if (!v1)
  {
    sub_23EC2E930();
    v1 = (id)sub_23EC2E924();
    swift_bridgeObjectRelease();
  }
  v2 = objc_msgSend(v0, sel_minimizedLanguagesFromLanguages_, v1);

  v3 = sub_23EC2E930();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 32);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v4 != 1)
    {
      v6 = -v4;
      v7 = v3 + 56;
      v8 = -1;
      do
      {
        swift_bridgeObjectRetain();
        sub_23EC2E834();
        sub_23EC2E834();
        sub_23EC2ED20();
        sub_23EC2E834();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_23EC2E834();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        --v8;
        v7 += 16;
      }
      while (v6 != v8);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 28261;
  }
  return v5;
}

unint64_t sub_23EC1B084()
{
  unint64_t result;

  result = qword_256DB8F28;
  if (!qword_256DB8F28)
  {
    result = MEMORY[0x24265B8B0](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256DB8F28);
  }
  return result;
}

uint64_t sub_23EC1B0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  v7[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v7[15] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v7[16] = v9;
  v7[17] = *(_QWORD *)(v9 - 8);
  v7[18] = swift_task_alloc();
  v10 = (_QWORD *)swift_task_alloc();
  v7[19] = v10;
  *v10 = v7;
  v10[1] = sub_23EC1B174;
  return sub_23EBD176C(a7);
}

uint64_t sub_23EC1B174()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC1B1C8()
{
  uint64_t *v0;
  uint64_t KeyPath;
  _QWORD *v2;

  KeyPath = swift_getKeyPath();
  v0[20] = KeyPath;
  v2 = (_QWORD *)swift_task_alloc();
  v0[21] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23EC1B23C;
  return sub_23EBA317C(v0[15], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], KeyPath);
}

uint64_t sub_23EC1B23C()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23EC1B298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBC0A94(v3);
    if (qword_256DB71F0 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7720);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate request URL for TokenSet Generation", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 144), v3, v1);
    sub_23EC0A6EC(0xD00000000000001DLL, 0x800000023EC3A860, (uint8_t *)0xD00000000000002ELL, 0x800000023EC3A880);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_23EC1B4BC;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EC1B4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC1B52C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint8_t *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_type_t type;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[2];

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    if (qword_256DB71F0 != -1)
      swift_once();
    v9 = sub_23EC2E684();
    __swift_project_value_buffer(v9, (uint64_t)qword_256DC7720);
    v10 = sub_23EC2E66C();
    v11 = sub_23EC2EA08();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_23EB9F000, v10, v11, "Unable to process Address Verification Response.", v12, 2u);
      MEMORY[0x24265B940](v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(void **)(v0 + 200);
    v15 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 128);

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    swift_allocError();
    *v19 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v15, v13);
LABEL_13:

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_54;
  }
  v2 = (void *)v1;
  v3 = *(id *)(v0 + 200);
  sub_23EC0AFC4(0xD000000000000016, (uint8_t *)0x800000023EC3A8B0, (unint64_t)objc_msgSend(v2, sel_statusCode), qword_250F4ECA8);
  v4 = objc_msgSend(v2, sel_statusCode);
  switch((unint64_t)v4)
  {
    case 0x190uLL:
      if (qword_256DB71F0 != -1)
        swift_once();
      v5 = sub_23EC2E684();
      __swift_project_value_buffer(v5, (uint64_t)qword_256DC7720);
      v6 = sub_23EC2E66C();
      v7 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v7, "BAD REQUEST | Check request", v8, 2u);
        MEMORY[0x24265B940](v8, -1, -1);
      }
      goto LABEL_44;
    case 0x191uLL:
      if (qword_256DB71F0 != -1)
        swift_once();
      v43 = sub_23EC2E684();
      __swift_project_value_buffer(v43, (uint64_t)qword_256DC7720);
      v44 = sub_23EC2E66C();
      v45 = sub_23EC2EA08();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v47 = swift_slowAlloc();
        v103[0] = v47;
        *(_DWORD *)v46 = 136315138;
        *(_QWORD *)(v0 + 48) = sub_23EBAE6D4(0xD000000000000068, 0x800000023EC3A990, v103);
        sub_23EC2EA68();
        _os_log_impl(&dword_23EB9F000, v44, v45, "%s", v46, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v47, -1, -1);
        MEMORY[0x24265B940](v46, -1, -1);
      }

      v48 = *(id *)(v0 + 200);
      v49 = sub_23EC2E66C();
      v50 = sub_23EC2E9FC();
      v51 = os_log_type_enabled(v49, v50);
      v52 = *(_QWORD *)(v0 + 192);
      v53 = *(void **)(v0 + 200);
      v54 = *(_QWORD *)(v0 + 184);
      v56 = *(_QWORD *)(v0 + 136);
      v55 = *(_QWORD *)(v0 + 144);
      v57 = *(_QWORD *)(v0 + 128);
      if (v51)
      {
        type = v50;
        v100 = *(_QWORD *)(v0 + 192);
        v58 = (uint8_t *)swift_slowAlloc();
        v97 = swift_slowAlloc();
        v103[0] = v97;
        *(_DWORD *)v58 = 136315138;
        v99 = v56;
        v59 = objc_msgSend(v2, sel_allHeaderFields);
        sub_23EC2E720();

        v60 = sub_23EC2E72C();
        v62 = v61;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 40) = sub_23EBAE6D4(v60, v62, v103);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_23EB9F000, v49, type, "Headers: %s", v58, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v97, -1, -1);
        MEMORY[0x24265B940](v58, -1, -1);

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v54, v100);

        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v55, v57);
      }
      else
      {

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v54, v52);

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      }
      goto LABEL_54;
    case 0x192uLL:
    case 0x193uLL:
    case 0x194uLL:
    case 0x195uLL:
    case 0x196uLL:
    case 0x197uLL:
    case 0x198uLL:
    case 0x199uLL:
    case 0x19AuLL:
    case 0x19BuLL:
    case 0x19DuLL:
    case 0x19EuLL:
    case 0x19FuLL:
    case 0x1A0uLL:
    case 0x1A1uLL:
    case 0x1A2uLL:
    case 0x1A3uLL:
    case 0x1A4uLL:
    case 0x1A5uLL:
    case 0x1A6uLL:
    case 0x1A7uLL:
    case 0x1A8uLL:
    case 0x1A9uLL:
    case 0x1AAuLL:
    case 0x1ABuLL:
    case 0x1ACuLL:
      goto LABEL_24;
    case 0x19CuLL:
      if (*(_QWORD *)(v0 + 88))
      {
        if (qword_256DB71F0 != -1)
          swift_once();
        v63 = sub_23EC2E684();
        __swift_project_value_buffer(v63, (uint64_t)qword_256DC7720);
        v64 = sub_23EC2E66C();
        v65 = sub_23EC2EA08();
        if (os_log_type_enabled(v64, v65))
        {
          v66 = (uint8_t *)swift_slowAlloc();
          v67 = swift_slowAlloc();
          v103[0] = v67;
          *(_DWORD *)v66 = 136315138;
          *(_QWORD *)(v0 + 32) = sub_23EBAE6D4(0xD000000000000051, 0x800000023EC3A930, v103);
          sub_23EC2EA68();
          _os_log_impl(&dword_23EB9F000, v64, v65, "%s", v66, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24265B940](v67, -1, -1);
          MEMORY[0x24265B940](v66, -1, -1);
        }
      }
      else
      {
        if (qword_256DB71F0 != -1)
          swift_once();
        v87 = sub_23EC2E684();
        __swift_project_value_buffer(v87, (uint64_t)qword_256DC7720);
        v64 = sub_23EC2E66C();
        v88 = sub_23EC2EA08();
        if (os_log_type_enabled(v64, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc();
          v90 = swift_slowAlloc();
          v103[0] = v90;
          *(_DWORD *)v89 = 136315138;
          *(_QWORD *)(v0 + 24) = sub_23EBAE6D4(0xD000000000000056, 0x800000023EC3A8D0, v103);
          sub_23EC2EA68();
          _os_log_impl(&dword_23EB9F000, v64, v88, "%s", v89, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24265B940](v90, -1, -1);
          MEMORY[0x24265B940](v89, -1, -1);
        }
      }

      v91 = *(_QWORD *)(v0 + 192);
      v14 = *(void **)(v0 + 200);
      v92 = *(_QWORD *)(v0 + 184);
      v17 = *(_QWORD *)(v0 + 136);
      v16 = *(_QWORD *)(v0 + 144);
      v18 = *(_QWORD *)(v0 + 128);
      type metadata accessor for NetworkError();
      sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v92, v91);

      goto LABEL_13;
    case 0x1ADuLL:
      if (qword_256DB71F0 != -1)
        swift_once();
      v68 = sub_23EC2E684();
      __swift_project_value_buffer(v68, (uint64_t)qword_256DC7720);
      v6 = sub_23EC2E66C();
      v69 = sub_23EC2EA08();
      if (os_log_type_enabled(v6, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v70 = 0;
        _os_log_impl(&dword_23EB9F000, v6, v69, "TOO MANY REQUESTS | Server rejected calls cause of too many requests being made", v70, 2u);
        MEMORY[0x24265B940](v70, -1, -1);
      }
LABEL_44:
      v71 = *(_QWORD *)(v0 + 192);
      v72 = *(void **)(v0 + 200);
      v73 = *(_QWORD *)(v0 + 184);
      v75 = *(_QWORD *)(v0 + 136);
      v74 = *(_QWORD *)(v0 + 144);
      v76 = *(_QWORD *)(v0 + 128);

      type metadata accessor for NetworkError();
      sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_23EBA3EDC(v73, v71);

      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v76);
      goto LABEL_54;
    default:
      if (v4 == (id)500)
      {
        if (qword_256DB71F0 != -1)
          swift_once();
        v77 = sub_23EC2E684();
        __swift_project_value_buffer(v77, (uint64_t)qword_256DC7720);
        v78 = sub_23EC2E66C();
        v79 = sub_23EC2EA08();
        if (os_log_type_enabled(v78, v79))
        {
          v80 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v80 = 0;
          _os_log_impl(&dword_23EB9F000, v78, v79, "Internal Server Error", v80, 2u);
          MEMORY[0x24265B940](v80, -1, -1);
        }
        v82 = *(_QWORD *)(v0 + 192);
        v81 = *(void **)(v0 + 200);
        v83 = *(_QWORD *)(v0 + 184);
        v84 = *(_QWORD *)(v0 + 136);
        v101 = *(_QWORD *)(v0 + 128);
        v102 = *(_QWORD *)(v0 + 144);

        goto LABEL_52;
      }
      if (v4 != (id)201)
      {
LABEL_24:
        if (qword_256DB71E0 != -1)
          swift_once();
        v35 = *(void **)(v0 + 200);
        v36 = sub_23EC2E684();
        __swift_project_value_buffer(v36, (uint64_t)qword_256DC76F0);
        v37 = v35;
        v38 = sub_23EC2E66C();
        v39 = sub_23EC2EA08();
        v40 = os_log_type_enabled(v38, v39);
        v41 = *(void **)(v0 + 200);
        if (v40)
        {
          v42 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v42 = 134217984;
          *(_QWORD *)(v0 + 16) = objc_msgSend(v2, sel_statusCode);
          sub_23EC2EA68();

          _os_log_impl(&dword_23EB9F000, v38, v39, "Request failed : Status Code %ld", v42, 0xCu);
          MEMORY[0x24265B940](v42, -1, -1);
        }
        else
        {

        }
        v82 = *(_QWORD *)(v0 + 192);
        v81 = *(void **)(v0 + 200);
        v83 = *(_QWORD *)(v0 + 184);
        v84 = *(_QWORD *)(v0 + 136);
        v101 = *(_QWORD *)(v0 + 128);
        v102 = *(_QWORD *)(v0 + 144);
LABEL_52:
        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        swift_allocError();
        *v85 = objc_msgSend(v2, sel_statusCode);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        sub_23EBA3EDC(v83, v82);

        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v102, v101);
        goto LABEL_54;
      }
      if (qword_256DB71F0 != -1)
        swift_once();
      v20 = sub_23EC2E684();
      __swift_project_value_buffer(v20, (uint64_t)qword_256DC7720);
      v21 = sub_23EC2E66C();
      v22 = sub_23EC2EA14();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_23EB9F000, v21, v22, "Address Verification Response received", v23, 2u);
        MEMORY[0x24265B940](v23, -1, -1);
      }
      v24 = *(void **)(v0 + 208);

      sub_23EC2DFC4();
      swift_allocObject();
      sub_23EC2DFB8();
      type metadata accessor for UtilitySubscriptionTokenSet();
      sub_23EBC0AD4(&qword_256DB7BF0, (uint64_t (*)(uint64_t))type metadata accessor for UtilitySubscriptionTokenSet, (uint64_t)&protocol conformance descriptor for UtilitySubscriptionTokenSet);
      sub_23EC2DFAC();
      if (v24)
      {
        v25 = v24;
        swift_release();
        v26 = sub_23EC2E66C();
        v27 = sub_23EC2EA08();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_23EB9F000, v26, v27, "Error while decoding response from server", v28, 2u);
          MEMORY[0x24265B940](v28, -1, -1);
        }
        v29 = *(_QWORD *)(v0 + 192);
        v30 = *(void **)(v0 + 200);
        v31 = *(_QWORD *)(v0 + 184);
        v33 = *(_QWORD *)(v0 + 136);
        v32 = *(_QWORD *)(v0 + 144);
        v34 = *(_QWORD *)(v0 + 128);

        sub_23EC244A4(v25);
        swift_willThrow();
        sub_23EBA3EDC(v31, v29);

        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_54:
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v93 = *(_QWORD *)(v0 + 192);
      v94 = *(void **)(v0 + 200);
      v95 = *(_QWORD *)(v0 + 184);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));

      swift_release();
      sub_23EBA3EDC(v95, v93);
      v96 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v96);
  }
}

uint64_t sub_23EC1C63C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC1C68C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_23EC2E3F0();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v4 = sub_23EC2DFA0();
  v2[7] = v4;
  v2[8] = *(_QWORD *)(v4 - 8);
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v2[10] = swift_task_alloc();
  v5 = sub_23EC2E264();
  v2[11] = v5;
  v2[12] = *(_QWORD *)(v5 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC1C770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor + 56))
  {
    v1 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    sub_23EC2E240();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
    {
      v12 = *(_QWORD *)(v0 + 104);
      v11 = *(_QWORD *)(v0 + 112);
      v13 = *(_QWORD *)(v0 + 88);
      v14 = *(_QWORD *)(v0 + 96);
      v15 = *(_QWORD *)(v0 + 72);
      v16 = *(_QWORD *)(v0 + 48);
      v20 = *(_QWORD *)(v0 + 64);
      v21 = *(_QWORD *)(v0 + 56);
      v18 = *(_QWORD *)(v0 + 32);
      v17 = *(_QWORD *)(v0 + 40);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v11, *(_QWORD *)(v0 + 80), v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
      sub_23EC2DF58();
      sub_23EC2DF40();
      sub_23EC2E3E4();
      sub_23EC2E3D8();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      sub_23EC2E7D4();
      swift_bridgeObjectRelease();
      sub_23EC2DF70();
      swift_bridgeObjectRelease();
      sub_23EC2BCBC(v15, 0);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v15, v21);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
      goto LABEL_10;
    }
    sub_23EBE1350(*(_QWORD *)(v0 + 80));
  }
  if (qword_256DB71E8 != -1)
    swift_once();
  v4 = sub_23EC2E684();
  __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
  v5 = sub_23EC2E66C();
  v6 = sub_23EC2EA08();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate send OTP URL for TAF Flow.", v7, 2u);
    MEMORY[0x24265B940](v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC1CA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  v5 = sub_23EC2E3F0();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  v6 = sub_23EC2DFA0();
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v4[21] = swift_task_alloc();
  v7 = sub_23EC2E264();
  v4[22] = v7;
  v4[23] = *(_QWORD *)(v7 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC1CB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor + 56))
    goto LABEL_4;
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  sub_23EC2E240();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBE1350(*(_QWORD *)(v0 + 168));
LABEL_4:
    if (qword_256DB71E8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to generate verify OTP URL for TAF Flow.", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 32))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23EC2FB70;
  *(_QWORD *)(inited + 32) = 0x65646F4373736170;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v12;
  swift_bridgeObjectRetain();
  sub_23EBA7540(inited);
  v15 = (void *)objc_opt_self();
  v16 = (void *)sub_23EC2E714();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = 0;
  v17 = objc_msgSend(v15, sel_dataWithJSONObject_options_error_, v16, 0, v0 + 80);

  v18 = *(id *)(v0 + 80);
  if (v17)
  {
    v20 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 176);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 136);
    v43 = *(_QWORD *)(v0 + 144);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 120);
    v25 = sub_23EC2E2D0();
    v27 = v26;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, v19, v21);
    sub_23EC2DF58();
    sub_23EC2DF40();
    sub_23EBA3E98(v25, v27);
    sub_23EC2DF88();
    sub_23EC2E3E4();
    sub_23EC2E3D8();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v41);
    sub_23EC2E7D4();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2BCBC(v23, 1);
    sub_23EBA3EDC(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v23, v43);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
  }
  else
  {
    v28 = v18;
    v29 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB71E8 != -1)
      swift_once();
    v30 = sub_23EC2E684();
    __swift_project_value_buffer(v30, (uint64_t)qword_256DC7708);
    v31 = sub_23EC2E66C();
    v32 = sub_23EC2EA08();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_23EB9F000, v31, v32, "Unable to encode TAF OTP Passcode", v33, 2u);
      MEMORY[0x24265B940](v33, -1, -1);
    }
    v34 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 176);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 144);
    v38 = *(_QWORD *)(v0 + 152);
    v39 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1, 1, v37);
  }
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static UtilityServices.searchUtilitiesNearLocation(_:)()
{
  uint64_t v0;

  return sub_23EC1D1C0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t static UtilityServices.getUtilityInformation(_:)()
{
  uint64_t v0;

  return sub_23EC1D1C0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_23EC1D1C0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_23EC1D300(int a1, void *aBlock)
{
  uint64_t v2;
  void *v3;

  v3 = _Block_copy(aBlock);
  (*((void (**)(void *, _QWORD, _QWORD))v3 + 2))(v3, 0, 0);
  _Block_release(v3);
  return sub_23EC2005C(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t static UtilityServices.authorizeAndSubscribeToSinglePremise(_:utilityID:authCode:)()
{
  uint64_t v0;

  return sub_23EC1D1C0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_23EC1D4AC(int a1, int a2, int a3, void *aBlock)
{
  uint64_t v4;
  void *v5;

  v5 = _Block_copy(aBlock);
  (*((void (**)(void *, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
  _Block_release(v5);
  return sub_23EC2005C(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t static UtilityServices.tafAuthorizeAndSubscribeToSinglePremise(_:utilityID:fields:)()
{
  uint64_t v0;

  return sub_23EC1D1C0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t static UtilityServices.subscribePremiseToUsageData(_:utilityID:utilityHomeID:)()
{
  uint64_t v0;

  return sub_23EC1D1C0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t sub_23EC1D7B4(int a1, int a2, int a3, void *aBlock)
{
  uint64_t v4;
  void *v5;

  v5 = _Block_copy(aBlock);
  (*((void (**)(void *, _QWORD, _QWORD))v5 + 2))(v5, 0, 0);
  _Block_release(v5);
  return sub_23EC2005C(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t UtilitySubscriptionService.createUtilitySubscription(serviceLocation:accessToken:siteID:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = v6;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23EC1D824()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(v0[2] + OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID);
  v3 = *v1;
  v2 = v1[1];
  v4 = (uint64_t *)(*(_QWORD *)(v0[6] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                             + dword_256DB7E88);
  v5 = *v4;
  v6 = v4[1];
  v0[7] = v6;
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_23EC1D8F4;
  return v9(v3, v2, v0[3], v0[4], v5, v6, v0[5]);
}

uint64_t sub_23EC1D8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 72) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EC1D97C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC1DB04(void *a1, int a2, int a3, void *a4, void *aBlock, void *a6)
{
  _QWORD *v6;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v6[3] = a4;
  v6[4] = a6;
  v6[2] = a1;
  v6[5] = _Block_copy(aBlock);
  v6[6] = sub_23EC2E780();
  v6[7] = v10;
  v11 = a1;
  v12 = a4;
  v13 = a6;
  return swift_task_switch();
}

uint64_t sub_23EC1DB7C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (uint64_t *)(v0[2] + OBJC_IVAR____TtC19HomeUtilityServices22UtilityServiceLocation_serviceLocationID);
  v3 = *v1;
  v2 = v1[1];
  v4 = (uint64_t *)(*(_QWORD *)(v0[4] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                             + dword_256DB7E88);
  v5 = *v4;
  v6 = v4[1];
  v0[8] = v6;
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_23EC1DC4C;
  return v9(v3, v2, v0[6], v0[7], v5, v6, v0[3]);
}

uint64_t sub_23EC1DC4C(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;
  void *v8;
  void *v9;

  v4 = *v2;
  *(_QWORD *)(v4 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v7 = *(void **)(v4 + 32);
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v4 + 40);
  v8 = *(void **)(v4 + 16);
  v9 = *(void **)(v4 + 24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *, _QWORD))v6)[2](v6, a1, 0);
  _Block_release(v6);

  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_23EC1DD18()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(void **)(v0 + 80);
  v3 = *(void **)(v0 + 32);
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 40);
  v5 = *(void **)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v6 = (void *)sub_23EC2E1C8();

  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v6);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t UtilitySubscriptionService.verifyOTPForAccount(factor:oneTimePasscode:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = sub_23EC2E3F0();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC1DE14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[10];
  v3 = v0[11];
  v2 = v0[12];
  v4 = (uint64_t *)(*(_QWORD *)(v0[9] + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v5 = *v4;
  v6 = v4[1];
  v0[13] = v6;
  swift_bridgeObjectRetain();
  sub_23EC2E3E4();
  v7 = sub_23EC2E3D8();
  v0[14] = v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  v9 = (_QWORD *)swift_task_alloc();
  v0[15] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = sub_23EC1DEF4;
  return sub_23EC14BA8((uint64_t)(v0 + 2), v0[5], v0[6], v0[7], v0[8], v5, v6, v7);
}

uint64_t sub_23EC1DEF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23EC1DF68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 24);

    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
  }
  else
  {
    if (qword_256DB71E8 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC7708);
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA08();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23EB9F000, v6, v7, "TAF Account Verification(OTP) failed | No authorization code.", v8, 2u);
      MEMORY[0x24265B940](v8, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23EC1E0F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC1E29C(void *a1, int a2, void *a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;

  v5[3] = a3;
  v5[4] = a5;
  v5[2] = a1;
  v5[5] = _Block_copy(aBlock);
  v9 = sub_23EC2E780();
  v11 = v10;
  v5[6] = v10;
  v12 = a1;
  v13 = a3;
  a5;
  v14 = (_QWORD *)swift_task_alloc();
  v5[7] = v14;
  *v14 = v5;
  v14[1] = sub_23EC1E354;
  return UtilitySubscriptionService.verifyOTPForAccount(factor:oneTimePasscode:_:)((uint64_t)v12, v9, v11, (uint64_t)v13);
}

uint64_t sub_23EC1E354()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (**v11)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v5 = *(void **)(*v1 + 24);
  v4 = *(void **)(*v1 + 32);
  v6 = *(void **)(*v1 + 16);
  v7 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0)
  {
    v8 = sub_23EC2E1C8();

    v9 = 0;
    v10 = (void *)v8;
  }
  else
  {
    v9 = sub_23EC2E774();
    swift_bridgeObjectRelease();
    v8 = 0;
    v10 = (void *)v9;
  }
  v11 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 40);
  v11[2](v11, v9, v8);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t UtilitySubscriptionService.createUtilitySubscription(serviceLocationID:accessToken:siteID:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8F98 + dword_256DB8F98);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v13;
  *v13 = v7;
  v13[1] = sub_23EBA608C;
  return v15(a1, a2, a3, a4, a7);
}

uint64_t sub_23EC1E628(int a1, int a2, int a3, void *a4, void *aBlock, void *a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6[2] = a4;
  v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  v9 = sub_23EC2E780();
  v11 = v10;
  v6[5] = v10;
  v12 = sub_23EC2E780();
  v14 = v13;
  v6[6] = v13;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8F98 + dword_256DB8F98);
  v15 = a4;
  a6;
  v16 = (_QWORD *)swift_task_alloc();
  v6[7] = v16;
  *v16 = v6;
  v16[1] = sub_23EC1E708;
  return v18(v9, v11, v12, v14, (uint64_t)v15);
}

uint64_t sub_23EC1E708(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  void *v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v3 = v1;
  v6 = *(void **)(*v2 + 16);
  v5 = *(void **)(*v2 + 24);
  v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v7 + 32);
  if (v3)
  {
    v9 = (void *)sub_23EC2E1C8();

    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](*(_QWORD *)(v7 + 32), a1, 0);
    _Block_release(v8);

  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t UtilitySubscriptionService.createUtilitySubscription(serviceLocationID:accessToken:zoneName:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8FA8 + dword_256DB8FA8);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v13;
  *v13 = v7;
  v13[1] = sub_23EBB2154;
  return v15(a1, a2, a3, a4, a7);
}

uint64_t sub_23EC1E9D4(int a1, int a2, int a3, void *a4, void *aBlock, void *a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v6[2] = a4;
  v6[3] = a6;
  v6[4] = _Block_copy(aBlock);
  v9 = sub_23EC2E780();
  v11 = v10;
  v6[5] = v10;
  v12 = sub_23EC2E780();
  v14 = v13;
  v6[6] = v13;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB8FA8 + dword_256DB8FA8);
  v15 = a4;
  a6;
  v16 = (_QWORD *)swift_task_alloc();
  v6[7] = v16;
  *v16 = v6;
  v16[1] = sub_23EC200DC;
  return v18(v9, v11, v12, v14, (uint64_t)v15);
}

uint64_t static UtilitySubscriptionService.resendHistoricalData(accessToken:subscriptionID:utilityID:start:end:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_256DB8FB8 + dword_256DB8FB8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v11;
  *v11 = v8;
  v11[1] = sub_23EBDFE20;
  return v13(a7, a8);
}

uint64_t sub_23EC1EC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (__cdecl *v16)();

  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  v10 = swift_task_alloc();
  v7[2] = v10;
  v11 = sub_23EC2E3CC();
  v7[3] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[4] = v12;
  v7[5] = swift_task_alloc();
  v7[6] = _Block_copy(a7);
  sub_23EC2E390();
  if (a5)
  {
    sub_23EC2E390();
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v13, 1, v11);
  v16 = (uint64_t (__cdecl *)())((char *)&dword_256DB8FB8 + dword_256DB8FB8);
  v14 = (_QWORD *)swift_task_alloc();
  v7[7] = v14;
  *v14 = v7;
  v14[1] = sub_23EC1EDB0;
  return v16();
}

uint64_t sub_23EC1EDB0(char a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = *v2;
  swift_task_dealloc();
  v6 = *(_QWORD *)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 32);
  sub_23EBA3038(*(_QWORD *)(v4 + 16), &qword_25433F948);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (v1)
  {
    v9 = (void *)sub_23EC2E1C8();

    (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 16))(v5, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v4 + 48));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t static UtilitySubscriptionService.revokeSubscription(accessToken:subscriptionID:utilityID:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_256DB8FC8 + dword_256DB8FC8);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23EBDE7D4;
  return v3();
}

uint64_t sub_23EC1F044(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (__cdecl *v8)();

  *(_QWORD *)(v5 + 16) = _Block_copy(aBlock);
  v8 = (uint64_t (__cdecl *)())((char *)&dword_256DB8FC8 + dword_256DB8FC8);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = v5;
  v6[1] = sub_23EC1F0A8;
  return v8();
}

uint64_t sub_23EC1F0A8(char a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 16);
  if (v1)
  {
    v6 = (void *)sub_23EC2E1C8();

    (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, 0, v6);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 16), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v4 + 16));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_23EC1F14C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_23EBA7408;
  return v6();
}

uint64_t sub_23EC1F1A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_23EBA7408;
  return v7();
}

uint64_t sub_23EC1F1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23EC2E9A8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23EC2E99C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_23EBA3038(a1, &qword_256DB7438);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23EC2E978();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_23EC1F340(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23EC1F3A4;
  return v6(a1);
}

uint64_t sub_23EC1F3A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23EC1F3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EC1F410()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (qword_25433FAF8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_25433FC98);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = v0[7];

  v6 = (uint64_t *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v8 = *v6;
  v7 = v6[1];
  v0[8] = v7;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                              + dword_256DB7E88);
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23EBDD750;
  return v11(v0[2], v0[3], v0[4], v0[5], v8, v7, v0[6]);
}

uint64_t sub_23EC1F56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23EC1F58C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (qword_25433FAF8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_25433FC98);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    MEMORY[0x24265B940](v4, -1, -1);
  }
  v5 = v0[7];

  v6 = (uint64_t *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC19HomeUtilityServices26UtilitySubscriptionService_configuration)
                 + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v8 = *v6;
  v7 = v6[1];
  v0[8] = v7;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256DB7E88
                                                                                              + dword_256DB7E88);
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23EC1F6E8;
  return v11(v0[2], v0[3], v0[4], v0[5], v8, v7, v0[6]);
}

uint64_t sub_23EC1F6E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 80) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23EC1F770()
{
  return swift_task_switch();
}

uint64_t sub_23EC1F784()
{
  return swift_task_switch();
}

uint64_t sub_23EC1F798()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_25433FAF8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_25433FC98);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23EB9F000, v2, v3, "This API has been deprecated and use of this API will result in request failure.", v4, 2u);
    MEMORY[0x24265B940](v4, -1, -1);
  }

  type metadata accessor for NetworkError();
  sub_23EBCBFD0();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_23EC1F8BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_23EC1F900()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, int, void *))((char *)&dword_256DB8FD0 + dword_256DB8FD0))(v2, v3, v4, v5, v6);
}

uint64_t sub_23EC1F994()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23EC1F9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23EBA724C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256DB8FF0 + dword_256DB8FF0))(a1, v4);
}

uint64_t sub_23EC1FA28()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 64));
  return swift_deallocObject();
}

uint64_t sub_23EC1FA7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  _QWORD *v9;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v8 = (const void *)v0[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_23EBA7408;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))((char *)&dword_256DB9000 + dword_256DB9000))(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_23EC1FB28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v7 = (void *)v0[6];
  v6 = (void *)v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *, void *, void *))((char *)&dword_256DB9010 + dword_256DB9010))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_23EC1FBC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v7 = (void *)v0[6];
  v6 = (void *)v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *, void *, void *))((char *)&dword_256DB9030 + dword_256DB9030))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_23EC1FC54()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23EC1FC98()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_23EBA7408;
  return ((uint64_t (*)(void *, int, void *, void *, void *))((char *)&dword_256DB9050 + dword_256DB9050))(v2, v3, v4, v5, v6);
}

uint64_t objectdestroy_46Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_23EC1FD70()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v2 = (void *)v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v7 = (void *)v0[6];
  v6 = (void *)v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_23EBA724C;
  return ((uint64_t (*)(void *, int, int, void *, void *, void *))((char *)&dword_256DB9070 + dword_256DB9070))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_23EC1FE08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *))((char *)&dword_256DB9090 + dword_256DB9090))(v2, v3, v4, v5);
}

uint64_t sub_23EC1FE94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *))((char *)&dword_256DB90B0 + dword_256DB90B0))(v2, v3, v4, v5);
}

uint64_t objectdestroy_106Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23EC1FF5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, int, int, void *))((char *)&dword_256DB90D0 + dword_256DB90D0))(v2, v3, v4, v5);
}

uint64_t sub_23EC1FFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *))((char *)&dword_256DB90F0 + dword_256DB90F0))(v2, v3);
}

uint64_t sub_23EC2005C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23EC20068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23EBA7408;
  return ((uint64_t (*)(int, void *))((char *)&dword_256DB9110 + dword_256DB9110))(v2, v3);
}

Swift::String __swiftcall CLLocationCoordinate2D.geohash(length:)(Swift::Int length)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t inited;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  type metadata accessor for Geohash();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  v7 = sub_23EC204F4(length, v4, v3);
  v9 = v8;
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7;
  v11 = v9;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t type metadata accessor for Geohash()
{
  return objc_opt_self();
}

int64_t sub_23EC20198(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

double sub_23EC201DC(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  uint64_t v9;

  swift_bridgeObjectRetain();
  v4 = sub_23EC2E84C();
  if (v5)
  {
    v6 = v5;
    do
    {
      v8 = (a1 + a2) * 0.5;
      if (v4 == 49 && v6 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = sub_23EC2ED38();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
        {
          a2 = (a1 + a2) * 0.5;
          v8 = a1;
        }
      }
      v4 = sub_23EC2E84C();
      v6 = v9;
      a1 = v8;
    }
    while (v9);
  }
  else
  {
    v8 = a1;
  }
  swift_bridgeObjectRelease();
  return v8;
}

Swift::String __swiftcall CLLocation.geohash(length:)(Swift::Int length)
{
  void *v1;
  uint64_t inited;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  type metadata accessor for Geohash();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  objc_msgSend(v1, sel_coordinate);
  v5 = v4;
  objc_msgSend(v1, sel_coordinate);
  v7 = sub_23EC204F4(length, v5, v6);
  v9 = v8;
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v7;
  v11 = v9;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

CLLocation __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CLLocation.init(geohash:)(Swift::String geohash)
{
  uint64_t v1;
  objc_class *object;
  uint64_t countAndFlagsBits;
  uint64_t inited;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  objc_class *v14;
  CLLocation result;

  object = (objc_class *)geohash._object;
  countAndFlagsBits = geohash._countAndFlagsBits;
  type metadata accessor for Geohash();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  sub_23EC20D78(countAndFlagsBits, (unint64_t)object);
  if (v1)
  {
    swift_setDeallocating();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = v8;
    swift_bridgeObjectRelease();
    object = (objc_class *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithLatitude_longitude_, (v10 + v11) * 0.5, (v12 + v13) * 0.5);
    swift_setDeallocating();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = object;
  result._internal = v9;
  result.super.isa = v14;
  return result;
}

uint64_t static Geohash.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t Geohash.Error.hash(into:)()
{
  return sub_23EC2EDBC();
}

uint64_t Geohash.Error.hashValue.getter()
{
  sub_23EC2EDB0();
  sub_23EC2EDBC();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC204F4(uint64_t result, double a2, double a3)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  double v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  double v13;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  _QWORD *v24;
  double v25;
  double v26;
  _QWORD *v27;
  _QWORD *v28;
  double v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  int64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = ceil((double)result * 5.0 * 0.5);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_77:
    __break(1u);
    return result;
  }
  v75 = result;
  v78 = (uint64_t)v4;
  v5 = sub_23EC20C88((uint64_t)v4, a2);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (double *)(v5 + 32);
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v9 = -90.0;
    v10 = 90.0;
    do
    {
      v13 = *v7;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = v8;
      if (v13 >= (v10 + v9) * 0.5)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v15 = sub_23EC218C0(0, v8[2] + 1, 1, v8);
        v20 = v15[2];
        v19 = v15[3];
        if (v20 >= v19 >> 1)
          v15 = sub_23EC218C0((_QWORD *)(v19 > 1), v20 + 1, 1, v15);
        v15[2] = v20 + 1;
        v11 = &v15[2 * v20];
        v11[4] = 49;
        v12 = v11 + 4;
        v9 = (v10 + v9) * 0.5;
      }
      else
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v15 = sub_23EC218C0(0, v8[2] + 1, 1, v8);
        v17 = v15[2];
        v16 = v15[3];
        if (v17 >= v16 >> 1)
          v15 = sub_23EC218C0((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
        v15[2] = v17 + 1;
        v18 = &v15[2 * v17];
        v18[4] = 48;
        v12 = v18 + 4;
        v10 = (v10 + v9) * 0.5;
      }
      v12[1] = 0xE100000000000000;
      swift_bridgeObjectRelease();
      ++v7;
      v8 = v15;
      --v6;
    }
    while (v6);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v21 = sub_23EC20C88(v78, a3);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = (double *)(v21 + 32);
    v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v25 = -180.0;
    v26 = 180.0;
    do
    {
      v29 = *v23;
      swift_bridgeObjectRetain();
      v30 = swift_isUniquelyReferenced_nonNull_native();
      v31 = v24;
      if (v29 >= (v26 + v25) * 0.5)
      {
        if ((v30 & 1) == 0)
          v31 = sub_23EC218C0(0, v24[2] + 1, 1, v24);
        v36 = v31[2];
        v35 = v31[3];
        if (v36 >= v35 >> 1)
          v31 = sub_23EC218C0((_QWORD *)(v35 > 1), v36 + 1, 1, v31);
        v31[2] = v36 + 1;
        v27 = &v31[2 * v36];
        v27[4] = 49;
        v28 = v27 + 4;
        v25 = (v26 + v25) * 0.5;
      }
      else
      {
        if ((v30 & 1) == 0)
          v31 = sub_23EC218C0(0, v24[2] + 1, 1, v24);
        v33 = v31[2];
        v32 = v31[3];
        if (v33 >= v32 >> 1)
          v31 = sub_23EC218C0((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
        v31[2] = v33 + 1;
        v34 = &v31[2 * v33];
        v34[4] = 48;
        v28 = v34 + 4;
        v26 = (v26 + v25) * 0.5;
      }
      v28[1] = 0xE100000000000000;
      swift_bridgeObjectRelease();
      ++v23;
      v24 = v31;
      --v22;
    }
    while (v22);
  }
  else
  {
    v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v77 = v31[2];
  if (v77)
  {
    result = swift_bridgeObjectRetain();
    v37 = 0;
    v38 = 0;
    v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v76 = v15;
    while (v38 < v15[2])
    {
      v40 = v39[2];
      v41 = v40 + 2;
      if (__OFADD__(v40, 2))
        goto LABEL_72;
      v42 = v31[v37 + 4];
      v43 = v31[v37 + 5];
      v44 = v15[v37 + 5];
      v79 = v15[v37 + 4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)v45 || v41 > v39[3] >> 1)
      {
        if (v40 <= v41)
          v46 = v40 + 2;
        else
          v46 = v40;
        v39 = sub_23EC218C0(v45, v46, 1, v39);
      }
      v48 = v39[2];
      v47 = v39[3];
      v49 = v48 + 1;
      swift_bridgeObjectRetain();
      if (v48 >= v47 >> 1)
        v39 = sub_23EC218C0((_QWORD *)(v47 > 1), v48 + 1, 1, v39);
      v39[2] = v49;
      v50 = &v39[2 * v48];
      v50[4] = v42;
      v50[5] = v43;
      v51 = v39[3];
      swift_bridgeObjectRetain();
      if (v49 >= v51 >> 1)
        v39 = sub_23EC218C0((_QWORD *)(v51 > 1), v48 + 2, 1, v39);
      v15 = v76;
      ++v38;
      v39[2] = v48 + 2;
      v52 = &v39[2 * v49];
      v52[4] = v79;
      v52[5] = v44;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v37 += 2;
      if (v77 == v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  swift_bridgeObjectRelease();
  v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_51:
  swift_bridgeObjectRelease();
  v53 = v39[2];
  if (v53)
  {
    swift_bridgeObjectRetain();
    v54 = 0;
    v55 = 0;
    v56 = v39 + 5;
    v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      result = sub_23EC2E8C4();
      v59 = result;
      v61 = v60;
      if (v54 + 5 * (v55 / 5))
      {
        if (!v57[2])
          goto LABEL_73;
        result = swift_isUniquelyReferenced_nonNull_native();
        v62 = v57;
        if ((result & 1) != 0)
        {
          v63 = v57[2];
          if (!v63)
            goto LABEL_74;
        }
        else
        {
          result = (uint64_t)sub_23EC22C84(v57);
          v62 = (_QWORD *)result;
          v63 = *(_QWORD *)(result + 16);
          if (!v63)
            goto LABEL_74;
        }
        v64 = v63 - 1;
        v65 = &v62[2 * v64];
        v67 = v65[4];
        v66 = v65[5];
        v62[2] = v64;
        v80 = v67;
        v81 = v66;
        sub_23EC2E834();
        swift_bridgeObjectRelease();
        v69 = v62[2];
        v68 = v62[3];
        if (v69 >= v68 >> 1)
          v62 = sub_23EC218C0((_QWORD *)(v68 > 1), v69 + 1, 1, v62);
        v62[2] = v69 + 1;
        v58 = &v62[2 * v69];
        v58[4] = v80;
        v58[5] = v81;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v57 = v62;
      }
      else
      {
        v70 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v70 = sub_23EC218C0(0, v57[2] + 1, 1, v57);
        v72 = v70[2];
        v71 = v70[3];
        if (v72 >= v71 >> 1)
          v70 = sub_23EC218C0((_QWORD *)(v71 > 1), v72 + 1, 1, v70);
        v70[2] = v72 + 1;
        v73 = &v70[2 * v72];
        v73[4] = v59;
        v73[5] = v61;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v57 = v70;
      }
      v56 += 2;
      ++v55;
      --v54;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v57 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_retain();
  v74 = sub_23EC230BC((uint64_t)v57);
  swift_bridgeObjectRelease();
  swift_release();
  sub_23EC20198(v75, (uint64_t)v74);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9120);
  sub_23EBF5FFC(&qword_256DB9128, &qword_256DB9120, MEMORY[0x24BEE2180]);
  return sub_23EC2E8B8();
}

uint64_t sub_23EC20C88(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_23EC2EBF4();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_23EC2E960();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_23EC20D78(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRetain();
  v4 = sub_23EC2E810();
  if (v4)
  {
    v5 = v4;
    v6 = sub_23EC22D50(v4, 0);
    swift_bridgeObjectRetain();
    v7 = sub_23EC22C98(&v21, v6 + 4, v5, a1, a2);
    result = swift_bridgeObjectRelease();
    if (v7 != (_QWORD *)v5)
      goto LABEL_24;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  v9 = v6[2];
  if (v9)
  {
    swift_retain();
    v10 = v6 + 5;
    do
    {
      v12 = *(v10 - 1);
      v11 = *v10;
      swift_bridgeObjectRetain_n();
      if (*(_QWORD *)(sub_23EC210C0() + 16) && (sub_23EBE9B24(v12, v11), (v13 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23EC2E834();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
    swift_release_n();
    v14 = v21;
    v15 = v22;
  }
  else
  {
    swift_release();
    v14 = 0;
    v15 = 0xE000000000000000;
  }
  if (0xCCCCCCCCCCCCCCCDLL * sub_23EC2E810() + 0x1999999999999999 >= 0x3333333333333333)
  {
    swift_bridgeObjectRelease();
    sub_23EC23224();
    swift_allocError();
    return swift_willThrow();
  }
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = v14 & 0xFFFFFFFFFFFFLL;
  v21 = v14;
  v22 = v15;
  v23 = 0;
  v24 = v16;
  swift_bridgeObjectRetain();
  result = sub_23EC2E84C();
  v18 = v17;
  if (!v17)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EC201DC(-90.0, 90.0);
    sub_23EC201DC(-180.0, 180.0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v19 = 0;
  while (!__OFADD__(v19, 1))
  {
    MEMORY[0x24265AE30](result, v18);
    swift_bridgeObjectRelease();
    result = sub_23EC2E84C();
    v18 = v20;
    ++v19;
    if (!v20)
      goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_23EC210C0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v1 = sub_23EC21118();
    *(_QWORD *)(v0 + 16) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EC21118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;

  v0 = sub_23EC2E84C();
  if (!v1)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_31:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  v2 = v0;
  v3 = v1;
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    sub_23EC23380();
    sub_23EC2E8AC();
    v9 = sub_23EC2E810();
    if ((unint64_t)(5 - v9 % 5) >= 5)
      v10 = -(v9 % 5);
    else
      v10 = 5 - v9 % 5;
    if (v10)
    {
      v11 = (_QWORD *)sub_23EC2E960();
      v11[2] = v10;
      v11[4] = 48;
      v11[5] = 0xE100000000000000;
      v12 = v10 - 1;
      if (v10 != 1)
      {
        v13 = v11 + 6;
        if (v10 < 5)
        {
          v14 = 1;
LABEL_17:
          v17 = v10 - v14;
          do
          {
            *v13 = 48;
            v13[1] = 0xE100000000000000;
            v13 += 2;
            --v17;
          }
          while (v17);
          goto LABEL_19;
        }
        v14 = v12 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v13 += 2 * (v12 & 0xFFFFFFFFFFFFFFFCLL);
        v15 = v11 + 10;
        v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *(v15 - 2) = xmmword_23EC36900;
          *(v15 - 1) = xmmword_23EC36900;
          *v15 = xmmword_23EC36900;
          v15[1] = xmmword_23EC36900;
          v15 += 4;
          v16 -= 4;
        }
        while (v16);
        if (v12 != (v12 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_17;
      }
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBF5FFC(&qword_256DB8858, &qword_25433FB20, MEMORY[0x24BEE12B0]);
    v18 = sub_23EC2E75C();
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = sub_23EBE9B24(v2, v3);
    v24 = v5[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_33;
    v27 = v22;
    if (v5[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v22 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_23EC22AB8();
        if ((v27 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_23EC22448(v26, isUniquelyReferenced_nonNull_native);
      v28 = sub_23EBE9B24(v2, v3);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_35;
      v23 = v28;
      if ((v27 & 1) != 0)
      {
LABEL_3:
        v6 = (uint64_t *)(v5[7] + 16 * v23);
        swift_bridgeObjectRelease();
        *v6 = v18;
        v6[1] = v20;
        goto LABEL_4;
      }
    }
    v5[(v23 >> 6) + 8] |= 1 << v23;
    v30 = (uint64_t *)(v5[6] + 16 * v23);
    *v30 = v2;
    v30[1] = v3;
    v31 = (uint64_t *)(v5[7] + 16 * v23);
    *v31 = v18;
    v31[1] = v20;
    v32 = v5[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_34;
    v5[2] = v34;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_23EC2E84C();
    v3 = v7;
    v4 = v8;
    if (!v7)
      goto LABEL_31;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = sub_23EC2ED68();
  __break(1u);
  return result;
}

uint64_t sub_23EC214A0()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v1 = sub_23EC214F8();
    *(_QWORD *)(v0 + 24) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23EC214F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;

  v0 = sub_23EC2E84C();
  if (!v1)
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_29:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  v2 = v0;
  v3 = v1;
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    sub_23EC23380();
    sub_23EC2E8AC();
    v9 = sub_23EC2E810();
    if ((unint64_t)(5 - v9 % 5) >= 5)
      v10 = -(v9 % 5);
    else
      v10 = 5 - v9 % 5;
    if (v10)
    {
      v11 = (_QWORD *)sub_23EC2E960();
      v11[2] = v10;
      v11[4] = 48;
      v11[5] = 0xE100000000000000;
      v12 = v10 - 1;
      if (v10 != 1)
      {
        v13 = v11 + 6;
        if (v10 < 5)
        {
          v14 = 1;
LABEL_17:
          v17 = v10 - v14;
          do
          {
            *v13 = 48;
            v13[1] = 0xE100000000000000;
            v13 += 2;
            --v17;
          }
          while (v17);
          goto LABEL_19;
        }
        v14 = v12 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v13 += 2 * (v12 & 0xFFFFFFFFFFFFFFFCLL);
        v15 = v11 + 10;
        v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *(v15 - 2) = xmmword_23EC36900;
          *(v15 - 1) = xmmword_23EC36900;
          *v15 = xmmword_23EC36900;
          v15[1] = xmmword_23EC36900;
          v15 += 4;
          v16 -= 4;
        }
        while (v16);
        if (v12 != (v12 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_17;
      }
    }
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB20);
    sub_23EBF5FFC(&qword_256DB8858, &qword_25433FB20, MEMORY[0x24BEE12B0]);
    v18 = sub_23EC2E75C();
    v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v20;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = sub_23EBE9A24(v18, v20);
    v25 = v5[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      goto LABEL_31;
    v28 = v23;
    if (v5[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_23EC22900();
    }
    else
    {
      sub_23EC22124(v27, isUniquelyReferenced_nonNull_native);
      v29 = sub_23EBE9A24(v18, v21);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_33;
      v24 = v29;
    }
    if ((v28 & 1) != 0)
    {
      v6 = (uint64_t *)(v5[7] + 16 * v24);
      swift_bridgeObjectRelease();
      *v6 = v2;
      v6[1] = v3;
    }
    else
    {
      v5[(v24 >> 6) + 8] |= 1 << v24;
      v31 = (uint64_t *)(v5[6] + 16 * v24);
      *v31 = v18;
      v31[1] = v21;
      v32 = (uint64_t *)(v5[7] + 16 * v24);
      *v32 = v2;
      v32[1] = v3;
      v33 = v5[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_32;
      v5[2] = v35;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_23EC2E84C();
    v3 = v7;
    v4 = v8;
    if (!v7)
      goto LABEL_29;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = sub_23EC2ED68();
  __break(1u);
  return result;
}

uint64_t Geohash.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Geohash.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *sub_23EC218C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23EC22DC4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23EC219CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBB0);
  v10 = *(_QWORD *)(sub_23EC2E03C() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_23EC2EBF4();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_23EC2E03C() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23EC22EB4(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_23EC21BD4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9248);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23EC22FCC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23EC21CE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9238);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23EC2344C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23EC21E00(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7490);
  v42 = a2;
  v6 = sub_23EC2EC24();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23EC2EDB0();
    sub_23EC2E744();
    result = sub_23EC2EDC8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23EC22124(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9230);
  v42 = a2;
  v6 = sub_23EC2EC24();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23EC2EDB0();
    sub_23EC2E744();
    result = sub_23EC2EDC8();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23EC22448(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9240);
  v39 = a2;
  result = sub_23EC2EC24();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v8;
        if (!v23)
        {
          v8 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v8];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v8 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v23 = v38[v8];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v8 = v24;
          }
        }
LABEL_30:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v29 = 16 * v21;
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *v30;
      v31 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v29);
      v34 = *v33;
      v35 = v33[1];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_23EC2EDB0();
      sub_23EC2E744();
      result = sub_23EC2EDC8();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v15 == v26;
          if (v15 == v26)
            v15 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 16 * v16;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
      *v18 = v32;
      v18[1] = v31;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v17);
      *v19 = v34;
      v19[1] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void *sub_23EC22748()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7490);
  v2 = *v0;
  v3 = sub_23EC2EC18();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23EC22900()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9230);
  v2 = *v0;
  v3 = sub_23EC2EC18();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23EC22AB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9240);
  v2 = *v0;
  v3 = sub_23EC2EC18();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23EC22C70(unint64_t a1)
{
  return sub_23EC219CC(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_23EC22C84(_QWORD *a1)
{
  return sub_23EC218C0(0, a1[2], 0, a1);
}

_QWORD *sub_23EC22C98(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = result;
  v6 = HIBYTE(a5) & 0xF;
  v12 = a4;
  v13 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v14 = v6;
  if (!a2)
  {
    v7 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (_QWORD *)v7;
  }
  v7 = a3;
  if (!a3)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v9 = 0;
    while (1)
    {
      v10 = sub_23EC2E84C();
      if (!v11)
        break;
      ++v9;
      *v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    v7 = v9;
LABEL_13:
    v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23EC22D50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9248);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t sub_23EC22DC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EC22EB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_23EC2E03C() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EC22FCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

_QWORD *sub_23EC230BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *(v2 - 1);
    v4 = *v2;
    swift_bridgeObjectRetain_n();
    v6 = sub_23EC214A0();
    if (*(_QWORD *)(v6 + 16) && (v7 = sub_23EBE9A24(v5, v4), (v8 & 1) != 0))
    {
      v9 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v7);
      v11 = *v9;
      v10 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_23EC21BD4(0, v3[2] + 1, 1, v3);
      v13 = v3[2];
      v12 = v3[3];
      if (v13 >= v12 >> 1)
        v3 = sub_23EC21BD4((_QWORD *)(v12 > 1), v13 + 1, 1, v3);
      v3[2] = v13 + 1;
      v14 = &v3[2 * v13];
      v14[4] = v11;
      v14[5] = v10;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_23EC23224()
{
  unint64_t result;

  result = qword_256DB9130;
  if (!qword_256DB9130)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for Geohash.Error, &type metadata for Geohash.Error);
    atomic_store(result, (unint64_t *)&qword_256DB9130);
  }
  return result;
}

unint64_t sub_23EC2326C()
{
  unint64_t result;

  result = qword_256DB9138;
  if (!qword_256DB9138)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for Geohash.Error, &type metadata for Geohash.Error);
    atomic_store(result, (unint64_t *)&qword_256DB9138);
  }
  return result;
}

uint64_t method lookup function for Geohash()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Geohash.encode(latitude:longitude:length:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of Geohash.decode(geohash:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for Geohash.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EC23324 + 4 * byte_23EC36910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EC23344 + 4 * byte_23EC36915[v4]))();
}

_BYTE *sub_23EC23324(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EC23344(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC2334C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC23354(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC2335C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC23364(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Geohash.Error()
{
  return &type metadata for Geohash.Error;
}

unint64_t sub_23EC23380()
{
  unint64_t result;

  result = qword_256DB9228;
  if (!qword_256DB9228)
  {
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE1EC0], MEMORY[0x24BEE1E88]);
    atomic_store(result, (unint64_t *)&qword_256DB9228);
  }
  return result;
}

uint64_t sub_23EC233C4(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23EC2E81C();
    return sub_23EC2E8D0();
  }
  return result;
}

uint64_t sub_23EC2344C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23EC2EC3C();
  __break(1u);
  return result;
}

uint64_t sub_23EC23540@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];

  v52 = a1;
  v5 = (_QWORD *)sub_23EC2E1E0();
  v6 = (uint64_t *)*(v5 - 1);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256DB71B0 != -1)
LABEL_19:
    swift_once();
  v11 = sub_23EC2E684();
  v53 = __swift_project_value_buffer(v11, (uint64_t)qword_256DC7690);
  v12 = sub_23EC2E66C();
  v13 = sub_23EC2E9F0();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23EB9F000, v12, v13, "Trying to locate geohash file in geohash-2 folder.", v14, 2u);
    MEMORY[0x24265B940](v14, -1, -1);
  }

  type metadata accessor for Geohash();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0;
  *(_QWORD *)(inited + 24) = 0;
  sub_23EC204F4(8, a2, a3);
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16 = sub_23EC233C4(2);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  v54 = MEMORY[0x24265ADE8](v16, v18, v20, v22);
  v24 = v23;
  swift_bridgeObjectRelease();
  if (sub_23EC2E810() < 2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v35 = sub_23EC2E66C();
    v36 = sub_23EC2EA08();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v55[0] = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain();
      v55[2] = sub_23EBAE6D4(v54, v24, v55);
      sub_23EC2EA68();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23EB9F000, v35, v36, "Unable to locate matching geohash in geohash-2 Folder for : %s", v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v38, -1, -1);
      MEMORY[0x24265B940](v37, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v39 = v52;
    v40 = sub_23EC2E264();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  }
  else
  {
    v48 = v6;
    v49 = v8;
    v50 = v5;
    v25 = (void *)objc_opt_self();
    if (qword_25433FB40 != -1)
      swift_once();
    v6 = &qword_25433FC00;
    while (1)
    {
      v55[0] = qword_25433FC00;
      v55[1] = *(_QWORD *)algn_25433FC08;
      swift_bridgeObjectRetain();
      sub_23EC2E834();
      sub_23EC2E834();
      swift_bridgeObjectRetain();
      sub_23EC2E834();
      swift_bridgeObjectRelease();
      sub_23EC2E834();
      v26 = objc_msgSend(v25, sel_defaultManager);
      v5 = (_QWORD *)sub_23EC2E774();
      v8 = (char *)objc_msgSend(v26, sel_fileExistsAtPath_, v5);

      if ((_DWORD)v8)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v27 = sub_23EC2E810();
      swift_bridgeObjectRelease();
      if (__OFSUB__(v27, 1))
      {
        __break(1u);
        goto LABEL_19;
      }
      v28 = sub_23EC233C4(v27 - 1);
      v30 = v29;
      v32 = v31;
      v34 = v33;
      swift_bridgeObjectRelease();
      MEMORY[0x24265ADE8](v28, v30, v32, v34);
      swift_bridgeObjectRelease();
      if (sub_23EC2E810() <= 1)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = sub_23EC2E66C();
    v43 = sub_23EC2EA14();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_23EB9F000, v42, v43, "Located geohash file in geohash-2 folder.", v44, 2u);
      MEMORY[0x24265B940](v44, -1, -1);
    }

    v45 = sub_23EC2E264();
    v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
    v46(v51, 1, 1, v45);
    ((void (*)(char *, _QWORD, _QWORD *))v48[13])(v49, *MEMORY[0x24BDCD7A0], v50);
    v47 = v52;
    sub_23EC2E24C();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v46)(v47, 0, 1, v45);
  }
}

id sub_23EC23B40()
{
  id v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  unsigned int v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  void *v28;
  id v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v31 = 1;
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = (void *)sub_23EC2E774();
  v2 = objc_msgSend(v0, sel_fileExistsAtPath_isDirectory_, v1, &v31);

  if (v2)
  {
    if (qword_256DB71B0 != -1)
      swift_once();
    v3 = sub_23EC2E684();
    __swift_project_value_buffer(v3, (uint64_t)qword_256DC7690);
    v4 = sub_23EC2E66C();
    v5 = sub_23EC2EA08();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23EB9F000, v4, v5, "Path exists", v6, 2u);
      MEMORY[0x24265B940](v6, -1, -1);
    }

    v7 = sub_23EC2E66C();
    v8 = sub_23EC2EA08();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_23EB9F000, v7, v8, "Deleting existing file", v9, 2u);
      MEMORY[0x24265B940](v9, -1, -1);
    }

    v10 = (void *)sub_23EC2E774();
    v30 = 0;
    v11 = objc_msgSend(v0, sel_removeItemAtPath_error_, v10, &v30);

    if (v11)
    {
      v12 = v30;
    }
    else
    {
      v13 = v30;
      v14 = (void *)sub_23EC2E1D4();

      swift_willThrow();
    }
  }
  v15 = (void *)sub_23EC2E774();
  v30 = 0;
  v16 = objc_msgSend(v0, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v15, 1, 0, &v30);

  if ((_DWORD)v16)
  {
    v17 = v30;

  }
  else
  {
    v18 = v30;
    v19 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB71B0 != -1)
      swift_once();
    v20 = sub_23EC2E684();
    __swift_project_value_buffer(v20, (uint64_t)qword_256DC7690);
    v21 = v19;
    v22 = v19;
    v23 = sub_23EC2E66C();
    v24 = sub_23EC2EA08();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      v27 = v19;
      v28 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v30 = v28;
      sub_23EC2EA68();
      *v26 = v28;

      _os_log_impl(&dword_23EB9F000, v23, v24, "Unable to create GeoHash Directory! %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v26, -1, -1);
      MEMORY[0x24265B940](v25, -1, -1);

    }
    else
    {

    }
  }
  return v16;
}

void sub_23EC23F88()
{
  qword_256DB9250 = (uint64_t)&unk_250F4E1D0;
}

uint64_t sub_23EC23F9C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = result % v3;
    if ((v4 & 0x8000000000000000) == 0)
      return *(unsigned __int8 *)(a3 + v4 + 32) ^ a2;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void NetworkError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_23EC2E4BC();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for NetworkError();
  MEMORY[0x24BDAC7A8](v2);
  sub_23EC1639C(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_23EC240AC + 4 * byte_23EC36A20[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23EC240AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 80) = 0;
  *(_QWORD *)(v4 - 72) = 0xE000000000000000;
  sub_23EC2EB4C();
  v5 = *(_QWORD *)(v4 - 72);
  *(_QWORD *)(v4 - 80) = *(_QWORD *)(v4 - 80);
  *(_QWORD *)(v4 - 72) = v5;
  sub_23EC2E834();
  sub_23EC2EBE8();
  sub_23EC2E834();
  v6 = *(_QWORD *)(v4 - 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v6;
}

void sub_23EC24350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  sub_23EC2EB4C(23);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 - 88));
  *(_QWORD *)(v1 - 96) = v0 - 6;
  *(_QWORD *)(v1 - 88) = 0x800000023EC3B110;
  sub_23EC2E834(v0 + 12, 0x800000023EC3B130);
  swift_bridgeObjectRelease(0x800000023EC3B130);
  v2 = *(_QWORD *)(v1 - 88);
  sub_23EC2E834(*(_QWORD *)(v1 - 96), v2);
  swift_bridgeObjectRelease(v2);
  JUMPOUT(0x23EC2432CLL);
}

void sub_23EC24360()
{
  JUMPOUT(0x23EC2436CLL);
}

uint64_t NetworkInternalError.errorDescription.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23EC24414 + 4 * byte_23EC36A37[*v0]))(0xD00000000000002BLL, 0x800000023EC3B1A0);
}

uint64_t sub_23EC24414@<X0>(uint64_t a1@<X8>)
{
  return a1 + 14;
}

unint64_t sub_23EC2443C()
{
  return 0xD000000000000024;
}

uint64_t UtilityTerritoryConfigError.hash(into:)()
{
  return sub_23EC2EDBC();
}

BOOL static UtilityTerritoryConfigError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23EC244A4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  char *v20;
  id v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  void (*v24)(__int128 *, char *, uint64_t);
  int v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint8_t *v62;
  void (*v63)(char *, uint8_t *);
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  void (*v74)(char *, uint8_t *);
  uint8_t *v75;
  uint8_t *v76;
  uint64_t v77;
  char *v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[4];
  uint64_t v84[5];

  v2 = sub_23EC2EB88();
  v80 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v75 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9280);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23EC2EB94();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (__int128 *)((char *)&v75 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v75 - v19;
  v84[0] = (uint64_t)a1;
  v21 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v22 = swift_dynamicCast();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v22 & 1) != 0)
  {
    v79 = (uint8_t *)v2;
    v23(v10, 0, 1, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
    v24 = *(void (**)(__int128 *, char *, uint64_t))(v12 + 16);
    v24(v18, v20, v11);
    v25 = (*(uint64_t (**)(__int128 *, uint64_t))(v12 + 88))(v18, v11);
    if (v25 == *MEMORY[0x24BEE26D0])
    {
      (*(void (**)(__int128 *, uint64_t))(v12 + 96))(v18, v11);
      if (qword_25433FAF8 != -1)
        swift_once();
      v26 = sub_23EC2E684();
      __swift_project_value_buffer(v26, (uint64_t)qword_25433FC98);
      v27 = sub_23EC2E66C();
      v28 = sub_23EC2EA08();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v84[0] = v30;
        v78 = v20;
        *(_DWORD *)v29 = 136315138;
        v31 = sub_23EC2EE10();
        v83[0] = sub_23EBAE6D4(v31, v32, v84);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();
        v33 = "DecodingError.typeMismatch : %s";
LABEL_13:
        _os_log_impl(&dword_23EB9F000, v27, v28, v33, v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v30, -1, -1);
        MEMORY[0x24265B940](v29, -1, -1);

        (*(void (**)(char *, uint64_t))(v12 + 8))(v78, v11);
LABEL_15:
        v37 = v79;
        v38 = (uint64_t *)&unk_256DB9298;
LABEL_16:
        v39 = (char *)v18 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v38) + 48);
        (*(void (**)(char *, uint8_t *))(v80 + 8))(v39, v37);
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    if (v25 == *MEMORY[0x24BEE26E0])
    {
      (*(void (**)(__int128 *, uint64_t))(v12 + 96))(v18, v11);
      if (qword_25433FAF8 != -1)
        swift_once();
      v34 = sub_23EC2E684();
      __swift_project_value_buffer(v34, (uint64_t)qword_25433FC98);
      v27 = sub_23EC2E66C();
      v28 = sub_23EC2EA08();
      if (os_log_type_enabled(v27, v28))
      {
        v78 = v20;
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v84[0] = v30;
        *(_DWORD *)v29 = 136315138;
        v35 = sub_23EC2EE10();
        v83[0] = sub_23EBAE6D4(v35, v36, v84);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();
        v33 = "DecodingError.valueNotFound : %s";
        goto LABEL_13;
      }
LABEL_14:

      (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
      goto LABEL_15;
    }
    if (v25 == *MEMORY[0x24BEE26C8])
    {
      (*(void (**)(__int128 *, uint64_t))(v12 + 96))(v18, v11);
      sub_23EC0F64C(v18, (uint64_t)v84);
      if (qword_25433FAF8 != -1)
        swift_once();
      v43 = sub_23EC2E684();
      __swift_project_value_buffer(v43, (uint64_t)qword_25433FC98);
      sub_23EC259A8((uint64_t)v84, (uint64_t)v83);
      v44 = sub_23EC2E66C();
      v45 = sub_23EC2EA08();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v77 = swift_slowAlloc();
        v82 = v77;
        *(_DWORD *)v46 = 136315138;
        v76 = v46 + 4;
        v78 = v20;
        __swift_project_boxed_opaque_existential_1(v83, v83[3]);
        v47 = sub_23EC2EDEC();
        v81 = sub_23EBAE6D4(v47, v48, &v82);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v83);
        _os_log_impl(&dword_23EB9F000, v44, v45, "DecodingError.keyNotFound : %s", v46, 0xCu);
        v49 = v77;
        swift_arrayDestroy();
        MEMORY[0x24265B940](v49, -1, -1);
        MEMORY[0x24265B940](v46, -1, -1);

        __swift_destroy_boxed_opaque_existential_0((uint64_t)v84);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v78, v11);
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_0((uint64_t)v83);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v84);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
      }
      v37 = v79;
      v38 = (uint64_t *)&unk_256DB9290;
      goto LABEL_16;
    }
    if (v25 == *MEMORY[0x24BEE26D8])
    {
      (*(void (**)(__int128 *, uint64_t))(v12 + 96))(v18, v11);
      v50 = v79;
      v51 = v80;
      (*(void (**)(char *, __int128 *, uint8_t *))(v80 + 32))(v7, v18, v79);
      if (qword_25433FAF8 != -1)
        swift_once();
      v52 = sub_23EC2E684();
      __swift_project_value_buffer(v52, (uint64_t)qword_25433FC98);
      (*(void (**)(char *, char *, uint8_t *))(v51 + 16))(v5, v7, v50);
      v53 = sub_23EC2E66C();
      v54 = sub_23EC2EA08();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc();
        v77 = swift_slowAlloc();
        v84[0] = v77;
        *(_DWORD *)v55 = 136315138;
        v75 = v55 + 4;
        v76 = v55;
        v56 = sub_23EC2EB70();
        v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9288);
        v58 = MEMORY[0x24265AF44](v56, v57);
        v78 = v20;
        v59 = v58;
        v61 = v60;
        swift_bridgeObjectRelease();
        v83[0] = sub_23EBAE6D4(v59, v61, v84);
        sub_23EC2EA68();
        swift_bridgeObjectRelease();
        v62 = v79;
        v63 = *(void (**)(char *, uint8_t *))(v80 + 8);
        v63(v5, v79);
        v64 = v76;
        _os_log_impl(&dword_23EB9F000, v53, v54, "DecodingError.dataCorrupted : %s", v76, 0xCu);
        v65 = v77;
        swift_arrayDestroy();
        MEMORY[0x24265B940](v65, -1, -1);
        MEMORY[0x24265B940](v64, -1, -1);

        v63(v7, v62);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v78, v11);
      }
      else
      {

        v74 = *(void (**)(char *, uint8_t *))(v51 + 8);
        v74(v5, v50);
        v74(v7, v50);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
      }
    }
    else
    {
      if (qword_25433FAF8 != -1)
        swift_once();
      v66 = sub_23EC2E684();
      __swift_project_value_buffer(v66, (uint64_t)qword_25433FC98);
      v24((__int128 *)v15, v20, v11);
      v67 = sub_23EC2E66C();
      v68 = sub_23EC2EA08();
      if (os_log_type_enabled(v67, v68))
      {
        v78 = v20;
        v69 = (uint8_t *)swift_slowAlloc();
        v80 = swift_slowAlloc();
        *(_DWORD *)v69 = 138412290;
        v79 = v69 + 4;
        swift_allocError();
        v24(v70, v15, v11);
        v71 = _swift_stdlib_bridgeErrorToNSError();
        v84[0] = v71;
        sub_23EC2EA68();
        v72 = v80;
        *(_QWORD *)v80 = v71;
        v20 = v78;
        v73 = *(void (**)(char *, uint64_t))(v12 + 8);
        v73(v15, v11);
        _os_log_impl(&dword_23EB9F000, v67, v68, "Uncaught DecodingError %@", v69, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7340);
        swift_arrayDestroy();
        MEMORY[0x24265B940](v72, -1, -1);
        MEMORY[0x24265B940](v69, -1, -1);

      }
      else
      {

        v73 = *(void (**)(char *, uint64_t))(v12 + 8);
        v73(v15, v11);
      }
      v73(v20, v11);
      v73((char *)v18, v11);
    }
  }
  else
  {
    v23(v10, 1, 1, v11);
    sub_23EBA3038((uint64_t)v10, &qword_256DB9280);
  }
LABEL_17:
  type metadata accessor for NetworkError();
  sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
  v40 = swift_allocError();
  *v41 = 1;
  swift_storeEnumTagMultiPayload();
  return v40;
}

void _s19HomeUtilityServices12NetworkErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v13 = sub_23EC2E4BC();
  MEMORY[0x24BDAC7A8](v13);
  v4 = type metadata accessor for NetworkError();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9270);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 + *(int *)(v8 + 48) - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC1639C(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23EC1639C(a2, (uint64_t)v10);
  v11 = (char *)sub_23EC250C0 + 4 * byte_23EC36A3B[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_23EC250C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  sub_23EC1639C(v0, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v4, *(_QWORD *)(v5 - 104));
    sub_23EBA3038(v0, &qword_256DB9270);
    return 0;
  }
  else
  {
    v8 = *(_QWORD *)(v5 - 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v2, v3, v8);
    sub_23EBC0AD4(&qword_256DB9278, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF5D8], MEMORY[0x24BDCF5F0]);
    sub_23EC2E8DC();
    sub_23EC2E8DC();
    v6 = *(_QWORD *)(v5 - 88) == *(_QWORD *)(v5 - 96);
    v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
    v9(v2, v8);
    v9(v4, v8);
    sub_23EBE40DC(v0);
  }
  return v6;
}

uint64_t type metadata accessor for NetworkError()
{
  uint64_t result;

  result = qword_25433F7B8;
  if (!qword_25433F7B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23EC253E4()
{
  return sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
}

unint64_t sub_23EC25414()
{
  unint64_t result;

  result = qword_256DB9258;
  if (!qword_256DB9258)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for NetworkInternalError, &type metadata for NetworkInternalError);
    atomic_store(result, (unint64_t *)&qword_256DB9258);
  }
  return result;
}

unint64_t sub_23EC2545C()
{
  unint64_t result;

  result = qword_256DB9260;
  if (!qword_256DB9260)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for NetworkInternalError, &type metadata for NetworkInternalError);
    atomic_store(result, (unint64_t *)&qword_256DB9260);
  }
  return result;
}

unint64_t sub_23EC254A4()
{
  unint64_t result;

  result = qword_256DB9268;
  if (!qword_256DB9268)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for UtilityTerritoryConfigError, &type metadata for UtilityTerritoryConfigError);
    atomic_store(result, (unint64_t *)&qword_256DB9268);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NetworkError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_23EC2E4BC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NetworkError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_23EC2E4BC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for NetworkError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23EC2E4BC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for NetworkError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23EBE40DC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23EC2E4BC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for NetworkError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23EC2E4BC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for NetworkError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23EBE40DC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23EC2E4BC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NetworkError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NetworkError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23EC2583C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23EC2584C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23EC2E4BC();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkInternalError()
{
  return &type metadata for NetworkInternalError;
}

uint64_t _s19HomeUtilityServices20NetworkInternalErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EC25928 + 4 * byte_23EC36A53[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EC2595C + 4 * byte_23EC36A4E[v4]))();
}

uint64_t sub_23EC2595C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC25964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC2596CLL);
  return result;
}

uint64_t sub_23EC25978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC25980);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EC25984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC2598C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityTerritoryConfigError()
{
  return &type metadata for UtilityTerritoryConfigError;
}

uint64_t sub_23EC259A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23EC259EC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  void *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  NSObject *v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  _DWORD *v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;

  v2 = sub_23EC2E4BC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v57 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB92A0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23EC2E4C8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v57 - v17;
  v64 = (uint64_t)a1;
  v19 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v20 = swift_dynamicCast();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v20)
  {
    v61 = v16;
    v21(v11, 0, 1, v12);
    v62 = v13;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    v22 = sub_23EBC0AD4(&qword_256DB92A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF610], MEMORY[0x24BDCF608]);
    sub_23EC2E1BC();
    sub_23EC2E4A4();
    sub_23EBC0AD4(&qword_256DB9278, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF5D8], MEMORY[0x24BDCF5F0]);
    sub_23EC2E8DC();
    sub_23EC2E8DC();
    v24 = v63;
    v23 = (void *)v64;
    v25 = *(void (**)(char *, uint64_t))(v3 + 8);
    v25(v6, v2);
    v25(v8, v2);
    if (v23 == v24)
    {
      if (qword_25433FAF8 != -1)
        swift_once();
      v26 = sub_23EC2E684();
      __swift_project_value_buffer(v26, (uint64_t)qword_25433FC98);
      v27 = sub_23EC2E66C();
      v28 = sub_23EC2EA08();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_23EB9F000, v27, v28, "No Internet connection detected. Check your network connection.", v29, 2u);
        MEMORY[0x24265B940](v29, -1, -1);
      }

      type metadata accessor for NetworkError();
      sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
      v30 = swift_allocError();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v18, v12);
    }
    else
    {
      v59 = v22;
      v60 = v18;
      sub_23EC2E1BC();
      sub_23EC2E498();
      sub_23EC2E8DC();
      sub_23EC2E8DC();
      v36 = v63;
      v35 = (void *)v64;
      v25(v6, v2);
      v25(v8, v2);
      if (v35 == v36)
      {
        v37 = v62;
        if (qword_25433FAF8 != -1)
          swift_once();
        v38 = sub_23EC2E684();
        __swift_project_value_buffer(v38, (uint64_t)qword_25433FC98);
        v39 = sub_23EC2E66C();
        v40 = sub_23EC2EA08();
        v41 = os_log_type_enabled(v39, v40);
        v42 = v60;
        if (v41)
        {
          v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v43 = 0;
          _os_log_impl(&dword_23EB9F000, v39, v40, "Unable to find Host. if this DEV env, please check your VPN connection!", v43, 2u);
          MEMORY[0x24265B940](v43, -1, -1);
        }

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        v30 = swift_allocError();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v12);
      }
      else
      {
        v44 = v62;
        if (qword_25433FAF8 != -1)
          swift_once();
        v45 = sub_23EC2E684();
        __swift_project_value_buffer(v45, (uint64_t)qword_25433FC98);
        v46 = v60;
        v47 = v61;
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v61, v60, v12);
        v48 = sub_23EC2E66C();
        v49 = sub_23EC2EA08();
        v50 = v49;
        if (os_log_type_enabled(v48, v49))
        {
          v51 = v48;
          v52 = (uint8_t *)swift_slowAlloc();
          v58 = v50;
          v53 = v52;
          *(_DWORD *)v52 = 134217984;
          v57 = v52 + 4;
          sub_23EC2E1BC();
          v54 = sub_23EC2E4B0();
          v25(v8, v2);
          v55 = *(void (**)(char *, uint64_t))(v44 + 8);
          v55(v47, v12);
          v64 = v54;
          v48 = v51;
          v46 = v60;
          sub_23EC2EA68();
          _os_log_impl(&dword_23EB9F000, v48, (os_log_type_t)v58, "URLError error : %ld", v53, 0xCu);
          MEMORY[0x24265B940](v53, -1, -1);
        }
        else
        {
          v55 = *(void (**)(char *, uint64_t))(v44 + 8);
          v55(v47, v12);
        }

        type metadata accessor for NetworkError();
        sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
        v30 = swift_allocError();
        sub_23EC2E1BC();
        swift_storeEnumTagMultiPayload();
        v55(v46, v12);
      }
    }
  }
  else
  {
    v21(v11, 1, 1, v12);
    sub_23EBA3038((uint64_t)v11, &qword_256DB92A0);
    if (qword_25433FAF8 != -1)
      swift_once();
    v31 = sub_23EC2E684();
    __swift_project_value_buffer(v31, (uint64_t)qword_25433FC98);
    v32 = sub_23EC2E66C();
    v33 = sub_23EC2EA08();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_23EB9F000, v32, v33, "Unknown Error", v34, 2u);
      MEMORY[0x24265B940](v34, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBC0AD4((unint64_t *)&qword_256DB7E70, (uint64_t (*)(uint64_t))type metadata accessor for NetworkError, (uint64_t)&protocol conformance descriptor for NetworkError);
    v30 = swift_allocError();
    swift_storeEnumTagMultiPayload();
  }
  return v30;
}

uint64_t sub_23EC261B8()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _BYTE v14[32];
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_23EC2DFE8();
  swift_allocObject();
  sub_23EC2DFDC();
  v1 = v0[3];
  v21 = v0[2];
  v22 = v1;
  v23 = v0[4];
  v2 = v0[1];
  v19 = *v0;
  v20 = v2;
  sub_23EC29B68();
  v3 = sub_23EC2DFD0();
  v5 = v4;
  swift_release();
  v6 = (void *)objc_opt_self();
  v7 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v19 = 0;
  v8 = objc_msgSend(v6, sel_JSONObjectWithData_options_error_, v7, 4, &v19);

  v9 = (id)v19;
  if (v8)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = v9;
    v11 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    v19 = 0u;
    v20 = 0u;
  }
  sub_23EBA5560((uint64_t)&v19, (uint64_t)&v16);
  if (v17)
  {
    sub_23EBB2080(&v16, v15);
    sub_23EBA55A8((uint64_t)v15, (uint64_t)v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FB08);
    if ((swift_dynamicCast() & 1) == 0)
      v18 = 0;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    v12 = v18;
  }
  else
  {
    v12 = 0;
    v18 = 0;
  }
  sub_23EBA3EDC(v3, v5);
  sub_23EBA3038((uint64_t)&v19, &qword_25433FBF0);
  return v12;
}

unint64_t TAFAuthorizationError.init(rawValue:)(unint64_t a1)
{
  return sub_23EC28CA4(a1);
}

unint64_t static TAFAuthorizationError._nsErrorDomain.getter()
{
  return 0xD000000000000029;
}

uint64_t sub_23EC26408()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC26468()
{
  sub_23EC29AE0();
  return sub_23EC2E198();
}

uint64_t sub_23EC264A0()
{
  sub_23EC2EDB0();
  sub_23EC2E738();
  return sub_23EC2EDC8();
}

unint64_t sub_23EC264FC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_23EC28CA4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_23EC2652C()
{
  sub_23EC29AE0();
  return sub_23EC2E1B0();
}

uint64_t sub_23EC26554()
{
  sub_23EC29AE0();
  return sub_23EC2E1A4();
}

unint64_t sub_23EC2657C()
{
  return 0xD000000000000029;
}

uint64_t sub_23EC26598()
{
  sub_23EC29AE0();
  return sub_23EC2E18C();
}

uint64_t sub_23EC265D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9390);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC29F04();
  sub_23EC2EDE0();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9380);
  sub_23EC29F48(&qword_256DB9398, (uint64_t (*)(void))sub_23EC29B68, MEMORY[0x24BEE12A0]);
  sub_23EC2ED08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23EC266F4()
{
  return 0x73726F74636166;
}

uint64_t sub_23EC2670C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73726F74636166 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23EC2ED38();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23EC267A0()
{
  sub_23EC29F04();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC267C8()
{
  sub_23EC29F04();
  return sub_23EC2EE04();
}

_QWORD *sub_23EC267F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_23EC29204(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23EC26818(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EC265D8(a1, *v1);
}

void sub_23EC26830(char *a1)
{
  sub_23EBC0B20(*a1);
}

void sub_23EC2683C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EC2687C()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

void sub_23EC268F4()
{
  __asm { BR              X10 }
}

uint64_t sub_23EC26924()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

void sub_23EC26988()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23EC2EDB0();
  __asm { BR              X9 }
}

uint64_t sub_23EC269C4()
{
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC26A3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC29348();
  *a1 = result;
  return result;
}

uint64_t sub_23EC26A68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23EC26A8C + 4 * byte_23EC36DAC[*v0]))();
}

void sub_23EC26A8C(_QWORD *a1@<X8>)
{
  *a1 = 0x7954726F74636166;
  a1[1] = 0xEA00000000006570;
}

void sub_23EC26AAC(_QWORD *a1@<X8>)
{
  *a1 = 0x74616E6974736564;
  a1[1] = 0xEB000000006E6F69;
}

void sub_23EC26AD0(_QWORD *a1@<X8>)
{
  *a1 = 0x736B6E696C5FLL;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_23EC26AE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EC26B0C + 4 * byte_23EC36DB0[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_23EC26B0C()
{
  return 0x7954726F74636166;
}

uint64_t sub_23EC26B28()
{
  return 0x74616E6974736564;
}

uint64_t sub_23EC26B48()
{
  return 0x736B6E696C5FLL;
}

uint64_t sub_23EC26B5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC29348();
  *a1 = result;
  return result;
}

uint64_t sub_23EC26B80()
{
  sub_23EC296D4();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC26BA8()
{
  sub_23EC296D4();
  return sub_23EC2EE04();
}

uint64_t sub_23EC26BD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[32];
  _BYTE v12[32];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB92F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC296D4();
  sub_23EC2EDE0();
  v11[0] = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    v11[0] = 1;
    sub_23EC2ECE4();
    v11[0] = 2;
    sub_23EC2ECE4();
    sub_23EC2978C(v3 + 48, (uint64_t)v12);
    sub_23EC2978C((uint64_t)v12, (uint64_t)v11);
    v10[15] = 3;
    sub_23EC297D4();
    sub_23EC2ECD8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EC26D5C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9318);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC29A9C();
  sub_23EC2EDE0();
  v14 = 0;
  sub_23EC2ECE4();
  if (!v5)
  {
    v13 = 1;
    sub_23EC2ECE4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

__n128 sub_23EC26E84@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_23EC29390(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_23EC26ECC(_QWORD *a1)
{
  return sub_23EC26BD0(a1);
}

uint64_t sub_23EC26F0C()
{
  _BYTE *v0;

  if (*v0)
    return 1684956531;
  else
    return 0x796669726576;
}

uint64_t sub_23EC26F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC29818(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EC26F60()
{
  sub_23EC29A9C();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC26F88()
{
  sub_23EC29A9C();
  return sub_23EC2EE04();
}

uint64_t sub_23EC26FB0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23EC298F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_23EC26FDC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23EC26D5C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_23EC26FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[34] = a4;
  v5[35] = a5;
  v5[32] = a2;
  v5[33] = a3;
  v5[31] = a1;
  v6 = sub_23EC2EB88();
  v5[36] = v6;
  v5[37] = *(_QWORD *)(v6 - 8);
  v5[38] = swift_task_alloc();
  v7 = sub_23EC2EB94();
  v5[39] = v7;
  v5[40] = *(_QWORD *)(v7 - 8);
  v5[41] = swift_task_alloc();
  v8 = sub_23EC2E3CC();
  v5[42] = v8;
  v5[43] = *(_QWORD *)(v8 - 8);
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  v5[46] = swift_task_alloc();
  v9 = sub_23EC2DFA0();
  v5[47] = v9;
  v5[48] = *(_QWORD *)(v9 - 8);
  v5[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC2710C()
{
  _QWORD *v0;
  __CFString *v1;
  __CFString *v2;
  CFPropertyListRef v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (os_variant_has_internal_diagnostics()
    && (v1 = (__CFString *)sub_23EC2E774(),
        v2 = (__CFString *)sub_23EC2E774(),
        v3 = CFPreferencesCopyAppValue(v1, v2),
        v2,
        v1,
        v3)
    && (v0[28] = v3, __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7920), (swift_dynamicCast() & 1) != 0))
  {
    v4 = v0[29];
    if (qword_256DB71E8 != -1)
      swift_once();
    v5 = sub_23EC2E684();
    __swift_project_value_buffer(v5, (uint64_t)qword_256DC7708);
    swift_bridgeObjectRetain_n();
    v6 = sub_23EC2E66C();
    v7 = sub_23EC2EA14();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v15 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_bridgeObjectRetain();
      v10 = sub_23EC2E72C();
      v12 = v11;
      swift_bridgeObjectRelease();
      v0[30] = sub_23EBAE6D4(v10, v12, &v15);
      sub_23EC2EA68();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23EB9F000, v6, v7, "Overriding Account Lookup fields with: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24265B940](v9, -1, -1);
      MEMORY[0x24265B940](v8, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    v4 = v0[32];
    swift_bridgeObjectRetain();
  }
  v0[50] = v4;
  v13 = (_QWORD *)swift_task_alloc();
  v0[51] = v13;
  *v13 = v0;
  v13[1] = sub_23EC273D4;
  return sub_23EC2C388(v0[46], v0[31], v4);
}

uint64_t sub_23EC273D4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23EC27430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE *v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23EBA3038(v3, &qword_25433F918);
    if (qword_256DB71E8 != -1)
      swift_once();
    v4 = sub_23EC2E684();
    __swift_project_value_buffer(v4, (uint64_t)qword_256DC7708);
    v5 = sub_23EC2E66C();
    v6 = sub_23EC2EA08();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_23EB9F000, v5, v6, "Unable to create request URL for TAF Authorization.", v7, 2u);
      MEMORY[0x24265B940](v7, -1, -1);
    }

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    swift_allocError();
    *v8 = 0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 392), v3, v1);
    sub_23EC0A6EC(0xD00000000000001ALL, 0x800000023EC3B2D0, (uint8_t *)0xD000000000000021, 0x800000023EC3B2F0);
    sub_23EC2E3C0();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v10;
    *v10 = v0;
    v10[1] = sub_23EC27688;
    return sub_23EC2E9CC();
  }
}

uint64_t sub_23EC27688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[53] = a1;
  v5[54] = a2;
  v5[55] = a3;
  v5[56] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23EC276F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  objc_super *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t receiver;
  Class super_class;
  uint64_t v22;
  Class v23;
  id v24;
  Class v25;
  objc_class *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  void *v41;
  id *p_super_class;
  id v43;
  int v44;
  void (**v45)(__int128 *, Class);
  __int128 *v46;
  objc_super *v47;
  Class v48;
  Class v49;
  id v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  Class v61;
  uint8_t *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  objc_class *v90;
  int v91;
  Class v92;
  void (**v93)(Class, Class);
  Class v94;
  Class v95;
  Class *v96;
  uint64_t v98;
  unint64_t v99;
  Class v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  objc_class *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  Class v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  id v120;
  id v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  Class v129;
  uint64_t v130;
  Class v131;
  id v132;
  Class v133;
  _BYTE *v134;
  Class v135;
  Class v136;
  void (**v137)(Class, Class);
  Class v138;
  unint64_t v139;
  Class v140;
  uint64_t v141;
  Class v142;
  Class v143;
  id v144;
  id v145;
  _BYTE *v146;
  objc_super *v147;
  objc_super *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  Class v158;
  uint64_t v159;
  Class v160;
  uint64_t v161[3];

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 280);
  v153 = *(_QWORD *)(v0 + 272);
  v6 = (uint64_t *)(*(_QWORD *)(v0 + 248) + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v7 = v6[1];
  v150 = *v6;
  swift_bridgeObjectRetain();
  v8 = sub_23EC0C0F0();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  swift_bridgeObjectRetain();
  sub_23EC2A9C8(v150, v7, v8, v10, v153, v5, 0, v2, v0 + 16);
  sub_23EC2AB0C();
  sub_23EC162CC(v0 + 16);
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = *(id *)(v0 + 440);
    sub_23EC0AFC4(0xD00000000000001ALL, (uint8_t *)0x800000023EC3B320, (unint64_t)objc_msgSend(v12, sel_statusCode), qword_250F4EC58);
    v14 = objc_msgSend(v12, sel_statusCode);
    v15 = (objc_super *)v0;
    switch((unint64_t)v14)
    {
      case 0x190uLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v16 = sub_23EC2E684();
        __swift_project_value_buffer(v16, (uint64_t)qword_256DC7708);
        v17 = sub_23EC2E66C();
        v18 = sub_23EC2EA08();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v19 = 0;
          _os_log_impl(&dword_23EB9F000, v17, v18, "BAD REQUEST | Check request", v19, 2u);
          MEMORY[0x24265B940](v19, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        *v27 = 0;
        goto LABEL_59;
      case 0x191uLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v64 = sub_23EC2E684();
        __swift_project_value_buffer(v64, (uint64_t)qword_256DC7708);
        v65 = sub_23EC2E66C();
        v66 = sub_23EC2EA08();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v67 = 0;
          _os_log_impl(&dword_23EB9F000, v65, v66, "UnAuthorized | PAT Validation Failed | Check request", v67, 2u);
          MEMORY[0x24265B940](v67, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        v69 = 1;
        goto LABEL_58;
      case 0x192uLL:
      case 0x193uLL:
      case 0x195uLL:
      case 0x196uLL:
      case 0x197uLL:
      case 0x198uLL:
      case 0x19AuLL:
      case 0x19BuLL:
      case 0x19DuLL:
      case 0x19EuLL:
      case 0x19FuLL:
      case 0x1A0uLL:
      case 0x1A1uLL:
      case 0x1A2uLL:
      case 0x1A3uLL:
      case 0x1A4uLL:
      case 0x1A5uLL:
      case 0x1A6uLL:
      case 0x1A7uLL:
      case 0x1A8uLL:
      case 0x1A9uLL:
      case 0x1AAuLL:
      case 0x1ABuLL:
      case 0x1ACuLL:
        goto LABEL_24;
      case 0x194uLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v70 = sub_23EC2E684();
        __swift_project_value_buffer(v70, (uint64_t)qword_256DC7708);
        v71 = sub_23EC2E66C();
        v72 = sub_23EC2EA08();
        if (os_log_type_enabled(v71, v72))
        {
          v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v73 = 0;
          _os_log_impl(&dword_23EB9F000, v71, v72, "Lookup Failed | User Account Not Found", v73, 2u);
          MEMORY[0x24265B940](v73, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        v69 = 2;
        goto LABEL_58;
      case 0x199uLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v74 = sub_23EC2E684();
        __swift_project_value_buffer(v74, (uint64_t)qword_256DC7708);
        v75 = sub_23EC2E66C();
        v76 = sub_23EC2EA08();
        if (os_log_type_enabled(v75, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v77 = 0;
          _os_log_impl(&dword_23EB9F000, v75, v76, "User Conflict | User must authenticate using OAuth.", v77, 2u);
          MEMORY[0x24265B940](v77, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        v69 = 3;
        goto LABEL_58;
      case 0x19CuLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v78 = sub_23EC2E684();
        __swift_project_value_buffer(v78, (uint64_t)qword_256DC7708);
        v79 = sub_23EC2E66C();
        v80 = sub_23EC2EA08();
        if (os_log_type_enabled(v79, v80))
        {
          v81 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v81 = 0;
          _os_log_impl(&dword_23EB9F000, v79, v80, "No Verification Factor | User does not have a verification factor on record.", v81, 2u);
          MEMORY[0x24265B940](v81, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        v69 = 4;
        goto LABEL_58;
      case 0x1ADuLL:
        if (qword_256DB71E8 != -1)
          swift_once();
        v82 = sub_23EC2E684();
        __swift_project_value_buffer(v82, (uint64_t)qword_256DC7708);
        v83 = sub_23EC2E66C();
        v84 = sub_23EC2EA08();
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v85 = 0;
          _os_log_impl(&dword_23EB9F000, v83, v84, "Too Many Request | User requested to authorize multiple times from the same account.", v85, 2u);
          MEMORY[0x24265B940](v85, -1, -1);
        }
        receiver = (unint64_t)v15[27].receiver;
        super_class = v15[27].super_class;
        v22 = (uint64_t)v15[26].super_class;
        v23 = v15[22].super_class;
        v24 = v15[21].receiver;
        v25 = v15[21].super_class;

        sub_23EC16288();
        v26 = (objc_class *)swift_allocError();
        v69 = 5;
        goto LABEL_58;
      default:
        if (v14 == (id)500)
        {
          if (qword_256DB71E8 != -1)
            swift_once();
          v86 = sub_23EC2E684();
          __swift_project_value_buffer(v86, (uint64_t)qword_256DC7708);
          v87 = sub_23EC2E66C();
          v88 = sub_23EC2EA08();
          if (os_log_type_enabled(v87, v88))
          {
            v89 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v89 = 0;
            _os_log_impl(&dword_23EB9F000, v87, v88, "Internal Server Error", v89, 2u);
            MEMORY[0x24265B940](v89, -1, -1);
          }
          receiver = (unint64_t)v15[27].receiver;
          super_class = v15[27].super_class;
          v22 = (uint64_t)v15[26].super_class;
          v23 = v15[22].super_class;
          v24 = v15[21].receiver;
          v25 = v15[21].super_class;

          sub_23EC16288();
          v26 = (objc_class *)swift_allocError();
          v69 = 6;
LABEL_58:
          *v68 = v69;
LABEL_59:
          swift_willThrow();
          sub_23EBA3EDC(v22, receiver);

          goto LABEL_60;
        }
        if (v14 == (id)300)
        {
          if (qword_256DB71E8 != -1)
            swift_once();
          v35 = (uint64_t *)(v0 + 160);
          v36 = sub_23EC2E684();
          __swift_project_value_buffer(v36, (uint64_t)qword_256DC7708);
          v37 = sub_23EC2E66C();
          v38 = sub_23EC2EA14();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v39 = 0;
            _os_log_impl(&dword_23EB9F000, v37, v38, "Account Lookup Response received", v39, 2u);
            MEMORY[0x24265B940](v39, -1, -1);
          }
          v40 = v15[28].receiver;

          sub_23EC2DFC4();
          swift_allocObject();
          sub_23EC2DFB8();
          sub_23EC29B24();
          sub_23EC2DFAC();
          if (!v40)
          {
            swift_release();
            v102 = *v35;
            v103 = *(_QWORD *)(*v35 + 16);
            if (v103)
            {
              v147 = v15 + 9;
              v161[0] = MEMORY[0x24BEE4AF8];
              sub_23EC2EBC4();
              v104 = (uint64_t *)(v102 + 56);
              v148 = v15;
              v105 = (objc_class *)type metadata accessor for TAFVerificationFactor();
              do
              {
                v106 = *(v104 - 2);
                v157 = *(v104 - 3);
                v159 = v103;
                v107 = *v104;
                v108 = v104[2];
                v149 = v104[1];
                v151 = *(v104 - 1);
                v109 = v104[3];
                v110 = v104[4];
                v112 = v104[5];
                v111 = v104[6];
                v113 = (char *)objc_allocWithZone(v105);
                v114 = &v113[OBJC_IVAR____TtC19HomeUtilityServices21TAFVerificationFactor__factor];
                *(_QWORD *)v114 = v157;
                *((_QWORD *)v114 + 1) = v106;
                *((_QWORD *)v114 + 2) = v151;
                *((_QWORD *)v114 + 3) = v107;
                *((_QWORD *)v114 + 4) = v149;
                *((_QWORD *)v114 + 5) = v108;
                *((_QWORD *)v114 + 6) = v109;
                *((_QWORD *)v114 + 7) = v110;
                *((_QWORD *)v114 + 8) = v112;
                *((_QWORD *)v114 + 9) = v111;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v15 = v148;
                sub_23EC2975C(v109, v110);
                v148[9].receiver = v113;
                v148[9].super_class = v105;
                -[objc_super init](v147, sel_init);
                sub_23EC2EBAC();
                sub_23EC2EBD0();
                sub_23EC2EBDC();
                sub_23EC2EBB8();
                v104 += 10;
                v103 = v159 - 1;
              }
              while (v159 != 1);
              v115 = v148[27].super_class;
              v116 = v161[0];
              sub_23EBA3EDC((uint64_t)v148[26].super_class, (unint64_t)v148[27].receiver);

              swift_bridgeObjectRelease();
            }
            else
            {
              v135 = v15[27].super_class;
              sub_23EBA3EDC((uint64_t)v15[26].super_class, (unint64_t)v15[27].receiver);

              swift_bridgeObjectRelease();
              v116 = MEMORY[0x24BEE4AF8];
            }
            v137 = (void (**)(Class, Class))v15[24].receiver;
            v136 = v15[24].super_class;
            v138 = v15[23].super_class;
            (*((void (**)(Class, id))v15[21].super_class + 1))(v15[22].super_class, v15[21].receiver);
            v137[1](v136, v138);
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return ((uint64_t (*)(uint64_t))v15->super_class)(v116);
          }
          v41 = v40;
          p_super_class = (id *)&v15[10].super_class;
          swift_release();
          v15[10].super_class = (Class)v40;
          v43 = v40;
          __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
          if (swift_dynamicCast())
          {
            v44 = (*((uint64_t (**)(Class, Class))v15[20].receiver + 11))(v15[20].super_class, v15[19].super_class);
            v45 = (void (**)(__int128 *, Class))v15[20].receiver;
            v46 = (__int128 *)v15[20].super_class;
            v47 = v15;
            v48 = v15[19].super_class;
            if (v44 == *MEMORY[0x24BEE26C8])
            {
              v49 = v47[18].super_class;
              v50 = v47[19].receiver;
              v154 = v47[18].receiver;

              v45[12](v46, v48);
              v51 = (char *)v46 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256DB9290) + 48);
              sub_23EC0F64C(v46, (uint64_t)&v47[5]);
              (*((void (**)(id, char *, id))v49 + 4))(v50, v51, v154);
              v155 = (uint64_t)&v47[5];
              __swift_project_boxed_opaque_existential_1(&v47[5].receiver, (uint64_t)v47[6].super_class);
              sub_23EC2EDEC();
              sub_23EC2E834();
              swift_bridgeObjectRelease();
              sub_23EC2EB4C();
              swift_bridgeObjectRelease();
              v161[0] = 0x6E756F6620746F6ELL;
              v161[1] = 0xAE00209380E22064;
              sub_23EC2EB7C();
              sub_23EC2E834();
              swift_bridgeObjectRelease();
              sub_23EC2E834();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v52 = sub_23EC2E66C();
              v53 = sub_23EC2EA08();
              v15 = v47;
              if (os_log_type_enabled(v52, v53))
              {
                v54 = (uint8_t *)swift_slowAlloc();
                v55 = swift_slowAlloc();
                v161[0] = v55;
                *(_DWORD *)v54 = 136315138;
                swift_bridgeObjectRetain();
                v47[13].receiver = (id)sub_23EBAE6D4(0xD00000000000001FLL, 0x800000023EC3B340, v161);
                sub_23EC2EA68();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_23EB9F000, v52, v53, "%s", v54, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x24265B940](v55, -1, -1);
                MEMORY[0x24265B940](v54, -1, -1);
              }
              else
              {
                swift_bridgeObjectRelease_n();
              }

              v139 = (unint64_t)v47[27].receiver;
              v140 = v47[27].super_class;
              v141 = (uint64_t)v15[26].super_class;
              v160 = v15[22].super_class;
              v142 = v15[21].super_class;
              v152 = v15[21].receiver;
              v143 = v15[18].super_class;
              v144 = v15[19].receiver;
              v145 = v15[18].receiver;
              type metadata accessor for NetworkError();
              sub_23EBCBFD0();
              v26 = (objc_class *)swift_allocError();
              *v146 = 1;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              sub_23EBA3EDC(v141, v139);

              (*((void (**)(id, id))v143 + 1))(v144, v145);
              (*((void (**)(Class, id))v142 + 1))(v160, v152);
              __swift_destroy_boxed_opaque_existential_0(v155);

              break;
            }
            v45[1](v46, v48);
            v15 = v47;
          }

          v117 = sub_23EC2E66C();
          v118 = sub_23EC2EA08();
          if (os_log_type_enabled(v117, v118))
          {
            v119 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v119 = 0;
            _os_log_impl(&dword_23EB9F000, v117, v118, "Error while decoding response from server", v119, 2u);
            MEMORY[0x24265B940](v119, -1, -1);
          }

          v120 = v41;
          v121 = v41;
          v122 = sub_23EC2E66C();
          v123 = sub_23EC2EA08();
          if (os_log_type_enabled(v122, v123))
          {
            v124 = (uint8_t *)swift_slowAlloc();
            v125 = swift_slowAlloc();
            v161[0] = v125;
            *(_DWORD *)v124 = 136315138;
            swift_getErrorValue();
            v126 = sub_23EC2ED74();
            v15[12].receiver = (id)sub_23EBAE6D4(v126, v127, v161);
            sub_23EC2EA68();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_23EB9F000, v122, v123, "%s", v124, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24265B940](v125, -1, -1);
            MEMORY[0x24265B940](v124, -1, -1);
          }
          else
          {

          }
          v128 = (unint64_t)v15[27].receiver;
          v129 = v15[27].super_class;
          v130 = (uint64_t)v15[26].super_class;
          v131 = v15[22].super_class;
          v132 = v15[21].receiver;
          v133 = v15[21].super_class;
          type metadata accessor for NetworkError();
          sub_23EBCBFD0();
          v26 = (objc_class *)swift_allocError();
          *v134 = 1;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          sub_23EBA3EDC(v130, v128);

          (*((void (**)(Class, id))v133 + 1))(v131, v132);
        }
        else
        {
LABEL_24:
          if (qword_256DB71E8 != -1)
            swift_once();
          v56 = *(void **)(v0 + 440);
          v57 = sub_23EC2E684();
          __swift_project_value_buffer(v57, (uint64_t)qword_256DC7708);
          v58 = v56;
          v59 = sub_23EC2E66C();
          v60 = sub_23EC2EA08();
          if (os_log_type_enabled(v59, v60))
          {
            v61 = v15[27].super_class;
            v62 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v62 = 134217984;
            v15[13].super_class = (Class)objc_msgSend(v12, sel_statusCode);
            sub_23EC2EA68();

            _os_log_impl(&dword_23EB9F000, v59, v60, "Request failed : Status Code %ld", v62, 0xCu);
            MEMORY[0x24265B940](v62, -1, -1);
            v63 = v15[27].super_class;
          }
          else
          {

            v63 = v15[27].super_class;
            v59 = v63;
          }
          v98 = (uint64_t)v15[26].super_class;
          v99 = (unint64_t)v15[27].receiver;
          v100 = v15[21].super_class;
          v156 = v15[21].receiver;
          v158 = v15[22].super_class;

          type metadata accessor for NetworkError();
          sub_23EBCBFD0();
          v26 = (objc_class *)swift_allocError();
          *v101 = objc_msgSend(v12, sel_statusCode);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          sub_23EBA3EDC(v98, v99);

          (*((void (**)(Class, id))v100 + 1))(v158, v156);
        }
        break;
    }
  }
  else
  {
    v15 = (objc_super *)v0;
    if (qword_256DB71E0 != -1)
      swift_once();
    v28 = sub_23EC2E684();
    __swift_project_value_buffer(v28, (uint64_t)qword_256DC76F0);
    v29 = sub_23EC2E66C();
    v30 = sub_23EC2EA08();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23EB9F000, v29, v30, "Unable to process Authorization response from Utility.", v31, 2u);
      MEMORY[0x24265B940](v31, -1, -1);
    }
    v32 = (unint64_t)v15[27].receiver;
    super_class = v15[27].super_class;
    v33 = (uint64_t)v15[26].super_class;
    v23 = v15[22].super_class;
    v24 = v15[21].receiver;
    v25 = v15[21].super_class;

    type metadata accessor for NetworkError();
    sub_23EBCBFD0();
    v26 = (objc_class *)swift_allocError();
    *v34 = 2;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_23EBA3EDC(v33, v32);
LABEL_60:

    (*((void (**)(Class, id))v25 + 1))(v23, v24);
  }
  v15[12].super_class = v26;
  v90 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v91 = swift_dynamicCast();
  v93 = (void (**)(Class, Class))v15[24].receiver;
  v92 = v15[24].super_class;
  v94 = v15[23].super_class;
  if (v91)
  {
    v95 = v15[11].super_class;
    sub_23EC16288();
    swift_allocError();
    *v96 = v95;
  }
  else
  {
    sub_23EC259EC(v26);
  }
  swift_willThrow();

  v93[1](v92, v94);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v15->super_class)();
}

uint64_t sub_23EC28B6C()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 336));
  v1 = *(void **)(v0 + 448);
  *(_QWORD *)(v0 + 200) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7948);
  v3 = swift_dynamicCast();
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 376);
  if (v3)
  {
    v7 = *(_QWORD *)(v0 + 184);
    sub_23EC16288();
    swift_allocError();
    *v8 = v7;
  }
  else
  {
    sub_23EC259EC(v1);
  }
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23EC28CA4(unint64_t result)
{
  if (result > 8)
    return 0;
  return result;
}

unint64_t sub_23EC28CB8()
{
  unint64_t result;

  result = qword_256DB92B0;
  if (!qword_256DB92B0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB92B0);
  }
  return result;
}

unint64_t sub_23EC28D00()
{
  unint64_t result;

  result = qword_256DB92B8;
  if (!qword_256DB92B8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB92B8);
  }
  return result;
}

unint64_t sub_23EC28D48()
{
  unint64_t result;

  result = qword_256DB92C0;
  if (!qword_256DB92C0)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB92C0);
  }
  return result;
}

unint64_t sub_23EC28D90()
{
  unint64_t result;

  result = qword_256DB92C8;
  if (!qword_256DB92C8)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB92C8);
  }
  return result;
}

unint64_t sub_23EC28DD8()
{
  unint64_t result;

  result = qword_256DB92D0;
  if (!qword_256DB92D0)
  {
    result = MEMORY[0x24265B8B0](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256DB92D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TAFAuthorizationError()
{
  return &type metadata for TAFAuthorizationError;
}

uint64_t destroy for AuthorizationFactor(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for AuthorizationFactor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    a1[6] = a2[6];
    a1[7] = v7;
    v8 = a2[8];
    v9 = a2[9];
    a1[8] = v8;
    a1[9] = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 4) = v10;
  }
  return a1;
}

_QWORD *assignWithCopy for AuthorizationFactor(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1 + 6;
  v5 = a2 + 6;
  v6 = a2[7];
  if (a1[7])
  {
    if (v6)
    {
      a1[6] = a2[6];
      a1[7] = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23EC29058((uint64_t)(a1 + 6));
      v7 = *((_OWORD *)a2 + 4);
      *v4 = *v5;
      *((_OWORD *)a1 + 4) = v7;
    }
  }
  else if (v6)
  {
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 4);
    *v4 = *v5;
    *((_OWORD *)a1 + 4) = v8;
  }
  return a1;
}

uint64_t sub_23EC29058(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AuthorizationFactor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 56);
  if (!v7)
  {
    sub_23EC29058(a1 + 48);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
    return a1;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorizationFactor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthorizationFactor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationFactor()
{
  return &type metadata for AuthorizationFactor;
}

ValueMetadata *type metadata accessor for TAFAuthorizationEndpoints()
{
  return &type metadata for TAFAuthorizationEndpoints;
}

_QWORD *sub_23EC29204(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9370);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC29F04();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9380);
    sub_23EC29F48(&qword_256DB9388, (uint64_t (*)(void))sub_23EBAFE58, MEMORY[0x24BEE12D0]);
    sub_23EC2ECA8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_23EC29348()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_23EC29390@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB92D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC296D4();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  LOBYTE(v33) = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v31 = v9;
  LOBYTE(v33) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v32 = v13;
  v29 = v12;
  v30 = v11;
  LOBYTE(v33) = 2;
  swift_bridgeObjectRetain();
  v27 = sub_23EC2EC84();
  v37 = 3;
  v15 = v14;
  sub_23EC29718();
  v28 = v15;
  swift_bridgeObjectRetain();
  sub_23EC2EC78();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v33;
  v17 = v34;
  v26 = v33;
  v18 = v35;
  v19 = v36;
  v20 = v30;
  swift_bridgeObjectRetain();
  v21 = v32;
  swift_bridgeObjectRetain();
  v22 = v28;
  swift_bridgeObjectRetain();
  sub_23EC2975C(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v26;
  result = sub_23EBB1AE4(v26, v17);
  *a2 = v31;
  a2[1] = v20;
  a2[2] = v29;
  a2[3] = v21;
  a2[4] = v27;
  a2[5] = v22;
  a2[6] = v23;
  a2[7] = v17;
  a2[8] = v18;
  a2[9] = v19;
  return result;
}

unint64_t sub_23EC296D4()
{
  unint64_t result;

  result = qword_256DB92E0;
  if (!qword_256DB92E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC372FC, &type metadata for AuthorizationFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB92E0);
  }
  return result;
}

unint64_t sub_23EC29718()
{
  unint64_t result;

  result = qword_256DB92E8;
  if (!qword_256DB92E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37014, &type metadata for TAFAuthorizationEndpoints);
    atomic_store(result, (unint64_t *)&qword_256DB92E8);
  }
  return result;
}

uint64_t sub_23EC2975C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23EC2978C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB92F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23EC297D4()
{
  unint64_t result;

  result = qword_256DB9300;
  if (!qword_256DB9300)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC36FEC, &type metadata for TAFAuthorizationEndpoints);
    atomic_store(result, (unint64_t *)&qword_256DB9300);
  }
  return result;
}

uint64_t sub_23EC29818(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x796669726576 && a2 == 0xE600000000000000;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684956531 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23EC298F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB9308);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC29A9C();
  sub_23EC2EDD4();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_23EC2EC84();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_23EC2EC84();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_23EC29A9C()
{
  unint64_t result;

  result = qword_256DB9310;
  if (!qword_256DB9310)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC372AC, &type metadata for TAFAuthorizationEndpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9310);
  }
  return result;
}

unint64_t sub_23EC29AE0()
{
  unint64_t result;

  result = qword_256DB9320;
  if (!qword_256DB9320)
  {
    result = MEMORY[0x24265B8B0](&protocol conformance descriptor for TAFAuthorizationError, &type metadata for TAFAuthorizationError);
    atomic_store(result, (unint64_t *)&qword_256DB9320);
  }
  return result;
}

unint64_t sub_23EC29B24()
{
  unint64_t result;

  result = qword_256DB9330;
  if (!qword_256DB9330)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37284, &type metadata for AccountLookupResponse);
    atomic_store(result, (unint64_t *)&qword_256DB9330);
  }
  return result;
}

unint64_t sub_23EC29B68()
{
  unint64_t result;

  result = qword_256DB9338;
  if (!qword_256DB9338)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3703C, &type metadata for AuthorizationFactor);
    atomic_store(result, (unint64_t *)&qword_256DB9338);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountLookupResponse()
{
  return &type metadata for AccountLookupResponse;
}

uint64_t storeEnumTagSinglePayload for TAFAuthorizationEndpoints.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23EC29C08 + 4 * byte_23EC36DF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23EC29C3C + 4 * byte_23EC36DF0[v4]))();
}

uint64_t sub_23EC29C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC29C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC29C4CLL);
  return result;
}

uint64_t sub_23EC29C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC29C60);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23EC29C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC29C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TAFAuthorizationEndpoints.CodingKeys()
{
  return &type metadata for TAFAuthorizationEndpoints.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AuthorizationFactor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23EC29CD4 + 4 * byte_23EC36DFF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23EC29D08 + 4 * byte_23EC36DFA[v4]))();
}

uint64_t sub_23EC29D08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC29D10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC29D18);
  return result;
}

uint64_t sub_23EC29D24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC29D2CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23EC29D30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC29D38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationFactor.CodingKeys()
{
  return &type metadata for AuthorizationFactor.CodingKeys;
}

unint64_t sub_23EC29D58()
{
  unint64_t result;

  result = qword_256DB9340;
  if (!qword_256DB9340)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3717C, &type metadata for AuthorizationFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9340);
  }
  return result;
}

unint64_t sub_23EC29DA0()
{
  unint64_t result;

  result = qword_256DB9348;
  if (!qword_256DB9348)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37234, &type metadata for TAFAuthorizationEndpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9348);
  }
  return result;
}

unint64_t sub_23EC29DE8()
{
  unint64_t result;

  result = qword_256DB9350;
  if (!qword_256DB9350)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC371A4, &type metadata for TAFAuthorizationEndpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9350);
  }
  return result;
}

unint64_t sub_23EC29E30()
{
  unint64_t result;

  result = qword_256DB9358;
  if (!qword_256DB9358)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC371CC, &type metadata for TAFAuthorizationEndpoints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9358);
  }
  return result;
}

unint64_t sub_23EC29E78()
{
  unint64_t result;

  result = qword_256DB9360;
  if (!qword_256DB9360)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC370B4, &type metadata for AuthorizationFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9360);
  }
  return result;
}

unint64_t sub_23EC29EC0()
{
  unint64_t result;

  result = qword_256DB9368;
  if (!qword_256DB9368)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC370DC, &type metadata for AuthorizationFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9368);
  }
  return result;
}

unint64_t sub_23EC29F04()
{
  unint64_t result;

  result = qword_256DB9378;
  if (!qword_256DB9378)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37404, &type metadata for AccountLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9378);
  }
  return result;
}

uint64_t sub_23EC29F48(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256DB9380);
    v8 = a2();
    result = MEMORY[0x24265B8B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccountLookupResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23EC29FF0 + 4 * byte_23EC36E04[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23EC2A010 + 4 * byte_23EC36E09[v4]))();
}

_BYTE *sub_23EC29FF0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23EC2A010(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC2A018(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC2A020(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23EC2A028(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23EC2A030(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccountLookupResponse.CodingKeys()
{
  return &type metadata for AccountLookupResponse.CodingKeys;
}

unint64_t sub_23EC2A050()
{
  unint64_t result;

  result = qword_256DB93A0;
  if (!qword_256DB93A0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC373DC, &type metadata for AccountLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB93A0);
  }
  return result;
}

unint64_t sub_23EC2A098()
{
  unint64_t result;

  result = qword_256DB93A8;
  if (!qword_256DB93A8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3734C, &type metadata for AccountLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB93A8);
  }
  return result;
}

unint64_t sub_23EC2A0E0()
{
  unint64_t result;

  result = qword_256DB93B0;
  if (!qword_256DB93B0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37374, &type metadata for AccountLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB93B0);
  }
  return result;
}

uint64_t sub_23EC2A124(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_23EC2A12C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_23EC2A134()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _BYTE v14[32];
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_23EC2DFE8();
  swift_allocObject();
  sub_23EC2DFDC();
  v1 = v0[1];
  v19 = *v0;
  v20 = v1;
  v2 = v0[3];
  v21 = v0[2];
  v22 = v2;
  sub_23EC2AE50();
  v3 = sub_23EC2DFD0();
  v5 = v4;
  swift_release();
  v6 = (void *)objc_opt_self();
  v7 = (void *)sub_23EC2E2B8();
  *(_QWORD *)&v19 = 0;
  v8 = objc_msgSend(v6, sel_JSONObjectWithData_options_error_, v7, 4, &v19);

  v9 = (id)v19;
  if (v8)
  {
    sub_23EC2EAE0();
    swift_unknownObjectRelease();
  }
  else
  {
    v10 = v9;
    v11 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    v19 = 0u;
    v20 = 0u;
  }
  sub_23EBA5560((uint64_t)&v19, (uint64_t)&v16);
  if (v17)
  {
    sub_23EBB2080(&v16, v15);
    sub_23EBA55A8((uint64_t)v15, (uint64_t)v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256DB93C8);
    if ((swift_dynamicCast() & 1) == 0)
      v18 = 0;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    v12 = v18;
  }
  else
  {
    v12 = 0;
    v18 = 0;
  }
  sub_23EBA3EDC(v3, v5);
  sub_23EBA5520((uint64_t)&v19);
  return v12;
}

id sub_23EC2A33C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_23EC2AE14();
    v4 = (void *)sub_23EC2E714();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t sub_23EC2A3B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB93D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC2B078();
  sub_23EC2EDE0();
  v10[15] = 0;
  sub_23EC2ECE4();
  if (!v2)
  {
    v10[14] = 1;
    sub_23EC2ECE4();
    v10[13] = 2;
    sub_23EC2ECE4();
    v10[12] = *(_BYTE *)(v3 + 48);
    v10[11] = 3;
    sub_23EC2B0BC();
    sub_23EC2ED08();
    v10[10] = 4;
    sub_23EC2ECFC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23EC2A554()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23EC2A588 + 4 * byte_23EC37460[*v0]))(0x497974696C697475, 0xE900000000000044);
}

uint64_t sub_23EC2A588()
{
  return 0x4974736575716572;
}

uint64_t sub_23EC2A59C()
{
  return 0x74616C6572726F63;
}

uint64_t sub_23EC2A5C0()
{
  return 1701869940;
}

uint64_t sub_23EC2A5D0()
{
  return 0x6E6F697461727564;
}

uint64_t sub_23EC2A5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23EC2B100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23EC2A60C()
{
  sub_23EC2B078();
  return sub_23EC2EDF8();
}

uint64_t sub_23EC2A634()
{
  sub_23EC2B078();
  return sub_23EC2EE04();
}

double sub_23EC2A65C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_23EC2B348(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_23EC2A69C(_QWORD *a1)
{
  return sub_23EC2A3B0(a1);
}

uint64_t sub_23EC2A6B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23EBC1574(*a1, *a2);
}

uint64_t sub_23EC2A6BC()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC2A764()
{
  sub_23EC2E744();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23EC2A7E8()
{
  sub_23EC2EDB0();
  sub_23EC2E744();
  swift_bridgeObjectRelease();
  return sub_23EC2EDC8();
}

uint64_t sub_23EC2A88C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23EC2B9C4();
  *a1 = result;
  return result;
}

void sub_23EC2A8B8(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x800000023EC37B70;
  v4 = 0xE800000000000000;
  v5 = 0x65646F43646E6573;
  if (v2 != 1)
  {
    v5 = 0x6F43796669726576;
    v4 = 0xEA00000000006564;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000010;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_23EC2A920()
{
  sub_23EC2B980();
  return sub_23EC2E900();
}

uint64_t sub_23EC2A97C()
{
  sub_23EC2B980();
  return sub_23EC2E8E8();
}

uint64_t sub_23EC2A9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  double v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t result;
  double v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v27 = a7;
  v26 = a6;
  v16 = sub_23EC2E3CC();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23EC2E39C();
  sub_23EC2E2F4();
  v21 = v20;
  v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v22(a8, v16);
  result = ((uint64_t (*)(char *, uint64_t))v22)(v19, v16);
  v24 = v21 * 1000.0;
  if ((~COERCE__INT64(v21 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v24 < 9.22337204e18)
  {
    *(_QWORD *)a9 = a1;
    *(_QWORD *)(a9 + 8) = a2;
    *(_QWORD *)(a9 + 16) = a3;
    *(_QWORD *)(a9 + 24) = a4;
    v25 = v26;
    *(_QWORD *)(a9 + 32) = a5;
    *(_QWORD *)(a9 + 40) = v25;
    *(_BYTE *)(a9 + 48) = v27;
    *(_QWORD *)(a9 + 56) = (uint64_t)v24;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_23EC2AB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t aBlock[6];

  v0 = sub_23EC2A134();
  if (v0)
    v1 = v0;
  else
    v1 = MEMORY[0x24BEE4B00];
  if (qword_256DB7228 != -1)
    swift_once();
  v2 = sub_23EC2E684();
  __swift_project_value_buffer(v2, (uint64_t)qword_256DC77C8);
  swift_bridgeObjectRetain_n();
  v3 = sub_23EC2E66C();
  v4 = sub_23EC2EA14();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    aBlock[0] = v6;
    *(_DWORD *)v5 = 136315394;
    sub_23EBAE6D4(0xD00000000000002ELL, 0x800000023EC3B380, aBlock);
    sub_23EC2EA68();
    *(_WORD *)(v5 + 12) = 2080;
    sub_23EC2AE14();
    swift_bridgeObjectRetain();
    v7 = sub_23EC2E72C();
    v9 = v8;
    swift_bridgeObjectRelease();
    sub_23EBAE6D4(v7, v9, aBlock);
    sub_23EC2EA68();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23EB9F000, v3, v4, "Sending analytics event for [%s]: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v6, -1, -1);
    MEMORY[0x24265B940](v5, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v10 = (void *)sub_23EC2E774();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  aBlock[4] = (uint64_t)sub_23EC2ADF4;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_23EC2A33C;
  aBlock[3] = (uint64_t)&block_descriptor_2;
  v12 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v12);

}

uint64_t sub_23EC2ADD0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23EC2ADF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_23EC2AE14()
{
  unint64_t result;

  result = qword_256DB93B8;
  if (!qword_256DB93B8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256DB93B8);
  }
  return result;
}

unint64_t sub_23EC2AE50()
{
  unint64_t result;

  result = qword_256DB93C0;
  if (!qword_256DB93C0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC3751C, &type metadata for UtilityTransactionData);
    atomic_store(result, (unint64_t *)&qword_256DB93C0);
  }
  return result;
}

uint64_t initializeWithCopy for UtilityTransactionData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UtilityTransactionData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for UtilityTransactionData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for UtilityTransactionData()
{
  return &type metadata for UtilityTransactionData;
}

unint64_t sub_23EC2B008(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23EC2B034();
  result = sub_23EC2AE50();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23EC2B034()
{
  unint64_t result;

  result = qword_256DB93D0;
  if (!qword_256DB93D0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC374D8, &type metadata for UtilityTransactionData);
    atomic_store(result, (unint64_t *)&qword_256DB93D0);
  }
  return result;
}

unint64_t sub_23EC2B078()
{
  unint64_t result;

  result = qword_256DB93E0;
  if (!qword_256DB93E0)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37710, &type metadata for UtilityTransactionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB93E0);
  }
  return result;
}

unint64_t sub_23EC2B0BC()
{
  unint64_t result;

  result = qword_256DB93E8;
  if (!qword_256DB93E8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC376E8, &type metadata for UtilityTransactionType);
    atomic_store(result, (unint64_t *)&qword_256DB93E8);
  }
  return result;
}

uint64_t sub_23EC2B100(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x497974696C697475 && a2 == 0xE900000000000044;
  if (v2 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000044 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616C6572726F63 && a2 == 0xED000044496E6F69 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_23EC2ED38() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23EC2ED38();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23EC2B348@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  char v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256DB93F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23EC2B078();
  sub_23EC2EDD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v33 = 0;
  v9 = sub_23EC2EC84();
  v11 = v10;
  v26 = v9;
  v32 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23EC2EC84();
  v27 = v13;
  v23 = v12;
  v31 = 2;
  swift_bridgeObjectRetain();
  v25 = 0;
  v22 = sub_23EC2EC84();
  v29 = 3;
  v15 = v14;
  sub_23EC2B684();
  swift_bridgeObjectRetain();
  sub_23EC2ECA8();
  v24 = v15;
  v21 = v30;
  v28 = 4;
  v16 = sub_23EC2EC9C();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v17 = v24;
  swift_bridgeObjectRelease();
  v18 = v27;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v23;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v17;
  *(_BYTE *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v16;
  return result;
}

unint64_t sub_23EC2B684()
{
  unint64_t result;

  result = qword_256DB93F8;
  if (!qword_256DB93F8)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC376C0, &type metadata for UtilityTransactionType);
    atomic_store(result, (unint64_t *)&qword_256DB93F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UtilityTransactionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23EC2B714 + 4 * byte_23EC3746A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23EC2B748 + 4 * byte_23EC37465[v4]))();
}

uint64_t sub_23EC2B748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC2B750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC2B758);
  return result;
}

uint64_t sub_23EC2B764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC2B76CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23EC2B770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC2B778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityTransactionData.CodingKeys()
{
  return &type metadata for UtilityTransactionData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UtilityTransactionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23EC2B7E0 + 4 * byte_23EC37474[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23EC2B814 + 4 * byte_23EC3746F[v4]))();
}

uint64_t sub_23EC2B814(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC2B81C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23EC2B824);
  return result;
}

uint64_t sub_23EC2B830(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23EC2B838);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23EC2B83C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23EC2B844(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UtilityTransactionType()
{
  return &type metadata for UtilityTransactionType;
}

unint64_t sub_23EC2B864()
{
  unint64_t result;

  result = qword_256DB9400;
  if (!qword_256DB9400)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC375E0, &type metadata for UtilityTransactionType);
    atomic_store(result, (unint64_t *)&qword_256DB9400);
  }
  return result;
}

unint64_t sub_23EC2B8AC()
{
  unint64_t result;

  result = qword_256DB9408;
  if (!qword_256DB9408)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37698, &type metadata for UtilityTransactionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9408);
  }
  return result;
}

unint64_t sub_23EC2B8F4()
{
  unint64_t result;

  result = qword_256DB9410;
  if (!qword_256DB9410)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37608, &type metadata for UtilityTransactionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9410);
  }
  return result;
}

unint64_t sub_23EC2B93C()
{
  unint64_t result;

  result = qword_256DB9418;
  if (!qword_256DB9418)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37630, &type metadata for UtilityTransactionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256DB9418);
  }
  return result;
}

unint64_t sub_23EC2B980()
{
  unint64_t result;

  result = qword_256DB9420;
  if (!qword_256DB9420)
  {
    result = MEMORY[0x24265B8B0](&unk_23EC37568, &type metadata for UtilityTransactionType);
    atomic_store(result, &qword_256DB9420);
  }
  return result;
}

uint64_t sub_23EC2B9C4()
{
  unint64_t v0;

  v0 = sub_23EC2EC48();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_23EC2BA0C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v33 = MEMORY[0x24BEE4AF8];
  sub_23EBAED4C(0, v1, 0);
  v2 = v33;
  result = sub_23EC2CFD4(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v27 = v3 + 80;
  v28 = v1;
  v29 = v5;
  v30 = v3 + 64;
  v31 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v32 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v6);
    v17 = *v15;
    v16 = v15[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_25433FBD8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23EC32680;
    *(_QWORD *)(inited + 32) = 0x6D614E646C656966;
    *(_QWORD *)(inited + 40) = 0xE900000000000065;
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 56) = v14;
    *(_QWORD *)(inited + 64) = 0x65756C6176;
    *(_QWORD *)(inited + 72) = 0xE500000000000000;
    *(_QWORD *)(inited + 80) = v17;
    *(_QWORD *)(inited + 88) = v16;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v19 = sub_23EBA7540(inited);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v33 + 16);
    v20 = *(_QWORD *)(v33 + 24);
    if (v21 >= v20 >> 1)
      result = sub_23EBAED4C(v20 > 1, v21 + 1, 1);
    *(_QWORD *)(v33 + 16) = v21 + 1;
    *(_QWORD *)(v33 + 8 * v21 + 32) = v19;
    v3 = v31;
    v9 = 1 << *(_BYTE *)(v31 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v30;
    v22 = *(_QWORD *)(v30 + 8 * v11);
    if ((v22 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(v31 + 36) != v29)
      goto LABEL_27;
    v23 = v22 & (-2 << (v6 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v24 = v11 + 1;
      v25 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v25)
      {
        v26 = *(_QWORD *)(v30 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v11)
          {
            v26 = *(_QWORD *)(v27 + 8 * v11++);
            if (v26)
            {
              v24 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v32 + 1;
    v6 = v9;
    if (v32 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_23EC2BCBC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD v9[12];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F918);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23EC2DFA0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v8 = (char *)sub_23EC2BDB4 + 4 * byte_23EC37760[sub_23EC12720()];
  v9[7] = a2;
  __asm { BR              X10 }
}

uint64_t sub_23EC2BDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _DWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  v7 = sub_23EC2ED38();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
    __asm { BR              X10 }
  if (qword_256DB71E8 != -1)
    swift_once();
  v8 = sub_23EC2E684();
  __swift_project_value_buffer(v8, (uint64_t)qword_256DC7708);
  v9 = sub_23EC2E66C();
  v10 = sub_23EC2EA14();
  if (os_log_type_enabled(v9, v10))
  {
    *(_QWORD *)(v6 - 120) = v3;
    *(_QWORD *)(v6 - 112) = v5;
    v11 = (_DWORD *)swift_slowAlloc();
    *(_QWORD *)(v6 - 88) = swift_slowAlloc();
    *v11 = 136315138;
    __asm { BR              X10 }
  }

  v12 = sub_23EC2E66C();
  v13 = sub_23EC2EA14();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23EB9F000, v12, v13, "Adding HMAC headers.", v14, 2u);
    MEMORY[0x24265B940](v14, -1, -1);
  }

  sub_23EC17CD8(v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v0) == 1)
  {
    sub_23EBA3038(v2, &qword_25433F918);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v16, "Unable to sign with HMAC headers.", v17, 2u);
      MEMORY[0x24265B940](v17, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v0);
    v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v2, v0);
    if ((*(_DWORD *)(v6 - 100) & 1) != 0)
      sub_23EC2DF94();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v5, v3, v0);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, v18, 1, v0);
}

uint64_t sub_23EC2C388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = sub_23EC2E3F0();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v5 = sub_23EC2DFA0();
  v3[11] = v5;
  v3[12] = *(_QWORD *)(v5 - 8);
  v3[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25433F930);
  v3[14] = swift_task_alloc();
  v6 = sub_23EC2E264();
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23EC2C49C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC19HomeUtilityServices20UtilityConfiguration_config);
  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[17];
  *(_QWORD *)(v0 + 152) = v4;
  v5 = v1[18];
  *(_QWORD *)(v0 + 160) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25433FBC8);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 168) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_23EC2FB70;
  v7 = v1[24];
  v8 = v1[25];
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  v9 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v9 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23EC2E240();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    v13 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23EBA3038(v13, &qword_25433F930);
LABEL_7:
    if (qword_256DB71E8 != -1)
      swift_once();
    v14 = sub_23EC2E684();
    __swift_project_value_buffer(v14, (uint64_t)qword_256DC7708);
    v15 = sub_23EC2E66C();
    v16 = sub_23EC2EA08();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_23EB9F000, v15, v16, "Unable to generate TAF Authorization URL", v17, 2u);
      MEMORY[0x24265B940](v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, 1, 1, v18);
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  v22 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v22 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v22)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256DB71E8 != -1)
      swift_once();
    v24 = sub_23EC2E684();
    __swift_project_value_buffer(v24, (uint64_t)qword_256DC7708);
    v25 = sub_23EC2E66C();
    v26 = sub_23EC2EA08();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_23EB9F000, v25, v26, "Unable to generate TAF Authorization URL | UtilityConfiguration contains empty ClientID", v27, 2u);
      MEMORY[0x24265B940](v27, -1, -1);
    }
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 96);
    v33 = *(_QWORD *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v33, 1, 1, v31);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v23;
  *v23 = v0;
  v23[1] = sub_23EC2C890;
  return sub_23EBF35CC(v6, 0);
}

uint64_t sub_23EC2C890(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[25] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23EC2C970()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 56);
  sub_23EBF5CE8(*(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease();
  sub_23EC2BA0C(v1);
  v2 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256DB7920);
  v3 = (void *)sub_23EC2E924();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 32) = 0;
  v4 = objc_msgSend(v2, sel_dataWithJSONObject_options_error_, v3, 0, v0 + 32);

  v5 = *(id *)(v0 + 32);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 80);
    v31 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = sub_23EC2E2D0();
    v29 = v15;
    v30 = v14;

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    sub_23EC2DF58();
    sub_23EC2E3E4();
    sub_23EC2E3D8();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    sub_23EC2E7D4();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2E834();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2DF70();
    swift_bridgeObjectRelease();
    sub_23EC2DF40();
    sub_23EBA3E98(v30, v29);
    sub_23EC2DF88();
    sub_23EC2BCBC(v10, 1);
    sub_23EBA3EDC(v30, v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v10, v32);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  }
  else
  {
    v16 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = (void *)sub_23EC2E1D4();

    swift_willThrow();
    if (qword_256DB71E8 != -1)
      swift_once();
    v18 = sub_23EC2E684();
    __swift_project_value_buffer(v18, (uint64_t)qword_256DC7708);
    v19 = sub_23EC2E66C();
    v20 = sub_23EC2EA08();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_23EB9F000, v19, v20, "Unable to encode TAF Authorization fields", v21, 2u);
      MEMORY[0x24265B940](v21, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 88);
    v26 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v27, 1, 1, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC2CDC4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  if (qword_256DB71E8 != -1)
    swift_once();
  v1 = sub_23EC2E684();
  __swift_project_value_buffer(v1, (uint64_t)qword_256DC7708);
  v2 = sub_23EC2E66C();
  v3 = sub_23EC2EA08();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  if (v4)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v11[0] = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 16) = sub_23EBAE6D4(0xD000000000000045, 0x800000023EC3B3D0, v11);
    sub_23EC2EA68();
    _os_log_impl(&dword_23EB9F000, v2, v3, "Unable to generate Private Access Token. %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24265B940](v9, -1, -1);
    MEMORY[0x24265B940](v8, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 88));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23EC2CFD4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

double static UtilityPeakPeriodsController.generateMockUtilityPeakPeriods(start:)@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  uint64_t *v29;
  double result;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char v33;
  _QWORD *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  id v76;
  char *v77;
  char *v78;
  void *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  char *v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  void (*v98)(char *, char *, uint64_t);
  void (*v99)(uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;

  v97 = a1;
  v1 = sub_23EC2E474();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25433F948);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_23EC2E3CC();
  v8 = *(char **)(v101 - 8);
  v9 = MEMORY[0x24BDAC7A8](v101);
  v108 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v100 = (char *)&v95 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v96 = (char *)&v95 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v102 = (char *)&v95 - v15;
  if (qword_25433FAC0 != -1)
    goto LABEL_31;
  while (1)
  {
    v16 = sub_23EC2E684();
    __swift_project_value_buffer(v16, (uint64_t)qword_25433FC38);
    v17 = sub_23EC2E66C();
    v18 = sub_23EC2EA14();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_23EB9F000, v17, v18, "Generating Mock Data for Utility Peak", v19, 2u);
      MEMORY[0x24265B940](v19, -1, -1);
    }

    v20 = (uint64_t)v102;
    sub_23EC2E348();
    sub_23EC2D9CC(v20);
    v22 = v21;
    v23 = v20;
    v24 = v101;
    v99 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v8 + 1);
    v99(v23, v101);
    if ((v22 & 1) != 0)
    {
      v25 = sub_23EC2E66C();
      v26 = sub_23EC2EA08();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        v28 = "Mock Service unable to calculate end date properly.";
        goto LABEL_10;
      }
LABEL_11:

      v29 = v97;
      v97[10] = 0;
      result = 0.0;
      *((_OWORD *)v29 + 3) = 0u;
      *((_OWORD *)v29 + 4) = 0u;
      *((_OWORD *)v29 + 1) = 0u;
      *((_OWORD *)v29 + 2) = 0u;
      *(_OWORD *)v29 = 0u;
      return result;
    }
    sub_23EC2E45C();
    sub_23EC2E438();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v8 + 7))(v7, 0, 1, v24);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v8 + 6))(v7, 1, v24) == 1)
    {
      sub_23EBDFB10((uint64_t)v7);
      v25 = sub_23EC2E66C();
      v26 = sub_23EC2EA08();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        v28 = "Mock Service unable to calculate start date properly.";
LABEL_10:
        _os_log_impl(&dword_23EB9F000, v25, v26, v28, v27, 2u);
        MEMORY[0x24265B940](v27, -1, -1);
        goto LABEL_11;
      }
      goto LABEL_11;
    }
    v1 = v24;
    v31 = v96;
    v98 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v8 + 4);
    v98(v96, v7, v24);
    sub_23EC2E348();
    v32 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v8 + 2);
    v8 = v108;
    v32(v108, v31, v24);
    v33 = sub_23EC2E360();
    v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v33 & 1) == 0)
      break;
    while (1)
    {
      v35 = sub_23EC0DCA8();
      v36 = (void *)sub_23EC2E354();
      v37 = objc_msgSend(v35, sel_stringFromDate_, v36);

      v104 = sub_23EC2E780();
      v107 = v38;

      v4 = v102;
      sub_23EC2E348();
      v39 = v8;
      v40 = (void (*)(char *, uint64_t))v99;
      v99((uint64_t)v39, v1);
      v41 = v98;
      v98(v108, v4, v1);
      v42 = sub_23EC0DCA8();
      v43 = (void *)sub_23EC2E354();
      v44 = objc_msgSend(v42, sel_stringFromDate_, v43);

      v103 = sub_23EC2E780();
      v106 = v45;

      sub_23EC2E348();
      v40(v108, v1);
      v41(v108, v4, v1);
      v46 = sub_23EC0DCA8();
      v47 = (void *)sub_23EC2E354();
      v48 = objc_msgSend(v46, sel_stringFromDate_, v47);

      v2 = sub_23EC2E780();
      v105 = v49;

      sub_23EC2E348();
      v40(v108, v1);
      v41(v108, v4, v1);
      v50 = sub_23EC0DCA8();
      v51 = (void *)sub_23EC2E354();
      v52 = objc_msgSend(v50, sel_stringFromDate_, v51);

      v7 = (char *)sub_23EC2E780();
      v54 = v53;

      sub_23EC2E348();
      v40(v108, v1);
      v8 = v108;
      v41(v108, v4, v1);
      v55 = v34[2];
      v56 = v55 + 4;
      if (__OFADD__(v55, 4))
        break;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v56 > v34[3] >> 1)
      {
        if (v55 <= v56)
          v58 = v55 + 4;
        else
          v58 = v55;
        v34 = sub_23EC21CE0(isUniquelyReferenced_nonNull_native, v58, 1, v34);
      }
      v60 = v34[2];
      v59 = v34[3];
      v61 = v60 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v60 >= v59 >> 1)
        v34 = sub_23EC21CE0((_QWORD *)(v59 > 1), v60 + 1, 1, v34);
      v34[2] = v61;
      v62 = (char *)&v34[5 * v60];
      v63 = v107;
      *((_QWORD *)v62 + 4) = v104;
      *((_QWORD *)v62 + 5) = v63;
      strcpy(v62 + 48, "superOffPeak");
      v62[61] = 0;
      *((_WORD *)v62 + 31) = -5120;
      *((_QWORD *)v62 + 8) = 0;
      v64 = v34[3];
      v65 = v60 + 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61 >= v64 >> 1)
        v34 = sub_23EC21CE0((_QWORD *)(v64 > 1), v65, 1, v34);
      v34[2] = v65;
      v66 = &v34[5 * v61];
      v67 = v106;
      v66[4] = v103;
      v66[5] = v67;
      v66[6] = 0x6B61655066666FLL;
      v66[7] = 0xE700000000000000;
      v66[8] = 1;
      v68 = v34[2];
      v69 = v34[3];
      v70 = v68 + 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v68 >= v69 >> 1)
        v34 = sub_23EC21CE0((_QWORD *)(v69 > 1), v68 + 1, 1, v34);
      v34[2] = v70;
      v71 = &v34[5 * v68];
      v72 = v105;
      v71[4] = v2;
      v71[5] = v72;
      v71[6] = 0x6B6165506E6FLL;
      v71[7] = 0xE600000000000000;
      v71[8] = 2;
      v73 = v34[3];
      v74 = v68 + 2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v70 >= v73 >> 1)
        v34 = sub_23EC21CE0((_QWORD *)(v73 > 1), v68 + 2, 1, v34);
      v1 = v101;
      v34[2] = v74;
      v75 = &v34[5 * v70];
      v75[4] = v7;
      v75[5] = v54;
      v75[6] = 0x6B61655066666FLL;
      v75[7] = 0xE700000000000000;
      v75[8] = 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((sub_23EC2E360() & 1) == 0)
        goto LABEL_29;
    }
    __break(1u);
LABEL_31:
    swift_once();
  }
LABEL_29:
  v76 = sub_23EC0DCA8();
  v77 = v8;
  v78 = v96;
  v79 = (void *)sub_23EC2E354();
  v80 = v1;
  v81 = objc_msgSend(v76, sel_stringFromDate_, v79);

  v82 = sub_23EC2E780();
  v84 = v83;

  v85 = sub_23EC0DCA8();
  v86 = v100;
  v87 = (void *)sub_23EC2E354();
  v88 = objc_msgSend(v85, sel_stringFromDate_, v87);

  v89 = sub_23EC2E780();
  v91 = v90;

  v92 = v77;
  v93 = (void (*)(char *, uint64_t))v99;
  v99((uint64_t)v92, v80);
  v93(v86, v80);
  v93(v78, v80);
  v94 = v97;
  *v97 = v82;
  v94[1] = v84;
  v94[2] = v89;
  v94[3] = v91;
  v94[4] = (uint64_t)v34;
  *(_OWORD *)(v94 + 5) = xmmword_23EC37770;
  *(_OWORD *)(v94 + 7) = xmmword_23EC37780;
  *(_QWORD *)&result = 5590868;
  *(_OWORD *)(v94 + 9) = xmmword_23EC37790;
  return result;
}

uint64_t sub_23EC2D9CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, _QWORD, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t result;
  _QWORD v23[2];

  v23[1] = a1;
  v1 = sub_23EC2E468();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v23 - v6;
  v8 = sub_23EC2E420();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23EC2E474();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCEF50], v8);
  sub_23EC2E42C();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v16 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v16(v7, *MEMORY[0x24BDCF220], v1);
  v16(v5, *MEMORY[0x24BDCF250], v1);
  v17 = sub_23EC2E450();
  v19 = v18;
  LOBYTE(v16) = v20;
  v21 = *(void (**)(char *, uint64_t))(v2 + 8);
  v21(v5, v1);
  v21(v7, v1);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  result = 0;
  if ((v16 & 1) == 0)
  {
    result = v19 - v17;
    if (__OFSUB__(v19, v17))
      __break(1u);
  }
  return result;
}

uint64_t sub_23EC2DBA4(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_25433FC38);
}

uint64_t sub_23EC2DBD0(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_25433FC80);
}

uint64_t sub_23EC2DBFC(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7678);
}

uint64_t sub_23EC2DC20(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_25433FC50);
}

uint64_t sub_23EC2DC4C(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7690);
}

uint64_t sub_23EC2DC70(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_25433FC68);
}

uint64_t sub_23EC2DC94(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC76A8);
}

uint64_t sub_23EC2DCBC(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_25433FC98);
}

uint64_t sub_23EC2DCDC(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC76C0);
}

uint64_t sub_23EC2DCFC(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC76D8);
}

uint64_t sub_23EC2DD28(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC76F0);
}

uint64_t sub_23EC2DD4C(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7708);
}

uint64_t sub_23EC2DD70(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7720);
}

uint64_t sub_23EC2DD94(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7738);
}

uint64_t sub_23EC2DDB8(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7750);
}

uint64_t sub_23EC2DDE0(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7768);
}

uint64_t sub_23EC2DE04(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7780);
}

uint64_t sub_23EC2DE30(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC7798);
}

uint64_t sub_23EC2DE54(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC77B0);
}

uint64_t sub_23EC2DE80(uint64_t a1)
{
  return sub_23EC2DEA4(a1, qword_256DC77C8);
}

uint64_t sub_23EC2DEA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23EC2E684();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  swift_bridgeObjectRetain();
  return sub_23EC2E678();
}

uint64_t sub_23EC2DF28()
{
  return MEMORY[0x24BDCAF28]();
}

uint64_t sub_23EC2DF34()
{
  return MEMORY[0x24BDCAFF0]();
}

uint64_t sub_23EC2DF40()
{
  return MEMORY[0x24BDCAFF8]();
}

uint64_t sub_23EC2DF4C()
{
  return MEMORY[0x24BDCB040]();
}

uint64_t sub_23EC2DF58()
{
  return MEMORY[0x24BDCB070]();
}

uint64_t sub_23EC2DF64()
{
  return MEMORY[0x24BDCB088]();
}

uint64_t sub_23EC2DF70()
{
  return MEMORY[0x24BDCB098]();
}

uint64_t sub_23EC2DF7C()
{
  return MEMORY[0x24BDCB0A0]();
}

uint64_t sub_23EC2DF88()
{
  return MEMORY[0x24BDCB0A8]();
}

uint64_t sub_23EC2DF94()
{
  return MEMORY[0x24BDCB0B0]();
}

uint64_t sub_23EC2DFA0()
{
  return MEMORY[0x24BDCB0C0]();
}

uint64_t sub_23EC2DFAC()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_23EC2DFB8()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_23EC2DFC4()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_23EC2DFD0()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_23EC2DFDC()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_23EC2DFE8()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_23EC2DFF4()
{
  return MEMORY[0x24BDCB668]();
}

uint64_t sub_23EC2E000()
{
  return MEMORY[0x24BDCB6A8]();
}

uint64_t sub_23EC2E00C()
{
  return MEMORY[0x24BDCB6D0]();
}

uint64_t sub_23EC2E018()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_23EC2E024()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t sub_23EC2E030()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t sub_23EC2E03C()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t sub_23EC2E048()
{
  return MEMORY[0x24BDCBA60]();
}

uint64_t sub_23EC2E054()
{
  return MEMORY[0x24BDCBA78]();
}

uint64_t sub_23EC2E060()
{
  return MEMORY[0x24BDCBA80]();
}

uint64_t sub_23EC2E06C()
{
  return MEMORY[0x24BDCBA90]();
}

uint64_t sub_23EC2E078()
{
  return MEMORY[0x24BDCBAB0]();
}

uint64_t sub_23EC2E084()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_23EC2E090()
{
  return MEMORY[0x24BDCBAD0]();
}

uint64_t sub_23EC2E09C()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_23EC2E0A8()
{
  return MEMORY[0x24BDCBB08]();
}

uint64_t sub_23EC2E0B4()
{
  return MEMORY[0x24BDCBB28]();
}

uint64_t sub_23EC2E0C0()
{
  return MEMORY[0x24BDCBB68]();
}

uint64_t sub_23EC2E0CC()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_23EC2E0D8()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_23EC2E0E4()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_23EC2E0F0()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_23EC2E0FC()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_23EC2E108()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_23EC2E114()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_23EC2E120()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_23EC2E12C()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t sub_23EC2E138()
{
  return MEMORY[0x24BDCBD18]();
}

uint64_t sub_23EC2E144()
{
  return MEMORY[0x24BDCBD38]();
}

uint64_t sub_23EC2E150()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_23EC2E15C()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_23EC2E168()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t sub_23EC2E174()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_23EC2E180()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_23EC2E18C()
{
  return MEMORY[0x24BDCC240]();
}

uint64_t sub_23EC2E198()
{
  return MEMORY[0x24BDCC248]();
}

uint64_t sub_23EC2E1A4()
{
  return MEMORY[0x24BDCC250]();
}

uint64_t sub_23EC2E1B0()
{
  return MEMORY[0x24BDCC258]();
}

uint64_t sub_23EC2E1BC()
{
  return MEMORY[0x24BDCD2A0]();
}

uint64_t sub_23EC2E1C8()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_23EC2E1D4()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23EC2E1E0()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_23EC2E1EC()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_23EC2E1F8()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_23EC2E204()
{
  return MEMORY[0x24BDCD9D0]();
}

uint64_t sub_23EC2E210()
{
  return MEMORY[0x24BDCD9E8]();
}

uint64_t sub_23EC2E21C()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_23EC2E228()
{
  return MEMORY[0x24BDCDA18]();
}

uint64_t sub_23EC2E234()
{
  return MEMORY[0x24BDCDA48]();
}

uint64_t sub_23EC2E240()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_23EC2E24C()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_23EC2E258()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t sub_23EC2E264()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23EC2E270()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_23EC2E27C()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_23EC2E288()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t sub_23EC2E294()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_23EC2E2A0()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_23EC2E2AC()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_23EC2E2B8()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_23EC2E2C4()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_23EC2E2D0()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_23EC2E2DC()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_23EC2E2E8()
{
  return MEMORY[0x24BDCE2F0]();
}

uint64_t sub_23EC2E2F4()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_23EC2E300()
{
  return MEMORY[0x24BDCE350]();
}

uint64_t sub_23EC2E30C()
{
  return MEMORY[0x24BDCE378]();
}

uint64_t sub_23EC2E318()
{
  return MEMORY[0x24BDCE3A0]();
}

uint64_t sub_23EC2E324()
{
  return MEMORY[0x24BDCE3B8]();
}

uint64_t sub_23EC2E330()
{
  return MEMORY[0x24BDCE3E8]();
}

uint64_t sub_23EC2E33C()
{
  return MEMORY[0x24BDCE448]();
}

uint64_t sub_23EC2E348()
{
  return MEMORY[0x24BDCE468]();
}

uint64_t sub_23EC2E354()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_23EC2E360()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t sub_23EC2E36C()
{
  return MEMORY[0x24BDCE610]();
}

uint64_t sub_23EC2E378()
{
  return MEMORY[0x24BDCE778]();
}

uint64_t sub_23EC2E384()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_23EC2E390()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_23EC2E39C()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_23EC2E3A8()
{
  return MEMORY[0x24BDCE898]();
}

uint64_t sub_23EC2E3B4()
{
  return MEMORY[0x24BDCE8A8]();
}

uint64_t sub_23EC2E3C0()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_23EC2E3CC()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23EC2E3D8()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_23EC2E3E4()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23EC2E3F0()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23EC2E3FC()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t sub_23EC2E408()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_23EC2E414()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23EC2E420()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_23EC2E42C()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_23EC2E438()
{
  return MEMORY[0x24BDCEFC8]();
}

uint64_t sub_23EC2E444()
{
  return MEMORY[0x24BDCF0C0]();
}

uint64_t sub_23EC2E450()
{
  return MEMORY[0x24BDCF180]();
}

uint64_t sub_23EC2E45C()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t sub_23EC2E468()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_23EC2E474()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23EC2E480()
{
  return MEMORY[0x24BDCF4C8]();
}

uint64_t sub_23EC2E48C()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_23EC2E498()
{
  return MEMORY[0x24BDCF560]();
}

uint64_t sub_23EC2E4A4()
{
  return MEMORY[0x24BDCF5A0]();
}

uint64_t sub_23EC2E4B0()
{
  return MEMORY[0x24BDCF5B8]();
}

uint64_t sub_23EC2E4BC()
{
  return MEMORY[0x24BDCF5D8]();
}

uint64_t sub_23EC2E4C8()
{
  return MEMORY[0x24BDCF610]();
}

uint64_t sub_23EC2E4D4()
{
  return MEMORY[0x24BE17908]();
}

uint64_t sub_23EC2E4E0()
{
  return MEMORY[0x24BE17910]();
}

uint64_t sub_23EC2E4EC()
{
  return MEMORY[0x24BE17930]();
}

uint64_t sub_23EC2E4F8()
{
  return MEMORY[0x24BDBD738]();
}

uint64_t sub_23EC2E504()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t sub_23EC2E510()
{
  return MEMORY[0x24BEE7408]();
}

uint64_t sub_23EC2E51C()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t sub_23EC2E528()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t sub_23EC2E534()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t sub_23EC2E540()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t sub_23EC2E54C()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t sub_23EC2E558()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t sub_23EC2E564()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t sub_23EC2E570()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t sub_23EC2E57C()
{
  return MEMORY[0x24BE5C068]();
}

uint64_t sub_23EC2E588()
{
  return MEMORY[0x24BE5C078]();
}

uint64_t sub_23EC2E594()
{
  return MEMORY[0x24BE5C0A0]();
}

uint64_t sub_23EC2E5A0()
{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t sub_23EC2E5AC()
{
  return MEMORY[0x24BE5C0D8]();
}

uint64_t sub_23EC2E5B8()
{
  return MEMORY[0x24BE5C120]();
}

uint64_t sub_23EC2E5C4()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t sub_23EC2E5D0()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t sub_23EC2E5DC()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t sub_23EC2E5E8()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t sub_23EC2E5F4()
{
  return MEMORY[0x24BE5C1F0]();
}

uint64_t sub_23EC2E600()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t sub_23EC2E60C()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t sub_23EC2E618()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t sub_23EC2E624()
{
  return MEMORY[0x24BE5C2B0]();
}

uint64_t sub_23EC2E630()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t sub_23EC2E63C()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t sub_23EC2E648()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t sub_23EC2E654()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t sub_23EC2E660()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t sub_23EC2E66C()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23EC2E678()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23EC2E684()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23EC2E690()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23EC2E69C()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23EC2E6A8()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_23EC2E6B4()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_23EC2E6C0()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_23EC2E6CC()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t sub_23EC2E6D8()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t sub_23EC2E6E4()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t sub_23EC2E6F0()
{
  return MEMORY[0x24BDC66E0]();
}

uint64_t sub_23EC2E6FC()
{
  return MEMORY[0x24BDC6AC0]();
}

uint64_t sub_23EC2E708()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_23EC2E714()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_23EC2E720()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_23EC2E72C()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_23EC2E738()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23EC2E744()
{
  return MEMORY[0x24BEE06E0]();
}

uint64_t sub_23EC2E750()
{
  return MEMORY[0x24BEE75B8]();
}

uint64_t sub_23EC2E75C()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23EC2E768()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23EC2E774()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23EC2E780()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23EC2E78C()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_23EC2E798()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_23EC2E7A4()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_23EC2E7B0()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_23EC2E7BC()
{
  return MEMORY[0x24BDCFAE8]();
}

uint64_t sub_23EC2E7C8()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_23EC2E7D4()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_23EC2E7E0()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_23EC2E7EC()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_23EC2E7F8()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_23EC2E804()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23EC2E810()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_23EC2E81C()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_23EC2E828()
{
  return MEMORY[0x24BEE0BB8]();
}

uint64_t sub_23EC2E834()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23EC2E840()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_23EC2E84C()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_23EC2E858()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23EC2E864()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_23EC2E870()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_23EC2E87C()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_23EC2E888()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_23EC2E894()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_23EC2E8A0()
{
  return MEMORY[0x24BEE0CE8]();
}

uint64_t sub_23EC2E8AC()
{
  return MEMORY[0x24BEE0D58]();
}

uint64_t sub_23EC2E8B8()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_23EC2E8C4()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_23EC2E8D0()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23EC2E8DC()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_23EC2E8E8()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23EC2E8F4()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_23EC2E900()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23EC2E90C()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_23EC2E918()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_23EC2E924()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_23EC2E930()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_23EC2E93C()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_23EC2E948()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23EC2E954()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_23EC2E960()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23EC2E96C()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_23EC2E978()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23EC2E984()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_23EC2E990()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_23EC2E99C()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_23EC2E9A8()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_23EC2E9B4()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_23EC2E9C0()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23EC2E9CC()
{
  return MEMORY[0x24BDCFED8]();
}

uint64_t sub_23EC2E9D8()
{
  return MEMORY[0x24BDCFF28]();
}

uint64_t sub_23EC2E9E4()
{
  return MEMORY[0x24BE17948]();
}

uint64_t sub_23EC2E9F0()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_23EC2E9FC()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_23EC2EA08()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23EC2EA14()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23EC2EA20()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_23EC2EA2C()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_23EC2EA38()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_23EC2EA44()
{
  return MEMORY[0x24BE17950]();
}

uint64_t sub_23EC2EA50()
{
  return MEMORY[0x24BDBD898]();
}

uint64_t sub_23EC2EA5C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23EC2EA68()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23EC2EA74()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23EC2EA80()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_23EC2EA8C()
{
  return MEMORY[0x24BDD04F8]();
}

uint64_t sub_23EC2EA98()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_23EC2EAA4()
{
  return MEMORY[0x24BDD0570]();
}

uint64_t sub_23EC2EAB0()
{
  return MEMORY[0x24BDD0580]();
}

uint64_t sub_23EC2EABC()
{
  return MEMORY[0x24BDD0610]();
}

uint64_t sub_23EC2EAC8()
{
  return MEMORY[0x24BDD0630]();
}

uint64_t sub_23EC2EAD4()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_23EC2EAE0()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_23EC2EAEC()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23EC2EAF8()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_23EC2EB04()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_23EC2EB10()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23EC2EB1C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23EC2EB28()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23EC2EB34()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23EC2EB40()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_23EC2EB4C()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23EC2EB58()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23EC2EB64()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23EC2EB70()
{
  return MEMORY[0x24BEE26F0]();
}

uint64_t sub_23EC2EB7C()
{
  return MEMORY[0x24BEE26F8]();
}

uint64_t sub_23EC2EB88()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_23EC2EB94()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23EC2EBA0()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23EC2EBAC()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_23EC2EBB8()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_23EC2EBC4()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_23EC2EBD0()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_23EC2EBDC()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_23EC2EBE8()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23EC2EBF4()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23EC2EC00()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23EC2EC0C()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23EC2EC18()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23EC2EC24()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23EC2EC30()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23EC2EC3C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23EC2EC48()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23EC2EC54()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_23EC2EC60()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_23EC2EC6C()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_23EC2EC78()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23EC2EC84()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23EC2EC90()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23EC2EC9C()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_23EC2ECA8()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23EC2ECB4()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_23EC2ECC0()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_23EC2ECCC()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_23EC2ECD8()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23EC2ECE4()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23EC2ECF0()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23EC2ECFC()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_23EC2ED08()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23EC2ED14()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23EC2ED20()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23EC2ED2C()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_23EC2ED38()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23EC2ED44()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t sub_23EC2ED50()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_23EC2ED5C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23EC2ED68()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23EC2ED74()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_23EC2ED80()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23EC2ED8C()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23EC2ED98()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23EC2EDA4()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23EC2EDB0()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23EC2EDBC()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23EC2EDC8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23EC2EDD4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23EC2EDE0()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23EC2EDEC()
{
  return MEMORY[0x24BEE49E8]();
}

uint64_t sub_23EC2EDF8()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23EC2EE04()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23EC2EE10()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x24BDBC150](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC160](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x24BDBC198](key, value, applicationID);
}

uint64_t DeviceIdentityIsSupported()
{
  return MEMORY[0x24BE2C370]();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return MEMORY[0x24BE2C378]();
}

uint64_t DeviceIdentityUCRTAttestationSupported()
{
  return MEMORY[0x24BE2C380]();
}

MKMapPoint MKMapPointForCoordinate(CLLocationCoordinate2D coordinate)
{
  double v1;
  double v2;
  MKMapPoint result;

  MEMORY[0x24BDDAF98]((__n128)coordinate, *(__n128 *)&coordinate.longitude);
  result.y = v2;
  result.x = v1;
  return result;
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x24BDE8850](certificate);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8B38](key, algorithm, dataToSign, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x24BEE4B48]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x24BDAF4D8]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

