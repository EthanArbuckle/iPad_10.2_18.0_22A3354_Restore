uint64_t sub_21C3E1EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_21C458C78();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_21C458CC0();
  sub_21C3E3604(v4, qword_254078EC8);
  sub_21C3E2BA0(v4, (uint64_t)qword_254078EC8);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCEF70], v0);
  sub_21C458C84();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

unint64_t sub_21C3E1FC4()
{
  unint64_t result;

  result = qword_254078EA0;
  if (!qword_254078EA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254078EA0);
  }
  return result;
}

unint64_t sub_21C3E2000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254078E78;
  if (!qword_254078E78)
  {
    v1 = sub_21C458D38();
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&qword_254078E78);
  }
  return result;
}

BOOL Collection.isNotEmpty.getter()
{
  return (sub_21C459194() & 1) == 0;
}

uint64_t sub_21C3E2064(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C((uint64_t *)&unk_254078EA8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3E21CC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void OSAllocatedUnfairLock.valueWithLock.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  v5 = a1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a1 + 16);
  v6 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(_QWORD *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v5, a2);
  os_unfair_lock_unlock(v6);
}

uint64_t JSONDecoder.decode<A>(_:withJSONObject:options:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v12;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)objc_opt_self();
  sub_21C3E359C(a2, a2[3]);
  v13[0] = 0;
  v6 = objc_msgSend(v5, sel_dataWithJSONObject_options_error_, sub_21C4594E8(), a3, v13);
  swift_unknownObjectRelease();
  v7 = v13[0];
  if (v6)
  {
    v8 = sub_21C458C0C();
    v10 = v9;

    sub_21C4589E4();
    return sub_21C3E38B0(v8, v10);
  }
  else
  {
    v12 = v7;
    sub_21C458B7C();

    return swift_willThrow();
  }
}

uint64_t static Capabilities.isInternalBuild.getter()
{
  if (qword_254078E68 != -1)
    swift_once();
  swift_beginAccess();
  return byte_254078E60;
}

uint64_t static Notificationable.Name.getter()
{
  uint64_t v0;

  swift_getMetatypeMetadata();
  sub_21C458E94();
  v0 = sub_21C458E40();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t UserDefault.init(_:defaults:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  v8 = (char *)a6 + *(int *)(type metadata accessor for UserDefault(0, a5, a3, a4) + 32);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v8, a4, a5);
}

uint64_t sub_21C3E2520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x22077C15C](a1, v6, a5);
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t static OS_dispatch_queue.dispatchAsyncOnMainIfNeeded(block:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];

  v4 = sub_21C458D38();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21C458D50();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
    return a1();
  sub_21C3E1FC4();
  v13 = (void *)sub_21C459230();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  aBlock[4] = sub_21C3E3660;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21C3E379C;
  aBlock[3] = &unk_24E040D08;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_21C458D44();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_21C3E2000();
  sub_21C3E344C(&qword_254078E80);
  sub_21C3E36CC();
  sub_21C4592E4();
  MEMORY[0x22077B8C8](0, v11, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_21C3E2754(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_21C3E2774()
{
  unint64_t result;

  result = qword_254078E70;
  if (!qword_254078E70)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksFeatureFlag, &type metadata for BooksFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_254078E70);
  }
  return result;
}

uint64_t sub_21C3E27B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = sub_21C458CB4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E344C(&qword_254078EC0);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDCF220], v2);
  sub_21C458CA8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v8 = sub_21C458C60();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v7, v8);
  __break(1u);
  return result;
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  void (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if ((Collection.validate(index:)() & 1) != 0)
  {
    v2 = (void (*)(uint64_t *, _QWORD))sub_21C4591F4();
    v4 = v3;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, AssociatedTypeWitness);
    v2(&v9, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    v8 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t Collection.validate(index:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v6 - v2;
  sub_21C459188();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_21C458FC0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t static Calendar.gregorian.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_254078EE8 != -1)
    swift_once();
  v2 = sub_21C458CC0();
  v3 = sub_21C3E2BA0(v2, (uint64_t)qword_254078EC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21C3E2BA0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = sub_21C459278();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - v12;
  if (swift_dynamicCastMetatype())
  {
    v14 = *(void **)(v2 + 16);
    v15 = (void *)sub_21C458E40();
    v16 = objc_msgSend(v14, sel_objectForKey_, v15);

    if (v16)
    {
      sub_21C4592CC();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v27, 0, sizeof(v27));
    }
    sub_21C41F3FC((uint64_t)v27, (uint64_t)&v28);
    if (*((_QWORD *)&v29 + 1))
    {
      sub_21C433738();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v20 = v26;
        v21 = objc_msgSend(v26, sel_BOOLValue);

        LOBYTE(v28) = v21;
        return swift_dynamicCast();
      }
    }
    else
    {
      sub_21C3FF670((uint64_t)&v28, &qword_254078EB8);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v2 + *(int *)(a1 + 32), v9);
  }
  else
  {
    v25 = a2;
    v17 = *(void **)(v2 + 16);
    v18 = (void *)sub_21C458E40();
    v19 = objc_msgSend(v17, sel_objectForKey_, v18);

    if (v19)
    {
      sub_21C4592CC();
      swift_unknownObjectRelease();
      sub_21C3E8498(v27, &v28);
    }
    else
    {
      v28 = 0u;
      v29 = 0u;
    }
    sub_21C3E344C(&qword_254078EB8);
    v23 = swift_dynamicCast();
    v24 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v13, v23 ^ 1u, 1, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v9) == 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(v25, &v8[*(int *)(a1 + 32)], v9);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v13, v9);
    }
  }
}

uint64_t sub_21C3E2EB4(uint64_t a1, uint64_t a2)
{
  id *v4;

  swift_bridgeObjectRelease();
  v4 = (id *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8);

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_21C3E2F08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = *v6;
  *v5 = *v6;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_bridgeObjectRetain();
  v14 = v7;
  v13(v11, v12, v8);
  return a1;
}

uint64_t ReflectedStringConvertible.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12[4];

  v3 = sub_21C4595F0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = a1;
  v7 = sub_21C3E30F8(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v7, v1, a1);
  sub_21C4595CC();
  sub_21C4595D8();
  v12[0] = sub_21C45962C();
  v12[1] = v8;
  sub_21C458F00();
  sub_21C4595E4();
  v9 = sub_21C419610();
  swift_release();
  v11 = v9;
  sub_21C3E344C(&qword_25527A748);
  sub_21C3E3134();
  sub_21C458DF8();
  swift_bridgeObjectRelease();
  sub_21C458F00();
  swift_bridgeObjectRelease();
  sub_21C458F00();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12[0];
}

uint64_t *sub_21C3E30F8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_21C3E3134()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527A750;
  if (!qword_25527A750)
  {
    v1 = sub_21C3E35C0(&qword_25527A748);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_25527A750);
  }
  return result;
}

_QWORD *sub_21C3E3180(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21C3E344C(&qword_25527A3B8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_21C3E32D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C3E3290(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527AE60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C3E32D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

Swift::String __swiftcall String.append(pathComponent:)(Swift::String pathComponent)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String result;

  v1 = (void *)sub_21C458E40();
  v2 = (void *)sub_21C458E40();
  v3 = objc_msgSend(v1, sel_stringByAppendingPathComponent_, v2);

  v4 = sub_21C458E64();
  v6 = v5;

  v7 = v4;
  v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t sub_21C3E344C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22077C1C8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksFeatureFlag()
{
  return &type metadata for BooksFeatureFlag;
}

uint64_t sub_21C3E349C()
{
  unsigned __int8 *v0;

  return sub_21C40F7C8(*v0);
}

const char *sub_21C3E34A4()
{
  return "Books";
}

_BYTE *initializeBufferWithCopyOfBuffer for MClientIdentifier(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BooksFeatureFlag(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t Date.nextDay(calendar:)@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3E27B8(a1);
}

uint64_t sub_21C3E355C()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *sub_21C3E3564(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_21C3E356C()
{
  return swift_release();
}

uint64_t sub_21C3E3574()
{
  return swift_release();
}

uint64_t sub_21C3E357C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_21C3E358C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

_QWORD *sub_21C3E359C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_21C3E35C0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22077C1D4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t *sub_21C3E3604(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_21C3E3644(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21C3E2064(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21C3E3660()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_21C3E3680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254078E98;
  if (!qword_254078E98)
  {
    v1 = sub_21C3E35C0(&qword_254078E90);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_254078E98);
  }
  return result;
}

unint64_t sub_21C3E36CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254078E88;
  if (!qword_254078E88)
  {
    v1 = sub_21C3E35C0(&qword_254078E80);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_254078E88);
  }
  return result;
}

uint64_t static String.random(length:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_21C3E8CEC(0, result, 0xD00000000000003ELL, 0x800000021C45F510);
    sub_21C3E344C(&qword_254078E90);
    sub_21C3E3680();
    return sub_21C458F6C();
  }
  return result;
}

uint64_t sub_21C3E379C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_21C3E37C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v5 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v6 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  v7 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, a3);
  os_unfair_lock_unlock(v6);
}

uint64_t OSAllocatedUnfairLock.valueWithLock.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21C3E37C8(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t sub_21C3E388C()
{
  uint64_t result;

  result = os_variant_has_internal_content();
  byte_254078E60 = result;
  return result;
}

uint64_t sub_21C3E38B0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

id sub_21C3E38F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  objc_class *v5;
  id v6;
  id v7;
  void *v8;

  v5 = (objc_class *)MEMORY[0x24BDBCF50];
  v6 = a4;
  v7 = a3;
  v8 = (void *)objc_msgSend([v5 alloc], "_initWithSuiteName:container:", v7, v6);

  return v8;
}

void type metadata accessor for __BFMResourceType(uint64_t a1)
{
  sub_21C3E84D0(a1, &qword_25527A020);
}

uint64_t initializeBufferWithCopyOfBuffer for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

void destroy for MCatalogServiceConfig(uint64_t a1)
{

}

uint64_t assignWithCopy for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

__n128 initializeWithTake for MCatalogServiceConfig(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for MCatalogServiceConfig(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogServiceConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogServiceConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestHandler()
{
  return &type metadata for MCatalogRequestHandler;
}

__n128 sub_21C3E3AE0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_21C3E3AF4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_21C3E3B14(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
  sub_21C3E84D0(a1, &qword_25527A028);
}

uint64_t sub_21C3E3B54(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21C3E3B8C + 4 * byte_21C45A120[a1]))(0xD000000000000028, 0x800000021C45F4E0);
}

uint64_t sub_21C3E3B8C(uint64_t a1)
{
  return a1 + 12;
}

BOOL sub_21C3E3BC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t _s14BookFoundation11ContentKindO9hashValueSivg_0()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t sub_21C3E3C1C()
{
  return sub_21C4595A8();
}

uint64_t sub_21C3E3C44()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t sub_21C3E3C94()
{
  unsigned __int8 *v0;

  return sub_21C3E3B54(*v0);
}

uint64_t sub_21C3E3C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a4;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  *(_BYTE *)(v7 + 104) = *(_BYTE *)v6;
  v8 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v7 + 64) = a6;
  *(_QWORD *)(v7 + 72) = v8;
  return swift_task_switch();
}

uint64_t sub_21C3E3CC8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 16) = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
  *(_QWORD *)(v0 + 80) = v2;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = sub_21C3E3D88;
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_OWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 144) = &unk_25527A040;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 128) = v5;
  *(_QWORD *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 112) = v6;
  *(_QWORD *)(v3 + 104) = v7;
  *(_BYTE *)(v3 + 320) = *(_BYTE *)(v0 + 16);
  *(_QWORD *)(v3 + 160) = v4;
  *(_QWORD *)(v3 + 168) = v8;
  return swift_task_switch();
}

uint64_t sub_21C3E3D88(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 96) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();

  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_21C3E3E10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C3E3E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v2;
  *(_BYTE *)(v1 + 72) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v1 + 96) = v5;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 104) = v7;
  *v7 = v1;
  v7[1] = sub_21C3E3EC0;
  return MCatalogRequest.fetch()();
}

uint64_t sub_21C3E3EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_21C3E3F34()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(v1, sel_responseDataItems);

  if (v2)
  {
    sub_21C3E344C(&qword_25527A088);
    v3 = sub_21C45902C();

  }
  else
  {
    v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_21C3E3FB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C3E3FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 152) = a7;
  *(_QWORD *)(v9 + 160) = a8;
  *(_QWORD *)(v9 + 136) = a5;
  *(_QWORD *)(v9 + 144) = a6;
  *(_QWORD *)(v9 + 120) = a3;
  *(_QWORD *)(v9 + 128) = a4;
  *(_QWORD *)(v9 + 104) = a1;
  *(_QWORD *)(v9 + 112) = a2;
  *(_BYTE *)(v9 + 320) = *(_BYTE *)v8;
  *(_QWORD *)(v9 + 168) = *(_QWORD *)(v8 + 8);
  return swift_task_switch();
}

uint64_t sub_21C3E3FF4()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[5];
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51[8];
  void *v52;

  v1 = *(_BYTE *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(void **)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = sub_21C3E4694(*(_QWORD *)(v0 + 104));
  LOBYTE(v47[0]) = v1;
  swift_bridgeObjectRetain();
  v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21C435680(v6, v5, v4, v2, 0, 0, v7, (char *)v47, (uint64_t)&v36);
  v8 = *(void **)(v0 + 168);
  v9 = *(_BYTE *)(v0 + 320);
  v10 = *(int **)(v0 + 144);
  v12 = v36;
  v11 = v37;
  *(_QWORD *)(v0 + 176) = v36;
  *(_QWORD *)(v0 + 184) = v11;
  v13 = v38;
  v14 = v39;
  *(_QWORD *)(v0 + 192) = v38;
  *(_QWORD *)(v0 + 200) = v14;
  v15 = v40;
  v16 = v41;
  v17 = v42;
  v18 = v43;
  *(_QWORD *)(v0 + 208) = v40;
  *(_QWORD *)(v0 + 216) = v18;
  v47[0] = v12;
  v47[1] = v11;
  v47[2] = v13;
  v47[3] = v14;
  v47[4] = v15;
  v48 = v16;
  v49 = v17;
  v50 = v18;
  v51[0] = v9;
  v52 = v8;
  v19 = (void *)objc_opt_self();
  v20 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v15;
  swift_bridgeObjectRetain();
  MCatalogRequest.init(with:config:bag:)((uint64_t)v47, v51, objc_msgSend(v19, sel_defaultBag));
  v22 = v36;
  v23 = v37;
  *(_QWORD *)(v0 + 224) = v36;
  *(_QWORD *)(v0 + 232) = v23;
  v24 = v38;
  v25 = v39;
  *(_QWORD *)(v0 + 240) = v38;
  *(_QWORD *)(v0 + 248) = v25;
  v26 = v40;
  v27 = v41;
  *(_QWORD *)(v0 + 256) = v40;
  *(_QWORD *)(v0 + 264) = v27;
  v28 = v42;
  v29 = v43;
  v30 = v44;
  v31 = v45;
  *(_QWORD *)(v0 + 272) = v42;
  *(_QWORD *)(v0 + 280) = v31;
  v32 = v46;
  *(_QWORD *)(v0 + 288) = v46;
  *(_QWORD *)(v0 + 16) = v22;
  *(_QWORD *)(v0 + 24) = v23;
  *(_QWORD *)(v0 + 32) = v24;
  *(_QWORD *)(v0 + 40) = v25;
  *(_QWORD *)(v0 + 48) = v26;
  *(_QWORD *)(v0 + 56) = v27;
  *(_QWORD *)(v0 + 64) = v28;
  *(_BYTE *)(v0 + 72) = v29;
  *(_QWORD *)(v0 + 80) = v30;
  *(_QWORD *)(v0 + 88) = v31;
  *(_QWORD *)(v0 + 96) = v32;
  v35 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
  v33 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v33;
  *v33 = v0;
  v33[1] = sub_21C3E420C;
  return v35(v0 + 16);
}

uint64_t sub_21C3E420C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C3E4278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BYTE *v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 304);
  if (v1)
  {
    v2 = sub_21C458D5C();
    v27 = v2;
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      v4 = 0;
      do
      {
        v6 = *(_QWORD *)(v0 + 160);
        v5 = *(void **)(v0 + 168);
        v7 = *(_QWORD *)(v1 + 8 * v4++ + 32);
        v8 = *(unsigned __int8 *)(v0 + 320);
        v28 = v7;
        swift_bridgeObjectRetain();
        sub_21C3E48C4(&v28, v8, v5, (uint64_t)&v27, v6);
        swift_bridgeObjectRelease();
      }
      while (v3 != v4);
      v25 = *(void **)(v0 + 288);
      v10 = *(void **)(v0 + 224);
      v9 = *(void **)(v0 + 232);
      v11 = *(void **)(v0 + 208);
      v22 = *(void **)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v27;
    }
    else
    {
      v12 = v2;
      v26 = *(void **)(v0 + 288);
      v18 = *(void **)(v0 + 224);
      v17 = *(void **)(v0 + 232);
      v19 = *(void **)(v0 + 208);
      v24 = *(void **)(v0 + 272);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }
  else
  {
    v13 = *(void **)(v0 + 232);
    v14 = *(void **)(v0 + 224);
    v23 = *(void **)(v0 + 208);
    v21 = *(void **)(v0 + 288);
    v20 = *(void **)(v0 + 272);
    sub_21C3E5024();
    swift_allocError();
    *v15 = 1;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_21C3E45B0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  v6 = *(void **)(v0 + 288);
  v1 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 232);
  v3 = *(void **)(v0 + 208);
  v5 = *(void **)(v0 + 272);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C3E4694(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;

  v1 = sub_21C3E4D18(a1);
  v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  v30 = (_QWORD *)MEMORY[0x24BEE4B00];
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (unsigned __int8 *)(v1 + 48);
    while (1)
    {
      v6 = *((_QWORD *)v4 - 2);
      v7 = *((_QWORD *)v4 - 1);
      v8 = *v4;
      v9 = sub_21C45189C(*v4);
      v11 = v2[2];
      v12 = (v10 & 1) == 0;
      v13 = v11 + v12;
      if (__OFADD__(v11, v12))
        break;
      v14 = v9;
      v15 = v10;
      v16 = v2[3];
      swift_bridgeObjectRetain();
      if (v16 < v13)
      {
        sub_21C3E5564(v13, 1);
        v2 = v30;
        v17 = sub_21C45189C(v8);
        if ((v15 & 1) != (v18 & 1))
          goto LABEL_19;
        v14 = v17;
      }
      if ((v15 & 1) != 0)
      {
        v19 = v2[7];
        v20 = *(_QWORD **)(v19 + 8 * v14);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v19 + 8 * v14) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v20 = sub_21C3FCF54(0, v20[2] + 1, 1, v20);
          *(_QWORD *)(v19 + 8 * v14) = v20;
        }
        v23 = v20[2];
        v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          v20 = sub_21C3FCF54((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
          *(_QWORD *)(v19 + 8 * v14) = v20;
        }
        v20[2] = v23 + 1;
        v5 = &v20[3 * v23];
        v5[4] = v6;
        v5[5] = v7;
        *((_BYTE *)v5 + 48) = v8;
      }
      else
      {
        sub_21C3E344C(&qword_25527A060);
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 16) = xmmword_21C45A5D0;
        *(_QWORD *)(v24 + 32) = v6;
        *(_QWORD *)(v24 + 40) = v7;
        *(_BYTE *)(v24 + 48) = v8;
        v2[(v14 >> 6) + 8] |= 1 << v14;
        *(_BYTE *)(v2[6] + v14) = v8;
        *(_QWORD *)(v2[7] + 8 * v14) = v24;
        v25 = v2[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_18;
        v2[2] = v27;
      }
      v4 += 24;
      if (!--v3)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    sub_21C3E344C(&qword_25527A068);
    result = sub_21C459554();
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    v28 = sub_21C3E6DA4((uint64_t)v2);
    swift_release();
    return v28;
  }
  return result;
}

void sub_21C3E48C4(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t *);
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  void *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  char *v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  __int128 v50;

  v44 = a3;
  v43 = a2;
  v8 = sub_21C459278();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v42 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v41 - v13;
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v45 = 1701869940;
  v46 = 0xE400000000000000;
  sub_21C459314();
  if (*(_QWORD *)(v18 + 16) && (v19 = sub_21C4519C4((uint64_t)&v47), (v20 & 1) != 0))
  {
    sub_21C3E5528(*(_QWORD *)(v18 + 56) + 32 * v19, (uint64_t)&v49);
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  sub_21C3E54B4((uint64_t)&v47);
  if (*((_QWORD *)&v50 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v41[1] = a4;
      static MResourceType.classType(for:)(v45, v46);
      v22 = v21;
      swift_bridgeObjectRelease();
      if (v22)
      {
        LOBYTE(v47) = v43;
        v48 = v44;
        v23 = *(uint64_t (**)(uint64_t, uint64_t *))(v22 + 128);
        v24 = v44;
        v25 = swift_bridgeObjectRetain();
        v26 = v23(v25, &v47);
        if (v26)
        {
          v27 = (void *)v26;
          v28 = *(void **)(v26 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
          v44 = *(id *)(v26 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
          v47 = v26;
          type metadata accessor for MResource();
          swift_bridgeObjectRetain();
          v29 = v27;
          v30 = swift_dynamicCast();
          v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
          if ((v30 & 1) != 0)
          {
            v31(v14, 0, 1, a5);
            (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, a5);
            v32 = v42;
            (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v42, v17, a5);
            v31(v32, 0, 1, a5);
            v47 = (uint64_t)v44;
            v48 = v28;
            sub_21C458DA4();
            sub_21C458DC8();

            (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
          }
          else
          {
            v31(v14, 1, 1, a5);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
            if (qword_255279EF8 != -1)
              swift_once();
            v33 = sub_21C458D20();
            sub_21C3E2BA0(v33, (uint64_t)qword_25527A290);
            v34 = sub_21C458D08();
            v35 = sub_21C45920C();
            if (os_log_type_enabled(v34, v35))
            {
              v36 = v29;
              v37 = (uint8_t *)swift_slowAlloc();
              v38 = swift_slowAlloc();
              v47 = v38;
              *(_DWORD *)v37 = 136315138;
              swift_getMetatypeMetadata();
              v39 = sub_21C45962C();
              *(_QWORD *)&v49 = sub_21C409744(v39, v40, &v47);
              sub_21C459290();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_21C3E0000, v34, v35, "Failed to cast dataItem response to expected Resource type of: %s", v37, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x22077C294](v38, -1, -1);
              MEMORY[0x22077C294](v37, -1, -1);

            }
            else
            {

            }
          }
        }
      }
    }
  }
  else
  {
    sub_21C3E54E8((uint64_t)&v49);
  }
}

uint64_t sub_21C3E4D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v8 | (v6 << 6); ; i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + i);
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_21C3FCF54(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v18 = v7[2];
    v17 = v7[3];
    if (v18 >= v17 >> 1)
    {
      result = (uint64_t)sub_21C3FCF54((_QWORD *)(v17 > 1), v18 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v18 + 1;
    v19 = &v7[3 * v18];
    v19[4] = v15;
    v19[5] = v14;
    *((_BYTE *)v19 + 48) = v16;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v21)
      goto LABEL_27;
    v11 = *(_QWORD *)(v20 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v21)
        goto LABEL_27;
      v11 = *(_QWORD *)(v20 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v21)
          goto LABEL_27;
        v11 = *(_QWORD *)(v20 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v21)
            goto LABEL_27;
          v11 = *(_QWORD *)(v20 + 8 * v6);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v4 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v21)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  v11 = *(_QWORD *)(v20 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v21)
      goto LABEL_27;
    v11 = *(_QWORD *)(v20 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_21C3E4F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;

  v13 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v13;
  *(_QWORD *)v13 = v7;
  *(_QWORD *)(v13 + 8) = sub_21C3E4FD0;
  *(_QWORD *)(v13 + 48) = a3;
  *(_QWORD *)(v13 + 56) = a4;
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = a2;
  *(_BYTE *)(v13 + 104) = *(_BYTE *)v6;
  v14 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v13 + 64) = a6;
  *(_QWORD *)(v13 + 72) = v14;
  return swift_task_switch();
}

uint64_t sub_21C3E4FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

unint64_t sub_21C3E5024()
{
  unint64_t result;

  result = qword_25527A050;
  if (!qword_25527A050)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45A58C, &type metadata for MCatalogRequestHandler.FetchError);
    atomic_store(result, (unint64_t *)&qword_25527A050);
  }
  return result;
}

uint64_t sub_21C3E5068(uint64_t a1, uint64_t a2)
{
  return sub_21C3E533C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_21C3E5080(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_21C458E4C();
  *a2 = 0;
  return result;
}

uint64_t sub_21C3E50F4(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_21C458E58();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_21C3E5170@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_21C458E64();
  v2 = sub_21C458E40();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_21C3E51B4()
{
  sub_21C3E871C(&qword_25527A158, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestRelationship, (uint64_t)&unk_21C45A3A4);
  sub_21C3E871C((unint64_t *)&unk_25527A160, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestRelationship, (uint64_t)&unk_21C45A344);
  return sub_21C45947C();
}

uint64_t sub_21C3E5238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21C458E40();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_21C3E527C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_21C458E64();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21C3E52A4()
{
  sub_21C3E871C(&qword_25527A148, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestView, (uint64_t)&unk_21C45A4FC);
  sub_21C3E871C(&qword_25527A150, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestView, (uint64_t)&unk_21C45A49C);
  return sub_21C45947C();
}

uint64_t sub_21C3E5330(uint64_t a1, uint64_t a2)
{
  return sub_21C3E533C(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_21C3E533C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_21C458E64();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21C3E5378()
{
  sub_21C458E64();
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C3E53B8()
{
  uint64_t v0;

  sub_21C458E64();
  sub_21C45959C();
  sub_21C458EC4();
  v0 = sub_21C4595C0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_21C3E542C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_21C458E64();
  v2 = v1;
  if (v0 == sub_21C458E64() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_21C3E54B4(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_21C3E54E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_254078EB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C3E5528(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_21C3E5564(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  _QWORD *v30;

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A070);
  result = sub_21C45944C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v29 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v8 << 6);
      }
      else
      {
        v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v16 >= v29)
          goto LABEL_35;
        v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          v8 = v16 + 1;
          if (v16 + 1 >= v29)
            goto LABEL_35;
          v17 = v30[v8];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_35:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_42;
              }
              v28 = 1 << *(_BYTE *)(v5 + 32);
              if (v28 >= 64)
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v28;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                v8 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_44;
                if (v8 >= v29)
                  goto LABEL_35;
                v17 = v30[v8];
                ++v18;
                if (v17)
                  goto LABEL_21;
              }
            }
            v8 = v18;
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v15);
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v15);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_21C45959C();
      sub_21C4595B4();
      if (v19 != 6)
        sub_21C4595A8();
      result = sub_21C4595C0();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v13) = v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v13) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_42:
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E5850(uint64_t a1, char a2)
{
  return sub_21C3E649C(a1, a2, &qword_25527A0D8);
}

uint64_t sub_21C3E585C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A0F8);
  v37 = a2;
  v6 = sub_21C45944C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E5B64(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v31[2];

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A0F0);
  result = sub_21C45944C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v30 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_34;
        v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_34;
          v18 = v30[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_41;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v30 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_43;
                if (v8 >= v12)
                  goto LABEL_34;
                v18 = v30[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
      v21 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
      if ((a2 & 1) != 0)
        sub_21C3E8498(v21, v31);
      else
        sub_21C3E5528((uint64_t)v21, (uint64_t)v31);
      sub_21C45959C();
      sub_21C4595A8();
      result = sub_21C4595C0();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v14) = v20;
      result = (uint64_t)sub_21C3E8498(v31, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E5E38(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A0E8);
  v36 = a2;
  v6 = sub_21C45944C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E614C(uint64_t a1, char a2)
{
  return sub_21C3E6AA0(a1, a2, &qword_25527A0E0);
}

uint64_t sub_21C3E6158(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A0A0);
  v37 = a2;
  v6 = sub_21C45944C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E6460(uint64_t a1, char a2)
{
  return sub_21C3E6AA0(a1, a2, &qword_25527A0D0);
}

uint64_t sub_21C3E646C(uint64_t a1, char a2)
{
  return sub_21C3E649C(a1, a2, &qword_25527A0C8);
}

uint64_t sub_21C3E6478(uint64_t a1, char a2)
{
  return sub_21C3E649C(a1, a2, &qword_25527A0C0);
}

uint64_t sub_21C3E6484(uint64_t a1, char a2)
{
  return sub_21C3E649C(a1, a2, &qword_25527A0B8);
}

uint64_t sub_21C3E6490(uint64_t a1, char a2)
{
  return sub_21C3E649C(a1, a2, &qword_25527A0A8);
}

uint64_t sub_21C3E649C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  sub_21C3E344C(a3);
  v39 = a2;
  v7 = sub_21C45944C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_21C3E67A4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_21C3E344C(&qword_25527A098);
  v36 = a2;
  v6 = sub_21C45944C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v2;
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v31 = *v30;
    v32 = v30[1];
    if ((v36 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v31;
    v19[1] = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_21C3E6A94(uint64_t a1, char a2)
{
  return sub_21C3E6AA0(a1, a2, &qword_25527A090);
}

uint64_t sub_21C3E6AA0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v4 = v3;
  v6 = *v3;
  sub_21C3E344C(a3);
  v38 = a2;
  v7 = sub_21C45944C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v6 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_21C45959C();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v23 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_21C3E6DA4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;

  sub_21C3E344C(&qword_25527A078);
  result = sub_21C459440();
  v3 = (_QWORD *)result;
  v4 = 0;
  v40 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v37 = v6;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v39 = result + 64;
  v11 = MEMORY[0x24BEE4AF8];
  v36 = (_QWORD *)result;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = *(_BYTE *)(*(_QWORD *)(v40 + 48) + i);
    v18 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * i);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v41 = *(_BYTE *)(*(_QWORD *)(v40 + 48) + i);
      v42 = v10;
      v43 = v4;
      v44 = v11;
      swift_bridgeObjectRetain();
      sub_21C3FD494(0, v19, 0);
      v20 = v44;
      v21 = (uint64_t *)(v18 + 40);
      do
      {
        v22 = *(v21 - 1);
        v23 = *v21;
        v44 = v20;
        v25 = *(_QWORD *)(v20 + 16);
        v24 = *(_QWORD *)(v20 + 24);
        v26 = v25 + 1;
        swift_bridgeObjectRetain();
        if (v25 >= v24 >> 1)
        {
          sub_21C3FD494(v24 > 1, v25 + 1, 1);
          v20 = v44;
        }
        v21 += 3;
        *(_QWORD *)(v20 + 16) = v26;
        v27 = v20 + 16 * v25;
        *(_QWORD *)(v27 + 32) = v22;
        *(_QWORD *)(v27 + 40) = v23;
        --v19;
      }
      while (v19);
      v45 = sub_21C459140();
      v3 = v36;
      v11 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      swift_bridgeObjectRetain();
      v26 = *(_QWORD *)(v11 + 16);
      v28 = sub_21C459140();
      v45 = v28;
      if (!v26)
      {
        v32 = v28;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      v41 = v17;
      v42 = v10;
      v43 = v4;
      v20 = v11;
    }
    v29 = (uint64_t *)(v20 + 40);
    do
    {
      v30 = *(v29 - 1);
      v31 = *v29;
      swift_bridgeObjectRetain();
      sub_21C3E7104(&v44, v30, v31);
      swift_bridgeObjectRelease();
      v29 += 2;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v32 = v45;
    v10 = v42;
    v4 = v43;
    v17 = v41;
LABEL_30:
    *(_QWORD *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_BYTE *)(v3[6] + i) = v17;
    *(_QWORD *)(v3[7] + 8 * i) = v32;
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v3[2] = v35;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_36;
    if (v14 >= v38)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v37 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v38)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v37 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v38)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v37 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v38)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v37 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v38)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v37 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21C3E7104(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_21C45959C();
  swift_bridgeObjectRetain();
  sub_21C458EC4();
  v8 = sub_21C4595C0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_21C4594F4() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_21C4594F4() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_21C3E7950(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_21C3E72B0(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_21C45959C();
  sub_21C4595A8();
  v6 = sub_21C4595C0();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_21C3E7AE8(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_21C3E73CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_21C3E344C(&qword_25527A080);
  v3 = sub_21C45932C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_21C45959C();
      sub_21C458EC4();
      result = sub_21C4595C0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21C3E76A8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_21C3E344C(&qword_25527A0B0);
  result = sub_21C45932C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      sub_21C45959C();
      sub_21C4595A8();
      result = sub_21C4595C0();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_21C3E7950(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_21C3E73CC();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_21C3E7C34();
      goto LABEL_22;
    }
    sub_21C3E7F74();
  }
  v11 = *v4;
  sub_21C45959C();
  sub_21C458EC4();
  result = sub_21C4595C0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_21C4594F4(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_21C459548();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_21C4594F4();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_21C3E7AE8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_21C3E76A8();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_21C3E7DE4();
      goto LABEL_14;
    }
    sub_21C3E8220();
  }
  v8 = *v3;
  sub_21C45959C();
  sub_21C4595A8();
  result = sub_21C4595C0();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      result = sub_21C459548();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_21C3E7C34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21C3E344C(&qword_25527A080);
  v2 = *v0;
  v3 = sub_21C459320();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_21C3E7DE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_21C3E344C(&qword_25527A0B0);
  v2 = *v0;
  v3 = sub_21C459320();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_21C3E7F74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_21C3E344C(&qword_25527A080);
  v3 = sub_21C45932C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_21C45959C();
    swift_bridgeObjectRetain();
    sub_21C458EC4();
    result = sub_21C4595C0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_21C3E8220()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  sub_21C3E344C(&qword_25527A0B0);
  result = sub_21C45932C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    sub_21C45959C();
    sub_21C4595A8();
    result = sub_21C4595C0();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

_OWORD *sub_21C3E8498(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for MCatalogRequestView(uint64_t a1)
{
  sub_21C3E84D0(a1, &qword_25527A100);
}

void type metadata accessor for MCatalogRequestRelationship(uint64_t a1)
{
  sub_21C3E84D0(a1, &qword_25527A108);
}

void sub_21C3E84D0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t getEnumTagSinglePayload for MCatalogRequestHandler.FetchError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogRequestHandler.FetchError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21C3E85F0 + 4 * byte_21C45A129[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21C3E8624 + 4 * byte_21C45A124[v4]))();
}

uint64_t sub_21C3E8624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3E862C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C3E8634);
  return result;
}

uint64_t sub_21C3E8640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C3E8648);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21C3E864C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3E8654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3E8660(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for MCatalogRequestHandler.FetchError()
{
  return &type metadata for MCatalogRequestHandler.FetchError;
}

unint64_t sub_21C3E8680()
{
  unint64_t result;

  result = qword_25527A110;
  if (!qword_25527A110)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45A2B4, &type metadata for MCatalogRequestHandler.FetchError);
    atomic_store(result, (unint64_t *)&qword_25527A110);
  }
  return result;
}

uint64_t sub_21C3E86C4()
{
  return sub_21C3E871C(&qword_25527A118, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestRelationship, (uint64_t)&unk_21C45A308);
}

uint64_t sub_21C3E86F0()
{
  return sub_21C3E871C(&qword_25527A120, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestRelationship, (uint64_t)&unk_21C45A2DC);
}

uint64_t sub_21C3E871C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22077C1E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21C3E875C()
{
  return sub_21C3E871C(&qword_25527A128, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestRelationship, (uint64_t)&unk_21C45A378);
}

uint64_t sub_21C3E8788()
{
  return sub_21C3E871C(&qword_25527A130, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestView, (uint64_t)&unk_21C45A460);
}

uint64_t sub_21C3E87B4()
{
  return sub_21C3E871C(&qword_25527A138, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestView, (uint64_t)&unk_21C45A434);
}

uint64_t sub_21C3E87E0()
{
  return sub_21C3E871C(&qword_25527A140, (uint64_t (*)(uint64_t))type metadata accessor for MCatalogRequestView, (uint64_t)&unk_21C45A4D0);
}

double sub_21C3E881C(double a1)
{
  return ceil(a1);
}

double sub_21C3E8828(double a1)
{
  return floor(a1);
}

double sub_21C3E8834(double a1)
{
  return round(a1);
}

double CGFloat.rounded(decimalPlaces:)(uint64_t a1, double a2)
{
  float v3;

  v3 = __exp10f((float)a1);
  return round(v3 * a2) / v3;
}

uint64_t Optional<A>.int32Value.getter(uint64_t result, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = 0;
    return v2 | ((unint64_t)(a2 & 1) << 32);
  }
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v2 = result;
    return v2 | ((unint64_t)(a2 & 1) << 32);
  }
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall String.urlQueryEscaped(excludingCharacters:)(Swift::String_optional excludingCharacters)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  _QWORD v16[2];

  v3 = v2;
  v4 = v1;
  object = excludingCharacters.value._object;
  v6 = sub_21C458A44();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C458A2C();
  if (object)
    sub_21C458A38();
  v16[0] = v4;
  v16[1] = v3;
  sub_21C3E8EB0();
  v10 = sub_21C4592A8();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v10;
  v14 = v12;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall String.urlFragmentRemoved()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;

  sub_21C3E8A70(35, 0xE100000000000000, v0, v1);
  swift_bridgeObjectRetain();
  v2 = sub_21C458F84();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x22077B52C](v2, v4, v6, v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

unint64_t sub_21C3E8A70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_21C458F60() != a1 || v9 != a2)
  {
    v10 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_21C458EDC();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

Swift::String __swiftcall String.leadingSlashesRemoved()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  Swift::String result;
  void *v11;

  swift_bridgeObjectRetain();
  v0 = sub_21C458F78();
  v2 = v1;
  v11 = v1;
  swift_bridgeObjectRetain();
  v3 = 0;
  while (1)
  {
    v8 = sub_21C458F0C();
    if (!v9)
      break;
    if (v8 == 47 && v9 == 0xE100000000000000)
    {
      v5 = swift_bridgeObjectRelease();
    }
    else
    {
      v4 = sub_21C4594F4();
      v5 = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        break;
    }
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  if (v3 >= 1)
  {
    sub_21C3E8C78(v3);
    v2 = v11;
  }
  v5 = v0;
  v6 = v2;
LABEL_12:
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_21C3E8C78(uint64_t result)
{
  char v1;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      result = sub_21C458EE8();
      if ((v1 & 1) == 0)
        return sub_21C458EAC();
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3E8CEC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v9 = result;
  v22 = MEMORY[0x24BEE4AF8];
  result = sub_21C3E3644(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v5 = v22;
    v11 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v11 = a3 & 0xFFFFFFFFFFFFLL;
    v20 = v11;
    while (v10 != v4)
    {
      if (!v20)
        goto LABEL_24;
      result = sub_21C458ED0();
      if (result < 0)
        goto LABEL_20;
      v12 = result;
      if (!result)
        goto LABEL_21;
      v21 = 0;
      MEMORY[0x22077C2A0](&v21, 8);
      if (v12 > v21 * v12)
      {
        v13 = -(uint64_t)v12 % v12;
        while (v13 > v21 * v12)
        {
          v21 = 0;
          MEMORY[0x22077C2A0](&v21, 8);
        }
      }
      sub_21C458EF4();
      result = sub_21C458F60();
      v14 = result;
      v16 = v15;
      v22 = v5;
      v18 = *(_QWORD *)(v5 + 16);
      v17 = *(_QWORD *)(v5 + 24);
      if (v18 >= v17 >> 1)
      {
        result = sub_21C3E3644(v17 > 1, v18 + 1, 1);
        v5 = v22;
      }
      ++v10;
      *(_QWORD *)(v5 + 16) = v18 + 1;
      v19 = v5 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v14;
      *(_QWORD *)(v19 + 40) = v16;
      if (v10 == v4)
        return v5;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t sub_21C3E8EB0()
{
  unint64_t result;

  result = qword_25527A230;
  if (!qword_25527A230)
  {
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25527A230);
  }
  return result;
}

uint64_t SeriesListSortOrder.index.getter()
{
  char *v0;

  return qword_21C45A6F0[*v0];
}

void SeriesListSortOrder.sortedAssets(for:)()
{
  __asm { BR              X10 }
}

_QWORD *sub_21C3E8F40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t *);
  _QWORD *v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = v0[2];
  if (v1)
  {
    v2 = (uint64_t)(v0 + 4);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_21C3E95B0(v2, (uint64_t)v9);
      v3 = v10;
      v4 = v11;
      sub_21C3E359C(v9, v10);
      AssetInfo.sequenceNumber.getter(v3, v4);
      v6 = v5;
      sub_21C3E2754((uint64_t)v9);
      if ((v6 & 0x100000000) != 0)
        break;
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v9[0] = v0;
    swift_bridgeObjectRetain();
    v7 = sub_21C3EE2B8;
  }
  else
  {
LABEL_6:
    v9[0] = v0;
    swift_bridgeObjectRetain();
    v7 = sub_21C3ED90C;
  }
  sub_21C3E9544(v9, v7);
  return v9[0];
}

BookFoundation::SeriesListSortOrder_optional __swiftcall SeriesListSortOrder.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  BookFoundation::SeriesListSortOrder_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SeriesListSortOrder.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C3E9184 + 4 * byte_21C45A5F5[*v0]))(0x6E69646E65637361, 0xE900000000000067);
}

uint64_t sub_21C3E9184()
{
  return 0x69646E6563736564;
}

uint64_t sub_21C3E91A0()
{
  return 0x44657361656C6572;
}

uint64_t sub_21C3E91C0()
{
  return 0x72616C75706F70;
}

uint64_t sub_21C3E91D8()
{
  return 0x656C746974;
}

void sub_21C3E91EC(char *a1)
{
  sub_21C3F813C(*a1);
}

void sub_21C3E91F8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C3E9248()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C3E92D8()
{
  __asm { BR              X10 }
}

uint64_t sub_21C3E9318()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C3E9394()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C3E93E0()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

BookFoundation::SeriesListSortOrder_optional sub_21C3E9470(Swift::String *a1)
{
  return SeriesListSortOrder.init(rawValue:)(*a1);
}

uint64_t sub_21C3E947C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21C3E94B0 + 4 * byte_21C45A609[*v0]))();
}

void sub_21C3E94B0(_QWORD *a1@<X8>)
{
  *a1 = 0x69646E6563736564;
  a1[1] = 0xEA0000000000676ELL;
}

void sub_21C3E94D0(_QWORD *a1@<X8>)
{
  *a1 = 0x44657361656C6572;
  a1[1] = 0xEB00000000657461;
}

void sub_21C3E94F4(_QWORD *a1@<X8>)
{
  *a1 = 0x72616C75706F70;
  a1[1] = 0xE700000000000000;
}

void sub_21C3E9510(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746974;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_21C3E9528(_QWORD **a1)
{
  return sub_21C3E9544(a1, sub_21C3EA0F8);
}

uint64_t sub_21C3E9544(_QWORD **a1, uint64_t (*a2)(_QWORD *))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = (_QWORD *)sub_21C439B54(v4);
  v5 = v4[2];
  v7[0] = v4 + 4;
  v7[1] = v5;
  result = a2(v7);
  *a1 = v4;
  return result;
}

uint64_t sub_21C3E95B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_21C3E95F8()
{
  unint64_t result;

  result = qword_25527A238;
  if (!qword_25527A238)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesListSortOrder, &type metadata for SeriesListSortOrder);
    atomic_store(result, (unint64_t *)&qword_25527A238);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MClientIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesListSortOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21C3E9718 + 4 * byte_21C45A613[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21C3E974C + 4 * byte_21C45A60E[v4]))();
}

uint64_t sub_21C3E974C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3E9754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C3E975CLL);
  return result;
}

uint64_t sub_21C3E9768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C3E9770);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21C3E9774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3E977C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesListSortOrder()
{
  return &type metadata for SeriesListSortOrder;
}

uint64_t sub_21C3E9798(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *__dst;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v2 = a1;
  v3 = a1[1];
  result = sub_21C4594D0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_135;
    if (v3)
      return sub_21C3EF260(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_143;
  v110 = result;
  v127 = v1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_100:
      v108 = v8;
      if (v11 >= 2)
      {
        v101 = *v2;
        do
        {
          v102 = v11 - 2;
          if (v11 < 2)
            goto LABEL_130;
          if (!v101)
            goto LABEL_142;
          v103 = *(_QWORD *)&v10[16 * v102 + 32];
          v104 = *(_QWORD *)&v10[16 * v11 + 24];
          v105 = v127;
          sub_21C3F0694((char *)(v101 + 40 * v103), (char *)(v101 + 40 * *(_QWORD *)&v10[16 * v11 + 16]), v101 + 40 * v104, __dst);
          v127 = v105;
          if (v105)
            break;
          if (v104 < v103)
            goto LABEL_131;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = sub_21C4397F0((uint64_t)v10);
          if (v102 >= *((_QWORD *)v10 + 2))
            goto LABEL_132;
          v106 = &v10[16 * v102 + 32];
          *(_QWORD *)v106 = v103;
          *((_QWORD *)v106 + 1) = v104;
          v107 = *((_QWORD *)v10 + 2);
          if (v11 > v107)
            goto LABEL_133;
          memmove(&v10[16 * v11 + 16], &v10[16 * v11 + 32], 16 * (v107 - v11));
          *((_QWORD *)v10 + 2) = v107 - 1;
          v11 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v108 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v7 = sub_21C459068();
    *(_QWORD *)(v7 + 16) = v6;
    v108 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v12 = v9;
    v13 = v9 + 1;
    if (v9 + 1 < v3)
    {
      v14 = *v2;
      sub_21C3E95B0(*v2 + 40 * v13, (uint64_t)&v124);
      v109 = v14;
      sub_21C3E95B0(v14 + 40 * v12, (uint64_t)v121);
      v15 = v125;
      v16 = v126;
      sub_21C3E359C(&v124, v125);
      AssetInfo.title.getter(v15, v16);
      v17 = v122;
      v18 = v123;
      sub_21C3E359C(v121, v122);
      v118 = v3;
      AssetInfo.title.getter(v17, v18);
      sub_21C3E8EB0();
      v115 = sub_21C4592B4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21C3E2754((uint64_t)v121);
      sub_21C3E2754((uint64_t)&v124);
      v19 = v12 + 2;
      if (v12 + 2 >= v3)
      {
        v13 = v12 + 2;
      }
      else
      {
        v111 = v10;
        v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          v21 = v20 + 40;
          sub_21C3E95B0(v20 + 40, (uint64_t)&v124);
          sub_21C3E95B0(v20, (uint64_t)v121);
          v22 = v125;
          v23 = v126;
          sub_21C3E359C(&v124, v125);
          AssetInfo.title.getter(v22, v23);
          v24 = v122;
          v25 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.title.getter(v24, v25);
          v26 = sub_21C4592B4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21C3E2754((uint64_t)v121);
          sub_21C3E2754((uint64_t)&v124);
          if ((v115 == -1) == (v26 != -1))
            break;
          v20 = v21;
          ++v19;
          v3 = v118;
          if (v118 == v19)
          {
            v13 = v118;
            v10 = v111;
            goto LABEL_24;
          }
        }
        v13 = v19;
        v10 = v111;
        v3 = v118;
      }
LABEL_24:
      if (v115 == -1)
      {
        if (v13 < v12)
          goto LABEL_138;
        if (v12 < v13)
        {
          v112 = v10;
          v27 = 40 * v13 - 40;
          v28 = v12;
          v29 = 40 * v12;
          v116 = v13;
          v30 = v28;
          do
          {
            if (v28 != --v13)
            {
              if (!v109)
                goto LABEL_141;
              v31 = v109 + v29;
              sub_21C3F349C((__int128 *)(v109 + v29), (uint64_t)&v124);
              v32 = *(_QWORD *)(v109 + v27 + 32);
              v33 = *(_OWORD *)(v109 + v27 + 16);
              *(_OWORD *)v31 = *(_OWORD *)(v109 + v27);
              *(_OWORD *)(v31 + 16) = v33;
              *(_QWORD *)(v31 + 32) = v32;
              sub_21C3F349C(&v124, v109 + v27);
            }
            ++v28;
            v27 -= 40;
            v29 += 40;
          }
          while (v28 < v13);
          v13 = v116;
          v3 = v118;
          v10 = v112;
          v12 = v30;
        }
      }
    }
    if (v13 >= v3)
      goto LABEL_51;
    if (__OFSUB__(v13, v12))
      goto LABEL_134;
    if (v13 - v12 >= v110)
      goto LABEL_51;
    if (__OFADD__(v12, v110))
      goto LABEL_136;
    v34 = v12 + v110 >= v3 ? v3 : v12 + v110;
    if (v34 < v12)
      break;
    if (v13 != v34)
    {
      v113 = v10;
      v114 = v12;
      v35 = 40 * v13 - 40;
      v119 = v34;
      do
      {
        v36 = v13;
        v37 = v114;
        v38 = v35;
        do
        {
          v39 = *v2 + v38;
          sub_21C3E95B0(v39 + 40, (uint64_t)&v124);
          sub_21C3E95B0(v39, (uint64_t)v121);
          v40 = v125;
          v41 = v126;
          sub_21C3E359C(&v124, v125);
          AssetInfo.title.getter(v40, v41);
          v42 = v122;
          v43 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.title.getter(v42, v43);
          sub_21C3E8EB0();
          v44 = sub_21C4592B4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21C3E2754((uint64_t)v121);
          sub_21C3E2754((uint64_t)&v124);
          if (v44 != -1)
            break;
          v45 = *v2;
          if (!*v2)
            goto LABEL_139;
          v46 = v45 + v38;
          sub_21C3F349C((__int128 *)(v45 + v38 + 40), (uint64_t)&v124);
          v47 = *(_OWORD *)(v46 + 16);
          *(_OWORD *)(v46 + 40) = *(_OWORD *)v46;
          *(_OWORD *)(v46 + 56) = v47;
          *(_QWORD *)(v46 + 72) = *(_QWORD *)(v46 + 32);
          sub_21C3F349C(&v124, v46);
          v38 -= 40;
          ++v37;
        }
        while (v36 != v37);
        v13 = v36 + 1;
        v35 += 40;
      }
      while (v36 + 1 != v119);
      v13 = v119;
      v10 = v113;
      v12 = v114;
    }
LABEL_51:
    if (v13 < v12)
      goto LABEL_129;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = sub_21C4393FC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v11 = v49 + 1;
    if (v49 >= v48 >> 1)
      v10 = sub_21C4393FC((char *)(v48 > 1), v49 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v11;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v12;
    *((_QWORD *)v51 + 1) = v13;
    v117 = v13;
    if (v49)
    {
      while (1)
      {
        v52 = v11 - 1;
        if (v11 >= 4)
        {
          v57 = &v50[16 * v11];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_118;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_119;
          v64 = v11 - 2;
          v65 = &v50[16 * v11 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_121;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_124;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_128;
            v80 = v55 < v90;
            goto LABEL_88;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_82;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_120;
        v64 = v11 - 2;
        v70 = &v50[16 * v11 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_123;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_126;
        if (__OFADD__(v74, v79))
          goto LABEL_127;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_88:
          if (v80)
            v52 = v64;
          goto LABEL_90;
        }
LABEL_82:
        if ((v75 & 1) != 0)
          goto LABEL_122;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_125;
        if (v86 < v74)
          goto LABEL_15;
LABEL_90:
        v91 = v52 - 1;
        if (v52 - 1 >= v11)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v92 = v2;
        v93 = *v2;
        if (!*v2)
          goto LABEL_140;
        v94 = v10;
        v95 = &v50[16 * v91];
        v96 = *(_QWORD *)v95;
        v97 = &v50[16 * v52];
        v98 = *((_QWORD *)v97 + 1);
        v99 = v127;
        sub_21C3F0694((char *)(v93 + 40 * *(_QWORD *)v95), (char *)(v93 + 40 * *(_QWORD *)v97), v93 + 40 * v98, __dst);
        v127 = v99;
        if (v99)
          goto LABEL_111;
        if (v98 < v96)
          goto LABEL_115;
        if (v52 > *((_QWORD *)v94 + 2))
          goto LABEL_116;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v50[16 * v91 + 8] = v98;
        v100 = *((_QWORD *)v94 + 2);
        if (v52 >= v100)
          goto LABEL_117;
        v10 = v94;
        v11 = v100 - 1;
        memmove(&v50[16 * v52], v97 + 16, 16 * (v100 - 1 - v52));
        *((_QWORD *)v94 + 2) = v100 - 1;
        v2 = v92;
        if (v100 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v2[1];
    v9 = v117;
    if (v117 >= v3)
    {
      v8 = v108;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EA0F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  int v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  int v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char v154;
  char *v155;
  void (*v156)(char *, uint64_t);
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  char v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  unint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  _BOOL4 v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  _QWORD v245[3];
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;

  v3 = sub_21C3E344C(&qword_254078EC0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v222 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v222 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v231 = (uint64_t)&v222 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v222 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v222 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v222 - v18;
  v242 = sub_21C458C60();
  v251 = *(_QWORD *)(v242 - 8);
  v20 = MEMORY[0x24BDAC7A8](v242);
  v240 = (char *)&v222 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v244 = (char *)&v222 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v230 = (char *)&v222 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v232 = (char *)&v222 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v222 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v227 = (char *)&v222 - v31;
  v32 = a1[1];
  result = sub_21C4594D0();
  if (result >= v32)
  {
    if (v32 < 0)
      goto LABEL_182;
    if (v32)
      return sub_21C3EF408(0, v32, 1, a1);
    return result;
  }
  if (v32 >= 0)
    v34 = v32;
  else
    v34 = v32 + 1;
  if (v32 < -1)
    goto LABEL_190;
  v229 = v14;
  v233 = result;
  v241 = v1;
  v225 = v30;
  if (v32 < 2)
  {
    v238 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v226 = MEMORY[0x24BEE4AF8];
    if (v32 != 1)
    {
      v37 = (char *)MEMORY[0x24BEE4AF8];
      v41 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_148:
      if (v41 >= 2)
      {
        v215 = *a1;
        do
        {
          v216 = v41 - 2;
          if (v41 < 2)
            goto LABEL_177;
          if (!v215)
            goto LABEL_189;
          v217 = *(_QWORD *)&v37[16 * v216 + 32];
          v218 = *(_QWORD *)&v37[16 * v41 + 24];
          v219 = v241;
          sub_21C3F0AD8((char *)(v215 + 40 * v217), (char *)(v215 + 40 * *(_QWORD *)&v37[16 * v41 + 16]), v215 + 40 * v218, v238);
          v241 = v219;
          if (v219)
            break;
          if (v218 < v217)
            goto LABEL_178;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v37 = sub_21C4397F0((uint64_t)v37);
          if (v216 >= *((_QWORD *)v37 + 2))
            goto LABEL_179;
          v220 = &v37[16 * v216 + 32];
          *(_QWORD *)v220 = v217;
          *((_QWORD *)v220 + 1) = v218;
          v221 = *((_QWORD *)v37 + 2);
          if (v41 > v221)
            goto LABEL_180;
          memmove(&v37[16 * v41 + 16], &v37[16 * v41 + 32], 16 * (v221 - v41));
          *((_QWORD *)v37 + 2) = v221 - 1;
          v41 = v221 - 1;
        }
        while (v221 > 2);
      }
LABEL_159:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v226 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v223 = v19;
    v224 = v17;
  }
  else
  {
    v223 = v19;
    v224 = v17;
    v35 = v34 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v36 = sub_21C459068();
    *(_QWORD *)(v36 + 16) = v35;
    v226 = v36;
    v238 = (char *)(v36 + 32);
  }
  v37 = (char *)MEMORY[0x24BEE4AF8];
  v38 = (uint64_t)v6;
  v39 = (uint64_t)v9;
  v40 = 0;
  v239 = v38;
  v243 = v39;
  while (1)
  {
    v42 = v40++;
    v235 = v37;
    v237 = v42;
    if (v40 >= v32)
    {
      v62 = v233;
    }
    else
    {
      v43 = *a1;
      v44 = v42;
      sub_21C3E95B0(*a1 + 40 * v40, (uint64_t)&v248);
      v236 = v43;
      sub_21C3E95B0(v43 + 40 * v44, (uint64_t)v245);
      v45 = v249;
      v46 = v250;
      sub_21C3E359C(&v248, v249);
      AssetInfo.seriesSortKey.getter(v45, v46);
      if ((v47 & 1) != 0
        && (v48 = v246, v49 = v247, sub_21C3E359C(v245, v246), AssetInfo.seriesSortKey.getter(v48, v49), (v50 & 1) != 0))
      {
        v63 = v249;
        v64 = v250;
        sub_21C3E359C(&v248, v249);
        v65 = (uint64_t)v223;
        AssetInfo.releaseDate.getter(v63, v64, (uint64_t)v223);
        v66 = v251;
        v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v251 + 48);
        v68 = v242;
        if (v67(v65, 1, v242) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4(v65);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v227, v65, v68);
        }
        v69 = v246;
        v70 = v247;
        sub_21C3E359C(v245, v246);
        v71 = (uint64_t)v224;
        AssetInfo.releaseDate.getter(v69, v70, (uint64_t)v224);
        if (v67(v71, 1, v68) == 1)
        {
          v72 = v225;
          sub_21C458C18();
          sub_21C3F34B4(v71);
          v73 = v251;
        }
        else
        {
          v73 = v251;
          v72 = v225;
          (*(void (**)(char *, uint64_t, uint64_t))(v251 + 32))(v225, v71, v68);
        }
        v74 = v227;
        v75 = sub_21C458C3C();
        v76 = *(void (**)(char *, uint64_t))(v73 + 8);
        v76(v72, v68);
        v77 = v74;
        v61 = v75;
        v76(v77, v68);
      }
      else
      {
        v51 = v249;
        v52 = v250;
        sub_21C3E359C(&v248, v249);
        v53 = AssetInfo.seriesSortKey.getter(v51, v52);
        if ((v54 & 1) != 0)
          v55 = 0;
        else
          v55 = v53;
        v56 = v246;
        v57 = v247;
        sub_21C3E359C(v245, v246);
        v58 = AssetInfo.seriesSortKey.getter(v56, v57);
        if ((v59 & 1) != 0)
          v60 = 0;
        else
          v60 = v58;
        v61 = v55 < v60;
      }
      sub_21C3E2754((uint64_t)v245);
      sub_21C3E2754((uint64_t)&v248);
      v42 = v237;
      v40 = v237 + 2;
      v234 = v32;
      if (v237 + 2 < v32)
      {
        v78 = v236 + 40 * v237 + 40;
        v228 = v61;
        while (1)
        {
          sub_21C3E95B0(v78 + 40, (uint64_t)&v248);
          sub_21C3E95B0(v78, (uint64_t)v245);
          v79 = v249;
          v80 = v250;
          sub_21C3E359C(&v248, v249);
          AssetInfo.seriesSortKey.getter(v79, v80);
          if ((v81 & 1) == 0)
            goto LABEL_38;
          v82 = v246;
          v83 = v247;
          sub_21C3E359C(v245, v246);
          AssetInfo.seriesSortKey.getter(v82, v83);
          if ((v84 & 1) != 0)
          {
            v96 = v40;
            v97 = v249;
            v98 = v250;
            sub_21C3E359C(&v248, v249);
            v99 = (uint64_t)v229;
            AssetInfo.releaseDate.getter(v97, v98, (uint64_t)v229);
            v100 = v99;
            v101 = v251;
            v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v251 + 48);
            v103 = v242;
            if (v102(v100, 1, v242) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v100);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v232, v100, v103);
            }
            v104 = v246;
            v105 = v247;
            sub_21C3E359C(v245, v246);
            v106 = v231;
            AssetInfo.releaseDate.getter(v104, v105, v231);
            if (v102(v106, 1, v103) == 1)
            {
              v107 = v230;
              sub_21C458C18();
              sub_21C3F34B4(v106);
              v37 = v235;
              v108 = v251;
            }
            else
            {
              v108 = v251;
              v107 = v230;
              (*(void (**)(char *, uint64_t, uint64_t))(v251 + 32))(v230, v106, v103);
              v37 = v235;
            }
            v109 = v232;
            v110 = sub_21C458C3C();
            v111 = v107;
            v95 = v110;
            v112 = *(void (**)(char *, uint64_t))(v108 + 8);
            v112(v111, v103);
            v112(v109, v103);
            v40 = v96;
            v32 = v234;
            v61 = v228;
          }
          else
          {
LABEL_38:
            v85 = v249;
            v86 = v250;
            sub_21C3E359C(&v248, v249);
            v87 = AssetInfo.seriesSortKey.getter(v85, v86);
            v89 = (v88 & 1) != 0 ? 0 : v87;
            v90 = v246;
            v91 = v247;
            sub_21C3E359C(v245, v246);
            v92 = AssetInfo.seriesSortKey.getter(v90, v91);
            v94 = (v93 & 1) != 0 ? 0 : v92;
            v95 = v89 < v94;
            v37 = v235;
          }
          sub_21C3E2754((uint64_t)v245);
          sub_21C3E2754((uint64_t)&v248);
          if (((v61 ^ v95) & 1) != 0)
            break;
          ++v40;
          v78 += 40;
          if (v32 == v40)
          {
            v40 = v32;
            break;
          }
        }
        v42 = v237;
      }
      v62 = v233;
      if (v61)
      {
        if (v40 < v42)
          goto LABEL_183;
        if (v42 < v40)
        {
          v113 = 40 * v40 - 40;
          v114 = 40 * v42;
          v115 = v40;
          v116 = v42;
          do
          {
            if (v116 != --v115)
            {
              if (!v236)
                goto LABEL_188;
              v117 = v236 + v114;
              v118 = v236 + v113;
              sub_21C3F349C((__int128 *)(v236 + v114), (uint64_t)&v248);
              v119 = *(_QWORD *)(v118 + 32);
              v120 = *(_OWORD *)(v118 + 16);
              *(_OWORD *)v117 = *(_OWORD *)v118;
              *(_OWORD *)(v117 + 16) = v120;
              *(_QWORD *)(v117 + 32) = v119;
              sub_21C3F349C(&v248, v118);
              v62 = v233;
              v42 = v237;
            }
            ++v116;
            v113 -= 40;
            v114 += 40;
          }
          while (v116 < v115);
          v32 = v234;
          v37 = v235;
        }
      }
    }
    if (v40 < v32)
    {
      if (__OFSUB__(v40, v42))
        goto LABEL_181;
      if (v40 - v42 < v62)
        break;
    }
LABEL_98:
    if (v40 < v42)
      goto LABEL_176;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v37 = sub_21C4393FC(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
    v161 = *((_QWORD *)v37 + 2);
    v160 = *((_QWORD *)v37 + 3);
    v41 = v161 + 1;
    if (v161 >= v160 >> 1)
      v37 = sub_21C4393FC((char *)(v160 > 1), v161 + 1, 1, v37);
    *((_QWORD *)v37 + 2) = v41;
    v162 = v37 + 32;
    v163 = &v37[16 * v161 + 32];
    *(_QWORD *)v163 = v237;
    *((_QWORD *)v163 + 1) = v40;
    if (v161)
    {
      v236 = v40;
      while (1)
      {
        v164 = v41 - 1;
        if (v41 >= 4)
        {
          v169 = &v162[16 * v41];
          v170 = *((_QWORD *)v169 - 8);
          v171 = *((_QWORD *)v169 - 7);
          v175 = __OFSUB__(v171, v170);
          v172 = v171 - v170;
          if (v175)
            goto LABEL_165;
          v174 = *((_QWORD *)v169 - 6);
          v173 = *((_QWORD *)v169 - 5);
          v175 = __OFSUB__(v173, v174);
          v167 = v173 - v174;
          v168 = v175;
          if (v175)
            goto LABEL_166;
          v176 = v41 - 2;
          v177 = &v162[16 * v41 - 32];
          v179 = *(_QWORD *)v177;
          v178 = *((_QWORD *)v177 + 1);
          v175 = __OFSUB__(v178, v179);
          v180 = v178 - v179;
          if (v175)
            goto LABEL_168;
          v175 = __OFADD__(v167, v180);
          v181 = v167 + v180;
          if (v175)
            goto LABEL_171;
          if (v181 >= v172)
          {
            v199 = &v162[16 * v164];
            v201 = *(_QWORD *)v199;
            v200 = *((_QWORD *)v199 + 1);
            v175 = __OFSUB__(v200, v201);
            v202 = v200 - v201;
            if (v175)
              goto LABEL_175;
            v192 = v167 < v202;
            goto LABEL_136;
          }
        }
        else
        {
          if (v41 != 3)
          {
            v193 = *((_QWORD *)v37 + 4);
            v194 = *((_QWORD *)v37 + 5);
            v175 = __OFSUB__(v194, v193);
            v186 = v194 - v193;
            v187 = v175;
            goto LABEL_130;
          }
          v166 = *((_QWORD *)v37 + 4);
          v165 = *((_QWORD *)v37 + 5);
          v175 = __OFSUB__(v165, v166);
          v167 = v165 - v166;
          v168 = v175;
        }
        if ((v168 & 1) != 0)
          goto LABEL_167;
        v176 = v41 - 2;
        v182 = &v162[16 * v41 - 32];
        v184 = *(_QWORD *)v182;
        v183 = *((_QWORD *)v182 + 1);
        v185 = __OFSUB__(v183, v184);
        v186 = v183 - v184;
        v187 = v185;
        if (v185)
          goto LABEL_170;
        v188 = &v162[16 * v164];
        v190 = *(_QWORD *)v188;
        v189 = *((_QWORD *)v188 + 1);
        v175 = __OFSUB__(v189, v190);
        v191 = v189 - v190;
        if (v175)
          goto LABEL_173;
        if (__OFADD__(v186, v191))
          goto LABEL_174;
        if (v186 + v191 >= v167)
        {
          v192 = v167 < v191;
LABEL_136:
          if (v192)
            v164 = v176;
          goto LABEL_138;
        }
LABEL_130:
        if ((v187 & 1) != 0)
          goto LABEL_169;
        v195 = &v162[16 * v164];
        v197 = *(_QWORD *)v195;
        v196 = *((_QWORD *)v195 + 1);
        v175 = __OFSUB__(v196, v197);
        v198 = v196 - v197;
        if (v175)
          goto LABEL_172;
        if (v198 < v186)
          goto LABEL_15;
LABEL_138:
        v203 = v164 - 1;
        if (v164 - 1 >= v41)
        {
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
          goto LABEL_185;
        }
        v204 = *a1;
        if (!*a1)
          goto LABEL_187;
        v205 = v37;
        v206 = a1;
        v207 = &v162[16 * v203];
        v208 = *(_QWORD *)v207;
        v209 = v162;
        v210 = v164;
        v211 = &v162[16 * v164];
        v212 = *((_QWORD *)v211 + 1);
        v213 = v241;
        sub_21C3F0AD8((char *)(v204 + 40 * *(_QWORD *)v207), (char *)(v204 + 40 * *(_QWORD *)v211), v204 + 40 * v212, v238);
        v241 = v213;
        if (v213)
          goto LABEL_159;
        if (v212 < v208)
          goto LABEL_162;
        if (v210 > *((_QWORD *)v205 + 2))
          goto LABEL_163;
        *(_QWORD *)v207 = v208;
        *(_QWORD *)&v209[16 * v203 + 8] = v212;
        v214 = *((_QWORD *)v205 + 2);
        if (v210 >= v214)
          goto LABEL_164;
        v37 = v205;
        v41 = v214 - 1;
        memmove(v211, v211 + 16, 16 * (v214 - 1 - v210));
        v162 = v209;
        *((_QWORD *)v205 + 2) = v214 - 1;
        a1 = v206;
        v39 = v243;
        v40 = v236;
        if (v214 <= 2)
          goto LABEL_15;
      }
    }
    v41 = 1;
LABEL_15:
    v32 = a1[1];
    if (v40 >= v32)
      goto LABEL_148;
  }
  if (__OFADD__(v42, v62))
    goto LABEL_184;
  if (v42 + v62 >= v32)
    v121 = v32;
  else
    v121 = v42 + v62;
  if (v121 >= v42)
  {
    if (v40 != v121)
    {
      v122 = 40 * v40 - 40;
      v234 = v121;
      do
      {
        v123 = v42;
        v236 = v122;
        do
        {
          v124 = *a1 + v122;
          sub_21C3E95B0(v124 + 40, (uint64_t)&v248);
          sub_21C3E95B0(v124, (uint64_t)v245);
          v125 = v249;
          v126 = v250;
          sub_21C3E359C(&v248, v249);
          AssetInfo.seriesSortKey.getter(v125, v126);
          if ((v127 & 1) != 0
            && (v128 = v246,
                v129 = v247,
                sub_21C3E359C(v245, v246),
                AssetInfo.seriesSortKey.getter(v128, v129),
                (v130 & 1) != 0))
          {
            v142 = v40;
            v143 = v249;
            v144 = v250;
            sub_21C3E359C(&v248, v249);
            AssetInfo.releaseDate.getter(v143, v144, v39);
            v145 = v251;
            v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v251 + 48);
            v147 = v242;
            if (v146(v39, 1, v242) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v39);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v244, v39, v147);
            }
            v148 = v246;
            v149 = v247;
            sub_21C3E359C(v245, v246);
            v150 = v239;
            AssetInfo.releaseDate.getter(v148, v149, v239);
            if (v146(v150, 1, v147) == 1)
            {
              v151 = v240;
              sub_21C458C18();
              sub_21C3F34B4(v150);
              v152 = v251;
            }
            else
            {
              v152 = v251;
              v151 = v240;
              (*(void (**)(char *, uint64_t, uint64_t))(v251 + 32))(v240, v150, v147);
            }
            v153 = v244;
            v154 = sub_21C458C3C();
            v155 = v151;
            v141 = v154;
            v156 = *(void (**)(char *, uint64_t))(v152 + 8);
            v156(v155, v147);
            v156(v153, v147);
            v39 = v243;
            v40 = v142;
          }
          else
          {
            v131 = v249;
            v132 = v250;
            sub_21C3E359C(&v248, v249);
            v133 = AssetInfo.seriesSortKey.getter(v131, v132);
            if ((v134 & 1) != 0)
              v135 = 0;
            else
              v135 = v133;
            v136 = v246;
            v137 = v247;
            sub_21C3E359C(v245, v246);
            v138 = AssetInfo.seriesSortKey.getter(v136, v137);
            if ((v139 & 1) != 0)
              v140 = 0;
            else
              v140 = v138;
            v141 = v135 < v140;
          }
          sub_21C3E2754((uint64_t)v245);
          sub_21C3E2754((uint64_t)&v248);
          if (!v141)
            break;
          v157 = *a1;
          if (!*a1)
            goto LABEL_186;
          v158 = v157 + v122;
          sub_21C3F349C((__int128 *)(v157 + v122 + 40), (uint64_t)&v248);
          v159 = *(_OWORD *)(v158 + 16);
          *(_OWORD *)(v158 + 40) = *(_OWORD *)v158;
          *(_OWORD *)(v158 + 56) = v159;
          *(_QWORD *)(v158 + 72) = *(_QWORD *)(v158 + 32);
          sub_21C3F349C(&v248, v158);
          v122 -= 40;
          ++v123;
        }
        while (v40 != v123);
        ++v40;
        v42 = v237;
        v122 = v236 + 40;
      }
      while (v40 != v234);
      v40 = v234;
      v37 = v235;
    }
    goto LABEL_98;
  }
LABEL_185:
  __break(1u);
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EB070(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  int v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  void (*v140)(char *, uint64_t);
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  char v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  unsigned int (*v234)(uint64_t, uint64_t, uint64_t);
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  _QWORD v243[3];
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;

  v3 = sub_21C3E344C(&qword_254078EC0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v218 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v218 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v218 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v229 = (uint64_t)&v218 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v223 = (uint64_t)&v218 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v222 = (uint64_t)&v218 - v17;
  v249 = sub_21C458C60();
  v18 = *(_QWORD *)(v249 - 8);
  v19 = MEMORY[0x24BDAC7A8](v249);
  v238 = (char *)&v218 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v241 = (char *)&v218 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v228 = (char *)&v218 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v218 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v221 = (char *)&v218 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v224 = (char *)&v218 - v30;
  v31 = a1[1];
  result = sub_21C4594D0();
  if (result >= v31)
  {
    if (v31 < 0)
      goto LABEL_184;
    if (v31)
      return sub_21C3EF7B0(0, v31, 1, a1);
    return result;
  }
  if (v31 >= 0)
    v33 = v31;
  else
    v33 = v31 + 1;
  if (v31 < -1)
    goto LABEL_192;
  v242 = v18;
  v220 = result;
  v236 = v1;
  if (v31 < 2)
  {
    v233 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v219 = MEMORY[0x24BEE4AF8];
    if (v31 != 1)
    {
      v38 = (char *)MEMORY[0x24BEE4AF8];
      v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_150:
      if (v40 >= 2)
      {
        v207 = *a1;
        do
        {
          v208 = v40 - 2;
          if (v40 < 2)
            goto LABEL_179;
          if (!v207)
            goto LABEL_191;
          v209 = v38;
          v210 = v38 + 32;
          v211 = *(_QWORD *)&v38[16 * v208 + 32];
          v212 = *(_QWORD *)&v38[16 * v40 + 24];
          v213 = v236;
          sub_21C3F12F4(v207 + 40 * v211, (char *)(v207 + 40 * *(_QWORD *)&v210[16 * v40 - 16]), v207 + 40 * v212, v233);
          v236 = v213;
          if (v213)
            break;
          if (v212 < v211)
            goto LABEL_180;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v209 = sub_21C4397F0((uint64_t)v209);
          if (v208 >= *((_QWORD *)v209 + 2))
            goto LABEL_181;
          v214 = v209;
          v215 = v209 + 32;
          v216 = &v209[16 * v208 + 32];
          *(_QWORD *)v216 = v211;
          *((_QWORD *)v216 + 1) = v212;
          v217 = *((_QWORD *)v209 + 2);
          if (v40 > v217)
            goto LABEL_182;
          v38 = v214;
          memmove(&v215[16 * v40 - 16], &v215[16 * v40], 16 * (v217 - v40));
          *((_QWORD *)v38 + 2) = v217 - 1;
          v40 = v217 - 1;
        }
        while (v217 > 2);
      }
LABEL_161:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v219 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v34 = 1;
    v226 = v12;
  }
  else
  {
    v34 = v31;
    v226 = v12;
    v35 = v33 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v36 = sub_21C459068();
    *(_QWORD *)(v36 + 16) = v35;
    v219 = v36;
    v233 = (char *)(v36 + 32);
  }
  v37 = 0;
  v38 = (char *)MEMORY[0x24BEE4AF8];
  v237 = v9;
  v235 = v27;
  v39 = v34;
  v239 = v6;
  while (1)
  {
    v41 = v37;
    v42 = v37 + 1;
    v232 = v37;
    if (v37 + 1 < v39)
    {
      v43 = *a1;
      v44 = v37;
      sub_21C3E95B0(*a1 + 40 * v42, (uint64_t)&v246);
      v225 = v43;
      sub_21C3E95B0(v43 + 40 * v44, (uint64_t)v243);
      v45 = v247;
      v46 = v248;
      sub_21C3E359C(&v246, v247);
      v47 = v45;
      v48 = v222;
      AssetInfo.releaseDate.getter(v47, v46, v222);
      v49 = v242;
      v50 = v249;
      v234 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v242 + 48);
      if (v234(v48, 1, v249) == 1)
      {
        sub_21C458C18();
        sub_21C3F34B4(v48);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v224, v48, v50);
      }
      v51 = v244;
      v52 = v245;
      sub_21C3E359C(v243, v244);
      v53 = v51;
      v54 = v223;
      AssetInfo.releaseDate.getter(v53, v52, v223);
      v55 = v50;
      if (v234(v54, 1, v50) == 1)
      {
        v56 = v221;
        sub_21C458C18();
        sub_21C3F34B4(v54);
      }
      else
      {
        v56 = v221;
        (*(void (**)(char *, uint64_t, uint64_t))(v242 + 32))(v221, v54, v55);
      }
      v57 = v224;
      v58 = sub_21C458C48();
      v230 = v39;
      if ((v58 & 1) != 0)
      {
        v59 = v56;
        v60 = v55;
        v61 = v247;
        v62 = v248;
        sub_21C3E359C(&v246, v247);
        v63 = AssetInfo.seriesSortKey.getter(v61, v62);
        if ((v64 & 1) != 0)
          v65 = 0;
        else
          v65 = v63;
        v66 = v244;
        v67 = v245;
        sub_21C3E359C(v243, v244);
        v68 = AssetInfo.seriesSortKey.getter(v66, v67);
        LOBYTE(v67) = v69;
        v70 = *(char **)(v242 + 8);
        v71 = v59;
        v39 = v230;
        ((void (*)(char *, uint64_t))v70)(v71, v60);
        v227 = v70;
        ((void (*)(char *, uint64_t))v70)(v224, v60);
        if ((v67 & 1) != 0)
          v72 = 0;
        else
          v72 = v68;
        v184 = v72 < v65;
        v9 = v237;
        v73 = v184;
        LODWORD(v231) = v73;
      }
      else
      {
        LODWORD(v231) = sub_21C458C30();
        v74 = *(char **)(v242 + 8);
        ((void (*)(char *, uint64_t))v74)(v56, v55);
        v227 = v74;
        ((void (*)(char *, uint64_t))v74)(v57, v55);
      }
      sub_21C3E2754((uint64_t)v243);
      sub_21C3E2754((uint64_t)&v246);
      v41 = v232;
      v42 = v232 + 2;
      if (v232 + 2 < v39)
      {
        v75 = v225 + 40 * v232 + 40;
        while (1)
        {
          v240 = v42;
          sub_21C3E95B0(v75 + 40, (uint64_t)&v246);
          sub_21C3E95B0(v75, (uint64_t)v243);
          v76 = v247;
          v77 = v248;
          sub_21C3E359C(&v246, v247);
          v78 = v229;
          AssetInfo.releaseDate.getter(v76, v77, v229);
          v79 = v78;
          v80 = v78;
          v81 = v249;
          if (v234(v80, 1, v249) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4(v79);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v242 + 32))(v235, v79, v81);
          }
          v82 = v244;
          v83 = v245;
          sub_21C3E359C(v243, v244);
          v84 = (uint64_t)v226;
          AssetInfo.releaseDate.getter(v82, v83, (uint64_t)v226);
          if (v234(v84, 1, v81) == 1)
          {
            v85 = v228;
            sub_21C458C18();
            sub_21C3F34B4(v84);
          }
          else
          {
            v86 = v81;
            v85 = v228;
            (*(void (**)(char *, uint64_t, uint64_t))(v242 + 32))(v228, v84, v86);
          }
          v87 = v235;
          if ((sub_21C458C48() & 1) != 0)
          {
            v88 = v247;
            v89 = v248;
            sub_21C3E359C(&v246, v247);
            v90 = AssetInfo.seriesSortKey.getter(v88, v89);
            v92 = (v91 & 1) != 0 ? 0 : v90;
            v93 = v244;
            v94 = v245;
            sub_21C3E359C(v243, v244);
            v95 = AssetInfo.seriesSortKey.getter(v93, v94);
            LOBYTE(v94) = v96;
            v97 = v85;
            v98 = v249;
            v99 = v227;
            ((void (*)(char *, uint64_t))v227)(v97, v249);
            ((void (*)(char *, uint64_t))v99)(v235, v98);
            v100 = (v94 & 1) != 0 ? 0 : v95;
            v184 = v100 < v92;
            v9 = v237;
            v101 = v184;
          }
          else
          {
            v101 = sub_21C458C30();
            v102 = v85;
            v103 = v249;
            v104 = v227;
            ((void (*)(char *, uint64_t))v227)(v102, v249);
            ((void (*)(char *, uint64_t))v104)(v87, v103);
          }
          v42 = v240;
          sub_21C3E2754((uint64_t)v243);
          sub_21C3E2754((uint64_t)&v246);
          v39 = v230;
          if (((v231 ^ v101) & 1) != 0)
            break;
          ++v42;
          v75 += 40;
          if (v230 == v42)
          {
            v42 = v230;
            break;
          }
        }
        v41 = v232;
      }
      if ((v231 & 1) != 0)
      {
        if (v42 < v41)
          goto LABEL_185;
        if (v41 < v42)
        {
          v227 = v38;
          v105 = 40 * v42 - 40;
          v106 = v42;
          v107 = 40 * v41;
          v108 = v106;
          v109 = v41;
          do
          {
            if (v109 != --v106)
            {
              if (!v225)
                goto LABEL_190;
              v110 = v225 + v107;
              v111 = v225 + v105;
              sub_21C3F349C((__int128 *)(v225 + v107), (uint64_t)&v246);
              v112 = *(_QWORD *)(v111 + 32);
              v113 = *(_OWORD *)(v111 + 16);
              *(_OWORD *)v110 = *(_OWORD *)v111;
              *(_OWORD *)(v110 + 16) = v113;
              *(_QWORD *)(v110 + 32) = v112;
              sub_21C3F349C(&v246, v111);
              v41 = v232;
            }
            ++v109;
            v105 -= 40;
            v107 += 40;
          }
          while (v109 < v106);
          v9 = v237;
          v38 = v227;
          v42 = v108;
          v39 = v230;
        }
      }
    }
    if (v42 < v39)
    {
      if (__OFSUB__(v42, v41))
        goto LABEL_183;
      if (v42 - v41 < v220)
        break;
    }
LABEL_102:
    if (v42 < v41)
      goto LABEL_178;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_21C4393FC(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
    v153 = *((_QWORD *)v38 + 2);
    v152 = *((_QWORD *)v38 + 3);
    v40 = v153 + 1;
    if (v153 >= v152 >> 1)
      v38 = sub_21C4393FC((char *)(v152 > 1), v153 + 1, 1, v38);
    *((_QWORD *)v38 + 2) = v40;
    v154 = v38 + 32;
    v155 = &v38[16 * v153 + 32];
    *(_QWORD *)v155 = v232;
    *((_QWORD *)v155 + 1) = v42;
    v240 = v42;
    if (v153)
    {
      while (1)
      {
        v156 = v40 - 1;
        if (v40 >= 4)
        {
          v161 = &v154[16 * v40];
          v162 = *((_QWORD *)v161 - 8);
          v163 = *((_QWORD *)v161 - 7);
          v167 = __OFSUB__(v163, v162);
          v164 = v163 - v162;
          if (v167)
            goto LABEL_167;
          v166 = *((_QWORD *)v161 - 6);
          v165 = *((_QWORD *)v161 - 5);
          v167 = __OFSUB__(v165, v166);
          v159 = v165 - v166;
          v160 = v167;
          if (v167)
            goto LABEL_168;
          v168 = v40 - 2;
          v169 = &v154[16 * v40 - 32];
          v171 = *(_QWORD *)v169;
          v170 = *((_QWORD *)v169 + 1);
          v167 = __OFSUB__(v170, v171);
          v172 = v170 - v171;
          if (v167)
            goto LABEL_170;
          v167 = __OFADD__(v159, v172);
          v173 = v159 + v172;
          if (v167)
            goto LABEL_173;
          if (v173 >= v164)
          {
            v191 = &v154[16 * v156];
            v193 = *(_QWORD *)v191;
            v192 = *((_QWORD *)v191 + 1);
            v167 = __OFSUB__(v192, v193);
            v194 = v192 - v193;
            if (v167)
              goto LABEL_177;
            v184 = v159 < v194;
            goto LABEL_139;
          }
        }
        else
        {
          if (v40 != 3)
          {
            v185 = *((_QWORD *)v38 + 4);
            v186 = *((_QWORD *)v38 + 5);
            v167 = __OFSUB__(v186, v185);
            v178 = v186 - v185;
            v179 = v167;
            goto LABEL_133;
          }
          v158 = *((_QWORD *)v38 + 4);
          v157 = *((_QWORD *)v38 + 5);
          v167 = __OFSUB__(v157, v158);
          v159 = v157 - v158;
          v160 = v167;
        }
        if ((v160 & 1) != 0)
          goto LABEL_169;
        v168 = v40 - 2;
        v174 = &v154[16 * v40 - 32];
        v176 = *(_QWORD *)v174;
        v175 = *((_QWORD *)v174 + 1);
        v177 = __OFSUB__(v175, v176);
        v178 = v175 - v176;
        v179 = v177;
        if (v177)
          goto LABEL_172;
        v180 = &v154[16 * v156];
        v182 = *(_QWORD *)v180;
        v181 = *((_QWORD *)v180 + 1);
        v167 = __OFSUB__(v181, v182);
        v183 = v181 - v182;
        if (v167)
          goto LABEL_175;
        if (__OFADD__(v178, v183))
          goto LABEL_176;
        if (v178 + v183 >= v159)
        {
          v184 = v159 < v183;
LABEL_139:
          if (v184)
            v156 = v168;
          goto LABEL_141;
        }
LABEL_133:
        if ((v179 & 1) != 0)
          goto LABEL_171;
        v187 = &v154[16 * v156];
        v189 = *(_QWORD *)v187;
        v188 = *((_QWORD *)v187 + 1);
        v167 = __OFSUB__(v188, v189);
        v190 = v188 - v189;
        if (v167)
          goto LABEL_174;
        if (v190 < v178)
          goto LABEL_15;
LABEL_141:
        v195 = v156 - 1;
        if (v156 - 1 >= v40)
        {
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
          goto LABEL_187;
        }
        v196 = *a1;
        if (!*a1)
          goto LABEL_189;
        v197 = v38;
        v198 = a1;
        v199 = &v154[16 * v195];
        v200 = *(_QWORD *)v199;
        v201 = v154;
        v202 = v156;
        v203 = &v154[16 * v156];
        v204 = *((_QWORD *)v203 + 1);
        v205 = v236;
        sub_21C3F12F4(v196 + 40 * *(_QWORD *)v199, (char *)(v196 + 40 * *(_QWORD *)v203), v196 + 40 * v204, v233);
        v236 = v205;
        if (v205)
          goto LABEL_161;
        if (v204 < v200)
          goto LABEL_164;
        if (v202 > *((_QWORD *)v197 + 2))
          goto LABEL_165;
        *(_QWORD *)v199 = v200;
        *(_QWORD *)&v201[16 * v195 + 8] = v204;
        v206 = *((_QWORD *)v197 + 2);
        if (v202 >= v206)
          goto LABEL_166;
        v38 = v197;
        v40 = v206 - 1;
        memmove(v203, v203 + 16, 16 * (v206 - 1 - v202));
        v154 = v201;
        *((_QWORD *)v197 + 2) = v206 - 1;
        v184 = v206 > 2;
        a1 = v198;
        v6 = v239;
        v9 = v237;
        if (!v184)
          goto LABEL_15;
      }
    }
    v40 = 1;
LABEL_15:
    v39 = a1[1];
    v37 = v240;
    if (v240 >= v39)
      goto LABEL_150;
  }
  if (__OFADD__(v41, v220))
    goto LABEL_186;
  if (v41 + v220 >= v39)
    v114 = v39;
  else
    v114 = v41 + v220;
  if (v114 >= v41)
  {
    if (v42 != v114)
    {
      v227 = v38;
      v115 = 40 * v42 - 40;
      v116 = v242;
      v231 = v114;
      do
      {
        v240 = v42;
        v117 = v41;
        v234 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v115;
        while (1)
        {
          v118 = *a1 + v115;
          sub_21C3E95B0(v118 + 40, (uint64_t)&v246);
          sub_21C3E95B0(v118, (uint64_t)v243);
          v119 = v247;
          v120 = v248;
          sub_21C3E359C(&v246, v247);
          AssetInfo.releaseDate.getter(v119, v120, (uint64_t)v9);
          v121 = v116;
          v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
          v123 = v249;
          if (v122(v9, 1, v249) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4((uint64_t)v9);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v241, v9, v123);
          }
          v124 = v244;
          v125 = v245;
          sub_21C3E359C(v243, v244);
          AssetInfo.releaseDate.getter(v124, v125, (uint64_t)v6);
          if (v122(v6, 1, v123) == 1)
          {
            v126 = v238;
            sub_21C458C18();
            sub_21C3F34B4((uint64_t)v6);
            v116 = v242;
          }
          else
          {
            v127 = v123;
            v116 = v242;
            v126 = v238;
            (*(void (**)(char *, char *, uint64_t))(v242 + 32))(v238, v6, v127);
          }
          v128 = v241;
          v129 = a1;
          if ((sub_21C458C48() & 1) != 0)
          {
            v130 = v128;
            v131 = v247;
            v132 = v248;
            sub_21C3E359C(&v246, v247);
            v133 = AssetInfo.seriesSortKey.getter(v131, v132);
            v135 = (v134 & 1) != 0 ? 0 : v133;
            v136 = v244;
            v137 = v245;
            sub_21C3E359C(v243, v244);
            v138 = AssetInfo.seriesSortKey.getter(v136, v137);
            LOBYTE(v137) = v139;
            v140 = *(void (**)(char *, uint64_t))(v242 + 8);
            v141 = v126;
            v142 = v249;
            v140(v141, v249);
            v140(v130, v142);
            v116 = v242;
            v143 = (v137 & 1) != 0 ? 0 : v138;
            v184 = v143 < v135;
            v9 = v237;
            v144 = v184;
          }
          else
          {
            v145 = v128;
            v144 = sub_21C458C30();
            v146 = *(void (**)(char *, uint64_t))(v116 + 8);
            v147 = v126;
            v148 = v249;
            v146(v147, v249);
            v146(v145, v148);
          }
          sub_21C3E2754((uint64_t)v243);
          sub_21C3E2754((uint64_t)&v246);
          a1 = v129;
          if ((v144 & 1) == 0)
            break;
          v149 = *v129;
          v6 = v239;
          if (!*a1)
            goto LABEL_188;
          v150 = v149 + v115;
          sub_21C3F349C((__int128 *)(v149 + v115 + 40), (uint64_t)&v246);
          v151 = *(_OWORD *)(v150 + 16);
          *(_OWORD *)(v150 + 40) = *(_OWORD *)v150;
          *(_OWORD *)(v150 + 56) = v151;
          *(_QWORD *)(v150 + 72) = *(_QWORD *)(v150 + 32);
          sub_21C3F349C(&v246, v150);
          v115 -= 40;
          if (v240 == ++v117)
            goto LABEL_78;
        }
        v6 = v239;
LABEL_78:
        v42 = v240 + 1;
        v115 = (uint64_t)v234 + 40;
        v41 = v232;
      }
      while (v240 + 1 != v231);
      v42 = v231;
      v38 = v227;
    }
    goto LABEL_102;
  }
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EC024(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;

  v2 = v1;
  v124 = a1;
  v3 = a1[1];
  result = sub_21C4594D0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_146;
    if (v3)
      return sub_21C3EFB64(0, v3, 1, v124);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_154;
  v108 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v115 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_111:
      v117 = v2;
      v107 = v8;
      if (v11 >= 2)
      {
        v100 = *v124;
        do
        {
          v101 = v11 - 2;
          if (v11 < 2)
            goto LABEL_141;
          if (!v100)
            goto LABEL_153;
          v102 = v10;
          v103 = *(_QWORD *)&v10[16 * v101 + 32];
          v104 = *(_QWORD *)&v10[16 * v11 + 24];
          sub_21C3F1B1C((char *)(v100 + 40 * v103), (char *)(v100 + 40 * *(_QWORD *)&v10[16 * v11 + 16]), v100 + 40 * v104, v115);
          if (v117)
            break;
          if (v104 < v103)
            goto LABEL_142;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v102 = sub_21C4397F0((uint64_t)v102);
          if (v101 >= *((_QWORD *)v102 + 2))
            goto LABEL_143;
          v105 = &v102[16 * v101 + 32];
          *(_QWORD *)v105 = v103;
          *((_QWORD *)v105 + 1) = v104;
          v106 = *((_QWORD *)v102 + 2);
          if (v11 > v106)
            goto LABEL_144;
          memmove(&v102[16 * v11 + 16], &v102[16 * v11 + 32], 16 * (v106 - v11));
          v10 = v102;
          *((_QWORD *)v102 + 2) = v106 - 1;
          v11 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v116 = v1;
    v107 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v116 = v1;
    v6 = v5 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v7 = sub_21C459068();
    *(_QWORD *)(v7 + 16) = v6;
    v107 = v7;
    v115 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v12 = v9++;
    v111 = v10;
    v112 = v12;
    if (v9 < v3)
    {
      v13 = *v124;
      sub_21C3E95B0(*v124 + 40 * v9, (uint64_t)&v121);
      v109 = v13;
      sub_21C3E95B0(v13 + 40 * v12, (uint64_t)v118);
      v14 = v122;
      v15 = v123;
      sub_21C3E359C(&v121, v122);
      AssetInfo.sequenceNumber.getter(v14, v15);
      if ((v16 & 0x100000000) != 0)
        sub_21C459248();
      v17 = v119;
      v18 = v120;
      sub_21C3E359C(v118, v119);
      AssetInfo.sequenceNumber.getter(v17, v18);
      if ((v19 & 0x100000000) != 0)
        sub_21C459248();
      v113 = sub_21C459260();
      sub_21C3E2754((uint64_t)v118);
      sub_21C3E2754((uint64_t)&v121);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          sub_21C3E95B0(v20 + 40, (uint64_t)&v121);
          sub_21C3E95B0(v20, (uint64_t)v118);
          v21 = v122;
          v22 = v123;
          sub_21C3E359C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v21, v22);
          if ((v23 & 0x100000000) != 0)
            sub_21C459248();
          v24 = v119;
          v25 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.sequenceNumber.getter(v24, v25);
          if ((v26 & 0x100000000) != 0)
            sub_21C459248();
          v27 = sub_21C459260();
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)&v121);
          if (((v113 ^ v27) & 1) != 0)
            break;
          ++v9;
          v20 += 40;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
        v12 = v112;
      }
      if ((v113 & 1) != 0)
      {
        if (v9 < v12)
          goto LABEL_147;
        if (v12 < v9)
        {
          v28 = v3;
          v29 = 40 * v9 - 40;
          v30 = 40 * v12;
          v31 = v9;
          v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v109)
                goto LABEL_152;
              v33 = v109 + v30;
              sub_21C3F349C((__int128 *)(v109 + v30), (uint64_t)&v121);
              v34 = *(_QWORD *)(v109 + v29 + 32);
              v35 = *(_OWORD *)(v109 + v29 + 16);
              *(_OWORD *)v33 = *(_OWORD *)(v109 + v29);
              *(_OWORD *)(v33 + 16) = v35;
              *(_QWORD *)(v33 + 32) = v34;
              sub_21C3F349C(&v121, v109 + v29);
            }
            ++v32;
            v29 -= 40;
            v30 += 40;
          }
          while (v32 < v31);
          v3 = v28;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_61;
    if (__OFSUB__(v9, v12))
      goto LABEL_145;
    if (v9 - v12 >= v108)
      goto LABEL_61;
    if (__OFADD__(v12, v108))
      goto LABEL_148;
    v36 = v12 + v108 >= v3 ? v3 : v12 + v108;
    if (v36 < v12)
      break;
    if (v9 != v36)
    {
      v37 = 40 * v9 - 40;
      v110 = v36;
      do
      {
        v38 = v12;
        v114 = v37;
        do
        {
          v39 = *v124 + v37;
          sub_21C3E95B0(v39 + 40, (uint64_t)&v121);
          sub_21C3E95B0(v39, (uint64_t)v118);
          v40 = v122;
          v41 = v123;
          sub_21C3E359C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v40, v41);
          if ((v42 & 0x100000000) != 0)
            sub_21C459248();
          v43 = v119;
          v44 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.sequenceNumber.getter(v43, v44);
          if ((v45 & 0x100000000) != 0)
            sub_21C459248();
          v46 = sub_21C459260();
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)&v121);
          if ((v46 & 1) == 0)
            break;
          v47 = *v124;
          if (!*v124)
            goto LABEL_150;
          v48 = v47 + v37;
          sub_21C3F349C((__int128 *)(v47 + v37 + 40), (uint64_t)&v121);
          v49 = *(_OWORD *)(v48 + 16);
          *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
          *(_OWORD *)(v48 + 56) = v49;
          *(_QWORD *)(v48 + 72) = *(_QWORD *)(v48 + 32);
          sub_21C3F349C(&v121, v48);
          v37 -= 40;
          ++v38;
        }
        while (v9 != v38);
        ++v9;
        v12 = v112;
        v37 = v114 + 40;
      }
      while (v9 != v110);
      v9 = v110;
    }
LABEL_61:
    if (v9 < v12)
      goto LABEL_140;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v10 = v111;
    else
      v10 = sub_21C4393FC(0, *((_QWORD *)v111 + 2) + 1, 1, v111);
    v51 = *((_QWORD *)v10 + 2);
    v50 = *((_QWORD *)v10 + 3);
    v11 = v51 + 1;
    if (v51 >= v50 >> 1)
      v10 = sub_21C4393FC((char *)(v50 > 1), v51 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v11;
    v52 = v10 + 32;
    v53 = &v10[16 * v51 + 32];
    *(_QWORD *)v53 = v12;
    *((_QWORD *)v53 + 1) = v9;
    if (v51)
    {
      while (1)
      {
        v54 = v11 - 1;
        if (v11 >= 4)
        {
          v59 = &v52[16 * v11];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_129;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_130;
          v66 = v11 - 2;
          v67 = &v52[16 * v11 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_132;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_135;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_139;
            v82 = v57 < v92;
            goto LABEL_98;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v83 = *((_QWORD *)v10 + 4);
            v84 = *((_QWORD *)v10 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_92;
          }
          v56 = *((_QWORD *)v10 + 4);
          v55 = *((_QWORD *)v10 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_131;
        v66 = v11 - 2;
        v72 = &v52[16 * v11 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_134;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_137;
        if (__OFADD__(v76, v81))
          goto LABEL_138;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_98:
          if (v82)
            v54 = v66;
          goto LABEL_100;
        }
LABEL_92:
        if ((v77 & 1) != 0)
          goto LABEL_133;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_136;
        if (v88 < v76)
          goto LABEL_15;
LABEL_100:
        v93 = v54 - 1;
        if (v54 - 1 >= v11)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!*v124)
          goto LABEL_151;
        v94 = v10;
        v95 = &v52[16 * v93];
        v96 = *(_QWORD *)v95;
        v97 = &v52[16 * v54];
        v98 = *((_QWORD *)v97 + 1);
        sub_21C3F1B1C((char *)(*v124 + 40 * *(_QWORD *)v95), (char *)(*v124 + 40 * *(_QWORD *)v97), *v124 + 40 * v98, v115);
        if (v116)
          goto LABEL_122;
        if (v98 < v96)
          goto LABEL_126;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_127;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v52[16 * v93 + 8] = v98;
        v99 = *((_QWORD *)v94 + 2);
        if (v54 >= v99)
          goto LABEL_128;
        v11 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        v10 = v94;
        *((_QWORD *)v94 + 2) = v99 - 1;
        if (v99 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v124[1];
    if (v9 >= v3)
    {
      v8 = v107;
      v2 = v116;
      goto LABEL_111;
    }
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EC988(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  BOOL v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  BOOL v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char v151;
  char *v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  char v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  _QWORD v242[3];
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;

  v3 = sub_21C3E344C(&qword_254078EC0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v219 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v228 = (uint64_t)&v219 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v219 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v219 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v219 - v18;
  v239 = sub_21C458C60();
  v248 = *(_QWORD *)(v239 - 8);
  v20 = MEMORY[0x24BDAC7A8](v239);
  v237 = (char *)&v219 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v241 = (char *)&v219 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v227 = (char *)&v219 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v229 = (char *)&v219 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v219 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v224 = (char *)&v219 - v31;
  v32 = a1[1];
  result = sub_21C4594D0();
  if (result >= v32)
  {
    if (v32 < 0)
      goto LABEL_190;
    if (v32)
      return sub_21C3EFD34(0, v32, 1, a1);
    return result;
  }
  if (v32 >= 0)
    v34 = v32;
  else
    v34 = v32 + 1;
  if (v32 < -1)
    goto LABEL_198;
  v225 = v14;
  v230 = result;
  v238 = v1;
  v222 = v30;
  if (v32 < 2)
  {
    v235 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    v223 = MEMORY[0x24BEE4AF8];
    if (v32 != 1)
    {
      v38 = (char *)MEMORY[0x24BEE4AF8];
      v41 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_156:
      if (v41 >= 2)
      {
        v212 = *a1;
        do
        {
          v213 = v41 - 2;
          if (v41 < 2)
            goto LABEL_185;
          if (!v212)
            goto LABEL_197;
          v214 = *(_QWORD *)&v38[16 * v213 + 32];
          v215 = *(_QWORD *)&v38[16 * v41 + 24];
          v216 = v238;
          sub_21C3F1F94((char *)(v212 + 40 * v214), (char *)(v212 + 40 * *(_QWORD *)&v38[16 * v41 + 16]), v212 + 40 * v215, v235);
          v238 = v216;
          if (v216)
            break;
          if (v215 < v214)
            goto LABEL_186;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v38 = sub_21C4397F0((uint64_t)v38);
          if (v213 >= *((_QWORD *)v38 + 2))
            goto LABEL_187;
          v217 = &v38[16 * v213 + 32];
          *(_QWORD *)v217 = v214;
          *((_QWORD *)v217 + 1) = v215;
          v218 = *((_QWORD *)v38 + 2);
          if (v41 > v218)
            goto LABEL_188;
          memmove(&v38[16 * v41 + 16], &v38[16 * v41 + 32], 16 * (v218 - v41));
          *((_QWORD *)v38 + 2) = v218 - 1;
          v41 = v218 - 1;
        }
        while (v218 > 2);
      }
LABEL_167:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v223 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v220 = v19;
    v221 = v17;
  }
  else
  {
    v220 = v19;
    v221 = v17;
    v35 = v34 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v36 = sub_21C459068();
    *(_QWORD *)(v36 + 16) = v35;
    v223 = v36;
    v235 = (char *)(v36 + 32);
  }
  v37 = 0;
  v38 = (char *)MEMORY[0x24BEE4AF8];
  v39 = (uint64_t)v6;
  v40 = (uint64_t)v9;
  v236 = v39;
  v240 = v9;
  while (1)
  {
    v42 = v37++;
    v232 = v38;
    v234 = v42;
    if (v37 >= v32)
    {
      v62 = v230;
    }
    else
    {
      v43 = *a1;
      v44 = v42;
      sub_21C3E95B0(*a1 + 40 * v37, (uint64_t)&v245);
      v231 = v43;
      sub_21C3E95B0(v43 + 40 * v44, (uint64_t)v242);
      v45 = v246;
      v46 = v247;
      sub_21C3E359C(&v245, v246);
      AssetInfo.seriesSortKey.getter(v45, v46);
      if ((v47 & 1) != 0
        && (v48 = v243, v49 = v244, sub_21C3E359C(v242, v243), AssetInfo.seriesSortKey.getter(v48, v49), (v50 & 1) != 0))
      {
        v63 = v246;
        v64 = v247;
        sub_21C3E359C(&v245, v246);
        v65 = (uint64_t)v220;
        AssetInfo.releaseDate.getter(v63, v64, (uint64_t)v220);
        v66 = v248;
        v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48);
        v68 = v239;
        if (v67(v65, 1, v239) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4(v65);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v224, v65, v68);
        }
        v69 = v243;
        v70 = v244;
        sub_21C3E359C(v242, v243);
        v71 = (uint64_t)v221;
        AssetInfo.releaseDate.getter(v69, v70, (uint64_t)v221);
        if (v67(v71, 1, v68) == 1)
        {
          v72 = v222;
          sub_21C458C18();
          sub_21C3F34B4(v71);
          v73 = v248;
        }
        else
        {
          v73 = v248;
          v72 = v222;
          (*(void (**)(char *, uint64_t, uint64_t))(v248 + 32))(v222, v71, v68);
        }
        v74 = v224;
        LODWORD(v233) = sub_21C458C30();
        v75 = *(void (**)(char *, uint64_t))(v73 + 8);
        v75(v72, v68);
        v75(v74, v68);
      }
      else
      {
        v51 = v246;
        v52 = v247;
        sub_21C3E359C(&v245, v246);
        v53 = AssetInfo.seriesSortKey.getter(v51, v52);
        if ((v54 & 1) != 0)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v53;
        v56 = v243;
        v57 = v244;
        sub_21C3E359C(v242, v243);
        v58 = AssetInfo.seriesSortKey.getter(v56, v57);
        v60 = (v59 & 1) == 0 && v58 < v55;
        v61 = v60;
        LODWORD(v233) = v61;
      }
      sub_21C3E2754((uint64_t)v242);
      sub_21C3E2754((uint64_t)&v245);
      v42 = v234;
      v37 = v234 + 2;
      v226 = v32;
      if (v234 + 2 < v32)
      {
        v76 = v231 + 40 * v234 + 40;
        while (1)
        {
          sub_21C3E95B0(v76 + 40, (uint64_t)&v245);
          sub_21C3E95B0(v76, (uint64_t)v242);
          v77 = v246;
          v78 = v247;
          sub_21C3E359C(&v245, v246);
          AssetInfo.seriesSortKey.getter(v77, v78);
          if ((v79 & 1) == 0)
            goto LABEL_41;
          v80 = v243;
          v81 = v244;
          sub_21C3E359C(v242, v243);
          AssetInfo.seriesSortKey.getter(v80, v81);
          if ((v82 & 1) != 0)
          {
            v94 = v37;
            v95 = v246;
            v96 = v247;
            sub_21C3E359C(&v245, v246);
            v97 = (uint64_t)v225;
            AssetInfo.releaseDate.getter(v95, v96, (uint64_t)v225);
            v98 = v97;
            v99 = v248;
            v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48);
            v101 = v239;
            if (v100(v98, 1, v239) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v98);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v229, v98, v101);
            }
            v102 = v243;
            v103 = v244;
            sub_21C3E359C(v242, v243);
            v104 = v228;
            AssetInfo.releaseDate.getter(v102, v103, v228);
            if (v100(v104, 1, v101) == 1)
            {
              v105 = v227;
              sub_21C458C18();
              sub_21C3F34B4(v104);
              v38 = v232;
              v106 = v248;
            }
            else
            {
              v106 = v248;
              v105 = v227;
              (*(void (**)(char *, uint64_t, uint64_t))(v248 + 32))(v227, v104, v101);
              v38 = v232;
            }
            v107 = v229;
            v108 = sub_21C458C30();
            v109 = v105;
            v93 = v108;
            v110 = *(void (**)(char *, uint64_t))(v106 + 8);
            v110(v109, v101);
            v110(v107, v101);
            v37 = v94;
            v32 = v226;
          }
          else
          {
LABEL_41:
            v83 = v246;
            v84 = v247;
            sub_21C3E359C(&v245, v246);
            v85 = AssetInfo.seriesSortKey.getter(v83, v84);
            v87 = (v86 & 1) != 0 ? 0x7FFFFFFFFFFFFFFFLL : v85;
            v88 = v243;
            v89 = v244;
            sub_21C3E359C(v242, v243);
            v90 = AssetInfo.seriesSortKey.getter(v88, v89);
            v92 = (v91 & 1) == 0 && v90 < v87;
            v93 = v92;
            v38 = v232;
          }
          sub_21C3E2754((uint64_t)v242);
          sub_21C3E2754((uint64_t)&v245);
          if (((v233 ^ v93) & 1) != 0)
            break;
          ++v37;
          v76 += 40;
          if (v32 == v37)
          {
            v37 = v32;
            break;
          }
        }
        v42 = v234;
      }
      v62 = v230;
      if ((v233 & 1) != 0)
      {
        if (v37 < v42)
          goto LABEL_191;
        if (v42 < v37)
        {
          v111 = 40 * v37 - 40;
          v112 = 40 * v42;
          v233 = v37;
          v113 = v42;
          do
          {
            if (v113 != --v37)
            {
              if (!v231)
                goto LABEL_196;
              v114 = v231 + v112;
              v115 = v231 + v111;
              sub_21C3F349C((__int128 *)(v231 + v112), (uint64_t)&v245);
              v116 = *(_QWORD *)(v115 + 32);
              v117 = *(_OWORD *)(v115 + 16);
              *(_OWORD *)v114 = *(_OWORD *)v115;
              *(_OWORD *)(v114 + 16) = v117;
              *(_QWORD *)(v114 + 32) = v116;
              sub_21C3F349C(&v245, v115);
              v62 = v230;
              v42 = v234;
            }
            ++v113;
            v111 -= 40;
            v112 += 40;
          }
          while (v113 < v37);
          v38 = v232;
          v37 = v233;
          v32 = v226;
        }
      }
    }
    if (v37 < v32)
    {
      if (__OFSUB__(v37, v42))
        goto LABEL_189;
      if (v37 - v42 < v62)
        break;
    }
LABEL_106:
    if (v37 < v42)
      goto LABEL_184;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v38 = sub_21C4393FC(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
    v158 = *((_QWORD *)v38 + 2);
    v157 = *((_QWORD *)v38 + 3);
    v41 = v158 + 1;
    if (v158 >= v157 >> 1)
      v38 = sub_21C4393FC((char *)(v157 > 1), v158 + 1, 1, v38);
    *((_QWORD *)v38 + 2) = v41;
    v159 = v38 + 32;
    v160 = &v38[16 * v158 + 32];
    *(_QWORD *)v160 = v234;
    *((_QWORD *)v160 + 1) = v37;
    if (v158)
    {
      v233 = v37;
      while (1)
      {
        v161 = v41 - 1;
        if (v41 >= 4)
        {
          v166 = &v159[16 * v41];
          v167 = *((_QWORD *)v166 - 8);
          v168 = *((_QWORD *)v166 - 7);
          v172 = __OFSUB__(v168, v167);
          v169 = v168 - v167;
          if (v172)
            goto LABEL_173;
          v171 = *((_QWORD *)v166 - 6);
          v170 = *((_QWORD *)v166 - 5);
          v172 = __OFSUB__(v170, v171);
          v164 = v170 - v171;
          v165 = v172;
          if (v172)
            goto LABEL_174;
          v173 = v41 - 2;
          v174 = &v159[16 * v41 - 32];
          v176 = *(_QWORD *)v174;
          v175 = *((_QWORD *)v174 + 1);
          v172 = __OFSUB__(v175, v176);
          v177 = v175 - v176;
          if (v172)
            goto LABEL_176;
          v172 = __OFADD__(v164, v177);
          v178 = v164 + v177;
          if (v172)
            goto LABEL_179;
          if (v178 >= v169)
          {
            v196 = &v159[16 * v161];
            v198 = *(_QWORD *)v196;
            v197 = *((_QWORD *)v196 + 1);
            v172 = __OFSUB__(v197, v198);
            v199 = v197 - v198;
            if (v172)
              goto LABEL_183;
            v189 = v164 < v199;
            goto LABEL_144;
          }
        }
        else
        {
          if (v41 != 3)
          {
            v190 = *((_QWORD *)v38 + 4);
            v191 = *((_QWORD *)v38 + 5);
            v172 = __OFSUB__(v191, v190);
            v183 = v191 - v190;
            v184 = v172;
            goto LABEL_138;
          }
          v163 = *((_QWORD *)v38 + 4);
          v162 = *((_QWORD *)v38 + 5);
          v172 = __OFSUB__(v162, v163);
          v164 = v162 - v163;
          v165 = v172;
        }
        if ((v165 & 1) != 0)
          goto LABEL_175;
        v173 = v41 - 2;
        v179 = &v159[16 * v41 - 32];
        v181 = *(_QWORD *)v179;
        v180 = *((_QWORD *)v179 + 1);
        v182 = __OFSUB__(v180, v181);
        v183 = v180 - v181;
        v184 = v182;
        if (v182)
          goto LABEL_178;
        v185 = &v159[16 * v161];
        v187 = *(_QWORD *)v185;
        v186 = *((_QWORD *)v185 + 1);
        v172 = __OFSUB__(v186, v187);
        v188 = v186 - v187;
        if (v172)
          goto LABEL_181;
        if (__OFADD__(v183, v188))
          goto LABEL_182;
        if (v183 + v188 >= v164)
        {
          v189 = v164 < v188;
LABEL_144:
          if (v189)
            v161 = v173;
          goto LABEL_146;
        }
LABEL_138:
        if ((v184 & 1) != 0)
          goto LABEL_177;
        v192 = &v159[16 * v161];
        v194 = *(_QWORD *)v192;
        v193 = *((_QWORD *)v192 + 1);
        v172 = __OFSUB__(v193, v194);
        v195 = v193 - v194;
        if (v172)
          goto LABEL_180;
        if (v195 < v183)
          goto LABEL_15;
LABEL_146:
        v200 = v161 - 1;
        if (v161 - 1 >= v41)
        {
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
        v201 = *a1;
        if (!*a1)
          goto LABEL_195;
        v202 = v38;
        v203 = a1;
        v204 = &v159[16 * v200];
        v205 = *(_QWORD *)v204;
        v206 = v159;
        v207 = v161;
        v208 = &v159[16 * v161];
        v209 = *((_QWORD *)v208 + 1);
        v210 = v238;
        sub_21C3F1F94((char *)(v201 + 40 * *(_QWORD *)v204), (char *)(v201 + 40 * *(_QWORD *)v208), v201 + 40 * v209, v235);
        v238 = v210;
        if (v210)
          goto LABEL_167;
        if (v209 < v205)
          goto LABEL_170;
        if (v207 > *((_QWORD *)v202 + 2))
          goto LABEL_171;
        *(_QWORD *)v204 = v205;
        *(_QWORD *)&v206[16 * v200 + 8] = v209;
        v211 = *((_QWORD *)v202 + 2);
        if (v207 >= v211)
          goto LABEL_172;
        v38 = v202;
        v41 = v211 - 1;
        memmove(v208, v208 + 16, 16 * (v211 - 1 - v207));
        v159 = v206;
        *((_QWORD *)v202 + 2) = v211 - 1;
        v60 = v211 > 2;
        a1 = v203;
        v40 = (uint64_t)v240;
        v37 = v233;
        if (!v60)
          goto LABEL_15;
      }
    }
    v41 = 1;
LABEL_15:
    v32 = a1[1];
    if (v37 >= v32)
      goto LABEL_156;
  }
  if (__OFADD__(v42, v62))
    goto LABEL_192;
  if (v42 + v62 >= v32)
    v118 = v32;
  else
    v118 = v42 + v62;
  if (v118 >= v42)
  {
    if (v37 != v118)
    {
      v119 = 40 * v37 - 40;
      v231 = v118;
      do
      {
        v120 = v42;
        v233 = v119;
        do
        {
          v121 = v37;
          v122 = *a1 + v119;
          sub_21C3E95B0(v122 + 40, (uint64_t)&v245);
          sub_21C3E95B0(v122, (uint64_t)v242);
          v123 = v246;
          v124 = v247;
          sub_21C3E359C(&v245, v246);
          AssetInfo.seriesSortKey.getter(v123, v124);
          if ((v125 & 1) != 0
            && (v126 = v243,
                v127 = v244,
                sub_21C3E359C(v242, v243),
                AssetInfo.seriesSortKey.getter(v126, v127),
                (v128 & 1) != 0))
          {
            v140 = v246;
            v141 = v247;
            sub_21C3E359C(&v245, v246);
            AssetInfo.releaseDate.getter(v140, v141, v40);
            v142 = v248;
            v143 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48);
            v144 = v239;
            if (v143(v40, 1, v239) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v40);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v241, v40, v144);
            }
            v145 = v243;
            v146 = v244;
            sub_21C3E359C(v242, v243);
            v147 = v236;
            AssetInfo.releaseDate.getter(v145, v146, v236);
            if (v143(v147, 1, v144) == 1)
            {
              v148 = v237;
              sub_21C458C18();
              sub_21C3F34B4(v147);
              v149 = v248;
            }
            else
            {
              v149 = v248;
              v148 = v237;
              (*(void (**)(char *, uint64_t, uint64_t))(v248 + 32))(v237, v147, v144);
            }
            v150 = v241;
            v151 = sub_21C458C30();
            v152 = v148;
            v139 = v151;
            v153 = *(void (**)(char *, uint64_t))(v149 + 8);
            v153(v152, v144);
            v153(v150, v144);
            v40 = (uint64_t)v240;
          }
          else
          {
            v129 = v246;
            v130 = v247;
            sub_21C3E359C(&v245, v246);
            v131 = AssetInfo.seriesSortKey.getter(v129, v130);
            if ((v132 & 1) != 0)
              v133 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            v134 = v243;
            v135 = v244;
            sub_21C3E359C(v242, v243);
            v136 = AssetInfo.seriesSortKey.getter(v134, v135);
            v139 = (v137 & 1) == 0 && v136 < v133;
          }
          sub_21C3E2754((uint64_t)v242);
          sub_21C3E2754((uint64_t)&v245);
          v37 = v121;
          if (!v139)
            break;
          v154 = *a1;
          if (!*a1)
            goto LABEL_194;
          v155 = v154 + v119;
          sub_21C3F349C((__int128 *)(v154 + v119 + 40), (uint64_t)&v245);
          v156 = *(_OWORD *)(v155 + 16);
          *(_OWORD *)(v155 + 40) = *(_OWORD *)v155;
          *(_OWORD *)(v155 + 56) = v156;
          *(_QWORD *)(v155 + 72) = *(_QWORD *)(v155 + 32);
          sub_21C3F349C(&v245, v155);
          v119 -= 40;
          ++v120;
        }
        while (v121 != v120);
        v37 = v121 + 1;
        v42 = v234;
        v119 = v233 + 40;
      }
      while (v121 + 1 != v231);
      v37 = v231;
      v38 = v232;
    }
    goto LABEL_106;
  }
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
LABEL_198:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3ED90C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;

  v2 = v1;
  v124 = a1;
  v3 = a1[1];
  result = sub_21C4594D0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_146;
    if (v3)
      return sub_21C3F00DC(0, v3, 1, v124);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_154;
  v108 = result;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v115 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_111:
      v117 = v2;
      v107 = v8;
      if (v11 >= 2)
      {
        v100 = *v124;
        do
        {
          v101 = v11 - 2;
          if (v11 < 2)
            goto LABEL_141;
          if (!v100)
            goto LABEL_153;
          v102 = v10;
          v103 = *(_QWORD *)&v10[16 * v101 + 32];
          v104 = *(_QWORD *)&v10[16 * v11 + 24];
          sub_21C3F27B0((char *)(v100 + 40 * v103), (char *)(v100 + 40 * *(_QWORD *)&v10[16 * v11 + 16]), v100 + 40 * v104, v115);
          if (v117)
            break;
          if (v104 < v103)
            goto LABEL_142;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v102 = sub_21C4397F0((uint64_t)v102);
          if (v101 >= *((_QWORD *)v102 + 2))
            goto LABEL_143;
          v105 = &v102[16 * v101 + 32];
          *(_QWORD *)v105 = v103;
          *((_QWORD *)v105 + 1) = v104;
          v106 = *((_QWORD *)v102 + 2);
          if (v11 > v106)
            goto LABEL_144;
          memmove(&v102[16 * v11 + 16], &v102[16 * v11 + 32], 16 * (v106 - v11));
          v10 = v102;
          *((_QWORD *)v102 + 2) = v106 - 1;
          v11 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_122:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v116 = v1;
    v107 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v116 = v1;
    v6 = v5 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v7 = sub_21C459068();
    *(_QWORD *)(v7 + 16) = v6;
    v107 = v7;
    v115 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v12 = v9++;
    v111 = v10;
    v112 = v12;
    if (v9 < v3)
    {
      v13 = *v124;
      sub_21C3E95B0(*v124 + 40 * v9, (uint64_t)&v121);
      v109 = v13;
      sub_21C3E95B0(v13 + 40 * v12, (uint64_t)v118);
      v14 = v122;
      v15 = v123;
      sub_21C3E359C(&v121, v122);
      AssetInfo.sequenceNumber.getter(v14, v15);
      if ((v16 & 0x100000000) != 0)
        sub_21C459248();
      v17 = v119;
      v18 = v120;
      sub_21C3E359C(v118, v119);
      AssetInfo.sequenceNumber.getter(v17, v18);
      if ((v19 & 0x100000000) != 0)
        sub_21C459248();
      v113 = sub_21C459260();
      sub_21C3E2754((uint64_t)v118);
      sub_21C3E2754((uint64_t)&v121);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v20 = v109 + 40 * v12 + 40;
        while (1)
        {
          sub_21C3E95B0(v20 + 40, (uint64_t)&v121);
          sub_21C3E95B0(v20, (uint64_t)v118);
          v21 = v122;
          v22 = v123;
          sub_21C3E359C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v21, v22);
          if ((v23 & 0x100000000) != 0)
            sub_21C459248();
          v24 = v119;
          v25 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.sequenceNumber.getter(v24, v25);
          if ((v26 & 0x100000000) != 0)
            sub_21C459248();
          v27 = sub_21C459260();
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)&v121);
          if (((v113 ^ v27) & 1) != 0)
            break;
          ++v9;
          v20 += 40;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
        v12 = v112;
      }
      if ((v113 & 1) != 0)
      {
        if (v9 < v12)
          goto LABEL_147;
        if (v12 < v9)
        {
          v28 = v3;
          v29 = 40 * v9 - 40;
          v30 = 40 * v12;
          v31 = v9;
          v32 = v12;
          do
          {
            if (v32 != --v31)
            {
              if (!v109)
                goto LABEL_152;
              v33 = v109 + v30;
              sub_21C3F349C((__int128 *)(v109 + v30), (uint64_t)&v121);
              v34 = *(_QWORD *)(v109 + v29 + 32);
              v35 = *(_OWORD *)(v109 + v29 + 16);
              *(_OWORD *)v33 = *(_OWORD *)(v109 + v29);
              *(_OWORD *)(v33 + 16) = v35;
              *(_QWORD *)(v33 + 32) = v34;
              sub_21C3F349C(&v121, v109 + v29);
            }
            ++v32;
            v29 -= 40;
            v30 += 40;
          }
          while (v32 < v31);
          v3 = v28;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_61;
    if (__OFSUB__(v9, v12))
      goto LABEL_145;
    if (v9 - v12 >= v108)
      goto LABEL_61;
    if (__OFADD__(v12, v108))
      goto LABEL_148;
    v36 = v12 + v108 >= v3 ? v3 : v12 + v108;
    if (v36 < v12)
      break;
    if (v9 != v36)
    {
      v37 = 40 * v9 - 40;
      v110 = v36;
      do
      {
        v38 = v12;
        v114 = v37;
        do
        {
          v39 = *v124 + v37;
          sub_21C3E95B0(v39 + 40, (uint64_t)&v121);
          sub_21C3E95B0(v39, (uint64_t)v118);
          v40 = v122;
          v41 = v123;
          sub_21C3E359C(&v121, v122);
          AssetInfo.sequenceNumber.getter(v40, v41);
          if ((v42 & 0x100000000) != 0)
            sub_21C459248();
          v43 = v119;
          v44 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.sequenceNumber.getter(v43, v44);
          if ((v45 & 0x100000000) != 0)
            sub_21C459248();
          v46 = sub_21C459260();
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)&v121);
          if ((v46 & 1) == 0)
            break;
          v47 = *v124;
          if (!*v124)
            goto LABEL_150;
          v48 = v47 + v37;
          sub_21C3F349C((__int128 *)(v47 + v37 + 40), (uint64_t)&v121);
          v49 = *(_OWORD *)(v48 + 16);
          *(_OWORD *)(v48 + 40) = *(_OWORD *)v48;
          *(_OWORD *)(v48 + 56) = v49;
          *(_QWORD *)(v48 + 72) = *(_QWORD *)(v48 + 32);
          sub_21C3F349C(&v121, v48);
          v37 -= 40;
          ++v38;
        }
        while (v9 != v38);
        ++v9;
        v12 = v112;
        v37 = v114 + 40;
      }
      while (v9 != v110);
      v9 = v110;
    }
LABEL_61:
    if (v9 < v12)
      goto LABEL_140;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v10 = v111;
    else
      v10 = sub_21C4393FC(0, *((_QWORD *)v111 + 2) + 1, 1, v111);
    v51 = *((_QWORD *)v10 + 2);
    v50 = *((_QWORD *)v10 + 3);
    v11 = v51 + 1;
    if (v51 >= v50 >> 1)
      v10 = sub_21C4393FC((char *)(v50 > 1), v51 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v11;
    v52 = v10 + 32;
    v53 = &v10[16 * v51 + 32];
    *(_QWORD *)v53 = v12;
    *((_QWORD *)v53 + 1) = v9;
    if (v51)
    {
      while (1)
      {
        v54 = v11 - 1;
        if (v11 >= 4)
        {
          v59 = &v52[16 * v11];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_129;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_130;
          v66 = v11 - 2;
          v67 = &v52[16 * v11 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_132;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_135;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_139;
            v82 = v57 < v92;
            goto LABEL_98;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v83 = *((_QWORD *)v10 + 4);
            v84 = *((_QWORD *)v10 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_92;
          }
          v56 = *((_QWORD *)v10 + 4);
          v55 = *((_QWORD *)v10 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_131;
        v66 = v11 - 2;
        v72 = &v52[16 * v11 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_134;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_137;
        if (__OFADD__(v76, v81))
          goto LABEL_138;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_98:
          if (v82)
            v54 = v66;
          goto LABEL_100;
        }
LABEL_92:
        if ((v77 & 1) != 0)
          goto LABEL_133;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_136;
        if (v88 < v76)
          goto LABEL_15;
LABEL_100:
        v93 = v54 - 1;
        if (v54 - 1 >= v11)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!*v124)
          goto LABEL_151;
        v94 = v10;
        v95 = &v52[16 * v93];
        v96 = *(_QWORD *)v95;
        v97 = &v52[16 * v54];
        v98 = *((_QWORD *)v97 + 1);
        sub_21C3F27B0((char *)(*v124 + 40 * *(_QWORD *)v95), (char *)(*v124 + 40 * *(_QWORD *)v97), *v124 + 40 * v98, v115);
        if (v116)
          goto LABEL_122;
        if (v98 < v96)
          goto LABEL_126;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_127;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v52[16 * v93 + 8] = v98;
        v99 = *((_QWORD *)v94 + 2);
        if (v54 >= v99)
          goto LABEL_128;
        v11 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        v10 = v94;
        *((_QWORD *)v94 + 2) = v99 - 1;
        if (v99 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v124[1];
    if (v9 >= v3)
    {
      v8 = v107;
      v2 = v116;
      goto LABEL_111;
    }
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EE2B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  char v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  _QWORD v240[3];
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;

  v3 = sub_21C3E344C(&qword_254078EC0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v217 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v237 = (uint64_t)&v217 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v225 = (uint64_t)&v217 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v224 = (uint64_t)&v217 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v217 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v217 - v16;
  v231 = sub_21C458C60();
  v18 = *(_QWORD *)(v231 - 8);
  v19 = MEMORY[0x24BDAC7A8](v231);
  v21 = (char *)&v217 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v239 = (char *)&v217 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v217 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v227 = (char *)&v217 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v221 = (char *)&v217 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v222 = (char *)&v217 - v31;
  v32 = a1[1];
  result = sub_21C4594D0();
  v228 = result;
  if (result >= v32)
  {
    if (v32 < 0)
      goto LABEL_186;
    if (v32)
      return sub_21C3F02C4(0, v32, 1, a1);
    return result;
  }
  if (v32 >= 0)
    v34 = v32;
  else
    v34 = v32 + 1;
  if (v32 < -1)
    goto LABEL_194;
  v235 = v21;
  v236 = v6;
  v246 = v18;
  v238 = v1;
  v223 = v26;
  if (v32 < 2)
  {
    v37 = MEMORY[0x24BEE4AF8];
    v233 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v32 != 1)
    {
      v42 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v39 = (char *)MEMORY[0x24BEE4AF8];
LABEL_151:
      v220 = v37;
      if (v42 >= 2)
      {
        v210 = *a1;
        do
        {
          v211 = v42 - 2;
          if (v42 < 2)
            goto LABEL_181;
          if (!v210)
            goto LABEL_193;
          v212 = *(_QWORD *)&v39[16 * v211 + 32];
          v213 = *(_QWORD *)&v39[16 * v42 + 24];
          v214 = v238;
          sub_21C3F2C58((char *)(v210 + 40 * v212), (char *)(v210 + 40 * *(_QWORD *)&v39[16 * v42 + 16]), v210 + 40 * v213, v233);
          v238 = v214;
          if (v214)
            break;
          if (v213 < v212)
            goto LABEL_182;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v39 = sub_21C4397F0((uint64_t)v39);
          if (v211 >= *((_QWORD *)v39 + 2))
            goto LABEL_183;
          v215 = &v39[16 * v211 + 32];
          *(_QWORD *)v215 = v212;
          *((_QWORD *)v215 + 1) = v213;
          v216 = *((_QWORD *)v39 + 2);
          if (v42 > v216)
            goto LABEL_184;
          memmove(&v39[16 * v42 + 16], &v39[16 * v42 + 32], 16 * (v216 - v42));
          *((_QWORD *)v39 + 2) = v216 - 1;
          v42 = v216 - 1;
        }
        while (v216 > 2);
      }
LABEL_162:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v220 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v217 = v17;
    v218 = v15;
    v220 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v217 = v17;
    v218 = v15;
    v35 = v34 >> 1;
    sub_21C3E344C(&qword_25527A240);
    v36 = sub_21C459068();
    *(_QWORD *)(v36 + 16) = v35;
    v220 = v36;
    v233 = (char *)(v36 + 32);
  }
  v38 = 0;
  v39 = (char *)MEMORY[0x24BEE4AF8];
  v40 = v231;
  v41 = v228;
  while (1)
  {
    v43 = v38;
    v44 = v38 + 1;
    v232 = v38;
    if (v38 + 1 < v32)
    {
      v45 = *a1;
      v46 = v38;
      sub_21C3E95B0(*a1 + 40 * v44, (uint64_t)&v243);
      v226 = v45;
      sub_21C3E95B0(v45 + 40 * v46, (uint64_t)v240);
      v47 = v244;
      v48 = v245;
      sub_21C3E359C(&v243, v244);
      AssetInfo.seriesSortKey.getter(v47, v48);
      if ((v49 & 1) != 0
        && (v50 = v241, v51 = v242, sub_21C3E359C(v240, v241), AssetInfo.seriesSortKey.getter(v50, v51), (v52 & 1) != 0))
      {
        v65 = v244;
        v66 = v245;
        sub_21C3E359C(&v243, v244);
        v67 = v40;
        v68 = (uint64_t)v217;
        AssetInfo.releaseDate.getter(v65, v66, (uint64_t)v217);
        v69 = v246;
        v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
        if (v70(v68, 1, v67) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4(v68);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v222, v68, v67);
        }
        v71 = v241;
        v72 = v242;
        sub_21C3E359C(v240, v241);
        v73 = (uint64_t)v218;
        AssetInfo.releaseDate.getter(v71, v72, (uint64_t)v218);
        if (v70(v73, 1, v67) == 1)
        {
          v74 = v221;
          sub_21C458C18();
          sub_21C3F34B4(v73);
          v40 = v67;
          v75 = v246;
        }
        else
        {
          v75 = v246;
          v74 = v221;
          (*(void (**)(char *, uint64_t, uint64_t))(v246 + 32))(v221, v73, v67);
          v40 = v67;
        }
        v76 = v222;
        LODWORD(v230) = sub_21C458C3C();
        v77 = *(void (**)(char *, uint64_t))(v75 + 8);
        v77(v74, v40);
        v77(v76, v40);
        v41 = v228;
      }
      else
      {
        v53 = v244;
        v54 = v245;
        sub_21C3E359C(&v243, v244);
        v55 = AssetInfo.seriesSortKey.getter(v53, v54);
        v57 = v56;
        v59 = v241;
        v58 = v242;
        sub_21C3E359C(v240, v241);
        v60 = AssetInfo.seriesSortKey.getter(v59, v58);
        v62 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v61 & 1) == 0)
          v62 = v60;
        v64 = (v57 & 1) == 0 && v55 < v62;
        LODWORD(v230) = v64;
      }
      sub_21C3E2754((uint64_t)v240);
      sub_21C3E2754((uint64_t)&v243);
      v43 = v232;
      v44 = v232 + 2;
      if (v232 + 2 < v32)
      {
        v78 = v226 + 40 * v232 + 40;
        v229 = v32;
        while (1)
        {
          v234 = v44;
          sub_21C3E95B0(v78 + 40, (uint64_t)&v243);
          sub_21C3E95B0(v78, (uint64_t)v240);
          v79 = v244;
          v80 = v245;
          sub_21C3E359C(&v243, v244);
          AssetInfo.seriesSortKey.getter(v79, v80);
          if ((v81 & 1) == 0)
            goto LABEL_39;
          v82 = v241;
          v83 = v242;
          sub_21C3E359C(v240, v241);
          AssetInfo.seriesSortKey.getter(v82, v83);
          if ((v84 & 1) != 0)
          {
            v97 = v244;
            v98 = v245;
            sub_21C3E359C(&v243, v244);
            v99 = v224;
            AssetInfo.releaseDate.getter(v97, v98, v224);
            v100 = v99;
            v101 = v246;
            v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
            if (v102(v100, 1, v40) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v100);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v227, v100, v40);
            }
            v32 = v229;
            v103 = v241;
            v104 = v242;
            sub_21C3E359C(v240, v241);
            v105 = v225;
            AssetInfo.releaseDate.getter(v103, v104, v225);
            if (v102(v105, 1, v40) == 1)
            {
              v106 = v223;
              sub_21C458C18();
              sub_21C3F34B4(v105);
              v107 = v246;
            }
            else
            {
              v107 = v246;
              v106 = v223;
              (*(void (**)(char *, uint64_t, uint64_t))(v246 + 32))(v223, v105, v40);
            }
            v108 = v227;
            v96 = sub_21C458C3C();
            v109 = *(void (**)(char *, uint64_t))(v107 + 8);
            v109(v106, v40);
            v109(v108, v40);
            v41 = v228;
          }
          else
          {
LABEL_39:
            v85 = v244;
            v86 = v245;
            sub_21C3E359C(&v243, v244);
            v87 = AssetInfo.seriesSortKey.getter(v85, v86);
            v89 = v88;
            v90 = v241;
            v91 = v242;
            sub_21C3E359C(v240, v241);
            v92 = AssetInfo.seriesSortKey.getter(v90, v91);
            v94 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v93 & 1) == 0)
              v94 = v92;
            v95 = (v89 & 1) == 0 && v87 < v94;
            v96 = v95;
            v32 = v229;
          }
          sub_21C3E2754((uint64_t)v240);
          sub_21C3E2754((uint64_t)&v243);
          v44 = v234;
          if (((v230 ^ v96) & 1) != 0)
            break;
          v44 = v234 + 1;
          v78 += 40;
          if (v32 == v234 + 1)
          {
            v44 = v32;
            break;
          }
        }
        v43 = v232;
      }
      if ((v230 & 1) != 0)
      {
        if (v44 < v43)
          goto LABEL_187;
        if (v43 < v44)
        {
          v229 = v32;
          v219 = v39;
          v110 = 40 * v44 - 40;
          v111 = 40 * v43;
          v112 = v44;
          v113 = v43;
          do
          {
            if (v113 != --v44)
            {
              if (!v226)
                goto LABEL_192;
              v114 = v226 + v111;
              v115 = v226 + v110;
              sub_21C3F349C((__int128 *)(v226 + v111), (uint64_t)&v243);
              v116 = *(_QWORD *)(v115 + 32);
              v117 = *(_OWORD *)(v115 + 16);
              *(_OWORD *)v114 = *(_OWORD *)v115;
              *(_OWORD *)(v114 + 16) = v117;
              *(_QWORD *)(v114 + 32) = v116;
              sub_21C3F349C(&v243, v115);
              v43 = v232;
            }
            ++v113;
            v110 -= 40;
            v111 += 40;
          }
          while (v113 < v44);
          v39 = v219;
          v41 = v228;
          v44 = v112;
          v32 = v229;
        }
      }
    }
    if (v44 >= v32)
      goto LABEL_102;
    if (__OFSUB__(v44, v43))
      goto LABEL_185;
    if (v44 - v43 >= v41)
      goto LABEL_102;
    if (__OFADD__(v43, v41))
      goto LABEL_188;
    v118 = v43 + v41 >= v32 ? v32 : v43 + v41;
    if (v118 < v43)
      break;
    if (v44 != v118)
    {
      v219 = v39;
      v119 = 40 * v44 - 40;
      v230 = v118;
      do
      {
        v120 = v43;
        v234 = v119;
        do
        {
          v121 = v44;
          v122 = *a1 + v119;
          sub_21C3E95B0(v122 + 40, (uint64_t)&v243);
          sub_21C3E95B0(v122, (uint64_t)v240);
          v123 = v244;
          v124 = v245;
          sub_21C3E359C(&v243, v244);
          AssetInfo.seriesSortKey.getter(v123, v124);
          if ((v125 & 1) != 0
            && (v126 = v241,
                v127 = v242,
                sub_21C3E359C(v240, v241),
                AssetInfo.seriesSortKey.getter(v126, v127),
                (v128 & 1) != 0))
          {
            v141 = v244;
            v142 = v245;
            sub_21C3E359C(&v243, v244);
            v143 = v141;
            v144 = v237;
            AssetInfo.releaseDate.getter(v143, v142, v237);
            v145 = v246;
            v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48);
            if (v146(v144, 1, v40) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v144);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v239, v144, v40);
            }
            v147 = v241;
            v148 = v242;
            sub_21C3E359C(v240, v241);
            v149 = (uint64_t)v236;
            AssetInfo.releaseDate.getter(v147, v148, (uint64_t)v236);
            if (v146(v149, 1, v40) == 1)
            {
              v150 = v235;
              sub_21C458C18();
              sub_21C3F34B4(v149);
              v151 = v246;
            }
            else
            {
              v151 = v246;
              v150 = v235;
              (*(void (**)(char *, uint64_t, uint64_t))(v246 + 32))(v235, v149, v40);
            }
            v152 = v239;
            v140 = sub_21C458C3C();
            v153 = *(void (**)(char *, uint64_t))(v151 + 8);
            v153(v150, v40);
            v153(v152, v40);
          }
          else
          {
            v129 = v244;
            v130 = v245;
            sub_21C3E359C(&v243, v244);
            v131 = AssetInfo.seriesSortKey.getter(v129, v130);
            v133 = v132;
            v134 = v241;
            v135 = v242;
            sub_21C3E359C(v240, v241);
            v136 = AssetInfo.seriesSortKey.getter(v134, v135);
            v138 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v137 & 1) == 0)
              v138 = v136;
            v140 = (v133 & 1) == 0 && v131 < v138;
          }
          sub_21C3E2754((uint64_t)v240);
          sub_21C3E2754((uint64_t)&v243);
          v44 = v121;
          if ((v140 & 1) == 0)
            break;
          v154 = *a1;
          if (!*a1)
            goto LABEL_190;
          v155 = v154 + v119;
          sub_21C3F349C((__int128 *)(v154 + v119 + 40), (uint64_t)&v243);
          v156 = *(_OWORD *)(v155 + 16);
          *(_OWORD *)(v155 + 40) = *(_OWORD *)v155;
          *(_OWORD *)(v155 + 56) = v156;
          *(_QWORD *)(v155 + 72) = *(_QWORD *)(v155 + 32);
          sub_21C3F349C(&v243, v155);
          v119 -= 40;
          ++v120;
        }
        while (v121 != v120);
        v44 = v121 + 1;
        v119 = v234 + 40;
        v43 = v232;
      }
      while (v121 + 1 != v230);
      v44 = v230;
      v39 = v219;
    }
LABEL_102:
    if (v44 < v43)
      goto LABEL_180;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v39 = sub_21C4393FC(0, *((_QWORD *)v39 + 2) + 1, 1, v39);
    v158 = *((_QWORD *)v39 + 2);
    v157 = *((_QWORD *)v39 + 3);
    v42 = v158 + 1;
    if (v158 >= v157 >> 1)
      v39 = sub_21C4393FC((char *)(v157 > 1), v158 + 1, 1, v39);
    *((_QWORD *)v39 + 2) = v42;
    v159 = v39 + 32;
    v160 = &v39[16 * v158 + 32];
    *(_QWORD *)v160 = v232;
    *((_QWORD *)v160 + 1) = v44;
    v234 = v44;
    if (v158)
    {
      while (1)
      {
        v161 = v42 - 1;
        if (v42 >= 4)
        {
          v166 = &v159[16 * v42];
          v167 = *((_QWORD *)v166 - 8);
          v168 = *((_QWORD *)v166 - 7);
          v172 = __OFSUB__(v168, v167);
          v169 = v168 - v167;
          if (v172)
            goto LABEL_169;
          v171 = *((_QWORD *)v166 - 6);
          v170 = *((_QWORD *)v166 - 5);
          v172 = __OFSUB__(v170, v171);
          v164 = v170 - v171;
          v165 = v172;
          if (v172)
            goto LABEL_170;
          v173 = v42 - 2;
          v174 = &v159[16 * v42 - 32];
          v176 = *(_QWORD *)v174;
          v175 = *((_QWORD *)v174 + 1);
          v172 = __OFSUB__(v175, v176);
          v177 = v175 - v176;
          if (v172)
            goto LABEL_172;
          v172 = __OFADD__(v164, v177);
          v178 = v164 + v177;
          if (v172)
            goto LABEL_175;
          if (v178 >= v169)
          {
            v196 = &v159[16 * v161];
            v198 = *(_QWORD *)v196;
            v197 = *((_QWORD *)v196 + 1);
            v172 = __OFSUB__(v197, v198);
            v199 = v197 - v198;
            if (v172)
              goto LABEL_179;
            v189 = v164 < v199;
            goto LABEL_139;
          }
        }
        else
        {
          if (v42 != 3)
          {
            v190 = *((_QWORD *)v39 + 4);
            v191 = *((_QWORD *)v39 + 5);
            v172 = __OFSUB__(v191, v190);
            v183 = v191 - v190;
            v184 = v172;
            goto LABEL_133;
          }
          v163 = *((_QWORD *)v39 + 4);
          v162 = *((_QWORD *)v39 + 5);
          v172 = __OFSUB__(v162, v163);
          v164 = v162 - v163;
          v165 = v172;
        }
        if ((v165 & 1) != 0)
          goto LABEL_171;
        v173 = v42 - 2;
        v179 = &v159[16 * v42 - 32];
        v181 = *(_QWORD *)v179;
        v180 = *((_QWORD *)v179 + 1);
        v182 = __OFSUB__(v180, v181);
        v183 = v180 - v181;
        v184 = v182;
        if (v182)
          goto LABEL_174;
        v185 = &v159[16 * v161];
        v187 = *(_QWORD *)v185;
        v186 = *((_QWORD *)v185 + 1);
        v172 = __OFSUB__(v186, v187);
        v188 = v186 - v187;
        if (v172)
          goto LABEL_177;
        if (__OFADD__(v183, v188))
          goto LABEL_178;
        if (v183 + v188 >= v164)
        {
          v189 = v164 < v188;
LABEL_139:
          if (v189)
            v161 = v173;
          goto LABEL_141;
        }
LABEL_133:
        if ((v184 & 1) != 0)
          goto LABEL_173;
        v192 = &v159[16 * v161];
        v194 = *(_QWORD *)v192;
        v193 = *((_QWORD *)v192 + 1);
        v172 = __OFSUB__(v193, v194);
        v195 = v193 - v194;
        if (v172)
          goto LABEL_176;
        if (v195 < v183)
          goto LABEL_15;
LABEL_141:
        v200 = v161 - 1;
        if (v161 - 1 >= v42)
        {
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
          goto LABEL_189;
        }
        v201 = a1;
        v202 = *a1;
        if (!*a1)
          goto LABEL_191;
        v203 = v39;
        v204 = &v159[16 * v200];
        v205 = *(_QWORD *)v204;
        v206 = &v159[16 * v161];
        v207 = *((_QWORD *)v206 + 1);
        v208 = v238;
        sub_21C3F2C58((char *)(v202 + 40 * *(_QWORD *)v204), (char *)(v202 + 40 * *(_QWORD *)v206), v202 + 40 * v207, v233);
        v238 = v208;
        if (v208)
          goto LABEL_162;
        if (v207 < v205)
          goto LABEL_166;
        if (v161 > *((_QWORD *)v203 + 2))
          goto LABEL_167;
        *(_QWORD *)v204 = v205;
        *(_QWORD *)&v159[16 * v200 + 8] = v207;
        v209 = *((_QWORD *)v203 + 2);
        if (v161 >= v209)
          goto LABEL_168;
        v39 = v203;
        v42 = v209 - 1;
        memmove(&v159[16 * v161], v206 + 16, 16 * (v209 - 1 - v161));
        *((_QWORD *)v203 + 2) = v209 - 1;
        a1 = v201;
        v40 = v231;
        if (v209 <= 2)
          goto LABEL_15;
      }
    }
    v42 = 1;
LABEL_15:
    v32 = a1[1];
    v38 = v234;
    v41 = v228;
    if (v234 >= v32)
    {
      v37 = v220;
      goto LABEL_151;
    }
  }
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C3EF260(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v6 = 40 * a3 - 40;
LABEL_5:
    v7 = v25;
    v8 = v6;
    while (1)
    {
      v9 = *a4 + v8;
      sub_21C3E95B0(v9 + 40, (uint64_t)&v22);
      sub_21C3E95B0(v9, (uint64_t)v19);
      v10 = v23;
      v11 = v24;
      sub_21C3E359C(&v22, v23);
      AssetInfo.title.getter(v10, v11);
      v12 = v20;
      v13 = v21;
      sub_21C3E359C(v19, v20);
      AssetInfo.title.getter(v12, v13);
      sub_21C3E8EB0();
      v14 = sub_21C4592B4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21C3E2754((uint64_t)v19);
      result = sub_21C3E2754((uint64_t)&v22);
      if (v14 != -1)
      {
LABEL_4:
        ++v5;
        v6 += 40;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
      v15 = *a4;
      if (!*a4)
        break;
      v16 = v15 + v8;
      sub_21C3F349C((__int128 *)(v15 + v8 + 40), (uint64_t)&v22);
      v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 72) = *(_QWORD *)(v16 + 32);
      result = sub_21C3F349C(&v22, v16);
      v8 -= 40;
      if (v5 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3EF408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v53 = a1;
  v7 = sub_21C3E344C(&qword_254078EC0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v57 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v51 - v10;
  v12 = sub_21C458C60();
  v65 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v51 - v16;
  v52 = a2;
  if (a3 != a2)
  {
    v17 = 40 * a3 - 40;
    v55 = v11;
LABEL_5:
    v18 = v53;
    v54 = v17;
    while (1)
    {
      v19 = *a4 + v17;
      sub_21C3E95B0(v19 + 40, (uint64_t)&v62);
      sub_21C3E95B0(v19, (uint64_t)v59);
      v20 = v63;
      v21 = v64;
      sub_21C3E359C(&v62, v63);
      AssetInfo.seriesSortKey.getter(v20, v21);
      if ((v22 & 1) != 0
        && (v23 = v60, v24 = v61, sub_21C3E359C(v59, v60), AssetInfo.seriesSortKey.getter(v23, v24), (v25 & 1) != 0))
      {
        v37 = v63;
        v38 = v64;
        sub_21C3E359C(&v62, v63);
        AssetInfo.releaseDate.getter(v37, v38, (uint64_t)v11);
        v39 = v65;
        v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
        if (v40(v11, 1, v12) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4((uint64_t)v11);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v58, v11, v12);
        }
        v41 = v60;
        v42 = v61;
        sub_21C3E359C(v59, v60);
        v43 = v57;
        AssetInfo.releaseDate.getter(v41, v42, v57);
        if (v40((char *)v43, 1, v12) == 1)
        {
          v44 = v56;
          sub_21C458C18();
          sub_21C3F34B4(v43);
          v45 = v65;
        }
        else
        {
          v45 = v65;
          v44 = v56;
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v56, v43, v12);
        }
        v46 = v58;
        v36 = sub_21C458C3C();
        v47 = *(void (**)(char *, uint64_t))(v45 + 8);
        v47(v44, v12);
        v47(v46, v12);
        v11 = v55;
      }
      else
      {
        v26 = v63;
        v27 = v64;
        sub_21C3E359C(&v62, v63);
        v28 = AssetInfo.seriesSortKey.getter(v26, v27);
        if ((v29 & 1) != 0)
          v30 = 0;
        else
          v30 = v28;
        v31 = v60;
        v32 = v61;
        sub_21C3E359C(v59, v60);
        v33 = AssetInfo.seriesSortKey.getter(v31, v32);
        if ((v34 & 1) != 0)
          v35 = 0;
        else
          v35 = v33;
        v36 = v30 < v35;
      }
      sub_21C3E2754((uint64_t)v59);
      result = sub_21C3E2754((uint64_t)&v62);
      if ((v36 & 1) == 0)
      {
LABEL_4:
        ++a3;
        v17 = v54 + 40;
        if (a3 == v52)
          return result;
        goto LABEL_5;
      }
      v48 = *a4;
      if (!*a4)
        break;
      v49 = v48 + v17;
      sub_21C3F349C((__int128 *)(v48 + v17 + 40), (uint64_t)&v62);
      v50 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)(v49 + 40) = *(_OWORD *)v49;
      *(_OWORD *)(v49 + 56) = v50;
      *(_QWORD *)(v49 + 72) = *(_QWORD *)(v49 + 32);
      result = sub_21C3F349C(&v62, v49);
      v17 -= 40;
      if (a3 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3EF7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  char v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v59 = a4;
  v53 = a1;
  v6 = sub_21C3E344C(&qword_254078EC0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - v10;
  v12 = sub_21C458C60();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v51 - v17;
  v58 = a3;
  v52 = a2;
  if (a3 != a2)
  {
    v19 = 40 * v58 - 40;
    v55 = (char *)&v51 - v17;
    v56 = v11;
    v66 = v13;
LABEL_5:
    v20 = v53;
    v54 = v19;
    while (1)
    {
      v21 = *v59 + v19;
      sub_21C3E95B0(v21 + 40, (uint64_t)&v63);
      sub_21C3E95B0(v21, (uint64_t)v60);
      v22 = v64;
      v23 = v65;
      sub_21C3E359C(&v63, v64);
      AssetInfo.releaseDate.getter(v22, v23, (uint64_t)v11);
      v24 = v13;
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      if (v25(v11, 1, v12) == 1)
      {
        sub_21C458C18();
        sub_21C3F34B4((uint64_t)v11);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v18, v11, v12);
      }
      v26 = v61;
      v27 = v62;
      sub_21C3E359C(v60, v61);
      AssetInfo.releaseDate.getter(v26, v27, (uint64_t)v9);
      if (v25(v9, 1, v12) == 1)
      {
        v28 = v57;
        sub_21C458C18();
        sub_21C3F34B4((uint64_t)v9);
        v13 = v66;
      }
      else
      {
        v13 = v66;
        v28 = v57;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v57, v9, v12);
      }
      v29 = v9;
      if ((sub_21C458C48() & 1) != 0)
      {
        v30 = v28;
        v31 = v64;
        v32 = v65;
        sub_21C3E359C(&v63, v64);
        v33 = AssetInfo.seriesSortKey.getter(v31, v32);
        if ((v34 & 1) != 0)
          v35 = 0;
        else
          v35 = v33;
        v36 = v61;
        v37 = v62;
        sub_21C3E359C(v60, v61);
        v38 = AssetInfo.seriesSortKey.getter(v36, v37);
        LOBYTE(v37) = v39;
        v40 = *(void (**)(char *, uint64_t))(v66 + 8);
        v41 = v30;
        v18 = v55;
        v40(v41, v12);
        v40(v18, v12);
        if ((v37 & 1) != 0)
          v42 = 0;
        else
          v42 = v38;
        v43 = v42 < v35;
        v13 = v66;
        v44 = v43;
      }
      else
      {
        v45 = sub_21C458C30();
        v46 = v28;
        v44 = v45;
        v47 = *(void (**)(char *, uint64_t))(v13 + 8);
        v47(v46, v12);
        v47(v18, v12);
      }
      sub_21C3E2754((uint64_t)v60);
      result = sub_21C3E2754((uint64_t)&v63);
      v9 = v29;
      v11 = v56;
      if ((v44 & 1) == 0)
      {
LABEL_4:
        v19 = v54 + 40;
        if (++v58 == v52)
          return result;
        goto LABEL_5;
      }
      v48 = *v59;
      if (!*v59)
        break;
      v49 = v48 + v19;
      sub_21C3F349C((__int128 *)(v48 + v19 + 40), (uint64_t)&v63);
      v50 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)(v49 + 40) = *(_OWORD *)v49;
      *(_OWORD *)(v49 + 56) = v50;
      *(_QWORD *)(v49 + 72) = *(_QWORD *)(v49 + 32);
      result = sub_21C3F349C(&v63, v49);
      v19 -= 40;
      if (v58 == ++v20)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3EFB64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19 = result;
  v27 = a3;
  if (a3 != a2)
  {
    v5 = 40 * v27 - 40;
LABEL_5:
    v6 = v19;
    v20 = v5;
    while (1)
    {
      v7 = *a4 + v5;
      sub_21C3E95B0(v7 + 40, (uint64_t)&v24);
      sub_21C3E95B0(v7, (uint64_t)v21);
      v8 = v25;
      v9 = v26;
      sub_21C3E359C(&v24, v25);
      AssetInfo.sequenceNumber.getter(v8, v9);
      if ((v10 & 0x100000000) != 0)
        sub_21C459248();
      v12 = v22;
      v11 = v23;
      sub_21C3E359C(v21, v22);
      AssetInfo.sequenceNumber.getter(v12, v11);
      if ((v13 & 0x100000000) != 0)
        sub_21C459248();
      v14 = sub_21C459260();
      sub_21C3E2754((uint64_t)v21);
      result = sub_21C3E2754((uint64_t)&v24);
      if ((v14 & 1) == 0)
      {
LABEL_4:
        v5 = v20 + 40;
        if (++v27 == a2)
          return result;
        goto LABEL_5;
      }
      v15 = *a4;
      if (!*a4)
        break;
      v16 = v15 + v5;
      sub_21C3F349C((__int128 *)(v15 + v5 + 40), (uint64_t)&v24);
      v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 72) = *(_QWORD *)(v16 + 32);
      result = sub_21C3F349C(&v24, v16);
      v5 -= 40;
      if (v27 == ++v6)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3EFD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v53 = a1;
  v7 = sub_21C3E344C(&qword_254078EC0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v57 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v51 - v10;
  v12 = sub_21C458C60();
  v65 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v51 - v16;
  v52 = a2;
  if (a3 != a2)
  {
    v17 = 40 * a3 - 40;
    v55 = v11;
LABEL_5:
    v18 = v53;
    v54 = v17;
    while (1)
    {
      v19 = *a4 + v17;
      sub_21C3E95B0(v19 + 40, (uint64_t)&v62);
      sub_21C3E95B0(v19, (uint64_t)v59);
      v20 = v63;
      v21 = v64;
      sub_21C3E359C(&v62, v63);
      AssetInfo.seriesSortKey.getter(v20, v21);
      if ((v22 & 1) != 0
        && (v23 = v60, v24 = v61, sub_21C3E359C(v59, v60), AssetInfo.seriesSortKey.getter(v23, v24), (v25 & 1) != 0))
      {
        v37 = v63;
        v38 = v64;
        sub_21C3E359C(&v62, v63);
        AssetInfo.releaseDate.getter(v37, v38, (uint64_t)v11);
        v39 = v65;
        v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
        if (v40(v11, 1, v12) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4((uint64_t)v11);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v58, v11, v12);
        }
        v41 = v60;
        v42 = v61;
        sub_21C3E359C(v59, v60);
        v43 = v57;
        AssetInfo.releaseDate.getter(v41, v42, v57);
        if (v40((char *)v43, 1, v12) == 1)
        {
          v44 = v56;
          sub_21C458C18();
          sub_21C3F34B4(v43);
          v45 = v65;
        }
        else
        {
          v45 = v65;
          v44 = v56;
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v56, v43, v12);
        }
        v46 = v58;
        v36 = sub_21C458C30();
        v47 = *(void (**)(char *, uint64_t))(v45 + 8);
        v47(v44, v12);
        v47(v46, v12);
        v11 = v55;
      }
      else
      {
        v26 = v63;
        v27 = v64;
        sub_21C3E359C(&v62, v63);
        v28 = AssetInfo.seriesSortKey.getter(v26, v27);
        if ((v29 & 1) != 0)
          v30 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        v31 = v60;
        v32 = v61;
        sub_21C3E359C(v59, v60);
        v33 = AssetInfo.seriesSortKey.getter(v31, v32);
        v36 = (v34 & 1) == 0 && v33 < v30;
      }
      sub_21C3E2754((uint64_t)v59);
      result = sub_21C3E2754((uint64_t)&v62);
      if ((v36 & 1) == 0)
      {
LABEL_4:
        ++a3;
        v17 = v54 + 40;
        if (a3 == v52)
          return result;
        goto LABEL_5;
      }
      v48 = *a4;
      if (!*a4)
        break;
      v49 = v48 + v17;
      sub_21C3F349C((__int128 *)(v48 + v17 + 40), (uint64_t)&v62);
      v50 = *(_OWORD *)(v49 + 16);
      *(_OWORD *)(v49 + 40) = *(_OWORD *)v49;
      *(_OWORD *)(v49 + 56) = v50;
      *(_QWORD *)(v49 + 72) = *(_QWORD *)(v49 + 32);
      result = sub_21C3F349C(&v62, v49);
      v17 -= 40;
      if (a3 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3F00DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v19 = result;
  v27 = a3;
  if (a3 != a2)
  {
    v5 = 40 * v27 - 40;
LABEL_5:
    v6 = v19;
    v20 = v5;
    while (1)
    {
      v7 = *a4 + v5;
      sub_21C3E95B0(v7 + 40, (uint64_t)&v24);
      sub_21C3E95B0(v7, (uint64_t)v21);
      v8 = v25;
      v9 = v26;
      sub_21C3E359C(&v24, v25);
      AssetInfo.sequenceNumber.getter(v8, v9);
      if ((v10 & 0x100000000) != 0)
        sub_21C459248();
      v12 = v22;
      v11 = v23;
      sub_21C3E359C(v21, v22);
      AssetInfo.sequenceNumber.getter(v12, v11);
      if ((v13 & 0x100000000) != 0)
        sub_21C459248();
      v14 = sub_21C459260();
      sub_21C3E2754((uint64_t)v21);
      result = sub_21C3E2754((uint64_t)&v24);
      if ((v14 & 1) == 0)
      {
LABEL_4:
        v5 = v20 + 40;
        if (++v27 == a2)
          return result;
        goto LABEL_5;
      }
      v15 = *a4;
      if (!*a4)
        break;
      v16 = v15 + v5;
      sub_21C3F349C((__int128 *)(v15 + v5 + 40), (uint64_t)&v24);
      v17 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)v16;
      *(_OWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 72) = *(_QWORD *)(v16 + 32);
      result = sub_21C3F349C(&v24, v16);
      v5 -= 40;
      if (v27 == ++v6)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3F02C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v57 = a1;
  v7 = sub_21C3E344C(&qword_254078EC0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v60 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v55 - v10;
  v11 = sub_21C458C60();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v13);
  v61 = (char *)&v55 - v17;
  v56 = a2;
  v69 = a3;
  if (a3 != a2)
  {
    v18 = 40 * v69 - 40;
    v62 = v12;
LABEL_5:
    v19 = v57;
    v58 = v18;
    while (1)
    {
      v20 = v15;
      v21 = *a4 + v18;
      sub_21C3E95B0(v21 + 40, (uint64_t)&v66);
      sub_21C3E95B0(v21, (uint64_t)v63);
      v22 = v67;
      v23 = v68;
      sub_21C3E359C(&v66, v67);
      AssetInfo.seriesSortKey.getter(v22, v23);
      if ((v24 & 1) != 0
        && (v25 = v64, v26 = v65, sub_21C3E359C(v63, v64), AssetInfo.seriesSortKey.getter(v25, v26), (v27 & 1) != 0))
      {
        v41 = v67;
        v42 = v68;
        sub_21C3E359C(&v66, v67);
        v43 = v59;
        AssetInfo.releaseDate.getter(v41, v42, v59);
        v44 = v43;
        v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
        if (v45(v44, 1, v11) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4(v44);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v61, v44, v11);
        }
        v46 = v64;
        v47 = v65;
        sub_21C3E359C(v63, v64);
        v48 = v60;
        AssetInfo.releaseDate.getter(v46, v47, v60);
        v49 = v48;
        if (v45(v48, 1, v11) == 1)
        {
          v15 = v20;
          sub_21C458C18();
          sub_21C3F34B4(v48);
          v12 = v62;
        }
        else
        {
          v12 = v62;
          v15 = v20;
          (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v20, v49, v11);
        }
        v50 = v61;
        v40 = sub_21C458C3C();
        v51 = *(void (**)(char *, uint64_t))(v12 + 8);
        v51(v15, v11);
        v51(v50, v11);
      }
      else
      {
        v28 = v67;
        v29 = v68;
        sub_21C3E359C(&v66, v67);
        v30 = AssetInfo.seriesSortKey.getter(v28, v29);
        v32 = v31;
        v33 = v64;
        v34 = v65;
        sub_21C3E359C(v63, v64);
        v35 = v34;
        v12 = v62;
        v36 = AssetInfo.seriesSortKey.getter(v33, v35);
        v38 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v37 & 1) == 0)
          v38 = v36;
        v40 = (v32 & 1) == 0 && v30 < v38;
        v15 = v20;
      }
      sub_21C3E2754((uint64_t)v63);
      result = sub_21C3E2754((uint64_t)&v66);
      if ((v40 & 1) == 0)
      {
LABEL_4:
        v18 = v58 + 40;
        if (++v69 == v56)
          return result;
        goto LABEL_5;
      }
      v52 = *a4;
      if (!*a4)
        break;
      v53 = v52 + v18;
      sub_21C3F349C((__int128 *)(v52 + v18 + 40), (uint64_t)&v66);
      v54 = *(_OWORD *)(v53 + 16);
      *(_OWORD *)(v53 + 40) = *(_OWORD *)v53;
      *(_OWORD *)(v53 + 56) = v54;
      *(_QWORD *)(v53 + 72) = *(_QWORD *)(v53 + 32);
      result = sub_21C3F349C(&v66, v53);
      v18 -= 40;
      if (v69 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C3F0694(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t result;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v48 = __src;
  v47 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v25 = &v4[40 * v11];
      v46 = v25;
      v48 = v6;
      if (__src < v6 && v10 >= 40)
      {
        v26 = a3 - 40;
        while (1)
        {
          v29 = (char *)(v26 + 40);
          sub_21C3E95B0((uint64_t)(v25 - 40), (uint64_t)v43);
          v30 = v6 - 40;
          sub_21C3E95B0((uint64_t)(v6 - 40), (uint64_t)v40);
          v31 = v44;
          v32 = v45;
          sub_21C3E359C(v43, v44);
          AssetInfo.title.getter(v31, v32);
          v33 = v41;
          v34 = v42;
          sub_21C3E359C(v40, v41);
          AssetInfo.title.getter(v33, v34);
          sub_21C3E8EB0();
          v35 = sub_21C4592B4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_21C3E2754((uint64_t)v40);
          sub_21C3E2754((uint64_t)v43);
          if (v35 == -1)
          {
            if (v29 != v6 || v26 >= (unint64_t)v6)
            {
              v27 = *(_OWORD *)v30;
              v28 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v26 + 32) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v26 = v27;
              *(_OWORD *)(v26 + 16) = v28;
            }
            v48 -= 40;
            v25 = v46;
            if (v46 <= v4)
              goto LABEL_41;
          }
          else
          {
            v36 = v46;
            v25 = v46 - 40;
            v46 -= 40;
            if (v29 < v36 || v26 >= (unint64_t)v36 || v29 != v36)
            {
              v37 = *(_OWORD *)v25;
              v38 = *(_OWORD *)(v36 - 24);
              *(_QWORD *)(v26 + 32) = *((_QWORD *)v36 - 1);
              *(_OWORD *)v26 = v37;
              *(_OWORD *)(v26 + 16) = v38;
            }
            v30 = v6;
            if (v25 <= v4)
              goto LABEL_41;
          }
          v26 -= 40;
          v6 = v30;
          if (v30 <= __src)
            goto LABEL_41;
        }
      }
      goto LABEL_41;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v46 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_21C3E95B0((uint64_t)v6, (uint64_t)v43);
        sub_21C3E95B0((uint64_t)v4, (uint64_t)v40);
        v13 = v44;
        v14 = v45;
        sub_21C3E359C(v43, v44);
        AssetInfo.title.getter(v13, v14);
        v15 = v41;
        v16 = v42;
        sub_21C3E359C(v40, v41);
        AssetInfo.title.getter(v15, v16);
        sub_21C3E8EB0();
        v17 = sub_21C4592B4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_21C3E2754((uint64_t)v40);
        sub_21C3E2754((uint64_t)v43);
        v18 = v48;
        if (v17 == -1)
        {
          v22 = (unint64_t)(v6 + 40);
          if (v48 >= v6 && (unint64_t)v48 < v22 && v48 == v6)
          {
            v18 = v6;
          }
          else
          {
            v23 = *(_OWORD *)v6;
            v24 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v48 + 4) = *((_QWORD *)v6 + 4);
            *v18 = v23;
            v18[1] = v24;
          }
        }
        else
        {
          v19 = v47 + 40;
          if (v48 != v47 || v48 >= v19)
          {
            v20 = *(_OWORD *)v47;
            v21 = *((_OWORD *)v47 + 1);
            *((_QWORD *)v48 + 4) = *((_QWORD *)v47 + 4);
            *v18 = v20;
            v18[1] = v21;
          }
          v47 = v19;
          v22 = (unint64_t)v6;
        }
        v48 = (char *)v18 + 40;
        v4 = v47;
        if ((unint64_t)v47 >= v12)
          break;
        v6 = (char *)v22;
      }
      while (v22 < a3);
    }
LABEL_41:
    sub_21C439738((void **)&v48, (const void **)&v47, &v46);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F0AD8(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  _OWORD *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t result;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;

  v8 = sub_21C3E344C(&qword_254078EC0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v114 = (uint64_t)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v113 = (uint64_t)&v108 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v110 = (char *)&v108 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v109 = (char *)&v108 - v15;
  v16 = sub_21C458C60();
  v117 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v112 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v116 = (char *)&v108 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v111 = (char *)&v108 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v115 = (char *)&v108 - v23;
  v24 = a2 - a1;
  v25 = (a2 - a1) / 40;
  v26 = a3;
  v27 = a3 - (_QWORD)a2;
  v28 = v27 / 40;
  v126 = a1;
  v125 = a4;
  if (v25 >= v27 / 40)
  {
    if (v27 >= -39)
    {
      if (a4 != a2 || &a2[40 * v28] <= a4)
        memmove(a4, a2, 40 * v28);
      v69 = &a4[40 * v28];
      v124 = v69;
      v126 = a2;
      if (v27 >= 40 && a1 < a2)
      {
        v70 = v26 - 40;
        v115 = a1;
        while (1)
        {
          sub_21C3E95B0((uint64_t)(v69 - 40), (uint64_t)v121);
          v73 = a2 - 40;
          sub_21C3E95B0((uint64_t)(a2 - 40), (uint64_t)v118);
          v74 = v122;
          v75 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.seriesSortKey.getter(v74, v75);
          if ((v76 & 1) != 0
            && (v77 = v119,
                v78 = v120,
                sub_21C3E359C(v118, v119),
                AssetInfo.seriesSortKey.getter(v77, v78),
                (v79 & 1) != 0))
          {
            v91 = v122;
            v92 = v123;
            sub_21C3E359C(v121, v122);
            v93 = v113;
            AssetInfo.releaseDate.getter(v91, v92, v113);
            v94 = v117;
            v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
            if (v95(v93, 1, v16) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v93);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v116, v93, v16);
            }
            v96 = v119;
            v97 = v120;
            sub_21C3E359C(v118, v119);
            v98 = v114;
            AssetInfo.releaseDate.getter(v96, v97, v114);
            if (v95(v98, 1, v16) == 1)
            {
              v99 = v112;
              sub_21C458C18();
              sub_21C3F34B4(v98);
              v100 = v117;
            }
            else
            {
              v100 = v117;
              v99 = v112;
              (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v112, v98, v16);
            }
            v101 = v116;
            v90 = sub_21C458C3C();
            v102 = *(void (**)(char *, uint64_t))(v100 + 8);
            v102(v99, v16);
            v102(v101, v16);
            a1 = v115;
          }
          else
          {
            v80 = v122;
            v81 = v123;
            sub_21C3E359C(v121, v122);
            v82 = AssetInfo.seriesSortKey.getter(v80, v81);
            if ((v83 & 1) != 0)
              v84 = 0;
            else
              v84 = v82;
            v85 = v119;
            v86 = v120;
            sub_21C3E359C(v118, v119);
            v87 = AssetInfo.seriesSortKey.getter(v85, v86);
            if ((v88 & 1) != 0)
              v89 = 0;
            else
              v89 = v87;
            v90 = v84 < v89;
          }
          v103 = (char *)(v70 + 40);
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)v121);
          if ((v90 & 1) != 0)
          {
            if (v103 != a2 || v70 >= (unint64_t)a2)
            {
              v71 = *(_OWORD *)v73;
              v72 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v70 + 32) = *((_QWORD *)a2 - 1);
              *(_OWORD *)v70 = v71;
              *(_OWORD *)(v70 + 16) = v72;
            }
            v126 -= 40;
            v69 = v124;
            if (v124 <= a4)
              goto LABEL_72;
          }
          else
          {
            v104 = v124;
            v69 = v124 - 40;
            v124 -= 40;
            if (v103 < v104 || v70 >= (unint64_t)v104 || v103 != v104)
            {
              v105 = *(_OWORD *)v69;
              v106 = *(_OWORD *)(v104 - 24);
              *(_QWORD *)(v70 + 32) = *((_QWORD *)v104 - 1);
              *(_OWORD *)v70 = v105;
              *(_OWORD *)(v70 + 16) = v106;
            }
            v73 = a2;
            if (v69 <= a4)
              goto LABEL_72;
          }
          v70 -= 40;
          a2 = v73;
          if (v73 <= a1)
            goto LABEL_72;
        }
      }
      goto LABEL_72;
    }
  }
  else if (v24 >= -39)
  {
    v29 = v26;
    if (a4 != a1 || &a1[40 * v25] <= a4)
      memmove(a4, a1, 40 * v25);
    v30 = (unint64_t)&a4[40 * v25];
    v124 = (char *)v30;
    v31 = (uint64_t)v110;
    v32 = (uint64_t)v109;
    if (v24 >= 40 && (unint64_t)a2 < v29)
    {
      do
      {
        sub_21C3E95B0((uint64_t)a2, (uint64_t)v121);
        sub_21C3E95B0((uint64_t)a4, (uint64_t)v118);
        v33 = v122;
        v34 = v123;
        sub_21C3E359C(v121, v122);
        AssetInfo.seriesSortKey.getter(v33, v34);
        if ((v35 & 1) != 0
          && (v36 = v119, v37 = v120,
                          sub_21C3E359C(v118, v119),
                          AssetInfo.seriesSortKey.getter(v36, v37),
                          (v38 & 1) != 0))
        {
          v50 = v122;
          v51 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.releaseDate.getter(v50, v51, v32);
          v52 = v117;
          v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
          if (v53(v32, 1, v16) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4(v32);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v115, v32, v16);
          }
          v54 = v119;
          v55 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.releaseDate.getter(v54, v55, v31);
          if (v53(v31, 1, v16) == 1)
          {
            v56 = v111;
            sub_21C458C18();
            sub_21C3F34B4(v31);
            v57 = v117;
          }
          else
          {
            v57 = v117;
            v56 = v111;
            (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v111, v31, v16);
          }
          v58 = v115;
          v59 = sub_21C458C3C();
          v60 = v56;
          v49 = v59;
          v61 = *(void (**)(char *, uint64_t))(v57 + 8);
          v61(v60, v16);
          v61(v58, v16);
        }
        else
        {
          v39 = v122;
          v40 = v123;
          sub_21C3E359C(v121, v122);
          v41 = AssetInfo.seriesSortKey.getter(v39, v40);
          if ((v42 & 1) != 0)
            v43 = 0;
          else
            v43 = v41;
          v44 = v119;
          v45 = v120;
          sub_21C3E359C(v118, v119);
          v46 = AssetInfo.seriesSortKey.getter(v44, v45);
          if ((v47 & 1) != 0)
            v48 = 0;
          else
            v48 = v46;
          v49 = v43 < v48;
        }
        sub_21C3E2754((uint64_t)v118);
        sub_21C3E2754((uint64_t)v121);
        v62 = v126;
        if (v49)
        {
          v63 = (unint64_t)(a2 + 40);
          if (v126 >= a2 && (unint64_t)v126 < v63 && v126 == a2)
          {
            v62 = a2;
          }
          else
          {
            v64 = *(_OWORD *)a2;
            v65 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v126 + 4) = *((_QWORD *)a2 + 4);
            *v62 = v64;
            v62[1] = v65;
          }
        }
        else
        {
          v66 = v125 + 40;
          if (v126 != v125 || v126 >= v66)
          {
            v67 = *(_OWORD *)v125;
            v68 = *((_OWORD *)v125 + 1);
            *((_QWORD *)v126 + 4) = *((_QWORD *)v125 + 4);
            *v62 = v67;
            v62[1] = v68;
          }
          v125 = v66;
          v63 = (unint64_t)a2;
        }
        v126 = (char *)v62 + 40;
        a4 = v125;
        if ((unint64_t)v125 >= v30)
          break;
        a2 = (char *)v63;
      }
      while (v63 < v29);
    }
LABEL_72:
    sub_21C439738((void **)&v126, (const void **)&v125, &v124);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F12F4(uint64_t a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(_BYTE *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(_BYTE *, uint64_t);
  uint64_t v49;
  BOOL v50;
  char v51;
  void (*v52)(_BYTE *, uint64_t);
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  unsigned int (*v71)(_BYTE *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, unint64_t);
  char *v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, unint64_t);
  char *v94;
  char *v95;
  unint64_t v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  uint64_t result;
  _BYTE v101[16];
  _BYTE *v102;
  char *v103;
  char *v104;
  char *v105;
  _BYTE *v106;
  _BYTE *v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;

  v7 = sub_21C3E344C(&qword_254078EC0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v107 = &v101[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x24BDAC7A8](v8);
  v106 = &v101[-v11];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v102 = &v101[-v13];
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v101[-v14];
  v16 = sub_21C458C60();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v105 = &v101[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v109 = &v101[-v21];
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = &v101[-v23];
  MEMORY[0x24BDAC7A8](v22);
  v27 = &v101[-v26];
  v28 = a2 - v25;
  v29 = (a2 - v25) / 40;
  v108 = a3;
  v30 = a3 - (_QWORD)a2;
  v31 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v119 = v25;
  v118 = a4;
  v110 = v17;
  if (v29 >= v31)
  {
    if (v30 >= -39)
    {
      if (a4 != a2 || &a2[40 * v31] <= a4)
      {
        v60 = v25;
        v61 = v30;
        memmove(a4, a2, 40 * v31);
        v30 = v61;
        v25 = v60;
      }
      v62 = &a4[40 * v31];
      v117 = v62;
      v119 = a2;
      if (v30 >= 40 && v25 < a2)
      {
        v63 = v108 - 40;
        v108 = v16;
        v103 = a4;
        v104 = v25;
        while (1)
        {
          sub_21C3E95B0((uint64_t)(v62 - 40), (uint64_t)v114);
          v66 = a2 - 40;
          sub_21C3E95B0((uint64_t)(a2 - 40), (uint64_t)v111);
          v67 = v115;
          v68 = v116;
          sub_21C3E359C(v114, v115);
          v69 = v106;
          AssetInfo.releaseDate.getter(v67, v68, (uint64_t)v106);
          v70 = (uint64_t)v69;
          v71 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
          if (v71(v69, 1, v16) == 1)
          {
            v72 = v17;
            sub_21C458C18();
            sub_21C3F34B4(v70);
          }
          else
          {
            v72 = v17;
            (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v109, v70, v16);
          }
          v73 = v112;
          v74 = v113;
          sub_21C3E359C(v111, v112);
          v75 = v107;
          AssetInfo.releaseDate.getter(v73, v74, (uint64_t)v107);
          if (v71(v75, 1, v16) == 1)
          {
            v76 = v105;
            sub_21C458C18();
            sub_21C3F34B4((uint64_t)v75);
            v17 = v72;
          }
          else
          {
            v17 = v72;
            v76 = v105;
            (*(void (**)(void))(v72 + 32))();
          }
          v77 = v109;
          v78 = sub_21C458C48();
          v79 = (unint64_t)v103;
          if ((v78 & 1) != 0)
          {
            v80 = v115;
            v81 = v116;
            sub_21C3E359C(v114, v115);
            v82 = AssetInfo.seriesSortKey.getter(v80, v81);
            if ((v83 & 1) != 0)
              v84 = 0;
            else
              v84 = (_BYTE *)v82;
            v102 = v84;
            v85 = v112;
            v86 = v113;
            sub_21C3E359C(v111, v112);
            v87 = AssetInfo.seriesSortKey.getter(v85, v86);
            LOBYTE(v86) = v88;
            v89 = *(void (**)(char *, unint64_t))(v110 + 8);
            v90 = v76;
            v16 = v108;
            v89(v90, v108);
            v89(v77, v16);
            v17 = v110;
            if ((v86 & 1) != 0)
              v91 = 0;
            else
              v91 = v87;
            v92 = v91 < (uint64_t)v102;
          }
          else
          {
            v92 = sub_21C458C30();
            v93 = *(void (**)(char *, unint64_t))(v17 + 8);
            v94 = v76;
            v16 = v108;
            v93(v94, v108);
            v93(v77, v16);
          }
          v95 = (char *)(v63 + 40);
          sub_21C3E2754((uint64_t)v111);
          sub_21C3E2754((uint64_t)v114);
          if ((v92 & 1) != 0)
          {
            v96 = (unint64_t)v104;
            if (v95 != a2 || v63 >= (unint64_t)a2)
            {
              v64 = *(_OWORD *)v66;
              v65 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v63 + 32) = *((_QWORD *)a2 - 1);
              *(_OWORD *)v63 = v64;
              *(_OWORD *)(v63 + 16) = v65;
            }
            v119 -= 40;
            v62 = v117;
            if ((unint64_t)v117 <= v79)
              goto LABEL_72;
          }
          else
          {
            v97 = v117;
            v62 = v117 - 40;
            v117 -= 40;
            v96 = (unint64_t)v104;
            if (v95 < v97 || v63 >= (unint64_t)v97 || v95 != v97)
            {
              v98 = *(_OWORD *)v62;
              v99 = *(_OWORD *)(v97 - 24);
              *(_QWORD *)(v63 + 32) = *((_QWORD *)v97 - 1);
              *(_OWORD *)v63 = v98;
              *(_OWORD *)(v63 + 16) = v99;
            }
            v66 = a2;
            if ((unint64_t)v62 <= v79)
              goto LABEL_72;
          }
          v63 -= 40;
          a2 = v66;
          if ((unint64_t)v66 <= v96)
            goto LABEL_72;
        }
      }
      goto LABEL_72;
    }
  }
  else if (v28 >= -39)
  {
    v32 = (uint64_t)v102;
    if (a4 != v25 || &v25[40 * v29] <= a4)
    {
      v109 = (char *)(a2 - v25);
      memmove(a4, v25, 40 * v29);
      v28 = (uint64_t)v109;
    }
    v109 = &a4[40 * v29];
    v117 = v109;
    if (v28 >= 40 && (unint64_t)a2 < v108)
    {
      do
      {
        sub_21C3E95B0((uint64_t)a2, (uint64_t)v114);
        sub_21C3E95B0((uint64_t)a4, (uint64_t)v111);
        v33 = v115;
        v34 = v116;
        sub_21C3E359C(v114, v115);
        AssetInfo.releaseDate.getter(v33, v34, (uint64_t)v15);
        v35 = v17;
        v36 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
        if (v36(v15, 1, v16) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4((uint64_t)v15);
        }
        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32))(v27, v15, v16);
        }
        v37 = v112;
        v38 = v113;
        sub_21C3E359C(v111, v112);
        AssetInfo.releaseDate.getter(v37, v38, v32);
        if (v36((_BYTE *)v32, 1, v16) == 1)
        {
          sub_21C458C18();
          sub_21C3F34B4(v32);
          v17 = v110;
        }
        else
        {
          v17 = v110;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v110 + 32))(v24, v32, v16);
        }
        if ((sub_21C458C48() & 1) != 0)
        {
          v39 = v115;
          v40 = v116;
          sub_21C3E359C(v114, v115);
          v41 = AssetInfo.seriesSortKey.getter(v39, v40);
          if ((v42 & 1) != 0)
            v43 = 0;
          else
            v43 = v41;
          v44 = v112;
          v45 = v113;
          sub_21C3E359C(v111, v112);
          v46 = AssetInfo.seriesSortKey.getter(v44, v45);
          LOBYTE(v45) = v47;
          v48 = *(void (**)(_BYTE *, uint64_t))(v110 + 8);
          v48(v24, v16);
          v48(v27, v16);
          v32 = (uint64_t)v102;
          if ((v45 & 1) != 0)
            v49 = 0;
          else
            v49 = v46;
          v50 = v49 < v43;
          v17 = v110;
          v51 = v50;
        }
        else
        {
          v51 = sub_21C458C30();
          v52 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
          v52(v24, v16);
          v52(v27, v16);
        }
        sub_21C3E2754((uint64_t)v111);
        sub_21C3E2754((uint64_t)v114);
        v53 = v119;
        if ((v51 & 1) != 0)
        {
          v54 = (unint64_t)(a2 + 40);
          if (v119 >= a2 && (unint64_t)v119 < v54 && v119 == a2)
          {
            v53 = a2;
          }
          else
          {
            v55 = *(_OWORD *)a2;
            v56 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v119 + 4) = *((_QWORD *)a2 + 4);
            *v53 = v55;
            v53[1] = v56;
          }
        }
        else
        {
          v57 = v118 + 40;
          if (v119 != v118 || v119 >= v57)
          {
            v58 = *(_OWORD *)v118;
            v59 = *((_OWORD *)v118 + 1);
            *((_QWORD *)v119 + 4) = *((_QWORD *)v118 + 4);
            *v53 = v58;
            v53[1] = v59;
          }
          v118 = v57;
          v54 = (unint64_t)a2;
        }
        v119 = (char *)v53 + 40;
        a4 = v118;
        if (v118 >= v109)
          break;
        a2 = (char *)v54;
      }
      while (v54 < v108);
    }
LABEL_72:
    sub_21C439738((void **)&v119, (const void **)&v118, &v117);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F1B1C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t result;
  char *v45;
  char *v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v55 = __src;
  v54 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v27 = &v4[40 * v11];
      v53 = v27;
      v55 = v6;
      if (__src < v6 && v10 >= 40)
      {
        v28 = a3 - 40;
        v45 = __src;
        v46 = v4;
        while (1)
        {
          sub_21C3E95B0((uint64_t)(v27 - 40), (uint64_t)v50);
          v31 = v6 - 40;
          sub_21C3E95B0((uint64_t)(v6 - 40), (uint64_t)v47);
          v32 = v51;
          v33 = v52;
          sub_21C3E359C(v50, v51);
          AssetInfo.sequenceNumber.getter(v32, v33);
          if ((v34 & 0x100000000) != 0)
            sub_21C459248();
          v36 = v48;
          v35 = v49;
          sub_21C3E359C(v47, v48);
          AssetInfo.sequenceNumber.getter(v36, v35);
          if ((v37 & 0x100000000) != 0)
            sub_21C459248();
          v38 = (char *)(v28 + 40);
          v39 = sub_21C459260();
          sub_21C3E2754((uint64_t)v47);
          sub_21C3E2754((uint64_t)v50);
          if ((v39 & 1) != 0)
          {
            v40 = v45;
            if (v38 != v6 || v28 >= (unint64_t)v6)
            {
              v29 = *(_OWORD *)v31;
              v30 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v28 + 32) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
            }
            v55 -= 40;
            v27 = v53;
            if (v53 <= v46)
              goto LABEL_48;
          }
          else
          {
            v41 = v53;
            v27 = v53 - 40;
            v53 -= 40;
            v40 = v45;
            if (v38 < v41 || v28 >= (unint64_t)v41 || v38 != v41)
            {
              v42 = *(_OWORD *)v27;
              v43 = *(_OWORD *)(v41 - 24);
              *(_QWORD *)(v28 + 32) = *((_QWORD *)v41 - 1);
              *(_OWORD *)v28 = v42;
              *(_OWORD *)(v28 + 16) = v43;
            }
            v31 = v6;
            if (v27 <= v46)
              goto LABEL_48;
          }
          v28 -= 40;
          v6 = v31;
          if (v31 <= v40)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v53 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_21C3E95B0((uint64_t)v6, (uint64_t)v50);
        sub_21C3E95B0((uint64_t)v4, (uint64_t)v47);
        v13 = v51;
        v14 = v52;
        sub_21C3E359C(v50, v51);
        AssetInfo.sequenceNumber.getter(v13, v14);
        if ((v15 & 0x100000000) != 0)
          sub_21C459248();
        v16 = v48;
        v17 = v49;
        sub_21C3E359C(v47, v48);
        AssetInfo.sequenceNumber.getter(v16, v17);
        if ((v18 & 0x100000000) != 0)
          sub_21C459248();
        v19 = sub_21C459260();
        sub_21C3E2754((uint64_t)v47);
        sub_21C3E2754((uint64_t)v50);
        v20 = v55;
        if ((v19 & 1) != 0)
        {
          v21 = (unint64_t)(v6 + 40);
          if (v55 >= v6 && (unint64_t)v55 < v21 && v55 == v6)
          {
            v20 = v6;
          }
          else
          {
            v22 = *(_OWORD *)v6;
            v23 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v55 + 4) = *((_QWORD *)v6 + 4);
            *v20 = v22;
            v20[1] = v23;
          }
        }
        else
        {
          v24 = v54 + 40;
          if (v55 != v54 || v55 >= v24)
          {
            v25 = *(_OWORD *)v54;
            v26 = *((_OWORD *)v54 + 1);
            *((_QWORD *)v55 + 4) = *((_QWORD *)v54 + 4);
            *v20 = v25;
            v20[1] = v26;
          }
          v54 = v24;
          v21 = (unint64_t)v6;
        }
        v55 = (char *)v20 + 40;
        v4 = v54;
        if ((unint64_t)v54 >= v12)
          break;
        v6 = (char *)v21;
      }
      while (v21 < a3);
    }
LABEL_48:
    sub_21C439738((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F1F94(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  _OWORD *v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  uint64_t result;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;

  v8 = sub_21C3E344C(&qword_254078EC0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v114 = (uint64_t)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v113 = (uint64_t)&v108 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v110 = (char *)&v108 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v109 = (char *)&v108 - v15;
  v16 = sub_21C458C60();
  v117 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v112 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v116 = (char *)&v108 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v111 = (char *)&v108 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v115 = (char *)&v108 - v23;
  v24 = a2 - a1;
  v25 = (a2 - a1) / 40;
  v26 = a3;
  v27 = a3 - (_QWORD)a2;
  v28 = v27 / 40;
  v126 = a1;
  v125 = a4;
  if (v25 >= v27 / 40)
  {
    if (v27 >= -39)
    {
      if (a4 != a2 || &a2[40 * v28] <= a4)
        memmove(a4, a2, 40 * v28);
      v69 = &a4[40 * v28];
      v124 = v69;
      v126 = a2;
      if (v27 >= 40 && a1 < a2)
      {
        v70 = v26 - 40;
        v115 = a1;
        while (1)
        {
          sub_21C3E95B0((uint64_t)(v69 - 40), (uint64_t)v121);
          v73 = a2 - 40;
          sub_21C3E95B0((uint64_t)(a2 - 40), (uint64_t)v118);
          v74 = v122;
          v75 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.seriesSortKey.getter(v74, v75);
          if ((v76 & 1) != 0
            && (v77 = v119,
                v78 = v120,
                sub_21C3E359C(v118, v119),
                AssetInfo.seriesSortKey.getter(v77, v78),
                (v79 & 1) != 0))
          {
            v91 = v122;
            v92 = v123;
            sub_21C3E359C(v121, v122);
            v93 = v113;
            AssetInfo.releaseDate.getter(v91, v92, v113);
            v94 = v117;
            v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
            if (v95(v93, 1, v16) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v93);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v116, v93, v16);
            }
            v96 = v119;
            v97 = v120;
            sub_21C3E359C(v118, v119);
            v98 = v114;
            AssetInfo.releaseDate.getter(v96, v97, v114);
            if (v95(v98, 1, v16) == 1)
            {
              v99 = v112;
              sub_21C458C18();
              sub_21C3F34B4(v98);
              v100 = v117;
            }
            else
            {
              v100 = v117;
              v99 = v112;
              (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v112, v98, v16);
            }
            v101 = v116;
            v90 = sub_21C458C30();
            v102 = *(void (**)(char *, uint64_t))(v100 + 8);
            v102(v99, v16);
            v102(v101, v16);
            a1 = v115;
          }
          else
          {
            v80 = v122;
            v81 = v123;
            sub_21C3E359C(v121, v122);
            v82 = AssetInfo.seriesSortKey.getter(v80, v81);
            if ((v83 & 1) != 0)
              v84 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            v85 = v119;
            v86 = v120;
            sub_21C3E359C(v118, v119);
            v87 = AssetInfo.seriesSortKey.getter(v85, v86);
            v90 = (v88 & 1) == 0 && v87 < v84;
          }
          v103 = (char *)(v70 + 40);
          sub_21C3E2754((uint64_t)v118);
          sub_21C3E2754((uint64_t)v121);
          if ((v90 & 1) != 0)
          {
            if (v103 != a2 || v70 >= (unint64_t)a2)
            {
              v71 = *(_OWORD *)v73;
              v72 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v70 + 32) = *((_QWORD *)a2 - 1);
              *(_OWORD *)v70 = v71;
              *(_OWORD *)(v70 + 16) = v72;
            }
            v126 -= 40;
            v69 = v124;
            if (v124 <= a4)
              goto LABEL_76;
          }
          else
          {
            v104 = v124;
            v69 = v124 - 40;
            v124 -= 40;
            if (v103 < v104 || v70 >= (unint64_t)v104 || v103 != v104)
            {
              v105 = *(_OWORD *)v69;
              v106 = *(_OWORD *)(v104 - 24);
              *(_QWORD *)(v70 + 32) = *((_QWORD *)v104 - 1);
              *(_OWORD *)v70 = v105;
              *(_OWORD *)(v70 + 16) = v106;
            }
            v73 = a2;
            if (v69 <= a4)
              goto LABEL_76;
          }
          v70 -= 40;
          a2 = v73;
          if (v73 <= a1)
            goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
  }
  else if (v24 >= -39)
  {
    v29 = v26;
    if (a4 != a1 || &a1[40 * v25] <= a4)
      memmove(a4, a1, 40 * v25);
    v30 = (unint64_t)&a4[40 * v25];
    v124 = (char *)v30;
    v31 = (uint64_t)v110;
    v32 = (uint64_t)v109;
    if (v24 >= 40 && (unint64_t)a2 < v29)
    {
      do
      {
        sub_21C3E95B0((uint64_t)a2, (uint64_t)v121);
        sub_21C3E95B0((uint64_t)a4, (uint64_t)v118);
        v33 = v122;
        v34 = v123;
        sub_21C3E359C(v121, v122);
        AssetInfo.seriesSortKey.getter(v33, v34);
        if ((v35 & 1) != 0
          && (v36 = v119, v37 = v120,
                          sub_21C3E359C(v118, v119),
                          AssetInfo.seriesSortKey.getter(v36, v37),
                          (v38 & 1) != 0))
        {
          v50 = v122;
          v51 = v123;
          sub_21C3E359C(v121, v122);
          AssetInfo.releaseDate.getter(v50, v51, v32);
          v52 = v117;
          v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
          if (v53(v32, 1, v16) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4(v32);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v115, v32, v16);
          }
          v54 = v119;
          v55 = v120;
          sub_21C3E359C(v118, v119);
          AssetInfo.releaseDate.getter(v54, v55, v31);
          if (v53(v31, 1, v16) == 1)
          {
            v56 = v111;
            sub_21C458C18();
            sub_21C3F34B4(v31);
            v57 = v117;
          }
          else
          {
            v57 = v117;
            v56 = v111;
            (*(void (**)(char *, uint64_t, uint64_t))(v117 + 32))(v111, v31, v16);
          }
          v58 = v115;
          v59 = sub_21C458C30();
          v60 = v56;
          v49 = v59;
          v61 = *(void (**)(char *, uint64_t))(v57 + 8);
          v61(v60, v16);
          v61(v58, v16);
        }
        else
        {
          v39 = v122;
          v40 = v123;
          sub_21C3E359C(v121, v122);
          v41 = AssetInfo.seriesSortKey.getter(v39, v40);
          if ((v42 & 1) != 0)
            v43 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          v44 = v119;
          v45 = v120;
          sub_21C3E359C(v118, v119);
          v46 = AssetInfo.seriesSortKey.getter(v44, v45);
          v49 = (v47 & 1) == 0 && v46 < v43;
        }
        sub_21C3E2754((uint64_t)v118);
        sub_21C3E2754((uint64_t)v121);
        v62 = v126;
        if (v49)
        {
          v63 = (unint64_t)(a2 + 40);
          if (v126 >= a2 && (unint64_t)v126 < v63 && v126 == a2)
          {
            v62 = a2;
          }
          else
          {
            v64 = *(_OWORD *)a2;
            v65 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v126 + 4) = *((_QWORD *)a2 + 4);
            *v62 = v64;
            v62[1] = v65;
          }
        }
        else
        {
          v66 = v125 + 40;
          if (v126 != v125 || v126 >= v66)
          {
            v67 = *(_OWORD *)v125;
            v68 = *((_OWORD *)v125 + 1);
            *((_QWORD *)v126 + 4) = *((_QWORD *)v125 + 4);
            *v62 = v67;
            v62[1] = v68;
          }
          v125 = v66;
          v63 = (unint64_t)a2;
        }
        v126 = (char *)v62 + 40;
        a4 = v125;
        if ((unint64_t)v125 >= v30)
          break;
        a2 = (char *)v63;
      }
      while (v63 < v29);
    }
LABEL_76:
    sub_21C439738((void **)&v126, (const void **)&v125, &v124);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F27B0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t result;
  char *v45;
  char *v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v55 = __src;
  v54 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v27 = &v4[40 * v11];
      v53 = v27;
      v55 = v6;
      if (__src < v6 && v10 >= 40)
      {
        v28 = a3 - 40;
        v45 = __src;
        v46 = v4;
        while (1)
        {
          sub_21C3E95B0((uint64_t)(v27 - 40), (uint64_t)v50);
          v31 = v6 - 40;
          sub_21C3E95B0((uint64_t)(v6 - 40), (uint64_t)v47);
          v32 = v51;
          v33 = v52;
          sub_21C3E359C(v50, v51);
          AssetInfo.sequenceNumber.getter(v32, v33);
          if ((v34 & 0x100000000) != 0)
            sub_21C459248();
          v36 = v48;
          v35 = v49;
          sub_21C3E359C(v47, v48);
          AssetInfo.sequenceNumber.getter(v36, v35);
          if ((v37 & 0x100000000) != 0)
            sub_21C459248();
          v38 = (char *)(v28 + 40);
          v39 = sub_21C459260();
          sub_21C3E2754((uint64_t)v47);
          sub_21C3E2754((uint64_t)v50);
          if ((v39 & 1) != 0)
          {
            v40 = v45;
            if (v38 != v6 || v28 >= (unint64_t)v6)
            {
              v29 = *(_OWORD *)v31;
              v30 = *(_OWORD *)(v6 - 24);
              *(_QWORD *)(v28 + 32) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
            }
            v55 -= 40;
            v27 = v53;
            if (v53 <= v46)
              goto LABEL_48;
          }
          else
          {
            v41 = v53;
            v27 = v53 - 40;
            v53 -= 40;
            v40 = v45;
            if (v38 < v41 || v28 >= (unint64_t)v41 || v38 != v41)
            {
              v42 = *(_OWORD *)v27;
              v43 = *(_OWORD *)(v41 - 24);
              *(_QWORD *)(v28 + 32) = *((_QWORD *)v41 - 1);
              *(_OWORD *)v28 = v42;
              *(_OWORD *)(v28 + 16) = v43;
            }
            v31 = v6;
            if (v27 <= v46)
              goto LABEL_48;
          }
          v28 -= 40;
          v6 = v31;
          if (v31 <= v40)
            goto LABEL_48;
        }
      }
      goto LABEL_48;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v53 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_21C3E95B0((uint64_t)v6, (uint64_t)v50);
        sub_21C3E95B0((uint64_t)v4, (uint64_t)v47);
        v13 = v51;
        v14 = v52;
        sub_21C3E359C(v50, v51);
        AssetInfo.sequenceNumber.getter(v13, v14);
        if ((v15 & 0x100000000) != 0)
          sub_21C459248();
        v16 = v48;
        v17 = v49;
        sub_21C3E359C(v47, v48);
        AssetInfo.sequenceNumber.getter(v16, v17);
        if ((v18 & 0x100000000) != 0)
          sub_21C459248();
        v19 = sub_21C459260();
        sub_21C3E2754((uint64_t)v47);
        sub_21C3E2754((uint64_t)v50);
        v20 = v55;
        if ((v19 & 1) != 0)
        {
          v21 = (unint64_t)(v6 + 40);
          if (v55 >= v6 && (unint64_t)v55 < v21 && v55 == v6)
          {
            v20 = v6;
          }
          else
          {
            v22 = *(_OWORD *)v6;
            v23 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v55 + 4) = *((_QWORD *)v6 + 4);
            *v20 = v22;
            v20[1] = v23;
          }
        }
        else
        {
          v24 = v54 + 40;
          if (v55 != v54 || v55 >= v24)
          {
            v25 = *(_OWORD *)v54;
            v26 = *((_OWORD *)v54 + 1);
            *((_QWORD *)v55 + 4) = *((_QWORD *)v54 + 4);
            *v20 = v25;
            v20[1] = v26;
          }
          v54 = v24;
          v21 = (unint64_t)v6;
        }
        v55 = (char *)v20 + 40;
        v4 = v54;
        if ((unint64_t)v54 >= v12)
          break;
        v6 = (char *)v21;
      }
      while (v21 < a3);
    }
LABEL_48:
    sub_21C439738((void **)&v55, (const void **)&v54, &v53);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F2C58(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  _OWORD *v66;
  unint64_t v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  uint64_t result;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[3];
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;

  v8 = sub_21C3E344C(&qword_254078EC0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v120 = (uint64_t)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v119 = (uint64_t)&v115 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v118 = (uint64_t)&v115 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v117 = (uint64_t)&v115 - v15;
  v122 = sub_21C458C60();
  v125 = *(_QWORD *)(v122 - 8);
  v16 = MEMORY[0x24BDAC7A8](v122);
  v116 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v121 = (char *)&v115 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v123 = (char *)&v115 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v115 - v22;
  v24 = a2 - a1;
  v25 = (a2 - a1) / 40;
  v26 = a3;
  v27 = a3 - (_QWORD)a2;
  v28 = v27 / 40;
  v29 = a1;
  v134 = a1;
  v133 = a4;
  if (v25 >= v27 / 40)
  {
    if (v27 >= -39)
    {
      if (a4 != a2 || &a2[40 * v28] <= a4)
      {
        memmove(a4, a2, 40 * v28);
        v29 = a1;
      }
      v73 = &a4[40 * v28];
      v132 = v73;
      v134 = a2;
      if (v27 >= 40 && v29 < a2)
      {
        v74 = v26 - 40;
        v124 = v29;
        do
        {
          sub_21C3E95B0((uint64_t)(v73 - 40), (uint64_t)v129);
          v75 = a2 - 40;
          sub_21C3E95B0((uint64_t)(a2 - 40), (uint64_t)v126);
          v76 = v130;
          v77 = v131;
          sub_21C3E359C(v129, v130);
          AssetInfo.seriesSortKey.getter(v76, v77);
          if ((v78 & 1) != 0
            && (v79 = v127,
                v80 = v128,
                sub_21C3E359C(v126, v127),
                AssetInfo.seriesSortKey.getter(v79, v80),
                (v81 & 1) != 0))
          {
            v94 = v130;
            v95 = v131;
            sub_21C3E359C(v129, v130);
            v96 = v119;
            AssetInfo.releaseDate.getter(v94, v95, v119);
            v97 = v125;
            v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
            v99 = v122;
            if (v98(v96, 1, v122) == 1)
            {
              sub_21C458C18();
              sub_21C3F34B4(v96);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v121, v96, v99);
            }
            v100 = v127;
            v101 = v128;
            sub_21C3E359C(v126, v127);
            v102 = v120;
            AssetInfo.releaseDate.getter(v100, v101, v120);
            v103 = v102;
            if (v98(v102, 1, v99) == 1)
            {
              v104 = v116;
              sub_21C458C18();
              sub_21C3F34B4(v103);
              v105 = v125;
            }
            else
            {
              v105 = v125;
              v104 = v116;
              (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v116, v103, v99);
            }
            v106 = v121;
            v93 = sub_21C458C3C();
            v107 = *(void (**)(char *, uint64_t))(v105 + 8);
            v107(v104, v99);
            v107(v106, v99);
          }
          else
          {
            v82 = v130;
            v83 = v131;
            sub_21C3E359C(v129, v130);
            v84 = AssetInfo.seriesSortKey.getter(v82, v83);
            v86 = v85;
            v88 = v127;
            v87 = v128;
            sub_21C3E359C(v126, v127);
            v89 = AssetInfo.seriesSortKey.getter(v88, v87);
            if ((v90 & 1) != 0)
              v91 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            v93 = (v86 & 1) == 0 && v84 < v91;
          }
          v108 = (char *)(v74 + 40);
          sub_21C3E2754((uint64_t)v126);
          sub_21C3E2754((uint64_t)v129);
          if ((v93 & 1) != 0)
          {
            if (v108 != a2 || v74 >= (unint64_t)a2)
            {
              v109 = *(_OWORD *)v75;
              v110 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v74 + 32) = *((_QWORD *)a2 - 1);
              *(_OWORD *)v74 = v109;
              *(_OWORD *)(v74 + 16) = v110;
            }
            v134 -= 40;
            v73 = v132;
          }
          else
          {
            v111 = v132;
            v73 = v132 - 40;
            v132 -= 40;
            if (v108 < v111 || v74 >= (unint64_t)v111 || v108 != v111)
            {
              v112 = *(_OWORD *)v73;
              v113 = *(_OWORD *)(v111 - 24);
              *(_QWORD *)(v74 + 32) = *((_QWORD *)v111 - 1);
              *(_OWORD *)v74 = v112;
              *(_OWORD *)(v74 + 16) = v113;
            }
            v75 = a2;
          }
          if (v73 <= a4)
            break;
          v74 -= 40;
          a2 = v75;
        }
        while (v75 > v124);
      }
      goto LABEL_76;
    }
  }
  else if (v24 >= -39)
  {
    v30 = v26;
    if (a4 != v29 || &v29[40 * v25] <= a4)
      memmove(a4, v29, 40 * v25);
    v31 = (unint64_t)&a4[40 * v25];
    v132 = (char *)v31;
    v32 = v123;
    if (v24 >= 40 && (unint64_t)a2 < v26)
    {
      do
      {
        sub_21C3E95B0((uint64_t)a2, (uint64_t)v129);
        sub_21C3E95B0((uint64_t)a4, (uint64_t)v126);
        v33 = v130;
        v34 = v131;
        sub_21C3E359C(v129, v130);
        AssetInfo.seriesSortKey.getter(v33, v34);
        if ((v35 & 1) != 0
          && (v36 = v127, v37 = v128,
                          sub_21C3E359C(v126, v127),
                          AssetInfo.seriesSortKey.getter(v36, v37),
                          (v38 & 1) != 0))
        {
          v52 = v130;
          v53 = v131;
          sub_21C3E359C(v129, v130);
          v54 = v117;
          AssetInfo.releaseDate.getter(v52, v53, v117);
          v55 = v54;
          v56 = v125;
          v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
          v58 = v54;
          v59 = v122;
          if (v57(v58, 1, v122) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4(v55);
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v23, v55, v59);
          }
          v60 = v127;
          v61 = v128;
          sub_21C3E359C(v126, v127);
          v62 = v60;
          v63 = v118;
          AssetInfo.releaseDate.getter(v62, v61, v118);
          if (v57(v63, 1, v59) == 1)
          {
            sub_21C458C18();
            sub_21C3F34B4(v63);
            v64 = v125;
          }
          else
          {
            v64 = v125;
            (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v32, v63, v59);
          }
          v51 = sub_21C458C3C();
          v65 = *(void (**)(char *, uint64_t))(v64 + 8);
          v65(v32, v59);
          v65(v23, v59);
        }
        else
        {
          v39 = v130;
          v40 = v131;
          sub_21C3E359C(v129, v130);
          v41 = AssetInfo.seriesSortKey.getter(v39, v40);
          v43 = v42;
          v44 = v127;
          v45 = v128;
          sub_21C3E359C(v126, v127);
          v46 = v45;
          v32 = v123;
          v47 = AssetInfo.seriesSortKey.getter(v44, v46);
          if ((v48 & 1) != 0)
            v49 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          v51 = (v43 & 1) == 0 && v41 < v49;
        }
        sub_21C3E2754((uint64_t)v126);
        sub_21C3E2754((uint64_t)v129);
        v66 = v134;
        if ((v51 & 1) != 0)
        {
          v67 = (unint64_t)(a2 + 40);
          if (v134 >= a2 && (unint64_t)v134 < v67 && v134 == a2)
          {
            v66 = a2;
          }
          else
          {
            v68 = *(_OWORD *)a2;
            v69 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v134 + 4) = *((_QWORD *)a2 + 4);
            *v66 = v68;
            v66[1] = v69;
          }
        }
        else
        {
          v70 = v133 + 40;
          if (v134 != v133 || v134 >= v70)
          {
            v71 = *(_OWORD *)v133;
            v72 = *((_OWORD *)v133 + 1);
            *((_QWORD *)v134 + 4) = *((_QWORD *)v133 + 4);
            *v66 = v71;
            v66[1] = v72;
          }
          v133 = v70;
          v67 = (unint64_t)a2;
        }
        v134 = (char *)v66 + 40;
        a4 = v133;
        if ((unint64_t)v133 >= v31)
          break;
        a2 = (char *)v67;
      }
      while (v67 < v30);
    }
LABEL_76:
    sub_21C439738((void **)&v134, (const void **)&v133, &v132);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3F349C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_21C3F34B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_254078EC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C3F34F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[32];

  v32 = a3;
  v31 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_21C459278();
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](v6);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v30 = (char *)&v28 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v28 - v15;
  if (a2 < 1)
    sub_21C459170();
  else
    sub_21C4591A0();
  sub_21C459164();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
LABEL_8:
    v20 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v32, 1, 1, v20);
  }
  v17 = v30;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v8, AssociatedTypeWitness);
  sub_21C4591A0();
  swift_getAssociatedConformanceWitness();
  v18 = sub_21C458E34();
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v12, AssociatedTypeWitness);
  if ((v18 & 1) != 0)
  {
    v19(v17, AssociatedTypeWitness);
    v19(v16, AssociatedTypeWitness);
    goto LABEL_8;
  }
  v22 = (void (*)(char *, _QWORD))sub_21C4591F4();
  v24 = v23;
  v25 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v32, v24, v25);
  v22(v33, 0);
  v19(v17, AssociatedTypeWitness);
  v19(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
}

uint64_t RandomAccessCollection.element(_:equatedBy:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v21[0] = a4;
  v23 = a1;
  v24 = a3;
  v22 = a2;
  v25 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = sub_21C459278();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v21 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v21 - v17;
  v26 = a5;
  v27 = a6;
  v21[1] = a6;
  v28 = v22;
  v29 = v24;
  v30 = v23;
  v24 = v7;
  sub_21C4591B8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v25, 1, 1, v19);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, AssociatedTypeWitness);
    sub_21C3F34F4((uint64_t)v18, v21[0], v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  }
}

uint64_t sub_21C3F39D4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 32))(a1, *(_QWORD *)(v1 + 48)) & 1;
}

uint64_t RandomAccessCollection.firstAndLast.getter@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;

  v26 = a2;
  v24[1] = *(_QWORD *)(a1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = sub_21C459278();
  v3 = *(_QWORD *)(v25 - 8);
  v4 = MEMORY[0x24BDAC7A8](v25);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v24 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - v14;
  sub_21C4591C4();
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v16(v9, 1, AssociatedTypeWitness) == 1)
  {
    v6 = v9;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v25);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v26, 1, 1, TupleTypeMetadata2);
  }
  v17 = v9;
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v18(v15, v17, AssociatedTypeWitness);
  sub_21C458DEC();
  if (v16(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v18(v13, v6, AssociatedTypeWitness);
  v21 = swift_getTupleTypeMetadata2();
  v22 = v26;
  v23 = &v26[*(int *)(v21 + 48)];
  v18(v26, v15, AssociatedTypeWitness);
  v18(v23, v13, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v22, 0, 1, v21);
}

uint64_t RandomAccessCollection<>.element(_:offsetBy:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15[3];
  uint64_t v16;

  v15[2] = a3;
  v16 = a4;
  v15[0] = a1;
  v15[1] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_21C459278();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v15 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v15 - v11;
  sub_21C4591E8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v16, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, AssociatedTypeWitness);
    sub_21C3F34F4((uint64_t)v12, v15[0], v16);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  }
}

BOOL CGRect.isLandscape.getter(double a1, double a2, double a3, double a4)
{
  return a4 < a3;
}

double static CGRect.from(size:)()
{
  return 0.0;
}

CGRect __swiftcall CGRect.center(in:)(CGRect in)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double MaxX;
  double v13;
  CGFloat v14;
  double MaxY;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat rect;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect result;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  rect = in.size.height;
  width = in.size.width;
  y = in.origin.y;
  x = in.origin.x;
  MaxX = CGRectGetMaxX(in);
  v22.origin.x = v8;
  v22.origin.y = v7;
  v22.size.width = v6;
  v22.size.height = v5;
  v13 = (MaxX - CGRectGetMaxX(v22)) * 0.5;
  v23.origin.x = v8;
  v23.origin.y = v7;
  v23.size.width = v6;
  v23.size.height = v5;
  v14 = CGRectGetMinX(v23) + v13;
  v24.origin.x = x;
  v24.origin.y = y;
  v24.size.width = width;
  v24.size.height = rect;
  MaxY = CGRectGetMaxY(v24);
  v25.origin.x = v8;
  v25.origin.y = v7;
  v25.size.width = v6;
  v25.size.height = v5;
  v16 = (MaxY - CGRectGetMaxY(v25)) * 0.5;
  v26.origin.x = v8;
  v26.origin.y = v7;
  v26.size.width = v6;
  v26.size.height = v5;
  v17 = CGRectGetMinY(v26) + v16;
  v18 = v14;
  v19 = v6;
  v20 = v5;
  result.size.height = v20;
  result.size.width = v19;
  result.origin.y = v17;
  result.origin.x = v18;
  return result;
}

CGSize __swiftcall CGRect.scaledToFit(in:times:horizontally:)(CGSize in, Swift::Int times, Swift::Bool horizontally)
{
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double width;
  double v13;
  CGFloat height;
  double v15;
  double v16;
  double v17;
  double v18;
  CGSize result;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  if (horizontally)
  {
    width = in.width;
    v20.origin.x = v3;
    v20.origin.y = v4;
    v20.size.width = v5;
    v20.size.height = v6;
    v13 = CGRectGetWidth(v20);
  }
  else
  {
    height = in.height;
    v21.origin.x = v3;
    v21.origin.y = v4;
    v21.size.width = v5;
    v21.size.height = v6;
    v13 = CGRectGetHeight(v21);
    width = height;
  }
  v15 = width / (v13 * (double)times);
  v22.origin.x = v10;
  v22.origin.y = v9;
  v22.size.width = v8;
  v22.size.height = v7;
  v16 = floor(v15 * CGRectGetWidth(v22));
  v23.origin.x = v10;
  v23.origin.y = v9;
  v23.size.width = v8;
  v23.size.height = v7;
  v17 = floor(v15 * CGRectGetHeight(v23));
  v18 = v16;
  result.height = v17;
  result.width = v18;
  return result;
}

CGFloat CGRect.inset(by:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat v10;
  CGRect v12;
  CGRect v13;

  v12.origin.x = a2;
  v12.origin.y = a3;
  v12.size.width = a4;
  v12.size.height = a5;
  v10 = CGRectGetWidth(v12) - a1;
  v13.origin.x = a2;
  v13.origin.y = a3;
  v13.size.width = a4;
  v13.size.height = a5;
  CGRectGetHeight(v13);
  return v10;
}

CGSize __swiftcall CGRect.inset(by:)(Swift::Double by)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v10;
  double v11;
  double v12;
  CGSize result;
  CGRect v14;
  CGRect v15;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v14.origin.x = v1;
  v14.origin.y = v2;
  v14.size.width = v3;
  v14.size.height = v4;
  v10 = CGRectGetWidth(v14) - by;
  v15.origin.x = v8;
  v15.origin.y = v7;
  v15.size.width = v6;
  v15.size.height = v5;
  v11 = CGRectGetHeight(v15) - by;
  v12 = v10;
  result.height = v11;
  result.width = v12;
  return result;
}

uint64_t sub_21C3F40B4(uint64_t a1)
{
  return sub_21C3F4200(a1, qword_25527A248);
}

uint64_t static Logger.assetInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3F4134(&qword_255279EE0, (uint64_t)qword_25527A248, a1);
}

uint64_t sub_21C3F40F4(uint64_t a1)
{
  return sub_21C3F4200(a1, qword_25527A260);
}

uint64_t static Logger.contentInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3F4134(&qword_255279EE8, (uint64_t)qword_25527A260, a1);
}

uint64_t sub_21C3F4134@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_21C458D20();
  v6 = sub_21C3E2BA0(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_21C3F419C(uint64_t a1)
{
  return sub_21C3F4200(a1, qword_25527A278);
}

uint64_t static Logger.mapiModel.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3F4134(&qword_255279EF0, (uint64_t)qword_25527A278, a1);
}

uint64_t sub_21C3F41DC(uint64_t a1)
{
  return sub_21C3F4200(a1, qword_25527A290);
}

uint64_t sub_21C3F4200(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_21C458D20();
  sub_21C3E3604(v3, a2);
  sub_21C3E2BA0(v3, (uint64_t)a2);
  sub_21C459350();
  swift_bridgeObjectRelease();
  return sub_21C458D14();
}

uint64_t static Logger.mCatalogRequestHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3F4134(&qword_255279EF8, (uint64_t)qword_25527A290, a1);
}

uint64_t LibraryAudiobookInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C3F42C4(v1, a1);
}

uint64_t sub_21C3F42C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookInfo.commonInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_21C3F4310(a1, v1);
}

uint64_t sub_21C3F4310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryAudiobookInfo.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
  return sub_21C3F43D0(v3, a1);
}

uint64_t type metadata accessor for LibraryAudiobookInfo()
{
  uint64_t result;

  result = qword_25527A330;
  if (!qword_25527A330)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C3F43D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookInfo.seriesInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
  return sub_21C3F4448(a1, v3);
}

uint64_t sub_21C3F4448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookInfo.seriesInfo.modify())()
{
  type metadata accessor for LibraryAudiobookInfo();
  return nullsub_1;
}

uint64_t LibraryAudiobookInfo.isSG.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 24));
}

uint64_t LibraryAudiobookInfo.supplementalContents.getter()
{
  type metadata accessor for LibraryAudiobookInfo();
  return swift_bridgeObjectRetain();
}

uint64_t LibraryAudiobookInfo.init(commonInfo:seriesInfo:isSG:supplementalContents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t result;

  v10 = (int *)type metadata accessor for LibraryAudiobookInfo();
  v11 = a5 + v10[5];
  *(_QWORD *)(v11 + 32) = 0;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  sub_21C3F4584(a1, a5);
  result = sub_21C3F4448(a2, v11);
  *(_BYTE *)(a5 + v10[6]) = a3;
  *(_QWORD *)(a5 + v10[7]) = a4;
  return result;
}

uint64_t sub_21C3F4584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C3F45C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C3F43D0(v2 + *(int *)(a1 + 20), a2);
}

uint64_t sub_21C3F45D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21C3F4448(a1, v2 + *(int *)(a2 + 20));
}

uint64_t (*sub_21C3F45E4())()
{
  return nullsub_1;
}

uint64_t sub_21C3F45F8(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3F46D4(&qword_25527A2B0, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3F462C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C3F42C4(v1, a1);
}

uint64_t sub_21C3F4638(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3F46D4(&qword_25527A2B8, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3F466C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3F46D4(&qword_25527A2C0, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3F46A0(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3F46D4(&qword_25527A2C8, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3F46D4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LibraryAudiobookInfo();
    result = MEMORY[0x22077C1E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LibraryAudiobookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v78;
  char *v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    a1[10] = a2[10];
    v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v12 = v11[10];
    __dst = (char *)v4 + v12;
    v79 = (char *)a2 + v12;
    v13 = sub_21C458BF4();
    v78 = *(_QWORD *)(v13 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v80(v79, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v79, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(__dst, v79, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v13);
    }
    v16 = v11[11];
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v11[12];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = v11[13];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v11[14];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_21C458C60();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = v32;
    if (v32(v29, 1, v30))
    {
      v33 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = v11[15];
    v35 = (_QWORD *)((char *)v4 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v11[16];
    v39 = (_QWORD *)((char *)v4 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *((_BYTE *)v4 + v11[17]) = *((_BYTE *)a2 + v11[17]);
    *(_QWORD *)((char *)v4 + v11[18]) = *(_QWORD *)((char *)a2 + v11[18]);
    *((_BYTE *)v4 + v11[19]) = *((_BYTE *)a2 + v11[19]);
    *((_BYTE *)v4 + v11[20]) = *((_BYTE *)a2 + v11[20]);
    *((_BYTE *)v4 + v11[21]) = *((_BYTE *)a2 + v11[21]);
    *((_BYTE *)v4 + v11[22]) = *((_BYTE *)a2 + v11[22]);
    *((_BYTE *)v4 + v11[23]) = *((_BYTE *)a2 + v11[23]);
    *((_BYTE *)v4 + v11[24]) = *((_BYTE *)a2 + v11[24]);
    *((_BYTE *)v4 + v11[25]) = *((_BYTE *)a2 + v11[25]);
    *((_BYTE *)v4 + v11[26]) = *((_BYTE *)a2 + v11[26]);
    *((_BYTE *)v4 + v11[27]) = *((_BYTE *)a2 + v11[27]);
    *((_BYTE *)v4 + v11[28]) = *((_BYTE *)a2 + v11[28]);
    *((_BYTE *)v4 + v11[29]) = *((_BYTE *)a2 + v11[29]);
    v42 = v11[30];
    v43 = (_QWORD *)((char *)v4 + v42);
    v44 = (_QWORD *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v11[31];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dsta(v48, 1, v30))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v47, v48, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v47, 0, 1, v30);
    }
    v50 = v11[32];
    v51 = (char *)v4 + v50;
    v52 = (char *)a2 + v50;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)((char *)v4 + v11[33]) = *(_QWORD *)((char *)a2 + v11[33]);
    v53 = v11[34];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    if (__dsta((char *)a2 + v53, 1, v30))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v54, v55, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v54, 0, 1, v30);
    }
    v57 = v11[35];
    v58 = (_QWORD *)((char *)v4 + v57);
    v59 = (_QWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = v11[36];
    v62 = (char *)v4 + v61;
    v63 = (char *)a2 + v61;
    *(_QWORD *)(v62 + 13) = *(_QWORD *)(v63 + 13);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    v64 = v11[37];
    v65 = (char *)v4 + v64;
    v66 = (char *)a2 + v64;
    v65[8] = v66[8];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v67 = v11[38];
    v68 = (char *)v4 + v67;
    v69 = (char *)a2 + v67;
    v68[4] = v69[4];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    v70 = a3[5];
    v71 = (char *)v4 + v70;
    v72 = (char *)a2 + v70;
    v73 = *(_QWORD *)((char *)a2 + v70 + 24);
    swift_bridgeObjectRetain();
    if (v73)
    {
      v74 = *((_QWORD *)v72 + 4);
      *((_QWORD *)v71 + 3) = v73;
      *((_QWORD *)v71 + 4) = v74;
      (**(void (***)(char *, char *, uint64_t))(v73 - 8))(v71, v72, v73);
    }
    else
    {
      v75 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v75;
      *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
    }
    v76 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v76) = *(_QWORD *)((char *)a2 + v76);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for LibraryAudiobookInfo(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v5 = a1 + v4[10];
  v6 = sub_21C458BF4();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + v4[14];
  v9 = sub_21C458C60();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1 + v4[31];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  v13 = a1 + v4[34];
  if (!v11(v13, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  swift_bridgeObjectRelease();
  v14 = a1 + *(int *)(a2 + 20);
  if (*(_QWORD *)(v14 + 24))
    sub_21C3E2754(v14);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LibraryAudiobookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  a1[10] = a2[10];
  v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v11 = v10[10];
  __dst = (char *)a1 + v11;
  v77 = (char *)a2 + v11;
  v12 = sub_21C458BF4();
  v76 = *(_QWORD *)(v12 - 8);
  v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v78(v77, 1, v12))
  {
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(__dst, v77, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))(__dst, v77, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(__dst, 0, 1, v12);
  }
  v14 = v10[11];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v10[12];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v10[13];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = v10[14];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_21C458C60();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = v30;
  if (v30(v27, 1, v28))
  {
    v31 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = v10[15];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v10[16];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  *((_BYTE *)a1 + v10[17]) = *((_BYTE *)a2 + v10[17]);
  *(_QWORD *)((char *)a1 + v10[18]) = *(_QWORD *)((char *)a2 + v10[18]);
  *((_BYTE *)a1 + v10[19]) = *((_BYTE *)a2 + v10[19]);
  *((_BYTE *)a1 + v10[20]) = *((_BYTE *)a2 + v10[20]);
  *((_BYTE *)a1 + v10[21]) = *((_BYTE *)a2 + v10[21]);
  *((_BYTE *)a1 + v10[22]) = *((_BYTE *)a2 + v10[22]);
  *((_BYTE *)a1 + v10[23]) = *((_BYTE *)a2 + v10[23]);
  *((_BYTE *)a1 + v10[24]) = *((_BYTE *)a2 + v10[24]);
  *((_BYTE *)a1 + v10[25]) = *((_BYTE *)a2 + v10[25]);
  *((_BYTE *)a1 + v10[26]) = *((_BYTE *)a2 + v10[26]);
  *((_BYTE *)a1 + v10[27]) = *((_BYTE *)a2 + v10[27]);
  *((_BYTE *)a1 + v10[28]) = *((_BYTE *)a2 + v10[28]);
  *((_BYTE *)a1 + v10[29]) = *((_BYTE *)a2 + v10[29]);
  v40 = v10[30];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = v10[31];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dsta(v46, 1, v28))
  {
    v47 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v45, v46, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v45, 0, 1, v28);
  }
  v48 = v10[32];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  *(_QWORD *)((char *)a1 + v10[33]) = *(_QWORD *)((char *)a2 + v10[33]);
  v51 = v10[34];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  if (__dsta((char *)a2 + v51, 1, v28))
  {
    v54 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v52, v53, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v52, 0, 1, v28);
  }
  v55 = v10[35];
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = v10[36];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  *(_QWORD *)(v60 + 13) = *(_QWORD *)(v61 + 13);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  v62 = v10[37];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v63[8] = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = v10[38];
  v66 = (char *)a1 + v65;
  v67 = (char *)a2 + v65;
  v66[4] = v67[4];
  *(_DWORD *)v66 = *(_DWORD *)v67;
  v68 = a3[5];
  v69 = (char *)a1 + v68;
  v70 = (char *)a2 + v68;
  v71 = *(_QWORD *)((char *)a2 + v68 + 24);
  swift_bridgeObjectRetain();
  if (v71)
  {
    v72 = *((_QWORD *)v70 + 4);
    *((_QWORD *)v69 + 3) = v71;
    *((_QWORD *)v69 + 4) = v72;
    (**(void (***)(char *, char *, uint64_t))(v71 - 8))(v69, v70, v71);
  }
  else
  {
    v73 = *((_OWORD *)v70 + 1);
    *(_OWORD *)v69 = *(_OWORD *)v70;
    *((_OWORD *)v69 + 1) = v73;
    *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
  }
  v74 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v74) = *(_QWORD *)((char *)a2 + v74);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LibraryAudiobookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v7 = v6[10];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[11];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v6[12];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)v20 = v22;
  v23 = v6[13];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = v6[14];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_21C458C60();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_12:
    v34 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_13:
  v35 = v6[15];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = v6[16];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[17]) = *((_BYTE *)a2 + v6[17]);
  *(_QWORD *)((char *)a1 + v6[18]) = *(_QWORD *)((char *)a2 + v6[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[19]) = *((_BYTE *)a2 + v6[19]);
  *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
  *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
  *((_BYTE *)a1 + v6[22]) = *((_BYTE *)a2 + v6[22]);
  *((_BYTE *)a1 + v6[23]) = *((_BYTE *)a2 + v6[23]);
  *((_BYTE *)a1 + v6[24]) = *((_BYTE *)a2 + v6[24]);
  *((_BYTE *)a1 + v6[25]) = *((_BYTE *)a2 + v6[25]);
  *((_BYTE *)a1 + v6[26]) = *((_BYTE *)a2 + v6[26]);
  *((_BYTE *)a1 + v6[27]) = *((_BYTE *)a2 + v6[27]);
  *((_BYTE *)a1 + v6[28]) = *((_BYTE *)a2 + v6[28]);
  *((_BYTE *)a1 + v6[29]) = *((_BYTE *)a2 + v6[29]);
  v41 = v6[30];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = v6[31];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = v31((char *)a1 + v44, 1, v29);
  v48 = v31(v46, 1, v29);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v45, v46, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v45, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v45, v29);
LABEL_18:
    v49 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v45, v46, v29);
LABEL_19:
  v50 = v6[32];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = *(_QWORD *)v52;
  v51[8] = v52[8];
  *(_QWORD *)v51 = v53;
  *(_QWORD *)((char *)a1 + v6[33]) = *(_QWORD *)((char *)a2 + v6[33]);
  v54 = v6[34];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = v31((char *)a1 + v54, 1, v29);
  v58 = v31(v56, 1, v29);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v55, v56, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v55, v29);
LABEL_24:
    v59 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v55, v56, v29);
LABEL_25:
  v60 = v6[35];
  v61 = (_QWORD *)((char *)a1 + v60);
  v62 = (_QWORD *)((char *)a2 + v60);
  *v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = v6[36];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = *(_OWORD *)v65;
  *(_QWORD *)(v64 + 13) = *(_QWORD *)(v65 + 13);
  *(_OWORD *)v64 = v66;
  v67 = v6[37];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v68[8] = v70;
  v71 = v6[38];
  v72 = (char *)a1 + v71;
  v73 = (char *)a2 + v71;
  v74 = v73[4];
  *(_DWORD *)v72 = *(_DWORD *)v73;
  v72[4] = v74;
  v75 = a3[5];
  v76 = (uint64_t)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = *(_QWORD *)((char *)a2 + v75 + 24);
  if (!*(_QWORD *)((char *)a1 + v75 + 24))
  {
    if (v78)
    {
      *(_QWORD *)(v76 + 24) = v78;
      *(_QWORD *)(v76 + 32) = *((_QWORD *)v77 + 4);
      (**(void (***)(uint64_t, char *))(v78 - 8))(v76, v77);
      goto LABEL_32;
    }
LABEL_31:
    v79 = *(_OWORD *)v77;
    v80 = *((_OWORD *)v77 + 1);
    *(_QWORD *)(v76 + 32) = *((_QWORD *)v77 + 4);
    *(_OWORD *)v76 = v79;
    *(_OWORD *)(v76 + 16) = v80;
    goto LABEL_32;
  }
  if (!v78)
  {
    sub_21C3E2754(v76);
    goto LABEL_31;
  }
  sub_21C3F5A14((uint64_t *)v76, (uint64_t *)v77);
LABEL_32:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_21C3F5A14(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for LibraryAudiobookInfo(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v7 = v6[10];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  v13 = v6[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  v16 = v6[14];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_21C458C60();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    v22 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_BYTE *)(a1 + v6[17]) = *(_BYTE *)(a2 + v6[17]);
  *(_QWORD *)(a1 + v6[18]) = *(_QWORD *)(a2 + v6[18]);
  *(_BYTE *)(a1 + v6[19]) = *(_BYTE *)(a2 + v6[19]);
  *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
  *(_BYTE *)(a1 + v6[21]) = *(_BYTE *)(a2 + v6[21]);
  *(_BYTE *)(a1 + v6[22]) = *(_BYTE *)(a2 + v6[22]);
  *(_BYTE *)(a1 + v6[23]) = *(_BYTE *)(a2 + v6[23]);
  *(_BYTE *)(a1 + v6[24]) = *(_BYTE *)(a2 + v6[24]);
  *(_BYTE *)(a1 + v6[25]) = *(_BYTE *)(a2 + v6[25]);
  *(_BYTE *)(a1 + v6[26]) = *(_BYTE *)(a2 + v6[26]);
  *(_BYTE *)(a1 + v6[27]) = *(_BYTE *)(a2 + v6[27]);
  *(_BYTE *)(a1 + v6[28]) = *(_BYTE *)(a2 + v6[28]);
  *(_BYTE *)(a1 + v6[29]) = *(_BYTE *)(a2 + v6[29]);
  *(_OWORD *)(a1 + v6[30]) = *(_OWORD *)(a2 + v6[30]);
  v23 = v6[31];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v21((const void *)(a2 + v23), 1, v19))
  {
    v26 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v24, v25, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
  }
  v27 = v6[32];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)(a1 + v6[33]) = *(_QWORD *)(a2 + v6[33]);
  v30 = v6[34];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (v21((const void *)(a2 + v30), 1, v19))
  {
    v33 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v31, v32, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[35]) = *(_OWORD *)(a2 + v6[35]);
  v34 = v6[36];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_QWORD *)(v35 + 13) = *(_QWORD *)(v36 + 13);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  v37 = v6[37];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = v6[38];
  v41 = a1 + v40;
  v42 = a2 + v40;
  *(_DWORD *)v41 = *(_DWORD *)v42;
  *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
  v43 = a3[5];
  v44 = a3[6];
  v45 = a1 + v43;
  v46 = a2 + v43;
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for LibraryAudiobookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v12 = v11[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_21C458BF4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = v11[11];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = v11[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = v11[13];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = v11[14];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = sub_21C458C60();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_12:
    v42 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_13:
  v43 = v11[15];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  v48 = v11[16];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[17]) = *((_BYTE *)a2 + v11[17]);
  *(_QWORD *)((char *)a1 + v11[18]) = *(_QWORD *)((char *)a2 + v11[18]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[19]) = *((_BYTE *)a2 + v11[19]);
  *((_BYTE *)a1 + v11[20]) = *((_BYTE *)a2 + v11[20]);
  *((_BYTE *)a1 + v11[21]) = *((_BYTE *)a2 + v11[21]);
  *((_BYTE *)a1 + v11[22]) = *((_BYTE *)a2 + v11[22]);
  *((_BYTE *)a1 + v11[23]) = *((_BYTE *)a2 + v11[23]);
  *((_BYTE *)a1 + v11[24]) = *((_BYTE *)a2 + v11[24]);
  *((_BYTE *)a1 + v11[25]) = *((_BYTE *)a2 + v11[25]);
  *((_BYTE *)a1 + v11[26]) = *((_BYTE *)a2 + v11[26]);
  *((_BYTE *)a1 + v11[27]) = *((_BYTE *)a2 + v11[27]);
  *((_BYTE *)a1 + v11[28]) = *((_BYTE *)a2 + v11[28]);
  *((_BYTE *)a1 + v11[29]) = *((_BYTE *)a2 + v11[29]);
  v53 = v11[30];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  v57 = *v55;
  v56 = v55[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  v58 = v11[31];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = v39((char *)a1 + v58, 1, v37);
  v62 = v39(v60, 1, v37);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v59, v60, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v59, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v59, v37);
LABEL_18:
    v63 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v59, v60, v37);
LABEL_19:
  v64 = v11[32];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v65[8] = v66[8];
  *(_QWORD *)((char *)a1 + v11[33]) = *(_QWORD *)((char *)a2 + v11[33]);
  v67 = v11[34];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = v39((char *)a1 + v67, 1, v37);
  v71 = v39(v69, 1, v37);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v68, v69, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v68, 0, 1, v37);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v68, v37);
LABEL_24:
    v72 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v68, v69, v37);
LABEL_25:
  v73 = v11[35];
  v74 = (_QWORD *)((char *)a1 + v73);
  v75 = (_QWORD *)((char *)a2 + v73);
  v77 = *v75;
  v76 = v75[1];
  *v74 = v77;
  v74[1] = v76;
  swift_bridgeObjectRelease();
  v78 = v11[36];
  v79 = (char *)a1 + v78;
  v80 = (char *)a2 + v78;
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_QWORD *)(v79 + 13) = *(_QWORD *)(v80 + 13);
  v81 = v11[37];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v82[8] = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v84 = v11[38];
  v85 = (char *)a1 + v84;
  v86 = (char *)a2 + v84;
  v85[4] = v86[4];
  *(_DWORD *)v85 = *(_DWORD *)v86;
  v87 = a3[5];
  v88 = (char *)a1 + v87;
  if (*(_QWORD *)((char *)a1 + v87 + 24))
    sub_21C3E2754((uint64_t)a1 + v87);
  v89 = *(_OWORD *)((char *)a2 + v87 + 16);
  *(_OWORD *)v88 = *(_OWORD *)((char *)a2 + v87);
  *((_OWORD *)v88 + 1) = v89;
  *((_QWORD *)v88 + 4) = *(_QWORD *)((char *)a2 + v87 + 32);
  v90 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v90) = *(_QWORD *)((char *)a2 + v90);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryAudiobookInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C3F6578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryAudiobookInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C3F6610(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CommonLibraryAssetInfo();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  return result;
}

uint64_t sub_21C3F668C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static SeriesArtistInfo.ArtistPlurality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SeriesArtistInfo.ArtistPlurality.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t SeriesArtistInfo.ArtistPlurality.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

BOOL static SeriesArtistInfo.ArtistType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SeriesArtistInfo.ArtistType.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t SeriesArtistInfo.ArtistType.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

BOOL sub_21C3F6814(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SeriesArtistInfo.artistType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void SeriesArtistInfo.artistPlurality.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t SeriesArtistInfo.totalArtistCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SeriesArtistInfo.names.getter()
{
  return swift_bridgeObjectRetain();
}

void SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((a1 & 1) != 0)
  {
    v12 = 0;
    v13 = a3 & 1;
    goto LABEL_8;
  }
  if ((a3 & 1) == 0)
  {
    if (a4)
    {
      v14 = *(_QWORD *)(a4 + 16);
      if (v14)
      {
        if (v14 > a2)
        {
          swift_bridgeObjectRelease();
          if (qword_255279EF0 != -1)
            swift_once();
          v15 = sub_21C458D20();
          sub_21C3E2BA0(v15, (uint64_t)qword_25527A278);
          v8 = sub_21C458D08();
          v9 = sub_21C45920C();
          if (!os_log_type_enabled(v8, v9))
            goto LABEL_22;
          v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v10 = 0;
          v11 = "Invalid data in authorDisplayInfo or narratorDisplayInfo values. Count provided was less than number of "
                "names provided. Cannot construct a valid SeriesArtistInfo.";
          goto LABEL_21;
        }
        v12 = 256;
        v17 = 1024;
        if (a2 == 2)
          v17 = 512;
        if (a2 == 3)
          v17 = 768;
        v13 = 0;
        if (a2 != 1)
          v12 = v17;
LABEL_8:
        *a6 = v12 | *a5;
        a6[1] = a2;
        a6[2] = v13;
        a6[3] = a4;
        return;
      }
      swift_bridgeObjectRelease();
    }
    if (qword_255279EF0 != -1)
      swift_once();
    v16 = sub_21C458D20();
    sub_21C3E2BA0(v16, (uint64_t)qword_25527A278);
    v8 = sub_21C458D08();
    v9 = sub_21C45920C();
    if (!os_log_type_enabled(v8, v9))
      goto LABEL_22;
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    v11 = "Missing names data in authorDisplayInfo or narratorDisplayInfo values. Cannot construct a valid SeriesArtistInfo.";
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  if (qword_255279EF0 != -1)
    swift_once();
  v7 = sub_21C458D20();
  sub_21C3E2BA0(v7, (uint64_t)qword_25527A278);
  v8 = sub_21C458D08();
  v9 = sub_21C45920C();
  if (!os_log_type_enabled(v8, v9))
    goto LABEL_22;
  v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v10 = 0;
  v11 = "Missing count data in authorDisplayInfo or narratorDisplayInfo values. Cannot construct a valid SeriesArtistInfo.";
LABEL_21:
  _os_log_impl(&dword_21C3E0000, v8, v9, v11, v10, 2u);
  MEMORY[0x22077C294](v10, -1, -1);
LABEL_22:

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 1;
}

unint64_t sub_21C3F6AD4()
{
  unint64_t result;

  result = qword_25527A370;
  if (!qword_25527A370)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesArtistInfo.ArtistPlurality, &type metadata for SeriesArtistInfo.ArtistPlurality);
    atomic_store(result, (unint64_t *)&qword_25527A370);
  }
  return result;
}

unint64_t sub_21C3F6B1C()
{
  unint64_t result;

  result = qword_25527A378;
  if (!qword_25527A378)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesArtistInfo.ArtistType, &type metadata for SeriesArtistInfo.ArtistType);
    atomic_store(result, (unint64_t *)&qword_25527A378);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SeriesArtistInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SeriesArtistInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SeriesArtistInfo(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SeriesArtistInfo(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesArtistInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesArtistInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo()
{
  return &type metadata for SeriesArtistInfo;
}

uint64_t storeEnumTagSinglePayload for SeriesArtistInfo.ArtistPlurality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21C3F6DA4 + 4 * byte_21C45A855[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21C3F6DD8 + 4 * byte_21C45A850[v4]))();
}

uint64_t sub_21C3F6DD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3F6DE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C3F6DE8);
  return result;
}

uint64_t sub_21C3F6DF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C3F6DFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21C3F6E00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3F6E08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo.ArtistPlurality()
{
  return &type metadata for SeriesArtistInfo.ArtistPlurality;
}

uint64_t getEnumTagSinglePayload for FinishedDateKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SeriesArtistInfo.ArtistType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C3F6F00 + 4 * byte_21C45A85F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C3F6F34 + 4 * byte_21C45A85A[v4]))();
}

uint64_t sub_21C3F6F34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3F6F3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C3F6F44);
  return result;
}

uint64_t sub_21C3F6F50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C3F6F58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C3F6F5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3F6F64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_21C3F6F70(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesArtistInfo.ArtistType()
{
  return &type metadata for SeriesArtistInfo.ArtistType;
}

uint64_t sub_21C3F6F8C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_21C45917C();
  if (!v18)
    return sub_21C45905C();
  v19 = v18;
  v25 = v15;
  v39 = sub_21C4593BC();
  v32 = sub_21C4593C8();
  sub_21C4593A4();
  v36 = v17;
  result = sub_21C459170();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_21C4591F4();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_21C4593B0();
      sub_21C4591AC();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

void sub_21C3F7268(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F72C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F736C + 4 * byte_21C45A9A8[a2]))(0x6E6F6974616C6572);
}

uint64_t sub_21C3F736C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6974616C6572 && v1 == 0xED00007370696873)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_21C3F747C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_21C3F74C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F759C + 4 * byte_21C45A9B9[a2]))(0xD000000000000010);
}

uint64_t sub_21C3F759C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x800000021C45F370)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21C3F76CC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7107189;
  else
    v3 = 1701667182;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7107189;
  else
    v5 = 1701667182;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_21C3F7760(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F7798(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F780C + 4 * byte_21C45A9C7[a2]))(1701667182);
}

uint64_t sub_21C3F780C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701667182 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_21C3F78C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F7904(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F7960 + 4 * byte_21C45A9D0[a2]))(7628135);
}

uint64_t sub_21C3F7960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 7628135 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_21C3F7A00(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F7A48(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F7AF0 + 4 * byte_21C45A9DB[a2]))(0xD000000000000013);
}

uint64_t sub_21C3F7AF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000013 && v1 == 0x800000021C45F1E0)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_21C3F7BF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F7C30(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F7C90 + 4 * byte_21C45A9E6[a2]))(0x647261646E617473);
}

uint64_t sub_21C3F7C90(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x647261646E617473 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21C3F7D34(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F43676E69746172;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEB00000000746E75;
  if ((a2 & 1) != 0)
    v5 = 0x6F43676E69746172;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000746E75;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_21C3F7DDC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA0000000000656DLL;
  v3 = 0x614E736569726573;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65636E6575716573;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0xEE007265626D754ELL;
    else
      v6 = 0x800000021C45F000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x614E736569726573;
  v6 = 0xEA0000000000656DLL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65636E6575716573;
    else
      v3 = 0xD000000000000014;
    if (v7 == 1)
      v2 = 0xEE007265626D754ELL;
    else
      v2 = 0x800000021C45F000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21C3F7F0C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 7107189;
    else
      v3 = 0x6874646977;
    if (v2 == 1)
      v4 = 0xE300000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 7107189;
      else
        v6 = 0x6874646977;
      if (v5 == 1)
        v7 = 0xE300000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x746867696568;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x746867696568)
  {
LABEL_21:
    v8 = sub_21C4594F4();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21C3F8004(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_21C3F8034 + 4 * byte_21C45A9EA[a1]))("uip_floating_tab_bar", 20);
}

void sub_21C3F8034(char a1@<W8>)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F8094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_21C459368();
  v2 = v1;
  if (v0 == sub_21C459368() && v2 == v3)
    v4 = 1;
  else
    v4 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_21C3F813C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F8198(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F8218 + 4 * byte_21C45A9F7[a2]))(0x69646E6563736564);
}

uint64_t sub_21C3F8218(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x69646E6563736564 && v1 == 0xEA0000000000676ELL)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_21C3F82E4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_21C3F8334(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21C3F83A4 + 4 * byte_21C45AA01[a2]))(0xD000000000000011);
}

uint64_t sub_21C3F83A4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x800000021C45F280)
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_21C3F8448(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x73656D616ELL;
  else
    v2 = 0x746E756F63;
  if ((a2 & 1) != 0)
    v3 = 0x73656D616ELL;
  else
    v3 = 0x746E756F63;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_21C4594F4();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_21C3F84BC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000013;
  else
    v3 = 0xD000000000000012;
  if (v2)
    v4 = 0x800000021C45F300;
  else
    v4 = 0x800000021C45F320;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000013;
  else
    v5 = 0xD000000000000012;
  if ((a2 & 1) != 0)
    v6 = 0x800000021C45F320;
  else
    v6 = 0x800000021C45F300;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_21C3F8564(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_21C3F8594 + 4 * byte_21C45AA06[a1]))("coverEffectV2", 13);
}

void sub_21C3F8594(char a1@<W8>)
{
  __asm { BR              X10 }
}

uint64_t sub_21C3F8648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_21C459368();
  v2 = v1;
  if (v0 == sub_21C459368() && v2 == v3)
    v4 = 1;
  else
    v4 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_21C3F8744(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aData_3[8 * a1] == *(_QWORD *)&aData_3[8 * a2])
    v2 = 1;
  else
    v2 = sub_21C4594F4();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_21C3F87A8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1802465122;
  else
    v3 = 0x6F6F626F69647561;
  if (v2)
    v4 = 0xE90000000000006BLL;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1802465122;
  else
    v5 = 0x6F6F626F69647561;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE90000000000006BLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BookFoundation::SeriesType_optional __swiftcall SeriesType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  BookFoundation::SeriesType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t SeriesType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1802465122;
  else
    return 0x6F6F626F69647561;
}

uint64_t sub_21C3F88E0(char *a1, char *a2)
{
  return sub_21C3F87A8(*a1, *a2);
}

uint64_t sub_21C3F88EC()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C3F8968()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C3F89C0()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

BookFoundation::SeriesType_optional sub_21C3F8A38(Swift::String *a1)
{
  return SeriesType.init(rawValue:)(*a1);
}

void sub_21C3F8A44(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1802465122;
  if (!*v1)
    v2 = 0x6F6F626F69647561;
  v3 = 0xE90000000000006BLL;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_21C3F8A80()
{
  sub_21C3FF270();
  return sub_21C459008();
}

uint64_t sub_21C3F8ADC()
{
  sub_21C3FF270();
  return sub_21C458FD8();
}

uint64_t MappedSeriesInfo.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void MappedSeriesInfo.contentKind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

BookFoundation::MappedSeriesInfo __swiftcall MappedSeriesInfo.init(id:contentKind:)(Swift::String id, BookFoundation::ContentKind contentKind)
{
  uint64_t v2;
  char v3;
  BookFoundation::MappedSeriesInfo result;

  v3 = *(_BYTE *)contentKind;
  *(Swift::String *)v2 = id;
  *(_BYTE *)(v2 + 16) = v3;
  result.id = id;
  result.contentKind = contentKind;
  return result;
}

uint64_t SeriesInfo.assets.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[7];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v6 = sub_21C3F8F0C(a1, a2);
  if (v2)
    return v3;
  v3 = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  if (!v8)
    return v3;
  v42 = v8;
  if (!(v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_6;
LABEL_26:
    swift_bridgeObjectRelease();
    return v3;
  }
  swift_bridgeObjectRetain();
  v36 = sub_21C459434();
  swift_bridgeObjectRelease();
  if (!v36)
    goto LABEL_26;
  swift_bridgeObjectRetain();
  v9 = sub_21C459434();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    v39 = 0;
    v40 = a2;
    v41 = a1;
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
LABEL_6:
  v43 = MEMORY[0x24BEE4AF8];
  sub_21C3FD4B0(0, v9 & ~(v9 >> 63), 0);
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v39 = 0;
  v40 = a2;
  v41 = a1;
  v38 = v3;
  v10 = v43;
  v11 = v42;
  if ((v42 & 0xC000000000000001) != 0)
  {
    v12 = 0;
    do
    {
      v13 = MEMORY[0x22077BA00](v12, v11);
      v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
      v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
      v43 = v10;
      v17 = *(_QWORD *)(v10 + 16);
      v16 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
      {
        sub_21C3FD4B0(v16 > 1, v17 + 1, 1);
        v11 = v42;
        v10 = v43;
      }
      ++v12;
      *(_QWORD *)(v10 + 16) = v17 + 1;
      v18 = (_QWORD *)(v10 + 24 * v17);
      v18[4] = v15;
      v18[5] = v14;
      v18[6] = v13;
    }
    while (v9 != v12);
  }
  else
  {
    v19 = (void **)(v42 + 32);
    do
    {
      v20 = *v19;
      v21 = (uint64_t *)((char *)*v19 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
      v23 = *v21;
      v22 = v21[1];
      v43 = v10;
      v25 = *(_QWORD *)(v10 + 16);
      v24 = *(_QWORD *)(v10 + 24);
      v26 = v20;
      swift_bridgeObjectRetain();
      if (v25 >= v24 >> 1)
      {
        sub_21C3FD4B0(v24 > 1, v25 + 1, 1);
        v10 = v43;
      }
      *(_QWORD *)(v10 + 16) = v25 + 1;
      v27 = (_QWORD *)(v10 + 24 * v25);
      v27[4] = v23;
      v27[5] = v22;
      v27[6] = v26;
      ++v19;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  v3 = v38;
LABEL_18:
  if (*(_QWORD *)(v10 + 16))
  {
    sub_21C3E344C(&qword_25527A0D8);
    v28 = sub_21C459458();
  }
  else
  {
    v28 = MEMORY[0x24BEE4B00];
  }
  v43 = v28;
  sub_21C3FE888(v10, 1, &v43);
  if (!v39)
  {
    v29 = swift_bridgeObjectRelease();
    v30 = v43;
    v43 = v3;
    MEMORY[0x24BDAC7A8](v29);
    v37[2] = v41;
    v37[3] = v40;
    v37[4] = v30;
    AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
    v32 = sub_21C45908C();
    v33 = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v32);
    v35 = sub_21C3F6F8C((void (*)(char *, char *))sub_21C3FEB48, (uint64_t)v37, v32, AssociatedTypeWitness, MEMORY[0x24BEE4078], v33, MEMORY[0x24BEE40A8], v34);
    swift_bridgeObjectRelease();
    swift_release();
    return v35;
  }
LABEL_28:
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_21C3F8F0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  void (*v18)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *TupleTypeMetadata2;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  id v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t result;
  char v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  id v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(uint64_t, uint64_t);
  char *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;

  v107 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  AssociatedConformanceWitness = (char *)&v92 - v10;
  v101 = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v101, v12);
  v102 = *(char **)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v104 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (id *)((char *)&v92 - v16);
  v18 = *(void (**)(uint64_t, uint64_t))(v4 + 40);
  v105 = v2;
  v108 = a1;
  v103 = v18;
  v18(a1, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      v41 = *v17;
      if (MSeries.assetsResourceSet.getter() && (v42 = sub_21C44F728(), swift_release(), v42))
      {
        v43 = v41;
        v44 = (char *)v106;
        v45 = (_QWORD *)sub_21C452538(v42);
        AssociatedConformanceWitness = v44;
        swift_bridgeObjectRelease();

        v110 = v45;
        MEMORY[0x24BDAC7A8](v46);
        v47 = v107;
        *(&v92 - 4) = v108;
        *(&v92 - 3) = v47;
        *(&v92 - 2) = (uint64_t)v43;
        sub_21C3E344C(&qword_25527A490);
        swift_getAssociatedTypeWitness();
        sub_21C3FF70C();
        v48 = sub_21C458FA8();
        if (!v44)
          AssociatedConformanceWitness = (char *)v48;
        swift_bridgeObjectRelease();

      }
      else
      {

        sub_21C3FF6AC();
        swift_allocError();
        *v56 = 0;
        v56[1] = 0;
        swift_willThrow();

      }
      return (uint64_t)AssociatedConformanceWitness;
    }
    (*((void (**)(id *, uint64_t))v102 + 1))(v17, v13);
LABEL_16:
    v50 = v104;
    v51 = v108;
    v103(v108, v4);
    v52 = swift_getEnumCaseMultiPayload();
    v53 = v107;
    if (v52)
    {
      if (v52 != 1)
      {
        swift_getAssociatedTypeWitness();
        v54 = sub_21C45905C();
        v55 = v50;
        AssociatedConformanceWitness = (char *)v54;
        (*((void (**)(char *, uint64_t))v102 + 1))(v55, v13);
        return (uint64_t)AssociatedConformanceWitness;
      }
    }
    else
    {

    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v50, AssociatedTypeWitness);
    AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
    v57 = (_QWORD *)sub_21C419E44(AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness);
    if (v57)
    {
      v100 = v6;
      v105 = &v92;
      v110 = v57;
      MEMORY[0x24BDAC7A8](v57);
      *(&v92 - 4) = v51;
      *(&v92 - 3) = v53;
      *(&v92 - 2) = (uint64_t)v9;
      swift_getAssociatedTypeWitness();
      v58 = sub_21C45908C();
      swift_getAssociatedTypeWitness();
      MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v58);
      v59 = v106;
      sub_21C458FA8();
      if (v59)
      {
        (*(void (**)(char *, uint64_t))(v100 + 8))(v9, AssociatedTypeWitness);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v62 = (*((uint64_t (**)(uint64_t, char *))AssociatedConformanceWitness + 9))(AssociatedTypeWitness, AssociatedConformanceWitness);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v9, AssociatedTypeWitness);
        if ((v62 & 1) != 0)
        {
          LOBYTE(v109) = 0;
          sub_21C3E344C(&qword_25527A240);
          sub_21C4593E0();
          swift_bridgeObjectRelease();
          SeriesListSortOrder.sortedAssets(for:)();
          swift_bridgeObjectRelease();
          AssociatedConformanceWitness = (char *)sub_21C4593E0();
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_21C3E344C(&qword_25527A240);
          v63 = (_QWORD *)sub_21C4593E0();
          swift_bridgeObjectRelease();
          v109 = v63;
          swift_bridgeObjectRetain();
          sub_21C3E9528(&v109);
          swift_bridgeObjectRelease();
          AssociatedConformanceWitness = (char *)sub_21C4593E0();
          swift_release();
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
      sub_21C3FF6AC();
      swift_allocError();
      *v60 = 0;
      v60[1] = 0;
      swift_willThrow();
    }
    return (uint64_t)AssociatedConformanceWitness;
  }
  v97 = v9;
  v96 = *(id *)((char *)v17 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(char *, id *, uint64_t))(v6 + 32))(AssociatedConformanceWitness, v17, AssociatedTypeWitness);
  v21 = v107;
  v20 = v108;
  v22 = swift_getAssociatedConformanceWitness();
  v95 = AssociatedConformanceWitness;
  v23 = (_QWORD *)sub_21C419E44(AssociatedTypeWitness, v22);
  v100 = v6;
  if (!v23)
  {
    swift_getAssociatedTypeWitness();
    v23 = (_QWORD *)sub_21C45905C();
  }
  v98 = v23;
  v110 = v23;
  MEMORY[0x24BDAC7A8](v23);
  *(&v92 - 2) = v20;
  *(&v92 - 1) = v21;
  v92 = v22;
  v99 = v24;
  swift_getAssociatedTypeWitness();
  v25 = sub_21C45908C();
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v93 = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v25);
  v94 = v25;
  v27 = (_QWORD *)v106;
  v110 = (_QWORD *)sub_21C3F6F8C((void (*)(char *, char *))sub_21C3FF758, (uint64_t)(&v92 - 4), v25, TupleTypeMetadata2, MEMORY[0x24BEE4078], v93, MEMORY[0x24BEE40A8], v28);
  MEMORY[0x24BDAC7A8](v110);
  v29 = v107;
  *(&v92 - 2) = v108;
  *(&v92 - 1) = v29;
  v30 = sub_21C45908C();
  MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v30);
  AssociatedConformanceWitness = (char *)sub_21C458DB0();
  v31 = v96;
  v32 = MSeries.assetsResourceSet.getter();
  v9 = v97;
  if (!v32 || (v33 = sub_21C44F728(), swift_release(), !v33))
  {

    AssociatedTypeWitness = v99;
    v49 = v100;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v95, v99);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = (unint64_t)v27;
    v6 = v49;
    goto LABEL_16;
  }
  v34 = v31;
  v35 = (_QWORD *)sub_21C452538(v33);
  swift_bridgeObjectRelease();

  v105 = &v92;
  v106 = (unint64_t)v35;
  v110 = v35;
  MEMORY[0x24BDAC7A8](v36);
  v37 = v107;
  v38 = v108;
  *(&v92 - 4) = v108;
  *(&v92 - 3) = v37;
  *(&v92 - 2) = (uint64_t)v34;
  *(&v92 - 1) = (uint64_t)AssociatedConformanceWitness;
  sub_21C3E344C(&qword_25527A490);
  v39 = swift_getAssociatedTypeWitness();
  sub_21C3FF70C();
  v40 = sub_21C458FA8();
  if (v27)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v95, v99);
    swift_bridgeObjectRelease();
    return (uint64_t)AssociatedConformanceWitness;
  }
  AssociatedConformanceWitness = (char *)v40;
  v104 = (char *)v39;
  swift_bridgeObjectRelease();
  v110 = v98;
  if ((sub_21C4591DC() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v95, v99);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)AssociatedConformanceWitness;
  }
  v64 = v106;
  v65 = v100;
  if (v106 >> 62)
  {
    swift_bridgeObjectRetain();
    v66 = sub_21C459434();
    swift_bridgeObjectRelease();
    v102 = AssociatedConformanceWitness;
    v103 = (void (*)(uint64_t, uint64_t))v34;
    if (v66)
      goto LABEL_33;
LABEL_43:
    swift_bridgeObjectRelease();
    v68 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_44;
  }
  v66 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
  v102 = AssociatedConformanceWitness;
  v103 = (void (*)(uint64_t, uint64_t))v34;
  if (!v66)
    goto LABEL_43;
LABEL_33:
  v110 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21C3FD494(0, v66 & ~(v66 >> 63), 0);
  v105 = (_QWORD *)v66;
  if (v66 < 0)
  {
    __break(1u);
    swift_release();
    __break(1u);
    goto LABEL_49;
  }
  v67 = 0;
  v68 = v110;
  v69 = v64 & 0xC000000000000001;
  do
  {
    v70 = v65;
    if (v69)
      v71 = (char *)MEMORY[0x22077BA00](v67, v64);
    else
      v71 = (char *)*(id *)(v64 + 8 * (_QWORD)v67 + 32);
    v72 = v71;
    v73 = *(_QWORD *)&v71[OBJC_IVAR____TtC14BookFoundation9MResource_id];
    v74 = *(_QWORD *)&v71[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
    swift_bridgeObjectRetain();

    v110 = v68;
    v76 = v68[2];
    v75 = v68[3];
    if (v76 >= v75 >> 1)
    {
      sub_21C3FD494(v75 > 1, v76 + 1, 1);
      v68 = v110;
    }
    v67 = (_QWORD *)((char *)v67 + 1);
    v68[2] = v76 + 1;
    v77 = &v68[2 * v76];
    v77[4] = v73;
    v77[5] = v74;
    v64 = v106;
    v65 = v70;
    v38 = v108;
  }
  while (v105 != v67);
  swift_bridgeObjectRelease();
LABEL_44:
  v78 = sub_21C40A08C((uint64_t)v68);
  v79 = swift_bridgeObjectRelease();
  v110 = v98;
  MEMORY[0x24BDAC7A8](v79);
  v80 = v107;
  *(&v92 - 4) = v38;
  *(&v92 - 3) = v80;
  *(&v92 - 2) = v78;
  v81 = v94;
  MEMORY[0x22077C1E0](MEMORY[0x24BEE12F0], v94);
  v82 = (_QWORD *)sub_21C459398();
  v83 = swift_bridgeObjectRelease();
  v105 = &v92;
  v110 = v82;
  MEMORY[0x24BDAC7A8](v83);
  *(&v92 - 4) = v38;
  *(&v92 - 3) = v80;
  v84 = v95;
  *(&v92 - 2) = (uint64_t)v95;
  MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v81);
  sub_21C458FA8();
  v106 = 0;
  swift_bridgeObjectRelease();
  sub_21C459050();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v85 = v99;
  v86 = (*(uint64_t (**)(uint64_t))(v92 + 72))(v99);
  v87 = v103;
  if ((v86 & 1) != 0)
  {
    LOBYTE(v110) = 0;
    sub_21C3E344C(&qword_25527A240);
    sub_21C4593E0();
    swift_bridgeObjectRelease();
    SeriesListSortOrder.sortedAssets(for:)();
    swift_bridgeObjectRelease();
    v88 = sub_21C4593E0();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v65 + 8))(v84, v85);
    return v88;
  }
  v89 = v103;
  sub_21C3E344C(&qword_25527A240);
  v90 = (_QWORD *)sub_21C4593E0();
  swift_bridgeObjectRelease();
  v110 = v90;
  swift_bridgeObjectRetain();
  v91 = v106;
  sub_21C3E9528(&v110);
  if (!v91)
  {
    swift_bridgeObjectRelease();
    AssociatedConformanceWitness = (char *)sub_21C4593E0();
    swift_release();

    (*(void (**)(char *, uint64_t))(v65 + 8))(v84, v99);
    return (uint64_t)AssociatedConformanceWitness;
  }
LABEL_49:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_21C3F9D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39[3];
  uint64_t v40;

  v33 = a2;
  v40 = a3;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_21C459278();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - v9;
  v11 = a1;
  v12 = swift_checkMetadataState();
  v13 = (void *)ContentInfo.storeData.getter(v12, v5);

  v14 = v40;
  if (!v13)
  {
    v28 = v8;
    v30 = AssociatedConformanceWitness;
    v31 = v10;
    v29 = v7;
    v15 = v40;
    v32 = v11;
    v16 = ContentInfo.id.getter(v12, v5);
    v18 = v33;
    if (*(_QWORD *)(v33 + 16) && (v19 = sub_21C45191C(v16, v17), (v20 & 1) != 0))
    {
      v21 = *(id *)(*(_QWORD *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRelease();
      v22 = v31;
      v11 = v32;
      ContentInfo.libraryData.getter(v12, v5, v31);
      v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
        v36 = 0;
        v34 = 0u;
        v35 = 0u;
      }
      else
      {
        *((_QWORD *)&v35 + 1) = AssociatedTypeWitness;
        v36 = swift_getAssociatedConformanceWitness();
        v25 = sub_21C3E30F8((uint64_t *)&v34);
        (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(v25, v22, AssociatedTypeWitness);
      }
      v26 = v21;
      static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)&v34, v21, (uint64_t)&v37);

      sub_21C3FF670((uint64_t)&v34, &qword_25527A470);
      if (v38)
      {
        sub_21C3F349C(&v37, (uint64_t)v39);
        sub_21C3F349C(v39, (uint64_t)&v37);
        sub_21C3E344C(&qword_25527A240);
        return swift_dynamicCast();
      }
      sub_21C3FF670((uint64_t)&v37, &qword_25527A380);
      v14 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = v15;
      v11 = v32;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v14, v11, v12);
}

uint64_t SeriesInfo.assetCount.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = (_QWORD *)swift_getKeyPath();
  v5 = swift_getKeyPath();
  sub_21C41D1A4(KeyPath, v5, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_21C3FA0A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  return result;
}

uint64_t sub_21C3FA144@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  v3 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = MEMORY[0x22077B70C](v3, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

uint64_t SeriesInfo.assetMinimumCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41D494(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

void SeriesInfo.authorInfo.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void (*v18)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char v24;
  void *v25;
  id v26;
  char v27;
  id v28;
  id v29;
  char v30;
  char v31;
  char v32;
  id v33;
  uint64_t v34;
  unsigned __int8 (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned __int8 v47;
  unsigned __int8 v48;

  v45 = a2;
  v46 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v42 - v11;
  v13 = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v13, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (void **)((char *)&v42 - v16);
  v18 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
  v44 = v3;
  v18(a1, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v12, v17, AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v21 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      v22 = v21(AssociatedTypeWitness, AssociatedConformanceWitness);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, AssociatedTypeWitness);
      v43 = v21;
      if (v22)
      {
        v23 = *(void (**)(char *, uint64_t))(v7 + 8);
        v23(v10, AssociatedTypeWitness);
        v24 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
      }
      else
      {
        v35 = *(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
        v36 = v35(AssociatedTypeWitness, AssociatedConformanceWitness);
        v23 = *(void (**)(char *, uint64_t))(v7 + 8);
        v23(v10, AssociatedTypeWitness);
        if ((v36 & 1) == 0)
        {
          sub_21C3FA5F0(a1, v45, v46);
LABEL_19:
          v23(v12, AssociatedTypeWitness);
          return;
        }
        v24 = v35(AssociatedTypeWitness, AssociatedConformanceWitness);
      }
      v37 = v24;
      v38 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
      v40 = v39 & 1;
      v41 = v43(AssociatedTypeWitness, AssociatedConformanceWitness);
      v48 = 0;
      SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v37, v38, v40, v41, &v48, v46);
      goto LABEL_19;
    }
    v25 = *v17;
  }
  else
  {
    v25 = *(void **)((char *)v17 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v7 + 8))(v17, AssociatedTypeWitness);
  }
  v26 = objc_msgSend(v25, sel_authorNames);
  if (v26)
  {

    v27 = *((_BYTE *)v25 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors);
  }
  else
  {
    if (*((_BYTE *)v25 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors) != 1)
    {

      sub_21C3FA5F0(a1, v45, v46);
      return;
    }
    v27 = 1;
  }
  v28 = v25;
  v29 = MSeries.authorCount.getter();
  v31 = v30;

  v32 = v31 & 1;
  v33 = objc_msgSend(v28, sel_authorNames);

  if (v33)
  {
    v34 = sub_21C45902C();

  }
  else
  {
    v34 = 0;
  }
  v47 = 0;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v27, (uint64_t)v29, v32, v34, &v47, v46);
}

void sub_21C3FA5F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  unsigned __int8 v17[16];

  *(_QWORD *)v17 = SeriesInfo.assets.getter(a1, a2);
  MEMORY[0x24BDAC7A8](*(_QWORD *)v17);
  v16[2] = a1;
  v16[3] = a2;
  swift_getAssociatedTypeWitness();
  v6 = sub_21C45908C();
  v7 = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v6);
  v9 = sub_21C3F6F8C((void (*)(char *, char *))sub_21C3FF654, (uint64_t)v16, v6, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v7, MEMORY[0x24BEE40A8], v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)v17 = MEMORY[0x24BEE4B00];
  v10 = swift_bridgeObjectRetain();
  v11 = sub_21C3FF2B4(v10, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v9 + 16);
  if (v12 >= 5)
    v12 = 5;
  v13 = sub_21C40A304(v9 + 32, 0, (2 * v12) | 1);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v11 + 16);
  v17[0] = 0;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v14 == 5, v15, 0, v11, v17, a3);
}

uint64_t SeriesInfo.contentsForArtwork.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  int EnumCaseMultiPayload;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;

  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)v40 - v7;
  v9 = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v9, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (void **)((char *)v40 - v12);
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(a1, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v6 + 32))(v8, v13, AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
      if (v16)
      {
        v40[1] = v40;
        *(_QWORD *)&v44 = v16;
        MEMORY[0x24BDAC7A8](v16);
        v40[-2] = a1;
        v40[-1] = a2;
        swift_getAssociatedTypeWitness();
        v17 = sub_21C45908C();
        MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v17);
        v18 = sub_21C458FB4();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v41 = v18;
        MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v17);
        v19 = sub_21C4591D0();
        v41 = v44;
        v42 = v45;
        MEMORY[0x24BDAC7A8](v19);
        v40[-2] = a1;
        v40[-1] = a2;
        v20 = sub_21C4592D8();
        sub_21C3E344C(&qword_25527A240);
        MEMORY[0x22077C1E0](MEMORY[0x24BEE2180], v20);
        v21 = (_QWORD *)sub_21C458FA8();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
        return (uint64_t)v21;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
      return 0;
    }
    v22 = *v13;
  }
  else
  {
    v22 = *(void **)((char *)v13 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v6 + 8))(v13, AssociatedTypeWitness);
  }
  v23 = sub_21C3FCCF0(CFSTR("contents-for-artwork"), (uint64_t (*)(uint64_t))sub_21C44F728);

  if (!v23)
    return 0;
  if (!(v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v24)
      goto LABEL_10;
LABEL_32:
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_33:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v21;
  }
  swift_bridgeObjectRetain();
  result = sub_21C459434();
  v24 = result;
  if (!result)
    goto LABEL_32;
LABEL_10:
  if (v24 >= 1)
  {
    v26 = 0;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v27 = (v23 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x22077BA00](v26, v23)
          : *(id *)(v23 + 8 * v26 + 32);
      v28 = v27;
      type metadata accessor for MBook();
      v29 = swift_dynamicCastClass();
      if (v29)
        break;
      type metadata accessor for MAudiobook();
      v34 = swift_dynamicCastClass();
      if (v34)
      {
        v35 = v34;
        v36 = type metadata accessor for AudiobookInfo();
        *((_QWORD *)&v42 + 1) = v36;
        v43 = sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
        v32 = sub_21C3E30F8((uint64_t *)&v41);
        *v32 = v35;
        sub_21C3E344C(&qword_25527A390);
        swift_storeEnumTagMultiPayload();
        *((_BYTE *)v32 + *(int *)(v36 + 20)) = 0;
        v33 = (int *)(v36 + 24);
        goto LABEL_19;
      }
      *((_QWORD *)&v45 + 1) = type metadata accessor for MAsset();
      *(_QWORD *)&v44 = v28;
      sub_21C3E344C(&qword_25527A240);
      v39 = v28;
      sub_21C415C90((uint64_t)&v44);
      sub_21C3E2754((uint64_t)&v44);
      v41 = 0u;
      v42 = 0u;
      v43 = 0;

      if (*((_QWORD *)&v42 + 1))
        goto LABEL_20;
      sub_21C3FF670((uint64_t)&v41, &qword_25527A380);
LABEL_25:
      if (v24 == ++v26)
        goto LABEL_33;
    }
    v30 = v29;
    v31 = type metadata accessor for BookInfo();
    *((_QWORD *)&v42 + 1) = v31;
    v43 = sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
    v32 = sub_21C3E30F8((uint64_t *)&v41);
    *v32 = v30;
    sub_21C3E344C(&qword_25527A3A0);
    swift_storeEnumTagMultiPayload();
    v33 = (int *)(v31 + 20);
LABEL_19:
    *((_BYTE *)v32 + *v33) = 1;
LABEL_20:
    sub_21C3F349C(&v41, (uint64_t)&v44);
    sub_21C3F349C(&v44, (uint64_t)&v41);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_21C3FD27C(0, v21[2] + 1, 1, v21);
    v38 = v21[2];
    v37 = v21[3];
    if (v38 >= v37 >> 1)
      v21 = sub_21C3FD27C((_QWORD *)(v37 > 1), v38 + 1, 1, v21);
    v21[2] = v38 + 1;
    sub_21C3F349C(&v41, (uint64_t)&v21[5 * v38 + 4]);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

BOOL sub_21C3FAEF0()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 240);
  v2 = swift_checkMetadataState();
  v3 = v1(v2, AssociatedConformanceWitness);
  if ((v4 & 1) != 0)
    v5 = 0;
  else
    v5 = v3;
  v6 = v1(v2, AssociatedConformanceWitness);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = v6;
  return v5 < v8;
}

uint64_t sub_21C3FB00C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t *v5;
  uint64_t v7[5];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v7[4] = swift_getAssociatedConformanceWitness();
  v5 = sub_21C3E30F8(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v5, a1, AssociatedTypeWitness);
  static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v7, a2);
  return sub_21C3E2754((uint64_t)v7);
}

uint64_t SeriesInfo.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  _QWORD *v7;

  KeyPath = swift_getKeyPath();
  v7 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v7, a1, *(_QWORD *)(a2 + 8), a3);
  swift_release();
  return swift_release();
}

unint64_t sub_21C3FB1B4@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;

  result = sub_21C44FE00(CFSTR("mapped-series"));
  if (!result)
    goto LABEL_13;
  v3 = result;
  v4 = result & 0xFFFFFFFFFFFFFF8;
  if (!(result >> 62))
  {
    result = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_4;
    goto LABEL_12;
  }
  result = sub_21C459434();
  if (!result)
  {
LABEL_12:
    result = swift_bridgeObjectRelease();
LABEL_13:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return result;
  }
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x22077BA00](0, v3);
  }
  else
  {
    if (!*(_QWORD *)(v4 + 16))
    {
      __break(1u);
      return result;
    }
    v5 = *(_QWORD *)(v3 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v5 + 40);
  v6 = *(_QWORD *)(v5 + 48);
  v8 = *(unsigned __int8 *)(v5 + 56);
  swift_bridgeObjectRetain();
  result = swift_release();
  if (v8 == 1)
    v9 = 1;
  else
    v9 = 2;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v9;
  return result;
}

double sub_21C3FB298@<D0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  void (*v3)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  char v5;
  double result;
  __int128 v7;
  char v8;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  v4 = swift_checkMetadataState();
  v3(&v7, v4, AssociatedConformanceWitness);
  v5 = v8;
  result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t SeriesInfo.nextHref.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41D494(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

BookFoundation::SeriesListSortOrder_optional SeriesInfo.currentSortOrder.getter@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t *KeyPath;
  void *object;
  uint64_t countAndFlagsBits;
  BookFoundation::SeriesListSortOrder_optional result;
  char v10;
  Swift::String rawValue;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41D494(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&rawValue);
  swift_release();
  object = rawValue._object;
  if (!rawValue._object
    || (countAndFlagsBits = rawValue._countAndFlagsBits,
        result.value = SeriesListSortOrder.init(rawValue:)(*(Swift::String *)(&object - 1)).value,
        v10 = rawValue._countAndFlagsBits,
        LOBYTE(rawValue._countAndFlagsBits) == 5))
  {
    result.value = SeriesInfo.isOrdered.getter(a1, a2);
    if ((result.value & 1) != 0)
      v10 = 0;
    else
      v10 = 3;
  }
  *a3 = v10;
  return result;
}

uint64_t SeriesInfo.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C3FB88C(a1, a2);
}

uint64_t sub_21C3FB46C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t SeriesInfo.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v19 = a3;
  v5 = sub_21C3E344C(&qword_25527A2D0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v22 = a1;
  v23 = a2;
  KeyPath = swift_getKeyPath();
  v20 = a1;
  v21 = a2;
  v12 = (_QWORD *)swift_getKeyPath();
  v13 = *(_QWORD *)(a2 + 8);
  sub_21C41D79C(KeyPath, v12, a1, v13, (uint64_t)v10);
  swift_release();
  swift_release();
  v14 = sub_21C458BF4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v10, 1, v14) != 1)
  {
    v8 = v10;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v8, v14);
  }
  sub_21C3FF670((uint64_t)v10, &qword_25527A2D0);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 40))(&v24, a1, a2);
  if ((v24 & 1) != 0)
    sub_21C4594F4();
  swift_bridgeObjectRelease();
  v24 = 0;
  v25 = 0xE000000000000000;
  sub_21C459350();
  swift_bridgeObjectRelease();
  v24 = 0xD000000000000018;
  v25 = 0x800000021C45F6C0;
  sub_21C458F00();
  swift_bridgeObjectRelease();
  sub_21C458F00();
  ContentInfo.id.getter(a1, v13);
  sub_21C458F00();
  swift_bridgeObjectRelease();
  sub_21C458BDC();
  swift_bridgeObjectRelease();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v16)(v8, 1, v14);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v8, v14);
  __break(1u);
  return result;
}

uint64_t sub_21C3FB7D8()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t SeriesInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C3FB88C(a1, a2);
}

uint64_t sub_21C3FB88C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  _QWORD *v5;
  unsigned __int8 v7;

  KeyPath = swift_getKeyPath();
  v5 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v5, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_21C3FB91C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t sub_21C3FB9BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = AssetInfo.author.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_21C3FBA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v11;

  sub_21C3FBB48(a1, a2, a3, a4, a5, a6);
  if (qword_254078E68 != -1)
    swift_once();
  swift_beginAccess();
  if ((byte_254078E60 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 1, 1, a6);
  sub_21C3FF6AC();
  swift_allocError();
  *v11 = a2;
  v11[1] = a3;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

void sub_21C3FBB48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[4];

  v31 = a6;
  v11 = sub_21C4595F0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E5528(a1, (uint64_t)v33);
  sub_21C4595CC();
  sub_21C4595D8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (a3)
    v15 = a2;
  else
    v15 = 0x6E776F6E6B6E753CLL;
  if (a3)
    v16 = a3;
  else
    v16 = 0xE90000000000003ELL;
  if (a5)
    v17 = a4;
  else
    v17 = 0x6E776F6E6B6E753CLL;
  if (a5)
    v18 = a5;
  else
    v18 = 0xE90000000000003ELL;
  v19 = qword_255279EE8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1)
    swift_once();
  v20 = sub_21C458D20();
  sub_21C3E2BA0(v20, (uint64_t)qword_25527A260);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = sub_21C458D08();
  v22 = sub_21C459218();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v33[0] = v24;
    *(_DWORD *)v23 = 136315906;
    v25 = sub_21C45962C();
    v30 = v17;
    v32 = sub_21C409744(v25, v26, v33);
    sub_21C459290();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain();
    v32 = sub_21C409744(v15, v16, v33);
    sub_21C459290();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 22) = 2082;
    swift_bridgeObjectRetain();
    v32 = sub_21C409744(v30, v18, v33);
    sub_21C459290();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 32) = 2082;
    v27 = sub_21C45962C();
    v32 = sub_21C409744(v27, v28, v33);
    sub_21C459290();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v21, v22, "%s '%{public}s' in series '%{public}s' is expected to be %{public}s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v24, -1, -1);
    MEMORY[0x22077C294](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_21C3FBE84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = (char *)a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 32))(AssociatedTypeWitness);
  a2[1] = v7;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v5, a1, AssociatedTypeWitness);
}

uint64_t sub_21C3FBFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_21C3FC060@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  _QWORD v65[4];

  v59 = a3;
  v57 = a2;
  v63 = a1;
  v64 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v6 = swift_getAssociatedTypeWitness();
  v62 = v5;
  v7 = swift_getAssociatedTypeWitness();
  v60 = type metadata accessor for ContentDataSource(0, v6, v7, v8);
  MEMORY[0x24BDAC7A8](v60);
  v61 = (uint64_t *)((char *)&v49 - v9);
  v10 = sub_21C459278();
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v54 = (char *)&v49 - v12;
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  MEMORY[0x24BDAC7A8](v11);
  v52 = (char *)&v49 - v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v15 = sub_21C459278();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v49 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  v21 = MEMORY[0x24BDAC7A8](v17);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v58 = (char *)&v49 - v24;
  v25 = (char *)*v63;
  v53 = v7;
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    v65[3] = type metadata accessor for MAsset();
    v65[0] = v25;
    v31 = *(_QWORD *)&v25[OBJC_IVAR____TtC14BookFoundation9MResource_id];
    v32 = *(_QWORD *)&v25[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
    v33 = *(_QWORD *)(v57 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
    v34 = *(_QWORD *)(v57 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
    v35 = v25;
    v36 = swift_checkMetadataState();
    sub_21C3FBA5C((uint64_t)v65, v31, v32, v33, v34, v36, v64);
    return sub_21C3E2754((uint64_t)v65);
  }
  v27 = v26;
  v63 = (void **)AssociatedTypeWitness;
  v28 = *(_QWORD *)&v25[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
  v65[0] = *(_QWORD *)&v25[OBJC_IVAR____TtC14BookFoundation9MResource_id];
  v65[1] = v28;
  v29 = v25;
  swift_bridgeObjectRetain();
  MEMORY[0x22077B448](v65, v59, MEMORY[0x24BEE0D00], v14, MEMORY[0x24BEE0D10]);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v30 = v64;
LABEL_8:
    v45 = swift_checkMetadataState();
    v48 = v61;
    *v61 = v27;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, uint64_t))(v62 + 48))(v48, v45);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v30, 0, 1, v45);
  }
  v59 = v27;
  v38 = v58;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v58, v19, v14);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v38, v14);
  v39 = v54;
  v40 = v56;
  v41 = swift_dynamicCast();
  v42 = v55;
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  if ((v41 & 1) == 0)
  {
    v43(v39, 1, 1, v40);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v38, v14);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    v30 = v64;
    v27 = v59;
    goto LABEL_8;
  }
  v43(v39, 0, 1, v40);
  v44 = v52;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v52, v39, v40);
  v45 = swift_checkMetadataState();
  v46 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v47 = v61;
  (*(void (**)(uint64_t *, char *, uint64_t))(v42 + 16))(v61, v44, v40);
  *(uint64_t *)((char *)v47 + v46) = v59;
  swift_storeEnumTagMultiPayload();
  v30 = v64;
  (*(void (**)(uint64_t *, uint64_t))(v62 + 48))(v47, v45);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v40);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v58, v14);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v30, 0, 1, v45);
}

BOOL sub_21C3FC5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 32);
  v5 = swift_checkMetadataState();
  v6 = v4(v5, v3);
  LOBYTE(a2) = sub_21C43B744(v6, v7, a2);
  swift_bridgeObjectRelease();
  return (a2 & 1) == 0;
}

uint64_t sub_21C3FC6C4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *, uint64_t, uint64_t);
  char *v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[4];

  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v8, v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v27 - v11);
  v13 = (char *)*a1;
  v14 = swift_dynamicCastClass();
  if (v14)
  {
    v15 = v14;
    v16 = swift_checkMetadataState();
    *v12 = v15;
    swift_storeEnumTagMultiPayload();
    v17 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48);
    v18 = v13;
    v17(v12, v16, v6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 0, 1, v16);
  }
  else
  {
    v27[3] = type metadata accessor for MAsset();
    v27[0] = v13;
    v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC14BookFoundation9MResource_id];
    v21 = *(_QWORD *)&v13[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
    v22 = a2 + OBJC_IVAR____TtC14BookFoundation9MResource_id;
    v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
    v24 = *(_QWORD *)(v22 + 8);
    v25 = v13;
    v26 = swift_checkMetadataState();
    sub_21C3FBA5C((uint64_t)v27, v20, v21, v23, v24, v26, a3);
    return sub_21C3E2754((uint64_t)v27);
  }
}

uint64_t sub_21C3FC8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[4];
  uint64_t v52;

  v50 = a4;
  v48 = a2;
  v52 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v7 = swift_getAssociatedTypeWitness();
  v47 = v6;
  v49 = AssociatedTypeWitness;
  v8 = swift_getAssociatedTypeWitness();
  v46 = type metadata accessor for ContentDataSource(0, v7, v8, v9);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)v41 - v10;
  v11 = sub_21C459278();
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v41 - v12;
  v44 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  v41[1] = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v41 - v16;
  v18 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v41 - v19;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22(v17, v52, v14);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if ((v23 & 1) != 0)
  {
    v24(v13, 0, 1, v7);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v13, v7);
    v25 = swift_checkMetadataState();
    v26 = v45;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v45, v20, v7);
    swift_storeEnumTagMultiPayload();
    v27 = v50;
    (*(void (**)(char *, uint64_t))(v47 + 48))(v26, v25);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v27, 0, 1, v25);
  }
  else
  {
    v24(v13, 1, 1, v7);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
    v51[3] = v14;
    v29 = sub_21C3E30F8(v51);
    v22((char *)v29, v52, v14);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 32))(v14);
    v33 = v32;
    v34 = swift_getAssociatedConformanceWitness();
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 32);
    v36 = swift_checkMetadataState();
    v37 = v35(v36, v34);
    v39 = v38;
    v40 = swift_checkMetadataState();
    sub_21C3FBA5C((uint64_t)v51, v31, v33, v37, v39, v40, v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_21C3E2754((uint64_t)v51);
  }
}

uint64_t sub_21C3FCCCC(void *a1)
{
  return sub_21C3FCCF0(a1, (uint64_t (*)(uint64_t))sub_21C44F728);
}

uint64_t sub_21C3FCCD8(void *a1)
{
  return sub_21C3FCCF0(a1, (uint64_t (*)(uint64_t))sub_21C44F734);
}

uint64_t sub_21C3FCCE4(void *a1)
{
  return sub_21C3FCCF0(a1, (uint64_t (*)(uint64_t))sub_21C44F740);
}

uint64_t sub_21C3FCCF0(void *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  ObjectType = swift_getObjectType();
  v5 = sub_21C416AD4();
  if (v5)
  {
    v6 = v5;
    v7 = sub_21C458E64();
    if (*(_QWORD *)(v6 + 16))
    {
      sub_21C45191C(v7, v8);
      if ((v9 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v10 = swift_bridgeObjectRelease();
        v11 = a2(v10);
        swift_release();
        return v11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_255279EF0 != -1)
    swift_once();
  v13 = sub_21C458D20();
  sub_21C3E2BA0(v13, (uint64_t)qword_25527A278);
  v14 = a1;
  v15 = sub_21C458D08();
  v16 = sub_21C45920C();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v23 = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = sub_21C458E64();
    sub_21C409744(v19, v20, &v23);
    sub_21C459290();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v21 = sub_21C417B84(ObjectType);
    sub_21C409744(v21, v22, &v23);
    sub_21C459290();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x22077C294](v18, -1, -1);
    MEMORY[0x22077C294](v17, -1, -1);

  }
  else
  {

  }
  return 0;
}

_QWORD *sub_21C3FCF54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21C3E344C(&qword_25527A060);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C3FE580(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C3FD074(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_21C3E344C(&qword_25527A430);
  v10 = *(_QWORD *)(sub_21C458AA4() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_21C4593F8();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_21C458AA4() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_21C3FE68C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_21C3FD27C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_21C3E344C(&qword_25527A460);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C3FF548(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_21C3FD39C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_21C3E344C(&qword_25527A418);
      v10 = (char *)swift_allocObject();
      v11 = j__malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_21C3FE7A4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C3FD494(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21C3FD628(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21C3FD4B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FDC5C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD4CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE3E4(a1, a2, a3, (_QWORD *)*v3, &qword_25527A450, &qword_25527A458);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD4F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21C3FDE00(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21C3FD514(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_21C3FDF68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_21C3FD530(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE0D0(a1, a2, a3, (_QWORD *)*v3, &qword_25527A3F8, &qword_25527A400);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD55C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE0D0(a1, a2, a3, (_QWORD *)*v3, &qword_25527A408, &qword_25527A410);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD588(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE3E4(a1, a2, a3, (_QWORD *)*v3, &qword_25527A3E8, &qword_25527A3F0);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD5B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE3E4(a1, a2, a3, (_QWORD *)*v3, &qword_25527A420, &qword_25527A428);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD5E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE25C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD5FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_21C3FE3E4(a1, a2, a3, (_QWORD *)*v3, &qword_25527A3C8, &qword_25527A3D0);
  *v3 = result;
  return result;
}

uint64_t sub_21C3FD628(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A3B8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FD790(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_21C3E344C(&qword_25527A430);
  v10 = *(_QWORD *)(sub_21C458AA4() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_21C458AA4() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FD970(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A438);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FDABC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A460);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_21C3E344C(&qword_25527A240);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FDC5C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A478);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_21C3E344C(&qword_25527A480);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FDE00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A448);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[64 * v8] || v13 >= &v14[64 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FDF68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A440);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE0D0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_21C3E344C(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_21C3E344C(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE25C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A3D8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_21C3E344C(&qword_25527A3E0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE3E4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    sub_21C3E344C(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v15 = v13 + 4;
  v16 = a4 + 4;
  v17 = 3 * v11;
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= &v16[v17])
      memmove(v13 + 4, a4 + 4, v17 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    sub_21C3E344C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE580(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_21C3E344C(&qword_25527A3B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE68C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_21C458AA4() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

char *sub_21C3FE7A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FE888(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void **i;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  char v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = result;
    v7 = (_QWORD *)swift_bridgeObjectRetain();
    v9 = v7[4];
    v8 = v7[5];
    v10 = (void *)v7[6];
    v11 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    v48 = v10;
    v13 = sub_21C45191C(v9, v8);
    v14 = v11[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v17 = v12;
    if (v11[3] < v16)
    {
      sub_21C3E5850(v16, a2 & 1);
      v18 = sub_21C45191C(v9, v8);
      if ((v17 & 1) != (v19 & 1))
      {
LABEL_27:
        result = sub_21C459554();
        __break(1u);
        return result;
      }
      v13 = v18;
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v21 = *(id *)(v20[7] + 8 * v13);
      swift_bridgeObjectRelease();

      v22 = v20[7];
      *(_QWORD *)(v22 + 8 * v13) = v21;
      v23 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease();
LABEL_16:
      for (i = (void **)(v6 + 72); ; i += 3)
      {
        v33 = (uint64_t)*(i - 2);
        v32 = (uint64_t)*(i - 1);
        v34 = *i;
        v35 = (_QWORD *)*a3;
        swift_bridgeObjectRetain();
        v36 = v34;
        v37 = sub_21C45191C(v33, v32);
        v39 = v35[2];
        v40 = (v38 & 1) == 0;
        v26 = __OFADD__(v39, v40);
        v41 = v39 + v40;
        if (v26)
          break;
        v42 = v38;
        if (v35[3] < v41)
        {
          sub_21C3E5850(v41, 1);
          v37 = sub_21C45191C(v33, v32);
          if ((v42 & 1) != (v43 & 1))
            goto LABEL_27;
        }
        v44 = (_QWORD *)*a3;
        if ((v42 & 1) != 0)
        {
          v29 = 8 * v37;
          v30 = *(id *)(v44[7] + 8 * v37);
          swift_bridgeObjectRelease();

          v31 = v44[7];
          *(_QWORD *)(v31 + v29) = v30;
        }
        else
        {
          v44[(v37 >> 6) + 8] |= 1 << v37;
          v45 = (uint64_t *)(v44[6] + 16 * v37);
          *v45 = v33;
          v45[1] = v32;
          *(_QWORD *)(v44[7] + 8 * v37) = v36;
          v46 = v44[2];
          v26 = __OFADD__(v46, 1);
          v47 = v46 + 1;
          if (v26)
            goto LABEL_26;
          v44[2] = v47;
        }
        if (!--v23)
          return swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v20 = (_QWORD *)*a3;
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_21C457874();
      v20 = (_QWORD *)*a3;
      if ((v17 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v20[(v13 >> 6) + 8] |= 1 << v13;
    v24 = (uint64_t *)(v20[6] + 16 * v13);
    *v24 = v9;
    v24[1] = v8;
    *(_QWORD *)(v20[7] + 8 * v13) = v48;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v20[2] = v27;
    v23 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_21C3FEB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C3F9D40(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_21C3FEB6C()
{
  return 16;
}

__n128 sub_21C3FEB78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FEB88()
{
  return 16;
}

__n128 sub_21C3FEB94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FEBA0@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0(MSeries.itemCountForDisplay.getter, a1);
}

uint64_t sub_21C3FEBAC()
{
  return 16;
}

__n128 sub_21C3FEBB8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FEBC4@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0(MSeries.itemMinimumCountForDisplay.getter, a1);
}

uint64_t sub_21C3FEBD0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_21C3FEC00()
{
  return 16;
}

__n128 sub_21C3FEC0C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

BOOL sub_21C3FEC18()
{
  return sub_21C3FAEF0();
}

uint64_t sub_21C3FEC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C3FB00C(a1, a2);
}

double sub_21C3FEC4C@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  sub_21C3FB1B4((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21C3FEC8C()
{
  return 16;
}

__n128 sub_21C3FEC98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FECA8()
{
  return 16;
}

__n128 sub_21C3FECB4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FECC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MSeries.assetsResourceSet.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21C3FECE8()
{
  return 16;
}

__n128 sub_21C3FECF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FED00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C3FED10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C3FED40()
{
  return 16;
}

__n128 sub_21C3FED4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FED58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MSeries.currentSort.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21C3FED80()
{
  return 16;
}

__n128 sub_21C3FED8C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FED9C()
{
  return 16;
}

__n128 sub_21C3FEDA8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FEDB8()
{
  return 16;
}

__n128 sub_21C3FEDC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C3FEDD0()
{
  return sel_isExplicit;
}

id sub_21C3FEDDC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isExplicit);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_21C3FEE0C()
{
  return 16;
}

__n128 sub_21C3FEE18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C3FEE28()
{
  return 16;
}

__n128 sub_21C3FEE34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_21C3FEE44()
{
  unint64_t result;

  result = qword_25527A3A8;
  if (!qword_25527A3A8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesType, &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_25527A3A8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SeriesError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SeriesError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SeriesError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SeriesError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SeriesError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeriesError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_21C3FEFD0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_21C3FEFE8(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SeriesError()
{
  return &type metadata for SeriesError;
}

uint64_t storeEnumTagSinglePayload for SeriesType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C3FF064 + 4 * byte_21C45AA1D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C3FF098 + 4 * byte_21C45AA18[v4]))();
}

uint64_t sub_21C3FF098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3FF0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C3FF0A8);
  return result;
}

uint64_t sub_21C3FF0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C3FF0BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C3FF0C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C3FF0C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesType()
{
  return &type metadata for SeriesType;
}

uint64_t sub_21C3FF0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedSeriesInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for MappedSeriesInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MappedSeriesInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedSeriesInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedSeriesInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MappedSeriesInfo()
{
  return &type metadata for MappedSeriesInfo;
}

uint64_t dispatch thunk of SeriesInfo.seriesType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SeriesInfo.contentKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SeriesInfo.additionalStoreAssetsForEnrichment.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

unint64_t sub_21C3FF270()
{
  unint64_t result;

  result = qword_25527A3C0;
  if (!qword_25527A3C0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesType, &type metadata for SeriesType);
    atomic_store(result, (unint64_t *)&qword_25527A3C0);
  }
  return result;
}

uint64_t sub_21C3FF2B4(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 40;
    v33 = -(uint64_t)v2;
    v32 = MEMORY[0x24BEE4AF8];
    v30 = a1 + 40;
    v31 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      if (v4 <= v2)
        v6 = v2;
      else
        v6 = v4;
      v34 = -(uint64_t)v6;
      for (i = (uint64_t *)(v5 + 16 * v4++); ; i += 2)
      {
        if (v34 + v4 == 1)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          result = sub_21C459554();
          __break(1u);
          return result;
        }
        v9 = *(i - 1);
        v8 = *i;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v11 = (_QWORD *)*a2;
        v35 = (_QWORD *)*a2;
        *a2 = 0x8000000000000000;
        v13 = sub_21C45191C(v9, v8);
        v14 = v11[2];
        v15 = (v12 & 1) == 0;
        v16 = v14 + v15;
        if (__OFADD__(v14, v15))
          goto LABEL_28;
        v17 = v12;
        if (v11[3] < v16)
          break;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v20 = v35;
          if ((v12 & 1) == 0)
            goto LABEL_18;
        }
        else
        {
          sub_21C457880();
          v20 = v35;
          if ((v17 & 1) == 0)
            goto LABEL_18;
        }
LABEL_15:
        *(_BYTE *)(v20[7] + v13) = 1;
        *a2 = v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v4;
        if (v33 + v4 == 1)
          return v32;
      }
      sub_21C3E585C(v16, isUniquelyReferenced_nonNull_native);
      v18 = sub_21C45191C(v9, v8);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_30;
      v13 = v18;
      v20 = v35;
      if ((v17 & 1) != 0)
        goto LABEL_15;
LABEL_18:
      v20[(v13 >> 6) + 8] |= 1 << v13;
      v21 = (uint64_t *)(v20[6] + 16 * v13);
      *v21 = v9;
      v21[1] = v8;
      *(_BYTE *)(v20[7] + v13) = 1;
      v22 = v20[2];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_29;
      v20[2] = v24;
      *a2 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD494(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v25 = v32;
      }
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(_QWORD *)(v25 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_21C3FD494(v26 > 1, v27 + 1, 1);
        v25 = v32;
      }
      *(_QWORD *)(v25 + 16) = v27 + 1;
      v32 = v25;
      v28 = v25 + 16 * v27;
      *(_QWORD *)(v28 + 32) = v9;
      *(_QWORD *)(v28 + 40) = v8;
      v5 = v30;
      v2 = v31;
      if (!(v33 + v4))
        return v32;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_21C3FF548(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_21C3E344C(&qword_25527A240);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C3FF654@<X0>(uint64_t *a1@<X8>)
{
  return sub_21C3FB9BC(a1);
}

uint64_t sub_21C3FF670(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_21C3E344C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_21C3FF6AC()
{
  unint64_t result;

  result = qword_25527A488;
  if (!qword_25527A488)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesError, &type metadata for SeriesError);
    atomic_store(result, (unint64_t *)&qword_25527A488);
  }
  return result;
}

uint64_t sub_21C3FF6F0@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C3FC6C4(a1, *(_QWORD *)(v2 + 32), a2);
}

unint64_t sub_21C3FF70C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527A498;
  if (!qword_25527A498)
  {
    v1 = sub_21C3E35C0(&qword_25527A490);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25527A498);
  }
  return result;
}

uint64_t sub_21C3FF758@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_21C3FBE84(a1, a2);
}

uint64_t sub_21C3FF774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C3FBFA8(a1, a2);
}

uint64_t sub_21C3FF78C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C3FC060(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

BOOL sub_21C3FF7A8(uint64_t a1)
{
  uint64_t v1;

  return sub_21C3FC5B4(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_21C3FF7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C3FC8C8(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_21C3FF7E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C3FF7C8(a1, a2);
}

uint64_t LibraryBookInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C3F42C4(v1, a1);
}

uint64_t LibraryBookInfo.commonInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_21C3F4310(a1, v1);
}

uint64_t (*LibraryBookInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryBookInfo.seriesInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 20);
  return sub_21C3F43D0(v3, a1);
}

uint64_t type metadata accessor for LibraryBookInfo()
{
  uint64_t result;

  result = qword_25527A520;
  if (!qword_25527A520)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LibraryBookInfo.seriesInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 20);
  return sub_21C3F4448(a1, v3);
}

uint64_t (*LibraryBookInfo.seriesInfo.modify())()
{
  type metadata accessor for LibraryBookInfo();
  return nullsub_1;
}

uint64_t LibraryBookInfo.kind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for LibraryBookInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t LibraryBookInfo.type.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for LibraryBookInfo() + 28));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_21C3FF94C(v4, v5);
}

uint64_t sub_21C3FF94C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t LibraryBookInfo.init(commonInfo:seriesInfo:kind:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  v8 = *a3;
  v9 = *a4;
  v10 = a4[1];
  v11 = (int *)type metadata accessor for LibraryBookInfo();
  v12 = a5 + v11[5];
  *(_QWORD *)(v12 + 32) = 0;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  sub_21C3F4584(a1, a5);
  result = sub_21C3F4448(a2, v12);
  *(_BYTE *)(a5 + v11[6]) = v8;
  v14 = (_QWORD *)(a5 + v11[7]);
  *v14 = v9;
  v14[1] = v10;
  return result;
}

uint64_t sub_21C3FF9F4(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3FFAC4(&qword_25527A4A0, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3FFA28(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3FFAC4(&qword_25527A4A8, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3FFA5C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3FFAC4(&qword_25527A4B0, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3FFA90(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3FFAC4(&qword_25527A4B8, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C3FFAC4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LibraryBookInfo();
    result = MEMORY[0x22077C1E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LibraryBookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  char *v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = a2[7];
    a1[6] = a2[6];
    a1[7] = v9;
    v10 = a2[9];
    a1[8] = a2[8];
    a1[9] = v10;
    a1[10] = a2[10];
    v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v12 = v11[10];
    __dst = (char *)v4 + v12;
    v82 = (char *)a2 + v12;
    v13 = sub_21C458BF4();
    v81 = *(_QWORD *)(v13 - 8);
    v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v83(v82, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v82, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(__dst, v82, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(__dst, 0, 1, v13);
    }
    v16 = v11[11];
    v17 = (_QWORD *)((char *)v4 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v11[12];
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = v11[13];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v11[14];
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_21C458C60();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = v32;
    if (v32(v29, 1, v30))
    {
      v33 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = v11[15];
    v35 = (_QWORD *)((char *)v4 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v11[16];
    v39 = (_QWORD *)((char *)v4 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *((_BYTE *)v4 + v11[17]) = *((_BYTE *)a2 + v11[17]);
    *(_QWORD *)((char *)v4 + v11[18]) = *(_QWORD *)((char *)a2 + v11[18]);
    *((_BYTE *)v4 + v11[19]) = *((_BYTE *)a2 + v11[19]);
    *((_BYTE *)v4 + v11[20]) = *((_BYTE *)a2 + v11[20]);
    *((_BYTE *)v4 + v11[21]) = *((_BYTE *)a2 + v11[21]);
    *((_BYTE *)v4 + v11[22]) = *((_BYTE *)a2 + v11[22]);
    *((_BYTE *)v4 + v11[23]) = *((_BYTE *)a2 + v11[23]);
    *((_BYTE *)v4 + v11[24]) = *((_BYTE *)a2 + v11[24]);
    *((_BYTE *)v4 + v11[25]) = *((_BYTE *)a2 + v11[25]);
    *((_BYTE *)v4 + v11[26]) = *((_BYTE *)a2 + v11[26]);
    *((_BYTE *)v4 + v11[27]) = *((_BYTE *)a2 + v11[27]);
    *((_BYTE *)v4 + v11[28]) = *((_BYTE *)a2 + v11[28]);
    *((_BYTE *)v4 + v11[29]) = *((_BYTE *)a2 + v11[29]);
    v42 = v11[30];
    v43 = (_QWORD *)((char *)v4 + v42);
    v44 = (_QWORD *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v11[31];
    v47 = (char *)v4 + v46;
    v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dsta(v48, 1, v30))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v47, v48, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v47, 0, 1, v30);
    }
    v50 = v11[32];
    v51 = (char *)v4 + v50;
    v52 = (char *)a2 + v50;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)((char *)v4 + v11[33]) = *(_QWORD *)((char *)a2 + v11[33]);
    v53 = v11[34];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    if (__dsta((char *)a2 + v53, 1, v30))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v54, v55, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v54, 0, 1, v30);
    }
    v57 = v11[35];
    v58 = (_QWORD *)((char *)v4 + v57);
    v59 = (_QWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = v11[36];
    v62 = (char *)v4 + v61;
    v63 = (char *)a2 + v61;
    *(_QWORD *)(v62 + 13) = *(_QWORD *)(v63 + 13);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    v64 = v11[37];
    v65 = (char *)v4 + v64;
    v66 = (char *)a2 + v64;
    v65[8] = v66[8];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v67 = v11[38];
    v68 = (char *)v4 + v67;
    v69 = (char *)a2 + v67;
    v68[4] = v69[4];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    v70 = a3[5];
    v71 = (char *)v4 + v70;
    v72 = (char *)a2 + v70;
    v73 = *(_QWORD *)((char *)a2 + v70 + 24);
    swift_bridgeObjectRetain();
    if (v73)
    {
      v74 = *((_QWORD *)v72 + 4);
      *((_QWORD *)v71 + 3) = v73;
      *((_QWORD *)v71 + 4) = v74;
      (**(void (***)(char *, char *, uint64_t))(v73 - 8))(v71, v72, v73);
    }
    else
    {
      v75 = *((_OWORD *)v72 + 1);
      *(_OWORD *)v71 = *(_OWORD *)v72;
      *((_OWORD *)v71 + 1) = v75;
      *((_QWORD *)v71 + 4) = *((_QWORD *)v72 + 4);
    }
    v76 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v77 = (_QWORD *)((char *)v4 + v76);
    v78 = (_QWORD *)((char *)a2 + v76);
    v79 = v78[1];
    if ((unint64_t)(v79 - 1) >= 2)
    {
      *v77 = *v78;
      v77[1] = v79;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v77 = *(_OWORD *)v78;
    }
  }
  return v4;
}

uint64_t destroy for LibraryBookInfo(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v5 = a1 + v4[10];
  v6 = sub_21C458BF4();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + v4[14];
  v9 = sub_21C458C60();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1 + v4[31];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  v13 = a1 + v4[34];
  if (!v11(v13, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  swift_bridgeObjectRelease();
  v14 = a1 + *(int *)(a2 + 20);
  if (*(_QWORD *)(v14 + 24))
    sub_21C3E2754(v14);
  result = *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8);
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for LibraryBookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  a1[10] = a2[10];
  v10 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v11 = v10[10];
  __dst = (char *)a1 + v11;
  v80 = (char *)a2 + v11;
  v12 = sub_21C458BF4();
  v79 = *(_QWORD *)(v12 - 8);
  v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v81(v80, 1, v12))
  {
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(__dst, v80, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v80, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v12);
  }
  v14 = v10[11];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v10[12];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v10[13];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = v10[14];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_21C458C60();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = v30;
  if (v30(v27, 1, v28))
  {
    v31 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = v10[15];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v10[16];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  *((_BYTE *)a1 + v10[17]) = *((_BYTE *)a2 + v10[17]);
  *(_QWORD *)((char *)a1 + v10[18]) = *(_QWORD *)((char *)a2 + v10[18]);
  *((_BYTE *)a1 + v10[19]) = *((_BYTE *)a2 + v10[19]);
  *((_BYTE *)a1 + v10[20]) = *((_BYTE *)a2 + v10[20]);
  *((_BYTE *)a1 + v10[21]) = *((_BYTE *)a2 + v10[21]);
  *((_BYTE *)a1 + v10[22]) = *((_BYTE *)a2 + v10[22]);
  *((_BYTE *)a1 + v10[23]) = *((_BYTE *)a2 + v10[23]);
  *((_BYTE *)a1 + v10[24]) = *((_BYTE *)a2 + v10[24]);
  *((_BYTE *)a1 + v10[25]) = *((_BYTE *)a2 + v10[25]);
  *((_BYTE *)a1 + v10[26]) = *((_BYTE *)a2 + v10[26]);
  *((_BYTE *)a1 + v10[27]) = *((_BYTE *)a2 + v10[27]);
  *((_BYTE *)a1 + v10[28]) = *((_BYTE *)a2 + v10[28]);
  *((_BYTE *)a1 + v10[29]) = *((_BYTE *)a2 + v10[29]);
  v40 = v10[30];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = v10[31];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dsta(v46, 1, v28))
  {
    v47 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v45, v46, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v45, 0, 1, v28);
  }
  v48 = v10[32];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  *(_QWORD *)((char *)a1 + v10[33]) = *(_QWORD *)((char *)a2 + v10[33]);
  v51 = v10[34];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  if (__dsta((char *)a2 + v51, 1, v28))
  {
    v54 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v52, v53, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v52, 0, 1, v28);
  }
  v55 = v10[35];
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = v10[36];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  *(_QWORD *)(v60 + 13) = *(_QWORD *)(v61 + 13);
  *(_OWORD *)v60 = *(_OWORD *)v61;
  v62 = v10[37];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v63[8] = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = v10[38];
  v66 = (char *)a1 + v65;
  v67 = (char *)a2 + v65;
  v66[4] = v67[4];
  *(_DWORD *)v66 = *(_DWORD *)v67;
  v68 = a3[5];
  v69 = (char *)a1 + v68;
  v70 = (char *)a2 + v68;
  v71 = *(_QWORD *)((char *)a2 + v68 + 24);
  swift_bridgeObjectRetain();
  if (v71)
  {
    v72 = *((_QWORD *)v70 + 4);
    *((_QWORD *)v69 + 3) = v71;
    *((_QWORD *)v69 + 4) = v72;
    (**(void (***)(char *, char *, uint64_t))(v71 - 8))(v69, v70, v71);
  }
  else
  {
    v73 = *((_OWORD *)v70 + 1);
    *(_OWORD *)v69 = *(_OWORD *)v70;
    *((_OWORD *)v69 + 1) = v73;
    *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
  }
  v74 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v75 = (_QWORD *)((char *)a1 + v74);
  v76 = (_QWORD *)((char *)a2 + v74);
  v77 = v76[1];
  if ((unint64_t)(v77 - 1) >= 2)
  {
    *v75 = *v76;
    v75[1] = v77;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  return a1;
}

_QWORD *assignWithCopy for LibraryBookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v7 = v6[10];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = v6[11];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v6[12];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)v20 = v22;
  v23 = v6[13];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = v6[14];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_21C458C60();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_12:
    v34 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_13:
  v35 = v6[15];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = v6[16];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  *v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[17]) = *((_BYTE *)a2 + v6[17]);
  *(_QWORD *)((char *)a1 + v6[18]) = *(_QWORD *)((char *)a2 + v6[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[19]) = *((_BYTE *)a2 + v6[19]);
  *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
  *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
  *((_BYTE *)a1 + v6[22]) = *((_BYTE *)a2 + v6[22]);
  *((_BYTE *)a1 + v6[23]) = *((_BYTE *)a2 + v6[23]);
  *((_BYTE *)a1 + v6[24]) = *((_BYTE *)a2 + v6[24]);
  *((_BYTE *)a1 + v6[25]) = *((_BYTE *)a2 + v6[25]);
  *((_BYTE *)a1 + v6[26]) = *((_BYTE *)a2 + v6[26]);
  *((_BYTE *)a1 + v6[27]) = *((_BYTE *)a2 + v6[27]);
  *((_BYTE *)a1 + v6[28]) = *((_BYTE *)a2 + v6[28]);
  *((_BYTE *)a1 + v6[29]) = *((_BYTE *)a2 + v6[29]);
  v41 = v6[30];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  *v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = v6[31];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = v31((char *)a1 + v44, 1, v29);
  v48 = v31(v46, 1, v29);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v45, v46, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v45, 0, 1, v29);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v45, v29);
LABEL_18:
    v49 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v45, v46, v29);
LABEL_19:
  v50 = v6[32];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = *(_QWORD *)v52;
  v51[8] = v52[8];
  *(_QWORD *)v51 = v53;
  *(_QWORD *)((char *)a1 + v6[33]) = *(_QWORD *)((char *)a2 + v6[33]);
  v54 = v6[34];
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = v31((char *)a1 + v54, 1, v29);
  v58 = v31(v56, 1, v29);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v55, v56, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v29);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v55, v29);
LABEL_24:
    v59 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v55, v56, v29);
LABEL_25:
  v60 = v6[35];
  v61 = (_QWORD *)((char *)a1 + v60);
  v62 = (_QWORD *)((char *)a2 + v60);
  *v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = v6[36];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = *(_OWORD *)v65;
  *(_QWORD *)(v64 + 13) = *(_QWORD *)(v65 + 13);
  *(_OWORD *)v64 = v66;
  v67 = v6[37];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v68[8] = v70;
  v71 = v6[38];
  v72 = (char *)a1 + v71;
  v73 = (char *)a2 + v71;
  v74 = v73[4];
  *(_DWORD *)v72 = *(_DWORD *)v73;
  v72[4] = v74;
  v75 = a3[5];
  v76 = (uint64_t)a1 + v75;
  v77 = (_QWORD *)((char *)a2 + v75);
  v78 = *(_QWORD *)((char *)a2 + v75 + 24);
  if (*(_QWORD *)((char *)a1 + v75 + 24))
  {
    if (v78)
    {
      sub_21C3F5A14((uint64_t *)v76, v77);
      goto LABEL_32;
    }
    sub_21C3E2754(v76);
  }
  else if (v78)
  {
    *(_QWORD *)(v76 + 24) = v78;
    *(_QWORD *)(v76 + 32) = v77[4];
    (**(void (***)(uint64_t, char *))(v78 - 8))(v76, (char *)v77);
    goto LABEL_32;
  }
  v79 = *(_OWORD *)v77;
  v80 = *((_OWORD *)v77 + 1);
  *(_QWORD *)(v76 + 32) = v77[4];
  *(_OWORD *)v76 = v79;
  *(_OWORD *)(v76 + 16) = v80;
LABEL_32:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v81 = a3[7];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  v84 = *(_QWORD *)((char *)a1 + v81 + 8);
  v85 = v83[1] - 1;
  if ((unint64_t)(v84 - 1) >= 2)
  {
    if (v85 >= 2)
    {
      *v82 = *v83;
      v82[1] = v83[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_21C400ED4((uint64_t)v82);
    goto LABEL_37;
  }
  if (v85 < 2)
  {
LABEL_37:
    *(_OWORD *)v82 = *(_OWORD *)v83;
    return a1;
  }
  *v82 = *v83;
  v82[1] = v83[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_21C400ED4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A4C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for LibraryBookInfo(uint64_t a1, uint64_t a2, int *a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v7 = v6[10];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  v13 = v6[12];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_OWORD *)(a1 + v6[13]) = *(_OWORD *)(a2 + v6[13]);
  v16 = v6[14];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_21C458C60();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48);
  if (v21(v18, 1, v19))
  {
    v22 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[15]) = *(_OWORD *)(a2 + v6[15]);
  *(_OWORD *)(a1 + v6[16]) = *(_OWORD *)(a2 + v6[16]);
  *(_BYTE *)(a1 + v6[17]) = *(_BYTE *)(a2 + v6[17]);
  *(_QWORD *)(a1 + v6[18]) = *(_QWORD *)(a2 + v6[18]);
  *(_BYTE *)(a1 + v6[19]) = *(_BYTE *)(a2 + v6[19]);
  *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
  *(_BYTE *)(a1 + v6[21]) = *(_BYTE *)(a2 + v6[21]);
  *(_BYTE *)(a1 + v6[22]) = *(_BYTE *)(a2 + v6[22]);
  *(_BYTE *)(a1 + v6[23]) = *(_BYTE *)(a2 + v6[23]);
  *(_BYTE *)(a1 + v6[24]) = *(_BYTE *)(a2 + v6[24]);
  *(_BYTE *)(a1 + v6[25]) = *(_BYTE *)(a2 + v6[25]);
  *(_BYTE *)(a1 + v6[26]) = *(_BYTE *)(a2 + v6[26]);
  *(_BYTE *)(a1 + v6[27]) = *(_BYTE *)(a2 + v6[27]);
  *(_BYTE *)(a1 + v6[28]) = *(_BYTE *)(a2 + v6[28]);
  *(_BYTE *)(a1 + v6[29]) = *(_BYTE *)(a2 + v6[29]);
  *(_OWORD *)(a1 + v6[30]) = *(_OWORD *)(a2 + v6[30]);
  v23 = v6[31];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v21((const void *)(a2 + v23), 1, v19))
  {
    v26 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v24, v25, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v24, 0, 1, v19);
  }
  v27 = v6[32];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)(a1 + v6[33]) = *(_QWORD *)(a2 + v6[33]);
  v30 = v6[34];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (v21((const void *)(a2 + v30), 1, v19))
  {
    v33 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v31, v32, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v31, 0, 1, v19);
  }
  *(_OWORD *)(a1 + v6[35]) = *(_OWORD *)(a2 + v6[35]);
  v34 = v6[36];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_QWORD *)(v35 + 13) = *(_QWORD *)(v36 + 13);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  v37 = v6[37];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = v6[38];
  v41 = a1 + v40;
  v42 = a2 + v40;
  *(_DWORD *)v41 = *(_DWORD *)v42;
  *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
  v43 = a3[5];
  v44 = a3[6];
  v45 = a1 + v43;
  v46 = a2 + v43;
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(_QWORD *)(v45 + 32) = *(_QWORD *)(v46 + 32);
  *(_BYTE *)(a1 + v44) = *(_BYTE *)(a2 + v44);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for LibraryBookInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v12 = v11[10];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_21C458BF4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = v11[11];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = v11[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = v11[13];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v34 = v11[14];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = sub_21C458C60();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_12:
    v42 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_13:
  v43 = v11[15];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  v48 = v11[16];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = (_QWORD *)((char *)a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[17]) = *((_BYTE *)a2 + v11[17]);
  *(_QWORD *)((char *)a1 + v11[18]) = *(_QWORD *)((char *)a2 + v11[18]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[19]) = *((_BYTE *)a2 + v11[19]);
  *((_BYTE *)a1 + v11[20]) = *((_BYTE *)a2 + v11[20]);
  *((_BYTE *)a1 + v11[21]) = *((_BYTE *)a2 + v11[21]);
  *((_BYTE *)a1 + v11[22]) = *((_BYTE *)a2 + v11[22]);
  *((_BYTE *)a1 + v11[23]) = *((_BYTE *)a2 + v11[23]);
  *((_BYTE *)a1 + v11[24]) = *((_BYTE *)a2 + v11[24]);
  *((_BYTE *)a1 + v11[25]) = *((_BYTE *)a2 + v11[25]);
  *((_BYTE *)a1 + v11[26]) = *((_BYTE *)a2 + v11[26]);
  *((_BYTE *)a1 + v11[27]) = *((_BYTE *)a2 + v11[27]);
  *((_BYTE *)a1 + v11[28]) = *((_BYTE *)a2 + v11[28]);
  *((_BYTE *)a1 + v11[29]) = *((_BYTE *)a2 + v11[29]);
  v53 = v11[30];
  v54 = (_QWORD *)((char *)a1 + v53);
  v55 = (_QWORD *)((char *)a2 + v53);
  v57 = *v55;
  v56 = v55[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  v58 = v11[31];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = v39((char *)a1 + v58, 1, v37);
  v62 = v39(v60, 1, v37);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v59, v60, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v59, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v59, v37);
LABEL_18:
    v63 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v59, v60, v37);
LABEL_19:
  v64 = v11[32];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v65[8] = v66[8];
  *(_QWORD *)((char *)a1 + v11[33]) = *(_QWORD *)((char *)a2 + v11[33]);
  v67 = v11[34];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  v70 = v39((char *)a1 + v67, 1, v37);
  v71 = v39(v69, 1, v37);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v68, v69, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v68, 0, 1, v37);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v68, v37);
LABEL_24:
    v72 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v68, v69, v37);
LABEL_25:
  v73 = v11[35];
  v74 = (_QWORD *)((char *)a1 + v73);
  v75 = (_QWORD *)((char *)a2 + v73);
  v77 = *v75;
  v76 = v75[1];
  *v74 = v77;
  v74[1] = v76;
  swift_bridgeObjectRelease();
  v78 = v11[36];
  v79 = (char *)a1 + v78;
  v80 = (char *)a2 + v78;
  *(_OWORD *)v79 = *(_OWORD *)v80;
  *(_QWORD *)(v79 + 13) = *(_QWORD *)(v80 + 13);
  v81 = v11[37];
  v82 = (char *)a1 + v81;
  v83 = (char *)a2 + v81;
  v82[8] = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v84 = v11[38];
  v85 = (char *)a1 + v84;
  v86 = (char *)a2 + v84;
  v85[4] = v86[4];
  *(_DWORD *)v85 = *(_DWORD *)v86;
  v87 = a3[5];
  v88 = (uint64_t)a1 + v87;
  v89 = (char *)a2 + v87;
  if (*(_QWORD *)((char *)a1 + v87 + 24))
    sub_21C3E2754(v88);
  v90 = *((_OWORD *)v89 + 1);
  *(_OWORD *)v88 = *(_OWORD *)v89;
  *(_OWORD *)(v88 + 16) = v90;
  *(_QWORD *)(v88 + 32) = *((_QWORD *)v89 + 4);
  v91 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v92 = (_QWORD *)((char *)a1 + v91);
  v93 = (_QWORD *)((char *)a2 + v91);
  if ((unint64_t)(*(_QWORD *)((char *)a1 + v91 + 8) - 1) >= 2)
  {
    v94 = v93[1];
    if ((unint64_t)(v94 - 1) >= 2)
    {
      *v92 = *v93;
      v92[1] = v94;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_21C400ED4((uint64_t)v92);
  }
  *(_OWORD *)v92 = *(_OWORD *)v93;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C401948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryBookInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C4019E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CommonLibraryAssetInfo();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  return result;
}

uint64_t sub_21C401A5C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t destroy for LibraryBookInfo.BookType(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *_s14BookFoundation15LibraryBookInfoV8BookTypeOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for LibraryBookInfo.BookType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = a1[1];
  v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v4 = a2[1];
  v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithTake for LibraryBookInfo.BookType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookInfo.BookType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LibraryBookInfo.BookType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t sub_21C401D20(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_21C401D44(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryBookInfo.BookType()
{
  return &type metadata for LibraryBookInfo.BookType;
}

uint64_t MResourceSet.__allocating_init(with:config:)(uint64_t a1, char *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  MResourceSet.init(with:config:)(a1, a2);
  return v4;
}

uint64_t MResourceSet.init(with:config:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  __int128 v7;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 40) = 0;
  sub_21C401E80();
  swift_bridgeObjectRetain();
  sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v2 + 40) = v7;
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_21C401E80()
{
  unint64_t result;

  result = qword_25527A578;
  if (!qword_25527A578)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B0E8, &type metadata for MResourceSet.Keys);
    atomic_store(result, (unint64_t *)&qword_25527A578);
  }
  return result;
}

uint64_t sub_21C401EC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C403104(v2, a1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_21C401F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C401E80();
  sub_21C4340FC(v1, v2, (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_21C401F9C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_21C402E70();
  if (!v0)
    return 0;
  MEMORY[0x24BDAC7A8](v0);
  sub_21C3E344C(&qword_25527A580);
  sub_21C403840((unint64_t *)&unk_25527A588, &qword_25527A580);
  v1 = sub_21C458FA8();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_21C402064()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_21C40207C()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
  v0[3] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_21C402118;
  v3 = (_QWORD *)v0[2];
  v2[25] = 0;
  v2[26] = v3;
  v2[23] = v1;
  v2[24] = &unk_25527A598;
  v2[27] = *v3;
  return swift_task_switch();
}

uint64_t sub_21C402118()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();

  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_21C40218C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C4021C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_BYTE *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 48) = v6;
  *(_QWORD *)(v1 + 64) = v2;
  *(_BYTE *)(v1 + 72) = v3;
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v1 + 96) = v5;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 104) = v7;
  *v7 = v1;
  v7[1] = sub_21C40223C;
  return MCatalogRequest.fetch()();
}

uint64_t sub_21C40223C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_21C4022B0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(v1, sel_responseDictionary);

  if (v2)
  {
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_21C40233C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[27] = *v3;
  return swift_task_switch();
}

uint64_t sub_21C402360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[5];
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60[8];
  void *v61;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = sub_21C402E70();
    swift_bridgeObjectRelease();
    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 208);
      v6 = *(void **)(v0 + 184);
      v7 = sub_21C41604C((uint64_t)&unk_24E03E630);
      LOBYTE(v56[0]) = *(_BYTE *)(v5 + 24);
      sub_21C435680(0, 0, 0, v7, v2, v3, v6, (char *)v56, (uint64_t)&v45);
      v17 = *(_QWORD *)(v0 + 208);
      v18 = *(int **)(v0 + 192);
      v20 = v45;
      v19 = v46;
      *(_QWORD *)(v0 + 224) = v45;
      *(_QWORD *)(v0 + 232) = v19;
      v21 = v47;
      v22 = v48;
      *(_QWORD *)(v0 + 240) = v47;
      *(_QWORD *)(v0 + 248) = v22;
      v23 = v49;
      v24 = v50;
      v25 = v51;
      v26 = v52;
      *(_QWORD *)(v0 + 256) = v49;
      *(_QWORD *)(v0 + 264) = v26;
      v56[0] = v20;
      v56[1] = v19;
      v56[2] = v21;
      v56[3] = v22;
      v56[4] = v23;
      v57 = v24;
      v58 = v25;
      v59 = v26;
      v27 = *(void **)(v17 + 32);
      v60[0] = *(_BYTE *)(v5 + 24);
      v61 = v27;
      v28 = (void *)objc_opt_self();
      v29 = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = v23;
      swift_bridgeObjectRetain();
      MCatalogRequest.init(with:config:bag:)((uint64_t)v56, v60, objc_msgSend(v28, sel_defaultBag));
      v31 = v45;
      v32 = v46;
      *(_QWORD *)(v0 + 272) = v45;
      *(_QWORD *)(v0 + 280) = v32;
      v33 = v47;
      v34 = v48;
      *(_QWORD *)(v0 + 288) = v47;
      *(_QWORD *)(v0 + 296) = v34;
      v35 = v49;
      v36 = v50;
      *(_QWORD *)(v0 + 304) = v49;
      *(_QWORD *)(v0 + 312) = v36;
      v37 = v51;
      v38 = v52;
      v39 = v53;
      v40 = v54;
      *(_QWORD *)(v0 + 320) = v51;
      *(_QWORD *)(v0 + 328) = v40;
      v41 = v55;
      *(_QWORD *)(v0 + 336) = v55;
      *(_QWORD *)(v0 + 16) = v31;
      *(_QWORD *)(v0 + 24) = v32;
      *(_QWORD *)(v0 + 32) = v33;
      *(_QWORD *)(v0 + 40) = v34;
      *(_QWORD *)(v0 + 48) = v35;
      *(_QWORD *)(v0 + 56) = v36;
      *(_QWORD *)(v0 + 64) = v37;
      *(_BYTE *)(v0 + 72) = v38;
      *(_QWORD *)(v0 + 80) = v39;
      *(_QWORD *)(v0 + 88) = v40;
      *(_QWORD *)(v0 + 96) = v41;
      v44 = (uint64_t (*)(uint64_t))((char *)v18 + *v18);
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 344) = v42;
      *v42 = v0;
      v42[1] = sub_21C402758;
      return v44(v0 + 16);
    }
    swift_bridgeObjectRelease();
  }
  v8 = sub_21C402E70();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (qword_255279F00 != -1)
      swift_once();
    v9 = sub_21C458D20();
    sub_21C3E2BA0(v9, (uint64_t)qword_25527A560);
    swift_retain_n();
    v10 = sub_21C458D08();
    v11 = sub_21C45920C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      *(_DWORD *)v12 = 136315138;
      v45 = v13;
      v14 = *(_QWORD *)(v1 + 48);
      *(_QWORD *)(v0 + 136) = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v0 + 144) = v14;
      swift_bridgeObjectRetain();
      sub_21C3E344C(&qword_25527A728);
      v15 = sub_21C458E7C();
      *(_QWORD *)(v0 + 176) = sub_21C409744(v15, v16, &v45);
      sub_21C459290();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v10, v11, "Tried to fetchNext with empty resources for href: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22077C294](v13, -1, -1);
      MEMORY[0x22077C294](v12, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C402758(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C4027C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(_QWORD *, char);
  _QWORD *v7;
  void *v8;
  void *v9;
  _BYTE *v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v1 = *(_QWORD *)(v0 + 352);
  if (v1)
  {
    *(_BYTE *)(v0 + 369) = 0;
    v2 = sub_21C3E344C(&qword_25527A738);
    sub_21C401E80();
    sub_21C4340FC(v1, v2, v0 + 168);
    v3 = *(_QWORD *)(v0 + 168);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 208);
      swift_retain();
      v5 = sub_21C403654(v3, v4);
      swift_bridgeObjectRelease();
      swift_release();
      v6 = sub_21C402FA8((uint64_t *)(v0 + 104));
      if (*v7)
        sub_21C434C04(v5);
      else
        swift_bridgeObjectRelease();
      v6((_QWORD *)(v0 + 104), 0);
    }
    v12 = *(_QWORD *)(v0 + 352);
    v18 = *(void **)(v0 + 336);
    v20 = *(void **)(v0 + 320);
    v22 = *(void **)(v0 + 280);
    v24 = *(void **)(v0 + 272);
    v13 = *(void **)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 208);
    *(_BYTE *)(v0 + 368) = 2;
    sub_21C4340FC(v12, MEMORY[0x24BEE0D00], v0 + 152);
    swift_bridgeObjectRelease();
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    v15 = sub_21C402E70();
    v16 = *(_QWORD *)(v14 + 56);
    *(_QWORD *)(v14 + 56) = v15;
    sub_21C403328(v16);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v8 = *(void **)(v0 + 336);
    v19 = *(void **)(v0 + 320);
    v21 = *(void **)(v0 + 280);
    v23 = *(void **)(v0 + 272);
    v9 = *(void **)(v0 + 256);
    sub_21C4037D4();
    swift_allocError();
    *v10 = 6;
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    v11 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v11();
}

uint64_t sub_21C402AF0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  v6 = *(void **)(v0 + 336);
  v1 = *(void **)(v0 + 272);
  v2 = *(void **)(v0 + 280);
  v3 = *(void **)(v0 + 256);
  v5 = *(void **)(v0 + 320);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C402BD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_21C402BEC()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  _QWORD *v3;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 16) + 48))
    return (*(uint64_t (**)(void))(v0 + 8))();
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_21C402CAC;
  v3 = *(_QWORD **)(v0 + 16);
  v2[25] = 0;
  v2[26] = v3;
  v2[23] = v1;
  v2[24] = &unk_25527A598;
  v2[27] = *v3;
  return swift_task_switch();
}

uint64_t sub_21C402CAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_21C402D18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C402D44(char *a1, char *a2)
{
  return sub_21C3F8744(*a1, *a2);
}

uint64_t sub_21C402D50()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C402DA8()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C402DD4()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C402E28@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C40378C();
  *a1 = result;
  return result;
}

void sub_21C402E54(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aData_4[8 * *v1];
  a1[1] = 0xE400000000000000;
}

uint64_t sub_21C402E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = v1;
  if (v1 == 1)
  {
    v2 = sub_21C402ECC(v0);
    v3 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v2;
    swift_bridgeObjectRetain();
    sub_21C403328(v3);
  }
  sub_21C403818(v1);
  return v2;
}

uint64_t sub_21C402ECC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v3 = sub_21C3E344C(&qword_25527A738);
  sub_21C401E80();
  sub_21C4340FC(v2, v3, (uint64_t)&v7);
  v4 = v7;
  if (v7)
  {
    swift_retain();
    v5 = sub_21C403654(v4, a1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v5;
}

uint64_t (*sub_21C402FA8(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_21C402E70();
  return sub_21C402FDC;
}

uint64_t sub_21C402FDC(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = *a1;
  if ((a2 & 1) == 0)
    return sub_21C403328(v3);
  swift_bridgeObjectRetain();
  sub_21C403328(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C403028@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t *);
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v5 = *a1;
  sub_21C401E80();
  sub_21C4340FC(v5, MEMORY[0x24BEE0D00], (uint64_t)&v13);
  if (v14 && (static MResourceType.classType(for:)(v13, v14), v7 = v6, swift_bridgeObjectRelease(), v7))
  {
    v8 = *(void **)(a2 + 32);
    LOBYTE(v13) = *(_BYTE *)(a2 + 24);
    v14 = (uint64_t)v8;
    v9 = *(uint64_t (**)(uint64_t, uint64_t *))(v7 + 128);
    v10 = v8;
    v11 = swift_bridgeObjectRetain();
    result = v9(v11, &v13);
  }
  else
  {
    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t sub_21C403104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_21C3E344C(&qword_25527A738);
  sub_21C401E80();
  v5 = sub_21C4340FC(a1, v4, (uint64_t)&v10);
  if (!v10)
    return 0;
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for MSparseResource(0, a2, v6, v7);
  sub_21C403840(&qword_25527A740, &qword_25527A738);
  v8 = sub_21C458FA8();
  swift_bridgeObjectRelease();
  return v8;
}

id sub_21C403228@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id result;
  id v5;

  v3 = *a1;
  result = (id)swift_dynamicCastClass();
  v5 = result;
  if (result)
    result = v3;
  *a2 = v5;
  return result;
}

uint64_t sub_21C403274@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  char v10[8];
  void *v11;

  type metadata accessor for MSparseResource(0, a2, a2, a3);
  v6 = *(void **)(a1 + 32);
  v10[0] = *(_BYTE *)(a1 + 24);
  v11 = v6;
  v7 = v6;
  v8 = swift_bridgeObjectRetain();
  result = sub_21C43090C(v8, v10);
  *a4 = result;
  return result;
}

uint64_t MResourceSet.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_21C403328(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_21C403328(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t MResourceSet.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_21C403328(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MResourceSet()
{
  return objc_opt_self();
}

uint64_t method lookup function for MResourceSet()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MResourceSet.__allocating_init(with:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of MResourceSet.sparseResources<A>()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MResourceSet.meta.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MResourceSet.resources<A>()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MResourceSet.fetchNext()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 200) + *(_QWORD *)(*(_QWORD *)v0 + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_21C403880;
  return v4();
}

uint64_t dispatch thunk of MResourceSet.fetchAll()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 216) + *(_QWORD *)(*(_QWORD *)v0 + 216));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_21C40347C;
  return v4();
}

uint64_t sub_21C40347C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t storeEnumTagSinglePayload for MResourceSet.Keys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21C403510 + 4 * byte_21C45B015[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21C403544 + 4 * byte_21C45B010[v4]))();
}

uint64_t sub_21C403544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40354C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C403554);
  return result;
}

uint64_t sub_21C403560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C403568);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21C40356C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C403574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MResourceSet.Keys()
{
  return &type metadata for MResourceSet.Keys;
}

unint64_t sub_21C403594()
{
  unint64_t result;

  result = qword_25527A720;
  if (!qword_25527A720)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B0C0, &type metadata for MResourceSet.Keys);
    atomic_store(result, (unint64_t *)&qword_25527A720);
  }
  return result;
}

uint64_t sub_21C4035D8()
{
  uint64_t v0;

  v0 = sub_21C458D20();
  sub_21C3E3604(v0, qword_25527A560);
  sub_21C3E2BA0(v0, (uint64_t)qword_25527A560);
  return sub_21C458D14();
}

uint64_t sub_21C403654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = MEMORY[0x24BEE4AF8];
  v11 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v10 = *(_QWORD *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain();
      sub_21C403028(&v10, a2, &v9);
      v8 = swift_bridgeObjectRelease();
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x22077B6A0](v8);
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21C459044();
        sub_21C459074();
        sub_21C459038();
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

uint64_t sub_21C40378C()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

unint64_t sub_21C4037D4()
{
  unint64_t result;

  result = qword_25527A730;
  if (!qword_25527A730)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MCatalogService.FetchError, &type metadata for MCatalogService.FetchError);
    atomic_store(result, (unint64_t *)&qword_25527A730);
  }
  return result;
}

uint64_t sub_21C403818(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_21C403828@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_21C403274(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 16), a1, a2);
}

uint64_t sub_21C403840(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_21C3E35C0(a2);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void NSBundle.path(forExactResource:ofType:)()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  sub_21C459368();
  v1 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  sub_21C459368();
  v2 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_pathForResource_ofType_, v1, v2);

  if (v3)
  {
    sub_21C458E64();

  }
  else
  {
    __break(1u);
  }
}

uint64_t URL.init(object:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = sub_21C3E344C(&qword_25527A2D0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v11[0] = 0;
      v11[1] = 0;
      sub_21C458E58();
    }
  }
  sub_21C458BDC();
  swift_bridgeObjectRelease();

  v7 = sub_21C458BF4();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_21C403A74((uint64_t)v6);
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

uint64_t sub_21C403A74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A2D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t URL.isEquivalent(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  char v14;
  uint64_t v16;

  v0 = sub_21C458BF4();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v16 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v16 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v16 - v11;
  sub_21C458B88();
  sub_21C458B94();
  v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v12, v0);
  sub_21C458B88();
  sub_21C458B94();
  v13(v7, v0);
  v14 = MEMORY[0x22077B244](v10, v4);
  v13(v4, v0);
  v13(v10, v0);
  return v14 & 1;
}

Swift::String __swiftcall URL.pathWithoutLeadingSlash()()
{
  _QWORD *v0;
  _QWORD *v1;
  int64_t v2;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String result;

  v0 = (_QWORD *)sub_21C458BA0();
  v1 = v0;
  v2 = v0[2];
  if (!v2)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = 0xE000000000000000;
    goto LABEL_21;
  }
  if (v0[4] == 47 && v0[5] == 0xE100000000000000)
    goto LABEL_10;
  if ((sub_21C4594F4() & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    sub_21C3E344C(&qword_25527A748);
    sub_21C3E3134();
    v6 = sub_21C458DF8();
    v8 = v7;
    swift_bridgeObjectRelease_n();
LABEL_21:
    v9 = v6;
    v10 = (void *)v8;
    goto LABEL_25;
  }
  v2 = v1[2];
  if (v2)
  {
    while (1)
    {
LABEL_10:
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t)(v2 - 1) > v1[3] >> 1)
        v1 = sub_21C3E3180(isUniquelyReferenced_nonNull_native, v2, 1, v1);
      swift_arrayDestroy();
      v5 = v1[2];
      if (!v5)
        break;
      memmove(v1 + 4, v1 + 6, 16 * v5 - 16);
      v2 = v5 - 1;
      v1[2] = v5 - 1;
      if (v5 == 1)
        goto LABEL_23;
      if (v1[4] != 47 || v1[5] != 0xE100000000000000)
      {
        if ((sub_21C4594F4() & 1) == 0)
          goto LABEL_19;
        v2 = v1[2];
      }
      if (!v2)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  v9 = sub_21C459464();
  __break(1u);
LABEL_25:
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

Swift::String __swiftcall URL.pathQueryAndFragmentWithoutLeadingSlash()()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String result;

  v0 = URL.pathWithoutLeadingSlash()();
  sub_21C458BD0();
  if (v1)
  {
    sub_21C458F00();
    sub_21C458F00();
    swift_bridgeObjectRelease();
  }
  sub_21C458BE8();
  if (v2)
  {
    sub_21C458F00();
    sub_21C458F00();
    swift_bridgeObjectRelease();
  }
  countAndFlagsBits = v0._countAndFlagsBits;
  object = v0._object;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t sub_21C403E6C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  v3 = v2;
  v4 = a2 & 1;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_21C3E8498((_OWORD *)a1, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_21C409D20(v14, v4, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_21C3FF670(a1, &qword_254078EB8);
    v7 = sub_21C4519F4(v4);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_21C457A28();
        v11 = v13;
      }
      sub_21C3E8498((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v9), v14);
      sub_21C451EF0(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_21C3FF670((uint64_t)v14, &qword_254078EB8);
  }
}

uint64_t sub_21C403F7C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    sub_21C3FD494(0, v2, 0);
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_21C404360()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache);
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
    *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache) = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static MAsset.CacheKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MAsset.CacheKey.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t MAsset.CacheKey.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t MAsset.artistName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_artistName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAsset.artwork.getter()
{
  return swift_bridgeObjectRetain();
}

void MAsset.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_kind);
}

id sub_21C4044A4()
{
  void *v0;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MAsset.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAsset.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_url;
  v4 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t static MAsset.requiredAttributeKeys.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_21C403F7C((uint64_t)&unk_24E03E6F0);
  v1 = sub_21C40A08C(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_21C4045E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C40461C + 4 * byte_21C45B15C[a1]))(0x614E747369747261, 0xEA0000000000656DLL);
}

uint64_t sub_21C40461C()
{
  return 0x6B726F77747261;
}

uint64_t sub_21C404634()
{
  return 0x636F4C6F69647561;
}

unint64_t sub_21C404654()
{
  return 0xD000000000000012;
}

uint64_t sub_21C404670()
{
  return 0x6B726F576B6F6F62;
}

unint64_t sub_21C404694()
{
  return 0xD000000000000015;
}

uint64_t sub_21C4048A0()
{
  return 0x6974615272657375;
}

uint64_t sub_21C4048B8()
{
  return 7107189;
}

uint64_t sub_21C4048C8()
{
  return 0x6E6F6973726576;
}

uint64_t sub_21C4048E0()
{
  return 0x486E6F6973726576;
}

void *MAsset.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MAsset.init(with:config:)(a1, a2);
}

void *MAsset.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  char *v30;
  _BYTE *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  ObjectType = swift_getObjectType();
  v6 = sub_21C3E344C(&qword_25527A2D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *a2;
  v12 = (void *)*((_QWORD *)a2 + 1);
  v43 = OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache;
  v44 = v2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache] = 0;
  LOBYTE(v48) = 0;
  v13 = v2;
  swift_bridgeObjectRetain();
  v14 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A120();
  sub_21C4340FC(a1, v14, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  v15 = v46;
  v45 = v13;
  if (!v46)
  {

    goto LABEL_12;
  }
  v42 = v12;
  LOBYTE(v48) = 0;
  sub_21C40A1A0();
  swift_bridgeObjectRetain();
  sub_21C4340FC(v15, MEMORY[0x24BEE0D00], (uint64_t)&v46);
  swift_bridgeObjectRelease();
  v16 = v47;
  if (!v47)
  {
LABEL_11:
    swift_bridgeObjectRelease();

    goto LABEL_12;
  }
  v39 = v46;
  LOBYTE(v48) = 1;
  swift_bridgeObjectRetain();
  sub_21C4340FC(v15, v14, (uint64_t)&v46);
  swift_bridgeObjectRelease();
  v17 = v46;
  if (!v46)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  LOBYTE(v48) = 15;
  swift_bridgeObjectRetain();
  sub_21C4340FC(v15, MEMORY[0x24BEE0D00], (uint64_t)&v46);
  swift_bridgeObjectRelease();
  if (!v47)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v38 = v47;
  v37 = v46;
  LOBYTE(v48) = 25;
  sub_21C4340FC(v15, MEMORY[0x24BEE0D00], (uint64_t)&v46);
  swift_bridgeObjectRelease();
  if (!v47)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  sub_21C458BDC();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_21C3FF670((uint64_t)v8, &qword_25527A2D0);
LABEL_12:
    if (qword_254078E68 != -1)
      swift_once();
    if (qword_255279EF0 != -1)
      swift_once();
    v18 = sub_21C458D20();
    sub_21C3E2BA0(v18, (uint64_t)qword_25527A278);
    swift_bridgeObjectRetain();
    v19 = sub_21C458D08();
    v20 = sub_21C45920C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v46 = v22;
      *(_DWORD *)v21 = 136315394;
      sub_21C404FB0(ObjectType);
      v48 = sub_21C409744(v23, v24, &v46);
      sub_21C459290();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v25 = sub_21C458D80();
      v27 = v26;
      swift_bridgeObjectRelease();
      v48 = sub_21C409744(v25, v27, &v46);
      sub_21C459290();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v19, v20, "Invalid data for %s: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22077C294](v22, -1, -1);
      MEMORY[0x22077C294](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    type metadata accessor for MAsset();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v30 = v41;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v41, v8, v9);
  v31 = v45;
  v32 = (uint64_t *)&v45[OBJC_IVAR____TtC14BookFoundation6MAsset_artistName];
  *v32 = v39;
  v32[1] = v16;
  *(_QWORD *)&v31[OBJC_IVAR____TtC14BookFoundation6MAsset_artwork] = v17;
  v31[OBJC_IVAR____TtC14BookFoundation6MAsset_kind] = 2;
  v33 = (uint64_t *)&v31[OBJC_IVAR____TtC14BookFoundation6MAsset_name];
  v34 = v38;
  *v33 = v37;
  v33[1] = v34;
  (*(void (**)(_BYTE *, char *, uint64_t))(v10 + 16))(&v31[OBJC_IVAR____TtC14BookFoundation6MAsset_url], v30, v9);

  LOBYTE(v46) = v40;
  v47 = (uint64_t)v42;
  v28 = (void *)MResource.init(with:config:)(a1, (uint64_t)&v46);
  v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v36 = v28;
  v35(v30, v9);
  if (v28)

  return v28;
}

void sub_21C404FB0(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t *__return_ptr))(a1 + 136))(&v1);
  __asm { BR              X10 }
}

unint64_t sub_21C40500C()
{
  return 0xD000000000000011;
}

void sub_21C405094()
{
  sub_21C459404();
  __break(1u);
}

BOOL sub_21C405144()
{
  uint64_t ObjectType;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 3;
}

BOOL sub_21C4051E0()
{
  uint64_t ObjectType;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return (_BYTE)v2 == 0;
}

uint64_t sub_21C405224()
{
  return sub_21C406A18(22, &qword_25527A088);
}

uint64_t sub_21C405234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_url;
  v2 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id MAsset.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MAsset();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MAsset.cache(object:for:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v5;
  _BYTE v6[32];

  v3 = *a2;
  sub_21C3E5528(a1, (uint64_t)v6);
  v5 = sub_21C404360();
  sub_21C403E6C((uint64_t)v6, v3);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14BookFoundation6MAsset____lazy_storage___cache) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t MAsset.cachedValue(for:)@<X0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *a1;
  v4 = sub_21C404360();
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_21C4519F4(v3), (v6 & 1) != 0))
  {
    sub_21C3E5528(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C405440(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_21C3F7DDC(*a1, *a2);
}

uint64_t sub_21C40544C()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C405500()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C405590()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C405640@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C40A424();
  *a1 = result;
  return result;
}

void sub_21C40566C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA0000000000656DLL;
  v4 = 0xEE007265626D754ELL;
  v5 = 0x65636E6575716573;
  if (v2 != 1)
  {
    v5 = 0xD000000000000014;
    v4 = 0x800000021C45F000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x614E736569726573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t MAsset.seriesName.getter()
{
  return sub_21C405854();
}

uint64_t MAsset.sequenceNumber.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
  v2 = sub_21C40A46C(1, v1);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_21C405774(_QWORD *a1)
{
  uint64_t (*v2)(void);
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[2];

  swift_getObjectType();
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x140);
  v3 = a1;
  v4 = v2();
  sub_21C40A1E4();
  sub_21C4340FC(v4, MEMORY[0x24BEE0D00], (uint64_t)v7);

  swift_bridgeObjectRelease();
  if (!v7[1])
    return 0;
  v5 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.sequenceDisplayLabel.getter()
{
  return sub_21C405854();
}

uint64_t sub_21C405854()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
  sub_21C40A1E4();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_21C4058F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_21C4045E4(*a1);
  v5 = v4;
  if (v3 == sub_21C4045E4(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_21C40597C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_21C45959C();
  sub_21C4045E4(v1);
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C4059DC()
{
  unsigned __int8 *v0;

  sub_21C4045E4(*v0);
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C405A1C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_21C45959C();
  sub_21C4045E4(v1);
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C405A78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C40A69C();
  *a1 = result;
  return result;
}

uint64_t sub_21C405AA4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_21C4045E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MAsset.bookWorkAuthorName.getter()
{
  return sub_21C40697C();
}

uint64_t MAsset.bookWorkTitle.getter()
{
  return sub_21C40697C();
}

uint64_t MAsset.contentRating.getter()
{
  return sub_21C40697C();
}

uint64_t MAsset.isExplicit.getter()
{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  result = (uint64_t)objc_msgSend(v0, sel_contentRating);
  if (result)
  {
    v2 = (void *)result;
    v3 = sub_21C458E64();
    v5 = v4;

    if (v3 == 0x746963696C707865 && v5 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = sub_21C4594F4();
      swift_bridgeObjectRelease();
      return v7 & 1;
    }
  }
  return result;
}

uint64_t MAsset.editionKind.getter()
{
  return sub_21C40697C();
}

uint64_t MAsset.genreName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A748);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v3 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MAsset.buyParams.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A738);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_5;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v3 = 0;
    goto LABEL_6;
  }
  v3 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_6:
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.releaseDate.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  _QWORD v30[2];

  swift_getObjectType();
  v2 = sub_21C458C60();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21C3E344C(&qword_254078EC0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21C458CE4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = 21;
  sub_21C44F8CC(0);
  v13 = v12;
  sub_21C40A1A0();
  sub_21C4340FC(v13, MEMORY[0x24BEE0D00], (uint64_t)v30);
  swift_bridgeObjectRelease();
  if (!v30[1])
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  v27 = a1;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  sub_21C458CD8();
  v15 = (void *)sub_21C458CCC();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  objc_msgSend(v14, sel_setTimeZone_, v15);

  objc_msgSend(v14, sel_setFormatOptions_, 275);
  v16 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_dateFromString_, v16);

  if (!v17)
  {

    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v20(v7, 1, 1, v2);
    v22 = v27;
    goto LABEL_7;
  }
  v18 = v28;
  sub_21C458C54();

  v19 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v19(v7, v18, v2);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v20(v7, 0, 1, v2);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2);
  v22 = v27;
  if (v21 == 1)
  {
LABEL_7:
    sub_21C3FF670((uint64_t)v7, &qword_254078EC0);
    v23 = v22;
    v24 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v20)(v23, v24, 1, v2);
  }
  v19(v27, v7, v2);
  v23 = v22;
  v24 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v20)(v23, v24, 1, v2);
}

uint64_t sub_21C4062D8@<X0>(uint64_t a1@<X0>, char a2@<W2>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;

  v26 = a1;
  v27 = a3;
  v4 = sub_21C458C60();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_21C3E344C(&qword_254078EC0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21C458CE4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(MEMORY[0x24BDD15D0]);
  v16 = objc_msgSend(v15, sel_init, v26);
  if ((a2 & 1) != 0)
  {
    sub_21C458CD8();
    v17 = (void *)sub_21C458CCC();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    objc_msgSend(v16, sel_setTimeZone_, v17);

  }
  objc_msgSend(v16, sel_setFormatOptions_, 275);
  v18 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v16, sel_dateFromString_, v18);

  if (!v19)
  {

    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v21(v10, 1, 1, v4);
    goto LABEL_7;
  }
  sub_21C458C54();

  v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v20(v10, v7, v4);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v21(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
LABEL_7:
    sub_21C3FF670((uint64_t)v10, &qword_254078EC0);
    v23 = v27;
    v24 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v23, v24, 1, v4);
  }
  v22 = v27;
  v20(v27, v10, v4);
  v23 = v22;
  v24 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v21)(v23, v24, 1, v4);
}

uint64_t MAsset.hasSupplementalContent.getter()
{
  return sub_21C406B18(0xCu);
}

uint64_t MAsset.isIBook.getter()
{
  return sub_21C406B18(0xDu);
}

uint64_t MAsset.isSG.getter()
{
  return sub_21C406B18(0xEu);
}

uint64_t MAsset.bookSampleDownloadURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  swift_getObjectType();
  sub_21C44F8CC(0);
  v3 = v2;
  sub_21C40A1A0();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)v6);
  swift_bridgeObjectRelease();
  if (v6[1])
  {
    sub_21C458BDC();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v5 = sub_21C458BF4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t MAsset.locale.getter()
{
  uint64_t ObjectType;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v4);
  sub_21C44F8CC(0);
  v2 = v1;
  sub_21C40A1A0();
  sub_21C4340FC(v2, MEMORY[0x24BEE0D00], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t MAsset.pageProgressionDirection.getter()
{
  return sub_21C40697C();
}

uint64_t MAsset.pagesAreRTL.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v1 = objc_msgSend(v0, sel_pageProgressionDirection);
  if (!v1)
    return _s14BookFoundation23LocaleLanguageDirectionV5isRTLSbvgZ_0();
  v2 = v1;
  v3 = sub_21C458E64();
  v5 = v4;

  if (v3 == 7107698 && v5 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    return v7 & 1;
  }
}

uint64_t MAsset.previews.getter()
{
  return sub_21C406A18(18, &qword_25527A738);
}

id sub_21C4068B0(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[2];

  swift_getObjectType();
  v2 = a1;
  sub_21C44F8CC(0);
  v4 = v3;
  sub_21C40A1A0();
  sub_21C4340FC(v4, MEMORY[0x24BEE0D00], (uint64_t)v7);

  swift_bridgeObjectRelease();
  if (!v7[1])
    return 0;
  v5 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.version.getter()
{
  return sub_21C40697C();
}

uint64_t sub_21C40697C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C40A1A0();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MAsset.versionHistory.getter()
{
  return sub_21C406A18(27, &qword_25527A738);
}

uint64_t sub_21C406A18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v4 = v3;
  v5 = sub_21C3E344C(a2);
  sub_21C40A1A0();
  sub_21C4340FC(v4, v5, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_21C406AB8(void *a1, uint64_t a2, unsigned __int8 a3)
{
  id v4;
  uint64_t v5;
  char v6;

  v4 = a1;
  sub_21C44F8CC(0);
  v6 = sub_21C40A6EC(a3, v5);

  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t MAsset.supportsUnifiedProductPage.getter()
{
  return sub_21C406B18(0x17u);
}

uint64_t sub_21C406B18(unsigned __int8 a1)
{
  uint64_t v2;
  char v3;

  sub_21C44F8CC(0);
  v3 = sub_21C40A6EC(a1, v2);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_21C406B5C()
{
  return 1;
}

uint64_t sub_21C406B64()
{
  return sub_21C408AD4();
}

uint64_t sub_21C406B74()
{
  return sub_21C458EC4();
}

uint64_t sub_21C406B84()
{
  return sub_21C408B40();
}

uint64_t sub_21C406B94@<X0>(BOOL *a1@<X8>)
{
  return sub_21C408B94(a1);
}

void sub_21C406BA0(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

uint64_t MAsset.publisherName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  char v6;

  swift_getObjectType();
  v6 = 20;
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)v5);
  swift_bridgeObjectRelease();
  v3 = v5[0];
  if (!v5[0])
    return 0;
  sub_21C40A7C4();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v5[1])
    return v5[0];
  else
    return 0;
}

uint64_t sub_21C406CAC(char *a1, char *a2)
{
  return sub_21C3F7D34(*a1, *a2);
}

uint64_t sub_21C406CB8()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C406D3C()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C406D9C()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C406E1C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_21C406E78(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65756C6176;
  if (*v1)
    v2 = 0x6F43676E69746172;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xEB00000000746E75;
  *a1 = v2;
  a1[1] = v3;
}

double MAsset.averageRating.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double v4;
  _QWORD *v5;
  double v6;
  double v7;
  _BYTE v9[2];
  _QWORD *v10;

  swift_getObjectType();
  v9[1] = 24;
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  v3 = v10;
  v4 = 0.0;
  if (v10)
  {
    v9[0] = 0;
    sub_21C40A808();
    v5 = sub_21C4342A8((uint64_t)v9, v3);
    swift_bridgeObjectRelease();
    if (v5)
    {
      objc_msgSend(v5, sel_doubleValue);
      v7 = v6;

      return v7 / 5.0;
    }
  }
  return v4;
}

uint64_t MAsset.ratingCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char v7;

  swift_getObjectType();
  v7 = 24;
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  v3 = v5;
  if (v5
    && (v7 = 1,
        sub_21C40A808(),
        sub_21C4340FC(v3, MEMORY[0x24BEE1E88], (uint64_t)&v5),
        swift_bridgeObjectRelease(),
        v6 != 1))
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

unint64_t MAsset.ratingCountForAnalytics.getter()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  BOOL v9;
  float v10;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t);
  _QWORD v14[4];
  _BYTE v15[16];
  float *v16;
  _QWORD v17[3];
  char v18;
  float v19;

  sub_21C3E344C(&qword_25527A7A8);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_21C45A5D0;
  v2 = objc_msgSend(v0, sel_ratingCount);
  v3 = MEMORY[0x24BEE1568];
  *(_QWORD *)(v1 + 56) = MEMORY[0x24BEE14E8];
  *(_QWORD *)(v1 + 64) = v3;
  *(float *)(v1 + 32) = (float)(unint64_t)v2;
  v4 = sub_21C458E70();
  v6 = v5;
  v19 = 0.0;
  v16 = &v19;
  if ((v5 & 0x1000000000000000) != 0 || !(v5 & 0x2000000000000000 | v4 & 0x1000000000000000))
  {
    sub_21C459344();
    goto LABEL_7;
  }
  MEMORY[0x24BDAC7A8](v4);
  v0 = v14;
  v14[2] = sub_21C40A84C;
  v14[3] = v15;
  if ((v6 & 0x2000000000000000) != 0)
  {
    v17[0] = v7;
    v17[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v9 = (v7 > 0x20u || ((0x100003E01uLL >> v7) & 1) == 0)
      && (v8 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
      && *v8 == 0;
    v18 = v9;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if ((v7 & 0x1000000000000000) == 0)
    goto LABEL_24;
  v0 = v15;
  ((void (*)(_QWORD *__return_ptr, uint64_t))sub_21C40A84C)(v17, (v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  while (1)
  {
    v18 = v17[0];
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_14:
    v10 = v19;
    if (!v18)
      v10 = 0.0;
    if ((~LODWORD(v10) & 0x7F800000) == 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if (v10 <= -1.0)
      goto LABEL_22;
    if (v10 < 1.8447e19)
      return (unint64_t)v10;
LABEL_23:
    __break(1u);
LABEL_24:
    v12 = sub_21C45938C();
    v13 = (void (*)(_QWORD *__return_ptr, uint64_t))v0[2];
    v0 = (_QWORD *)v0[3];
    v13(v17, v12);
  }
}

void sub_21C407360(char *a1)
{
  sub_21C3F7BF0(*a1);
}

void sub_21C40736C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C4073B0()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C40741C()
{
  __asm { BR              X10 }
}

uint64_t sub_21C407450()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C4074A8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C4074E8()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C407554@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C40B584();
  *a1 = result;
  return result;
}

uint64_t sub_21C407580()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21C4075A8 + 4 * byte_21C45B18A[*v0]))();
}

void sub_21C4075A8(_QWORD *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

void sub_21C4075C4(_QWORD *a1@<X8>)
{
  *a1 = 0x74726F6873;
  a1[1] = 0xE500000000000000;
}

void sub_21C4075DC(_QWORD *a1@<X8>)
{
  *a1 = 0x656E696C676174;
  a1[1] = 0xE700000000000000;
}

uint64_t MAsset.standardNotes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  v3 = v5;
  sub_21C40A8B8();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21C4076E4()
{
  return sub_21C408AD4();
}

uint64_t sub_21C4076FC()
{
  return sub_21C458EC4();
}

uint64_t sub_21C407714()
{
  return sub_21C408B40();
}

uint64_t sub_21C40772C@<X0>(BOOL *a1@<X8>)
{
  return sub_21C408B94(a1);
}

void sub_21C407738(_QWORD *a1@<X8>)
{
  *a1 = 0x647261646E617473;
  a1[1] = 0xE800000000000000;
}

uint64_t MAsset.standardDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  v3 = v5;
  sub_21C40A8FC();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

BookFoundation::MAsset::OfferType_optional __swiftcall MAsset.OfferType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  BookFoundation::MAsset::OfferType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t MAsset.OfferType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C4078B4 + 4 * byte_21C45B18E[*v0]))(7959906, 0xE300000000000000);
}

uint64_t sub_21C4078B4()
{
  return 7628135;
}

uint64_t sub_21C4078C0()
{
  return 0x6F6C6E776F646572;
}

uint64_t sub_21C4078DC()
{
  return 0x726564726F657270;
}

void sub_21C4078F4(char *a1)
{
  sub_21C3F78C4(*a1);
}

void sub_21C407900()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C407944()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C4079AC()
{
  __asm { BR              X10 }
}

uint64_t sub_21C4079E0()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C407A34()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C407A74()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

BookFoundation::MAsset::OfferType_optional sub_21C407ADC(Swift::String *a1)
{
  return MAsset.OfferType.init(rawValue:)(*a1);
}

uint64_t sub_21C407AE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21C407B10 + 4 * byte_21C45B19E[*v0]))();
}

void sub_21C407B10(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 7628135;
  a1[1] = v1;
}

void sub_21C407B20(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C6E776F646572;
  a1[1] = 0xEA00000000006461;
}

void sub_21C407B40(_QWORD *a1@<X8>)
{
  *a1 = 0x726564726F657270;
  a1[1] = 0xE800000000000000;
}

BookFoundation::MAsset::OfferType MAsset.offerType.getter@<W0>(_BYTE *a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  BookFoundation::MAsset::OfferType result;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String rawValue;

  swift_getObjectType();
  v3 = objc_msgSend(v1, sel_offer);
  if (v3)
  {
    v4 = v3;
    v5 = sub_21C458D74();

  }
  else
  {
    v5 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v5, MEMORY[0x24BEE0D00], (uint64_t)&rawValue);
  result = swift_bridgeObjectRelease();
  object = rawValue._object;
  if (rawValue._object)
  {
    countAndFlagsBits = rawValue._countAndFlagsBits;
    return MAsset.OfferType.init(rawValue:)(*(Swift::String *)(&object - 1)).value;
  }
  else
  {
    *a1 = 4;
  }
  return result;
}

uint64_t MAsset.rawOfferType.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_21C407D1C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C407D4C + 4 * byte_21C45B1A2[a1]))(0x737465737361, 0xE600000000000000);
}

unint64_t sub_21C407D4C()
{
  return 0xD000000000000013;
}

uint64_t sub_21C407D68()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21C407D80()
{
  return 0x726F466563697270;
}

uint64_t sub_21C407DA4()
{
  return 0x6563697270;
}

uint64_t sub_21C407DB8()
{
  return 1702521203;
}

uint64_t sub_21C407DC8()
{
  return 1701869940;
}

void sub_21C407DD8(char *a1)
{
  sub_21C3F7A00(*a1);
}

void sub_21C407DE4()
{
  char *v0;

  sub_21C432510(0, *v0);
}

void sub_21C407DF0(uint64_t a1)
{
  char *v1;

  sub_21C43221C(a1, *v1);
}

void sub_21C407DF8(uint64_t a1)
{
  char *v1;

  sub_21C432510(a1, *v1);
}

uint64_t sub_21C407E00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C40B5CC();
  *a1 = result;
  return result;
}

uint64_t sub_21C407E2C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_21C407D1C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_21C407E54()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  v4 = sub_21C3E344C(&qword_25527A738);
  sub_21C40A940();
  sub_21C4340FC(v3, v4, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!v7)
    return 0;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v5 = *(_QWORD *)(v7 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.duration.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_getObjectType();
  v0 = sub_21C407E54();
  sub_21C40A940();
  sub_21C4340FC(v0, MEMORY[0x24BEE4008], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  return v2;
}

id sub_21C408010(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(void), uint64_t (*a5)(_QWORD), uint64_t (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v10 = sub_21C3E344C(a3);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  a4();

  v14 = a5(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
  {
    v16 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }
  return v16;
}

uint64_t MAsset.expectedReleaseDate.getter@<X0>(char *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  _QWORD v32[2];

  swift_getObjectType();
  v3 = sub_21C458C60();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_21C3E344C(&qword_254078EC0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458CE4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = 1;
  v13 = objc_msgSend(v1, sel_offer);
  if (v13)
  {
    v14 = v13;
    v15 = sub_21C458D74();

  }
  else
  {
    v15 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v15, MEMORY[0x24BEE0D00], (uint64_t)v32);
  swift_bridgeObjectRelease();
  if (!v32[1])
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  v29 = a1;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  sub_21C458CD8();
  v17 = (void *)sub_21C458CCC();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  objc_msgSend(v16, sel_setTimeZone_, v17);

  objc_msgSend(v16, sel_setFormatOptions_, 275);
  v18 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v16, sel_dateFromString_, v18);

  if (!v19)
  {

    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v22(v8, 1, 1, v3);
    v24 = v29;
    goto LABEL_10;
  }
  v20 = v30;
  sub_21C458C54();

  v21 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v21(v8, v20, v3);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v22(v8, 0, 1, v3);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3);
  v24 = v29;
  if (v23 == 1)
  {
LABEL_10:
    sub_21C3FF670((uint64_t)v8, &qword_254078EC0);
    v25 = v24;
    v26 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v25, v26, 1, v3);
  }
  v21(v29, v8, v3);
  v25 = v24;
  v26 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v25, v26, 1, v3);
}

uint64_t MAsset.fileSize.getter()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  swift_getObjectType();
  v0 = sub_21C407E54();
  sub_21C40A940();
  sub_21C4340FC(v0, MEMORY[0x24BEE4008], (uint64_t)&v2);
  swift_bridgeObjectRelease();
  if (v3)
    return 0;
  else
    return v2;
}

uint64_t MAsset.offer.getter()
{
  return sub_21C408BFC();
}

uint64_t MAsset.isPreorder.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String rawValue;
  char v8;

  swift_getObjectType();
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v3, MEMORY[0x24BEE0D00], (uint64_t)&rawValue);
  swift_bridgeObjectRelease();
  object = rawValue._object;
  if (rawValue._object)
  {
    countAndFlagsBits = rawValue._countAndFlagsBits;
    MAsset.OfferType.init(rawValue:)(*(Swift::String *)(&object - 1));
    if (v8 != 4)
      __asm { BR              X10 }
  }
  return 0;
}

id sub_21C408788(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = (void *)sub_21C458E40();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t MAsset.priceFormatted.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char v10;

  swift_getObjectType();
  v10 = 4;
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v3, MEMORY[0x24BEE13C8], (uint64_t)&v8);
  swift_bridgeObjectRelease();
  result = 0;
  if ((v9 & 1) == 0 && v8 != 0.0)
  {
    v10 = 3;
    v5 = objc_msgSend(v0, sel_offer, v8);
    if (v5)
    {
      v6 = v5;
      v7 = sub_21C458D74();

    }
    else
    {
      v7 = 0;
    }
    sub_21C4340FC(v7, MEMORY[0x24BEE0D00], (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (v9)
      return *(_QWORD *)&v8;
    else
      return 0;
  }
  return result;
}

uint64_t MAsset.price.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v3, MEMORY[0x24BEE13C8], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MAsset.PreviewKeys.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t MAsset.PreviewKeys.rawValue.getter()
{
  return 7107189;
}

uint64_t sub_21C408AC4()
{
  return sub_21C408AD4();
}

uint64_t sub_21C408AD4()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C408B20()
{
  return sub_21C458EC4();
}

uint64_t sub_21C408B30()
{
  return sub_21C408B40();
}

uint64_t sub_21C408B40()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C408B88@<X0>(BOOL *a1@<X8>)
{
  return sub_21C408B94(a1);
}

uint64_t sub_21C408B94@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_21C408BE0(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t MAsset.preview.getter()
{
  return sub_21C408BFC();
}

uint64_t sub_21C408BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A738);
  sub_21C40A1A0();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v3 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t MAsset.previewURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];

  swift_getObjectType();
  v2 = MAsset.preview.getter();
  sub_21C40A984();
  sub_21C4340FC(v2, MEMORY[0x24BEE0D00], (uint64_t)v5);
  swift_bridgeObjectRelease();
  if (v5[1])
  {
    sub_21C458BDC();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v4 = sub_21C458BF4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
  }
}

BookFoundation::MAsset::ArtworkKeys_optional __swiftcall MAsset.ArtworkKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  BookFoundation::MAsset::ArtworkKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t MAsset.ArtworkKeys.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7107189;
  if (*v0 != 1)
    v1 = 0x6874646977;
  if (*v0)
    return v1;
  else
    return 0x746867696568;
}

uint64_t sub_21C408F94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_21C3F7F0C(*a1, *a2);
}

uint64_t sub_21C408FA0()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C409030()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C40909C()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

BookFoundation::MAsset::ArtworkKeys_optional sub_21C409128(Swift::String *a1)
{
  return MAsset.ArtworkKeys.init(rawValue:)(*a1);
}

void sub_21C409134(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE300000000000000;
  v5 = 7107189;
  if (v2 != 1)
  {
    v5 = 0x6874646977;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746867696568;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t MAsset.artworkURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_21C40A9C8();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v3);
  return v3;
}

_QWORD *MAsset.width.getter()
{
  return sub_21C4092C8(2);
}

_QWORD *MAsset.height.getter()
{
  return sub_21C4092C8(0);
}

_QWORD *sub_21C4092C8(char a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  swift_getObjectType();
  v8 = a1;
  v3 = *(_QWORD **)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_21C40A9C8();
  result = sub_21C4342A8((uint64_t)&v8, v3);
  v5 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    v7 = v6;

    return (_QWORD *)v7;
  }
  return result;
}

uint64_t MAsset.authors.getter()
{
  return sub_21C3FCCD8(CFSTR("authors"));
}

uint64_t MAsset.featuredEditions.getter()
{
  return sub_21C3FCCCC(CFSTR("featured-editions"));
}

uint64_t MAsset.genres.getter()
{
  return sub_21C3FCCE4(CFSTR("genres"));
}

uint64_t MAsset.seriesResource.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  id v4;
  id v5;

  if (!sub_21C409458())
    return 0;
  v0 = sub_21C44F71C();
  if (!v0)
  {
LABEL_11:
    swift_release();
    return 0;
  }
  v1 = v0;
  v2 = v0 & 0xFFFFFFFFFFFFFF8;
  if (!(v0 >> 62))
  {
    result = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_5;
    goto LABEL_10;
  }
  result = sub_21C459434();
  if (!result)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22077BA00](0, v1);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(id *)(v1 + 32);
LABEL_8:
    v5 = v4;
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C409458()
{
  uint64_t ObjectType;
  __CFString **v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v11);
  v1 = BFMCatalogRequestRelationshipAudiobookSeries;
  if (v11 == 3)
    v1 = BFMCatalogRequestRelationshipBookSeries;
  v2 = *v1;
  v3 = sub_21C416AD4();
  if (v3)
  {
    v4 = v3;
    v5 = sub_21C458E64();
    if (*(_QWORD *)(v4 + 16) && (v7 = sub_21C45191C(v5, v6), (v8 & 1) != 0))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v7);
      swift_retain();
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {

    return 0;
  }
  return v9;
}

uint64_t sub_21C409530(uint64_t a1)
{
  uint64_t ObjectType;
  __CFString **v3;
  __CFString *v4;
  uint64_t *v5;
  uint64_t (*v6)(uint64_t *, char);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15[4];

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(v15);
  v3 = BFMCatalogRequestRelationshipAudiobookSeries;
  if (LOBYTE(v15[0]) == 3)
    v3 = BFMCatalogRequestRelationshipBookSeries;
  v4 = *v3;
  v6 = sub_21C416BC4(v15);
  if (*v5)
  {
    v7 = v5;
    v8 = sub_21C458E64();
    v10 = v8;
    v11 = v9;
    if (a1)
    {
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = *v7;
      *v7 = 0x8000000000000000;
      sub_21C409E38(a1, v10, v11, isUniquelyReferenced_nonNull_native);
      *v7 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_21C451D3C(v8, v9);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  v6(v15, 0);

  return swift_release();
}

char *MAsset.enrichIfNeeded(with:)()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  void *v3;
  char *v4;
  void *v5;
  uint64_t (*v6)(uint64_t, char *);
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char v13[8];
  void *v14;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (void *)MAsset.seriesResource.getter();

  if (v3)
  {
    v4 = v1;
  }
  else
  {
    v5 = *(void **)&v1[OBJC_IVAR____TtC14BookFoundation9MResource_config + 8];
    v13[0] = v1[OBJC_IVAR____TtC14BookFoundation9MResource_config];
    v14 = v5;
    v6 = *(uint64_t (**)(uint64_t, char *))(ObjectType + 128);
    v7 = v5;
    v8 = swift_bridgeObjectRetain();
    v9 = (char *)v6(v8, v13);
    v1 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = (void *)MSeries.trimmed()();
      sub_21C40A228(v11);

    }
  }
  return v1;
}

uint64_t sub_21C409744(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_21C409814(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_21C3E5528((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_21C3E5528((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_21C3E2754((uint64_t)v12);
  return v7;
}

uint64_t sub_21C409814(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_21C45929C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_21C4099CC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_21C45938C();
  if (!v8)
  {
    sub_21C4593F8();
    __break(1u);
LABEL_17:
    result = sub_21C459464();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_21C4099CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_21C409A60(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21C409BD4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_21C409BD4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_21C409A60(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_21C428C40(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_21C45935C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_21C4593F8();
      __break(1u);
LABEL_10:
      v2 = sub_21C458F18();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_21C459464();
    __break(1u);
LABEL_14:
    result = sub_21C4593F8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_21C409BD4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527A878);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_21C459464();
  __break(1u);
  return result;
}

_OWORD *sub_21C409D20(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_21C4519F4(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        sub_21C3E2754((uint64_t)v17);
        return sub_21C3E8498(a1, v17);
      }
      return sub_21C409F94(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_21C457A28();
      goto LABEL_7;
    }
    sub_21C3E5B64(v13, a3 & 1);
    v19 = sub_21C4519F4(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_21C409F94(v10, v7, a1, v16);
    }
  }
  result = (_OWORD *)sub_21C459554();
  __break(1u);
  return result;
}

uint64_t sub_21C409E38(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_21C45191C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_21C457BE4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_21C3E5E38(v15, a4 & 1);
  v21 = sub_21C45191C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_21C459554();
  __break(1u);
  return result;
}

_OWORD *sub_21C409F94(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2 & 1;
  result = sub_21C3E8498(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_21C409FFC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  char v4;
  uint64_t var2;

  if (a1)
  {
    a3(&var2);
    if (!v3)
      v4 = var2;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3)
      v4 = BYTE1(var2);
  }
  return v4 & 1;
}

_QWORD *sub_21C40A050@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_21C40A08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_21C459140();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_21C3E7104(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_21C40A120()
{
  unint64_t result;

  result = qword_25527A780;
  if (!qword_25527A780)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResource.Keys, &type metadata for MResource.Keys);
    atomic_store(result, (unint64_t *)&qword_25527A780);
  }
  return result;
}

uint64_t type metadata accessor for MAsset()
{
  uint64_t result;

  result = qword_25527A818;
  if (!qword_25527A818)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_21C40A1A0()
{
  unint64_t result;

  result = qword_25527A788;
  if (!qword_25527A788)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B9B4, &type metadata for MAsset.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527A788);
  }
  return result;
}

unint64_t sub_21C40A1E4()
{
  unint64_t result;

  result = qword_25527A790;
  if (!qword_25527A790)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B97C, &type metadata for MAsset.SeriesInfoKeys);
    atomic_store(result, (unint64_t *)&qword_25527A790);
  }
  return result;
}

uint64_t sub_21C40A228(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v11;

  if (a1)
  {
    sub_21C3E344C(&qword_25527A868);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_21C45B9F0;
    *(_QWORD *)(v3 + 32) = a1;
    v11 = v3;
    sub_21C459038();
    v4 = v11;
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
  }
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
  type metadata accessor for MResourceSet();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = MEMORY[0x24BEE4B00];
  *(_BYTE *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v6;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = v4;
  v8 = v6;
  v9 = a1;
  sub_21C403328(1);
  return sub_21C409530(v7);
}

uint64_t sub_21C40A304(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3 >> 1;
  result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_21C459140();
  v12 = result;
  v7 = v4 - a2;
  if (v4 == a2)
    return result;
  if (v4 <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v8 = (uint64_t *)(a1 + 16 * a2 + 8);
  do
  {
    v9 = *(v8 - 1);
    v10 = *v8;
    swift_bridgeObjectRetain();
    sub_21C3E7104(&v11, v9, v10);
    swift_bridgeObjectRelease();
    v8 += 2;
    --v7;
  }
  while (v7);
  return v12;
}

uint64_t sub_21C40A3B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_21C40B614();
  result = sub_21C459140();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_21C3E72B0(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_21C40A424()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_21C40A46C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  _BYTE v17[40];
  _OWORD v18[2];

  v4 = sub_21C3E344C(&qword_25527A870);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (a1)
    {
      v7 = 0x65636E6575716573;
      if (a1 == 1)
      {
        v8 = 0xEE007265626D754ELL;
      }
      else
      {
        v7 = 0xD000000000000014;
        v8 = 0x800000021C45F000;
      }
    }
    else
    {
      v8 = 0xEA0000000000656DLL;
      v7 = 0x614E736569726573;
    }
    *(_QWORD *)&v15 = v7;
    *((_QWORD *)&v15 + 1) = v8;
    sub_21C459314();
    if (*(_QWORD *)(a2 + 16) && (v9 = sub_21C4519C4((uint64_t)v17), (v10 & 1) != 0))
    {
      sub_21C3E5528(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)&v15);
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    sub_21C3E54B4((uint64_t)v17);
    if (*((_QWORD *)&v16 + 1))
    {
      sub_21C3E8498(&v15, v18);
      sub_21C3E5528((uint64_t)v18, (uint64_t)v17);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v11 = sub_21C458C6C();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
        a2 = sub_21C45926C();
        v13 = v12;
        swift_bridgeObjectRelease();
        sub_21C3FF670((uint64_t)v6, &qword_25527A870);
        sub_21C3E2754((uint64_t)v18);
        if ((v13 & 0x100000000) == 0)
          return a2;
      }
      else
      {
        sub_21C3E2754((uint64_t)v18);
      }
    }
    else
    {
      sub_21C3FF670((uint64_t)&v15, &qword_254078EB8);
    }
    return 0;
  }
  return a2;
}

uint64_t sub_21C40A69C()
{
  unint64_t v0;

  v0 = sub_21C459524();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1C)
    return 28;
  else
    return v0;
}

uint64_t sub_21C40A6EC(unsigned __int8 a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unsigned __int8 v6;
  _BYTE v7[40];
  __int128 v8;
  __int128 v9;

  if (!a2)
    return 0;
  v6 = sub_21C4045E4(a1);
  sub_21C459314();
  if (*(_QWORD *)(a2 + 16) && (v3 = sub_21C4519C4((uint64_t)v7), (v4 & 1) != 0))
  {
    sub_21C3E5528(*(_QWORD *)(a2 + 56) + 32 * v3, (uint64_t)&v8);
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  sub_21C3E54B4((uint64_t)v7);
  if (*((_QWORD *)&v9 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
      return v6;
  }
  else
  {
    sub_21C3FF670((uint64_t)&v8, &qword_254078EB8);
  }
  return 0;
}

unint64_t sub_21C40A7C4()
{
  unint64_t result;

  result = qword_25527A798;
  if (!qword_25527A798)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B944, &type metadata for MAsset.PublisherInfoKeys);
    atomic_store(result, (unint64_t *)&qword_25527A798);
  }
  return result;
}

unint64_t sub_21C40A808()
{
  unint64_t result;

  result = qword_25527A7A0;
  if (!qword_25527A7A0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B90C, &type metadata for MAsset.UserRatingKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7A0);
  }
  return result;
}

_BYTE *sub_21C40A84C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_21C40A8B8()
{
  unint64_t result;

  result = qword_25527A7B0;
  if (!qword_25527A7B0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B8D4, &type metadata for MAsset.EditorialNotesKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7B0);
  }
  return result;
}

unint64_t sub_21C40A8FC()
{
  unint64_t result;

  result = qword_25527A7B8;
  if (!qword_25527A7B8)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B89C, &type metadata for MAsset.DescriptionAttributes);
    atomic_store(result, (unint64_t *)&qword_25527A7B8);
  }
  return result;
}

unint64_t sub_21C40A940()
{
  unint64_t result;

  result = qword_25527A7C0;
  if (!qword_25527A7C0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B864, &type metadata for MAsset.OfferKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7C0);
  }
  return result;
}

unint64_t sub_21C40A984()
{
  unint64_t result;

  result = qword_25527A7C8;
  if (!qword_25527A7C8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.PreviewKeys, &type metadata for MAsset.PreviewKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7C8);
  }
  return result;
}

unint64_t sub_21C40A9C8()
{
  unint64_t result;

  result = qword_25527B520;
  if (!qword_25527B520)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.ArtworkKeys, &type metadata for MAsset.ArtworkKeys);
    atomic_store(result, (unint64_t *)&qword_25527B520);
  }
  return result;
}

unint64_t sub_21C40AA10()
{
  unint64_t result;

  result = qword_25527A7D0;
  if (!qword_25527A7D0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.CacheKey, &type metadata for MAsset.CacheKey);
    atomic_store(result, (unint64_t *)&qword_25527A7D0);
  }
  return result;
}

unint64_t sub_21C40AA58()
{
  unint64_t result;

  result = qword_25527A7D8;
  if (!qword_25527A7D8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.OfferType, &type metadata for MAsset.OfferType);
    atomic_store(result, (unint64_t *)&qword_25527A7D8);
  }
  return result;
}

unint64_t sub_21C40AAA0()
{
  unint64_t result;

  result = qword_25527A7E0;
  if (!qword_25527A7E0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.PreviewKeys, &type metadata for MAsset.PreviewKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7E0);
  }
  return result;
}

unint64_t sub_21C40AAE8()
{
  unint64_t result;

  result = qword_25527A7E8;
  if (!qword_25527A7E8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MAsset.ArtworkKeys, &type metadata for MAsset.ArtworkKeys);
    atomic_store(result, (unint64_t *)&qword_25527A7E8);
  }
  return result;
}

uint64_t sub_21C40AB2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MAsset.seriesResource.getter();
  *a1 = result;
  return result;
}

void sub_21C40AB54(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_21C40A228(v1);

}

uint64_t sub_21C40AB90()
{
  return type metadata accessor for MAsset();
}

uint64_t sub_21C40AB98()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C458BF4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MAsset()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MAsset.isBook.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of MAsset.isAudiobook.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

ValueMetadata *type metadata accessor for MAsset.CacheKey()
{
  return &type metadata for MAsset.CacheKey;
}

ValueMetadata *type metadata accessor for MAsset.OfferType()
{
  return &type metadata for MAsset.OfferType;
}

uint64_t sub_21C40ACB4()
{
  return 0;
}

ValueMetadata *type metadata accessor for MAsset.PreviewKeys()
{
  return &type metadata for MAsset.PreviewKeys;
}

ValueMetadata *type metadata accessor for MAsset.ArtworkKeys()
{
  return &type metadata for MAsset.ArtworkKeys;
}

uint64_t getEnumTagSinglePayload for MAsset.OfferKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MAsset.OfferKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21C40ADC0 + 4 * byte_21C45B1AE[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21C40ADF4 + 4 * byte_21C45B1A9[v4]))();
}

uint64_t sub_21C40ADF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40ADFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C40AE04);
  return result;
}

uint64_t sub_21C40AE10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C40AE18);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21C40AE1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40AE24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.OfferKeys()
{
  return &type metadata for MAsset.OfferKeys;
}

ValueMetadata *type metadata accessor for MAsset.DescriptionAttributes()
{
  return &type metadata for MAsset.DescriptionAttributes;
}

uint64_t _s14BookFoundation6MAssetC9OfferTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21C40AE9C + 4 * byte_21C45B1B8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21C40AED0 + 4 * byte_21C45B1B3[v4]))();
}

uint64_t sub_21C40AED0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40AED8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C40AEE0);
  return result;
}

uint64_t sub_21C40AEEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C40AEF4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21C40AEF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40AF00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.EditorialNotesKeys()
{
  return &type metadata for MAsset.EditorialNotesKeys;
}

uint64_t _s14BookFoundation6MAssetC8CacheKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C40AF68 + 4 * byte_21C45B1C2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C40AF9C + 4 * byte_21C45B1BD[v4]))();
}

uint64_t sub_21C40AF9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40AFA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C40AFACLL);
  return result;
}

uint64_t sub_21C40AFB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C40AFC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C40AFC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40AFCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.UserRatingKeys()
{
  return &type metadata for MAsset.UserRatingKeys;
}

uint64_t getEnumTagSinglePayload for MBook.Attributes(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s14BookFoundation6MAssetC11PreviewKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21C40B078 + 4 * byte_21C45B1C7[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21C40B098 + 4 * byte_21C45B1CC[v4]))();
}

_BYTE *sub_21C40B078(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21C40B098(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C40B0A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C40B0A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C40B0B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C40B0B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.PublisherInfoKeys()
{
  return &type metadata for MAsset.PublisherInfoKeys;
}

uint64_t getEnumTagSinglePayload for AssetType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14BookFoundation6MAssetC11ArtworkKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21C40B1B0 + 4 * byte_21C45B1D6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21C40B1E4 + 4 * byte_21C45B1D1[v4]))();
}

uint64_t sub_21C40B1E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40B1EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C40B1F4);
  return result;
}

uint64_t sub_21C40B200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C40B208);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21C40B20C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40B214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.SeriesInfoKeys()
{
  return &type metadata for MAsset.SeriesInfoKeys;
}

uint64_t getEnumTagSinglePayload for MAsset.Attributes(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE5)
    goto LABEL_17;
  if (a2 + 27 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 27) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 27;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 27;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 27;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v8 = v6 - 28;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MAsset.Attributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_21C40B30C + 4 * byte_21C45B1E0[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_21C40B340 + 4 * byte_21C45B1DB[v4]))();
}

uint64_t sub_21C40B340(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40B348(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C40B350);
  return result;
}

uint64_t sub_21C40B35C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C40B364);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_21C40B368(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C40B370(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAsset.Attributes()
{
  return &type metadata for MAsset.Attributes;
}

unint64_t sub_21C40B390()
{
  unint64_t result;

  result = qword_25527A828;
  if (!qword_25527A828)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B5CC, &type metadata for MAsset.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527A828);
  }
  return result;
}

unint64_t sub_21C40B3D8()
{
  unint64_t result;

  result = qword_25527A830;
  if (!qword_25527A830)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B634, &type metadata for MAsset.SeriesInfoKeys);
    atomic_store(result, (unint64_t *)&qword_25527A830);
  }
  return result;
}

unint64_t sub_21C40B420()
{
  unint64_t result;

  result = qword_25527A838;
  if (!qword_25527A838)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B69C, &type metadata for MAsset.PublisherInfoKeys);
    atomic_store(result, (unint64_t *)&qword_25527A838);
  }
  return result;
}

unint64_t sub_21C40B468()
{
  unint64_t result;

  result = qword_25527A840;
  if (!qword_25527A840)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B704, &type metadata for MAsset.UserRatingKeys);
    atomic_store(result, (unint64_t *)&qword_25527A840);
  }
  return result;
}

unint64_t sub_21C40B4B0()
{
  unint64_t result;

  result = qword_25527A848;
  if (!qword_25527A848)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B76C, &type metadata for MAsset.EditorialNotesKeys);
    atomic_store(result, (unint64_t *)&qword_25527A848);
  }
  return result;
}

unint64_t sub_21C40B4F8()
{
  unint64_t result;

  result = qword_25527A850;
  if (!qword_25527A850)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B7D4, &type metadata for MAsset.DescriptionAttributes);
    atomic_store(result, (unint64_t *)&qword_25527A850);
  }
  return result;
}

unint64_t sub_21C40B540()
{
  unint64_t result;

  result = qword_25527A858;
  if (!qword_25527A858)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45B83C, &type metadata for MAsset.OfferKeys);
    atomic_store(result, (unint64_t *)&qword_25527A858);
  }
  return result;
}

uint64_t sub_21C40B584()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_21C40B5CC()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

unint64_t sub_21C40B614()
{
  unint64_t result;

  result = qword_25527A860;
  if (!qword_25527A860)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResourceType, &type metadata for MResourceType);
    atomic_store(result, (unint64_t *)&qword_25527A860);
  }
  return result;
}

uint64_t StaticFeatureFlagsKey.domain.getter(uint64_t a1)
{
  return sub_21C40B9FC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t StaticFeatureFlagsKey.feature.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t StaticFeatureFlagsKey.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

uint64_t StaticFeatureFlagsKey.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  *(_BYTE *)(a4 + 17) = 0;
  return result;
}

uint64_t static StaticFeatureFlagsKey.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_21C459368();
  v2 = v1;
  if (v0 == sub_21C459368() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_21C40B740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StaticFeatureFlagsKey.init(stringLiteral:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2);
}

uint64_t sub_21C40B750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StaticFeatureFlagsKey.init(rawValue:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2);
}

uint64_t sub_21C40B760@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = StaticFeatureFlagsKey.feature.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_21C40B78C(uint64_t a1)
{
  return sub_21C40B9FC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t static DynamicFeatureFlagsKey.domain.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

const char *static FeatureFlagsDomain.AppleAccount.domain.getter()
{
  return "AppleAccount";
}

const char *sub_21C40B824()
{
  return "AppleAccount";
}

const char *static FeatureFlagsDomain.Books.domain.getter()
{
  return "Books";
}

const char *sub_21C40B84C()
{
  return "Books";
}

const char *static FeatureFlagsDomain.UIKit.domain.getter()
{
  return "UIKit";
}

const char *sub_21C40B874()
{
  return "UIKit";
}

uint64_t RawRepresentable<>.domain.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C40B8A0(a1, a2, a3, MEMORY[0x24BE30BF0]);
}

uint64_t RawRepresentable<>.feature.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_21C40B8A0(a1, a2, a3, MEMORY[0x24BE30BF8]);
}

uint64_t sub_21C40B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v12 - v8;
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  v10 = a4(AssociatedTypeWitness, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v10;
}

uint64_t RawRepresentable<>.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5[5];

  v5[3] = swift_getAssociatedTypeWitness();
  v5[4] = a3;
  sub_21C3E30F8(v5);
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  LOBYTE(a3) = sub_21C458CFC();
  sub_21C3E2754((uint64_t)v5);
  return a3 & 1;
}

uint64_t sub_21C40B9FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void sub_21C40BA20()
{
  JUMPOUT(0x22077C1E0);
}

uint64_t sub_21C40BA30()
{
  return MEMORY[0x24BEE25D0];
}

void sub_21C40BA3C()
{
  JUMPOUT(0x22077C1E0);
}

uint64_t sub_21C40BA4C()
{
  return MEMORY[0x24BEE25E8];
}

uint64_t sub_21C40BA58()
{
  return MEMORY[0x24BEE25E0];
}

uint64_t sub_21C40BA64(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_21C40BA84(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t type metadata accessor for StaticFeatureFlagsKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StaticFeatureFlagsKey);
}

uint64_t dispatch thunk of DynamicFeatureFlagsKey.init(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static StaticFeatureFlagsDomain.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain()
{
  return &type metadata for FeatureFlagsDomain;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.AppleAccount()
{
  return &type metadata for FeatureFlagsDomain.AppleAccount;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.Books()
{
  return &type metadata for FeatureFlagsDomain.Books;
}

ValueMetadata *type metadata accessor for FeatureFlagsDomain.UIKit()
{
  return &type metadata for FeatureFlagsDomain.UIKit;
}

void AudiobookSeriesInfo.contentKind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void AudiobookSeriesInfo.seriesType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void AudiobookSeriesInfo.narratorInfo.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  int *v11;
  _BYTE *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _BYTE v23[14];
  unsigned __int8 v24;
  unsigned __int8 v25;

  v3 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_21C3E344C(&qword_25527A880);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (void **)&v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for AudiobookSeriesInfo();
  sub_21C40BD14(v1 + *(int *)(v9 + 24), (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_21C40BD5C((uint64_t)v8, (uint64_t)v5);
      v11 = (int *)sub_21C3E344C(&qword_25527A888);
      v12 = &v5[v11[23]];
      v13 = *(_QWORD *)v12;
      v14 = v12[8];
      v15 = *(_QWORD *)&v5[v11[24]];
      v16 = v5[v11[25]];
      v25 = 1;
      swift_bridgeObjectRetain();
      SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v16, v13, v14, v15, &v25, a1);
      sub_21C40BF10((uint64_t)v5);
      return;
    }
    v17 = *v8;
  }
  else
  {
    v17 = *(void **)((char *)v8 + *(int *)(sub_21C3E344C(&qword_25527A890) + 48));
    sub_21C40BF10((uint64_t)v8);
  }
  v18 = v17[OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators];
  v19 = MAudiobookSeries.narratorCount.getter();
  v21 = v20 & 1;
  v22 = MAudiobookSeries.narratorNames.getter();
  v24 = 1;
  SeriesArtistInfo.init(hasUniqueArtists:count:names:artistType:)(v18, v19, v21, v22, &v24, a1);

}

uint64_t type metadata accessor for AudiobookSeriesInfo()
{
  uint64_t result;

  result = qword_25527A990;
  if (!qword_25527A990)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C40BD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C40BD5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryAudiobookSeriesInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AudiobookSeriesInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AudiobookSeriesInfo() + 24);
  return sub_21C40BD14(v3, a1);
}

uint64_t AudiobookSeriesInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  *a2 = 1;
  v4 = type metadata accessor for AudiobookSeriesInfo();
  result = sub_21C40BF4C(a1, (uint64_t)a2 + *(int *)(v4 + 24));
  *(_QWORD *)((char *)a2 + *(int *)(v4 + 28)) = 0;
  return result;
}

uint64_t AudiobookSeriesInfo.additionalStoreAssetsForEnrichment.getter()
{
  type metadata accessor for AudiobookSeriesInfo();
  return swift_bridgeObjectRetain();
}

uint64_t AudiobookSeriesInfo.init(dataSource:additionalStoreAssetsForEnrichment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  *a3 = 1;
  v6 = type metadata accessor for AudiobookSeriesInfo();
  result = sub_21C40BF4C(a1, (uint64_t)a3 + *(int *)(v6 + 24));
  *(_QWORD *)((char *)a3 + *(int *)(v6 + 28)) = a2;
  return result;
}

void sub_21C40BE9C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void sub_21C40BEA8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_21C40BEB4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C40BEC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C40BD14(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_21C40BED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 1;
  result = sub_21C40BF4C(a1, (uint64_t)a3 + *(int *)(a2 + 24));
  *(_QWORD *)((char *)a3 + *(int *)(a2 + 28)) = 0;
  return result;
}

uint64_t sub_21C40BF10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryAudiobookSeriesInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C40BF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C40BF94()
{
  return sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
}

uint64_t sub_21C40BFC0()
{
  return sub_21C3E871C(&qword_25527A898, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
}

uint64_t sub_21C40BFEC(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527A8E0, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C40C028()
{
  return sub_21C3E871C(&qword_25527A8E8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
}

uint64_t sub_21C40C054(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527A928, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C40C090(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527A930, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AudiobookSeriesInfo(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    sub_21C3E344C(&qword_25527A880);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v24 = *(void **)v9;
      *v8 = *(_QWORD *)v9;
      v25 = v24;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = *(_QWORD *)(v9 + 8);
      *v8 = *(_QWORD *)v9;
      v8[1] = v11;
      v12 = *(_QWORD *)(v9 + 24);
      v8[2] = *(_QWORD *)(v9 + 16);
      v8[3] = v12;
      v13 = *(_QWORD *)(v9 + 40);
      v8[4] = *(_QWORD *)(v9 + 32);
      v8[5] = v13;
      v14 = *(_QWORD *)(v9 + 56);
      v8[6] = *(_QWORD *)(v9 + 48);
      v8[7] = v14;
      v15 = *(_QWORD *)(v9 + 72);
      v8[8] = *(_QWORD *)(v9 + 64);
      v8[9] = v15;
      v8[10] = *(_QWORD *)(v9 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = (int *)sub_21C3E344C(&qword_25527A888);
      v17 = v16[14];
      v18 = (char *)v8 + v17;
      v19 = (const void *)(v9 + v17);
      v20 = sub_21C458BF4();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(_QWORD *)((char *)v8 + v16[15]) = *(_QWORD *)(v9 + v16[15]);
      v38 = v16[16];
      v39 = (char *)v8 + v38;
      v40 = v9 + v38;
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = *(_BYTE *)(v40 + 8);
      *(_QWORD *)((char *)v8 + v16[17]) = *(_QWORD *)(v9 + v16[17]);
      *((_BYTE *)v8 + v16[18]) = *(_BYTE *)(v9 + v16[18]);
      *(_QWORD *)((char *)v8 + v16[19]) = *(_QWORD *)(v9 + v16[19]);
      *((_BYTE *)v8 + v16[20]) = *(_BYTE *)(v9 + v16[20]);
      *((_BYTE *)v8 + v16[21]) = *(_BYTE *)(v9 + v16[21]);
      v41 = v16[22];
      v42 = (char *)v8 + v41;
      v43 = v9 + v41;
      v44 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = v44;
      v42[16] = *(_BYTE *)(v43 + 16);
      v45 = v16[23];
      v46 = (char *)v8 + v45;
      v47 = v9 + v45;
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = *(_BYTE *)(v47 + 8);
      *(_QWORD *)((char *)v8 + v16[24]) = *(_QWORD *)(v9 + v16[24]);
      *((_BYTE *)v8 + v16[25]) = *(_BYTE *)(v9 + v16[25]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = *(_QWORD *)(v9 + 8);
      *v8 = *(_QWORD *)v9;
      v8[1] = v26;
      v27 = *(_QWORD *)(v9 + 24);
      v8[2] = *(_QWORD *)(v9 + 16);
      v8[3] = v27;
      v28 = *(_QWORD *)(v9 + 40);
      v8[4] = *(_QWORD *)(v9 + 32);
      v8[5] = v28;
      v29 = *(_QWORD *)(v9 + 56);
      v8[6] = *(_QWORD *)(v9 + 48);
      v8[7] = v29;
      v30 = *(_QWORD *)(v9 + 72);
      v8[8] = *(_QWORD *)(v9 + 64);
      v8[9] = v30;
      v8[10] = *(_QWORD *)(v9 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = (int *)sub_21C3E344C(&qword_25527A888);
      v32 = v31[14];
      v33 = (char *)v8 + v32;
      v34 = (const void *)(v9 + v32);
      v35 = sub_21C458BF4();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      *(_QWORD *)((char *)v8 + v31[15]) = *(_QWORD *)(v9 + v31[15]);
      v48 = v31[16];
      v49 = (char *)v8 + v48;
      v50 = v9 + v48;
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = *(_BYTE *)(v50 + 8);
      *(_QWORD *)((char *)v8 + v31[17]) = *(_QWORD *)(v9 + v31[17]);
      *((_BYTE *)v8 + v31[18]) = *(_BYTE *)(v9 + v31[18]);
      *(_QWORD *)((char *)v8 + v31[19]) = *(_QWORD *)(v9 + v31[19]);
      *((_BYTE *)v8 + v31[20]) = *(_BYTE *)(v9 + v31[20]);
      *((_BYTE *)v8 + v31[21]) = *(_BYTE *)(v9 + v31[21]);
      v51 = v31[22];
      v52 = (char *)v8 + v51;
      v53 = v9 + v51;
      v54 = *(_QWORD *)(v53 + 8);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = v54;
      v52[16] = *(_BYTE *)(v53 + 16);
      v55 = v31[23];
      v56 = (char *)v8 + v55;
      v57 = v9 + v55;
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = *(_BYTE *)(v57 + 8);
      *(_QWORD *)((char *)v8 + v31[24]) = *(_QWORD *)(v9 + v31[24]);
      *((_BYTE *)v8 + v31[25]) = *(_BYTE *)(v9 + v31[25]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58 = *(int *)(sub_21C3E344C(&qword_25527A890) + 48);
      v59 = *(void **)(v9 + v58);
      *(_QWORD *)((char *)v8 + v58) = v59;
      v60 = v59;
    }
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AudiobookSeriesInfo(uint64_t a1, uint64_t a2)
{
  void **v2;
  int EnumCaseMultiPayload;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (void **)(a1 + *(int *)(a2 + 24));
  sub_21C3E344C(&qword_25527A880);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v7 = *v2;
LABEL_8:

      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = (char *)v2 + *(int *)(sub_21C3E344C(&qword_25527A888) + 56);
      v9 = sub_21C458BF4();
      v10 = *(_QWORD *)(v9 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
        (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = (char *)v2 + *(int *)(sub_21C3E344C(&qword_25527A888) + 56);
      v5 = sub_21C458BF4();
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = *(void **)((char *)v2 + *(int *)(sub_21C3E344C(&qword_25527A890) + 48));
      goto LABEL_8;
  }
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for AudiobookSeriesInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v60;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  sub_21C3E344C(&qword_25527A880);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v22 = *(void **)v8;
    *v7 = *(_QWORD *)v8;
    v23 = v22;
  }
  else
  {
    v60 = v3;
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *((_QWORD *)v8 + 1);
      *v7 = *(_QWORD *)v8;
      v7[1] = v10;
      v11 = *((_QWORD *)v8 + 3);
      v7[2] = *((_QWORD *)v8 + 2);
      v7[3] = v11;
      v12 = *((_QWORD *)v8 + 5);
      v7[4] = *((_QWORD *)v8 + 4);
      v7[5] = v12;
      v13 = *((_QWORD *)v8 + 7);
      v7[6] = *((_QWORD *)v8 + 6);
      v7[7] = v13;
      v14 = *((_QWORD *)v8 + 9);
      v7[8] = *((_QWORD *)v8 + 8);
      v7[9] = v14;
      v7[10] = *((_QWORD *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = (int *)sub_21C3E344C(&qword_25527A888);
      v16 = v15[14];
      v17 = (char *)v7 + v16;
      v18 = &v8[v16];
      v19 = sub_21C458BF4();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, _BYTE *, uint64_t))(v20 + 16))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_QWORD *)((char *)v7 + v15[15]) = *(_QWORD *)&v8[v15[15]];
      v36 = v15[16];
      v37 = (char *)v7 + v36;
      v38 = &v8[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      *(_QWORD *)((char *)v7 + v15[17]) = *(_QWORD *)&v8[v15[17]];
      *((_BYTE *)v7 + v15[18]) = v8[v15[18]];
      *(_QWORD *)((char *)v7 + v15[19]) = *(_QWORD *)&v8[v15[19]];
      *((_BYTE *)v7 + v15[20]) = v8[v15[20]];
      *((_BYTE *)v7 + v15[21]) = v8[v15[21]];
      v39 = v15[22];
      v40 = (char *)v7 + v39;
      v41 = &v8[v39];
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = v42;
      v40[16] = v41[16];
      v43 = v15[23];
      v44 = (char *)v7 + v43;
      v45 = &v8[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      *(_QWORD *)((char *)v7 + v15[24]) = *(_QWORD *)&v8[v15[24]];
      *((_BYTE *)v7 + v15[25]) = v8[v15[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v24 = *((_QWORD *)v8 + 1);
      *v7 = *(_QWORD *)v8;
      v7[1] = v24;
      v25 = *((_QWORD *)v8 + 3);
      v7[2] = *((_QWORD *)v8 + 2);
      v7[3] = v25;
      v26 = *((_QWORD *)v8 + 5);
      v7[4] = *((_QWORD *)v8 + 4);
      v7[5] = v26;
      v27 = *((_QWORD *)v8 + 7);
      v7[6] = *((_QWORD *)v8 + 6);
      v7[7] = v27;
      v28 = *((_QWORD *)v8 + 9);
      v7[8] = *((_QWORD *)v8 + 8);
      v7[9] = v28;
      v7[10] = *((_QWORD *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = (int *)sub_21C3E344C(&qword_25527A888);
      v30 = v29[14];
      v31 = (char *)v7 + v30;
      v32 = &v8[v30];
      v33 = sub_21C458BF4();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, _BYTE *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      *(_QWORD *)((char *)v7 + v29[15]) = *(_QWORD *)&v8[v29[15]];
      v46 = v29[16];
      v47 = (char *)v7 + v46;
      v48 = &v8[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      *(_QWORD *)((char *)v7 + v29[17]) = *(_QWORD *)&v8[v29[17]];
      *((_BYTE *)v7 + v29[18]) = v8[v29[18]];
      *(_QWORD *)((char *)v7 + v29[19]) = *(_QWORD *)&v8[v29[19]];
      *((_BYTE *)v7 + v29[20]) = v8[v29[20]];
      *((_BYTE *)v7 + v29[21]) = v8[v29[21]];
      v49 = v29[22];
      v50 = (char *)v7 + v49;
      v51 = &v8[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v50[16] = v51[16];
      v53 = v29[23];
      v54 = (char *)v7 + v53;
      v55 = &v8[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      v54[8] = v55[8];
      *(_QWORD *)((char *)v7 + v29[24]) = *(_QWORD *)&v8[v29[24]];
      *((_BYTE *)v7 + v29[25]) = v8[v29[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v56 = *(int *)(sub_21C3E344C(&qword_25527A890) + 48);
      v57 = *(void **)&v8[v56];
      *(_QWORD *)((char *)v7 + v56) = v57;
      v58 = v57;
    }
    v3 = v60;
  }
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&a1[*(int *)(v3 + 28)] = *(_QWORD *)&a2[*(int *)(v3 + 28)];
  swift_bridgeObjectRetain();
  return a1;
}

_BYTE *assignWithCopy for AudiobookSeriesInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  int *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _BYTE *v43;
  uint64_t v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = &a2[v6];
    sub_21C40D128((uint64_t)&a1[v6]);
    sub_21C3E344C(&qword_25527A880);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v17 = *(void **)v8;
      *v7 = *(_QWORD *)v8;
      v18 = v17;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *v7 = *(_QWORD *)v8;
      v7[1] = *((_QWORD *)v8 + 1);
      v7[2] = *((_QWORD *)v8 + 2);
      v7[3] = *((_QWORD *)v8 + 3);
      v7[4] = *((_QWORD *)v8 + 4);
      v7[5] = *((_QWORD *)v8 + 5);
      v7[6] = *((_QWORD *)v8 + 6);
      v7[7] = *((_QWORD *)v8 + 7);
      v7[8] = *((_QWORD *)v8 + 8);
      v7[9] = *((_QWORD *)v8 + 9);
      v7[10] = *((_QWORD *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10 = (int *)sub_21C3E344C(&qword_25527A888);
      v11 = v10[14];
      v12 = (char *)v7 + v11;
      v13 = &v8[v11];
      v14 = sub_21C458BF4();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, _BYTE *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(_QWORD *)((char *)v7 + v10[15]) = *(_QWORD *)&v8[v10[15]];
      v26 = v10[16];
      v27 = (char *)v7 + v26;
      v28 = &v8[v26];
      v29 = *(_QWORD *)v28;
      v27[8] = v28[8];
      *(_QWORD *)v27 = v29;
      *(_QWORD *)((char *)v7 + v10[17]) = *(_QWORD *)&v8[v10[17]];
      *((_BYTE *)v7 + v10[18]) = v8[v10[18]];
      *(_QWORD *)((char *)v7 + v10[19]) = *(_QWORD *)&v8[v10[19]];
      *((_BYTE *)v7 + v10[20]) = v8[v10[20]];
      *((_BYTE *)v7 + v10[21]) = v8[v10[21]];
      v30 = v10[22];
      v31 = (char *)v7 + v30;
      v32 = &v8[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      v31[16] = v32[16];
      v33 = v10[23];
      v34 = (char *)v7 + v33;
      v35 = &v8[v33];
      v36 = *(_QWORD *)v35;
      v34[8] = v35[8];
      *(_QWORD *)v34 = v36;
      *(_QWORD *)((char *)v7 + v10[24]) = *(_QWORD *)&v8[v10[24]];
      *((_BYTE *)v7 + v10[25]) = v8[v10[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *v7 = *(_QWORD *)v8;
      v7[1] = *((_QWORD *)v8 + 1);
      v7[2] = *((_QWORD *)v8 + 2);
      v7[3] = *((_QWORD *)v8 + 3);
      v7[4] = *((_QWORD *)v8 + 4);
      v7[5] = *((_QWORD *)v8 + 5);
      v7[6] = *((_QWORD *)v8 + 6);
      v7[7] = *((_QWORD *)v8 + 7);
      v7[8] = *((_QWORD *)v8 + 8);
      v7[9] = *((_QWORD *)v8 + 9);
      v7[10] = *((_QWORD *)v8 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = (int *)sub_21C3E344C(&qword_25527A888);
      v20 = v19[14];
      v21 = (char *)v7 + v20;
      v22 = &v8[v20];
      v23 = sub_21C458BF4();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, _BYTE *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      *(_QWORD *)((char *)v7 + v19[15]) = *(_QWORD *)&v8[v19[15]];
      v37 = v19[16];
      v38 = (char *)v7 + v37;
      v39 = &v8[v37];
      v40 = *(_QWORD *)v39;
      v38[8] = v39[8];
      *(_QWORD *)v38 = v40;
      *(_QWORD *)((char *)v7 + v19[17]) = *(_QWORD *)&v8[v19[17]];
      *((_BYTE *)v7 + v19[18]) = v8[v19[18]];
      *(_QWORD *)((char *)v7 + v19[19]) = *(_QWORD *)&v8[v19[19]];
      *((_BYTE *)v7 + v19[20]) = v8[v19[20]];
      *((_BYTE *)v7 + v19[21]) = v8[v19[21]];
      v41 = v19[22];
      v42 = (char *)v7 + v41;
      v43 = &v8[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
      v42[16] = v43[16];
      v44 = v19[23];
      v45 = (char *)v7 + v44;
      v46 = &v8[v44];
      v47 = *(_QWORD *)v46;
      v45[8] = v46[8];
      *(_QWORD *)v45 = v47;
      *(_QWORD *)((char *)v7 + v19[24]) = *(_QWORD *)&v8[v19[24]];
      *((_BYTE *)v7 + v19[25]) = v8[v19[25]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = *(int *)(sub_21C3E344C(&qword_25527A890) + 48);
      v49 = *(void **)&v8[v48];
      *(_QWORD *)((char *)v7 + v48) = v49;
      v50 = v49;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)&a1[*(int *)(a3 + 28)] = *(_QWORD *)&a2[*(int *)(a3 + 28)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C40D128(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A880);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *initializeWithTake for AudiobookSeriesInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v45;
  uint64_t v46;

  v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_21C3E344C(&qword_25527A880);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v46 = v3;
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
    v18 = (int *)sub_21C3E344C(&qword_25527A888);
    v19 = v18[14];
    v20 = &v7[v19];
    v21 = &v8[v19];
    v22 = sub_21C458BF4();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    *(_QWORD *)&v7[v18[15]] = *(_QWORD *)&v8[v18[15]];
    v35 = v18[16];
    v36 = &v7[v35];
    v37 = &v8[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    *(_QWORD *)&v7[v18[17]] = *(_QWORD *)&v8[v18[17]];
    v7[v18[18]] = v8[v18[18]];
    *(_QWORD *)&v7[v18[19]] = *(_QWORD *)&v8[v18[19]];
    v7[v18[20]] = v8[v18[20]];
    v7[v18[21]] = v8[v18[21]];
    v38 = v18[22];
    v39 = &v7[v38];
    v40 = &v8[v38];
    *(_OWORD *)v39 = *(_OWORD *)v40;
    v39[16] = v40[16];
    v41 = v18[23];
    v42 = &v7[v41];
    v43 = &v8[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    *(_QWORD *)&v7[v18[24]] = *(_QWORD *)&v8[v18[24]];
    v7[v18[25]] = v8[v18[25]];
    swift_storeEnumTagMultiPayload();
    v3 = v46;
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v45 = v3;
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
    v11 = (int *)sub_21C3E344C(&qword_25527A888);
    v12 = v11[14];
    v13 = &v7[v12];
    v14 = &v8[v12];
    v15 = sub_21C458BF4();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v3 = v45;
    *(_QWORD *)&v7[v11[15]] = *(_QWORD *)&v8[v11[15]];
    v25 = v11[16];
    v26 = &v7[v25];
    v27 = &v8[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    *(_QWORD *)&v7[v11[17]] = *(_QWORD *)&v8[v11[17]];
    v7[v11[18]] = v8[v11[18]];
    *(_QWORD *)&v7[v11[19]] = *(_QWORD *)&v8[v11[19]];
    v7[v11[20]] = v8[v11[20]];
    v7[v11[21]] = v8[v11[21]];
    v28 = v11[22];
    v29 = &v7[v28];
    v30 = &v8[v28];
    *(_OWORD *)v29 = *(_OWORD *)v30;
    v29[16] = v30[16];
    v31 = v11[23];
    v32 = &v7[v31];
    v33 = &v8[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    *(_QWORD *)&v7[v11[24]] = *(_QWORD *)&v8[v11[24]];
    v7[v11[25]] = v8[v11[25]];
    v34 = sub_21C3E344C(&qword_25527A890);
    *(_QWORD *)&v7[*(int *)(v34 + 48)] = *(_QWORD *)&v8[*(int *)(v34 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)&a1[*(int *)(v3 + 28)] = *(_QWORD *)&a2[*(int *)(v3 + 28)];
  return a1;
}

_BYTE *assignWithTake for AudiobookSeriesInfo(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  *a1 = *a2;
  a1[1] = a2[1];
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = &a1[v6];
    v8 = &a2[v6];
    sub_21C40D128((uint64_t)&a1[v6]);
    v9 = sub_21C3E344C(&qword_25527A880);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      v18 = (int *)sub_21C3E344C(&qword_25527A888);
      v19 = v18[14];
      v20 = &v7[v19];
      v21 = &v8[v19];
      v22 = sub_21C458BF4();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      *(_QWORD *)&v7[v18[15]] = *(_QWORD *)&v8[v18[15]];
      v35 = v18[16];
      v36 = &v7[v35];
      v37 = &v8[v35];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *(_QWORD *)&v7[v18[17]] = *(_QWORD *)&v8[v18[17]];
      v7[v18[18]] = v8[v18[18]];
      *(_QWORD *)&v7[v18[19]] = *(_QWORD *)&v8[v18[19]];
      v7[v18[20]] = v8[v18[20]];
      v7[v18[21]] = v8[v18[21]];
      v38 = v18[22];
      v39 = &v7[v38];
      v40 = &v8[v38];
      *(_OWORD *)v39 = *(_OWORD *)v40;
      v39[16] = v40[16];
      v41 = v18[23];
      v42 = &v7[v41];
      v43 = &v8[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      *(_QWORD *)&v7[v18[24]] = *(_QWORD *)&v8[v18[24]];
      v7[v18[25]] = v8[v18[25]];
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
      v11 = (int *)sub_21C3E344C(&qword_25527A888);
      v12 = v11[14];
      v13 = &v7[v12];
      v14 = &v8[v12];
      v15 = sub_21C458BF4();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_QWORD *)&v7[v11[15]] = *(_QWORD *)&v8[v11[15]];
      v25 = v11[16];
      v26 = &v7[v25];
      v27 = &v8[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      *(_QWORD *)&v7[v11[17]] = *(_QWORD *)&v8[v11[17]];
      v7[v11[18]] = v8[v11[18]];
      *(_QWORD *)&v7[v11[19]] = *(_QWORD *)&v8[v11[19]];
      v7[v11[20]] = v8[v11[20]];
      v7[v11[21]] = v8[v11[21]];
      v28 = v11[22];
      v29 = &v7[v28];
      v30 = &v8[v28];
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v29[16] = v30[16];
      v31 = v11[23];
      v32 = &v7[v31];
      v33 = &v8[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      *(_QWORD *)&v7[v11[24]] = *(_QWORD *)&v8[v11[24]];
      v7[v11[25]] = v8[v11[25]];
      v34 = sub_21C3E344C(&qword_25527A890);
      *(_QWORD *)&v7[*(int *)(v34 + 48)] = *(_QWORD *)&v8[*(int *)(v34 + 48)];
LABEL_13:
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
    }
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
LABEL_14:
  *(_QWORD *)&a1[*(int *)(a3 + 28)] = *(_QWORD *)&a2[*(int *)(a3 + 28)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiobookSeriesInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C40D968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_21C3E344C(&qword_25527A880);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AudiobookSeriesInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C40DA04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527A880);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  return result;
}

void sub_21C40DA84()
{
  unint64_t v0;

  sub_21C40DB08(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C40DB08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527A9A0)
  {
    v2 = type metadata accessor for LibraryAudiobookSeriesInfo();
    v3 = type metadata accessor for MAudiobookSeries();
    v5 = type metadata accessor for ContentDataSource(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25527A9A0);
  }
}

uint64_t static Capabilities.isInternalBuild.setter(char a1)
{
  uint64_t result;

  if (qword_254078E68 != -1)
    swift_once();
  result = swift_beginAccess();
  byte_254078E60 = a1 & 1;
  return result;
}

uint64_t (*static Capabilities.isInternalBuild.modify())()
{
  if (qword_254078E68 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

ValueMetadata *type metadata accessor for Capabilities()
{
  return &type metadata for Capabilities;
}

uint64_t LibraryAudiobookSeriesInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C40DC68(v1, a1);
}

uint64_t sub_21C40DC68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A888);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryAudiobookSeriesInfo.commonInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_21C40DCB8(a1, v1);
}

uint64_t sub_21C40DCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A888);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*LibraryAudiobookSeriesInfo.commonInfo.modify())()
{
  return nullsub_1;
}

uint64_t LibraryAudiobookSeriesInfo.init(commonInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C40DD18(a1, a2);
}

uint64_t sub_21C40DD18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A888);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C40DD60()
{
  return sub_21C3E871C(&qword_25527A2B8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
}

uint64_t sub_21C40DD8C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527A8E8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LibraryAudiobookSeriesInfo()
{
  uint64_t result;

  result = qword_25527AAB0;
  if (!qword_25527AAB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C40DE04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C40DC68(v1, a1);
}

uint64_t sub_21C40DE10(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527A898, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C40DE4C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527AA48, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C40DE88(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527AA50, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LibraryAudiobookSeriesInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *__dst;

  v4 = sub_21C3E344C(&qword_25527A888);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    v12 = *(int *)(v4 + 56);
    v29 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    v13 = sub_21C458BF4();
    v27 = *(_QWORD *)(v13 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v29, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v29, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v13);
    }
    *(_QWORD *)((char *)a1 + v6[15]) = *(_QWORD *)((char *)a2 + v6[15]);
    v16 = v6[16];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *(_QWORD *)((char *)a1 + v6[17]) = *(_QWORD *)((char *)a2 + v6[17]);
    *((_BYTE *)a1 + v6[18]) = *((_BYTE *)a2 + v6[18]);
    *(_QWORD *)((char *)a1 + v6[19]) = *(_QWORD *)((char *)a2 + v6[19]);
    *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
    *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
    v19 = v6[22];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v20[16] = v21[16];
    v23 = v6[23];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
    *((_BYTE *)a1 + v6[25]) = *((_BYTE *)a2 + v6[25]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryAudiobookSeriesInfo(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(sub_21C3E344C(&qword_25527A888) + 56);
  v3 = sub_21C458BF4();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LibraryAudiobookSeriesInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = (int *)sub_21C3E344C(&qword_25527A888);
  v10 = v9[14];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_21C458BF4();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(_QWORD *)((char *)a1 + v9[15]) = *(_QWORD *)((char *)a2 + v9[15]);
  v16 = v9[16];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)((char *)a1 + v9[17]) = *(_QWORD *)((char *)a2 + v9[17]);
  *((_BYTE *)a1 + v9[18]) = *((_BYTE *)a2 + v9[18]);
  *(_QWORD *)((char *)a1 + v9[19]) = *(_QWORD *)((char *)a2 + v9[19]);
  *((_BYTE *)a1 + v9[20]) = *((_BYTE *)a2 + v9[20]);
  *((_BYTE *)a1 + v9[21]) = *((_BYTE *)a2 + v9[21]);
  v19 = v9[22];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v20[16] = v21[16];
  v23 = v9[23];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)((char *)a1 + v9[24]) = *(_QWORD *)((char *)a2 + v9[24]);
  *((_BYTE *)a1 + v9[25]) = *((_BYTE *)a2 + v9[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LibraryAudiobookSeriesInfo(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)sub_21C3E344C(&qword_25527A888);
  v5 = v4[14];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_21C458BF4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(_QWORD *)((char *)a1 + v4[15]) = *(_QWORD *)((char *)a2 + v4[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v4[16];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)v15 = v17;
  *(_QWORD *)((char *)a1 + v4[17]) = *(_QWORD *)((char *)a2 + v4[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v4[18]) = *((_BYTE *)a2 + v4[18]);
  *(_QWORD *)((char *)a1 + v4[19]) = *(_QWORD *)((char *)a2 + v4[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v4[20]) = *((_BYTE *)a2 + v4[20]);
  *((_BYTE *)a1 + v4[21]) = *((_BYTE *)a2 + v4[21]);
  v18 = v4[22];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)((char *)a2 + v18);
  *((_QWORD *)v19 + 1) = *(_QWORD *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19[16] = v20[16];
  v21 = v4[23];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  *(_QWORD *)((char *)a1 + v4[24]) = *(_QWORD *)((char *)a2 + v4[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v4[25]) = *((_BYTE *)a2 + v4[25]);
  return a1;
}

uint64_t initializeWithTake for LibraryAudiobookSeriesInfo(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = (int *)sub_21C3E344C(&qword_25527A888);
  v5 = v4[14];
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_21C458BF4();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(_QWORD *)(a1 + v4[15]) = *(_QWORD *)(a2 + v4[15]);
  v11 = v4[16];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)(a1 + v4[17]) = *(_QWORD *)(a2 + v4[17]);
  *(_BYTE *)(a1 + v4[18]) = *(_BYTE *)(a2 + v4[18]);
  *(_QWORD *)(a1 + v4[19]) = *(_QWORD *)(a2 + v4[19]);
  *(_BYTE *)(a1 + v4[20]) = *(_BYTE *)(a2 + v4[20]);
  *(_BYTE *)(a1 + v4[21]) = *(_BYTE *)(a2 + v4[21]);
  v14 = v4[22];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = v4[23];
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)(a1 + v4[24]) = *(_QWORD *)(a2 + v4[24]);
  *(_BYTE *)(a1 + v4[25]) = *(_BYTE *)(a2 + v4[25]);
  return a1;
}

_QWORD *assignWithTake for LibraryAudiobookSeriesInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_bridgeObjectRelease();
  v9 = (int *)sub_21C3E344C(&qword_25527A888);
  v10 = v9[14];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_21C458BF4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(_QWORD *)((char *)a1 + v9[15]) = *(_QWORD *)((char *)a2 + v9[15]);
  swift_bridgeObjectRelease();
  v19 = v9[16];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)((char *)a1 + v9[17]) = *(_QWORD *)((char *)a2 + v9[17]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v9[18]) = *((_BYTE *)a2 + v9[18]);
  *(_QWORD *)((char *)a1 + v9[19]) = *(_QWORD *)((char *)a2 + v9[19]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v9[20]) = *((_BYTE *)a2 + v9[20]);
  *((_BYTE *)a1 + v9[21]) = *((_BYTE *)a2 + v9[21]);
  v22 = v9[22];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *(_QWORD *)((char *)a2 + v22 + 8);
  *(_QWORD *)v23 = *(_QWORD *)((char *)a2 + v22);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v23[16] = v24[16];
  v26 = v9[23];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v27[8] = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)((char *)a1 + v9[24]) = *(_QWORD *)((char *)a2 + v9[24]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v9[25]) = *((_BYTE *)a2 + v9[25]);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryAudiobookSeriesInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C40EB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A888);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LibraryAudiobookSeriesInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C40EB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A888);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_21C40EB9C()
{
  unint64_t v0;

  sub_21C40EC04(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C40EC04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527AAC0)
  {
    v2 = type metadata accessor for LibraryAudiobookInfo();
    v3 = sub_21C3E871C(&qword_25527A2B8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
    v5 = type metadata accessor for CommonLibrarySeriesInfo(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25527AAC0);
  }
}

uint64_t sub_21C40EC7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21C40ECA0(unint64_t a1)
{
  return sub_21C40ECAC(a1, (uint64_t *)&unk_25527B510);
}

uint64_t sub_21C40ECAC(unint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_21C3E344C(a2);
    v5 = sub_21C459410();
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_21C459500();
    return a1;
  }
}

uint64_t MSeries.__authorCount.getter()
{
  char v0;

  MSeries.authorCount.getter();
  if ((v0 & 1) != 0)
    return 0;
  else
    return sub_21C45914C();
}

unint64_t MSeries.__assets.getter()
{
  unint64_t v0;
  uint64_t v2;

  if (!MSeries.assetsResourceSet.getter())
    return 0;
  v0 = sub_21C44F728();
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRetain();
    if (v0 >> 62)
    {
      sub_21C3E344C((uint64_t *)&unk_25527AAF0);
      v2 = sub_21C459410();
      swift_bridgeObjectRelease_n();
      return v2;
    }
    else
    {
      sub_21C459500();
      swift_bridgeObjectRelease();
    }
  }
  return v0;
}

uint64_t MSeries.__genres.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v0 = sub_21C3FCCE4(CFSTR("genres"));
  v1 = v0;
  if (v0)
  {
    if (v0 >> 62)
    {
      sub_21C3E344C((uint64_t *)&unk_25527B510);
      v3 = sub_21C459410();
      swift_bridgeObjectRelease();
      return v3;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_21C459500();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t Array.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[10];

  result = MEMORY[0x22077B70C](a2, a3);
  if (a1)
  {
    v11[7] = 0;
    v11[8] = result;
    v11[9] = a1;
    MEMORY[0x24BDAC7A8](result);
    v11[2] = a3;
    v11[3] = a2;
    v11[4] = a1;
    v7 = sub_21C3E344C(&qword_25527AB60);
    v8 = sub_21C45908C();
    v9 = sub_21C40F6C4();
    return sub_21C40F1B8((void (*)(char *, char *))sub_21C40F198, (uint64_t)v11, v7, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_21C40F0D4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v5 = *result;
  v6 = *result + a3;
  if (__OFADD__(*result, a3))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)MEMORY[0x22077B70C](a2, a4);
    if ((uint64_t)result >= v6)
      v8 = (_QWORD *)v6;
    else
      v8 = result;
    if ((uint64_t)v8 >= v5)
    {
      sub_21C4590A4();
      v9 = sub_21C4592D8();
      MEMORY[0x22077C1E0](MEMORY[0x24BEE2180], v9);
      result = (uint64_t *)sub_21C459098();
      *a5 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_21C40F198@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;

  return sub_21C40F0D4(a1, v2[3], v2[4], v2[2], a2);
}

uint64_t sub_21C40F1B8(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_21C459278();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_21C458F9C();
  v57 = sub_21C4593BC();
  v53 = sub_21C4593C8();
  sub_21C4593A4();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_21C458F90();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_21C459284();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_21C4593B0();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_21C459284();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_21C4593B0();
      sub_21C459284();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

unint64_t sub_21C40F6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527AB68;
  if (!qword_25527AB68)
  {
    v1 = sub_21C3E35C0(&qword_25527AB60);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE49C8], v1);
    atomic_store(result, (unint64_t *)&qword_25527AB68);
  }
  return result;
}

BOOL Array<A>.containsDuplicates()(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;

  sub_21C4593E0();
  v4 = objc_allocWithZone(MEMORY[0x24BDD14E0]);
  v5 = (void *)sub_21C459020();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithArray_, v5);

  v7 = objc_msgSend(v6, sel_count);
  return v7 != (id)MEMORY[0x22077B70C](a1, a2);
}

uint64_t sub_21C40F7C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_21C40F7F4 + 4 * byte_21C45BE30[a1]))("coverEffectV2", 13);
}

const char *sub_21C40F7F4()
{
  return "coverMaxSize";
}

const char *sub_21C40F808()
{
  return "bk_enhanced_personalization";
}

const char *sub_21C40F81C()
{
  return "fuzzyFinishedDate";
}

const char *sub_21C40F850()
{
  return "reading_loupe";
}

const char *sub_21C40F864()
{
  return "reasonForRecommendation";
}

const char *sub_21C40F878()
{
  return "unifiedProductPage";
}

uint64_t BooksFeatureFlag.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t BooksFeatureFlag.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v2 = sub_21C459368();
  v4 = v3;
  if (v2 == sub_21C459368() && v4 == v5)
  {
    v9 = 0;
    goto LABEL_10;
  }
  v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v9 = 0;
  if ((v7 & 1) == 0)
  {
    v10 = sub_21C459368();
    v12 = v11;
    if (v10 == sub_21C459368() && v12 == v13)
    {
      v9 = 1;
LABEL_10:
      result = swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    v14 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      v9 = 1;
      goto LABEL_11;
    }
    v9 = 2;
    v15 = sub_21C459368();
    v17 = v16;
    if (v15 == sub_21C459368() && v17 == v18)
      goto LABEL_10;
    v19 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      goto LABEL_11;
    v20 = sub_21C459368();
    v22 = v21;
    if (v20 == sub_21C459368() && v22 == v23)
    {
      v9 = 3;
      goto LABEL_10;
    }
    v24 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
      v9 = 3;
      goto LABEL_11;
    }
    v25 = sub_21C459368();
    v27 = v26;
    if (v25 == sub_21C459368() && v27 == v28)
    {
      v9 = 4;
      goto LABEL_10;
    }
    v29 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      v9 = 4;
      goto LABEL_11;
    }
    v30 = sub_21C459368();
    v32 = v31;
    if (v30 == sub_21C459368() && v32 == v33)
    {
      v9 = 5;
      goto LABEL_10;
    }
    v34 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      v9 = 5;
      goto LABEL_11;
    }
    v35 = sub_21C459368();
    v37 = v36;
    if (v35 == sub_21C459368() && v37 == v38)
    {
      v9 = 6;
      goto LABEL_10;
    }
    v39 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
    {
      v9 = 6;
      goto LABEL_11;
    }
    v40 = sub_21C459368();
    v42 = v41;
    if (v40 == sub_21C459368() && v42 == v43)
    {
      v9 = 7;
      goto LABEL_10;
    }
    v44 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
    {
      v9 = 7;
      goto LABEL_11;
    }
    v45 = sub_21C459368();
    v47 = v46;
    v9 = 8;
    if (v45 == sub_21C459368() && v47 == v48)
      goto LABEL_10;
    v49 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
      v9 = 8;
    else
      v9 = 9;
  }
LABEL_11:
  *a1 = v9;
  return result;
}

uint64_t BooksFeatureFlag.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t BooksFeatureFlag.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(double))((char *)sub_21C40FDD8 + 4 * byte_21C45BE39[*v0]))(COERCE_DOUBLE("coverEffectV2"));
}

double sub_21C40FDD8@<D0>(int64x2_t *a1@<X8>)
{
  int64x2_t v1;

  v1 = vdupq_n_s64(0xCuLL);
  v1.i64[0] = (uint64_t)"coverMaxSize";
  *a1 = v1;
  a1[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_21C40FE88(unsigned __int8 *a1)
{
  return sub_21C3F8564(*a1);
}

uint64_t sub_21C40FE94@<X0>(char *a1@<X8>)
{
  return BooksFeatureFlag.init(rawValue:)(a1);
}

void sub_21C40FEC8()
{
  uint64_t v0;

  v0 = MEMORY[0x24BEE4AF8];
  sub_21C3FD4CC(0, 9, 0);
  __asm { BR              X8 }
}

void *static BooksFeatureFlag.allCases.getter()
{
  return &unk_24E03EE80;
}

BookFoundation::BooksFeatureFlag_optional __swiftcall BooksFeatureFlag.init(key:)(Swift::String key)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  char v8;
  BookFoundation::BooksFeatureFlag_optional result;

  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  v4 = v1;
  if (qword_255279F10 != -1)
    swift_once();
  v5 = off_25527AB70;
  if (*((_QWORD *)off_25527AB70 + 2) && (v6 = sub_21C45191C(countAndFlagsBits, (uint64_t)object), (v7 & 1) != 0))
    v8 = *(_BYTE *)(v5[7] + v6);
  else
    v8 = 9;
  result.value = swift_bridgeObjectRelease();
  *v4 = v8;
  return result;
}

void sub_21C41017C(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E03EE80;
}

Swift::Bool __swiftcall isFeatureEnabled(_:)(BookFoundation::BooksFeatureFlag a1)
{
  char v1;
  char v2;
  _BYTE v4[24];
  ValueMetadata *v5;
  unint64_t v6;

  v1 = *(_BYTE *)a1;
  v5 = &type metadata for BooksFeatureFlag;
  v6 = sub_21C3E2774();
  v4[0] = v1;
  v2 = sub_21C458CFC();
  sub_21C3E2754((uint64_t)v4);
  return v2 & 1;
}

unint64_t sub_21C4101E4()
{
  unint64_t result;

  result = qword_25527AB78;
  if (!qword_25527AB78)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksFeatureFlag, &type metadata for BooksFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527AB78);
  }
  return result;
}

_UNKNOWN **sub_21C410228()
{
  return &protocol witness table for FeatureFlagsDomain.Books;
}

unint64_t sub_21C410234(uint64_t a1)
{
  unint64_t result;

  result = sub_21C410258();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C410258()
{
  unint64_t result;

  result = qword_25527ABA8;
  if (!qword_25527ABA8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksFeatureFlag, &type metadata for BooksFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527ABA8);
  }
  return result;
}

unint64_t sub_21C4102A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527ABB0;
  if (!qword_25527ABB0)
  {
    v1 = sub_21C3E35C0(&qword_25527ABB8);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25527ABB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BooksFeatureFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21C410338 + 4 * byte_21C45BE50[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21C41036C + 4 * byte_21C45BE4B[v4]))();
}

uint64_t sub_21C41036C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C410374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C41037CLL);
  return result;
}

uint64_t sub_21C410388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C410390);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21C410394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C41039C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_21C4103A8(uint64_t a1, char a2, _QWORD *a3)
{
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  LOBYTE(v7) = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_21C45191C(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_21C3E614C(v16, v4 & 1);
    v11 = sub_21C45191C(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_21C459554();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_21C457F7C();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v8;
  *(_BYTE *)(v22[7] + v11) = v7;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v4 = (_BYTE *)(a1 + 72);
    v7 = 1;
    while (v7 < *(_QWORD *)(a1 + 16))
    {
      v26 = *v4;
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_21C45191C(v9, v8);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      v17 = v29;
      if (v27[3] < v32)
      {
        sub_21C3E614C(v32, 1);
        v28 = sub_21C45191C(v9, v8);
        if ((v17 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((v17 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v8;
      *(_BYTE *)(v34[7] + v28) = v26;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v7;
      v34[2] = v37;
      v4 += 24;
      if (v6 == v7)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t PDFInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C41073C(v1, a1);
}

uint64_t sub_21C41073C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527ABC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PDFInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PDFInfo();
  *(_BYTE *)(a2 + *(int *)(v4 + 20)) = 2;
  *(_BYTE *)(a2 + *(int *)(v4 + 24)) = 0;
  return sub_21C410804(a1, a2);
}

uint64_t type metadata accessor for PDFInfo()
{
  uint64_t result;

  result = qword_25527ACB8;
  if (!qword_25527ACB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C410804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527ABC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PDFInfo.assetType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PDFInfo() + 20));
}

uint64_t PDFInfo.assetType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PDFInfo();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*PDFInfo.assetType.modify())()
{
  type metadata accessor for PDFInfo();
  return nullsub_1;
}

uint64_t PDFInfo.contentKind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PDFInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t PDFInfo.contentKind.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for PDFInfo();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*PDFInfo.contentKind.modify())()
{
  type metadata accessor for PDFInfo();
  return nullsub_1;
}

uint64_t sub_21C410944()
{
  return sub_21C3E871C(&qword_25527ABD0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryPDFInfo, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
}

uint64_t sub_21C410970(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_21C41097C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 24));
  return result;
}

uint64_t sub_21C41098C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527AC00, (uint64_t (*)(uint64_t))type metadata accessor for PDFInfo, (uint64_t)&protocol conformance descriptor for PDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C4109C8()
{
  return sub_21C3E871C(&qword_25527AC08, (uint64_t (*)(uint64_t))type metadata accessor for LibraryPDFInfo, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
}

uint64_t sub_21C4109F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C41073C(v1, a1);
}

uint64_t sub_21C410A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(int *)(a2 + 24);
  *(_BYTE *)(a3 + *(int *)(a2 + 20)) = 2;
  *(_BYTE *)(a3 + v3) = 0;
  return sub_21C410804(a1, a3);
}

uint64_t sub_21C410A18(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527AC48, (uint64_t (*)(uint64_t))type metadata accessor for PDFInfo, (uint64_t)&protocol conformance descriptor for PDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C410A54(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527AC50, (uint64_t (*)(uint64_t))type metadata accessor for PDFInfo, (uint64_t)&protocol conformance descriptor for PDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for PDFInfo(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void *v140;
  id v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  unsigned int (*v146)(char *, uint64_t, uint64_t);
  char *v147;
  unsigned int (*v148)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v152;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v6 = a3;
    sub_21C3E344C(&qword_25527ABC8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *a2;
      *(_QWORD *)a1 = *a2;
      v20 = v19;
    }
    else
    {
      v152 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v8;
        v9 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v9;
        v10 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v10;
        v11 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v11;
        v12 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v12;
        *((_QWORD *)a1 + 10) = a2[10];
        v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v14 = v13[10];
        __dst = &a1[v14];
        v15 = (char *)a2 + v14;
        v16 = sub_21C458BF4();
        v144 = *(_QWORD *)(v16 - 8);
        v146 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v146(v15, 1, v16))
        {
          v17 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v144 + 16))(__dst, v15, v16);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(__dst, 0, 1, v16);
        }
        v31 = v13[11];
        v32 = &a1[v31];
        v33 = (char **)((char *)a2 + v31);
        v34 = v33[1];
        *(_QWORD *)v32 = *v33;
        *((_QWORD *)v32 + 1) = v34;
        v35 = v13[12];
        v36 = &a1[v35];
        v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v38 = v13[13];
        v39 = &a1[v38];
        v40 = (char **)((char *)a2 + v38);
        v41 = v40[1];
        *(_QWORD *)v39 = *v40;
        *((_QWORD *)v39 + 1) = v41;
        v42 = v13[14];
        v43 = &a1[v42];
        v44 = (char *)a2 + v42;
        v45 = sub_21C458C60();
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v46 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = (unsigned int (*)(char *, uint64_t, uint64_t))v47;
        if (v47(v44, 1, v45))
        {
          v48 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v49 = v13[15];
        v50 = &a1[v49];
        v51 = (char **)((char *)a2 + v49);
        v52 = v51[1];
        *(_QWORD *)v50 = *v51;
        *((_QWORD *)v50 + 1) = v52;
        v53 = v13[16];
        v54 = &a1[v53];
        v55 = (char **)((char *)a2 + v53);
        v56 = v55[1];
        *(_QWORD *)v54 = *v55;
        *((_QWORD *)v54 + 1) = v56;
        a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
        *(_QWORD *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((_BYTE *)a2 + v13[19]);
        a1[v13[20]] = *((_BYTE *)a2 + v13[20]);
        a1[v13[21]] = *((_BYTE *)a2 + v13[21]);
        a1[v13[22]] = *((_BYTE *)a2 + v13[22]);
        a1[v13[23]] = *((_BYTE *)a2 + v13[23]);
        a1[v13[24]] = *((_BYTE *)a2 + v13[24]);
        a1[v13[25]] = *((_BYTE *)a2 + v13[25]);
        a1[v13[26]] = *((_BYTE *)a2 + v13[26]);
        a1[v13[27]] = *((_BYTE *)a2 + v13[27]);
        a1[v13[28]] = *((_BYTE *)a2 + v13[28]);
        a1[v13[29]] = *((_BYTE *)a2 + v13[29]);
        v57 = v13[30];
        v58 = &a1[v57];
        v59 = (char **)((char *)a2 + v57);
        v60 = v59[1];
        *(_QWORD *)v58 = *v59;
        *((_QWORD *)v58 + 1) = v60;
        v61 = v13[31];
        v62 = &a1[v61];
        v63 = (char *)a2 + v61;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dsta(v63, 1, v45))
        {
          v64 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v62, v63, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v45);
        }
        v6 = v152;
        v65 = v13[32];
        v66 = &a1[v65];
        v67 = (char *)a2 + v65;
        *(_QWORD *)v66 = *(_QWORD *)v67;
        v66[8] = v67[8];
        *(_QWORD *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        v68 = v13[34];
        v69 = &a1[v68];
        v70 = (char *)a2 + v68;
        if (__dsta((char *)a2 + v68, 1, v45))
        {
          v71 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v69, v70, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v69, 0, 1, v45);
        }
        v72 = v13[35];
        v73 = &a1[v72];
        v74 = (char **)((char *)a2 + v72);
        v75 = v74[1];
        *(_QWORD *)v73 = *v74;
        *((_QWORD *)v73 + 1) = v75;
        v76 = v13[36];
        v77 = &a1[v76];
        v78 = (char *)a2 + v76;
        *(_QWORD *)(v77 + 13) = *(_QWORD *)(v78 + 13);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        v79 = v13[37];
        v80 = &a1[v79];
        v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v82 = v13[38];
        v83 = &a1[v82];
        v84 = (char *)a2 + v82;
        v83[4] = v84[4];
        *(_DWORD *)v83 = *(_DWORD *)v84;
        swift_bridgeObjectRetain();
      }
      else
      {
        v21 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v21;
        v22 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v22;
        v23 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v23;
        v24 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v24;
        v25 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v25;
        *((_QWORD *)a1 + 10) = a2[10];
        v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v27 = v26[10];
        v147 = &a1[v27];
        v28 = (char *)a2 + v27;
        v29 = sub_21C458BF4();
        v145 = *(_QWORD *)(v29 - 8);
        v148 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v148(v28, 1, v29))
        {
          v30 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(v147, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v147, v28, v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v145 + 56))(v147, 0, 1, v29);
        }
        v85 = v26[11];
        v86 = &a1[v85];
        v87 = (char **)((char *)a2 + v85);
        v88 = v87[1];
        *(_QWORD *)v86 = *v87;
        *((_QWORD *)v86 + 1) = v88;
        v89 = v26[12];
        v90 = &a1[v89];
        v91 = (char *)a2 + v89;
        v90[8] = v91[8];
        *(_QWORD *)v90 = *(_QWORD *)v91;
        v92 = v26[13];
        v93 = &a1[v92];
        v94 = (char **)((char *)a2 + v92);
        v95 = v94[1];
        *(_QWORD *)v93 = *v94;
        *((_QWORD *)v93 + 1) = v95;
        v96 = v26[14];
        v97 = &a1[v96];
        v98 = (char *)a2 + v96;
        v99 = sub_21C458C60();
        v100 = *(_QWORD *)(v99 - 8);
        v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = (void (**)(void *, const void *, uint64_t))v100;
        if (v101(v98, 1, v99))
        {
          v102 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v98, v99);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        }
        v103 = v26[15];
        v104 = &a1[v103];
        v105 = (char **)((char *)a2 + v103);
        v106 = v105[1];
        *(_QWORD *)v104 = *v105;
        *((_QWORD *)v104 + 1) = v106;
        v107 = v26[16];
        v108 = &a1[v107];
        v109 = (char **)((char *)a2 + v107);
        v110 = v109[1];
        *(_QWORD *)v108 = *v109;
        *((_QWORD *)v108 + 1) = v110;
        a1[v26[17]] = *((_BYTE *)a2 + v26[17]);
        *(_QWORD *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((_BYTE *)a2 + v26[19]);
        a1[v26[20]] = *((_BYTE *)a2 + v26[20]);
        a1[v26[21]] = *((_BYTE *)a2 + v26[21]);
        a1[v26[22]] = *((_BYTE *)a2 + v26[22]);
        a1[v26[23]] = *((_BYTE *)a2 + v26[23]);
        a1[v26[24]] = *((_BYTE *)a2 + v26[24]);
        a1[v26[25]] = *((_BYTE *)a2 + v26[25]);
        a1[v26[26]] = *((_BYTE *)a2 + v26[26]);
        a1[v26[27]] = *((_BYTE *)a2 + v26[27]);
        a1[v26[28]] = *((_BYTE *)a2 + v26[28]);
        a1[v26[29]] = *((_BYTE *)a2 + v26[29]);
        v111 = v26[30];
        v112 = &a1[v111];
        v113 = (char **)((char *)a2 + v111);
        v114 = v113[1];
        *(_QWORD *)v112 = *v113;
        *((_QWORD *)v112 + 1) = v114;
        v115 = v26[31];
        v116 = &a1[v115];
        v117 = (char *)a2 + v115;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v101(v117, 1, v99))
        {
          v118 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        }
        else
        {
          __dstb[2](v116, v117, v99);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v116, 0, 1, v99);
        }
        v6 = v152;
        v119 = v26[32];
        v120 = &a1[v119];
        v121 = (char *)a2 + v119;
        *(_QWORD *)v120 = *(_QWORD *)v121;
        v120[8] = v121[8];
        *(_QWORD *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        v122 = v26[34];
        v123 = &a1[v122];
        v124 = (char *)a2 + v122;
        if (v101((char *)a2 + v122, 1, v99))
        {
          v125 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          __dstb[2](v123, v124, v99);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v123, 0, 1, v99);
        }
        v126 = v26[35];
        v127 = &a1[v126];
        v128 = (char **)((char *)a2 + v126);
        v129 = v128[1];
        *(_QWORD *)v127 = *v128;
        *((_QWORD *)v127 + 1) = v129;
        v130 = v26[36];
        v131 = &a1[v130];
        v132 = (char *)a2 + v130;
        *(_QWORD *)(v131 + 13) = *(_QWORD *)(v132 + 13);
        *(_OWORD *)v131 = *(_OWORD *)v132;
        v133 = v26[37];
        v134 = &a1[v133];
        v135 = (char *)a2 + v133;
        v134[8] = v135[8];
        *(_QWORD *)v134 = *(_QWORD *)v135;
        v136 = v26[38];
        v137 = &a1[v136];
        v138 = (char *)a2 + v136;
        v137[4] = v138[4];
        *(_DWORD *)v137 = *(_DWORD *)v138;
        swift_bridgeObjectRetain();
        v139 = *(int *)(sub_21C3E344C(&qword_25527AC58) + 48);
        v140 = *(char **)((char *)a2 + v139);
        *(_QWORD *)&a1[v139] = v140;
        v141 = v140;
      }
    }
    swift_storeEnumTagMultiPayload();
    v142 = *(int *)(v6 + 24);
    a1[*(int *)(v6 + 20)] = *((_BYTE *)a2 + *(int *)(v6 + 20));
    a1[v142] = *((_BYTE *)a2 + v142);
  }
  return a1;
}

void destroy for PDFInfo(void **a1)
{
  int EnumCaseMultiPayload;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  char *v12;
  void *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  char *v23;

  sub_21C3E344C(&qword_25527ABC8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v13 = *a1;
LABEL_14:

    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v4 = (char *)a1 + v3[10];
    v5 = sub_21C458BF4();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (char *)a1 + v3[14];
    v8 = sub_21C458C60();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = (char *)a1 + v3[31];
    if (!v10(v11, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v12 = (char *)a1 + v3[34];
    if (!v10(v12, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    v13 = *(void **)((char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AC58) + 48));
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v15 = (char *)a1 + v14[10];
  v16 = sub_21C458BF4();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (char *)a1 + v14[14];
  v19 = sub_21C458C60();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (!v21(v18, 1, v19))
    (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = (char *)a1 + v14[31];
  if (!v21(v22, 1, v19))
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  v23 = (char *)a1 + v14[34];
  if (!v21(v23, 1, v19))
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PDFInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(const void *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(const void *, uint64_t, uint64_t);
  char *v145;
  unsigned int (*v146)(const void *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(const void *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v150;

  sub_21C3E344C(&qword_25527ABC8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v17 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v18 = v17;
  }
  else
  {
    v150 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v7;
      v8 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v8;
      v9 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v9;
      v10 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v10;
      v11 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(_QWORD *)(a2 + 80);
      v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v13 = v12[10];
      __dst = (char *)a1 + v13;
      v14 = (const void *)(a2 + v13);
      v15 = sub_21C458BF4();
      v142 = *(_QWORD *)(v15 - 8);
      v144 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v142 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v144(v14, 1, v15))
      {
        v16 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v142 + 16))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(__dst, 0, 1, v15);
      }
      v29 = v12[11];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (_QWORD *)(a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = v12[12];
      v34 = (char *)a1 + v33;
      v35 = a2 + v33;
      v34[8] = *(_BYTE *)(v35 + 8);
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v36 = v12[13];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)(a2 + v36);
      v39 = v38[1];
      *v37 = *v38;
      v37[1] = v39;
      v40 = v12[14];
      v41 = (char *)a1 + v40;
      v42 = (const void *)(a2 + v40);
      v43 = sub_21C458C60();
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v45;
      if (v45(v42, 1, v43))
      {
        v46 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v47 = v12[15];
      v48 = (_QWORD *)((char *)a1 + v47);
      v49 = (_QWORD *)(a2 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      v51 = v12[16];
      v52 = (_QWORD *)((char *)a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      v54 = v53[1];
      *v52 = *v53;
      v52[1] = v54;
      *((_BYTE *)a1 + v12[17]) = *(_BYTE *)(a2 + v12[17]);
      *(_QWORD *)((char *)a1 + v12[18]) = *(_QWORD *)(a2 + v12[18]);
      *((_BYTE *)a1 + v12[19]) = *(_BYTE *)(a2 + v12[19]);
      *((_BYTE *)a1 + v12[20]) = *(_BYTE *)(a2 + v12[20]);
      *((_BYTE *)a1 + v12[21]) = *(_BYTE *)(a2 + v12[21]);
      *((_BYTE *)a1 + v12[22]) = *(_BYTE *)(a2 + v12[22]);
      *((_BYTE *)a1 + v12[23]) = *(_BYTE *)(a2 + v12[23]);
      *((_BYTE *)a1 + v12[24]) = *(_BYTE *)(a2 + v12[24]);
      *((_BYTE *)a1 + v12[25]) = *(_BYTE *)(a2 + v12[25]);
      *((_BYTE *)a1 + v12[26]) = *(_BYTE *)(a2 + v12[26]);
      *((_BYTE *)a1 + v12[27]) = *(_BYTE *)(a2 + v12[27]);
      *((_BYTE *)a1 + v12[28]) = *(_BYTE *)(a2 + v12[28]);
      *((_BYTE *)a1 + v12[29]) = *(_BYTE *)(a2 + v12[29]);
      v55 = v12[30];
      v56 = (_QWORD *)((char *)a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      v59 = v12[31];
      v60 = (char *)a1 + v59;
      v61 = (const void *)(a2 + v59);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dsta(v61, 1, v43))
      {
        v62 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v60, v61, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v60, 0, 1, v43);
      }
      a3 = v150;
      v63 = v12[32];
      v64 = (char *)a1 + v63;
      v65 = a2 + v63;
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = *(_BYTE *)(v65 + 8);
      *(_QWORD *)((char *)a1 + v12[33]) = *(_QWORD *)(a2 + v12[33]);
      v66 = v12[34];
      v67 = (char *)a1 + v66;
      v68 = (const void *)(a2 + v66);
      if (__dsta((const void *)(a2 + v66), 1, v43))
      {
        v69 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v67, v68, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v67, 0, 1, v43);
      }
      v70 = v12[35];
      v71 = (_QWORD *)((char *)a1 + v70);
      v72 = (_QWORD *)(a2 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v12[36];
      v75 = (char *)a1 + v74;
      v76 = a2 + v74;
      *(_QWORD *)(v75 + 13) = *(_QWORD *)(v76 + 13);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v77 = v12[37];
      v78 = (char *)a1 + v77;
      v79 = a2 + v77;
      v78[8] = *(_BYTE *)(v79 + 8);
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v80 = v12[38];
      v81 = (char *)a1 + v80;
      v82 = a2 + v80;
      v81[4] = *(_BYTE *)(v82 + 4);
      *(_DWORD *)v81 = *(_DWORD *)v82;
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v19;
      v20 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v20;
      v21 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v21;
      v22 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v22;
      v23 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(_QWORD *)(a2 + 80);
      v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v25 = v24[10];
      v145 = (char *)a1 + v25;
      v26 = (const void *)(a2 + v25);
      v27 = sub_21C458BF4();
      v143 = *(_QWORD *)(v27 - 8);
      v146 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v143 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v146(v26, 1, v27))
      {
        v28 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v145, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v143 + 16))(v145, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v145, 0, 1, v27);
      }
      v83 = v24[11];
      v84 = (_QWORD *)((char *)a1 + v83);
      v85 = (_QWORD *)(a2 + v83);
      v86 = v85[1];
      *v84 = *v85;
      v84[1] = v86;
      v87 = v24[12];
      v88 = (char *)a1 + v87;
      v89 = a2 + v87;
      v88[8] = *(_BYTE *)(v89 + 8);
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v90 = v24[13];
      v91 = (_QWORD *)((char *)a1 + v90);
      v92 = (_QWORD *)(a2 + v90);
      v93 = v92[1];
      *v91 = *v92;
      v91[1] = v93;
      v94 = v24[14];
      v95 = (char *)a1 + v94;
      v96 = (const void *)(a2 + v94);
      v97 = sub_21C458C60();
      v98 = *(_QWORD *)(v97 - 8);
      v99 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v98 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dstb = (void (**)(void *, const void *, uint64_t))v98;
      if (v99(v96, 1, v97))
      {
        v100 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v98 + 16))(v95, v96, v97);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
      }
      v101 = v24[15];
      v102 = (_QWORD *)((char *)a1 + v101);
      v103 = (_QWORD *)(a2 + v101);
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = v24[16];
      v106 = (_QWORD *)((char *)a1 + v105);
      v107 = (_QWORD *)(a2 + v105);
      v108 = v107[1];
      *v106 = *v107;
      v106[1] = v108;
      *((_BYTE *)a1 + v24[17]) = *(_BYTE *)(a2 + v24[17]);
      *(_QWORD *)((char *)a1 + v24[18]) = *(_QWORD *)(a2 + v24[18]);
      *((_BYTE *)a1 + v24[19]) = *(_BYTE *)(a2 + v24[19]);
      *((_BYTE *)a1 + v24[20]) = *(_BYTE *)(a2 + v24[20]);
      *((_BYTE *)a1 + v24[21]) = *(_BYTE *)(a2 + v24[21]);
      *((_BYTE *)a1 + v24[22]) = *(_BYTE *)(a2 + v24[22]);
      *((_BYTE *)a1 + v24[23]) = *(_BYTE *)(a2 + v24[23]);
      *((_BYTE *)a1 + v24[24]) = *(_BYTE *)(a2 + v24[24]);
      *((_BYTE *)a1 + v24[25]) = *(_BYTE *)(a2 + v24[25]);
      *((_BYTE *)a1 + v24[26]) = *(_BYTE *)(a2 + v24[26]);
      *((_BYTE *)a1 + v24[27]) = *(_BYTE *)(a2 + v24[27]);
      *((_BYTE *)a1 + v24[28]) = *(_BYTE *)(a2 + v24[28]);
      *((_BYTE *)a1 + v24[29]) = *(_BYTE *)(a2 + v24[29]);
      v109 = v24[30];
      v110 = (_QWORD *)((char *)a1 + v109);
      v111 = (_QWORD *)(a2 + v109);
      v112 = v111[1];
      *v110 = *v111;
      v110[1] = v112;
      v113 = v24[31];
      v114 = (char *)a1 + v113;
      v115 = (const void *)(a2 + v113);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v99(v115, 1, v97))
      {
        v116 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        __dstb[2](v114, v115, v97);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v114, 0, 1, v97);
      }
      a3 = v150;
      v117 = v24[32];
      v118 = (char *)a1 + v117;
      v119 = a2 + v117;
      *(_QWORD *)v118 = *(_QWORD *)v119;
      v118[8] = *(_BYTE *)(v119 + 8);
      *(_QWORD *)((char *)a1 + v24[33]) = *(_QWORD *)(a2 + v24[33]);
      v120 = v24[34];
      v121 = (char *)a1 + v120;
      v122 = (const void *)(a2 + v120);
      if (v99((const void *)(a2 + v120), 1, v97))
      {
        v123 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        __dstb[2](v121, v122, v97);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v121, 0, 1, v97);
      }
      v124 = v24[35];
      v125 = (_QWORD *)((char *)a1 + v124);
      v126 = (_QWORD *)(a2 + v124);
      v127 = v126[1];
      *v125 = *v126;
      v125[1] = v127;
      v128 = v24[36];
      v129 = (char *)a1 + v128;
      v130 = a2 + v128;
      *(_QWORD *)(v129 + 13) = *(_QWORD *)(v130 + 13);
      *(_OWORD *)v129 = *(_OWORD *)v130;
      v131 = v24[37];
      v132 = (char *)a1 + v131;
      v133 = a2 + v131;
      v132[8] = *(_BYTE *)(v133 + 8);
      *(_QWORD *)v132 = *(_QWORD *)v133;
      v134 = v24[38];
      v135 = (char *)a1 + v134;
      v136 = a2 + v134;
      v135[4] = *(_BYTE *)(v136 + 4);
      *(_DWORD *)v135 = *(_DWORD *)v136;
      swift_bridgeObjectRetain();
      v137 = *(int *)(sub_21C3E344C(&qword_25527AC58) + 48);
      v138 = *(void **)(a2 + v137);
      *(_QWORD *)((char *)a1 + v137) = v138;
      v139 = v138;
    }
  }
  swift_storeEnumTagMultiPayload();
  v140 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v140) = *(_BYTE *)(a2 + v140);
  return a1;
}

_QWORD *assignWithCopy for PDFInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  id v125;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(char *, uint64_t, uint64_t);
  unsigned int (*v130)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;

  if (a1 != a2)
  {
    sub_21C412BE8((uint64_t)a1);
    sub_21C3E344C(&qword_25527ABC8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = (void *)*a2;
      *a1 = *a2;
      v13 = v12;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v8 = v7[10];
      __dst = (char *)a1 + v8;
      v9 = (char *)a2 + v8;
      v10 = sub_21C458BF4();
      v127 = *(_QWORD *)(v10 - 8);
      v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v129(v9, 1, v10))
      {
        v11 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v127 + 16))(__dst, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(__dst, 0, 1, v10);
      }
      v19 = v7[11];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      *v20 = *v21;
      v20[1] = v21[1];
      v22 = v7[12];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = *(_QWORD *)v24;
      v23[8] = v24[8];
      *(_QWORD *)v23 = v25;
      v26 = v7[13];
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (_QWORD *)((char *)a2 + v26);
      *v27 = *v28;
      v27[1] = v28[1];
      v29 = v7[14];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = sub_21C458C60();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v53 = v7[15];
      v54 = (_QWORD *)((char *)a1 + v53);
      v55 = (_QWORD *)((char *)a2 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v7[16];
      v57 = (_QWORD *)((char *)a1 + v56);
      v58 = (_QWORD *)((char *)a2 + v56);
      *v57 = *v58;
      v57[1] = v58[1];
      *((_BYTE *)a1 + v7[17]) = *((_BYTE *)a2 + v7[17]);
      *(_QWORD *)((char *)a1 + v7[18]) = *(_QWORD *)((char *)a2 + v7[18]);
      *((_BYTE *)a1 + v7[19]) = *((_BYTE *)a2 + v7[19]);
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      *((_BYTE *)a1 + v7[21]) = *((_BYTE *)a2 + v7[21]);
      *((_BYTE *)a1 + v7[22]) = *((_BYTE *)a2 + v7[22]);
      *((_BYTE *)a1 + v7[23]) = *((_BYTE *)a2 + v7[23]);
      *((_BYTE *)a1 + v7[24]) = *((_BYTE *)a2 + v7[24]);
      *((_BYTE *)a1 + v7[25]) = *((_BYTE *)a2 + v7[25]);
      *((_BYTE *)a1 + v7[26]) = *((_BYTE *)a2 + v7[26]);
      *((_BYTE *)a1 + v7[27]) = *((_BYTE *)a2 + v7[27]);
      *((_BYTE *)a1 + v7[28]) = *((_BYTE *)a2 + v7[28]);
      *((_BYTE *)a1 + v7[29]) = *((_BYTE *)a2 + v7[29]);
      v59 = v7[30];
      v60 = (_QWORD *)((char *)a1 + v59);
      v61 = (_QWORD *)((char *)a2 + v59);
      *v60 = *v61;
      v60[1] = v61[1];
      v62 = v7[31];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v64, 1, v32))
      {
        v65 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v63, v64, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v63, 0, 1, v32);
      }
      v79 = v7[32];
      v80 = (char *)a1 + v79;
      v81 = (char *)a2 + v79;
      v82 = *(_QWORD *)v81;
      v80[8] = v81[8];
      *(_QWORD *)v80 = v82;
      *(_QWORD *)((char *)a1 + v7[33]) = *(_QWORD *)((char *)a2 + v7[33]);
      v83 = v7[34];
      v84 = (char *)a1 + v83;
      v85 = (char *)a2 + v83;
      if (v34((char *)a2 + v83, 1, v32))
      {
        v86 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v84, v85, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v84, 0, 1, v32);
      }
      v95 = v7[35];
      v96 = (_QWORD *)((char *)a1 + v95);
      v97 = (_QWORD *)((char *)a2 + v95);
      *v96 = *v97;
      v96[1] = v97[1];
      v98 = v7[36];
      v99 = (char *)a1 + v98;
      v100 = (char *)a2 + v98;
      v101 = *(_OWORD *)v100;
      *(_QWORD *)(v99 + 13) = *(_QWORD *)(v100 + 13);
      *(_OWORD *)v99 = v101;
      v102 = v7[37];
      v103 = (char *)a1 + v102;
      v104 = (char *)a2 + v102;
      v105 = *(_QWORD *)v104;
      v103[8] = v104[8];
      *(_QWORD *)v103 = v105;
      v106 = v7[38];
      v107 = (char *)a1 + v106;
      v108 = (char *)a2 + v106;
      LODWORD(v105) = *(_DWORD *)v108;
      v107[4] = v108[4];
      *(_DWORD *)v107 = v105;
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v15 = v14[10];
      __dsta = (char *)a1 + v15;
      v16 = (char *)a2 + v15;
      v17 = sub_21C458BF4();
      v128 = *(_QWORD *)(v17 - 8);
      v130 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v130(v16, 1, v17))
      {
        v18 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dsta, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 16))(__dsta, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v128 + 56))(__dsta, 0, 1, v17);
      }
      v36 = v14[11];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = v14[12];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      v42 = *(_QWORD *)v41;
      v40[8] = v41[8];
      *(_QWORD *)v40 = v42;
      v43 = v14[13];
      v44 = (_QWORD *)((char *)a1 + v43);
      v45 = (_QWORD *)((char *)a2 + v43);
      *v44 = *v45;
      v44[1] = v45[1];
      v46 = v14[14];
      v47 = (char *)a1 + v46;
      v48 = (char *)a2 + v46;
      v49 = sub_21C458C60();
      v50 = *(_QWORD *)(v49 - 8);
      v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v48, 1, v49))
      {
        v52 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      v66 = v14[15];
      v67 = (_QWORD *)((char *)a1 + v66);
      v68 = (_QWORD *)((char *)a2 + v66);
      *v67 = *v68;
      v67[1] = v68[1];
      v69 = v14[16];
      v70 = (_QWORD *)((char *)a1 + v69);
      v71 = (_QWORD *)((char *)a2 + v69);
      *v70 = *v71;
      v70[1] = v71[1];
      *((_BYTE *)a1 + v14[17]) = *((_BYTE *)a2 + v14[17]);
      *(_QWORD *)((char *)a1 + v14[18]) = *(_QWORD *)((char *)a2 + v14[18]);
      *((_BYTE *)a1 + v14[19]) = *((_BYTE *)a2 + v14[19]);
      *((_BYTE *)a1 + v14[20]) = *((_BYTE *)a2 + v14[20]);
      *((_BYTE *)a1 + v14[21]) = *((_BYTE *)a2 + v14[21]);
      *((_BYTE *)a1 + v14[22]) = *((_BYTE *)a2 + v14[22]);
      *((_BYTE *)a1 + v14[23]) = *((_BYTE *)a2 + v14[23]);
      *((_BYTE *)a1 + v14[24]) = *((_BYTE *)a2 + v14[24]);
      *((_BYTE *)a1 + v14[25]) = *((_BYTE *)a2 + v14[25]);
      *((_BYTE *)a1 + v14[26]) = *((_BYTE *)a2 + v14[26]);
      *((_BYTE *)a1 + v14[27]) = *((_BYTE *)a2 + v14[27]);
      *((_BYTE *)a1 + v14[28]) = *((_BYTE *)a2 + v14[28]);
      *((_BYTE *)a1 + v14[29]) = *((_BYTE *)a2 + v14[29]);
      v72 = v14[30];
      v73 = (_QWORD *)((char *)a1 + v72);
      v74 = (_QWORD *)((char *)a2 + v72);
      *v73 = *v74;
      v73[1] = v74[1];
      v75 = v14[31];
      v76 = (char *)a1 + v75;
      v77 = (char *)a2 + v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v77, 1, v49))
      {
        v78 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v76, v77, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v76, 0, 1, v49);
      }
      v87 = v14[32];
      v88 = (char *)a1 + v87;
      v89 = (char *)a2 + v87;
      v90 = *(_QWORD *)v89;
      v88[8] = v89[8];
      *(_QWORD *)v88 = v90;
      *(_QWORD *)((char *)a1 + v14[33]) = *(_QWORD *)((char *)a2 + v14[33]);
      v91 = v14[34];
      v92 = (char *)a1 + v91;
      v93 = (char *)a2 + v91;
      if (v51((char *)a2 + v91, 1, v49))
      {
        v94 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v92, v93, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v92, 0, 1, v49);
      }
      v109 = v14[35];
      v110 = (_QWORD *)((char *)a1 + v109);
      v111 = (_QWORD *)((char *)a2 + v109);
      *v110 = *v111;
      v110[1] = v111[1];
      v112 = v14[36];
      v113 = (char *)a1 + v112;
      v114 = (char *)a2 + v112;
      v115 = *(_OWORD *)v114;
      *(_QWORD *)(v113 + 13) = *(_QWORD *)(v114 + 13);
      *(_OWORD *)v113 = v115;
      v116 = v14[37];
      v117 = (char *)a1 + v116;
      v118 = (char *)a2 + v116;
      v119 = *(_QWORD *)v118;
      v117[8] = v118[8];
      *(_QWORD *)v117 = v119;
      v120 = v14[38];
      v121 = (char *)a1 + v120;
      v122 = (char *)a2 + v120;
      LODWORD(v119) = *(_DWORD *)v122;
      v121[4] = v122[4];
      *(_DWORD *)v121 = v119;
      swift_bridgeObjectRetain();
      v123 = *(int *)(sub_21C3E344C(&qword_25527AC58) + 48);
      v124 = *(void **)((char *)a2 + v123);
      *(_QWORD *)((char *)a1 + v123) = v124;
      v125 = v124;
    }
    swift_storeEnumTagMultiPayload();
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_21C412BE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527ABC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for PDFInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;

  v6 = sub_21C3E344C(&qword_25527ABC8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v16 = v15[10];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = sub_21C458BF4();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    v32 = v15[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    v35 = v15[14];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = sub_21C458C60();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      v41 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    v46 = v15[31];
    v47 = &a1[v46];
    v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    v57 = v15[32];
    v58 = &a1[v57];
    v59 = &a2[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
    v60 = v15[34];
    v61 = &a1[v60];
    v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      v63 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    v74 = v15[36];
    v75 = &a1[v74];
    v76 = &a2[v74];
    *(_QWORD *)(v75 + 13) = *(_QWORD *)(v76 + 13);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    v77 = v15[37];
    v78 = &a1[v77];
    v79 = &a2[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    v80 = v15[38];
    v81 = &a1[v80];
    v82 = &a2[v80];
    *(_DWORD *)v81 = *(_DWORD *)v82;
    v81[4] = v82[4];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v9 = v8[10];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_21C458BF4();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    v22 = v8[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v23[8] = v24[8];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    v25 = v8[14];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = sub_21C458C60();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      v31 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    v42 = v8[31];
    v43 = &a1[v42];
    v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      v45 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    v50 = v8[32];
    v51 = &a1[v50];
    v52 = &a2[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
    v53 = v8[34];
    v54 = &a1[v53];
    v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    v64 = v8[36];
    v65 = &a1[v64];
    v66 = &a2[v64];
    *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    v67 = v8[37];
    v68 = &a1[v67];
    v69 = &a2[v67];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v69[8];
    v70 = v8[38];
    v71 = &a1[v70];
    v72 = &a2[v70];
    *(_DWORD *)v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    v73 = sub_21C3E344C(&qword_25527AC58);
    *(_QWORD *)&a1[*(int *)(v73 + 48)] = *(_QWORD *)&a2[*(int *)(v73 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_31:
  v83 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v83] = a2[v83];
  return a1;
}

char *assignWithTake for PDFInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;

  if (a1 != a2)
  {
    sub_21C412BE8((uint64_t)a1);
    v6 = sub_21C3E344C(&qword_25527ABC8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v16 = v15[10];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_21C458BF4();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      v32 = v15[12];
      v33 = &a1[v32];
      v34 = &a2[v32];
      v33[8] = v34[8];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      v35 = v15[14];
      v36 = &a1[v35];
      v37 = &a2[v35];
      v38 = sub_21C458C60();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        v41 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      v46 = v15[31];
      v47 = &a1[v46];
      v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        v49 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      v57 = v15[32];
      v58 = &a1[v57];
      v59 = &a2[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
      v60 = v15[34];
      v61 = &a1[v60];
      v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        v63 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      v74 = v15[36];
      v75 = &a1[v74];
      v76 = &a2[v74];
      *(_QWORD *)(v75 + 13) = *(_QWORD *)(v76 + 13);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v77 = v15[37];
      v78 = &a1[v77];
      v79 = &a2[v77];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v78[8] = v79[8];
      v80 = v15[38];
      v81 = &a1[v80];
      v82 = &a2[v80];
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v81[4] = v82[4];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v9 = v8[10];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_21C458BF4();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      v22 = v8[12];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v23[8] = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      v25 = v8[14];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = sub_21C458C60();
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        v31 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      v42 = v8[31];
      v43 = &a1[v42];
      v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        v45 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      v50 = v8[32];
      v51 = &a1[v50];
      v52 = &a2[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
      v53 = v8[34];
      v54 = &a1[v53];
      v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        v56 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      v64 = v8[36];
      v65 = &a1[v64];
      v66 = &a2[v64];
      *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      v67 = v8[37];
      v68 = &a1[v67];
      v69 = &a2[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v8[38];
      v71 = &a1[v70];
      v72 = &a2[v70];
      *(_DWORD *)v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      v73 = sub_21C3E344C(&qword_25527AC58);
      *(_QWORD *)&a1[*(int *)(v73 + 48)] = *(_QWORD *)&a2[*(int *)(v73 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_32:
  v83 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v83] = a2[v83];
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C413C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_21C3E344C(&qword_25527ABC8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PDFInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C413CF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527ABC8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

void sub_21C413D70()
{
  unint64_t v0;

  sub_21C413DEC(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C413DEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527ACC8[0])
  {
    v2 = type metadata accessor for LibraryPDFInfo();
    v3 = type metadata accessor for MAsset();
    v5 = type metadata accessor for ContentDataSource(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, qword_25527ACC8);
  }
}

uint64_t dispatch thunk of MCatalogRequestHandling.fetch<A>(resources:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 8) + *(_QWORD *)(a8 + 8));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_21C413F04;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_21C413F04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  id v28;
  uint64_t *v29;
  char v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD v44[4];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;

  v43 = (uint64_t *)a3;
  v5 = sub_21C3E344C(&qword_25527AD08);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LibraryAudiobookInfo();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21C3E344C(&qword_25527AD10);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LibraryBookInfo();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C415EDC(a1, (uint64_t)&v45, &qword_25527A470);
  if (v46)
  {
    sub_21C3F349C(&v45, (uint64_t)v47);
    if (a2)
    {
      sub_21C3E95B0((uint64_t)v47, (uint64_t)&v45);
      v19 = a2;
      sub_21C3E344C(&qword_25527AD18);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      if ((v20 & 1) != 0)
      {
        v21(v14, 0, 1, v15);
        sub_21C415F20((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo);
        type metadata accessor for MBook();
        v22 = swift_dynamicCastClass();
        if (v22)
        {
          v23 = v22;
          v24 = type metadata accessor for BookInfo();
          v25 = v43;
          v43[3] = v24;
          v25[4] = sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
          v26 = sub_21C3E30F8(v25);
          v27 = *(int *)(sub_21C3E344C(&qword_25527AD28) + 48);
          sub_21C415F20((uint64_t)v18, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo);
          *(uint64_t *)((char *)v26 + v27) = v23;
          sub_21C3E344C(&qword_25527A3A0);
          swift_storeEnumTagMultiPayload();
          *((_BYTE *)v26 + *(int *)(v24 + 20)) = 1;
LABEL_21:
          sub_21C3E2754((uint64_t)v47);
          return;
        }
        sub_21C415F64((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo);
      }
      else
      {
        v21(v14, 1, 1, v15);
        sub_21C3FF670((uint64_t)v14, &qword_25527AD10);
      }
      sub_21C3E95B0((uint64_t)v47, (uint64_t)&v45);
      v30 = swift_dynamicCast();
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if ((v30 & 1) != 0)
      {
        v31(v7, 0, 1, v8);
        sub_21C415F20((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
        type metadata accessor for MAudiobook();
        v32 = swift_dynamicCastClass();
        if (v32)
        {
          v33 = v32;
          v34 = type metadata accessor for AudiobookInfo();
          v35 = v43;
          v43[3] = v34;
          v35[4] = sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
          v36 = sub_21C3E30F8(v35);
          v37 = *(int *)(sub_21C3E344C(&qword_25527AD20) + 48);
          sub_21C415F20((uint64_t)v11, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
          *(uint64_t *)((char *)v36 + v37) = v33;
          sub_21C3E344C(&qword_25527A390);
          swift_storeEnumTagMultiPayload();
          *((_BYTE *)v36 + *(int *)(v34 + 20)) = 0;
          *((_BYTE *)v36 + *(int *)(v34 + 24)) = 1;
          goto LABEL_21;
        }
        sub_21C415F64((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
      }
      else
      {
        v31(v7, 1, 1, v8);
        sub_21C3FF670((uint64_t)v7, &qword_25527AD08);
      }
      v38 = v48;
      v39 = sub_21C3E359C(v47, v48);
      v46 = v38;
      v40 = sub_21C3E30F8((uint64_t *)&v45);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v40, v39, v38);
      v44[3] = type metadata accessor for MAsset();
      v44[0] = v19;
      sub_21C3E344C(&qword_25527A240);
      sub_21C4159CC((uint64_t)&v45, (uint64_t)v44);
      sub_21C3E2754((uint64_t)v44);
      sub_21C3E2754((uint64_t)&v45);
      v41 = v43;
      v43[4] = 0;
      *(_OWORD *)v41 = 0u;
      *((_OWORD *)v41 + 1) = 0u;
      goto LABEL_21;
    }
    sub_21C3E2754((uint64_t)v47);
  }
  else
  {
    sub_21C3FF670((uint64_t)&v45, &qword_25527A470);
  }
  sub_21C415EDC(a1, (uint64_t)&v45, &qword_25527A470);
  if (v46)
  {
    sub_21C3F349C(&v45, (uint64_t)v47);
    static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v47, (uint64_t)v43);
    goto LABEL_21;
  }
  sub_21C3FF670((uint64_t)&v45, &qword_25527A470);
  if (a2)
  {
    v28 = a2;
    static ContentInfoUtilities.assetInfo(storeAsset:)(v28, (uint64_t)v43);

  }
  else
  {
    v29 = v43;
    v43[4] = 0;
    *(_OWORD *)v29 = 0u;
    *((_OWORD *)v29 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.assetInfo(libraryAssetInfo:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v24[4];
  _BYTE v25[40];

  v4 = type metadata accessor for LibraryPDFInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LibraryAudiobookInfo();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LibraryBookInfo();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E95B0((uint64_t)a1, (uint64_t)v25);
  sub_21C3E344C(&qword_25527AD18);
  if (swift_dynamicCast())
  {
    v13 = type metadata accessor for BookInfo();
    *(_QWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
    v14 = sub_21C3E30F8((uint64_t *)a2);
    sub_21C415F20((uint64_t)v12, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo);
    sub_21C3E344C(&qword_25527A3A0);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)v14 + *(int *)(v13 + 20)) = 1;
  }
  else if (swift_dynamicCast())
  {
    v15 = type metadata accessor for AudiobookInfo();
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
    v16 = sub_21C3E30F8((uint64_t *)a2);
    sub_21C415F20((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
    sub_21C3E344C(&qword_25527A390);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)v16 + *(int *)(v15 + 20)) = 0;
    *((_BYTE *)v16 + *(int *)(v15 + 24)) = 1;
  }
  else if (swift_dynamicCast())
  {
    v17 = type metadata accessor for PDFInfo();
    *(_QWORD *)(a2 + 24) = v17;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527AD30, (uint64_t (*)(uint64_t))type metadata accessor for PDFInfo, (uint64_t)&protocol conformance descriptor for PDFInfo);
    v18 = sub_21C3E30F8((uint64_t *)a2);
    sub_21C415F20((uint64_t)v6, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for LibraryPDFInfo);
    sub_21C3E344C(&qword_25527ABC8);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)v18 + *(int *)(v17 + 20)) = 2;
    *((_BYTE *)v18 + *(int *)(v17 + 24)) = 0;
  }
  else
  {
    v19 = a1[3];
    v20 = sub_21C3E359C(a1, v19);
    v24[3] = v19;
    v21 = sub_21C3E30F8(v24);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v21, v20, v19);
    sub_21C3E344C(&qword_25527A240);
    sub_21C415C90((uint64_t)v24);
    sub_21C3E2754((uint64_t)v24);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_21C3E2754((uint64_t)v25);
}

double static ContentInfoUtilities.assetInfo(storeAsset:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double result;
  id v13;
  _QWORD v15[4];

  type metadata accessor for MBook();
  v3 = swift_dynamicCastClass();
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for BookInfo();
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
    v6 = sub_21C3E30F8((uint64_t *)a2);
    *v6 = v4;
    sub_21C3E344C(&qword_25527A3A0);
    swift_storeEnumTagMultiPayload();
    v7 = *(int *)(v5 + 20);
LABEL_5:
    *((_BYTE *)v6 + v7) = 1;
    v11 = a1;
    return result;
  }
  type metadata accessor for MAudiobook();
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    v9 = v8;
    v10 = type metadata accessor for AudiobookInfo();
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
    v6 = sub_21C3E30F8((uint64_t *)a2);
    *v6 = v9;
    sub_21C3E344C(&qword_25527A390);
    swift_storeEnumTagMultiPayload();
    *((_BYTE *)v6 + *(int *)(v10 + 20)) = 0;
    v7 = *(int *)(v10 + 24);
    goto LABEL_5;
  }
  v15[3] = type metadata accessor for MAsset();
  v15[0] = a1;
  sub_21C3E344C(&qword_25527A240);
  v13 = a1;
  sub_21C415C90((uint64_t)v15);
  sub_21C3E2754((uint64_t)v15);
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t *v30;
  char v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD v45[4];
  __int128 v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;

  v44 = (uint64_t *)a3;
  v5 = sub_21C3E344C(&qword_25527AD38);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LibraryAudiobookSeriesInfo();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_21C3E344C(&qword_25527AD40);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LibraryBookSeriesInfo();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C415EDC(a1, (uint64_t)&v46, &qword_25527A2A8);
  if (v47)
  {
    sub_21C3F349C(&v46, (uint64_t)v48);
    if (a2)
    {
      sub_21C3E95B0((uint64_t)v48, (uint64_t)&v46);
      v19 = a2;
      sub_21C3E344C(&qword_25527AD48);
      v20 = swift_dynamicCast();
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      if ((v20 & 1) != 0)
      {
        v21(v14, 0, 1, v15);
        sub_21C415F20((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
        type metadata accessor for MBookSeries();
        v22 = swift_dynamicCastClass();
        if (v22)
        {
          v23 = v22;
          v24 = type metadata accessor for BookSeriesInfo();
          v25 = v44;
          v44[3] = v24;
          v25[4] = sub_21C3E871C(&qword_25527AD60, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
          v26 = sub_21C3E30F8(v25);
          v27 = *(int *)(sub_21C3E344C(&qword_25527AD68) + 48);
          sub_21C415F20((uint64_t)v18, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
          *(uint64_t *)((char *)v26 + v27) = v23;
          sub_21C3E344C(&qword_25527AD70);
          swift_storeEnumTagMultiPayload();
          v28 = *(int *)(v24 + 20);
LABEL_18:
          *(uint64_t *)((char *)v26 + v28) = 0;
          goto LABEL_22;
        }
        sub_21C415F64((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
      }
      else
      {
        v21(v14, 1, 1, v15);
        sub_21C3FF670((uint64_t)v14, &qword_25527AD40);
      }
      sub_21C3E95B0((uint64_t)v48, (uint64_t)&v46);
      v31 = swift_dynamicCast();
      v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      if ((v31 & 1) != 0)
      {
        v32(v7, 0, 1, v8);
        sub_21C415F20((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
        type metadata accessor for MAudiobookSeries();
        v33 = swift_dynamicCastClass();
        if (v33)
        {
          v34 = v33;
          v35 = type metadata accessor for AudiobookSeriesInfo();
          v36 = v44;
          v44[3] = v35;
          v36[4] = sub_21C3E871C(&qword_25527AD58, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
          v26 = sub_21C3E30F8(v36);
          v37 = (uint64_t)v26 + *(int *)(v35 + 24);
          v38 = *(int *)(sub_21C3E344C(&qword_25527A890) + 48);
          sub_21C415F20((uint64_t)v11, v37, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
          *(_QWORD *)(v37 + v38) = v34;
          sub_21C3E344C(&qword_25527A880);
          swift_storeEnumTagMultiPayload();
          *(_WORD *)v26 = 1;
          v28 = *(int *)(v35 + 28);
          goto LABEL_18;
        }
        sub_21C415F64((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
      }
      else
      {
        v32(v7, 1, 1, v8);
        sub_21C3FF670((uint64_t)v7, &qword_25527AD38);
      }
      v39 = v49;
      v40 = sub_21C3E359C(v48, v49);
      v47 = v39;
      v41 = sub_21C3E30F8((uint64_t *)&v46);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v41, v40, v39);
      v45[3] = type metadata accessor for MSeries();
      v45[0] = v19;
      sub_21C3E344C(&qword_25527AD50);
      sub_21C4159CC((uint64_t)&v46, (uint64_t)v45);
      sub_21C3E2754((uint64_t)v45);
      sub_21C3E2754((uint64_t)&v46);
      v42 = v44;
      v44[4] = 0;
      *(_OWORD *)v42 = 0u;
      *((_OWORD *)v42 + 1) = 0u;
      goto LABEL_22;
    }
    sub_21C3E2754((uint64_t)v48);
  }
  else
  {
    sub_21C3FF670((uint64_t)&v46, &qword_25527A2A8);
  }
  sub_21C415EDC(a1, (uint64_t)&v46, &qword_25527A2A8);
  if (v47)
  {
    sub_21C3F349C(&v46, (uint64_t)v48);
    static ContentInfoUtilities.seriesInfo(librarySeries:)(v48, (uint64_t)v44);
LABEL_22:
    sub_21C3E2754((uint64_t)v48);
    return;
  }
  sub_21C3FF670((uint64_t)&v46, &qword_25527A2A8);
  if (a2)
  {
    v29 = a2;
    static ContentInfoUtilities.seriesInfo(storeSeries:)(v29, (uint64_t)v44);

  }
  else
  {
    v30 = v44;
    v44[4] = 0;
    *(_OWORD *)v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.seriesInfo(librarySeries:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v19[4];
  _BYTE v20[40];

  v4 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LibraryBookSeriesInfo();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E95B0((uint64_t)a1, (uint64_t)v20);
  sub_21C3E344C(&qword_25527AD48);
  if (swift_dynamicCast())
  {
    v10 = type metadata accessor for BookSeriesInfo();
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527AD60, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
    v11 = sub_21C3E30F8((uint64_t *)a2);
    sub_21C415F20((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
    sub_21C3E344C(&qword_25527AD70);
    swift_storeEnumTagMultiPayload();
    *(uint64_t *)((char *)v11 + *(int *)(v10 + 20)) = 0;
  }
  else if (swift_dynamicCast())
  {
    v12 = type metadata accessor for AudiobookSeriesInfo();
    *(_QWORD *)(a2 + 24) = v12;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527AD58, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
    v13 = sub_21C3E30F8((uint64_t *)a2);
    sub_21C415F20((uint64_t)v6, (uint64_t)v13 + *(int *)(v12 + 24), (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
    sub_21C3E344C(&qword_25527A880);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)v13 = 1;
    *(uint64_t *)((char *)v13 + *(int *)(v12 + 28)) = 0;
  }
  else
  {
    v14 = a1[3];
    v15 = sub_21C3E359C(a1, v14);
    v19[3] = v14;
    v16 = sub_21C3E30F8(v19);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v15, v14);
    sub_21C3E344C(&qword_25527AD50);
    sub_21C415C90((uint64_t)v19);
    sub_21C3E2754((uint64_t)v19);
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_21C3E2754((uint64_t)v20);
}

double static ContentInfoUtilities.seriesInfo(storeSeries:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double result;
  id v13;
  _QWORD v15[4];

  type metadata accessor for MBookSeries();
  v3 = swift_dynamicCastClass();
  if (v3)
  {
    v4 = v3;
    v5 = type metadata accessor for BookSeriesInfo();
    *(_QWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527AD60, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
    v6 = sub_21C3E30F8((uint64_t *)a2);
    *v6 = v4;
    sub_21C3E344C(&qword_25527AD70);
    swift_storeEnumTagMultiPayload();
    v7 = *(int *)(v5 + 20);
LABEL_5:
    *(uint64_t *)((char *)v6 + v7) = 0;
    v11 = a1;
    return result;
  }
  type metadata accessor for MAudiobookSeries();
  v8 = swift_dynamicCastClass();
  if (v8)
  {
    v9 = v8;
    v10 = type metadata accessor for AudiobookSeriesInfo();
    *(_QWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = sub_21C3E871C(&qword_25527AD58, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
    v6 = sub_21C3E30F8((uint64_t *)a2);
    *(uint64_t *)((char *)v6 + *(int *)(v10 + 24)) = v9;
    sub_21C3E344C(&qword_25527A880);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)v6 = 1;
    v7 = *(int *)(v10 + 28);
    goto LABEL_5;
  }
  v15[3] = type metadata accessor for MSeries();
  v15[0] = a1;
  sub_21C3E344C(&qword_25527AD50);
  v13 = a1;
  sub_21C415C90((uint64_t)v15);
  sub_21C3E2754((uint64_t)v15);
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void static ContentInfoUtilities.seriesInfo(librarySeries:storeSeries:additionalStoreAssetsForEnrichment:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t *v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD v46[4];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;

  v44 = a3;
  v45 = (uint64_t *)a4;
  v6 = sub_21C3E344C(&qword_25527AD38);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LibraryAudiobookSeriesInfo();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_21C3E344C(&qword_25527AD40);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LibraryBookSeriesInfo();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C415EDC(a1, (uint64_t)&v47, &qword_25527A2A8);
  if (v48)
  {
    sub_21C3F349C(&v47, (uint64_t)v49);
    if (a2)
    {
      sub_21C3E95B0((uint64_t)v49, (uint64_t)&v47);
      v20 = a2;
      sub_21C3E344C(&qword_25527AD48);
      v21 = swift_dynamicCast();
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      if ((v21 & 1) != 0)
      {
        v22(v15, 0, 1, v16);
        sub_21C415F20((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
        type metadata accessor for MBookSeries();
        v23 = swift_dynamicCastClass();
        if (v23)
        {
          v24 = v23;
          v25 = type metadata accessor for BookSeriesInfo();
          v26 = v45;
          v45[3] = v25;
          v26[4] = sub_21C3E871C(&qword_25527AD60, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
          v27 = sub_21C3E30F8(v26);
          v28 = *(int *)(sub_21C3E344C(&qword_25527AD68) + 48);
          sub_21C415F20((uint64_t)v19, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
          *(uint64_t *)((char *)v27 + v28) = v24;
          sub_21C3E344C(&qword_25527AD70);
          swift_storeEnumTagMultiPayload();
          v29 = *(int *)(v25 + 20);
LABEL_18:
          *(uint64_t *)((char *)v27 + v29) = v44;
          swift_bridgeObjectRetain();
          goto LABEL_22;
        }
        sub_21C415F64((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
      }
      else
      {
        v22(v15, 1, 1, v16);
        sub_21C3FF670((uint64_t)v15, &qword_25527AD40);
      }
      sub_21C3E95B0((uint64_t)v49, (uint64_t)&v47);
      v32 = swift_dynamicCast();
      v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      if ((v32 & 1) != 0)
      {
        v33(v8, 0, 1, v9);
        sub_21C415F20((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
        type metadata accessor for MAudiobookSeries();
        v34 = swift_dynamicCastClass();
        if (v34)
        {
          v35 = v34;
          v36 = type metadata accessor for AudiobookSeriesInfo();
          v37 = v45;
          v45[3] = v36;
          v37[4] = sub_21C3E871C(&qword_25527AD58, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
          v27 = sub_21C3E30F8(v37);
          v38 = (uint64_t)v27 + *(int *)(v36 + 24);
          v39 = *(int *)(sub_21C3E344C(&qword_25527A890) + 48);
          sub_21C415F20((uint64_t)v12, v38, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
          *(_QWORD *)(v38 + v39) = v35;
          sub_21C3E344C(&qword_25527A880);
          swift_storeEnumTagMultiPayload();
          *(_WORD *)v27 = 1;
          v29 = *(int *)(v36 + 28);
          goto LABEL_18;
        }
        sub_21C415F64((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
      }
      else
      {
        v33(v8, 1, 1, v9);
        sub_21C3FF670((uint64_t)v8, &qword_25527AD38);
      }
      v40 = v50;
      v41 = sub_21C3E359C(v49, v50);
      v48 = v40;
      v42 = sub_21C3E30F8((uint64_t *)&v47);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v42, v41, v40);
      v46[3] = type metadata accessor for MSeries();
      v46[0] = v20;
      sub_21C3E344C(&qword_25527AD50);
      sub_21C4159CC((uint64_t)&v47, (uint64_t)v46);
      sub_21C3E2754((uint64_t)v46);
      sub_21C3E2754((uint64_t)&v47);
      v43 = v45;
      v45[4] = 0;
      *(_OWORD *)v43 = 0u;
      *((_OWORD *)v43 + 1) = 0u;
      goto LABEL_22;
    }
    sub_21C3E2754((uint64_t)v49);
  }
  else
  {
    sub_21C3FF670((uint64_t)&v47, &qword_25527A2A8);
  }
  sub_21C415EDC(a1, (uint64_t)&v47, &qword_25527A2A8);
  if (v48)
  {
    sub_21C3F349C(&v47, (uint64_t)v49);
    static ContentInfoUtilities.seriesInfo(librarySeries:additionalStoreAssetsForEnrichment:)(v49, v44, (uint64_t)v45);
LABEL_22:
    sub_21C3E2754((uint64_t)v49);
    return;
  }
  sub_21C3FF670((uint64_t)&v47, &qword_25527A2A8);
  if (a2)
  {
    v30 = a2;
    static ContentInfoUtilities.seriesInfo(storeSeries:)(v30, (uint64_t)v45);

  }
  else
  {
    v31 = v45;
    v45[4] = 0;
    *(_OWORD *)v31 = 0u;
    *((_OWORD *)v31 + 1) = 0u;
  }
}

uint64_t static ContentInfoUtilities.seriesInfo(librarySeries:additionalStoreAssetsForEnrichment:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v21[4];
  _BYTE v22[40];

  v6 = type metadata accessor for LibraryAudiobookSeriesInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LibraryBookSeriesInfo();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E95B0((uint64_t)a1, (uint64_t)v22);
  sub_21C3E344C(&qword_25527AD48);
  if (swift_dynamicCast())
  {
    v12 = type metadata accessor for BookSeriesInfo();
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = sub_21C3E871C(&qword_25527AD60, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
    v13 = sub_21C3E30F8((uint64_t *)a3);
    sub_21C415F20((uint64_t)v11, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
    sub_21C3E344C(&qword_25527AD70);
    swift_storeEnumTagMultiPayload();
    v14 = *(int *)(v12 + 20);
  }
  else
  {
    if (!swift_dynamicCast())
    {
      v16 = a1[3];
      v17 = sub_21C3E359C(a1, v16);
      v21[3] = v16;
      v18 = sub_21C3E30F8(v21);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v18, v17, v16);
      sub_21C3E344C(&qword_25527AD50);
      sub_21C415C90((uint64_t)v21);
      sub_21C3E2754((uint64_t)v21);
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return sub_21C3E2754((uint64_t)v22);
    }
    v15 = type metadata accessor for AudiobookSeriesInfo();
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = sub_21C3E871C(&qword_25527AD58, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookSeriesInfo, (uint64_t)&protocol conformance descriptor for AudiobookSeriesInfo);
    v13 = sub_21C3E30F8((uint64_t *)a3);
    sub_21C415F20((uint64_t)v8, (uint64_t)v13 + *(int *)(v15 + 24), (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
    sub_21C3E344C(&qword_25527A880);
    swift_storeEnumTagMultiPayload();
    *(_WORD *)v13 = 1;
    v14 = *(int *)(v15 + 28);
  }
  *(uint64_t *)((char *)v13 + v14) = a2;
  swift_bridgeObjectRetain();
  return sub_21C3E2754((uint64_t)v22);
}

void sub_21C4159CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[4];

  v4 = sub_21C4595F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E5528(a1, (uint64_t)v22);
  sub_21C4595CC();
  sub_21C4595D8();
  v8 = *(void (**)(char *, uint64_t))(v5 + 8);
  v8(v7, v4);
  sub_21C3E5528(a2, (uint64_t)v22);
  sub_21C4595CC();
  sub_21C4595D8();
  v8(v7, v4);
  if (qword_255279EE8 != -1)
    swift_once();
  v9 = sub_21C458D20();
  sub_21C3E2BA0(v9, (uint64_t)qword_25527A260);
  v10 = sub_21C458D08();
  v11 = sub_21C459218();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22[0] = v13;
    *(_DWORD *)v12 = 136315650;
    v14 = sub_21C45962C();
    v21 = sub_21C409744(v14, v15, v22);
    sub_21C459290();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v16 = sub_21C45962C();
    v21 = sub_21C409744(v16, v17, v22);
    sub_21C459290();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    v18 = sub_21C45962C();
    v21 = sub_21C409744(v18, v19, v22);
    sub_21C459290();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v10, v11, "%s and/or %s cannot be used to create a valid %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v13, -1, -1);
    MEMORY[0x22077C294](v12, -1, -1);
  }

  if (qword_254078E68 != -1)
    swift_once();
}

void sub_21C415C90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[4];

  v2 = sub_21C4595F0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E5528(a1, (uint64_t)v17);
  sub_21C4595CC();
  sub_21C4595D8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_255279EE8 != -1)
    swift_once();
  v6 = sub_21C458D20();
  sub_21C3E2BA0(v6, (uint64_t)qword_25527A260);
  v7 = sub_21C458D08();
  v8 = sub_21C459218();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v17[0] = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_21C45962C();
    v16 = sub_21C409744(v11, v12, v17);
    sub_21C459290();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v13 = sub_21C45962C();
    v16 = sub_21C409744(v13, v14, v17);
    sub_21C459290();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v7, v8, "%s cannot be used to create a valid %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v10, -1, -1);
    MEMORY[0x22077C294](v9, -1, -1);
  }

  if (qword_254078E68 != -1)
    swift_once();
}

uint64_t sub_21C415EDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_21C3E344C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_21C415F20(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21C415F64(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for ContentInfoUtilities()
{
  return &type metadata for ContentInfoUtilities;
}

uint64_t Sequence.compact<A>()()
{
  return sub_21C458FA8();
}

uint64_t sub_21C415FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_21C459278();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

unint64_t sub_21C41604C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21C3E344C(&qword_25527AE08);
  v2 = (_QWORD *)sub_21C459458();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_21C45191C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21C41616C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21C3E344C(&qword_25527ADF0);
  v2 = sub_21C459458();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21C415EDC(v6, (uint64_t)&v15, &qword_25527ADF8);
    v7 = v15;
    v8 = v16;
    result = sub_21C45191C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_21C3E8498(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21C4162A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21C3E344C(&qword_25527ADE0);
  v2 = sub_21C459458();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_21C415EDC(v6, (uint64_t)v15, &qword_25527ADE8);
    result = sub_21C4519C4((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_21C3E8498(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_21C4163E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_21C3E344C(&qword_25527A0A0);
  v2 = (_QWORD *)sub_21C459458();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_21C45191C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MResource.init(with:config:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t ObjectType;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = *(void **)(a2 + 8);
  v8 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships;
  *(_QWORD *)&v2[OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships] = 1;
  v26 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views;
  *(_QWORD *)&v2[OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views] = 1;
  sub_21C40A120();
  v9 = v2;
  swift_bridgeObjectRetain();
  sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v27);
  swift_bridgeObjectRelease();
  if (!v28)
    goto LABEL_8;
  v10 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v10 = v27 & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_8:

    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v27);
  v11 = swift_bridgeObjectRelease();
  if (v28)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(ObjectType + 136))(&v27, v11);
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease();

LABEL_9:
  if (qword_254078E68 != -1)
    swift_once();
  if (qword_255279EF0 != -1)
    swift_once();
  v12 = sub_21C458D20();
  sub_21C3E2BA0(v12, (uint64_t)qword_25527A278);
  swift_bridgeObjectRetain();
  v13 = sub_21C458D08();
  v14 = sub_21C45920C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v25 = v8;
    v16 = swift_slowAlloc();
    v27 = v16;
    *(_DWORD *)v15 = 136315394;
    v24 = v9;
    sub_21C417BA4(ObjectType);
    sub_21C409744(v17, v18, &v27);
    sub_21C459290();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v19 = sub_21C458D80();
    v21 = v20;
    swift_bridgeObjectRelease();
    sub_21C409744(v19, v21, &v27);
    sub_21C459290();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v13, v14, "Invalid data for %s: %s", (uint8_t *)v15, 0x16u);
    v9 = v24;
    swift_arrayDestroy();
    v22 = v16;
    v8 = v25;
    MEMORY[0x22077C294](v22, -1, -1);
    MEMORY[0x22077C294](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_21C403328(*(_QWORD *)&v3[v8]);
  sub_21C403328(*(_QWORD *)&v3[v26]);

  type metadata accessor for MResource();
  swift_deallocPartialClassInstance();
  return 0;
}

void sub_21C416AC4()
{
  sub_21C44FA64(7);
}

void sub_21C416ACC()
{
  sub_21C44F8CC(0);
}

uint64_t sub_21C416AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
  v3 = v2;
  if (v2 == 1)
  {
    sub_21C44F8CC(1);
    if (v4)
    {
      v8 = MEMORY[0x24BEE4B00];
      v5 = MEMORY[0x24BDAC7A8](v4);
      sub_21C417D90(v5, (void (*)(_BYTE *, _BYTE *))sub_21C417C88);
      swift_bridgeObjectRelease();
      v3 = v8;
    }
    else
    {
      v3 = 0;
    }
    v6 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
    sub_21C403328(v6);
  }
  sub_21C403818(v2);
  return v3;
}

uint64_t sub_21C416BAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships) = a1;
  return sub_21C403328(v2);
}

uint64_t (*sub_21C416BC4(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_21C416AD4();
  return sub_21C416BF8;
}

uint64_t sub_21C416BF8(_QWORD *a1, char a2)
{
  return sub_21C416D34(a1, a2, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
}

uint64_t sub_21C416C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
  v3 = v2;
  if (v2 == 1)
  {
    sub_21C44F8CC(2);
    if (v4)
    {
      v8 = MEMORY[0x24BEE4B00];
      v5 = MEMORY[0x24BDAC7A8](v4);
      sub_21C417D90(v5, (void (*)(_BYTE *, _BYTE *))sub_21C4184BC);
      swift_bridgeObjectRelease();
      v3 = v8;
    }
    else
    {
      v3 = 0;
    }
    v6 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain();
    sub_21C403328(v6);
  }
  sub_21C403818(v2);
  return v3;
}

uint64_t sub_21C416CDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views) = a1;
  return sub_21C403328(v2);
}

uint64_t (*sub_21C416CF4(uint64_t *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_21C416C04();
  return sub_21C416D28;
}

uint64_t sub_21C416D28(_QWORD *a1, char a2)
{
  return sub_21C416D34(a1, a2, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
}

uint64_t sub_21C416D34(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + *a3);
  *(_QWORD *)(v3 + *a3) = *a1;
  if ((a2 & 1) == 0)
    return sub_21C403328(v4);
  swift_bridgeObjectRetain();
  sub_21C403328(v4);
  return swift_bridgeObjectRelease();
}

void sub_21C416D84()
{
  sub_21C44F8CC(3);
}

unint64_t sub_21C416D8C()
{
  uint64_t v0;
  unint64_t result;

  result = sub_21C41720C(*(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_data));
  if (!result)
    return sub_21C41616C(MEMORY[0x24BEE4AF8]);
  return result;
}

uint64_t MResource.resources<A>(for:)(void *a1, uint64_t a2)
{
}

{
}

uint64_t type metadata accessor for MResource()
{
  return objc_opt_self();
}

BookFoundation::MResource::Keys_optional __swiftcall MResource.Keys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  BookFoundation::MResource::Keys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t MResource.Keys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C416E88 + 4 * byte_21C45C0D6[*v0]))(0x7475626972747461, 0xEA00000000007365);
}

uint64_t sub_21C416E88()
{
  return 0x6E6F6974616C6572;
}

uint64_t sub_21C416EAC()
{
  return 0x7377656976;
}

uint64_t sub_21C416EC0()
{
  return 1635018093;
}

uint64_t sub_21C416ED0()
{
  return 1701869940;
}

uint64_t sub_21C416EE0()
{
  return 25705;
}

uint64_t sub_21C416EEC()
{
  return 1717924456;
}

unint64_t sub_21C416EFC()
{
  return 0xD000000000000011;
}

void sub_21C416F18(char *a1)
{
  sub_21C3F7268(*a1);
}

void sub_21C416F24()
{
  char *v0;

  sub_21C43260C(0, *v0);
}

void sub_21C416F30(uint64_t a1)
{
  char *v1;

  sub_21C432024(a1, *v1);
}

void sub_21C416F38(uint64_t a1)
{
  char *v1;

  sub_21C43260C(a1, *v1);
}

BookFoundation::MResource::Keys_optional sub_21C416F40(Swift::String *a1)
{
  return MResource.Keys.init(rawValue:)(*a1);
}

uint64_t sub_21C416F4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MResource.Keys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MResource.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MResource.init(with:config:)(a1, a2);
}

void sub_21C416FB0()
{
  sub_21C459404();
  __break(1u);
}

uint64_t MResource.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MResource.href.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_href);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C4170C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  void *v8;
  id v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  sub_21C418474(a1, (uint64_t)v14);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    sub_21C3E5528(a2, (uint64_t)v14);
    sub_21C3E344C(&qword_25527A088);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = *(void **)(a4 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
      LOBYTE(v14[0]) = *(_BYTE *)(a4 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
      v14[1] = v8;
      type metadata accessor for MResourceSet();
      swift_allocObject();
      v9 = v8;
      v10 = MResourceSet.init(with:config:)(v12, (char *)v14);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14[0] = *a3;
      *a3 = 0x8000000000000000;
      sub_21C409E38(v10, v12, v13, isUniquelyReferenced_nonNull_native);
      *a3 = v14[0];
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_21C41720C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_21C3E344C(&qword_25527ADF0);
    v2 = (_QWORD *)sub_21C459458();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        sub_21C4184B0();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_21C418474(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_21C3E5528(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_21C418474((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_21C3FF670((uint64_t)v30, &qword_25527AE00);
      swift_bridgeObjectRelease();
      sub_21C4184B0();
      swift_release();
      return 0;
    }
    sub_21C3E5528((uint64_t)v31 + 8, (uint64_t)v25);
    sub_21C3FF670((uint64_t)v30, &qword_25527AE00);
    sub_21C3E8498(v25, v26);
    v27 = v24;
    sub_21C3E8498(v26, v28);
    v16 = v27;
    sub_21C3E8498(v28, v29);
    sub_21C3E8498(v29, &v27);
    result = sub_21C45191C(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_21C3E2754((uint64_t)v9);
      result = (unint64_t)sub_21C3E8498(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)sub_21C3E8498(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

id MResource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MResource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MResource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MResource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_21C417708@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(*v1 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
  v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t static MResource.from<A>(response:config:)(uint64_t a1, char *a2)
{
  char v3;
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _BYTE *);
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _BYTE v17[8];
  void *v18;
  __int128 v19;
  __int128 v20;

  v3 = *a2;
  v4 = (void *)*((_QWORD *)a2 + 1);
  sub_21C459314();
  if (*(_QWORD *)(a1 + 16) && (v5 = sub_21C4519C4((uint64_t)v17), (v6 & 1) != 0))
  {
    sub_21C3E5528(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v19);
  }
  else
  {
    v19 = 0u;
    v20 = 0u;
  }
  sub_21C3E54B4((uint64_t)v17);
  if (*((_QWORD *)&v20 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      static MResourceType.classType(for:)(1701869940, 0xE400000000000000);
      v8 = v7;
      swift_bridgeObjectRelease();
      if (!v8)
      {
        sub_21C417F38();
        swift_allocError();
        v16 = 0;
        *(_QWORD *)v15 = a1;
        goto LABEL_13;
      }
      v17[0] = v3;
      v18 = v4;
      v9 = *(uint64_t (**)(uint64_t, _BYTE *))(v8 + 128);
      v10 = v4;
      v11 = swift_bridgeObjectRetain();
      v12 = v9(v11, v17);
      if (v12)
      {
        v13 = (void *)v12;
        result = swift_dynamicCastClass();
        if (result)
          return result;

      }
    }
  }
  else
  {
    sub_21C3FF670((uint64_t)&v19, &qword_254078EB8);
  }
  sub_21C417F38();
  swift_allocError();
  *(_QWORD *)v15 = a1;
  v16 = 1;
LABEL_13:
  *(_BYTE *)(v15 + 8) = v16;
  swift_bridgeObjectRetain();
  return swift_willThrow();
}

uint64_t MResource.sparseResources<A>(for:)(void *a1, uint64_t a2)
{
}

{
}

uint64_t sub_21C4178F8(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), const char *a5)
{
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  ObjectType = swift_getObjectType();
  v11 = a3();
  if (v11)
  {
    v12 = v11;
    v13 = sub_21C458E64();
    if (*(_QWORD *)(v12 + 16))
    {
      sub_21C45191C(v13, v14);
      if ((v15 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = a4(a2);
        swift_release();
        return v16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_255279EF0 != -1)
    swift_once();
  v18 = sub_21C458D20();
  sub_21C3E2BA0(v18, (uint64_t)qword_25527A278);
  v19 = a1;
  v20 = sub_21C458D08();
  v21 = sub_21C45920C();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v28 = v23;
    *(_DWORD *)v22 = 136315394;
    v24 = sub_21C458E64();
    sub_21C409744(v24, v25, &v28);
    sub_21C459290();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    sub_21C417BA4(ObjectType);
    sub_21C409744(v26, v27, &v28);
    sub_21C459290();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v20, v21, a5, (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v23, -1, -1);
    MEMORY[0x22077C294](v22, -1, -1);

  }
  else
  {

  }
  return 0;
}

void sub_21C417BA4(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t *__return_ptr))(a1 + 136))(&v1);
  __asm { BR              X10 }
}

unint64_t sub_21C417C00()
{
  return 0xD000000000000011;
}

uint64_t sub_21C417C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_21C4170C4(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_21C417C90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_21C3E344C(&qword_25527A078);
  v3 = (_QWORD *)sub_21C459458();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_21C45189C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain();
    result = sub_21C45189C(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C417D90(uint64_t a1, void (*a2)(_BYTE *, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE v16[40];
  _BYTE v17[32];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_21C418474(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    sub_21C3E5528(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v17);
    a2(v16, v17);
    result = sub_21C3FF670((uint64_t)v16, &qword_25527AE00);
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_21C417F38()
{
  unint64_t result;

  result = qword_25527ADA8;
  if (!qword_25527ADA8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResource.MResourceInstantiationError, &type metadata for MResource.MResourceInstantiationError);
    atomic_store(result, (unint64_t *)&qword_25527ADA8);
  }
  return result;
}

unint64_t sub_21C417F80()
{
  unint64_t result;

  result = qword_25527ADB0;
  if (!qword_25527ADB0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResource.Keys, &type metadata for MResource.Keys);
    atomic_store(result, (unint64_t *)&qword_25527ADB0);
  }
  return result;
}

uint64_t sub_21C417FC4()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_21C417FD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_21C416AD4();
  *a1 = result;
  return result;
}

uint64_t sub_21C417FF8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_21C418038(a1, a2, a3, a4, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___relationships);
}

uint64_t sub_21C418004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_21C416C04();
  *a1 = result;
  return result;
}

uint64_t sub_21C41802C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_21C418038(a1, a2, a3, a4, &OBJC_IVAR____TtC14BookFoundation9MResource____lazy_storage___views);
}

uint64_t sub_21C418038(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*a2 + *a5);
  *(_QWORD *)(*a2 + *a5) = *a1;
  swift_bridgeObjectRetain();
  return sub_21C403328(v5);
}

uint64_t method lookup function for MResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MResource.__allocating_init(with:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static MResource.type.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of MResource.socialHighlightID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MResource.attributes.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of MResource.relationships.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MResource.relationships.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of MResource.relationships.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of MResource.views.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of MResource.views.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of MResource.views.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of MResource.meta.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of MResource.underlyingJSON.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t getEnumTagSinglePayload for MResource.Keys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MResource.Keys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_21C41827C + 4 * byte_21C45C0E9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_21C4182B0 + 4 * byte_21C45C0E4[v4]))();
}

uint64_t sub_21C4182B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4182B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C4182C0);
  return result;
}

uint64_t sub_21C4182CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C4182D4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_21C4182D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4182E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MResource.Keys()
{
  return &type metadata for MResource.Keys;
}

uint64_t initializeBufferWithCopyOfBuffer for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MResource.MResourceInstantiationError()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MResource.MResourceInstantiationError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for MResource.MResourceInstantiationError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MResource.MResourceInstantiationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MResource.MResourceInstantiationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_21C418450(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_21C418458(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MResource.MResourceInstantiationError()
{
  return &type metadata for MResource.MResourceInstantiationError;
}

uint64_t sub_21C418474(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_21C4184B0()
{
  return swift_release();
}

uint64_t FloatingPoint.normalize(from:to:clamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t result;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t TupleTypeMetadata2;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t AssociatedTypeWitness;
  char *v79;
  uint64_t AssociatedConformanceWitness;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);

  LODWORD(AssociatedConformanceWitness) = a3;
  v76 = a2;
  v74 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v68 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v62 - v11;
  v73 = *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8);
  v12 = sub_21C458E28();
  v67 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v62 - v15;
  v16 = *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8);
  v79 = *(char **)(v16 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v71 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v77 = (char *)&v62 - v20;
  v21 = *(_QWORD *)(a4 - 8);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v72 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v81 = (char *)&v62 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v62 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v62 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v62 - v32;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v34(v31, a1, a4);
  v82 = v12;
  v83 = v34;
  v35 = *(int *)(v12 + 36);
  v69 = a1;
  v34(v28, a1 + v35, a4);
  v70 = a5;
  LOBYTE(v12) = sub_21C458E34();
  v62 = v21;
  v36 = *(void (**)(char *, uint64_t))(v21 + 8);
  v36(v28, a4);
  v36(v31, a4);
  v75 = v16;
  if ((v12 & 1) != 0)
  {
    swift_getAssociatedConformanceWitness();
    sub_21C45953C();
    sub_21C4594DC();
  }
  else
  {
    sub_21C459428();
    sub_21C459428();
    sub_21C458DD4();
    v36(v28, a4);
    v36(v31, a4);
  }
  v37 = v33;
  v38 = v83;
  if ((AssociatedConformanceWitness & 1) == 0)
    goto LABEL_7;
  v83(v28, (uint64_t)v33, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_21C45953C();
  v39 = v81;
  sub_21C4594DC();
  sub_21C45953C();
  v40 = v39;
  v41 = v72;
  sub_21C4594DC();
  result = sub_21C458E1C();
  if ((result & 1) != 0)
  {
    v43 = TupleTypeMetadata2;
    v44 = v63;
    v45 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
    AssociatedConformanceWitness = (uint64_t)v37;
    v46 = v41;
    v47 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v47(v63, v40, a4);
    v79 = v31;
    v48 = v45;
    v47(v45, v46, a4);
    v49 = v68;
    v50 = &v68[*(int *)(v43 + 48)];
    v51 = (void (*)(char *, char *, uint64_t))v83;
    v83(v68, (uint64_t)v44, a4);
    v51(v50, v48, a4);
    v52 = v64;
    v47(v64, v49, a4);
    v36(v50, a4);
    v53 = &v49[*(int *)(v43 + 48)];
    v47(v49, v44, a4);
    v54 = v48;
    v31 = v79;
    v47(v53, v54, a4);
    v55 = v82;
    v47(&v52[*(int *)(v82 + 36)], v53, a4);
    v36(v49, a4);
    v57 = (uint64_t)v66;
    v56 = v67;
    v58 = v52;
    v59 = v83;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v58, v55);
    Comparable.clamped(_:)(v57, a4, (uint64_t)v31);
    v60 = v57;
    v37 = (char *)AssociatedConformanceWitness;
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v60, v55);
    v36(v28, a4);
    v36(v37, a4);
    v47(v37, v31, a4);
    v38 = v59;
LABEL_7:
    v38(v31, v76, a4);
    v61 = v81;
    sub_21C459428();
    sub_21C459158();
    v36(v61, a4);
    sub_21C45941C();
    v36(v28, a4);
    v36(v31, a4);
    return ((uint64_t (*)(char *, uint64_t))v36)(v37, a4);
  }
  __break(1u);
  return result;
}

uint64_t sub_21C418B6C(char *a1, char *a2)
{
  return sub_21C3F76CC(*a1, *a2);
}

uint64_t sub_21C418B78()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C418BE8()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C418C34()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C418CA0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_21C418CFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701667182;
  if (*v1)
    v2 = 7107189;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t MAuthor.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MAuthor.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14BookFoundation7MAuthor_url;
  v4 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void *MAuthor.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MAuthor.init(with:config:)(a1, a2);
}

void *MAuthor.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  void *v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  char *v30;
  uint64_t *v31;
  void (*v32)(char *, uint64_t);
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  ObjectType = swift_getObjectType();
  v6 = sub_21C3E344C(&qword_25527A2D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v36) = *a2;
  v13 = (void *)*((_QWORD *)a2 + 1);
  LOBYTE(v39) = 0;
  v14 = v2;
  swift_bridgeObjectRetain();
  v15 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A120();
  sub_21C4340FC(a1, v15, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  v16 = v37;
  if (!v37)
  {

LABEL_10:
    if (qword_254078E68 != -1)
      swift_once();
    if (qword_255279EF0 != -1)
      swift_once();
    v19 = sub_21C458D20();
    sub_21C3E2BA0(v19, (uint64_t)qword_25527A278);
    swift_bridgeObjectRetain();
    v20 = sub_21C458D08();
    v21 = sub_21C45920C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v35 = (char *)v23;
      *(_DWORD *)v22 = 136315394;
      v36 = ObjectType;
      v37 = v23;
      v39 = sub_21C409744(0x73726F68747561, 0xE700000000000000, &v37);
      sub_21C459290();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      v24 = sub_21C458D80();
      v26 = v25;
      swift_bridgeObjectRelease();
      v39 = sub_21C409744(v24, v26, &v37);
      sub_21C459290();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v20, v21, "Missing author data for %s: %s", (uint8_t *)v22, 0x16u);
      v27 = v35;
      swift_arrayDestroy();
      MEMORY[0x22077C294](v27, -1, -1);
      MEMORY[0x22077C294](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_deallocPartialClassInstance();
    return 0;
  }
  v35 = v12;
  LOBYTE(v39) = 0;
  sub_21C4193FC();
  swift_bridgeObjectRetain();
  v17 = ObjectType;
  sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  v18 = v38;
  if (!v38)
  {
    swift_bridgeObjectRelease();

    ObjectType = v17;
    goto LABEL_10;
  }
  v34 = v37;
  LOBYTE(v39) = 1;
  sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  if (!v38)
  {
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  sub_21C458BDC();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();

    sub_21C403A74((uint64_t)v8);
LABEL_9:
    ObjectType = v17;
    goto LABEL_10;
  }
  v30 = v35;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v8, v9);
  v31 = (uint64_t *)&v14[OBJC_IVAR____TtC14BookFoundation7MAuthor_name];
  *v31 = v34;
  v31[1] = v18;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v14[OBJC_IVAR____TtC14BookFoundation7MAuthor_url], v30, v9);

  LOBYTE(v37) = v36;
  v38 = (uint64_t)v13;
  v28 = (void *)MResource.init(with:config:)(a1, (uint64_t)&v37);
  v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33 = v28;
  v32(v30, v9);
  if (v28)

  return v28;
}

void static MAuthor.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21C419324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14BookFoundation7MAuthor_url;
  v2 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id MAuthor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_21C4193FC()
{
  unint64_t result;

  result = qword_25527AE18;
  if (!qword_25527AE18)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45C364, &type metadata for MAuthor.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527AE18);
  }
  return result;
}

uint64_t sub_21C419440()
{
  return type metadata accessor for MAuthor();
}

uint64_t type metadata accessor for MAuthor()
{
  uint64_t result;

  result = qword_25527AE48;
  if (!qword_25527AE48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C419484()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C458BF4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MAuthor.Attributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C419548 + 4 * byte_21C45C2AD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C41957C + 4 * byte_21C45C2A8[v4]))();
}

uint64_t sub_21C41957C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C419584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C41958CLL);
  return result;
}

uint64_t sub_21C419598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C4195A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C4195A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4195AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAuthor.Attributes()
{
  return &type metadata for MAuthor.Attributes;
}

unint64_t sub_21C4195CC()
{
  unint64_t result;

  result = qword_25527AE58;
  if (!qword_25527AE58)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45C33C, &type metadata for MAuthor.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527AE58);
  }
  return result;
}

_QWORD *sub_21C419610()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _OWORD v5[3];
  __int128 v6;
  __int128 v7;
  __int128 v8;

  swift_retain();
  sub_21C4593D4();
  swift_release();
  sub_21C459470();
  if (*((_QWORD *)&v8 + 1))
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5[0] = v6;
      v5[1] = v7;
      v5[2] = v8;
      if (*((_QWORD *)&v6 + 1))
      {
        sub_21C458F00();
        sub_21C458F00();
        sub_21C4593EC();
        sub_21C3E3290((uint64_t)v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v0 = sub_21C3E3180(0, v0[2] + 1, 1, v0);
        v2 = v0[2];
        v1 = v0[3];
        if (v2 >= v1 >> 1)
          v0 = sub_21C3E3180((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
        v0[2] = v2 + 1;
        v3 = &v0[2 * v2];
        v3[4] = 0;
        v3[5] = 0xE000000000000000;
      }
      else
      {
        sub_21C3E3290((uint64_t)v5);
      }
      sub_21C459470();
    }
    while (*((_QWORD *)&v8 + 1));
  }
  else
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_release();
  return v0;
}

uint64_t Date.init(year:month:day:hour:minute:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  uint64_t v31;

  v30[3] = a4;
  v30[4] = a5;
  v30[1] = a2;
  v30[2] = a3;
  v30[0] = a1;
  v31 = a7;
  v8 = sub_21C3E344C(&qword_254078EC0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_21C3E344C(&qword_25527AE68);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_21C3E344C(&qword_25527AE70);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_21C458B70();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_21C458CC0();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v16, 1, 1, v21);
  v23 = sub_21C458CE4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
  sub_21C458B64();
  sub_21C458B34();
  sub_21C458B40();
  sub_21C458B1C();
  sub_21C458B28();
  sub_21C458B58();
  sub_21C458C9C();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a6, v21);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v24 = sub_21C458C60();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1)
  {
    sub_21C3F34B4((uint64_t)v10);
    v26 = 1;
    v27 = v31;
  }
  else
  {
    v28 = v31;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v31, v10, v24);
    v26 = 0;
    v27 = v28;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v27, v26, 1, v24);
}

uint64_t Date.previousDay(calendar:)@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3E27B8(a1);
}

uint64_t Date.isEqual(to:components:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;

  v3 = sub_21C458CB4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_21C458B70();
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C458C90();
  v10 = *(_QWORD *)(a2 + 56);
  v27 = a2 + 56;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v28 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_20;
    }
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v28)
      goto LABEL_23;
    v19 = *(_QWORD *)(v27 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v28)
        goto LABEL_23;
      v19 = *(_QWORD *)(v27 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v28)
          goto LABEL_23;
        v19 = *(_QWORD *)(v27 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_19:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_20:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(a2 + 48) + *(_QWORD *)(v4 + 72) * v17, v3);
    v21 = sub_21C458B4C();
    v23 = v22;
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v24 = 0;
    if ((v23 & 1) != 0 || v21)
      goto LABEL_24;
  }
  v20 = v18 + 3;
  if (v20 >= v28)
  {
LABEL_23:
    v24 = 1;
LABEL_24:
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
    return v24;
  }
  v19 = *(_QWORD *)(v27 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v28)
      goto LABEL_23;
    v19 = *(_QWORD *)(v27 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *MBookSeries.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  uint64_t v6;
  unsigned __int8 v8[8];
  uint64_t v9;

  v5 = objc_allocWithZone(v2);
  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = *(_BYTE *)a2;
  v9 = v6;
  return MSeries.init(with:config:)(a1, v8);
}

void *MBookSeries.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v4[8];
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  v4[0] = *(_BYTE *)a2;
  v5 = v2;
  return MSeries.init(with:config:)(a1, v4);
}

void static MBookSeries.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

id MBookSeries.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_21C419DCC()
{
  return type metadata accessor for MBookSeries();
}

uint64_t type metadata accessor for MBookSeries()
{
  uint64_t result;

  result = qword_25527AEA0;
  if (!qword_25527AEA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C419E10()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_21C419E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];

  v5 = (*(uint64_t (**)(void))(a2 + 32))();
  if (!v5)
    return 0;
  v12[7] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v2;
  AssociatedTypeWitness = (char *)swift_getAssociatedTypeWitness();
  v7 = sub_21C45908C();
  v8 = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v7);
  v10 = sub_21C3F6F8C((void (*)(char *, char *))sub_21C41C9A8, (uint64_t)v12, v7, AssociatedTypeWitness, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t CommonLibrarySeriesInfoEmbedding.hasTooManyNarrators.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = v10[*(int *)(v7 + 100)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t type metadata accessor for CommonLibrarySeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommonLibrarySeriesInfo);
}

uint64_t CommonLibrarySeriesInfoEmbedding.narratorCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 92)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.narratorNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 96)];
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t sub_21C41A208(uint64_t a1, uint64_t a2)
{
  return sub_21C41B70C(a1, a2, &qword_25527A888);
}

uint64_t CommonLibrarySeriesInfoEmbedding.assets.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 60)];
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t sub_21C41A2FC(uint64_t a1, uint64_t a2)
{
  return sub_21C41B738(a1, a2, &qword_25527A888);
}

uint64_t CommonLibrarySeriesInfoEmbedding.authorCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 64)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21C41A3F4(uint64_t a1, uint64_t a2)
{
  return sub_21C41B76C(a1, a2, &qword_25527A888);
}

uint64_t CommonLibrarySeriesInfoEmbedding.authorNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 68)];
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t sub_21C41A4E8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527A888) + 72));
}

uint64_t CommonLibrarySeriesInfoEmbedding.hasTooManyAuthors.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = v10[*(int *)(v7 + 72)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21C41A5EC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527A888) + 80));
}

uint64_t CommonLibrarySeriesInfoEmbedding.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = v10[*(int *)(v7 + 80)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21C41A6F0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527A888) + 84));
}

uint64_t CommonLibrarySeriesInfoEmbedding.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = v10[*(int *)(v7 + 84)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_21C41A7F4(uint64_t a1, uint64_t a2)
{
  return sub_21C41B804(a1, a2, &qword_25527A888);
}

uint64_t sub_21C41A800(uint64_t a1, uint64_t a2)
{
  return sub_21C41B838(a1, a2, &qword_25527A888);
}

uint64_t sub_21C41A80C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527A888) + 100));
}

uint64_t sub_21C41A830@<X0>(uint64_t a1@<X8>)
{
  return sub_21C41B888(&qword_25527A888, a1);
}

uint64_t CommonLibrarySeriesInfoEmbedding.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v13 = &v12[*(int *)(v9 + 88)];
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  LOBYTE(a1) = v13[16];
  v16 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_bridgeObjectRetain();
  result = v16(v12, v9);
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v14;
  *(_BYTE *)(a3 + 16) = a1;
  return result;
}

uint64_t CommonLibrarySeriesInfoEmbedding.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v14 - v9);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *v10;
  v12 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *((_QWORD *)v10 + 2);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.id.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *((_QWORD *)v10 + 3);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t sub_21C41ABF0(uint64_t a1, uint64_t a2)
{
  return sub_21C41B930(a1, a2, &qword_25527A888);
}

uint64_t CommonLibrarySeriesInfoEmbedding.genreNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *(_QWORD *)&v10[*(int *)(v7 + 76)];
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *((_QWORD *)v10 + 5);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.storeID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *((_QWORD *)v10 + 7);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t CommonLibrarySeriesInfoEmbedding.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v11 = *((_QWORD *)v10 + 9);
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  v12(v10, v7);
  return v11;
}

uint64_t sub_21C41AF9C@<X0>(uint64_t a1@<X8>)
{
  return sub_21C41B9B4(&qword_25527A888, a1);
}

uint64_t CommonLibrarySeriesInfoEmbedding.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for CommonLibrarySeriesInfo(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_21C41B098((uint64_t)&v12[*(int *)(v9 + 56)], a3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_21C41B098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CommonLibrarySeriesInfo.assetLogID.getter()
{
  uint64_t v0;

  v0 = sub_21C41BA04();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.collectionMemberships.getter()
{
  sub_21C41BA0C();
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.id.getter()
{
  uint64_t v0;

  v0 = sub_21C41B9FC();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.sortTitle.getter()
{
  uint64_t v0;

  v0 = sub_21C41BA14();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.storeID.getter()
{
  uint64_t v0;

  v0 = sub_21C41BA1C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.title.getter()
{
  uint64_t v0;

  v0 = sub_21C41BA24();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CommonLibrarySeriesInfo.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C41B098(v2 + *(int *)(a1 + 56), a2);
}

uint64_t CommonLibrarySeriesInfo.assets.getter(uint64_t a1)
{
  sub_21C41B9E4(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.authorCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 64));
}

uint64_t CommonLibrarySeriesInfo.authorNames.getter(uint64_t a1)
{
  sub_21C41B9F0(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.hasTooManyAuthors.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 72));
}

uint64_t CommonLibrarySeriesInfo.genreNames.getter(uint64_t a1)
{
  sub_21C41BA2C(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.isExplicit.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t CommonLibrarySeriesInfo.isOrdered.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t CommonLibrarySeriesInfo.mappedSeriesInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 88));
  v5 = *v3;
  v4 = v3[1];
  LOBYTE(v3) = *((_BYTE *)v3 + 16);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = (_BYTE)v3;
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.narratorCount.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 92));
}

uint64_t CommonLibrarySeriesInfo.narratorNames.getter(uint64_t a1)
{
  sub_21C41BA38(a1);
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibrarySeriesInfo.hasTooManyNarrators.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 100));
}

uint64_t CommonLibrarySeriesInfo.init(assetLogID:collectionMemberships:id:sortTitle:storeID:title:url:assets:authorCount:authorNames:hasTooManyAuthors:isExplicit:isOrdered:genreNames:mappedSeriesInfo:narratorCount:narratorNames:hasTooManyNarrators:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, char a18, char a19, uint64_t a20,uint64_t *a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  int *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a21[1];
  v35 = *a21;
  v33 = *((_BYTE *)a21 + 16);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 80) = a11;
  v28 = (int *)type metadata accessor for CommonLibrarySeriesInfo(0, a26, a27, a4);
  result = sub_21C41BA44(a12, a9 + v28[14]);
  *(_QWORD *)(a9 + v28[15]) = a13;
  v30 = a9 + v28[16];
  *(_QWORD *)v30 = a14;
  *(_BYTE *)(v30 + 8) = a15 & 1;
  *(_QWORD *)(a9 + v28[17]) = a16;
  *(_BYTE *)(a9 + v28[18]) = a17;
  *(_BYTE *)(a9 + v28[20]) = a18;
  *(_BYTE *)(a9 + v28[21]) = a19;
  *(_QWORD *)(a9 + v28[19]) = a20;
  v31 = a9 + v28[23];
  *(_QWORD *)v31 = a22;
  *(_BYTE *)(v31 + 8) = a23 & 1;
  *(_QWORD *)(a9 + v28[24]) = a24;
  *(_BYTE *)(a9 + v28[25]) = a25;
  v32 = a9 + v28[22];
  *(_QWORD *)v32 = v35;
  *(_QWORD *)(v32 + 8) = v34;
  *(_BYTE *)(v32 + 16) = v33;
  return result;
}

uint64_t sub_21C41B444(uint64_t a1)
{
  sub_21C41B9E4(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B458(uint64_t a1)
{
  return CommonLibrarySeriesInfo.authorCount.getter(a1);
}

uint64_t sub_21C41B470(uint64_t a1)
{
  sub_21C41B9F0(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B490(uint64_t a1)
{
  return CommonLibrarySeriesInfo.narratorCount.getter(a1);
}

uint64_t sub_21C41B4A8(uint64_t a1)
{
  sub_21C41BA38(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B4C4()
{
  uint64_t v0;

  v0 = sub_21C41BA04();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C41B4F8()
{
  sub_21C41BA0C();
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B50C()
{
  uint64_t v0;

  v0 = sub_21C41B9FC();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C41B540(uint64_t a1)
{
  sub_21C41BA2C(a1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B554()
{
  uint64_t v0;

  v0 = sub_21C41BA14();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C41B588()
{
  uint64_t v0;

  v0 = sub_21C41BA1C();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C41B5BC()
{
  uint64_t v0;

  v0 = sub_21C41BA24();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C41B5F4(uint64_t a1)
{
  MEMORY[0x22077C1E0](&protocol conformance descriptor for CommonLibrarySeriesInfo<A>, a1);
  return ReflectedStringConvertible.description.getter(a1);
}

uint64_t sub_21C41B628@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11[5];

  v11[4] = a3;
  v11[3] = a2;
  v7 = sub_21C3E30F8(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v7, a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LibraryAssetInfo.enriched(with:)((uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness, a4);
  return sub_21C3E2754((uint64_t)v11);
}

uint64_t sub_21C41B700(uint64_t a1, uint64_t a2)
{
  return sub_21C41B70C(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B70C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_21C3E344C(a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B72C(uint64_t a1, uint64_t a2)
{
  return sub_21C41B738(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B738(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return *(_QWORD *)(v3 + *(int *)(sub_21C3E344C(a3) + 64));
}

uint64_t sub_21C41B760(uint64_t a1, uint64_t a2)
{
  return sub_21C41B76C(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B76C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_21C3E344C(a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B78C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 72));
}

uint64_t sub_21C41B7B0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 80));
}

uint64_t sub_21C41B7D4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 84));
}

uint64_t sub_21C41B7F8(uint64_t a1, uint64_t a2)
{
  return sub_21C41B804(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B804(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return *(_QWORD *)(v3 + *(int *)(sub_21C3E344C(a3) + 92));
}

uint64_t sub_21C41B82C(uint64_t a1, uint64_t a2)
{
  return sub_21C41B838(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B838(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_21C3E344C(a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B858()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 100));
}

uint64_t sub_21C41B87C@<X0>(uint64_t a1@<X8>)
{
  return sub_21C41B888(&qword_25527AFA8, a1);
}

uint64_t sub_21C41B888@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v2 + *(int *)(sub_21C3E344C(a1) + 88));
  v6 = *v4;
  v5 = v4[1];
  LOBYTE(v4) = *((_BYTE *)v4 + 16);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = (_BYTE)v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B8C4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C41B8F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B8F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C41B924(uint64_t a1, uint64_t a2)
{
  return sub_21C41B930(a1, a2, &qword_25527AFA8);
}

uint64_t sub_21C41B930(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_21C3E344C(a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C41B950()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C41B97C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C41B9A8@<X0>(uint64_t a1@<X8>)
{
  return sub_21C41B9B4(&qword_25527AFA8, a1);
}

uint64_t sub_21C41B9B4@<X0>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(sub_21C3E344C(a1) + 56);
  return sub_21C41B098(v4, a2);
}

uint64_t sub_21C41B9E4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 60));
}

uint64_t sub_21C41B9F0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 68));
}

uint64_t sub_21C41B9FC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_21C41BA04()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_21C41BA0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_21C41BA14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_21C41BA1C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_21C41BA24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t sub_21C41BA2C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 76));
}

uint64_t sub_21C41BA38(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_21C41BA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A2D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C41BA8C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_21C41BA94(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22077C1E0](&protocol conformance descriptor for CommonLibrarySeriesInfo<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C41BAC0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22077C1E0](&protocol conformance descriptor for CommonLibrarySeriesInfo<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C41BAEC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x22077C1E0](&protocol conformance descriptor for CommonLibrarySeriesInfo<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of LibrarySeriesInfo.assets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.authorCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.authorNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.hasTooManyAuthors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.isOrdered.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.narratorCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.narratorNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.hasTooManyNarrators.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LibrarySeriesInfo.mappedSeriesInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of CommonLibrarySeriesInfoEmbedding.commonInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_21C41BBA8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_21C41BBB0()
{
  unint64_t v0;

  sub_21C41C954();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *sub_21C41BC70(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a3[14];
    v32 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    a1[10] = a2[10];
    v13 = sub_21C458BF4();
    v30 = *(_QWORD *)(v13 - 8);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v31(v32, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v32, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v13);
    }
    v16 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[18];
    *(_QWORD *)((char *)v4 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[20];
    *(_QWORD *)((char *)v4 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[22];
    *((_BYTE *)v4 + a3[21]) = *((_BYTE *)a2 + a3[21]);
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v22[16] = v23[16];
    v25 = a3[23];
    v26 = a3[24];
    v27 = (char *)v4 + v25;
    v28 = (char *)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    *(_QWORD *)((char *)v4 + v26) = *(_QWORD *)((char *)a2 + v26);
    *((_BYTE *)v4 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_21C41BEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 56);
  v5 = sub_21C458BF4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_21C41BF8C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a3[14];
  v30 = (char *)a2 + v11;
  __dst = (char *)a1 + v11;
  a1[10] = a2[10];
  v12 = sub_21C458BF4();
  v28 = *(_QWORD *)(v12 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29(v30, 1, v12))
  {
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(__dst, v30, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v30, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v12);
  }
  v14 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  v18 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v19 = a3[22];
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v20[16] = v21[16];
  v23 = a3[23];
  v24 = a3[24];
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_21C41C1A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[14];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[16];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  v19 = a3[22];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)((char *)a2 + v19);
  *((_QWORD *)v20 + 1) = *(_QWORD *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[16] = v21[16];
  v22 = a3[23];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v25;
  *(_QWORD *)((char *)a1 + a3[24]) = *(_QWORD *)((char *)a2 + a3[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  return a1;
}

uint64_t sub_21C41C474(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[14];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[18];
  *(_QWORD *)(a1 + a3[17]) = *(_QWORD *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_BYTE *)(v18 + 16) = *(_BYTE *)(v19 + 16);
  v20 = a3[23];
  v21 = a3[24];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  return a1;
}

_QWORD *sub_21C41C608(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[14];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_21C458BF4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  v20 = a3[16];
  v21 = a3[17];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRelease();
  v24 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  swift_bridgeObjectRelease();
  v25 = a3[21];
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
  v26 = a3[22];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = *(_QWORD *)((char *)a2 + v26 + 8);
  *(_QWORD *)v27 = *(_QWORD *)((char *)a2 + v26);
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  v27[16] = v28[16];
  v30 = a3[23];
  v31 = a3[24];
  v32 = (char *)a1 + v30;
  v33 = (char *)a2 + v30;
  v32[8] = v33[8];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  return a1;
}

uint64_t sub_21C41C844()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C41C850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21C3E344C(&qword_25527A2D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 56), a2, v8);
  }
}

uint64_t sub_21C41C8D0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C41C8DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_21C3E344C(&qword_25527A2D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 56), a2, a2, v7);
  }
  return result;
}

void sub_21C41C954()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25527AFA0)
  {
    sub_21C458BF4();
    v0 = sub_21C459278();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25527AFA0);
  }
}

uint64_t sub_21C41C9A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_21C41B628(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_21C41C9E0()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C41CA34()
{
  return sub_21C458EC4();
}

uint64_t sub_21C41CA50()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C41CAA0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_21C41CAF0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E756F4365676170;
  a1[1] = 0xE900000000000074;
}

void *MBook.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  uint64_t v6;
  unsigned __int8 v8[8];
  uint64_t v9;

  v5 = objc_allocWithZone(v2);
  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = *(_BYTE *)a2;
  v9 = v6;
  return MAsset.init(with:config:)(a1, v8);
}

void *MBook.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v4[8];
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  v4[0] = *(_BYTE *)a2;
  v5 = v2;
  return MAsset.init(with:config:)(a1, v4);
}

void static MBook.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

id MBook.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MBook.pageCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C41CC5C();
  sub_21C4340FC(v1, MEMORY[0x24BEE1768], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_21C41CC5C()
{
  unint64_t result;

  result = qword_25527AFB0;
  if (!qword_25527AFB0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45C6B4, &type metadata for MBook.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527AFB0);
  }
  return result;
}

uint64_t sub_21C41CCA0()
{
  return type metadata accessor for MBook();
}

uint64_t type metadata accessor for MBook()
{
  uint64_t result;

  result = qword_25527AFE0;
  if (!qword_25527AFE0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C41CCE4()
{
  return swift_updateClassMetadata2();
}

uint64_t storeEnumTagSinglePayload for MBook.Attributes(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21C41CD58 + 4 * byte_21C45C610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21C41CD78 + 4 * byte_21C45C615[v4]))();
}

_BYTE *sub_21C41CD58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21C41CD78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C41CD80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C41CD88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C41CD90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C41CD98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MBook.Attributes()
{
  return &type metadata for MBook.Attributes;
}

unint64_t sub_21C41CDB8()
{
  unint64_t result;

  result = qword_25527AFF0;
  if (!qword_25527AFF0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45C68C, &type metadata for MBook.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527AFF0);
  }
  return result;
}

uint64_t OS_dispatch_group.wait(timeout:timeoutHandler:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;

  sub_21C459224();
  result = sub_21C458D2C();
  if ((result & 1) != 0)
    return a2();
  return result;
}

uint64_t ContentInfo.storeData.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return 0;
    }
    else
    {
      return *(_QWORD *)v10;
    }
  }
  else
  {
    v12 = *(_QWORD *)&v10[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v10, AssociatedTypeWitness);
  }
  return v12;
}

uint64_t ContentInfo.id.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  _QWORD *v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath();
  v5 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v5, a1, a2, (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

uint64_t ContentInfo.libraryData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;

  v22 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {

    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
LABEL_5:
    v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v19(v15, v12, AssociatedTypeWitness);
    v18 = v22;
    v19(v22, v15, AssociatedTypeWitness);
    v17 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v17, 1, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v17 = 1;
  v18 = v22;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v17, 1, AssociatedTypeWitness);
}

void sub_21C41D1A4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  v43 = a5;
  v39 = a1;
  v7 = *a1;
  v36[1] = a2;
  v42 = *(_QWORD *)(v7 + *MEMORY[0x24BEE46A8] + 8);
  v36[0] = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v36 - v8;
  v11 = *v10;
  v14 = *v10;
  v38 = *(_QWORD *)(v12 + v13);
  v16 = type metadata accessor for ContentDataSource(0, v14, v38, v15);
  v37 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (void **)((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v36 - v21;
  v23 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v36 - v24;
  v26 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  v40 = a3;
  v41 = a4;
  v27 = a3;
  v28 = v26;
  v26(v27, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v16);
      v30 = v42;
      goto LABEL_7;
    }
  }
  else
  {

  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v22, v11);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v11);
  v30 = v42;
  v31 = *(_QWORD *)(v42 + 16);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v31) != 1)
  {
    v34 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v43, v9, v31);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
    return;
  }
  (*(void (**)(char *, uint64_t))(v36[0] + 8))(v9, v30);
LABEL_7:
  v28(v40, v41);
  v33 = swift_getEnumCaseMultiPayload();
  if (v33)
  {
    if (v33 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 16) - 8) + 56))(v43, 1, 1);
      (*(void (**)(void **, uint64_t))(v37 + 8))(v19, v16);
      return;
    }
    v35 = *v19;
  }
  else
  {
    v35 = *(void **)((char *)v19 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v23 + 8))(v19, v11);
  }
  v44 = v35;
  swift_getAtKeyPath();

}

void sub_21C41D494(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  int EnumCaseMultiPayload;
  void *v14;
  _QWORD v15[2];

  v15[0] = a4;
  v6 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, *(_QWORD *)(v6 + *MEMORY[0x24BEE46A8]), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (void **)((char *)v15 - v11);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8]
                                                                                           + v6
                                                                                           + 8)
                                                                               + 16)
                                                                   - 8)
                                                       + 56))(v15[0], 1, 1);
      (*(void (**)(void **, uint64_t))(v10 + 8))(v12, v9);
      return;
    }
    v14 = *v12;
  }
  else
  {
    v14 = *(void **)((char *)v12 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v12, AssociatedTypeWitness);
  }
  v15[1] = v14;
  swift_getAtKeyPath();

}

void sub_21C41D61C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int EnumCaseMultiPayload;
  void *v18;
  _QWORD v19[4];

  v19[1] = a1;
  v19[2] = a5;
  v7 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)v19 - v9;
  v14 = type metadata accessor for ContentDataSource(0, v7, *(_QWORD *)(v11 + v12), v13);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (void **)((char *)v19 - v15);
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v8 + 32))(v10, v16, v7);
      swift_getAtKeyPath();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return;
    }
    v18 = *v16;
  }
  else
  {
    v18 = *(void **)((char *)v16 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v8 + 8))(v16, v7);
  }
  v19[3] = v18;
  swift_getAtKeyPath();

}

uint64_t sub_21C41D79C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int EnumCaseMultiPayload;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v23 = a5;
  v21 = a1;
  v7 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v21 - v9;
  v22 = v11;
  v14 = type metadata accessor for ContentDataSource(0, v7, *(_QWORD *)(v11 + v12), v13);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (void **)((char *)&v21 - v15);
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v8 + 32))(v10, v16, v7);
      swift_getAtKeyPath();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    v19 = *v16;
  }
  else
  {
    v19 = *(void **)((char *)v16 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v8 + 8))(v16, v7);
  }
  v24 = v19;
  v20 = v23;
  swift_getAtKeyPath();

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v22 + 8)
                                                                         - 8)
                                                             + 56))(v20, 0, 1);
}

uint64_t ContentInfo.enrichingDataSource(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (_QWORD *)((char *)v24 - v15);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v14, a1, AssociatedTypeWitness);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v14, a2, a3);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v16, v10);
    }
    else
    {
      v22 = *v16;
      v23 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v14, a1, AssociatedTypeWitness);
      *(_QWORD *)&v14[v23] = v22;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v14, a2, a3);
    }
  }
  else
  {
    v19 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    v20 = *(uint64_t *)((char *)v16 + v19);
    v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v14, a1, AssociatedTypeWitness);
    *(_QWORD *)&v14[v19] = v20;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v14, a2, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v21 + 8))(v16, AssociatedTypeWitness);
  }
}

uint64_t ContentInfo.enrichingDataSource(with:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  void *v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  id v25;
  void *v27;
  uint64_t (*v28)(_QWORD *, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v32 = a1;
  v33 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v30 - v7;
  v9 = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v30 - v16;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();

    v21 = v31;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v8, v17, AssociatedTypeWitness);
    v20 = *(int *)(TupleTypeMetadata2 + 48);
    (*(void (**)(_QWORD *, char *, uint64_t))(v21 + 16))(v15, v8, AssociatedTypeWitness);
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v19 = v31;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v8, v17, AssociatedTypeWitness);
    v20 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    v21 = v19;
    (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 16))(v15, v8, AssociatedTypeWitness);
LABEL_5:
    v23 = v32;
    *(_QWORD *)((char *)v15 + v20) = v32;
    swift_storeEnumTagMultiPayload();
    v24 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 48);
    v25 = v23;
    v24(v15, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v8, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  v27 = v32;
  *v15 = v32;
  swift_storeEnumTagMultiPayload();
  v28 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a3 + 48);
  v29 = v27;
  return v28(v15, a2, a3);
}

uint64_t sub_21C41DE1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_21C41DEBC()
{
  return 16;
}

__n128 sub_21C41DEC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t ContentInfo.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  int EnumCaseMultiPayload;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v20 - v6;
  v8 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v8, v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)((char *)&v20 - v11);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v12, AssociatedTypeWitness);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      return v15;
    }
    v16 = *v12;
  }
  else
  {
    v16 = *(void **)((char *)v12 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v5 + 8))(v12, AssociatedTypeWitness);
  }
  type metadata accessor for MAsset();
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v18 = &OBJC_IVAR____TtC14BookFoundation6MAsset_name;
  }
  else
  {
    type metadata accessor for MSeries();
    v17 = swift_dynamicCastClass();
    if (!v17)
    {

      return 0;
    }
    v18 = &OBJC_IVAR____TtC14BookFoundation7MSeries_name;
  }
  v15 = *(_QWORD *)(v17 + *v18);
  swift_bridgeObjectRetain();

  return v15;
}

uint64_t ContentInfo.genres.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  void *v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  uint64_t v25;
  char *v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)&v25 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - v11;
  v13 = swift_getAssociatedTypeWitness();
  v15 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v13, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (void **)((char *)&v25 - v16);
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v8, v17, AssociatedTypeWitness);
      v19 = sub_21C41E6EC();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
    }
    else
    {
      v23 = *v17;
      v19 = sub_21C41E334(*v17);

    }
  }
  else
  {
    v20 = *(void **)((char *)v17 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v12, v17, AssociatedTypeWitness);
    v19 = sub_21C41E334(v20);
    v21 = v26;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v26, v12, AssociatedTypeWitness);
    if (!v19)
      v19 = sub_21C41E6EC();

    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v21, AssociatedTypeWitness);
    v22(v12, AssociatedTypeWitness);
  }
  return v19;
}

uint64_t sub_21C41E334(void *a1)
{
  id v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  type metadata accessor for MAsset();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for MSeries();
    v7 = swift_dynamicCastClass();
    if (!v7)
      return v7;
    v2 = a1;
    v22 = sub_21C3FCCE4(CFSTR("genres"));
    if (v22)
    {
      v4 = v22;
      if (v22 >> 62)
        goto LABEL_31;
      v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v23)
        goto LABEL_18;
      goto LABEL_32;
    }
LABEL_27:

    return 0;
  }
  v2 = a1;
  v3 = sub_21C3FCCE4(CFSTR("genres"));
  if (!v3)
    goto LABEL_27;
  v4 = v3;
  if (v3 >> 62)
  {
    v5 = sub_21C459434();
    if (!v5)
      goto LABEL_32;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
  {
LABEL_32:
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
LABEL_5:
  v49 = MEMORY[0x24BEE4AF8];
  sub_21C3FD4F8(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    v7 = v49;
    v40 = v2;
    v41 = v4 & 0xC000000000000001;
    v43 = v4;
    do
    {
      v8 = v7;
      if (v41)
        v9 = (char *)MEMORY[0x22077BA00](v6, v4);
      else
        v9 = (char *)*(id *)(v4 + 8 * v6 + 32);
      v10 = v9;
      v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
      v47 = *(_QWORD *)&v9[OBJC_IVAR____TtC14BookFoundation9MResource_id];
      v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC14BookFoundation6MGenre_name + 8];
      v45 = *(_QWORD *)&v9[OBJC_IVAR____TtC14BookFoundation6MGenre_name];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = MGenre.parentId.getter();
      v15 = v14;
      v16 = MGenre.parentName.getter();
      v18 = v17;

      v7 = v8;
      v50 = v8;
      v19 = *(_QWORD *)(v8 + 16);
      v20 = *(_QWORD *)(v7 + 24);
      if (v19 >= v20 >> 1)
      {
        sub_21C3FD4F8(v20 > 1, v19 + 1, 1);
        v7 = v50;
      }
      ++v6;
      *(_QWORD *)(v7 + 16) = v19 + 1;
      v21 = (_QWORD *)(v7 + (v19 << 6));
      v21[4] = v47;
      v21[5] = v11;
      v21[6] = v45;
      v21[7] = v12;
      v21[8] = v13;
      v21[9] = v15;
      v21[10] = v16;
      v21[11] = v18;
      v4 = v43;
    }
    while (v5 != v6);
LABEL_26:
    swift_bridgeObjectRelease();

    return v7;
  }
  __break(1u);
LABEL_31:
  v23 = sub_21C459434();
  if (!v23)
    goto LABEL_32;
LABEL_18:
  v40 = v2;
  v51 = MEMORY[0x24BEE4AF8];
  result = sub_21C3FD4F8(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = 0;
    v7 = v51;
    v42 = v4 & 0xC000000000000001;
    v44 = v4;
    do
    {
      v26 = v7;
      if (v42)
        v27 = (char *)MEMORY[0x22077BA00](v25, v4);
      else
        v27 = (char *)*(id *)(v4 + 8 * v25 + 32);
      v28 = v27;
      v29 = *(_QWORD *)&v27[OBJC_IVAR____TtC14BookFoundation9MResource_id + 8];
      v48 = *(_QWORD *)&v27[OBJC_IVAR____TtC14BookFoundation9MResource_id];
      v30 = *(_QWORD *)&v27[OBJC_IVAR____TtC14BookFoundation6MGenre_name + 8];
      v46 = *(_QWORD *)&v27[OBJC_IVAR____TtC14BookFoundation6MGenre_name];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31 = MGenre.parentId.getter();
      v33 = v32;
      v34 = MGenre.parentName.getter();
      v36 = v35;

      v7 = v26;
      v52 = v26;
      v37 = *(_QWORD *)(v26 + 16);
      v38 = *(_QWORD *)(v7 + 24);
      if (v37 >= v38 >> 1)
      {
        sub_21C3FD4F8(v38 > 1, v37 + 1, 1);
        v7 = v52;
      }
      ++v25;
      *(_QWORD *)(v7 + 16) = v37 + 1;
      v39 = (_QWORD *)(v7 + (v37 << 6));
      v39[4] = v48;
      v39[5] = v29;
      v39[6] = v46;
      v39[7] = v30;
      v39[8] = v31;
      v39[9] = v33;
      v39[10] = v34;
      v39[11] = v36;
      v4 = v44;
    }
    while (v23 != v25);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_21C41E6EC()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  v2 = swift_checkMetadataState();
  v3 = v1(v2, AssociatedConformanceWitness);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_21C3FD4F8(0, v5, 0);
    v6 = v14;
    v7 = (uint64_t *)(v4 + 40);
    do
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      v10 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v11 >> 1)
        sub_21C3FD4F8(v11 > 1, v10 + 1, 1);
      v7 += 2;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v12 = v14 + (v10 << 6);
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = v9;
      *(_QWORD *)(v12 + 56) = v8;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t dispatch thunk of ContentInfo.dataSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ContentInfo.init(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_21C41E874@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  int EnumCaseMultiPayload;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a4;
  v6 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, *(_QWORD *)(v6 + *MEMORY[0x24BEE46A8]), v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (void **)((char *)v17 - v11);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v6 + 8) - 8)
                                                       + 56))(v17[0], 1, 1);
      return (*(uint64_t (**)(void **, uint64_t))(v10 + 8))(v12, v9);
    }
    v15 = *v12;
  }
  else
  {
    v15 = *(void **)((char *)v12 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v12, AssociatedTypeWitness);
  }
  v17[1] = v15;
  v16 = v17[0];
  swift_getAtKeyPath();

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v6 + 8)
                                                                         - 8)
                                                             + 56))(v16, 0, 1);
}

uint64_t sub_21C41EA28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void (*v23)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v44 = a5;
  v38 = a2;
  v8 = *(_QWORD *)(*a2 + *MEMORY[0x24BEE46A8]);
  v43 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v35 - v10;
  v45 = *(_QWORD *)(v11 + v12 + 8);
  v36 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v35 - v13;
  v40 = *v15;
  v17 = type metadata accessor for ContentDataSource(0, v8, v40, v16);
  v39 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (void **)((char *)&v35 - v21);
  v23 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
  v41 = a3;
  v42 = v5;
  v23(a3, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v39 + 8))(v22, v17);
      v25 = v44;
      v26 = v45;
      goto LABEL_8;
    }
    v27 = v44;
    v28 = *v22;
  }
  else
  {
    v27 = v44;
    v28 = *(void **)((char *)v22 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(v43 + 8))(v22, v8);
  }
  v46 = v28;
  swift_getAtKeyPath();

  v26 = v45;
  v29 = *(_QWORD *)(v45 + 16);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v14, 1, v29) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v27, v14, v29);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v26);
  v25 = v27;
LABEL_8:
  v23(v41, a4);
  v31 = swift_getEnumCaseMultiPayload();
  if (v31)
  {
    if (v31 != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 16) - 8) + 56))(v25, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v20, v17);
    }
  }
  else
  {

  }
  v33 = v43;
  v34 = v37;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v37, v20, v8);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v8);
}

uint64_t sub_21C41ED30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v22 = a1;
  v23 = a4;
  v6 = *MEMORY[0x24BEE46A8];
  v21 = *a1;
  v7 = *(_QWORD *)(v21 + v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, v7, AssociatedTypeWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v20 - v16;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8]
                                                                                            + v21
                                                                                            + 8)
                                                                                + 16)
                                                                    - 8)
                                                        + 56))(v23, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  else
  {

  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v7);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v7);
}

uint64_t sub_21C41EEE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int EnumCaseMultiPayload;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = a4;
  v21[1] = a1;
  v6 = *MEMORY[0x24BEE46A8];
  v22 = *a1;
  v7 = *(_QWORD *)(v22 + v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, v7, AssociatedTypeWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v21 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)v21 - v16;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v22 + 8) - 8)
                                                        + 56))(v23, 1, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  else
  {

  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v7);
  v20 = v23;
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x24BEE46A8] + v22 + 8)
                                                                         - 8)
                                                             + 56))(v20, 0, 1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSManagedObjectContext.executeAndMergeChanges(using:)(NSBatchDeleteRequest using)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v2 = v1;
  v21 = *MEMORY[0x24BDAC8D0];
  -[objc_class setResultType:](using.super.super.isa, sel_setResultType_, 1);
  *(_QWORD *)&v19 = 0;
  v4 = objc_msgSend(v2, sel_executeRequest_error_, using.super.super.isa, &v19);
  v5 = (void *)v19;
  if (!v4)
  {
    v9 = (id)v19;
    sub_21C458B7C();

    swift_willThrow();
    return;
  }
  v6 = v4;
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  v8 = v5;
  if (!v7)

  sub_21C3E344C(&qword_25527AFF8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21C45A5D0;
  *(_QWORD *)&v19 = sub_21C458E64();
  *((_QWORD *)&v19 + 1) = v11;
  sub_21C459314();
  if (!v7)
  {
    v19 = 0u;
    v20 = 0u;
LABEL_15:
    sub_21C3E54E8((uint64_t)&v19);
    goto LABEL_16;
  }
  if (objc_msgSend(v7, sel_result))
  {
    sub_21C4592CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_21C41F3FC((uint64_t)v18, (uint64_t)&v19);
  if (!*((_QWORD *)&v20 + 1))
    goto LABEL_15;
  sub_21C3E344C(&qword_25527B000);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    *(_QWORD *)(inited + 96) = sub_21C3E344C(&qword_25527B000);
LABEL_17:
    v12 = MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v12 = *(_QWORD *)&v18[0];
  *(_QWORD *)(inited + 96) = sub_21C3E344C(&qword_25527B000);
  if (!v12)
    goto LABEL_17;
LABEL_18:
  *(_QWORD *)(inited + 72) = v12;
  sub_21C4162A0(inited);
  v13 = (void *)objc_opt_self();
  v14 = (void *)sub_21C458D68();
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527A868);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21C45B9F0;
  *(_QWORD *)(v15 + 32) = v2;
  *(_QWORD *)&v19 = v15;
  sub_21C459038();
  sub_21C41F3C0();
  v16 = v2;
  v17 = (void *)sub_21C459020();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_mergeChangesFromRemoteContextSave_intoContexts_, v14, v17);

}

unint64_t sub_21C41F3C0()
{
  unint64_t result;

  result = qword_25527B008;
  if (!qword_25527B008)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25527B008);
  }
  return result;
}

uint64_t sub_21C41F3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_254078EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of LibraryContentInfo.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LibraryContentInfo.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LibraryContentInfo.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibraryContentInfo.genreNames.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibraryContentInfo.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibraryContentInfo.storeID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibraryContentInfo.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibraryContentInfo.url.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t AssetInfo.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;

  AssetInfo.seriesOrdering.getter(a1, a2, (char *)&v8);
  if (v8 != 2)
    return 0;
  MEMORY[0x24BDAC7A8](v4);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v6 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v6, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v8);
  swift_release();
  swift_release();
  return v8;
}

uint64_t AssetInfo.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C42073C(a1, a2, (uint64_t)&unk_21C45C838, (void (*)(uint64_t *__return_ptr))sub_21C41ED30);
}

uint64_t AssetInfo.releaseDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath;
  _QWORD *v7;

  KeyPath = swift_getKeyPath();
  v7 = (_QWORD *)swift_getKeyPath();
  sub_21C41EA28(KeyPath, v7, a1, *(_QWORD *)(a2 + 8), a3);
  swift_release();
  return swift_release();
}

uint64_t AssetInfo.title.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C41F664(a1, a2);
}

uint64_t AssetInfo.author.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C41F664(a1, a2);
}

uint64_t sub_21C41F664(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  _QWORD *v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath();
  v5 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v5, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v7);
  swift_release();
  swift_release();
  return v7;
}

BOOL static ContentKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ContentKind.hash(into:)()
{
  return sub_21C4595A8();
}

BOOL static AssetType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t AssetType.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t AssetType.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

BOOL static FinishedDateKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FinishedDateKind.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t FinishedDateKind.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t sub_21C41F83C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t AssetInfo.bookWorkTitle.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

uint64_t AssetInfo.bookWorkAuthorName.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

uint64_t AssetInfo.authors.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int EnumCaseMultiPayload;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (void **)((char *)&v36 - v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(a1, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v8 + 8))(v10, v7);
      return 0;
    }
    v12 = *v10;
  }
  else
  {
    v12 = *(void **)((char *)v10 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v10, AssociatedTypeWitness);
  }
  v13 = sub_21C3FCCD8(CFSTR("authors"));

  if (!v13)
    return 0;
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_9;
LABEL_23:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v14 = sub_21C459434();
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_23;
LABEL_9:
  v37 = MEMORY[0x24BEE4AF8];
  result = sub_21C3FD514(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v37;
    if ((v13 & 0xC000000000000001) != 0)
    {
      v17 = 0;
      do
      {
        v18 = MEMORY[0x22077BA00](v17, v13);
        v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
        v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC14BookFoundation9MResource_id + 8);
        v22 = *(_QWORD *)(v18 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
        v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        v37 = v16;
        v24 = *(_QWORD *)(v16 + 16);
        v23 = *(_QWORD *)(v16 + 24);
        if (v24 >= v23 >> 1)
        {
          sub_21C3FD514(v23 > 1, v24 + 1, 1);
          v16 = v37;
        }
        ++v17;
        *(_QWORD *)(v16 + 16) = v24 + 1;
        v25 = (_QWORD *)(v16 + 32 * v24);
        v25[4] = v20;
        v25[5] = v19;
        v25[6] = v22;
        v25[7] = v21;
      }
      while (v14 != v17);
    }
    else
    {
      v26 = (_QWORD *)(v13 + 32);
      v36 = v13;
      do
      {
        v27 = (uint64_t *)(*v26 + OBJC_IVAR____TtC14BookFoundation9MResource_id);
        v29 = *v27;
        v28 = v27[1];
        v30 = (uint64_t *)(*v26 + OBJC_IVAR____TtC14BookFoundation7MAuthor_name);
        v32 = *v30;
        v31 = v30[1];
        v37 = v16;
        v34 = *(_QWORD *)(v16 + 16);
        v33 = *(_QWORD *)(v16 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34 >= v33 >> 1)
        {
          sub_21C3FD514(v33 > 1, v34 + 1, 1);
          v16 = v37;
        }
        *(_QWORD *)(v16 + 16) = v34 + 1;
        v35 = (_QWORD *)(v16 + 32 * v34);
        v35[4] = v29;
        v35[5] = v28;
        v35[6] = v32;
        v35[7] = v31;
        ++v26;
        --v14;
      }
      while (v14);
    }
    swift_bridgeObjectRelease();
    return v16;
  }
  __break(1u);
  return result;
}

uint64_t AssetInfo.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;

  KeyPath = (uint64_t *)swift_getKeyPath();
  v5 = *(_QWORD *)(a2 + 8);
  sub_21C41D494(KeyPath, a1, v5, (uint64_t)&v9);
  result = swift_release();
  if ((v10 & 1) != 0
    || (MEMORY[0x24BDAC7A8](result),
        v7 = (uint64_t *)swift_getKeyPath(),
        sub_21C41D494(v7, a1, v5, (uint64_t)&v9),
        result = swift_release(),
        (v10 & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](result);
    v8 = (_QWORD *)swift_getKeyPath();
    sub_21C41ED30(v8, a1, v5, (uint64_t)&v9);
    result = swift_release();
    if ((v10 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  }
  return result;
}

uint64_t sub_21C41FD98@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  char v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t AssetInfo.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C41F664(a1, a2);
}

uint64_t sub_21C41FE50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t AssetInfo.dateFinished.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C421850(a1, a2, (uint64_t)&unk_21C45CAF0, (void (*)(uint64_t, uint64_t))sub_21C41ED30);
}

uint64_t sub_21C41FF00()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.duration.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C42073C(a1, a2, (uint64_t)&unk_21C45CB20, (void (*)(uint64_t *__return_ptr))sub_21C41D494);
}

uint64_t AssetInfo.editionKind.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

uint64_t AssetInfo.expectedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C421850(a1, a2, (uint64_t)&unk_21C45CBA8, (void (*)(uint64_t, uint64_t))sub_21C41D494);
}

uint64_t AssetInfo.featuredEditions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  int EnumCaseMultiPayload;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v3 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v5, v6);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (void **)((char *)&v31 - v9);
  (*(void (**)(uint64_t, uint64_t))(v3 + 40))(a1, v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(void **, uint64_t))(v8 + 8))(v10, v7);
      return 0;
    }
    v12 = *v10;
  }
  else
  {
    v12 = *(void **)((char *)v10 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(void **, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v10, AssociatedTypeWitness);
  }
  v13 = sub_21C3FCCCC(CFSTR("featured-editions"));

  if (!v13)
    return 0;
  if (!(v13 >> 62))
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_9;
LABEL_30:
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v17;
  }
  swift_bridgeObjectRetain();
  result = sub_21C459434();
  v14 = result;
  if (!result)
    goto LABEL_30;
LABEL_9:
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v18 = (v13 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x22077BA00](v16, v13)
          : *(id *)(v13 + 8 * v16 + 32);
      v19 = v18;
      type metadata accessor for MBook();
      v20 = swift_dynamicCastClass();
      if (v20)
        break;
      type metadata accessor for MAudiobook();
      v25 = swift_dynamicCastClass();
      if (v25)
      {
        v26 = v25;
        v27 = type metadata accessor for AudiobookInfo();
        *((_QWORD *)&v32 + 1) = v27;
        v33 = sub_21C3E871C(&qword_25527A388, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
        v23 = sub_21C3E30F8((uint64_t *)&v31);
        *v23 = v26;
        sub_21C3E344C(&qword_25527A390);
        swift_storeEnumTagMultiPayload();
        *((_BYTE *)v23 + *(int *)(v27 + 20)) = 0;
        v24 = (int *)(v27 + 24);
        goto LABEL_18;
      }
      v35 = type metadata accessor for MAsset();
      *(_QWORD *)&v34 = v19;
      sub_21C3E344C(&qword_25527A240);
      v30 = v19;
      sub_21C415C90((uint64_t)&v34);
      sub_21C3E2754((uint64_t)&v34);
      v31 = 0u;
      v32 = 0u;
      v33 = 0;

      if (*((_QWORD *)&v32 + 1))
        goto LABEL_19;
      sub_21C3FF670((uint64_t)&v31, &qword_25527A380);
LABEL_24:
      if (v14 == ++v16)
        goto LABEL_31;
    }
    v21 = v20;
    v22 = type metadata accessor for BookInfo();
    *((_QWORD *)&v32 + 1) = v22;
    v33 = sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
    v23 = sub_21C3E30F8((uint64_t *)&v31);
    *v23 = v21;
    sub_21C3E344C(&qword_25527A3A0);
    swift_storeEnumTagMultiPayload();
    v24 = (int *)(v22 + 20);
LABEL_18:
    *((_BYTE *)v23 + *v24) = 1;
LABEL_19:
    sub_21C3F349C(&v31, (uint64_t)&v34);
    sub_21C3F349C(&v34, (uint64_t)&v31);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_21C3FD27C(0, v17[2] + 1, 1, v17);
    v29 = v17[2];
    v28 = v17[3];
    if (v29 >= v28 >> 1)
      v17 = sub_21C3FD27C((_QWORD *)(v28 > 1), v29 + 1, 1, v17);
    v17[2] = v29 + 1;
    sub_21C3F349C(&v31, (uint64_t)&v17[5 * v29 + 4]);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t AssetInfo.finishedDateKind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *KeyPath;

  KeyPath = (_QWORD *)swift_getKeyPath();
  sub_21C41ED30(KeyPath, a1, *(_QWORD *)(a2 + 8), a3);
  return swift_release();
}

_QWORD *sub_21C420448@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v4 = swift_checkMetadataState();
  result = v3(&v6, v4, AssociatedConformanceWitness);
  *a1 = v6;
  return result;
}

uint64_t AssetInfo.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C420500@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C3FB88C(a1, a2);
}

uint64_t sub_21C4205B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 88);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isFinished.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C420660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isFree.getter(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  char v3;

  v2 = (AssetInfo.price.getter(a1, a2) & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if ((v3 & 1) != 0)
    return 2;
  else
    return v2;
}

uint64_t AssetInfo.price.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C42073C(a1, a2, (uint64_t)&unk_21C45CCD8, (void (*)(uint64_t *__return_ptr))sub_21C41D494);
}

uint64_t sub_21C42073C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v6;

  swift_getKeyPath();
  a4(&v6);
  swift_release();
  return v6;
}

uint64_t AssetInfo.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C4207B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C420864@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C3FB88C(a1, a2);
}

uint64_t sub_21C420918@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C4209C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C420A70(a1, a2);
}

uint64_t sub_21C420A70(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  unsigned __int8 v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41EEE0(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

uint64_t sub_21C420AD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result & 1;
  return result;
}

uint64_t AssetInfo.lastEngagedDate.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C421850(a1, a2, (uint64_t)&unk_21C45CE38, (void (*)(uint64_t, uint64_t))sub_21C41ED30);
}

uint64_t sub_21C420B84()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 168);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.publisherName.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

uint64_t AssetInfo.priceFormatted.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

double AssetInfo.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  double result;
  double v6;
  char v7;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41EEE0(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  result = v6;
  if (v7)
    return 0.0;
  return result;
}

void sub_21C420CAC(double *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  double (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 184);
  v4 = swift_checkMetadataState();
  *a1 = v3(v4, AssociatedConformanceWitness);
}

uint64_t sub_21C420D48@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    sub_21C458C54();

    v6 = sub_21C458C60();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 0;
  }
  else
  {
    v6 = sub_21C458C60();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    v8 = a3;
    v9 = 1;
  }
  return v7(v8, v9, 1, v6);
}

uint64_t sub_21C420DC8()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 192);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t AssetInfo.supportsUnifiedProductPage.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  char v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41E874(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6 & 1;
}

uint64_t AssetInfo.serverArtworkResponse.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C42127C(a1, a2);
}

void AssetInfo.seriesOrdering.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD **v16;
  void (*v17)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  _QWORD *v19;
  uint64_t (*v20)(void);
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v37 = a3;
  v33[1] = a2;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v34 = (char *)v33 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (_QWORD **)((char *)v33 - v15);
  v17 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
  v35 = v3;
  v17(a1, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD **, uint64_t))(v11 + 8))(v16, v10);
      goto LABEL_11;
    }
    v19 = *v16;
  }
  else
  {
    v19 = *(_QWORD **)((char *)v16 + *(int *)(swift_getTupleTypeMetadata2() + 48));
    (*(void (**)(_QWORD **, uint64_t))(v36 + 8))(v16, AssociatedTypeWitness);
  }
  v20 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v19) + 0x140);
  v21 = v19;
  v22 = v20();

  swift_bridgeObjectRelease();
  if (!v22)
  {
    type metadata accessor for MBook();
    if (swift_dynamicCastClass())
    {

LABEL_24:
      v25 = 1;
LABEL_25:
      *v37 = v25;
      return;
    }
  }
  v23 = (unsigned __int8 *)MAsset.seriesResource.getter();

  if (v23)
  {
    v24 = v23[OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered];

    if (v24)
      v25 = 2;
    else
      v25 = 3;
    goto LABEL_25;
  }
LABEL_11:
  v17(a1, v5);
  v26 = swift_getEnumCaseMultiPayload();
  if (v26)
  {
    if (v26 != 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_27:
      *v37 = 0;
      return;
    }
  }
  else
  {

  }
  v27 = v36;
  v28 = v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v34, v14, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120))(AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, AssociatedTypeWitness);
    goto LABEL_24;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 216))(&v38, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, AssociatedTypeWitness);
  if (!v39)
  {
    sub_21C3FF670((uint64_t)&v38, &qword_25527A2A8);
    goto LABEL_27;
  }
  sub_21C3F349C(&v38, (uint64_t)v40);
  v30 = v41;
  v31 = v42;
  sub_21C3E359C(v40, v41);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v31 + 72))(v30, v31) & 1) != 0)
    v32 = 2;
  else
    v32 = 3;
  *v37 = v32;
  sub_21C3E2754((uint64_t)v40);
}

uint64_t AssetInfo.serverData.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C42127C(a1, a2);
}

uint64_t sub_21C42127C(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41E874(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

uint64_t AssetInfo.seriesName.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C41F664(a1, a2);
}

uint64_t sub_21C4212F0()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 216);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t sub_21C42138C(uint64_t a1)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v2)(_BYTE *, uint64_t, uint64_t);
  uint64_t v3;
  _BYTE v5[40];

  sub_21C3F43D0(a1, (uint64_t)v5);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v2 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(AssociatedConformanceWitness + 224);
  v3 = swift_checkMetadataState();
  return v2(v5, v3, AssociatedConformanceWitness);
}

uint64_t AssetInfo.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v8;

  AssetInfo.seriesOrdering.getter(a1, a2, (char *)&v8);
  if (v8 != 2)
    return 0;
  MEMORY[0x24BDAC7A8](v4);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v6 = (_QWORD *)swift_getKeyPath();
  sub_21C41D61C(KeyPath, v6, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v8);
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_21C421524@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 200);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_21C4215C0@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x140))();
  v4 = sub_21C40A46C(1, v3);
  v6 = v5;
  v8 = v7;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 20) = BYTE4(v8) & 1;
  return result;
}

uint64_t sub_21C421644()
{
  return 16;
}

__n128 sub_21C421650(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C42165C@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  char v8;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 208);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 20) = v8 & 1;
  return result;
}

uint64_t sub_21C421708()
{
  return 16;
}

__n128 sub_21C421714(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C421720@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  char v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 240);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t sub_21C4217C8()
{
  return 16;
}

__n128 sub_21C4217D4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C4217E0()
{
  return sel_releaseDate;
}

uint64_t sub_21C4217EC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C420D48(a1, (SEL *)&selRef_releaseDate, a2);
}

uint64_t sub_21C421808()
{
  return 16;
}

__n128 sub_21C421814(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C421824()
{
  return 16;
}

__n128 sub_21C421830(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AssetInfo.sharableURL.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C421850(a1, a2, (uint64_t)&unk_21C45D0C0, (void (*)(uint64_t, uint64_t))sub_21C41E874);
}

uint64_t sub_21C421850(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath();
  a4(KeyPath, a1);
  return swift_release();
}

uint64_t sub_21C4218BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v4 = swift_checkMetadataState();
  result = v3(v4, AssociatedConformanceWitness);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_21C421960()
{
  return 16;
}

__n128 sub_21C42196C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C42197C()
{
  return 16;
}

__n128 sub_21C421988(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C421994@<X0>(uint64_t *a1@<X8>)
{
  return sub_21C4229C0(MAsset.bookWorkTitle.getter, a1);
}

uint64_t sub_21C4219A0()
{
  return 16;
}

__n128 sub_21C4219AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4219B8@<X0>(uint64_t *a1@<X8>)
{
  return sub_21C4229C0(MAsset.bookWorkAuthorName.getter, a1);
}

uint64_t sub_21C4219C4()
{
  return 16;
}

__n128 sub_21C4219D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AssetInfo.standardDescription.getter(uint64_t a1, uint64_t a2)
{
  return sub_21C4219E8(a1, a2);
}

uint64_t sub_21C4219E8(uint64_t a1, uint64_t a2)
{
  uint64_t *KeyPath;
  uint64_t v6;

  KeyPath = (uint64_t *)swift_getKeyPath();
  sub_21C41D494(KeyPath, a1, *(_QWORD *)(a2 + 8), (uint64_t)&v6);
  swift_release();
  return v6;
}

void sub_21C421A48(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = sub_21C458E64();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

uint64_t AssetInfo.enrich(with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void **v34;
  void (*v35)(uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  char *v46;
  id v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  char *v63;
  double v64;
  uint64_t v65;
  void (**v66)(char *, uint64_t);
  uint64_t v67;
  __int128 *v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  void (*v115)(uint64_t, uint64_t);
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  __int128 *v126;
  uint64_t *v127;
  void (*v128)(uint64_t, uint64_t);
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (**v137)(char *, uint64_t);
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149[3];
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  uint64_t AssociatedConformanceWitness;
  _BYTE v155[24];
  uint64_t v156;

  v145 = a1;
  v147 = (uint64_t *)a3;
  v143 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v135 = (char *)&v133 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v136 = (char *)&v133 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v137 = (void (**)(char *, uint64_t))((char *)&v133 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v133 - v11;
  v142 = v13;
  v14 = *(_QWORD *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v144 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v133 = (uint64_t)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v138 = (char *)&v133 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v134 = (uint64_t)&v133 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v139 = (char *)&v133 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v133 - v24;
  v26 = AssociatedTypeWitness;
  v140 = swift_getAssociatedTypeWitness();
  v28 = type metadata accessor for ContentDataSource(0, AssociatedTypeWitness, v140, v27);
  v29 = *(void (***)(char *, uint64_t))(v28 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (void **)((char *)&v133 - v33);
  v35 = *(void (**)(uint64_t, uint64_t))(v14 + 40);
  v148 = v3;
  v146 = a2;
  v141 = v35;
  v35(a2, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v137 = v29;
      v29[1]((char *)v34, v28);
      v37 = v146;
      v38 = v26;
LABEL_4:
      v39 = v144;
LABEL_18:
      v69 = v147;
      goto LABEL_19;
    }
    v57 = *v34;
    v58 = v145[3];
    v59 = v145[4];
    sub_21C3E359C(v145, v58);
    v60 = ContentInfo.storeData.getter(v58, *(_QWORD *)(v59 + 8));
    if (!v60)
    {
      v137 = v29;

      v37 = v146;
      v69 = v147;
      v38 = v26;
      v39 = v144;
LABEL_19:
      v141(v37, v14);
      v70 = swift_getEnumCaseMultiPayload();
      if (v70)
      {
        if (v70 != 1)
        {
          v137[1](v32, v28);
          goto LABEL_27;
        }
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v138, v32, v38);
        v71 = v145[3];
        v72 = v145[4];
        sub_21C3E359C(v145, v71);
        v73 = v38;
        v74 = *(_QWORD *)(v72 + 8);
        v75 = swift_getAssociatedTypeWitness();
        v76 = sub_21C459278();
        v77 = *(_QWORD *)(v76 - 8);
        MEMORY[0x24BDAC7A8](v76);
        v79 = (char *)&v133 - v78;
        ContentInfo.libraryData.getter(v71, v74, (char *)&v133 - v78);
        v80 = *(_QWORD *)(v75 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v79, 1, v75) == 1)
        {
          (*(void (**)(char *, uint64_t))(v77 + 8))(v79, v76);
          (*(void (**)(char *, uint64_t))(v144 + 8))(v138, v73);
LABEL_25:
          v37 = v146;
          v69 = v147;
LABEL_27:
          v91 = v143;
          v92 = v142;
          v69[3] = v37;
          v69[4] = v92;
          v93 = sub_21C3E30F8(v69);
          return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v91 + 16))(v93, v148, v37);
        }
        v153 = v75;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v95 = sub_21C3E30F8((uint64_t *)&v152);
        (*(void (**)(uint64_t *, char *, uint64_t))(v80 + 32))(v95, v79, v75);
        sub_21C3F349C(&v152, (uint64_t)v155);
        v96 = v142;
        v97 = v146;
        v98 = swift_getAssociatedConformanceWitness();
        v99 = v133;
        v100 = v138;
        LibraryAssetInfo.enriched(with:)((uint64_t)v155, v73, v98, v133);
        v150 = v73;
        v151 = v98;
        v101 = sub_21C3E30F8(v149);
        v102 = v144;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v144 + 16))(v101, v99, v73);
        static ContentInfoUtilities.assetInfo(libraryAssetInfo:)(v149, (uint64_t)&v152);
        sub_21C3E2754((uint64_t)v149);
        v103 = v143;
        v104 = v135;
        (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v135, v148, v97);
        v105 = v147;
        if (v153)
        {
          (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v97);
          v106 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
          v106(v99, v73);
          sub_21C3E2754((uint64_t)v155);
          v106((uint64_t)v100, v73);
          return sub_21C3F349C(&v152, (uint64_t)v105);
        }
        v147[3] = v97;
        v105[4] = v96;
        v127 = sub_21C3E30F8(v105);
        (*(void (**)(uint64_t *, char *, uint64_t))(v103 + 32))(v127, v104, v97);
        v128 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        v128(v99, v73);
        sub_21C3E2754((uint64_t)v155);
        v129 = v100;
        v130 = v73;
        goto LABEL_39;
      }
      v141 = *(void (**)(uint64_t, uint64_t))&v32[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v139, v32, v38);
      v81 = v145[3];
      v82 = v145[4];
      sub_21C3E359C(v145, v81);
      v83 = *(_QWORD *)(v82 + 8);
      v84 = swift_getAssociatedTypeWitness();
      v85 = v38;
      v86 = sub_21C459278();
      v145 = &v133;
      v87 = *(_QWORD *)(v86 - 8);
      MEMORY[0x24BDAC7A8](v86);
      v89 = (char *)&v133 - v88;
      ContentInfo.libraryData.getter(v81, v83, (char *)&v133 - v88);
      v90 = *(_QWORD *)(v84 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v89, 1, v84) == 1)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v86);

        (*(void (**)(char *, uint64_t))(v39 + 8))(v139, v85);
        goto LABEL_25;
      }
      v153 = v84;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v107 = sub_21C3E30F8((uint64_t *)&v152);
      (*(void (**)(uint64_t *, char *, uint64_t))(v90 + 32))(v107, v89, v84);
      sub_21C3F349C(&v152, (uint64_t)v155);
      v108 = v142;
      v109 = v39;
      v110 = v146;
      v111 = swift_getAssociatedConformanceWitness();
      v112 = v134;
      v113 = v139;
      LibraryAssetInfo.enriched(with:)((uint64_t)v155, v85, v111, v134);
      v150 = v85;
      v151 = v111;
      v114 = sub_21C3E30F8(v149);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v109 + 16))(v114, v112, v85);
      v115 = v141;
      v116 = v141;
      static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)v149, v115, (uint64_t)&v152);

      sub_21C3FF670((uint64_t)v149, &qword_25527A470);
      v117 = v143;
      v118 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v136, v148, v110);
      v119 = v85;
      if (!v153)
      {
        v131 = v147;
        v147[3] = v110;
        v131[4] = v108;
        v132 = sub_21C3E30F8(v131);
        (*(void (**)(uint64_t *, char *, uint64_t))(v117 + 32))(v132, v118, v110);

        v128 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
        v128(v112, v119);
        sub_21C3E2754((uint64_t)v155);
        v129 = v113;
        v130 = v119;
LABEL_39:
        v128((uint64_t)v129, v130);
        v126 = &v152;
        return sub_21C3FF670((uint64_t)v126, &qword_25527A380);
      }

      (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v110);
      v120 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
      v120(v112, v119);
      sub_21C3E2754((uint64_t)v155);
      v120((uint64_t)v113, v119);
      v68 = &v152;
      return sub_21C3F349C(v68, (uint64_t)v147);
    }
    v61 = (void *)v60;
    v62 = v57;
    v63 = MAsset.enrichIfNeeded(with:)();

    if (!v63)
    {
      v38 = v26;
      v137 = v29;

      v37 = v146;
      goto LABEL_4;
    }
    v64 = static ContentInfoUtilities.assetInfo(storeAsset:)(v63, (uint64_t)v155);
    v65 = v143;
    v66 = v137;
    v67 = v146;
    (*(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t, double))(v143 + 16))(v137, v148, v146, v64);
    if (v156)
    {
      (*(void (**)(_QWORD, uint64_t))(v65 + 8))(v66, v67);

      goto LABEL_13;
    }
    v123 = v147;
    v124 = v142;
    v147[3] = v67;
    v123[4] = v124;
    v125 = sub_21C3E30F8(v123);
    (*(void (**)(uint64_t *, void (**)(char *, uint64_t), uint64_t))(v65 + 32))(v125, v66, v67);

    goto LABEL_36;
  }
  v137 = v29;
  v38 = v26;
  v40 = *(void **)((char *)v34 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v39 = v144;
  (*(void (**)(char *, void **, uint64_t))(v144 + 32))(v25, v34, v38);
  v41 = v145[3];
  v42 = v145[4];
  sub_21C3E359C(v145, v41);
  v43 = ContentInfo.storeData.getter(v41, *(_QWORD *)(v42 + 8));
  if (!v43)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v38);

LABEL_17:
    v37 = v146;
    goto LABEL_18;
  }
  v44 = (void *)v43;
  v45 = v40;
  v46 = v25;
  v47 = v45;
  v48 = v44;
  v49 = MAsset.enrichIfNeeded(with:)();

  if (!v49)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v46, v38);

    goto LABEL_17;
  }
  v145 = (uint64_t *)v48;
  v153 = v38;
  v50 = v39;
  v51 = v142;
  v52 = v146;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v53 = sub_21C3E30F8((uint64_t *)&v152);
  v54 = v46;
  (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 16))(v53, v46, v38);
  v55 = v49;
  static ContentInfoUtilities.assetInfo(libraryAssetInfo:storeAsset:)((uint64_t)&v152, v49, (uint64_t)v155);

  sub_21C3FF670((uint64_t)&v152, &qword_25527A470);
  v56 = v143;
  (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v12, v148, v52);
  if (v156)
  {

    (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v52);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v38);
LABEL_13:
    v68 = (__int128 *)v155;
    return sub_21C3F349C(v68, (uint64_t)v147);
  }
  v121 = v147;
  v147[3] = v52;
  v121[4] = v51;
  v122 = sub_21C3E30F8(v121);
  (*(void (**)(uint64_t *, char *, uint64_t))(v56 + 32))(v122, v12, v52);

  (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v38);
LABEL_36:
  v126 = (__int128 *)v155;
  return sub_21C3FF670((uint64_t)v126, &qword_25527A380);
}

uint64_t sub_21C42265C@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0((uint64_t (*)(void))MAsset.width.getter, a1);
}

uint64_t sub_21C422668()
{
  return 16;
}

__n128 sub_21C422674(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422684()
{
  return 16;
}

__n128 sub_21C422690(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C42269C@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0((uint64_t (*)(void))MAsset.height.getter, a1);
}

uint64_t sub_21C4226A8()
{
  return 16;
}

__n128 sub_21C4226B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C4226C0()
{
  return sel_artworkURL;
}

void sub_21C4226CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_artworkURL, a2);
}

uint64_t sub_21C4226E8()
{
  return 16;
}

__n128 sub_21C4226F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422704()
{
  return 16;
}

__n128 sub_21C422710(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422720()
{
  return 16;
}

__n128 sub_21C42272C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422738@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0(MAsset.duration.getter, a1);
}

uint64_t sub_21C422744()
{
  return 16;
}

__n128 sub_21C422750(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C42275C()
{
  return sel_editionKind;
}

void sub_21C422768(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_editionKind, a2);
}

uint64_t sub_21C422784()
{
  return 16;
}

__n128 sub_21C422790(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C42279C()
{
  return sel_expectedReleaseDate;
}

uint64_t sub_21C4227A8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C420D48(a1, (SEL *)&selRef_expectedReleaseDate, a2);
}

uint64_t sub_21C4227C4()
{
  return 16;
}

__n128 sub_21C4227D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4227E0()
{
  return 16;
}

__n128 sub_21C4227EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4227FC()
{
  return 16;
}

__n128 sub_21C422808(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

id sub_21C422814@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isExplicit);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_21C422844()
{
  return 16;
}

__n128 sub_21C422850(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422860()
{
  return 16;
}

__n128 sub_21C42286C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C42287C()
{
  return 16;
}

__n128 sub_21C422888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422894@<X0>(uint64_t a1@<X8>)
{
  return sub_21C3FEBD0(MAsset.price.getter, a1);
}

uint64_t sub_21C4228A0()
{
  return 16;
}

__n128 sub_21C4228AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4228BC()
{
  return 16;
}

__n128 sub_21C4228C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4228D8()
{
  return 16;
}

__n128 sub_21C4228E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C4228F0()
{
  return sel_isPreorder;
}

id sub_21C4228FC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isPreorder);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_21C42292C()
{
  return 16;
}

__n128 sub_21C422938(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422948()
{
  return 16;
}

__n128 sub_21C422954(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422964()
{
  return 16;
}

__n128 sub_21C422970(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422980()
{
  return 16;
}

__n128 sub_21C42298C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C42299C()
{
  return 16;
}

__n128 sub_21C4229A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C4229B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_21C4229C0(MAsset.publisherName.getter, a1);
}

uint64_t sub_21C4229C0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_21C4229E8()
{
  return 16;
}

__n128 sub_21C4229F4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C422A00()
{
  return sel_priceFormatted;
}

void sub_21C422A0C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_priceFormatted, a2);
}

uint64_t sub_21C422A28()
{
  return 16;
}

__n128 sub_21C422A34(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422A44()
{
  return 16;
}

__n128 sub_21C422A50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C422A5C()
{
  return sel_supportsUnifiedProductPage;
}

id sub_21C422A68@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_supportsUnifiedProductPage);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_21C422A98()
{
  return 16;
}

__n128 sub_21C422AA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C422AB0()
{
  return sel_seriesName;
}

void sub_21C422ABC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_seriesName, a2);
}

uint64_t sub_21C422AD8()
{
  return 16;
}

__n128 sub_21C422AE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422AF8()
{
  return 16;
}

__n128 sub_21C422B04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422B10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = a1[3];
  v3 = a1[4];
  sub_21C3E359C(a1, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 64))(v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_21C422B58()
{
  return 16;
}

__n128 sub_21C422B64(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C422B70()
{
  return sel_sequenceDisplayLabel;
}

void sub_21C422B7C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_sequenceDisplayLabel, a2);
}

uint64_t sub_21C422B98()
{
  return 16;
}

__n128 sub_21C422BA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21C422BB4()
{
  return 16;
}

__n128 sub_21C422BC0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_21C422BCC()
{
  return sel_standardDescription;
}

void sub_21C422BD8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21C421A48(a1, (SEL *)&selRef_standardDescription, a2);
}

uint64_t sub_21C422BF4()
{
  return 16;
}

__n128 sub_21C422C00(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t sub_21C422C10()
{
  unint64_t result;

  result = qword_25527B010;
  if (!qword_25527B010)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for ContentKind, &type metadata for ContentKind);
    atomic_store(result, (unint64_t *)&qword_25527B010);
  }
  return result;
}

unint64_t sub_21C422C58()
{
  unint64_t result;

  result = qword_25527B018;
  if (!qword_25527B018)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for AssetType, &type metadata for AssetType);
    atomic_store(result, (unint64_t *)&qword_25527B018);
  }
  return result;
}

unint64_t sub_21C422CA0()
{
  unint64_t result;

  result = qword_25527B020;
  if (!qword_25527B020)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for SeriesOrdering, &type metadata for SeriesOrdering);
    atomic_store(result, (unint64_t *)&qword_25527B020);
  }
  return result;
}

unint64_t sub_21C422CE8()
{
  unint64_t result;

  result = qword_25527B028;
  if (!qword_25527B028)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for FinishedDateKind, &type metadata for FinishedDateKind);
    atomic_store(result, (unint64_t *)&qword_25527B028);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContentKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21C422D78 + 4 * byte_21C45C7B5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21C422DAC + 4 * byte_21C45C7B0[v4]))();
}

uint64_t sub_21C422DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C422DBCLL);
  return result;
}

uint64_t sub_21C422DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C422DD0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21C422DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentKind()
{
  return &type metadata for ContentKind;
}

uint64_t storeEnumTagSinglePayload for AssetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21C422E44 + 4 * byte_21C45C7BF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21C422E78 + 4 * byte_21C45C7BA[v4]))();
}

uint64_t sub_21C422E78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422E80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C422E88);
  return result;
}

uint64_t sub_21C422E94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C422E9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21C422EA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422EA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetType()
{
  return &type metadata for AssetType;
}

uint64_t storeEnumTagSinglePayload for SeriesOrdering(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21C422F10 + 4 * byte_21C45C7C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21C422F44 + 4 * byte_21C45C7C4[v4]))();
}

uint64_t sub_21C422F44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422F4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C422F54);
  return result;
}

uint64_t sub_21C422F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C422F68);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21C422F6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C422F74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeriesOrdering()
{
  return &type metadata for SeriesOrdering;
}

uint64_t storeEnumTagSinglePayload for FinishedDateKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C422FDC + 4 * byte_21C45C7D3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C423010 + 4 * byte_21C45C7CE[v4]))();
}

uint64_t sub_21C423010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C423018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C423020);
  return result;
}

uint64_t sub_21C42302C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C423034);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C423038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C423040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinishedDateKind()
{
  return &type metadata for FinishedDateKind;
}

uint64_t dispatch thunk of AssetInfo.assetType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AssetInfo.contentKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_21C423080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_21C458F0C();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    do
    {
      v6 = sub_21C458F0C();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v2 == v6 && v3 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v4 = sub_21C4594F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v2 = sub_21C458F0C();
      v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_21C458F0C();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = v9 == 0;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t _s14BookFoundation23LocaleLanguageDirectionV5isRTLSbvgZ_0()
{
  id v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v13;
  uint64_t v14;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  void *v26;
  id v27[3];

  v27[2] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
  v1 = objc_msgSend(v0, sel_languageTag);
  if ((objc_msgSend(v0, sel_isExpired) & 1) == 0 && objc_msgSend(v1, sel_isLoaded))
  {
    v27[0] = 0;
    v2 = objc_msgSend(v1, sel_valueWithError_, v27);
    v3 = v27[0];
    if (!v2)
    {
      v16 = v27[0];
      v17 = (void *)sub_21C458B7C();

      swift_willThrow();
      if (qword_255279EE0 != -1)
        swift_once();
      v18 = sub_21C458D20();
      sub_21C3E2BA0(v18, (uint64_t)qword_25527A248);
      v19 = v17;
      v20 = v17;
      v21 = sub_21C458D08();
      v22 = sub_21C45920C();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v23 = 138412290;
        v25 = v17;
        v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v27[0] = v26;
        sub_21C459290();
        *v24 = v26;

        _os_log_impl(&dword_21C3E0000, v21, v22, "Failed to retreive locale: %@", v23, 0xCu);
        sub_21C3E344C(&qword_25527A468);
        swift_arrayDestroy();
        MEMORY[0x22077C294](v24, -1, -1);
        MEMORY[0x22077C294](v23, -1, -1);

      }
      else
      {

      }
      return 0;
    }
    v4 = v2;
    sub_21C458E64();
    v5 = v3;

  }
  v6 = sub_21C458E88();
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = 0;
  while (1)
  {
    v10 = *(void **)((char *)&unk_24E03EA40 + v9 + 32);
    v11 = *(void **)((char *)&unk_24E03EA40 + v9 + 40);
    if ((void *)v6 == v10 && v8 == v11)
      break;
    if ((sub_21C4594F4() & 1) != 0)
      break;
    v27[0] = v10;
    v27[1] = v11;
    swift_bridgeObjectRetain_n();
    sub_21C458F00();
    v13 = sub_21C423080();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      break;
    v9 += 16;
    if (v9 == 192)
    {
      v14 = 0;
      goto LABEL_15;
    }
  }
  v14 = 1;
LABEL_15:

  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v14;
}

ValueMetadata *type metadata accessor for LocaleLanguageDirection()
{
  return &type metadata for LocaleLanguageDirection;
}

uint64_t sub_21C4235A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  int EnumCaseMultiPayload;
  void *v8;
  void *v10;
  unsigned __int8 v11;

  v1 = type metadata accessor for LibraryAudiobookInfo();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_21C3E344C(&qword_25527A390);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (void **)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C415EDC(v0, (uint64_t)v6, &qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v8 = *(void **)((char *)v6 + *(int *)(sub_21C3E344C(&qword_25527AD20) + 48));
    sub_21C415F64((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    v10 = v8;
    swift_getAtKeyPath();

    return v11;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v8 = *v6;
    goto LABEL_6;
  }
  sub_21C415F20((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
  swift_getAtKeyPath();
  sub_21C415F64((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
  return v11;
}

void sub_21C423708(uint64_t a1, uint64_t a2)
{
  sub_21C423740(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo, &qword_25527A3A0, &qword_25527AD28);
}

void sub_21C423724(uint64_t a1, uint64_t a2)
{
  sub_21C423740(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo, &qword_25527AD70, &qword_25527AD68);
}

void sub_21C423740(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int EnumCaseMultiPayload;
  void *v16;
  _QWORD v17[2];

  v9 = a3(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v17 - v10;
  v12 = sub_21C3E344C(a4);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (void **)((char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C415EDC(v5, (uint64_t)v14, a4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_21C415F20((uint64_t)v14, (uint64_t)v11, a3);
      swift_getAtKeyPath();
      sub_21C415F64((uint64_t)v11, a3);
      return;
    }
    v16 = *v14;
  }
  else
  {
    v16 = *(void **)((char *)v14 + *(int *)(sub_21C3E344C(a5) + 48));
    sub_21C415F64((uint64_t)v14, a3);
  }
  v17[1] = v16;
  swift_getAtKeyPath();

}

uint64_t AudiobookInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for AudiobookInfo();
  *(_BYTE *)(a2 + *(int *)(v4 + 20)) = 0;
  *(_BYTE *)(a2 + *(int *)(v4 + 24)) = 1;
  return sub_21C423918(a1, a2);
}

uint64_t type metadata accessor for AudiobookInfo()
{
  uint64_t result;

  result = qword_25527B100;
  if (!qword_25527B100)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C423918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AudiobookInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C415EDC(v1, a1, &qword_25527A390);
}

uint64_t AudiobookInfo.assetType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AudiobookInfo() + 20));
}

uint64_t AudiobookInfo.assetType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AudiobookInfo();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AudiobookInfo.assetType.modify())()
{
  type metadata accessor for AudiobookInfo();
  return nullsub_1;
}

uint64_t AudiobookInfo.contentKind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AudiobookInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t AudiobookInfo.contentKind.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for AudiobookInfo();
  *(_BYTE *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AudiobookInfo.contentKind.modify())()
{
  type metadata accessor for AudiobookInfo();
  return nullsub_1;
}

uint64_t sub_21C423A7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C415EDC(v1, a1, &qword_25527A390);
}

uint64_t sub_21C423AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(int *)(a2 + 24);
  *(_BYTE *)(a3 + *(int *)(a2 + 20)) = 0;
  *(_BYTE *)(a3 + v3) = 1;
  return sub_21C423918(a1, a3);
}

uint64_t AudiobookInfo.duration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v1 = sub_21C3E344C(&qword_25527A390);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C415EDC(v0, (uint64_t)v3, &qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v6 = *(void **)((char *)v3 + *(int *)(sub_21C3E344C(&qword_25527AD20) + 48));
    sub_21C415F64((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    v5 = MAsset.duration.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v6 = *v3;
    goto LABEL_6;
  }
  sub_21C423BA0((uint64_t)v3);
  return 0;
}

uint64_t sub_21C423BA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AudiobookInfo.isSG.getter()
{
  char v0;

  swift_getKeyPath();
  swift_getKeyPath();
  v0 = sub_21C4235A8();
  swift_release();
  swift_release();
  return v0 & 1;
}

char *sub_21C423C44()
{
  return sel_isSG;
}

id sub_21C423C50@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isSG);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t AudiobookInfo.narrator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v1 = sub_21C3E344C(&qword_25527A390);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C415EDC(v0, (uint64_t)v3, &qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v6 = *(void **)((char *)v3 + *(int *)(sub_21C3E344C(&qword_25527AD20) + 48));
    sub_21C415F64((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
LABEL_6:
    v5 = MAudiobook.narrator.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v6 = *v3;
    goto LABEL_6;
  }
  sub_21C423BA0((uint64_t)v3);
  return 0;
}

uint64_t sub_21C423D64(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B058, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C423DA0()
{
  return sub_21C3E871C(&qword_25527A2B0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryAudiobookInfo, (uint64_t)&protocol conformance descriptor for LibraryAudiobookInfo);
}

uint64_t sub_21C423DCC(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B098, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C423E08(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B0A0, (uint64_t (*)(uint64_t))type metadata accessor for AudiobookInfo, (uint64_t)&protocol conformance descriptor for AudiobookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for AudiobookInfo(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  int *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v158;
  uint64_t v159;
  unsigned int (*v160)(char *, uint64_t, uint64_t);
  char *v161;
  unsigned int (*v162)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v166;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v6 = a3;
    sub_21C3E344C(&qword_25527A390);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *a2;
      *(_QWORD *)a1 = *a2;
      v20 = v19;
    }
    else
    {
      v166 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v8;
        v9 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v9;
        v10 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v10;
        v11 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v11;
        v12 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v12;
        *((_QWORD *)a1 + 10) = a2[10];
        v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v14 = v13[10];
        __dst = &a1[v14];
        v15 = (char *)a2 + v14;
        v16 = sub_21C458BF4();
        v158 = *(_QWORD *)(v16 - 8);
        v160 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v160(v15, 1, v16))
        {
          v17 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v158 + 16))(__dst, v15, v16);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(__dst, 0, 1, v16);
        }
        v31 = v13[11];
        v32 = &a1[v31];
        v33 = (char **)((char *)a2 + v31);
        v34 = v33[1];
        *(_QWORD *)v32 = *v33;
        *((_QWORD *)v32 + 1) = v34;
        v35 = v13[12];
        v36 = &a1[v35];
        v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v38 = v13[13];
        v39 = &a1[v38];
        v40 = (char **)((char *)a2 + v38);
        v41 = v40[1];
        *(_QWORD *)v39 = *v40;
        *((_QWORD *)v39 + 1) = v41;
        v42 = v13[14];
        v43 = &a1[v42];
        v44 = (char *)a2 + v42;
        v45 = sub_21C458C60();
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = v47;
        if (v47(v44, 1, v45))
        {
          v48 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v49 = v13[15];
        v50 = &a1[v49];
        v51 = (char **)((char *)a2 + v49);
        v52 = v51[1];
        *(_QWORD *)v50 = *v51;
        *((_QWORD *)v50 + 1) = v52;
        v53 = v13[16];
        v54 = &a1[v53];
        v55 = (char **)((char *)a2 + v53);
        v56 = v55[1];
        *(_QWORD *)v54 = *v55;
        *((_QWORD *)v54 + 1) = v56;
        a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
        *(_QWORD *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((_BYTE *)a2 + v13[19]);
        a1[v13[20]] = *((_BYTE *)a2 + v13[20]);
        a1[v13[21]] = *((_BYTE *)a2 + v13[21]);
        a1[v13[22]] = *((_BYTE *)a2 + v13[22]);
        a1[v13[23]] = *((_BYTE *)a2 + v13[23]);
        a1[v13[24]] = *((_BYTE *)a2 + v13[24]);
        a1[v13[25]] = *((_BYTE *)a2 + v13[25]);
        a1[v13[26]] = *((_BYTE *)a2 + v13[26]);
        a1[v13[27]] = *((_BYTE *)a2 + v13[27]);
        a1[v13[28]] = *((_BYTE *)a2 + v13[28]);
        a1[v13[29]] = *((_BYTE *)a2 + v13[29]);
        v57 = v13[30];
        v58 = &a1[v57];
        v59 = (char **)((char *)a2 + v57);
        v60 = v59[1];
        *(_QWORD *)v58 = *v59;
        *((_QWORD *)v58 + 1) = v60;
        v61 = v13[31];
        v62 = &a1[v61];
        v63 = (char *)a2 + v61;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dsta(v63, 1, v45))
        {
          v64 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v62, v63, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v45);
        }
        v65 = v13[32];
        v66 = &a1[v65];
        v67 = (char *)a2 + v65;
        *(_QWORD *)v66 = *(_QWORD *)v67;
        v66[8] = v67[8];
        *(_QWORD *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        v68 = v13[34];
        v69 = &a1[v68];
        v70 = (char *)a2 + v68;
        if (__dsta((char *)a2 + v68, 1, v45))
        {
          v71 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v69, v70, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v69, 0, 1, v45);
        }
        v72 = v13[35];
        v73 = &a1[v72];
        v74 = (char **)((char *)a2 + v72);
        v75 = v74[1];
        *(_QWORD *)v73 = *v74;
        *((_QWORD *)v73 + 1) = v75;
        v76 = v13[36];
        v77 = &a1[v76];
        v78 = (char *)a2 + v76;
        *(_QWORD *)(v77 + 13) = *(_QWORD *)(v78 + 13);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        v79 = v13[37];
        v80 = &a1[v79];
        v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v82 = v13[38];
        v83 = &a1[v82];
        v84 = (char *)a2 + v82;
        v83[4] = v84[4];
        *(_DWORD *)v83 = *(_DWORD *)v84;
        v85 = (int *)type metadata accessor for LibraryAudiobookInfo();
        v86 = v85[5];
        v87 = &a1[v86];
        v88 = (char *)a2 + v86;
        v89 = *(uint64_t *)((char *)a2 + v86 + 24);
        swift_bridgeObjectRetain();
        if (v89)
        {
          v90 = *((_QWORD *)v88 + 4);
          *((_QWORD *)v87 + 3) = v89;
          *((_QWORD *)v87 + 4) = v90;
          (**(void (***)(char *, char *, uint64_t))(v89 - 8))(v87, v88, v89);
        }
        else
        {
          v91 = *((_OWORD *)v88 + 1);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v87 + 1) = v91;
          *((_QWORD *)v87 + 4) = *((_QWORD *)v88 + 4);
        }
        v6 = v166;
        a1[v85[6]] = *((_BYTE *)a2 + v85[6]);
        *(_QWORD *)&a1[v85[7]] = *(char **)((char *)a2 + v85[7]);
        swift_bridgeObjectRetain();
      }
      else
      {
        v21 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v21;
        v22 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v22;
        v23 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v23;
        v24 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v24;
        v25 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v25;
        *((_QWORD *)a1 + 10) = a2[10];
        v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v27 = v26[10];
        v161 = &a1[v27];
        v28 = (char *)a2 + v27;
        v29 = sub_21C458BF4();
        v159 = *(_QWORD *)(v29 - 8);
        v162 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v162(v28, 1, v29))
        {
          v30 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(v161, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v161, v28, v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v161, 0, 1, v29);
        }
        v92 = v26[11];
        v93 = &a1[v92];
        v94 = (char **)((char *)a2 + v92);
        v95 = v94[1];
        *(_QWORD *)v93 = *v94;
        *((_QWORD *)v93 + 1) = v95;
        v96 = v26[12];
        v97 = &a1[v96];
        v98 = (char *)a2 + v96;
        v97[8] = v98[8];
        *(_QWORD *)v97 = *(_QWORD *)v98;
        v99 = v26[13];
        v100 = &a1[v99];
        v101 = (char **)((char *)a2 + v99);
        v102 = v101[1];
        *(_QWORD *)v100 = *v101;
        *((_QWORD *)v100 + 1) = v102;
        v103 = v26[14];
        v104 = &a1[v103];
        v105 = (char *)a2 + v103;
        v106 = sub_21C458C60();
        v107 = *(_QWORD *)(v106 - 8);
        v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = (void (**)(void *, const void *, uint64_t))v107;
        if (v108(v105, 1, v106))
        {
          v109 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v104, v105, v106);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
        }
        v110 = v26[15];
        v111 = &a1[v110];
        v112 = (char **)((char *)a2 + v110);
        v113 = v112[1];
        *(_QWORD *)v111 = *v112;
        *((_QWORD *)v111 + 1) = v113;
        v114 = v26[16];
        v115 = &a1[v114];
        v116 = (char **)((char *)a2 + v114);
        v117 = v116[1];
        *(_QWORD *)v115 = *v116;
        *((_QWORD *)v115 + 1) = v117;
        a1[v26[17]] = *((_BYTE *)a2 + v26[17]);
        *(_QWORD *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((_BYTE *)a2 + v26[19]);
        a1[v26[20]] = *((_BYTE *)a2 + v26[20]);
        a1[v26[21]] = *((_BYTE *)a2 + v26[21]);
        a1[v26[22]] = *((_BYTE *)a2 + v26[22]);
        a1[v26[23]] = *((_BYTE *)a2 + v26[23]);
        a1[v26[24]] = *((_BYTE *)a2 + v26[24]);
        a1[v26[25]] = *((_BYTE *)a2 + v26[25]);
        a1[v26[26]] = *((_BYTE *)a2 + v26[26]);
        a1[v26[27]] = *((_BYTE *)a2 + v26[27]);
        a1[v26[28]] = *((_BYTE *)a2 + v26[28]);
        a1[v26[29]] = *((_BYTE *)a2 + v26[29]);
        v118 = v26[30];
        v119 = &a1[v118];
        v120 = (char **)((char *)a2 + v118);
        v121 = v120[1];
        *(_QWORD *)v119 = *v120;
        *((_QWORD *)v119 + 1) = v121;
        v122 = v26[31];
        v123 = &a1[v122];
        v124 = (char *)a2 + v122;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v108(v124, 1, v106))
        {
          v125 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v123, v124, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
        }
        else
        {
          __dstb[2](v123, v124, v106);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v123, 0, 1, v106);
        }
        v126 = v26[32];
        v127 = &a1[v126];
        v128 = (char *)a2 + v126;
        *(_QWORD *)v127 = *(_QWORD *)v128;
        v127[8] = v128[8];
        *(_QWORD *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        v129 = v26[34];
        v130 = &a1[v129];
        v131 = (char *)a2 + v129;
        if (v108((char *)a2 + v129, 1, v106))
        {
          v132 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          __dstb[2](v130, v131, v106);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v130, 0, 1, v106);
        }
        v133 = v26[35];
        v134 = &a1[v133];
        v135 = (char **)((char *)a2 + v133);
        v136 = v135[1];
        *(_QWORD *)v134 = *v135;
        *((_QWORD *)v134 + 1) = v136;
        v137 = v26[36];
        v138 = &a1[v137];
        v139 = (char *)a2 + v137;
        *(_QWORD *)(v138 + 13) = *(_QWORD *)(v139 + 13);
        *(_OWORD *)v138 = *(_OWORD *)v139;
        v140 = v26[37];
        v141 = &a1[v140];
        v142 = (char *)a2 + v140;
        v141[8] = v142[8];
        *(_QWORD *)v141 = *(_QWORD *)v142;
        v143 = v26[38];
        v144 = &a1[v143];
        v145 = (char *)a2 + v143;
        v144[4] = v145[4];
        *(_DWORD *)v144 = *(_DWORD *)v145;
        v146 = (int *)type metadata accessor for LibraryAudiobookInfo();
        v147 = v146[5];
        v148 = &a1[v147];
        v149 = (char *)a2 + v147;
        v150 = *(uint64_t *)((char *)a2 + v147 + 24);
        swift_bridgeObjectRetain();
        if (v150)
        {
          v151 = *((_QWORD *)v149 + 4);
          *((_QWORD *)v148 + 3) = v150;
          *((_QWORD *)v148 + 4) = v151;
          (**(void (***)(char *, char *, uint64_t))(v150 - 8))(v148, v149, v150);
        }
        else
        {
          v152 = *((_OWORD *)v149 + 1);
          *(_OWORD *)v148 = *(_OWORD *)v149;
          *((_OWORD *)v148 + 1) = v152;
          *((_QWORD *)v148 + 4) = *((_QWORD *)v149 + 4);
        }
        v6 = v166;
        a1[v146[6]] = *((_BYTE *)a2 + v146[6]);
        *(_QWORD *)&a1[v146[7]] = *(char **)((char *)a2 + v146[7]);
        swift_bridgeObjectRetain();
        v153 = *(int *)(sub_21C3E344C(&qword_25527AD20) + 48);
        v154 = *(char **)((char *)a2 + v153);
        *(_QWORD *)&a1[v153] = v154;
        v155 = v154;
      }
    }
    swift_storeEnumTagMultiPayload();
    v156 = *(int *)(v6 + 24);
    a1[*(int *)(v6 + 20)] = *((_BYTE *)a2 + *(int *)(v6 + 20));
    a1[v156] = *((_BYTE *)a2 + v156);
  }
  return a1;
}

void destroy for AudiobookInfo(void **a1)
{
  int EnumCaseMultiPayload;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;

  sub_21C3E344C(&qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v14 = *a1;
LABEL_16:

    return;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      return;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v4 = (char *)a1 + v3[10];
    v5 = sub_21C458BF4();
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (char *)a1 + v3[14];
    v8 = sub_21C458C60();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    if (!v10(v7, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = (char *)a1 + v3[31];
    if (!v10(v11, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v12 = (char *)a1 + v3[34];
    if (!v10(v12, 1, v8))
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    v13 = (uint64_t)a1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
    if (*(_QWORD *)(v13 + 24))
      sub_21C3E2754(v13);
    swift_bridgeObjectRelease();
    v14 = *(void **)((char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AD20) + 48));
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v16 = (char *)a1 + v15[10];
  v17 = sub_21C458BF4();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = (char *)a1 + v15[14];
  v20 = sub_21C458C60();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (!v22(v19, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = (char *)a1 + v15[31];
  if (!v22(v23, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v24 = (char *)a1 + v15[34];
  if (!v22(v24, 1, v20))
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  swift_bridgeObjectRelease();
  v25 = (uint64_t)a1 + *(int *)(type metadata accessor for LibraryAudiobookInfo() + 20);
  if (*(_QWORD *)(v25 + 24))
    sub_21C3E2754(v25);
  swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AudiobookInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(const void *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  const void *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  const void *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(const void *, uint64_t, uint64_t);
  char *v159;
  unsigned int (*v160)(const void *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(const void *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v164;

  sub_21C3E344C(&qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v17 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v18 = v17;
  }
  else
  {
    v164 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v7;
      v8 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v8;
      v9 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v9;
      v10 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v10;
      v11 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(_QWORD *)(a2 + 80);
      v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v13 = v12[10];
      __dst = (char *)a1 + v13;
      v14 = (const void *)(a2 + v13);
      v15 = sub_21C458BF4();
      v156 = *(_QWORD *)(v15 - 8);
      v158 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v156 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v158(v14, 1, v15))
      {
        v16 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v156 + 16))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(__dst, 0, 1, v15);
      }
      v29 = v12[11];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (_QWORD *)(a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = v12[12];
      v34 = (char *)a1 + v33;
      v35 = a2 + v33;
      v34[8] = *(_BYTE *)(v35 + 8);
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v36 = v12[13];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)(a2 + v36);
      v39 = v38[1];
      *v37 = *v38;
      v37[1] = v39;
      v40 = v12[14];
      v41 = (char *)a1 + v40;
      v42 = (const void *)(a2 + v40);
      v43 = sub_21C458C60();
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v45;
      if (v45(v42, 1, v43))
      {
        v46 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v47 = v12[15];
      v48 = (_QWORD *)((char *)a1 + v47);
      v49 = (_QWORD *)(a2 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      v51 = v12[16];
      v52 = (_QWORD *)((char *)a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      v54 = v53[1];
      *v52 = *v53;
      v52[1] = v54;
      *((_BYTE *)a1 + v12[17]) = *(_BYTE *)(a2 + v12[17]);
      *(_QWORD *)((char *)a1 + v12[18]) = *(_QWORD *)(a2 + v12[18]);
      *((_BYTE *)a1 + v12[19]) = *(_BYTE *)(a2 + v12[19]);
      *((_BYTE *)a1 + v12[20]) = *(_BYTE *)(a2 + v12[20]);
      *((_BYTE *)a1 + v12[21]) = *(_BYTE *)(a2 + v12[21]);
      *((_BYTE *)a1 + v12[22]) = *(_BYTE *)(a2 + v12[22]);
      *((_BYTE *)a1 + v12[23]) = *(_BYTE *)(a2 + v12[23]);
      *((_BYTE *)a1 + v12[24]) = *(_BYTE *)(a2 + v12[24]);
      *((_BYTE *)a1 + v12[25]) = *(_BYTE *)(a2 + v12[25]);
      *((_BYTE *)a1 + v12[26]) = *(_BYTE *)(a2 + v12[26]);
      *((_BYTE *)a1 + v12[27]) = *(_BYTE *)(a2 + v12[27]);
      *((_BYTE *)a1 + v12[28]) = *(_BYTE *)(a2 + v12[28]);
      *((_BYTE *)a1 + v12[29]) = *(_BYTE *)(a2 + v12[29]);
      v55 = v12[30];
      v56 = (_QWORD *)((char *)a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      v59 = v12[31];
      v60 = (char *)a1 + v59;
      v61 = (const void *)(a2 + v59);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dsta(v61, 1, v43))
      {
        v62 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v60, v61, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v60, 0, 1, v43);
      }
      v63 = v12[32];
      v64 = (char *)a1 + v63;
      v65 = a2 + v63;
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = *(_BYTE *)(v65 + 8);
      *(_QWORD *)((char *)a1 + v12[33]) = *(_QWORD *)(a2 + v12[33]);
      v66 = v12[34];
      v67 = (char *)a1 + v66;
      v68 = (const void *)(a2 + v66);
      if (__dsta((const void *)(a2 + v66), 1, v43))
      {
        v69 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v67, v68, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v67, 0, 1, v43);
      }
      v70 = v12[35];
      v71 = (_QWORD *)((char *)a1 + v70);
      v72 = (_QWORD *)(a2 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v12[36];
      v75 = (char *)a1 + v74;
      v76 = a2 + v74;
      *(_QWORD *)(v75 + 13) = *(_QWORD *)(v76 + 13);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v77 = v12[37];
      v78 = (char *)a1 + v77;
      v79 = a2 + v77;
      v78[8] = *(_BYTE *)(v79 + 8);
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v80 = v12[38];
      v81 = (char *)a1 + v80;
      v82 = a2 + v80;
      v81[4] = *(_BYTE *)(v82 + 4);
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v83 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v84 = v83[5];
      v85 = (char *)a1 + v84;
      v86 = a2 + v84;
      v87 = *(_QWORD *)(a2 + v84 + 24);
      swift_bridgeObjectRetain();
      if (v87)
      {
        v88 = *(_QWORD *)(v86 + 32);
        *((_QWORD *)v85 + 3) = v87;
        *((_QWORD *)v85 + 4) = v88;
        (**(void (***)(char *, uint64_t, uint64_t))(v87 - 8))(v85, v86, v87);
      }
      else
      {
        v89 = *(_OWORD *)(v86 + 16);
        *(_OWORD *)v85 = *(_OWORD *)v86;
        *((_OWORD *)v85 + 1) = v89;
        *((_QWORD *)v85 + 4) = *(_QWORD *)(v86 + 32);
      }
      a3 = v164;
      *((_BYTE *)a1 + v83[6]) = *(_BYTE *)(a2 + v83[6]);
      *(_QWORD *)((char *)a1 + v83[7]) = *(_QWORD *)(a2 + v83[7]);
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v19;
      v20 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v20;
      v21 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v21;
      v22 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v22;
      v23 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(_QWORD *)(a2 + 80);
      v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v25 = v24[10];
      v159 = (char *)a1 + v25;
      v26 = (const void *)(a2 + v25);
      v27 = sub_21C458BF4();
      v157 = *(_QWORD *)(v27 - 8);
      v160 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v157 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v160(v26, 1, v27))
      {
        v28 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v159, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v157 + 16))(v159, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v157 + 56))(v159, 0, 1, v27);
      }
      v90 = v24[11];
      v91 = (_QWORD *)((char *)a1 + v90);
      v92 = (_QWORD *)(a2 + v90);
      v93 = v92[1];
      *v91 = *v92;
      v91[1] = v93;
      v94 = v24[12];
      v95 = (char *)a1 + v94;
      v96 = a2 + v94;
      v95[8] = *(_BYTE *)(v96 + 8);
      *(_QWORD *)v95 = *(_QWORD *)v96;
      v97 = v24[13];
      v98 = (_QWORD *)((char *)a1 + v97);
      v99 = (_QWORD *)(a2 + v97);
      v100 = v99[1];
      *v98 = *v99;
      v98[1] = v100;
      v101 = v24[14];
      v102 = (char *)a1 + v101;
      v103 = (const void *)(a2 + v101);
      v104 = sub_21C458C60();
      v105 = *(_QWORD *)(v104 - 8);
      v106 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v105 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dstb = (void (**)(void *, const void *, uint64_t))v105;
      if (v106(v103, 1, v104))
      {
        v107 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v105 + 16))(v102, v103, v104);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      }
      v108 = v24[15];
      v109 = (_QWORD *)((char *)a1 + v108);
      v110 = (_QWORD *)(a2 + v108);
      v111 = v110[1];
      *v109 = *v110;
      v109[1] = v111;
      v112 = v24[16];
      v113 = (_QWORD *)((char *)a1 + v112);
      v114 = (_QWORD *)(a2 + v112);
      v115 = v114[1];
      *v113 = *v114;
      v113[1] = v115;
      *((_BYTE *)a1 + v24[17]) = *(_BYTE *)(a2 + v24[17]);
      *(_QWORD *)((char *)a1 + v24[18]) = *(_QWORD *)(a2 + v24[18]);
      *((_BYTE *)a1 + v24[19]) = *(_BYTE *)(a2 + v24[19]);
      *((_BYTE *)a1 + v24[20]) = *(_BYTE *)(a2 + v24[20]);
      *((_BYTE *)a1 + v24[21]) = *(_BYTE *)(a2 + v24[21]);
      *((_BYTE *)a1 + v24[22]) = *(_BYTE *)(a2 + v24[22]);
      *((_BYTE *)a1 + v24[23]) = *(_BYTE *)(a2 + v24[23]);
      *((_BYTE *)a1 + v24[24]) = *(_BYTE *)(a2 + v24[24]);
      *((_BYTE *)a1 + v24[25]) = *(_BYTE *)(a2 + v24[25]);
      *((_BYTE *)a1 + v24[26]) = *(_BYTE *)(a2 + v24[26]);
      *((_BYTE *)a1 + v24[27]) = *(_BYTE *)(a2 + v24[27]);
      *((_BYTE *)a1 + v24[28]) = *(_BYTE *)(a2 + v24[28]);
      *((_BYTE *)a1 + v24[29]) = *(_BYTE *)(a2 + v24[29]);
      v116 = v24[30];
      v117 = (_QWORD *)((char *)a1 + v116);
      v118 = (_QWORD *)(a2 + v116);
      v119 = v118[1];
      *v117 = *v118;
      v117[1] = v119;
      v120 = v24[31];
      v121 = (char *)a1 + v120;
      v122 = (const void *)(a2 + v120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v106(v122, 1, v104))
      {
        v123 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
      }
      else
      {
        __dstb[2](v121, v122, v104);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v121, 0, 1, v104);
      }
      v124 = v24[32];
      v125 = (char *)a1 + v124;
      v126 = a2 + v124;
      *(_QWORD *)v125 = *(_QWORD *)v126;
      v125[8] = *(_BYTE *)(v126 + 8);
      *(_QWORD *)((char *)a1 + v24[33]) = *(_QWORD *)(a2 + v24[33]);
      v127 = v24[34];
      v128 = (char *)a1 + v127;
      v129 = (const void *)(a2 + v127);
      if (v106((const void *)(a2 + v127), 1, v104))
      {
        v130 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
      }
      else
      {
        __dstb[2](v128, v129, v104);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v128, 0, 1, v104);
      }
      v131 = v24[35];
      v132 = (_QWORD *)((char *)a1 + v131);
      v133 = (_QWORD *)(a2 + v131);
      v134 = v133[1];
      *v132 = *v133;
      v132[1] = v134;
      v135 = v24[36];
      v136 = (char *)a1 + v135;
      v137 = a2 + v135;
      *(_QWORD *)(v136 + 13) = *(_QWORD *)(v137 + 13);
      *(_OWORD *)v136 = *(_OWORD *)v137;
      v138 = v24[37];
      v139 = (char *)a1 + v138;
      v140 = a2 + v138;
      v139[8] = *(_BYTE *)(v140 + 8);
      *(_QWORD *)v139 = *(_QWORD *)v140;
      v141 = v24[38];
      v142 = (char *)a1 + v141;
      v143 = a2 + v141;
      v142[4] = *(_BYTE *)(v143 + 4);
      *(_DWORD *)v142 = *(_DWORD *)v143;
      v144 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v145 = v144[5];
      v146 = (char *)a1 + v145;
      v147 = a2 + v145;
      v148 = *(_QWORD *)(a2 + v145 + 24);
      swift_bridgeObjectRetain();
      if (v148)
      {
        v149 = *(_QWORD *)(v147 + 32);
        *((_QWORD *)v146 + 3) = v148;
        *((_QWORD *)v146 + 4) = v149;
        (**(void (***)(char *, uint64_t, uint64_t))(v148 - 8))(v146, v147, v148);
      }
      else
      {
        v150 = *(_OWORD *)(v147 + 16);
        *(_OWORD *)v146 = *(_OWORD *)v147;
        *((_OWORD *)v146 + 1) = v150;
        *((_QWORD *)v146 + 4) = *(_QWORD *)(v147 + 32);
      }
      a3 = v164;
      *((_BYTE *)a1 + v144[6]) = *(_BYTE *)(a2 + v144[6]);
      *(_QWORD *)((char *)a1 + v144[7]) = *(_QWORD *)(a2 + v144[7]);
      swift_bridgeObjectRetain();
      v151 = *(int *)(sub_21C3E344C(&qword_25527AD20) + 48);
      v152 = *(void **)(a2 + v151);
      *(_QWORD *)((char *)a1 + v151) = v152;
      v153 = v152;
    }
  }
  swift_storeEnumTagMultiPayload();
  v154 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + v154) = *(_BYTE *)(a2 + v154);
  return a1;
}

_QWORD *assignWithCopy for AudiobookInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  id v139;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t);
  unsigned int (*v144)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;

  if (a1 != a2)
  {
    sub_21C423BA0((uint64_t)a1);
    sub_21C3E344C(&qword_25527A390);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = (void *)*a2;
      *a1 = *a2;
      v13 = v12;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v8 = v7[10];
      __dst = (char *)a1 + v8;
      v9 = (char *)a2 + v8;
      v10 = sub_21C458BF4();
      v141 = *(_QWORD *)(v10 - 8);
      v143 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v143(v9, 1, v10))
      {
        v11 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v141 + 16))(__dst, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(__dst, 0, 1, v10);
      }
      v19 = v7[11];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      *v20 = *v21;
      v20[1] = v21[1];
      v22 = v7[12];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = *(_QWORD *)v24;
      v23[8] = v24[8];
      *(_QWORD *)v23 = v25;
      v26 = v7[13];
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (_QWORD *)((char *)a2 + v26);
      *v27 = *v28;
      v27[1] = v28[1];
      v29 = v7[14];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = sub_21C458C60();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v53 = v7[15];
      v54 = (_QWORD *)((char *)a1 + v53);
      v55 = (_QWORD *)((char *)a2 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v7[16];
      v57 = (_QWORD *)((char *)a1 + v56);
      v58 = (_QWORD *)((char *)a2 + v56);
      *v57 = *v58;
      v57[1] = v58[1];
      *((_BYTE *)a1 + v7[17]) = *((_BYTE *)a2 + v7[17]);
      *(_QWORD *)((char *)a1 + v7[18]) = *(_QWORD *)((char *)a2 + v7[18]);
      *((_BYTE *)a1 + v7[19]) = *((_BYTE *)a2 + v7[19]);
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      *((_BYTE *)a1 + v7[21]) = *((_BYTE *)a2 + v7[21]);
      *((_BYTE *)a1 + v7[22]) = *((_BYTE *)a2 + v7[22]);
      *((_BYTE *)a1 + v7[23]) = *((_BYTE *)a2 + v7[23]);
      *((_BYTE *)a1 + v7[24]) = *((_BYTE *)a2 + v7[24]);
      *((_BYTE *)a1 + v7[25]) = *((_BYTE *)a2 + v7[25]);
      *((_BYTE *)a1 + v7[26]) = *((_BYTE *)a2 + v7[26]);
      *((_BYTE *)a1 + v7[27]) = *((_BYTE *)a2 + v7[27]);
      *((_BYTE *)a1 + v7[28]) = *((_BYTE *)a2 + v7[28]);
      *((_BYTE *)a1 + v7[29]) = *((_BYTE *)a2 + v7[29]);
      v59 = v7[30];
      v60 = (_QWORD *)((char *)a1 + v59);
      v61 = (_QWORD *)((char *)a2 + v59);
      *v60 = *v61;
      v60[1] = v61[1];
      v62 = v7[31];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v64, 1, v32))
      {
        v65 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v63, v64, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v63, 0, 1, v32);
      }
      v79 = v7[32];
      v80 = (char *)a1 + v79;
      v81 = (char *)a2 + v79;
      v82 = *(_QWORD *)v81;
      v80[8] = v81[8];
      *(_QWORD *)v80 = v82;
      *(_QWORD *)((char *)a1 + v7[33]) = *(_QWORD *)((char *)a2 + v7[33]);
      v83 = v7[34];
      v84 = (char *)a1 + v83;
      v85 = (char *)a2 + v83;
      if (v34((char *)a2 + v83, 1, v32))
      {
        v86 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v84, v85, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v84, 0, 1, v32);
      }
      v95 = v7[35];
      v96 = (_QWORD *)((char *)a1 + v95);
      v97 = (_QWORD *)((char *)a2 + v95);
      *v96 = *v97;
      v96[1] = v97[1];
      v98 = v7[36];
      v99 = (char *)a1 + v98;
      v100 = (char *)a2 + v98;
      v101 = *(_OWORD *)v100;
      *(_QWORD *)(v99 + 13) = *(_QWORD *)(v100 + 13);
      *(_OWORD *)v99 = v101;
      v102 = v7[37];
      v103 = (char *)a1 + v102;
      v104 = (char *)a2 + v102;
      v105 = *(_QWORD *)v104;
      v103[8] = v104[8];
      *(_QWORD *)v103 = v105;
      v106 = v7[38];
      v107 = (char *)a1 + v106;
      v108 = (char *)a2 + v106;
      LODWORD(v105) = *(_DWORD *)v108;
      v107[4] = v108[4];
      *(_DWORD *)v107 = v105;
      v109 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v110 = v109[5];
      v111 = (char *)a1 + v110;
      v112 = (char *)a2 + v110;
      v113 = *(_QWORD *)((char *)a2 + v110 + 24);
      swift_bridgeObjectRetain();
      if (v113)
      {
        *((_QWORD *)v111 + 3) = v113;
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        (**(void (***)(char *, char *, uint64_t))(v113 - 8))(v111, v112, v113);
      }
      else
      {
        v133 = *(_OWORD *)v112;
        v134 = *((_OWORD *)v112 + 1);
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        *(_OWORD *)v111 = v133;
        *((_OWORD *)v111 + 1) = v134;
      }
      *((_BYTE *)a1 + v109[6]) = *((_BYTE *)a2 + v109[6]);
      *(_QWORD *)((char *)a1 + v109[7]) = *(_QWORD *)((char *)a2 + v109[7]);
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v15 = v14[10];
      __dsta = (char *)a1 + v15;
      v16 = (char *)a2 + v15;
      v17 = sub_21C458BF4();
      v142 = *(_QWORD *)(v17 - 8);
      v144 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v144(v16, 1, v17))
      {
        v18 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dsta, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v142 + 16))(__dsta, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(__dsta, 0, 1, v17);
      }
      v36 = v14[11];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = v14[12];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      v42 = *(_QWORD *)v41;
      v40[8] = v41[8];
      *(_QWORD *)v40 = v42;
      v43 = v14[13];
      v44 = (_QWORD *)((char *)a1 + v43);
      v45 = (_QWORD *)((char *)a2 + v43);
      *v44 = *v45;
      v44[1] = v45[1];
      v46 = v14[14];
      v47 = (char *)a1 + v46;
      v48 = (char *)a2 + v46;
      v49 = sub_21C458C60();
      v50 = *(_QWORD *)(v49 - 8);
      v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v48, 1, v49))
      {
        v52 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      v66 = v14[15];
      v67 = (_QWORD *)((char *)a1 + v66);
      v68 = (_QWORD *)((char *)a2 + v66);
      *v67 = *v68;
      v67[1] = v68[1];
      v69 = v14[16];
      v70 = (_QWORD *)((char *)a1 + v69);
      v71 = (_QWORD *)((char *)a2 + v69);
      *v70 = *v71;
      v70[1] = v71[1];
      *((_BYTE *)a1 + v14[17]) = *((_BYTE *)a2 + v14[17]);
      *(_QWORD *)((char *)a1 + v14[18]) = *(_QWORD *)((char *)a2 + v14[18]);
      *((_BYTE *)a1 + v14[19]) = *((_BYTE *)a2 + v14[19]);
      *((_BYTE *)a1 + v14[20]) = *((_BYTE *)a2 + v14[20]);
      *((_BYTE *)a1 + v14[21]) = *((_BYTE *)a2 + v14[21]);
      *((_BYTE *)a1 + v14[22]) = *((_BYTE *)a2 + v14[22]);
      *((_BYTE *)a1 + v14[23]) = *((_BYTE *)a2 + v14[23]);
      *((_BYTE *)a1 + v14[24]) = *((_BYTE *)a2 + v14[24]);
      *((_BYTE *)a1 + v14[25]) = *((_BYTE *)a2 + v14[25]);
      *((_BYTE *)a1 + v14[26]) = *((_BYTE *)a2 + v14[26]);
      *((_BYTE *)a1 + v14[27]) = *((_BYTE *)a2 + v14[27]);
      *((_BYTE *)a1 + v14[28]) = *((_BYTE *)a2 + v14[28]);
      *((_BYTE *)a1 + v14[29]) = *((_BYTE *)a2 + v14[29]);
      v72 = v14[30];
      v73 = (_QWORD *)((char *)a1 + v72);
      v74 = (_QWORD *)((char *)a2 + v72);
      *v73 = *v74;
      v73[1] = v74[1];
      v75 = v14[31];
      v76 = (char *)a1 + v75;
      v77 = (char *)a2 + v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v77, 1, v49))
      {
        v78 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v76, v77, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v76, 0, 1, v49);
      }
      v87 = v14[32];
      v88 = (char *)a1 + v87;
      v89 = (char *)a2 + v87;
      v90 = *(_QWORD *)v89;
      v88[8] = v89[8];
      *(_QWORD *)v88 = v90;
      *(_QWORD *)((char *)a1 + v14[33]) = *(_QWORD *)((char *)a2 + v14[33]);
      v91 = v14[34];
      v92 = (char *)a1 + v91;
      v93 = (char *)a2 + v91;
      if (v51((char *)a2 + v91, 1, v49))
      {
        v94 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v92, v93, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v92, 0, 1, v49);
      }
      v114 = v14[35];
      v115 = (_QWORD *)((char *)a1 + v114);
      v116 = (_QWORD *)((char *)a2 + v114);
      *v115 = *v116;
      v115[1] = v116[1];
      v117 = v14[36];
      v118 = (char *)a1 + v117;
      v119 = (char *)a2 + v117;
      v120 = *(_OWORD *)v119;
      *(_QWORD *)(v118 + 13) = *(_QWORD *)(v119 + 13);
      *(_OWORD *)v118 = v120;
      v121 = v14[37];
      v122 = (char *)a1 + v121;
      v123 = (char *)a2 + v121;
      v124 = *(_QWORD *)v123;
      v122[8] = v123[8];
      *(_QWORD *)v122 = v124;
      v125 = v14[38];
      v126 = (char *)a1 + v125;
      v127 = (char *)a2 + v125;
      LODWORD(v124) = *(_DWORD *)v127;
      v126[4] = v127[4];
      *(_DWORD *)v126 = v124;
      v128 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v129 = v128[5];
      v130 = (char *)a1 + v129;
      v131 = (char *)a2 + v129;
      v132 = *(_QWORD *)((char *)a2 + v129 + 24);
      swift_bridgeObjectRetain();
      if (v132)
      {
        *((_QWORD *)v130 + 3) = v132;
        *((_QWORD *)v130 + 4) = *((_QWORD *)v131 + 4);
        (**(void (***)(char *, char *, uint64_t))(v132 - 8))(v130, v131, v132);
      }
      else
      {
        v135 = *(_OWORD *)v131;
        v136 = *((_OWORD *)v131 + 1);
        *((_QWORD *)v130 + 4) = *((_QWORD *)v131 + 4);
        *(_OWORD *)v130 = v135;
        *((_OWORD *)v130 + 1) = v136;
      }
      *((_BYTE *)a1 + v128[6]) = *((_BYTE *)a2 + v128[6]);
      *(_QWORD *)((char *)a1 + v128[7]) = *(_QWORD *)((char *)a2 + v128[7]);
      swift_bridgeObjectRetain();
      v137 = *(int *)(sub_21C3E344C(&qword_25527AD20) + 48);
      v138 = *(void **)((char *)a2 + v137);
      *(_QWORD *)((char *)a1 + v137) = v138;
      v139 = v138;
    }
    swift_storeEnumTagMultiPayload();
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

char *initializeWithTake for AudiobookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;

  v6 = sub_21C3E344C(&qword_25527A390);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v16 = v15[10];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = sub_21C458BF4();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    v32 = v15[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    v35 = v15[14];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = sub_21C458C60();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      v41 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    v46 = v15[31];
    v47 = &a1[v46];
    v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    v57 = v15[32];
    v58 = &a1[v57];
    v59 = &a2[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
    v60 = v15[34];
    v61 = &a1[v60];
    v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      v63 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    v79 = v15[36];
    v80 = &a1[v79];
    v81 = &a2[v79];
    *(_QWORD *)(v80 + 13) = *(_QWORD *)(v81 + 13);
    *(_OWORD *)v80 = *(_OWORD *)v81;
    v82 = v15[37];
    v83 = &a1[v82];
    v84 = &a2[v82];
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v83[8] = v84[8];
    v85 = v15[38];
    v86 = &a1[v85];
    v87 = &a2[v85];
    *(_DWORD *)v86 = *(_DWORD *)v87;
    v86[4] = v87[4];
    v88 = (int *)type metadata accessor for LibraryAudiobookInfo();
    v89 = v88[5];
    v90 = &a1[v89];
    v91 = &a2[v89];
    v92 = *((_OWORD *)v91 + 1);
    *(_OWORD *)v90 = *(_OWORD *)v91;
    *((_OWORD *)v90 + 1) = v92;
    *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
    a1[v88[6]] = a2[v88[6]];
    *(_QWORD *)&a1[v88[7]] = *(_QWORD *)&a2[v88[7]];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v9 = v8[10];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_21C458BF4();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    v22 = v8[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v23[8] = v24[8];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    v25 = v8[14];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = sub_21C458C60();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      v31 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    v42 = v8[31];
    v43 = &a1[v42];
    v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      v45 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    v50 = v8[32];
    v51 = &a1[v50];
    v52 = &a2[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
    v53 = v8[34];
    v54 = &a1[v53];
    v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    v64 = v8[36];
    v65 = &a1[v64];
    v66 = &a2[v64];
    *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    v67 = v8[37];
    v68 = &a1[v67];
    v69 = &a2[v67];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v69[8];
    v70 = v8[38];
    v71 = &a1[v70];
    v72 = &a2[v70];
    *(_DWORD *)v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    v73 = (int *)type metadata accessor for LibraryAudiobookInfo();
    v74 = v73[5];
    v75 = &a1[v74];
    v76 = &a2[v74];
    v77 = *((_OWORD *)v76 + 1);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v77;
    *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    a1[v73[6]] = a2[v73[6]];
    *(_QWORD *)&a1[v73[7]] = *(_QWORD *)&a2[v73[7]];
    v78 = sub_21C3E344C(&qword_25527AD20);
    *(_QWORD *)&a1[*(int *)(v78 + 48)] = *(_QWORD *)&a2[*(int *)(v78 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_31:
  v93 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v93] = a2[v93];
  return a1;
}

char *assignWithTake for AudiobookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;

  if (a1 != a2)
  {
    sub_21C423BA0((uint64_t)a1);
    v6 = sub_21C3E344C(&qword_25527A390);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v16 = v15[10];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_21C458BF4();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      v32 = v15[12];
      v33 = &a1[v32];
      v34 = &a2[v32];
      v33[8] = v34[8];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      v35 = v15[14];
      v36 = &a1[v35];
      v37 = &a2[v35];
      v38 = sub_21C458C60();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        v41 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      v46 = v15[31];
      v47 = &a1[v46];
      v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        v49 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      v57 = v15[32];
      v58 = &a1[v57];
      v59 = &a2[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
      v60 = v15[34];
      v61 = &a1[v60];
      v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        v63 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      v79 = v15[36];
      v80 = &a1[v79];
      v81 = &a2[v79];
      *(_QWORD *)(v80 + 13) = *(_QWORD *)(v81 + 13);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      v82 = v15[37];
      v83 = &a1[v82];
      v84 = &a2[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v83[8] = v84[8];
      v85 = v15[38];
      v86 = &a1[v85];
      v87 = &a2[v85];
      *(_DWORD *)v86 = *(_DWORD *)v87;
      v86[4] = v87[4];
      v88 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v89 = v88[5];
      v90 = &a1[v89];
      v91 = &a2[v89];
      v92 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v92;
      *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
      a1[v88[6]] = a2[v88[6]];
      *(_QWORD *)&a1[v88[7]] = *(_QWORD *)&a2[v88[7]];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v9 = v8[10];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_21C458BF4();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      v22 = v8[12];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v23[8] = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      v25 = v8[14];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = sub_21C458C60();
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        v31 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      v42 = v8[31];
      v43 = &a1[v42];
      v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        v45 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      v50 = v8[32];
      v51 = &a1[v50];
      v52 = &a2[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
      v53 = v8[34];
      v54 = &a1[v53];
      v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        v56 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      v64 = v8[36];
      v65 = &a1[v64];
      v66 = &a2[v64];
      *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      v67 = v8[37];
      v68 = &a1[v67];
      v69 = &a2[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v8[38];
      v71 = &a1[v70];
      v72 = &a2[v70];
      *(_DWORD *)v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      v73 = (int *)type metadata accessor for LibraryAudiobookInfo();
      v74 = v73[5];
      v75 = &a1[v74];
      v76 = &a2[v74];
      v77 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v77;
      *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
      a1[v73[6]] = a2[v73[6]];
      *(_QWORD *)&a1[v73[7]] = *(_QWORD *)&a2[v73[7]];
      v78 = sub_21C3E344C(&qword_25527AD20);
      *(_QWORD *)&a1[*(int *)(v78 + 48)] = *(_QWORD *)&a2[*(int *)(v78 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_32:
  v93 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  a1[v93] = a2[v93];
  return a1;
}

uint64_t getEnumTagSinglePayload for AudiobookInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C4273FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_21C3E344C(&qword_25527A390);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AudiobookInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C427484(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527A390);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

void sub_21C427500()
{
  unint64_t v0;

  sub_21C42757C(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C42757C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527B110)
  {
    v2 = type metadata accessor for LibraryAudiobookInfo();
    v3 = type metadata accessor for MAudiobook();
    v5 = type metadata accessor for ContentDataSource(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25527B110);
  }
}

uint64_t MRequestMetadata.fileID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MRequestMetadata.line.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t MRequestMetadata.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t sub_21C427620()
{
  _BYTE *v0;

  if (*v0)
    return 1701734764;
  else
    return 0x4449656C6966;
}

uint64_t sub_21C427650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_21C4282D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_21C427674()
{
  return 0;
}

void sub_21C427680(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_21C42768C()
{
  sub_21C42780C();
  return sub_21C459614();
}

uint64_t sub_21C4276B4()
{
  sub_21C42780C();
  return sub_21C459620();
}

uint64_t MRequestMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v4 = sub_21C3E344C(&qword_25527B148);
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v1 + 16);
  sub_21C3E359C(a1, a1[3]);
  sub_21C42780C();
  sub_21C459608();
  v12 = 0;
  sub_21C4594B8();
  if (!v2)
  {
    v11 = 1;
    sub_21C4594C4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v4);
}

unint64_t sub_21C42780C()
{
  unint64_t result;

  result = qword_25527B150;
  if (!qword_25527B150)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45D64C, &type metadata for MRequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25527B150);
  }
  return result;
}

uint64_t MRequestMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;

  v5 = sub_21C3E344C(&qword_25527B158);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E359C(a1, a1[3]);
  sub_21C42780C();
  sub_21C4595FC();
  if (v2)
    return sub_21C3E2754((uint64_t)a1);
  v16 = 0;
  v9 = sub_21C4594A0();
  v11 = v10;
  v15 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_21C4594AC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  sub_21C3E2754((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C4279D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MRequestMetadata.init(from:)(a1, a2);
}

uint64_t sub_21C4279E8(_QWORD *a1)
{
  return MRequestMetadata.encode(to:)(a1);
}

void __swiftcall BFMRequestMetadata.init(fileID:line:)(BFMRequestMetadata *__return_ptr retstr, Swift::String fileID, Swift::Int32 line)
{
  uint64_t v3;
  id v4;
  void *v5;

  v3 = *(_QWORD *)&line;
  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithFileID_line_, v5, v3);

}

id BFMRequestMetadata.init(fileID:line:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  objc_super v6;

  v4 = v3 + OBJC_IVAR___BFMRequestMetadata_impl;
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = a2;
  *(_DWORD *)(v4 + 16) = a3;
  v6.super_class = (Class)BFMRequestMetadata;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t BFMRequestMetadata.fileID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___BFMRequestMetadata_impl);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BFMRequestMetadata.line.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
}

void __swiftcall BFMRequestMetadata.init()(BFMRequestMetadata *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void BFMRequestMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __swiftcall MRequestMetadata._bridgeToObjectiveC()(BFMRequestMetadata *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;

  v2 = *(unsigned int *)(v1 + 16);
  v3 = objc_allocWithZone((Class)BFMRequestMetadata);
  swift_bridgeObjectRetain();
  v4 = (void *)sub_21C458E40();
  objc_msgSend(v3, sel_initWithFileID_line_, v4, v2);

  swift_bridgeObjectRelease();
}

uint64_t static MRequestMetadata._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t static MRequestMetadata._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t static MRequestMetadata._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    v2 = a1 + OBJC_IVAR___BFMRequestMetadata_impl;
    v4 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
    v3 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
    LODWORD(v2) = *(_DWORD *)(v2 + 16);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v3;
    *(_DWORD *)(a2 + 16) = v2;
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_21C459350();
    swift_bridgeObjectRelease();
    type metadata accessor for BFMRequestMetadata();
    sub_21C45962C();
    sub_21C458F00();
    swift_bridgeObjectRelease();
    sub_21C458F00();
    sub_21C458F00();
    result = sub_21C459404();
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for BFMRequestMetadata()
{
  unint64_t result;

  result = qword_25527B190;
  if (!qword_25527B190)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25527B190);
  }
  return result;
}

id sub_21C427EA8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(unsigned int *)(v0 + 16);
  v2 = objc_allocWithZone((Class)BFMRequestMetadata);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_21C458E40();
  v4 = objc_msgSend(v2, sel_initWithFileID_line_, v3, v1);

  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_21C427F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C427F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 8);
  v5 = *(_DWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + OBJC_IVAR___BFMRequestMetadata_impl);
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t sub_21C427FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MRequestMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for MRequestMetadata(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MRequestMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MRequestMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MRequestMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MRequestMetadata()
{
  return &type metadata for MRequestMetadata;
}

uint64_t storeEnumTagSinglePayload for MRequestMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C428178 + 4 * byte_21C45D4B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C4281AC + 4 * byte_21C45D4B0[v4]))();
}

uint64_t sub_21C4281AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4281B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C4281BCLL);
  return result;
}

uint64_t sub_21C4281C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C4281D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C4281D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4281DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MRequestMetadata.CodingKeys()
{
  return &type metadata for MRequestMetadata.CodingKeys;
}

unint64_t sub_21C4281FC()
{
  unint64_t result;

  result = qword_25527B198;
  if (!qword_25527B198)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45D624, &type metadata for MRequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25527B198);
  }
  return result;
}

unint64_t sub_21C428244()
{
  unint64_t result;

  result = qword_25527B1A0;
  if (!qword_25527B1A0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45D594, &type metadata for MRequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25527B1A0);
  }
  return result;
}

unint64_t sub_21C42828C()
{
  unint64_t result;

  result = qword_25527B1A8;
  if (!qword_25527B1A8)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45D5BC, &type metadata for MRequestMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25527B1A8);
  }
  return result;
}

uint64_t sub_21C4282D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_21C4594F4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701734764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Dictionary<>.BOOLValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_21C45191C(a1, a2);
  if ((v7 & 1) == 0)
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_21C3E5528(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_8:
    sub_21C3E54E8((uint64_t)&v12);
    goto LABEL_9;
  }
  sub_21C3E8498(&v12, v14);
  sub_21C3E5528((uint64_t)v14, (uint64_t)&v12);
  if (swift_dynamicCast())
  {
    sub_21C3E2754((uint64_t)v14);
    v8 = v10;
LABEL_20:
    sub_21C3E2754((uint64_t)&v12);
    return v8 & 1;
  }
  if (swift_dynamicCast())
  {
    sub_21C3E2754((uint64_t)v14);
    v8 = v10 != 0;
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    if (v10 == 1702195828 && v11 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v8 = 1;
    }
    else
    {
      v8 = sub_21C4594F4();
      swift_bridgeObjectRelease();
    }
    sub_21C3E2754((uint64_t)v14);
    goto LABEL_20;
  }
  sub_21C3E2754((uint64_t)v14);
  sub_21C3E2754((uint64_t)&v12);
LABEL_9:
  v8 = 0;
  return v8 & 1;
}

uint64_t Dictionary<>.intValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  _QWORD v30[3];
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v33 = 0u;
    v34 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_21C45191C(a1, a2);
  if ((v7 & 1) == 0)
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_21C3E5528(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_8:
    sub_21C3E54E8((uint64_t)&v33);
    return 0;
  }
  sub_21C3E8498(&v33, v35);
  sub_21C3E5528((uint64_t)v35, (uint64_t)&v33);
  if (swift_dynamicCast())
  {
    sub_21C3E2754((uint64_t)v35);
    v8 = v31;
    sub_21C3E2754((uint64_t)&v33);
    return v8;
  }
  if (!swift_dynamicCast())
  {
    sub_21C3E2754((uint64_t)v35);
    sub_21C3E2754((uint64_t)&v33);
    return 0;
  }
  result = v31;
  v10 = HIBYTE(v32) & 0xF;
  v11 = v31 & 0xFFFFFFFFFFFFLL;
  if ((v32 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v32) & 0xF;
  else
    v12 = v31 & 0xFFFFFFFFFFFFLL;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_59:
    sub_21C3E2754((uint64_t)v35);
    sub_21C3E2754((uint64_t)&v33);
    return v8;
  }
  if ((v32 & 0x1000000000000000) != 0)
  {
    v14 = (uint64_t)sub_21C4291EC(v31, v32, 10);
    v16 = v29;
LABEL_56:
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      v8 = 0;
    else
      v8 = v14;
    goto LABEL_59;
  }
  if ((v32 & 0x2000000000000000) == 0)
  {
    if ((v31 & 0x1000000000000000) != 0)
      v13 = (unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v13 = (unsigned __int8 *)sub_21C45938C();
    v14 = (uint64_t)sub_21C4292D0(v13, v11, 10);
    v16 = v15 & 1;
    goto LABEL_56;
  }
  v30[0] = v31;
  v30[1] = v32 & 0xFFFFFFFFFFFFFFLL;
  if (v31 == 43)
  {
    if (!v10)
      goto LABEL_70;
    if (v10 == 1 || (BYTE1(v31) - 48) > 9u)
      goto LABEL_43;
    v14 = (BYTE1(v31) - 48);
    if (v10 != 2)
    {
      if ((BYTE2(v31) - 48) > 9u)
        goto LABEL_43;
      v14 = 10 * (BYTE1(v31) - 48) + (BYTE2(v31) - 48);
      v17 = v10 - 3;
      if (v17)
      {
        v18 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v19 = *v18 - 48;
          if (v19 > 9)
            goto LABEL_43;
          v20 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
            goto LABEL_43;
          v14 = v20 + v19;
          if (__OFADD__(v20, v19))
            goto LABEL_43;
          v16 = 0;
          ++v18;
          if (!--v17)
            goto LABEL_56;
        }
      }
    }
LABEL_55:
    v16 = 0;
    goto LABEL_56;
  }
  if (v31 != 45)
  {
    if (!v10 || (v31 - 48) > 9u)
      goto LABEL_43;
    v14 = (v31 - 48);
    if (v10 != 1)
    {
      if ((BYTE1(v31) - 48) > 9u)
        goto LABEL_43;
      v14 = 10 * (v31 - 48) + (BYTE1(v31) - 48);
      v21 = v10 - 2;
      if (v21)
      {
        v22 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            goto LABEL_43;
          v24 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
            goto LABEL_43;
          v14 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_43;
          v16 = 0;
          ++v22;
          if (!--v21)
            goto LABEL_56;
        }
      }
    }
    goto LABEL_55;
  }
  if (v10)
  {
    if (v10 != 1 && (BYTE1(v31) - 48) <= 9u)
    {
      if (v10 == 2)
      {
        v16 = 0;
        v14 = -(uint64_t)(BYTE1(v31) - 48);
        goto LABEL_56;
      }
      if ((BYTE2(v31) - 48) <= 9u)
      {
        v14 = -10 * (BYTE1(v31) - 48) - (BYTE2(v31) - 48);
        v25 = v10 - 3;
        if (!v25)
          goto LABEL_55;
        v26 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            break;
          v28 = 10 * v14;
          if ((unsigned __int128)(v14 * (__int128)10) >> 64 != (10 * v14) >> 63)
            break;
          v14 = v28 - v27;
          if (__OFSUB__(v28, v27))
            break;
          v16 = 0;
          ++v26;
          if (!--v25)
            goto LABEL_56;
        }
      }
    }
LABEL_43:
    v14 = 0;
    v16 = 1;
    goto LABEL_56;
  }
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.doubleValue(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];

  if (!*(_QWORD *)(a3 + 16))
  {
    v18 = 0u;
    v19 = 0u;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v6 = sub_21C45191C(a1, a2);
  if ((v7 & 1) == 0)
  {
    v18 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_21C3E5528(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v18);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v19 + 1))
  {
LABEL_9:
    sub_21C3E54E8((uint64_t)&v18);
    goto LABEL_10;
  }
  sub_21C3E8498(&v18, v20);
  sub_21C3E5528((uint64_t)v20, (uint64_t)&v18);
  if (swift_dynamicCast())
  {
    sub_21C3E2754((uint64_t)v20);
    v8 = *(double *)&v16;
LABEL_6:
    sub_21C3E2754((uint64_t)&v18);
    return *(_QWORD *)&v8;
  }
  v10 = swift_dynamicCast();
  if (!(_DWORD)v10)
  {
    sub_21C3E2754((uint64_t)v20);
    if (swift_dynamicCast())
    {
      v8 = (double)v16;
      goto LABEL_6;
    }
    sub_21C3E2754((uint64_t)&v18);
LABEL_10:
    v8 = 0.0;
    return *(_QWORD *)&v8;
  }
  v11 = MEMORY[0x24BDAC7A8](v10);
  if ((v17 & 0x1000000000000000) != 0 || !(v17 & 0x2000000000000000 | v12 & 0x1000000000000000))
  {
    sub_21C459344();
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x24BDAC7A8](v11);
    if ((v17 & 0x2000000000000000) != 0)
    {
      if (v13 > 0x20u || ((0x100003E01uLL >> v13) & 1) == 0)
        _swift_stdlib_strtod_clocale();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v13 & 0x1000000000000000) != 0)
      {
        v14 = (v17 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v15 = v13 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v14 = sub_21C45938C();
      }
      sub_21C409FFC(v14, v15, (void (*)(uint64_t *__return_ptr))sub_21C4295B8);
      swift_bridgeObjectRelease();
    }
  }
  v8 = 0.0;
  sub_21C3E2754((uint64_t)v20);
  sub_21C3E2754((uint64_t)&v18);
  return *(_QWORD *)&v8;
}

_QWORD *sub_21C428C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21C3E344C(&qword_25527A878);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_21C428CA4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_21C458F54();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x22077B5BC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_21C428D1C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_21C458F84();
  v4 = sub_21C428D98(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_21C428D98(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_21C428EDC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_21C428C40(v9, 0);
      v12 = sub_21C428FC8((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x22077B544](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x22077B544);
LABEL_9:
      sub_21C45938C();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x22077B544]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_21C428EDC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_21C428CA4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_21C428CA4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_21C458F3C();
  }
  __break(1u);
  return result;
}

unint64_t sub_21C428FC8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_21C428CA4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_21C458F48();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_21C45938C();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_21C428CA4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_21C458F24();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unsigned __int8 *sub_21C4291D8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_21C4292D0(a1, a2, a3);
}

unsigned __int8 *sub_21C4291EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_21C458F78();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_21C428D1C();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_21C45938C();
  }
LABEL_7:
  v11 = sub_21C4292D0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_21C4292D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

_BYTE *sub_21C42954C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

_QWORD *sub_21C4295B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_21C40A050(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_21C4295D0()
{
  return static Notificationable.Name.getter();
}

uint64_t sub_21C4295E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Notificationable.init(notification:)(a1, a2, a3);
}

uint64_t Notificationable.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458A74();
  if (!v9)
    goto LABEL_6;
  v10 = sub_21C41720C(v9);
  swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_6;
  v11 = (void *)objc_opt_self();
  v12 = (void *)sub_21C458D68();
  swift_bridgeObjectRelease();
  v25[0] = 0;
  v13 = objc_msgSend(v11, sel_dataWithJSONObject_options_error_, v12, 1, v25);

  v14 = v25[0];
  if (!v13)
  {
    v18 = v14;
    v19 = (void *)sub_21C458B7C();

    swift_willThrow();
LABEL_6:
    v20 = sub_21C458A80();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
    v23 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, v23, 1, a2);
  }
  v15 = sub_21C458C0C();
  v17 = v16;

  sub_21C4589FC();
  swift_allocObject();
  sub_21C4589F0();
  sub_21C4589E4();
  v22 = sub_21C458A80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(a1, v22);
  swift_release();
  sub_21C3E38B0(v15, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
  v23 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a3, v23, 1, a2);
}

uint64_t Notificationable.toNotification(object:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  id v21[4];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_21C458A20();
  swift_allocObject();
  sub_21C458A14();
  v8 = sub_21C458A08();
  v10 = v9;
  swift_release();
  v11 = (void *)objc_opt_self();
  v12 = (void *)sub_21C458C00();
  v21[0] = 0;
  v13 = objc_msgSend(v11, sel_JSONObjectWithData_options_error_, v12, 4, v21);

  v14 = v21[0];
  if (v13)
  {
    sub_21C4592CC();
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = v14;
    v16 = (void *)sub_21C458B7C();

    swift_willThrow();
    memset(v22, 0, sizeof(v22));
  }
  sub_21C429B4C((uint64_t)v22, (uint64_t)v21);
  if (v21[3])
  {
    sub_21C3E344C(&qword_25527B1B0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
      sub_21C429B4C(a1, (uint64_t)v21);
      sub_21C429B94(v20);
      swift_bridgeObjectRelease();
      sub_21C458A68();
      sub_21C3E38B0(v8, v10);
      sub_21C3E54E8((uint64_t)v22);
      v17 = sub_21C458A80();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a4, 0, 1, v17);
    }
    sub_21C3E38B0(v8, v10);
  }
  else
  {
    sub_21C3E38B0(v8, v10);
    sub_21C3E54E8((uint64_t)v21);
  }
  sub_21C3E54E8((uint64_t)v22);
  v19 = sub_21C458A80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a4, 1, 1, v19);
}

uint64_t sub_21C429B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_254078EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C429B94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_21C3E344C(&qword_25527ADE0);
    v2 = sub_21C459458();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_37;
      v14 = *(_QWORD *)(v28 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_37;
        v14 = *(_QWORD *)(v28 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_37;
          v14 = *(_QWORD *)(v28 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_21C3E5528(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_21C3E8498(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_21C3E8498(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_21C3E8498(v36, v37);
    sub_21C3E8498(v37, &v33);
    result = sub_21C4592FC();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(_QWORD *)(v10 + 32) = v31;
    result = (uint64_t)sub_21C3E8498(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_21C4184B0();
    return v2;
  }
  v14 = *(_QWORD *)(v28 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v27)
      goto LABEL_37;
    v14 = *(_QWORD *)(v28 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static Notificationable.Name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Notificationable.init(notification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Notificationable.toNotification(object:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

unint64_t sub_21C429F70(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t result;
  int64_t i;
  ValueMetadata *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  ValueMetadata *v14;
  uint64_t *v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t *v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_21C3E344C(&qword_25527A0A0);
    v2 = (_QWORD *)sub_21C459458();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v30 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v29 = (unint64_t)(63 - v3) >> 6;
  v6 = &v35;
  result = swift_bridgeObjectRetain();
  i = 0;
  v9 = &type metadata for MResourceType;
  v10 = &qword_25527A068;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v17 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v17 >= v29)
    goto LABEL_32;
  v18 = *(_QWORD *)(v30 + 8 * v17);
  v19 = i + 1;
  if (!v18)
  {
    v19 = i + 2;
    if (i + 2 >= v29)
      goto LABEL_32;
    v18 = *(_QWORD *)(v30 + 8 * v19);
    if (!v18)
    {
      v19 = i + 3;
      if (i + 3 >= v29)
        goto LABEL_32;
      v18 = *(_QWORD *)(v30 + 8 * v19);
      if (!v18)
      {
        v19 = i + 4;
        if (i + 4 >= v29)
          goto LABEL_32;
        v18 = *(_QWORD *)(v30 + 8 * v19);
        if (!v18)
        {
          v20 = i + 5;
          if (i + 5 < v29)
          {
            v18 = *(_QWORD *)(v30 + 8 * v20);
            if (v18)
            {
              v19 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v19 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_36;
              if (v19 >= v29)
                break;
              v18 = *(_QWORD *)(v30 + 8 * v19);
              ++v20;
              if (v18)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_21C4184B0();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v32 = (v18 - 1) & v18;
  v16 = __clz(__rbit64(v18)) + (v19 << 6);
  for (i = v19; ; v16 = __clz(__rbit64(v5)) | (i << 6))
  {
    v21 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v16);
    v33 = *v21;
    v34 = v21[1];
    swift_bridgeObjectRetain();
    sub_21C3E344C(v10);
    swift_dynamicCast();
    v22 = v35;
    result = sub_21C45191C(v33, v34);
    v23 = result;
    if ((v24 & 1) != 0)
    {
      v31 = i;
      v11 = v1;
      v12 = v10;
      v13 = v6;
      v14 = v9;
      v15 = (uint64_t *)(v2[6] + 16 * result);
      result = swift_bridgeObjectRelease();
      *v15 = v33;
      v15[1] = v34;
      v9 = v14;
      v6 = v13;
      v10 = v12;
      v1 = v11;
      *(_BYTE *)(v2[7] + v23) = v22;
      i = v31;
      v5 = v32;
      if (!v32)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v25 = (uint64_t *)(v2[6] + 16 * result);
    *v25 = v33;
    v25[1] = v34;
    *(_BYTE *)(v2[7] + result) = v22;
    v26 = v2[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_34;
    v2[2] = v28;
    v5 = v32;
    if (!v32)
      goto LABEL_11;
LABEL_10:
    v32 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t MCatalogRequest.fetch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v2 = sub_21C458BF4();
  *(_QWORD *)(v1 + 208) = v2;
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v2 - 8);
  v3 = swift_task_alloc();
  v4 = *(void **)v0;
  v5 = *(void **)(v0 + 8);
  *(_QWORD *)(v1 + 224) = v3;
  *(_QWORD *)(v1 + 232) = v4;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 240) = v5;
  *(_QWORD *)(v1 + 248) = v6;
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 256) = v7;
  *(_QWORD *)(v1 + 264) = v8;
  v10 = *(void **)(v0 + 48);
  *(_QWORD *)(v1 + 272) = v9;
  *(_QWORD *)(v1 + 280) = v10;
  *(_BYTE *)(v1 + 193) = *(_BYTE *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 288) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 296) = v11;
  v12 = *(void **)(v0 + 80);
  *(_QWORD *)(v1 + 304) = v12;
  swift_bridgeObjectRetain();
  v13 = v12;
  v14 = v4;
  v15 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v10;
  return swift_task_switch();
}

uint64_t sub_21C42A358()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend(*(id *)(v0 + 304), sel_isBooksStoreEnabled);
  *(_QWORD *)(v0 + 312) = v1;
  *(_QWORD *)(v0 + 56) = v0 + 184;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_21C42A410;
  v2 = swift_continuation_init();
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
  v3 = (_QWORD *)(v0 + 144);
  v3[1] = 0x40000000;
  v3[2] = sub_21C42B0C8;
  v3[3] = &unk_24E041918;
  v3[4] = v2;
  objc_msgSend(v1, sel_valueWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_21C42A410()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 320) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21C42A470()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD *v19;
  _QWORD *v21;
  void *v22;
  void *v23;

  v22 = *(void **)(v0 + 304);
  v1 = *(void **)(v0 + 280);
  v2 = *(void **)(v0 + 240);
  v3 = *(void **)(v0 + 232);
  v4 = *(void **)(v0 + 184);

  v5 = objc_msgSend(v4, sel_BOOLValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 296);
    v23 = *(void **)(v0 + 304);
    v7 = *(_BYTE *)(v0 + 193);
    v9 = *(void **)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(void **)(v0 + 232);
    v14 = *(void **)(v0 + 240);
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 88) = v12;
    *(_QWORD *)(v0 + 96) = v11;
    *(_QWORD *)(v0 + 104) = v10;
    *(_QWORD *)(v0 + 112) = v9;
    *(_BYTE *)(v0 + 120) = v7;
    *(_QWORD *)(v0 + 128) = v8;
    *(_QWORD *)(v0 + 136) = v6;
    v15 = v13;
    v16 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v9;
    swift_bridgeObjectRetain();
    v18 = v23;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v19;
    *v19 = v0;
    v19[1] = sub_21C42A6E0;
    return MCatalogRequestURLBuilder.build()(*(_QWORD *)(v0 + 224));
  }
  else
  {
    sub_21C42B158();
    swift_allocError();
    *v21 = 0;
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_21C42A628()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v6;

  v1 = *(void **)(v0 + 312);
  v6 = *(void **)(v0 + 304);
  v2 = *(void **)(v0 + 280);
  v3 = *(void **)(v0 + 240);
  v4 = *(void **)(v0 + 232);
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C42A6E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(void **)(v2 + 304);
    v4 = *(void **)(v2 + 280);
    v5 = *(void **)(v2 + 240);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_21C42A7B0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (void *)v0[29];
  v1 = (void *)v0[30];
  v3 = (void *)sub_21C458BAC();
  v4 = objc_msgSend(v2, sel_requestWithURL_, v3);
  v0[43] = v4;

  v5 = objc_msgSend(v1, sel_dataTaskPromiseWithRequestPromise_, v4);
  v0[44] = v5;
  v6 = swift_task_alloc();
  v0[45] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  v7 = (_QWORD *)swift_task_alloc();
  v0[46] = v7;
  sub_21C42B1A4();
  *v7 = v0;
  v7[1] = sub_21C42A8BC;
  return sub_21C459530();
}

uint64_t sub_21C42A8BC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C42A928()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v1 = *(void **)(v0 + 304);
  v2 = *(void **)(v0 + 280);
  v3 = *(void **)(v0 + 240);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C42A9C0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(v0 + 344);
  v1 = *(void **)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v6 = *(void **)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE08230]), sel_initWithResult_, v6);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

uint64_t sub_21C42AA58()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 352);
  v2 = *(void **)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MCatalogRequest.init(with:config:bag:)(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v4 = *a2;
  v5 = (void *)objc_opt_self();
  v6 = a3;
  v7 = objc_msgSend(v5, sel_defaultSessionConfiguration);
  objc_msgSend(objc_allocWithZone(MEMORY[0x24BE08410]), sel_initWithConfiguration_, v7);

  __asm { BR              X9 }
}

__n128 sub_21C42AB98()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  __n128 result;
  char v15;
  uint64_t v16;
  __n128 v17;
  __int128 v18;

  v6 = objc_allocWithZone(MEMORY[0x24BE08240]);
  v7 = v2;
  v8 = v3;
  v9 = (void *)sub_21C458E40();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v6, sel_initWithClientIdentifier_bag_, v9, v7);

  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE08218]), sel_initWithTokenService_, v10);
  objc_msgSend(v8, sel_setProtocolHandler_, v11);

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE08220]), sel_initWithTokenService_bag_, v10, v7);
  objc_msgSend(v12, sel_setAccount_, v1);

  v13 = objc_msgSend((id)objc_opt_self(), sel_currentProcess);
  objc_msgSend(v12, sel_setClientInfo_, v13);

  *(_QWORD *)v0 = v12;
  *(_QWORD *)(v0 + 8) = v8;
  result = v17;
  *(_OWORD *)(v0 + 16) = v18;
  *(__n128 *)(v0 + 32) = v17;
  *(_QWORD *)(v0 + 48) = v16;
  *(_BYTE *)(v0 + 56) = v15;
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 80) = v7;
  return result;
}

unint64_t MCatalogRequest.RequestError.description.getter()
{
  void **v0;
  unint64_t v1;
  void *v2;
  id v3;

  v1 = 0xD000000000000019;
  v2 = *v0;
  if (!*v0)
    return 0xD000000000000036;
  if (v2 != (void *)1)
  {
    v3 = v2;
    sub_21C459350();
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    sub_21C459560();
    sub_21C458F00();
    swift_bridgeObjectRelease();
    sub_21C42B1E0(v2);
    return 0xD000000000000020;
  }
  return v1;
}

void sub_21C42AE60(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = sub_21C3E344C(&qword_25527B1D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_21C42B814;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_21C42B054;
  aBlock[3] = &unk_24E041A70;
  v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_addFinishBlock_, v9);
  _Block_release(v9);
}

uint64_t sub_21C42AF90(void *a1, void *a2)
{
  id v2;
  _QWORD *v5;
  id v6;
  _QWORD *v7;

  if (a1)
  {
    v2 = a1;
    sub_21C3E344C(&qword_25527B1D0);
    return sub_21C4590D4();
  }
  else
  {
    if (a2)
    {
      sub_21C42B158();
      swift_allocError();
      *v5 = a2;
      v6 = a2;
    }
    else
    {
      sub_21C42B158();
      swift_allocError();
      *v7 = 1;
    }
    sub_21C3E344C(&qword_25527B1D0);
    return sub_21C4590C8();
  }
}

void sub_21C42B054(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_21C42B0C8(uint64_t result, void *a2, char a3, void *a4)
{
  _QWORD *v5;
  id v6;
  uint64_t v7;
  id v8;

  if (a4)
  {
    sub_21C3E344C(&qword_25527ABC0);
    swift_allocError();
    *v5 = a4;
    v6 = a4;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40);
    *(_QWORD *)v7 = a2;
    *(_BYTE *)(v7 + 8) = a3;
    v8 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_21C42B158()
{
  unint64_t result;

  result = qword_25527B1C0;
  if (!qword_25527B1C0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MCatalogRequest.RequestError, &type metadata for MCatalogRequest.RequestError);
    atomic_store(result, (unint64_t *)&qword_25527B1C0);
  }
  return result;
}

void sub_21C42B19C(uint64_t a1)
{
  uint64_t v1;

  sub_21C42AE60(a1, *(void **)(v1 + 16));
}

unint64_t sub_21C42B1A4()
{
  unint64_t result;

  result = qword_25527B1C8;
  if (!qword_25527B1C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25527B1C8);
  }
  return result;
}

void sub_21C42B1E0(id a1)
{
  if ((unint64_t)a1 >= 2)

}

void destroy for MCatalogRequest(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = v3;
  v11 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v7;
  swift_bridgeObjectRetain();
  v13 = v9;
  return a1;
}

uint64_t assignWithCopy for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(void **)(a2 + 48);
  v11 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  v12 = v10;

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(void **)(a2 + 80);
  v14 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  v15 = v13;

  return a1;
}

__n128 initializeWithTake for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MCatalogRequest(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);

  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequest()
{
  return &type metadata for MCatalogRequest;
}

_QWORD *initializeBufferWithCopyOfBuffer for MCatalogRequest.RequestError(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for MCatalogRequest.RequestError(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for MCatalogRequest.RequestError(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
      v7 = v4;
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    v5 = v4;
    v6 = *a1;
    *a1 = v4;

  }
  return a1;
}

_QWORD *initializeWithTake for MCatalogRequest.RequestError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for MCatalogRequest.RequestError(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequest.RequestError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MCatalogRequest.RequestError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_21C42B768(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_21C42B780(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequest.RequestError()
{
  return &type metadata for MCatalogRequest.RequestError;
}

uint64_t sub_21C42B7B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_21C3E344C(&qword_25527B1D0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_21C42B814(void *a1, void *a2)
{
  sub_21C3E344C(&qword_25527B1D0);
  return sub_21C42AF90(a1, a2);
}

uint64_t LibraryBookSeriesInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C42B874(v1, a1);
}

uint64_t sub_21C42B874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527AFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LibraryBookSeriesInfo.kind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for LibraryBookSeriesInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for LibraryBookSeriesInfo()
{
  uint64_t result;

  result = qword_25527B2C0;
  if (!qword_25527B2C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LibraryBookSeriesInfo.init(commonInfo:kind:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = *a2;
  sub_21C42B960(a1, a3);
  result = type metadata accessor for LibraryBookSeriesInfo();
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_21C42B960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527AFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C42B9A8()
{
  return sub_21C3E871C(&qword_25527A4A8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookInfo, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
}

uint64_t sub_21C42B9D4(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B248, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C42BA10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C42B874(v1, a1);
}

uint64_t sub_21C42BA1C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B250, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C42BA58(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B258, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C42BA94(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B260, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LibraryBookSeriesInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = (int *)sub_21C3E344C(&qword_25527AFA8);
    v13 = v12[14];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_21C458BF4();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    *(_QWORD *)((char *)a1 + v12[15]) = *(_QWORD *)((char *)a2 + v12[15]);
    v20 = v12[16];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *(_QWORD *)((char *)a1 + v12[17]) = *(_QWORD *)((char *)a2 + v12[17]);
    *((_BYTE *)a1 + v12[18]) = *((_BYTE *)a2 + v12[18]);
    *(_QWORD *)((char *)a1 + v12[19]) = *(_QWORD *)((char *)a2 + v12[19]);
    *((_BYTE *)a1 + v12[20]) = *((_BYTE *)a2 + v12[20]);
    *((_BYTE *)a1 + v12[21]) = *((_BYTE *)a2 + v12[21]);
    v23 = v12[22];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v24[16] = v25[16];
    v27 = v12[23];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    *(_QWORD *)((char *)a1 + v12[24]) = *(_QWORD *)((char *)a2 + v12[24]);
    *((_BYTE *)a1 + v12[25]) = *((_BYTE *)a2 + v12[25]);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryBookSeriesInfo(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 56);
  v3 = sub_21C458BF4();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LibraryBookSeriesInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (int *)sub_21C3E344C(&qword_25527AFA8);
  v12 = v11[14];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_21C458BF4();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_QWORD *)((char *)a1 + v11[15]) = *(_QWORD *)((char *)a2 + v11[15]);
  v18 = v11[16];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)((char *)a1 + v11[17]) = *(_QWORD *)((char *)a2 + v11[17]);
  *((_BYTE *)a1 + v11[18]) = *((_BYTE *)a2 + v11[18]);
  *(_QWORD *)((char *)a1 + v11[19]) = *(_QWORD *)((char *)a2 + v11[19]);
  *((_BYTE *)a1 + v11[20]) = *((_BYTE *)a2 + v11[20]);
  *((_BYTE *)a1 + v11[21]) = *((_BYTE *)a2 + v11[21]);
  v21 = v11[22];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v22[16] = v23[16];
  v25 = v11[23];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  *(_QWORD *)((char *)a1 + v11[24]) = *(_QWORD *)((char *)a2 + v11[24]);
  *((_BYTE *)a1 + v11[25]) = *((_BYTE *)a2 + v11[25]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LibraryBookSeriesInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (int *)sub_21C3E344C(&qword_25527AFA8);
  v7 = v6[14];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *(_QWORD *)((char *)a1 + v6[15]) = *(_QWORD *)((char *)a2 + v6[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v6[16];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)v17 = v19;
  *(_QWORD *)((char *)a1 + v6[17]) = *(_QWORD *)((char *)a2 + v6[17]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[18]) = *((_BYTE *)a2 + v6[18]);
  *(_QWORD *)((char *)a1 + v6[19]) = *(_QWORD *)((char *)a2 + v6[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
  *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
  v20 = v6[22];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)((char *)a2 + v20);
  *((_QWORD *)v21 + 1) = *(_QWORD *)((char *)a2 + v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[16] = v22[16];
  v23 = v6[23];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = v25[8];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v26;
  *(_QWORD *)((char *)a1 + v6[24]) = *(_QWORD *)((char *)a2 + v6[24]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v6[25]) = *((_BYTE *)a2 + v6[25]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for LibraryBookSeriesInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = (int *)sub_21C3E344C(&qword_25527AFA8);
  v7 = v6[14];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_21C458BF4();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + v6[15]) = *(_QWORD *)(a2 + v6[15]);
  v13 = v6[16];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)(a1 + v6[17]) = *(_QWORD *)(a2 + v6[17]);
  *(_BYTE *)(a1 + v6[18]) = *(_BYTE *)(a2 + v6[18]);
  *(_QWORD *)(a1 + v6[19]) = *(_QWORD *)(a2 + v6[19]);
  *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
  *(_BYTE *)(a1 + v6[21]) = *(_BYTE *)(a2 + v6[21]);
  v16 = v6[22];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  v19 = v6[23];
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)(a1 + v6[24]) = *(_QWORD *)(a2 + v6[24]);
  *(_BYTE *)(a1 + v6[25]) = *(_BYTE *)(a2 + v6[25]);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for LibraryBookSeriesInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = (int *)sub_21C3E344C(&qword_25527AFA8);
  v12 = v11[14];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_21C458BF4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(_QWORD *)((char *)a1 + v11[15]) = *(_QWORD *)((char *)a2 + v11[15]);
  swift_bridgeObjectRelease();
  v21 = v11[16];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)((char *)a1 + v11[17]) = *(_QWORD *)((char *)a2 + v11[17]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[18]) = *((_BYTE *)a2 + v11[18]);
  *(_QWORD *)((char *)a1 + v11[19]) = *(_QWORD *)((char *)a2 + v11[19]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[20]) = *((_BYTE *)a2 + v11[20]);
  *((_BYTE *)a1 + v11[21]) = *((_BYTE *)a2 + v11[21]);
  v24 = v11[22];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)((char *)a2 + v24 + 8);
  *(_QWORD *)v25 = *(_QWORD *)((char *)a2 + v24);
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  v25[16] = v26[16];
  v28 = v11[23];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v29[8] = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)((char *)a1 + v11[24]) = *(_QWORD *)((char *)a2 + v11[24]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v11[25]) = *((_BYTE *)a2 + v11[25]);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryBookSeriesInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C42C738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_21C3E344C(&qword_25527AFA8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 5)
    return v9 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LibraryBookSeriesInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C42C7C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527AFA8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

void sub_21C42C83C()
{
  unint64_t v0;

  sub_21C42C8AC(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C42C8AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527B2D0)
  {
    v2 = type metadata accessor for LibraryBookInfo();
    v3 = sub_21C3E871C(&qword_25527A4A8, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookInfo, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
    v5 = type metadata accessor for CommonLibrarySeriesInfo(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25527B2D0);
  }
}

uint64_t BookInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + *(int *)(type metadata accessor for BookInfo() + 20)) = 1;
  return sub_21C42C99C(a1, a2);
}

uint64_t type metadata accessor for BookInfo()
{
  uint64_t result;

  result = qword_25527B3D0;
  if (!qword_25527B3D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C42C99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t BookInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C42C9F0(v1, a1);
}

uint64_t sub_21C42C9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527A3A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BookInfo.assetType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BookInfo() + 20));
}

uint64_t BookInfo.assetType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for BookInfo();
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*BookInfo.assetType.modify())()
{
  type metadata accessor for BookInfo();
  return nullsub_1;
}

uint64_t BookInfo.contentKind.getter()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = swift_getKeyPath();
  sub_21C423708(KeyPath, v1);
  swift_release();
  return swift_release();
}

uint64_t sub_21C42CB0C()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = swift_getKeyPath();
  sub_21C423708(KeyPath, v1);
  swift_release();
  return swift_release();
}

uint64_t sub_21C42CB6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C42C9F0(v1, a1);
}

uint64_t sub_21C42CB78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + *(int *)(a2 + 20)) = 1;
  return sub_21C42C99C(a1, a3);
}

uint64_t BookInfo.isIBA.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void **v10;
  int EnumCaseMultiPayload;
  int v12;
  void *v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for LibraryBookInfo();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21C3E344C(&qword_25527A3A0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (void **)((char *)&v20 - v9);
  sub_21C42C9F0(v1, (uint64_t)&v20 - v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v13 = *(void **)((char *)v10 + *(int *)(sub_21C3E344C(&qword_25527AD28) + 48));
    sub_21C42CDE8((uint64_t)v10);
LABEL_8:
    sub_21C44F8CC(0);
    v15 = sub_21C40A6EC(0xDu, v14);

    swift_bridgeObjectRelease();
    return v15 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v13 = *v10;
    goto LABEL_8;
  }
  sub_21C42CD64((uint64_t)v10);
  sub_21C42C9F0(v1, (uint64_t)v8);
  v12 = swift_getEnumCaseMultiPayload();
  if (v12)
  {
    if (v12 != 1)
    {
      sub_21C42CD64((uint64_t)v8);
LABEL_13:
      v15 = 0;
      return v15 & 1;
    }
  }
  else
  {

  }
  sub_21C42CDA4((uint64_t)v8, (uint64_t)v4);
  v16 = (uint64_t *)&v4[*(int *)(v2 + 28)];
  v17 = *v16;
  v18 = v16[1];
  sub_21C3FF94C(*v16, v18);
  sub_21C42CDE8((uint64_t)v4);
  if (v18 != 1)
  {
    sub_21C42CE24(v17, v18);
    goto LABEL_13;
  }
  v15 = 1;
  return v15 & 1;
}

uint64_t sub_21C42CD64(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A3A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C42CDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryBookInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C42CDE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryBookInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C42CE24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

id BookInfo.isRTL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int EnumCaseMultiPayload;
  id v5;
  void *v6;
  uint64_t v8;

  v1 = sub_21C3E344C(&qword_25527A3A0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C42C9F0(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v6 = *(void **)((char *)v3 + *(int *)(sub_21C3E344C(&qword_25527AD28) + 48));
    sub_21C42CDE8((uint64_t)v3);
LABEL_6:
    v5 = objc_msgSend(v6, sel_pagesAreRTL);

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v6 = *v3;
    goto LABEL_6;
  }
  sub_21C42CD64((uint64_t)v3);
  return 0;
}

uint64_t BookInfo.pageCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v1 = sub_21C3E344C(&qword_25527A3A0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (void **)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_21C42C9F0(v0, (uint64_t)v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v6 = *(void **)((char *)v3 + *(int *)(sub_21C3E344C(&qword_25527AD28) + 48));
    sub_21C42CDE8((uint64_t)v3);
LABEL_6:
    v5 = MBook.pageCount.getter();

    return v5;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v6 = *v3;
    goto LABEL_6;
  }
  sub_21C42CD64((uint64_t)v3);
  return 0;
}

uint64_t sub_21C42CFE4(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B328, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C42D020()
{
  return sub_21C3E871C(&qword_25527A4A0, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookInfo, (uint64_t)&protocol conformance descriptor for LibraryBookInfo);
}

uint64_t sub_21C42D04C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B368, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C42D088(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527B370, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *initializeBufferWithCopyOfBuffer for BookInfo(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (**v130)(void *, const void *, uint64_t);
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  int *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  id v164;
  uint64_t v166;
  uint64_t v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  char *v169;
  unsigned int (*v170)(char *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v174;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v18[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    v6 = a3;
    sub_21C3E344C(&qword_25527A3A0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *a2;
      *(_QWORD *)a1 = *a2;
      v20 = v19;
    }
    else
    {
      v174 = v6;
      if (EnumCaseMultiPayload == 1)
      {
        v8 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v8;
        v9 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v9;
        v10 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v10;
        v11 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v11;
        v12 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v12;
        *((_QWORD *)a1 + 10) = a2[10];
        v13 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v14 = v13[10];
        __dst = &a1[v14];
        v15 = (char *)a2 + v14;
        v16 = sub_21C458BF4();
        v166 = *(_QWORD *)(v16 - 8);
        v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v168(v15, 1, v16))
        {
          v17 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v166 + 16))(__dst, v15, v16);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(__dst, 0, 1, v16);
        }
        v31 = v13[11];
        v32 = &a1[v31];
        v33 = (char **)((char *)a2 + v31);
        v34 = v33[1];
        *(_QWORD *)v32 = *v33;
        *((_QWORD *)v32 + 1) = v34;
        v35 = v13[12];
        v36 = &a1[v35];
        v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v38 = v13[13];
        v39 = &a1[v38];
        v40 = (char **)((char *)a2 + v38);
        v41 = v40[1];
        *(_QWORD *)v39 = *v40;
        *((_QWORD *)v39 + 1) = v41;
        v42 = v13[14];
        v43 = &a1[v42];
        v44 = (char *)a2 + v42;
        v45 = sub_21C458C60();
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dsta = v47;
        if (v47(v44, 1, v45))
        {
          v48 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
        }
        v49 = v13[15];
        v50 = &a1[v49];
        v51 = (char **)((char *)a2 + v49);
        v52 = v51[1];
        *(_QWORD *)v50 = *v51;
        *((_QWORD *)v50 + 1) = v52;
        v53 = v13[16];
        v54 = &a1[v53];
        v55 = (char **)((char *)a2 + v53);
        v56 = v55[1];
        *(_QWORD *)v54 = *v55;
        *((_QWORD *)v54 + 1) = v56;
        a1[v13[17]] = *((_BYTE *)a2 + v13[17]);
        *(_QWORD *)&a1[v13[18]] = *(char **)((char *)a2 + v13[18]);
        a1[v13[19]] = *((_BYTE *)a2 + v13[19]);
        a1[v13[20]] = *((_BYTE *)a2 + v13[20]);
        a1[v13[21]] = *((_BYTE *)a2 + v13[21]);
        a1[v13[22]] = *((_BYTE *)a2 + v13[22]);
        a1[v13[23]] = *((_BYTE *)a2 + v13[23]);
        a1[v13[24]] = *((_BYTE *)a2 + v13[24]);
        a1[v13[25]] = *((_BYTE *)a2 + v13[25]);
        a1[v13[26]] = *((_BYTE *)a2 + v13[26]);
        a1[v13[27]] = *((_BYTE *)a2 + v13[27]);
        a1[v13[28]] = *((_BYTE *)a2 + v13[28]);
        a1[v13[29]] = *((_BYTE *)a2 + v13[29]);
        v57 = v13[30];
        v58 = &a1[v57];
        v59 = (char **)((char *)a2 + v57);
        v60 = v59[1];
        *(_QWORD *)v58 = *v59;
        *((_QWORD *)v58 + 1) = v60;
        v61 = v13[31];
        v62 = &a1[v61];
        v63 = (char *)a2 + v61;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dsta(v63, 1, v45))
        {
          v64 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v62, v63, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v62, 0, 1, v45);
        }
        v65 = v13[32];
        v66 = &a1[v65];
        v67 = (char *)a2 + v65;
        *(_QWORD *)v66 = *(_QWORD *)v67;
        v66[8] = v67[8];
        *(_QWORD *)&a1[v13[33]] = *(char **)((char *)a2 + v13[33]);
        v68 = v13[34];
        v69 = &a1[v68];
        v70 = (char *)a2 + v68;
        if (__dsta((char *)a2 + v68, 1, v45))
        {
          v71 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v69, v70, v45);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v69, 0, 1, v45);
        }
        v72 = v13[35];
        v73 = &a1[v72];
        v74 = (char **)((char *)a2 + v72);
        v75 = v74[1];
        *(_QWORD *)v73 = *v74;
        *((_QWORD *)v73 + 1) = v75;
        v76 = v13[36];
        v77 = &a1[v76];
        v78 = (char *)a2 + v76;
        *(_QWORD *)(v77 + 13) = *(_QWORD *)(v78 + 13);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        v79 = v13[37];
        v80 = &a1[v79];
        v81 = (char *)a2 + v79;
        v80[8] = v81[8];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v82 = v13[38];
        v83 = &a1[v82];
        v84 = (char *)a2 + v82;
        v83[4] = v84[4];
        *(_DWORD *)v83 = *(_DWORD *)v84;
        v85 = (int *)type metadata accessor for LibraryBookInfo();
        v86 = v85[5];
        v87 = &a1[v86];
        v88 = (char *)a2 + v86;
        v89 = *(uint64_t *)((char *)a2 + v86 + 24);
        swift_bridgeObjectRetain();
        if (v89)
        {
          v90 = *((_QWORD *)v88 + 4);
          *((_QWORD *)v87 + 3) = v89;
          *((_QWORD *)v87 + 4) = v90;
          (**(void (***)(char *, char *, uint64_t))(v89 - 8))(v87, v88, v89);
        }
        else
        {
          v91 = *((_OWORD *)v88 + 1);
          *(_OWORD *)v87 = *(_OWORD *)v88;
          *((_OWORD *)v87 + 1) = v91;
          *((_QWORD *)v87 + 4) = *((_QWORD *)v88 + 4);
        }
        a1[v85[6]] = *((_BYTE *)a2 + v85[6]);
        v92 = v85[7];
        v93 = &a1[v92];
        v94 = (char **)((char *)a2 + v92);
        v95 = v94[1];
        if ((unint64_t)(v95 - 1) >= 2)
        {
          *(_QWORD *)v93 = *v94;
          *((_QWORD *)v93 + 1) = v95;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v93 = *(_OWORD *)v94;
        }
        v6 = v174;
      }
      else
      {
        v21 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v21;
        v22 = a2[3];
        *((_QWORD *)a1 + 2) = a2[2];
        *((_QWORD *)a1 + 3) = v22;
        v23 = a2[5];
        *((_QWORD *)a1 + 4) = a2[4];
        *((_QWORD *)a1 + 5) = v23;
        v24 = a2[7];
        *((_QWORD *)a1 + 6) = a2[6];
        *((_QWORD *)a1 + 7) = v24;
        v25 = a2[9];
        *((_QWORD *)a1 + 8) = a2[8];
        *((_QWORD *)a1 + 9) = v25;
        *((_QWORD *)a1 + 10) = a2[10];
        v26 = (int *)type metadata accessor for CommonLibraryAssetInfo();
        v27 = v26[10];
        v169 = &a1[v27];
        v28 = (char *)a2 + v27;
        v29 = sub_21C458BF4();
        v167 = *(_QWORD *)(v29 - 8);
        v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v170(v28, 1, v29))
        {
          v30 = sub_21C3E344C(&qword_25527A2D0);
          memcpy(v169, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v169, v28, v29);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v169, 0, 1, v29);
        }
        v96 = v26[11];
        v97 = &a1[v96];
        v98 = (char **)((char *)a2 + v96);
        v99 = v98[1];
        *(_QWORD *)v97 = *v98;
        *((_QWORD *)v97 + 1) = v99;
        v100 = v26[12];
        v101 = &a1[v100];
        v102 = (char *)a2 + v100;
        v101[8] = v102[8];
        *(_QWORD *)v101 = *(_QWORD *)v102;
        v103 = v26[13];
        v104 = &a1[v103];
        v105 = (char **)((char *)a2 + v103);
        v106 = v105[1];
        *(_QWORD *)v104 = *v105;
        *((_QWORD *)v104 + 1) = v106;
        v107 = v26[14];
        v108 = &a1[v107];
        v109 = (char *)a2 + v107;
        v110 = sub_21C458C60();
        v111 = *(_QWORD *)(v110 - 8);
        v112 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __dstb = (void (**)(void *, const void *, uint64_t))v111;
        if (v112(v109, 1, v110))
        {
          v113 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v108, v109, v110);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
        }
        v114 = v26[15];
        v115 = &a1[v114];
        v116 = (char **)((char *)a2 + v114);
        v117 = v116[1];
        *(_QWORD *)v115 = *v116;
        *((_QWORD *)v115 + 1) = v117;
        v118 = v26[16];
        v119 = &a1[v118];
        v120 = (char **)((char *)a2 + v118);
        v121 = v120[1];
        *(_QWORD *)v119 = *v120;
        *((_QWORD *)v119 + 1) = v121;
        a1[v26[17]] = *((_BYTE *)a2 + v26[17]);
        *(_QWORD *)&a1[v26[18]] = *(char **)((char *)a2 + v26[18]);
        a1[v26[19]] = *((_BYTE *)a2 + v26[19]);
        a1[v26[20]] = *((_BYTE *)a2 + v26[20]);
        a1[v26[21]] = *((_BYTE *)a2 + v26[21]);
        a1[v26[22]] = *((_BYTE *)a2 + v26[22]);
        a1[v26[23]] = *((_BYTE *)a2 + v26[23]);
        a1[v26[24]] = *((_BYTE *)a2 + v26[24]);
        a1[v26[25]] = *((_BYTE *)a2 + v26[25]);
        a1[v26[26]] = *((_BYTE *)a2 + v26[26]);
        a1[v26[27]] = *((_BYTE *)a2 + v26[27]);
        a1[v26[28]] = *((_BYTE *)a2 + v26[28]);
        a1[v26[29]] = *((_BYTE *)a2 + v26[29]);
        v122 = v26[30];
        v123 = &a1[v122];
        v124 = (char **)((char *)a2 + v122);
        v125 = v124[1];
        *(_QWORD *)v123 = *v124;
        *((_QWORD *)v123 + 1) = v125;
        v126 = v26[31];
        v127 = &a1[v126];
        v128 = (char *)a2 + v126;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v112(v128, 1, v110))
        {
          v129 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
          v130 = __dstb;
        }
        else
        {
          v130 = __dstb;
          __dstb[2](v127, v128, v110);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v127, 0, 1, v110);
        }
        v131 = v26[32];
        v132 = &a1[v131];
        v133 = (char *)a2 + v131;
        *(_QWORD *)v132 = *(_QWORD *)v133;
        v132[8] = v133[8];
        *(_QWORD *)&a1[v26[33]] = *(char **)((char *)a2 + v26[33]);
        v134 = v26[34];
        v135 = &a1[v134];
        v136 = (char *)a2 + v134;
        if (v112((char *)a2 + v134, 1, v110))
        {
          v137 = sub_21C3E344C(&qword_254078EC0);
          memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        }
        else
        {
          v130[2](v135, v136, v110);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v130[7])(v135, 0, 1, v110);
        }
        v138 = v26[35];
        v139 = &a1[v138];
        v140 = (char **)((char *)a2 + v138);
        v141 = v140[1];
        *(_QWORD *)v139 = *v140;
        *((_QWORD *)v139 + 1) = v141;
        v142 = v26[36];
        v143 = &a1[v142];
        v144 = (char *)a2 + v142;
        *(_QWORD *)(v143 + 13) = *(_QWORD *)(v144 + 13);
        *(_OWORD *)v143 = *(_OWORD *)v144;
        v145 = v26[37];
        v146 = &a1[v145];
        v147 = (char *)a2 + v145;
        v146[8] = v147[8];
        *(_QWORD *)v146 = *(_QWORD *)v147;
        v148 = v26[38];
        v149 = &a1[v148];
        v150 = (char *)a2 + v148;
        v149[4] = v150[4];
        *(_DWORD *)v149 = *(_DWORD *)v150;
        v151 = (int *)type metadata accessor for LibraryBookInfo();
        v152 = v151[5];
        v153 = &a1[v152];
        v154 = (char *)a2 + v152;
        v155 = *(uint64_t *)((char *)a2 + v152 + 24);
        swift_bridgeObjectRetain();
        if (v155)
        {
          v156 = *((_QWORD *)v154 + 4);
          *((_QWORD *)v153 + 3) = v155;
          *((_QWORD *)v153 + 4) = v156;
          (**(void (***)(char *, char *, uint64_t))(v155 - 8))(v153, v154, v155);
        }
        else
        {
          v157 = *((_OWORD *)v154 + 1);
          *(_OWORD *)v153 = *(_OWORD *)v154;
          *((_OWORD *)v153 + 1) = v157;
          *((_QWORD *)v153 + 4) = *((_QWORD *)v154 + 4);
        }
        a1[v151[6]] = *((_BYTE *)a2 + v151[6]);
        v158 = v151[7];
        v159 = &a1[v158];
        v160 = (char **)((char *)a2 + v158);
        v161 = v160[1];
        if ((unint64_t)(v161 - 1) >= 2)
        {
          *(_QWORD *)v159 = *v160;
          *((_QWORD *)v159 + 1) = v161;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)v159 = *(_OWORD *)v160;
        }
        v6 = v174;
        v162 = *(int *)(sub_21C3E344C(&qword_25527AD28) + 48);
        v163 = *(char **)((char *)a2 + v162);
        *(_QWORD *)&a1[v162] = v163;
        v164 = v163;
      }
    }
    swift_storeEnumTagMultiPayload();
    a1[*(int *)(v6 + 20)] = *((_BYTE *)a2 + *(int *)(v6 + 20));
  }
  return a1;
}

void destroy for BookInfo(void **a1)
{
  int EnumCaseMultiPayload;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  sub_21C3E344C(&qword_25527A3A0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v15 = *a1;
LABEL_18:

      return;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v17 = (char *)a1 + v16[10];
      v18 = sub_21C458BF4();
      v19 = *(_QWORD *)(v18 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = (char *)a1 + v16[14];
      v21 = sub_21C458C60();
      v22 = *(_QWORD *)(v21 - 8);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      if (!v23(v20, 1, v21))
        (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = (char *)a1 + v16[31];
      if (!v23(v24, 1, v21))
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      v25 = (char *)a1 + v16[34];
      if (!v23(v25, 1, v21))
        (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
      swift_bridgeObjectRelease();
      v26 = type metadata accessor for LibraryBookInfo();
      v27 = (uint64_t)a1 + *(int *)(v26 + 20);
      if (*(_QWORD *)(v27 + 24))
        sub_21C3E2754(v27);
      if (*(char **)((char *)a1 + *(int *)(v26 + 28) + 8) - 1 >= (char *)2)
        swift_bridgeObjectRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v4 = (char *)a1 + v3[10];
      v5 = sub_21C458BF4();
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = (char *)a1 + v3[14];
      v8 = sub_21C458C60();
      v9 = *(_QWORD *)(v8 - 8);
      v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
      if (!v10(v7, 1, v8))
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = (char *)a1 + v3[31];
      if (!v10(v11, 1, v8))
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v12 = (char *)a1 + v3[34];
      if (!v10(v12, 1, v8))
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      swift_bridgeObjectRelease();
      v13 = type metadata accessor for LibraryBookInfo();
      v14 = (uint64_t)a1 + *(int *)(v13 + 20);
      if (*(_QWORD *)(v14 + 24))
        sub_21C3E2754(v14);
      if (*(char **)((char *)a1 + *(int *)(v13 + 28) + 8) - 1 >= (char *)2)
        swift_bridgeObjectRelease();
      v15 = *(void **)((char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AD28) + 48));
      goto LABEL_18;
  }
}

_QWORD *initializeWithCopy for BookInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(const void *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  const void *v126;
  uint64_t v127;
  void (**v128)(void *, const void *, uint64_t);
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  const void *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  int *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  id v162;
  uint64_t v164;
  uint64_t v165;
  unsigned int (*v166)(const void *, uint64_t, uint64_t);
  char *v167;
  unsigned int (*v168)(const void *, uint64_t, uint64_t);
  char *__dst;
  unsigned int (*__dsta)(const void *, uint64_t, uint64_t);
  void (**__dstb)(void *, const void *, uint64_t);
  uint64_t v172;

  sub_21C3E344C(&qword_25527A3A0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v17 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v18 = v17;
  }
  else
  {
    v172 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v7;
      v8 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v8;
      v9 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v9;
      v10 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v10;
      v11 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(_QWORD *)(a2 + 80);
      v12 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v13 = v12[10];
      __dst = (char *)a1 + v13;
      v14 = (const void *)(a2 + v13);
      v15 = sub_21C458BF4();
      v164 = *(_QWORD *)(v15 - 8);
      v166 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v164 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v166(v14, 1, v15))
      {
        v16 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v164 + 16))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(__dst, 0, 1, v15);
      }
      v29 = v12[11];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (_QWORD *)(a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = v12[12];
      v34 = (char *)a1 + v33;
      v35 = a2 + v33;
      v34[8] = *(_BYTE *)(v35 + 8);
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v36 = v12[13];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)(a2 + v36);
      v39 = v38[1];
      *v37 = *v38;
      v37[1] = v39;
      v40 = v12[14];
      v41 = (char *)a1 + v40;
      v42 = (const void *)(a2 + v40);
      v43 = sub_21C458C60();
      v44 = *(_QWORD *)(v43 - 8);
      v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dsta = v45;
      if (v45(v42, 1, v43))
      {
        v46 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v41, v42, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v47 = v12[15];
      v48 = (_QWORD *)((char *)a1 + v47);
      v49 = (_QWORD *)(a2 + v47);
      v50 = v49[1];
      *v48 = *v49;
      v48[1] = v50;
      v51 = v12[16];
      v52 = (_QWORD *)((char *)a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      v54 = v53[1];
      *v52 = *v53;
      v52[1] = v54;
      *((_BYTE *)a1 + v12[17]) = *(_BYTE *)(a2 + v12[17]);
      *(_QWORD *)((char *)a1 + v12[18]) = *(_QWORD *)(a2 + v12[18]);
      *((_BYTE *)a1 + v12[19]) = *(_BYTE *)(a2 + v12[19]);
      *((_BYTE *)a1 + v12[20]) = *(_BYTE *)(a2 + v12[20]);
      *((_BYTE *)a1 + v12[21]) = *(_BYTE *)(a2 + v12[21]);
      *((_BYTE *)a1 + v12[22]) = *(_BYTE *)(a2 + v12[22]);
      *((_BYTE *)a1 + v12[23]) = *(_BYTE *)(a2 + v12[23]);
      *((_BYTE *)a1 + v12[24]) = *(_BYTE *)(a2 + v12[24]);
      *((_BYTE *)a1 + v12[25]) = *(_BYTE *)(a2 + v12[25]);
      *((_BYTE *)a1 + v12[26]) = *(_BYTE *)(a2 + v12[26]);
      *((_BYTE *)a1 + v12[27]) = *(_BYTE *)(a2 + v12[27]);
      *((_BYTE *)a1 + v12[28]) = *(_BYTE *)(a2 + v12[28]);
      *((_BYTE *)a1 + v12[29]) = *(_BYTE *)(a2 + v12[29]);
      v55 = v12[30];
      v56 = (_QWORD *)((char *)a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      v58 = v57[1];
      *v56 = *v57;
      v56[1] = v58;
      v59 = v12[31];
      v60 = (char *)a1 + v59;
      v61 = (const void *)(a2 + v59);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__dsta(v61, 1, v43))
      {
        v62 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v60, v61, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v60, 0, 1, v43);
      }
      v63 = v12[32];
      v64 = (char *)a1 + v63;
      v65 = a2 + v63;
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = *(_BYTE *)(v65 + 8);
      *(_QWORD *)((char *)a1 + v12[33]) = *(_QWORD *)(a2 + v12[33]);
      v66 = v12[34];
      v67 = (char *)a1 + v66;
      v68 = (const void *)(a2 + v66);
      if (__dsta((const void *)(a2 + v66), 1, v43))
      {
        v69 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v44 + 16))(v67, v68, v43);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v67, 0, 1, v43);
      }
      v70 = v12[35];
      v71 = (_QWORD *)((char *)a1 + v70);
      v72 = (_QWORD *)(a2 + v70);
      v73 = v72[1];
      *v71 = *v72;
      v71[1] = v73;
      v74 = v12[36];
      v75 = (char *)a1 + v74;
      v76 = a2 + v74;
      *(_QWORD *)(v75 + 13) = *(_QWORD *)(v76 + 13);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v77 = v12[37];
      v78 = (char *)a1 + v77;
      v79 = a2 + v77;
      v78[8] = *(_BYTE *)(v79 + 8);
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v80 = v12[38];
      v81 = (char *)a1 + v80;
      v82 = a2 + v80;
      v81[4] = *(_BYTE *)(v82 + 4);
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v83 = (int *)type metadata accessor for LibraryBookInfo();
      v84 = v83[5];
      v85 = (char *)a1 + v84;
      v86 = a2 + v84;
      v87 = *(_QWORD *)(a2 + v84 + 24);
      swift_bridgeObjectRetain();
      if (v87)
      {
        v88 = *(_QWORD *)(v86 + 32);
        *((_QWORD *)v85 + 3) = v87;
        *((_QWORD *)v85 + 4) = v88;
        (**(void (***)(char *, uint64_t, uint64_t))(v87 - 8))(v85, v86, v87);
      }
      else
      {
        v89 = *(_OWORD *)(v86 + 16);
        *(_OWORD *)v85 = *(_OWORD *)v86;
        *((_OWORD *)v85 + 1) = v89;
        *((_QWORD *)v85 + 4) = *(_QWORD *)(v86 + 32);
      }
      *((_BYTE *)a1 + v83[6]) = *(_BYTE *)(a2 + v83[6]);
      v90 = v83[7];
      v91 = (_QWORD *)((char *)a1 + v90);
      v92 = (_QWORD *)(a2 + v90);
      v93 = v92[1];
      if ((unint64_t)(v93 - 1) >= 2)
      {
        *v91 = *v92;
        v91[1] = v93;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v91 = *(_OWORD *)v92;
      }
      a3 = v172;
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v19;
      v20 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v20;
      v21 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v21;
      v22 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v22;
      v23 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v23;
      a1[10] = *(_QWORD *)(a2 + 80);
      v24 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v25 = v24[10];
      v167 = (char *)a1 + v25;
      v26 = (const void *)(a2 + v25);
      v27 = sub_21C458BF4();
      v165 = *(_QWORD *)(v27 - 8);
      v168 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v165 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v168(v26, 1, v27))
      {
        v28 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v167, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v165 + 16))(v167, v26, v27);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v167, 0, 1, v27);
      }
      v94 = v24[11];
      v95 = (_QWORD *)((char *)a1 + v94);
      v96 = (_QWORD *)(a2 + v94);
      v97 = v96[1];
      *v95 = *v96;
      v95[1] = v97;
      v98 = v24[12];
      v99 = (char *)a1 + v98;
      v100 = a2 + v98;
      v99[8] = *(_BYTE *)(v100 + 8);
      *(_QWORD *)v99 = *(_QWORD *)v100;
      v101 = v24[13];
      v102 = (_QWORD *)((char *)a1 + v101);
      v103 = (_QWORD *)(a2 + v101);
      v104 = v103[1];
      *v102 = *v103;
      v102[1] = v104;
      v105 = v24[14];
      v106 = (char *)a1 + v105;
      v107 = (const void *)(a2 + v105);
      v108 = sub_21C458C60();
      v109 = *(_QWORD *)(v108 - 8);
      v110 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v109 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __dstb = (void (**)(void *, const void *, uint64_t))v109;
      if (v110(v107, 1, v108))
      {
        v111 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v109 + 16))(v106, v107, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      }
      v112 = v24[15];
      v113 = (_QWORD *)((char *)a1 + v112);
      v114 = (_QWORD *)(a2 + v112);
      v115 = v114[1];
      *v113 = *v114;
      v113[1] = v115;
      v116 = v24[16];
      v117 = (_QWORD *)((char *)a1 + v116);
      v118 = (_QWORD *)(a2 + v116);
      v119 = v118[1];
      *v117 = *v118;
      v117[1] = v119;
      *((_BYTE *)a1 + v24[17]) = *(_BYTE *)(a2 + v24[17]);
      *(_QWORD *)((char *)a1 + v24[18]) = *(_QWORD *)(a2 + v24[18]);
      *((_BYTE *)a1 + v24[19]) = *(_BYTE *)(a2 + v24[19]);
      *((_BYTE *)a1 + v24[20]) = *(_BYTE *)(a2 + v24[20]);
      *((_BYTE *)a1 + v24[21]) = *(_BYTE *)(a2 + v24[21]);
      *((_BYTE *)a1 + v24[22]) = *(_BYTE *)(a2 + v24[22]);
      *((_BYTE *)a1 + v24[23]) = *(_BYTE *)(a2 + v24[23]);
      *((_BYTE *)a1 + v24[24]) = *(_BYTE *)(a2 + v24[24]);
      *((_BYTE *)a1 + v24[25]) = *(_BYTE *)(a2 + v24[25]);
      *((_BYTE *)a1 + v24[26]) = *(_BYTE *)(a2 + v24[26]);
      *((_BYTE *)a1 + v24[27]) = *(_BYTE *)(a2 + v24[27]);
      *((_BYTE *)a1 + v24[28]) = *(_BYTE *)(a2 + v24[28]);
      *((_BYTE *)a1 + v24[29]) = *(_BYTE *)(a2 + v24[29]);
      v120 = v24[30];
      v121 = (_QWORD *)((char *)a1 + v120);
      v122 = (_QWORD *)(a2 + v120);
      v123 = v122[1];
      *v121 = *v122;
      v121[1] = v123;
      v124 = v24[31];
      v125 = (char *)a1 + v124;
      v126 = (const void *)(a2 + v124);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v110(v126, 1, v108))
      {
        v127 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
        v128 = __dstb;
      }
      else
      {
        v128 = __dstb;
        __dstb[2](v125, v126, v108);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v125, 0, 1, v108);
      }
      v129 = v24[32];
      v130 = (char *)a1 + v129;
      v131 = a2 + v129;
      *(_QWORD *)v130 = *(_QWORD *)v131;
      v130[8] = *(_BYTE *)(v131 + 8);
      *(_QWORD *)((char *)a1 + v24[33]) = *(_QWORD *)(a2 + v24[33]);
      v132 = v24[34];
      v133 = (char *)a1 + v132;
      v134 = (const void *)(a2 + v132);
      if (v110((const void *)(a2 + v132), 1, v108))
      {
        v135 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
      }
      else
      {
        v128[2](v133, v134, v108);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v128[7])(v133, 0, 1, v108);
      }
      v136 = v24[35];
      v137 = (_QWORD *)((char *)a1 + v136);
      v138 = (_QWORD *)(a2 + v136);
      v139 = v138[1];
      *v137 = *v138;
      v137[1] = v139;
      v140 = v24[36];
      v141 = (char *)a1 + v140;
      v142 = a2 + v140;
      *(_QWORD *)(v141 + 13) = *(_QWORD *)(v142 + 13);
      *(_OWORD *)v141 = *(_OWORD *)v142;
      v143 = v24[37];
      v144 = (char *)a1 + v143;
      v145 = a2 + v143;
      v144[8] = *(_BYTE *)(v145 + 8);
      *(_QWORD *)v144 = *(_QWORD *)v145;
      v146 = v24[38];
      v147 = (char *)a1 + v146;
      v148 = a2 + v146;
      v147[4] = *(_BYTE *)(v148 + 4);
      *(_DWORD *)v147 = *(_DWORD *)v148;
      v149 = (int *)type metadata accessor for LibraryBookInfo();
      v150 = v149[5];
      v151 = (char *)a1 + v150;
      v152 = a2 + v150;
      v153 = *(_QWORD *)(a2 + v150 + 24);
      swift_bridgeObjectRetain();
      if (v153)
      {
        v154 = *(_QWORD *)(v152 + 32);
        *((_QWORD *)v151 + 3) = v153;
        *((_QWORD *)v151 + 4) = v154;
        (**(void (***)(char *, uint64_t, uint64_t))(v153 - 8))(v151, v152, v153);
      }
      else
      {
        v155 = *(_OWORD *)(v152 + 16);
        *(_OWORD *)v151 = *(_OWORD *)v152;
        *((_OWORD *)v151 + 1) = v155;
        *((_QWORD *)v151 + 4) = *(_QWORD *)(v152 + 32);
      }
      *((_BYTE *)a1 + v149[6]) = *(_BYTE *)(a2 + v149[6]);
      v156 = v149[7];
      v157 = (_QWORD *)((char *)a1 + v156);
      v158 = (_QWORD *)(a2 + v156);
      v159 = v158[1];
      if ((unint64_t)(v159 - 1) >= 2)
      {
        *v157 = *v158;
        v157[1] = v159;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v157 = *(_OWORD *)v158;
      }
      a3 = v172;
      v160 = *(int *)(sub_21C3E344C(&qword_25527AD28) + 48);
      v161 = *(void **)(a2 + v160);
      *(_QWORD *)((char *)a1 + v160) = v161;
      v162 = v161;
    }
  }
  swift_storeEnumTagMultiPayload();
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithCopy for BookInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  __int128 v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  void *v144;
  id v145;
  uint64_t v147;
  uint64_t v148;
  unsigned int (*v149)(char *, uint64_t, uint64_t);
  unsigned int (*v150)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;

  if (a1 != a2)
  {
    sub_21C42CD64((uint64_t)a1);
    sub_21C3E344C(&qword_25527A3A0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = (void *)*a2;
      *a1 = *a2;
      v13 = v12;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v7 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v8 = v7[10];
      __dst = (char *)a1 + v8;
      v9 = (char *)a2 + v8;
      v10 = sub_21C458BF4();
      v147 = *(_QWORD *)(v10 - 8);
      v149 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v149(v9, 1, v10))
      {
        v11 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dst, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v147 + 16))(__dst, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(__dst, 0, 1, v10);
      }
      v19 = v7[11];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      *v20 = *v21;
      v20[1] = v21[1];
      v22 = v7[12];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = *(_QWORD *)v24;
      v23[8] = v24[8];
      *(_QWORD *)v23 = v25;
      v26 = v7[13];
      v27 = (_QWORD *)((char *)a1 + v26);
      v28 = (_QWORD *)((char *)a2 + v26);
      *v27 = *v28;
      v27[1] = v28[1];
      v29 = v7[14];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      v32 = sub_21C458C60();
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        v35 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v53 = v7[15];
      v54 = (_QWORD *)((char *)a1 + v53);
      v55 = (_QWORD *)((char *)a2 + v53);
      *v54 = *v55;
      v54[1] = v55[1];
      v56 = v7[16];
      v57 = (_QWORD *)((char *)a1 + v56);
      v58 = (_QWORD *)((char *)a2 + v56);
      *v57 = *v58;
      v57[1] = v58[1];
      *((_BYTE *)a1 + v7[17]) = *((_BYTE *)a2 + v7[17]);
      *(_QWORD *)((char *)a1 + v7[18]) = *(_QWORD *)((char *)a2 + v7[18]);
      *((_BYTE *)a1 + v7[19]) = *((_BYTE *)a2 + v7[19]);
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      *((_BYTE *)a1 + v7[21]) = *((_BYTE *)a2 + v7[21]);
      *((_BYTE *)a1 + v7[22]) = *((_BYTE *)a2 + v7[22]);
      *((_BYTE *)a1 + v7[23]) = *((_BYTE *)a2 + v7[23]);
      *((_BYTE *)a1 + v7[24]) = *((_BYTE *)a2 + v7[24]);
      *((_BYTE *)a1 + v7[25]) = *((_BYTE *)a2 + v7[25]);
      *((_BYTE *)a1 + v7[26]) = *((_BYTE *)a2 + v7[26]);
      *((_BYTE *)a1 + v7[27]) = *((_BYTE *)a2 + v7[27]);
      *((_BYTE *)a1 + v7[28]) = *((_BYTE *)a2 + v7[28]);
      *((_BYTE *)a1 + v7[29]) = *((_BYTE *)a2 + v7[29]);
      v59 = v7[30];
      v60 = (_QWORD *)((char *)a1 + v59);
      v61 = (_QWORD *)((char *)a2 + v59);
      *v60 = *v61;
      v60[1] = v61[1];
      v62 = v7[31];
      v63 = (char *)a1 + v62;
      v64 = (char *)a2 + v62;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v34(v64, 1, v32))
      {
        v65 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v63, v64, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v63, 0, 1, v32);
      }
      v79 = v7[32];
      v80 = (char *)a1 + v79;
      v81 = (char *)a2 + v79;
      v82 = *(_QWORD *)v81;
      v80[8] = v81[8];
      *(_QWORD *)v80 = v82;
      *(_QWORD *)((char *)a1 + v7[33]) = *(_QWORD *)((char *)a2 + v7[33]);
      v83 = v7[34];
      v84 = (char *)a1 + v83;
      v85 = (char *)a2 + v83;
      if (v34((char *)a2 + v83, 1, v32))
      {
        v86 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v84, v85, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v84, 0, 1, v32);
      }
      v95 = v7[35];
      v96 = (_QWORD *)((char *)a1 + v95);
      v97 = (_QWORD *)((char *)a2 + v95);
      *v96 = *v97;
      v96[1] = v97[1];
      v98 = v7[36];
      v99 = (char *)a1 + v98;
      v100 = (char *)a2 + v98;
      v101 = *(_OWORD *)v100;
      *(_QWORD *)(v99 + 13) = *(_QWORD *)(v100 + 13);
      *(_OWORD *)v99 = v101;
      v102 = v7[37];
      v103 = (char *)a1 + v102;
      v104 = (char *)a2 + v102;
      v105 = *(_QWORD *)v104;
      v103[8] = v104[8];
      *(_QWORD *)v103 = v105;
      v106 = v7[38];
      v107 = (char *)a1 + v106;
      v108 = (char *)a2 + v106;
      LODWORD(v105) = *(_DWORD *)v108;
      v107[4] = v108[4];
      *(_DWORD *)v107 = v105;
      v109 = (int *)type metadata accessor for LibraryBookInfo();
      v110 = v109[5];
      v111 = (char *)a1 + v110;
      v112 = (char *)a2 + v110;
      v113 = *(_QWORD *)((char *)a2 + v110 + 24);
      swift_bridgeObjectRetain();
      if (v113)
      {
        *((_QWORD *)v111 + 3) = v113;
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        (**(void (***)(char *, char *, uint64_t))(v113 - 8))(v111, v112, v113);
      }
      else
      {
        v133 = *(_OWORD *)v112;
        v134 = *((_OWORD *)v112 + 1);
        *((_QWORD *)v111 + 4) = *((_QWORD *)v112 + 4);
        *(_OWORD *)v111 = v133;
        *((_OWORD *)v111 + 1) = v134;
      }
      *((_BYTE *)a1 + v109[6]) = *((_BYTE *)a2 + v109[6]);
      v135 = v109[7];
      v136 = (_QWORD *)((char *)a1 + v135);
      v137 = (_QWORD *)((char *)a2 + v135);
      if ((unint64_t)(v137[1] - 1) >= 2)
      {
        *v136 = *v137;
        v136[1] = v137[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v136 = *(_OWORD *)v137;
      }
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      v14 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v15 = v14[10];
      __dsta = (char *)a1 + v15;
      v16 = (char *)a2 + v15;
      v17 = sub_21C458BF4();
      v148 = *(_QWORD *)(v17 - 8);
      v150 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v150(v16, 1, v17))
      {
        v18 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(__dsta, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v148 + 16))(__dsta, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v148 + 56))(__dsta, 0, 1, v17);
      }
      v36 = v14[11];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = (_QWORD *)((char *)a2 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = v14[12];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      v42 = *(_QWORD *)v41;
      v40[8] = v41[8];
      *(_QWORD *)v40 = v42;
      v43 = v14[13];
      v44 = (_QWORD *)((char *)a1 + v43);
      v45 = (_QWORD *)((char *)a2 + v43);
      *v44 = *v45;
      v44[1] = v45[1];
      v46 = v14[14];
      v47 = (char *)a1 + v46;
      v48 = (char *)a2 + v46;
      v49 = sub_21C458C60();
      v50 = *(_QWORD *)(v49 - 8);
      v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v48, 1, v49))
      {
        v52 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      v66 = v14[15];
      v67 = (_QWORD *)((char *)a1 + v66);
      v68 = (_QWORD *)((char *)a2 + v66);
      *v67 = *v68;
      v67[1] = v68[1];
      v69 = v14[16];
      v70 = (_QWORD *)((char *)a1 + v69);
      v71 = (_QWORD *)((char *)a2 + v69);
      *v70 = *v71;
      v70[1] = v71[1];
      *((_BYTE *)a1 + v14[17]) = *((_BYTE *)a2 + v14[17]);
      *(_QWORD *)((char *)a1 + v14[18]) = *(_QWORD *)((char *)a2 + v14[18]);
      *((_BYTE *)a1 + v14[19]) = *((_BYTE *)a2 + v14[19]);
      *((_BYTE *)a1 + v14[20]) = *((_BYTE *)a2 + v14[20]);
      *((_BYTE *)a1 + v14[21]) = *((_BYTE *)a2 + v14[21]);
      *((_BYTE *)a1 + v14[22]) = *((_BYTE *)a2 + v14[22]);
      *((_BYTE *)a1 + v14[23]) = *((_BYTE *)a2 + v14[23]);
      *((_BYTE *)a1 + v14[24]) = *((_BYTE *)a2 + v14[24]);
      *((_BYTE *)a1 + v14[25]) = *((_BYTE *)a2 + v14[25]);
      *((_BYTE *)a1 + v14[26]) = *((_BYTE *)a2 + v14[26]);
      *((_BYTE *)a1 + v14[27]) = *((_BYTE *)a2 + v14[27]);
      *((_BYTE *)a1 + v14[28]) = *((_BYTE *)a2 + v14[28]);
      *((_BYTE *)a1 + v14[29]) = *((_BYTE *)a2 + v14[29]);
      v72 = v14[30];
      v73 = (_QWORD *)((char *)a1 + v72);
      v74 = (_QWORD *)((char *)a2 + v72);
      *v73 = *v74;
      v73[1] = v74[1];
      v75 = v14[31];
      v76 = (char *)a1 + v75;
      v77 = (char *)a2 + v75;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v77, 1, v49))
      {
        v78 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v76, v77, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v76, 0, 1, v49);
      }
      v87 = v14[32];
      v88 = (char *)a1 + v87;
      v89 = (char *)a2 + v87;
      v90 = *(_QWORD *)v89;
      v88[8] = v89[8];
      *(_QWORD *)v88 = v90;
      *(_QWORD *)((char *)a1 + v14[33]) = *(_QWORD *)((char *)a2 + v14[33]);
      v91 = v14[34];
      v92 = (char *)a1 + v91;
      v93 = (char *)a2 + v91;
      if (v51((char *)a2 + v91, 1, v49))
      {
        v94 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v92, v93, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v92, 0, 1, v49);
      }
      v114 = v14[35];
      v115 = (_QWORD *)((char *)a1 + v114);
      v116 = (_QWORD *)((char *)a2 + v114);
      *v115 = *v116;
      v115[1] = v116[1];
      v117 = v14[36];
      v118 = (char *)a1 + v117;
      v119 = (char *)a2 + v117;
      v120 = *(_OWORD *)v119;
      *(_QWORD *)(v118 + 13) = *(_QWORD *)(v119 + 13);
      *(_OWORD *)v118 = v120;
      v121 = v14[37];
      v122 = (char *)a1 + v121;
      v123 = (char *)a2 + v121;
      v124 = *(_QWORD *)v123;
      v122[8] = v123[8];
      *(_QWORD *)v122 = v124;
      v125 = v14[38];
      v126 = (char *)a1 + v125;
      v127 = (char *)a2 + v125;
      LODWORD(v124) = *(_DWORD *)v127;
      v126[4] = v127[4];
      *(_DWORD *)v126 = v124;
      v128 = (int *)type metadata accessor for LibraryBookInfo();
      v129 = v128[5];
      v130 = (char *)a1 + v129;
      v131 = (char *)a2 + v129;
      v132 = *(_QWORD *)((char *)a2 + v129 + 24);
      swift_bridgeObjectRetain();
      if (v132)
      {
        *((_QWORD *)v130 + 3) = v132;
        *((_QWORD *)v130 + 4) = *((_QWORD *)v131 + 4);
        (**(void (***)(char *, char *, uint64_t))(v132 - 8))(v130, v131, v132);
      }
      else
      {
        v138 = *(_OWORD *)v131;
        v139 = *((_OWORD *)v131 + 1);
        *((_QWORD *)v130 + 4) = *((_QWORD *)v131 + 4);
        *(_OWORD *)v130 = v138;
        *((_OWORD *)v130 + 1) = v139;
      }
      *((_BYTE *)a1 + v128[6]) = *((_BYTE *)a2 + v128[6]);
      v140 = v128[7];
      v141 = (_QWORD *)((char *)a1 + v140);
      v142 = (_QWORD *)((char *)a2 + v140);
      if ((unint64_t)(v142[1] - 1) >= 2)
      {
        *v141 = *v142;
        v141[1] = v142[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)v141 = *(_OWORD *)v142;
      }
      v143 = *(int *)(sub_21C3E344C(&qword_25527AD28) + 48);
      v144 = *(void **)((char *)a2 + v143);
      *(_QWORD *)((char *)a1 + v143) = v144;
      v145 = v144;
    }
    swift_storeEnumTagMultiPayload();
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

char *initializeWithTake for BookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;

  v6 = sub_21C3E344C(&qword_25527A3A0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v16 = v15[10];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = sub_21C458BF4();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
    v32 = v15[12];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
    v35 = v15[14];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = sub_21C458C60();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    if (v40(v37, 1, v38))
    {
      v41 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
    *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
    a1[v15[17]] = a2[v15[17]];
    *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
    a1[v15[19]] = a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    a1[v15[22]] = a2[v15[22]];
    a1[v15[23]] = a2[v15[23]];
    a1[v15[24]] = a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    a1[v15[26]] = a2[v15[26]];
    a1[v15[27]] = a2[v15[27]];
    a1[v15[28]] = a2[v15[28]];
    a1[v15[29]] = a2[v15[29]];
    *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
    v46 = v15[31];
    v47 = &a1[v46];
    v48 = &a2[v46];
    if (v40(&a2[v46], 1, v38))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
    }
    v57 = v15[32];
    v58 = &a1[v57];
    v59 = &a2[v57];
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v58[8] = v59[8];
    *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
    v60 = v15[34];
    v61 = &a1[v60];
    v62 = &a2[v60];
    if (v40(&a2[v60], 1, v38))
    {
      v63 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
    }
    *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
    v79 = v15[36];
    v80 = &a1[v79];
    v81 = &a2[v79];
    *(_QWORD *)(v80 + 13) = *(_QWORD *)(v81 + 13);
    *(_OWORD *)v80 = *(_OWORD *)v81;
    v82 = v15[37];
    v83 = &a1[v82];
    v84 = &a2[v82];
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v83[8] = v84[8];
    v85 = v15[38];
    v86 = &a1[v85];
    v87 = &a2[v85];
    *(_DWORD *)v86 = *(_DWORD *)v87;
    v86[4] = v87[4];
    v88 = (int *)type metadata accessor for LibraryBookInfo();
    v89 = v88[5];
    v90 = &a1[v89];
    v91 = &a2[v89];
    v92 = *((_OWORD *)v91 + 1);
    *(_OWORD *)v90 = *(_OWORD *)v91;
    *((_OWORD *)v90 + 1) = v92;
    *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
    a1[v88[6]] = a2[v88[6]];
    *(_OWORD *)&a1[v88[7]] = *(_OWORD *)&a2[v88[7]];
    goto LABEL_30;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
    v9 = v8[10];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_21C458BF4();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
    v22 = v8[12];
    v23 = &a1[v22];
    v24 = &a2[v22];
    v23[8] = v24[8];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
    v25 = v8[14];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = sub_21C458C60();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    if (v30(v27, 1, v28))
    {
      v31 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
    *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
    a1[v8[17]] = a2[v8[17]];
    *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
    a1[v8[19]] = a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    a1[v8[22]] = a2[v8[22]];
    a1[v8[23]] = a2[v8[23]];
    a1[v8[24]] = a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    a1[v8[26]] = a2[v8[26]];
    a1[v8[27]] = a2[v8[27]];
    a1[v8[28]] = a2[v8[28]];
    a1[v8[29]] = a2[v8[29]];
    *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
    v42 = v8[31];
    v43 = &a1[v42];
    v44 = &a2[v42];
    if (v30(&a2[v42], 1, v28))
    {
      v45 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
    }
    v50 = v8[32];
    v51 = &a1[v50];
    v52 = &a2[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
    v53 = v8[34];
    v54 = &a1[v53];
    v55 = &a2[v53];
    if (v30(&a2[v53], 1, v28))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
    }
    *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
    v64 = v8[36];
    v65 = &a1[v64];
    v66 = &a2[v64];
    *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
    *(_OWORD *)v65 = *(_OWORD *)v66;
    v67 = v8[37];
    v68 = &a1[v67];
    v69 = &a2[v67];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v69[8];
    v70 = v8[38];
    v71 = &a1[v70];
    v72 = &a2[v70];
    *(_DWORD *)v71 = *(_DWORD *)v72;
    v71[4] = v72[4];
    v73 = (int *)type metadata accessor for LibraryBookInfo();
    v74 = v73[5];
    v75 = &a1[v74];
    v76 = &a2[v74];
    v77 = *((_OWORD *)v76 + 1);
    *(_OWORD *)v75 = *(_OWORD *)v76;
    *((_OWORD *)v75 + 1) = v77;
    *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
    a1[v73[6]] = a2[v73[6]];
    *(_OWORD *)&a1[v73[7]] = *(_OWORD *)&a2[v73[7]];
    v78 = sub_21C3E344C(&qword_25527AD28);
    *(_QWORD *)&a1[*(int *)(v78 + 48)] = *(_QWORD *)&a2[*(int *)(v78 + 48)];
LABEL_30:
    swift_storeEnumTagMultiPayload();
    goto LABEL_31;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_31:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for BookInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;

  if (a1 != a2)
  {
    sub_21C42CD64((uint64_t)a1);
    v6 = sub_21C3E344C(&qword_25527A3A0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v15 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v16 = v15[10];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_21C458BF4();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)&a1[v15[11]] = *(_OWORD *)&a2[v15[11]];
      v32 = v15[12];
      v33 = &a1[v32];
      v34 = &a2[v32];
      v33[8] = v34[8];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_OWORD *)&a1[v15[13]] = *(_OWORD *)&a2[v15[13]];
      v35 = v15[14];
      v36 = &a1[v35];
      v37 = &a2[v35];
      v38 = sub_21C458C60();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        v41 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[15]] = *(_OWORD *)&a2[v15[15]];
      *(_OWORD *)&a1[v15[16]] = *(_OWORD *)&a2[v15[16]];
      a1[v15[17]] = a2[v15[17]];
      *(_QWORD *)&a1[v15[18]] = *(_QWORD *)&a2[v15[18]];
      a1[v15[19]] = a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      a1[v15[22]] = a2[v15[22]];
      a1[v15[23]] = a2[v15[23]];
      a1[v15[24]] = a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      a1[v15[26]] = a2[v15[26]];
      a1[v15[27]] = a2[v15[27]];
      a1[v15[28]] = a2[v15[28]];
      a1[v15[29]] = a2[v15[29]];
      *(_OWORD *)&a1[v15[30]] = *(_OWORD *)&a2[v15[30]];
      v46 = v15[31];
      v47 = &a1[v46];
      v48 = &a2[v46];
      if (v40(&a2[v46], 1, v38))
      {
        v49 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v47, v48, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v47, 0, 1, v38);
      }
      v57 = v15[32];
      v58 = &a1[v57];
      v59 = &a2[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      *(_QWORD *)&a1[v15[33]] = *(_QWORD *)&a2[v15[33]];
      v60 = v15[34];
      v61 = &a1[v60];
      v62 = &a2[v60];
      if (v40(&a2[v60], 1, v38))
      {
        v63 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v61, v62, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v61, 0, 1, v38);
      }
      *(_OWORD *)&a1[v15[35]] = *(_OWORD *)&a2[v15[35]];
      v79 = v15[36];
      v80 = &a1[v79];
      v81 = &a2[v79];
      *(_QWORD *)(v80 + 13) = *(_QWORD *)(v81 + 13);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      v82 = v15[37];
      v83 = &a1[v82];
      v84 = &a2[v82];
      *(_QWORD *)v83 = *(_QWORD *)v84;
      v83[8] = v84[8];
      v85 = v15[38];
      v86 = &a1[v85];
      v87 = &a2[v85];
      *(_DWORD *)v86 = *(_DWORD *)v87;
      v86[4] = v87[4];
      v88 = (int *)type metadata accessor for LibraryBookInfo();
      v89 = v88[5];
      v90 = &a1[v89];
      v91 = &a2[v89];
      v92 = *((_OWORD *)v91 + 1);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *((_OWORD *)v90 + 1) = v92;
      *((_QWORD *)v90 + 4) = *((_QWORD *)v91 + 4);
      a1[v88[6]] = a2[v88[6]];
      *(_OWORD *)&a1[v88[7]] = *(_OWORD *)&a2[v88[7]];
      goto LABEL_31;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v8 = (int *)type metadata accessor for CommonLibraryAssetInfo();
      v9 = v8[10];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_21C458BF4();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_OWORD *)&a1[v8[11]] = *(_OWORD *)&a2[v8[11]];
      v22 = v8[12];
      v23 = &a1[v22];
      v24 = &a2[v22];
      v23[8] = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *(_OWORD *)&a1[v8[13]] = *(_OWORD *)&a2[v8[13]];
      v25 = v8[14];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = sub_21C458C60();
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
      if (v30(v27, 1, v28))
      {
        v31 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[15]] = *(_OWORD *)&a2[v8[15]];
      *(_OWORD *)&a1[v8[16]] = *(_OWORD *)&a2[v8[16]];
      a1[v8[17]] = a2[v8[17]];
      *(_QWORD *)&a1[v8[18]] = *(_QWORD *)&a2[v8[18]];
      a1[v8[19]] = a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      a1[v8[22]] = a2[v8[22]];
      a1[v8[23]] = a2[v8[23]];
      a1[v8[24]] = a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      a1[v8[26]] = a2[v8[26]];
      a1[v8[27]] = a2[v8[27]];
      a1[v8[28]] = a2[v8[28]];
      a1[v8[29]] = a2[v8[29]];
      *(_OWORD *)&a1[v8[30]] = *(_OWORD *)&a2[v8[30]];
      v42 = v8[31];
      v43 = &a1[v42];
      v44 = &a2[v42];
      if (v30(&a2[v42], 1, v28))
      {
        v45 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v44, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v28);
      }
      v50 = v8[32];
      v51 = &a1[v50];
      v52 = &a2[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      *(_QWORD *)&a1[v8[33]] = *(_QWORD *)&a2[v8[33]];
      v53 = v8[34];
      v54 = &a1[v53];
      v55 = &a2[v53];
      if (v30(&a2[v53], 1, v28))
      {
        v56 = sub_21C3E344C(&qword_254078EC0);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v54, v55, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
      }
      *(_OWORD *)&a1[v8[35]] = *(_OWORD *)&a2[v8[35]];
      v64 = v8[36];
      v65 = &a1[v64];
      v66 = &a2[v64];
      *(_QWORD *)(v65 + 13) = *(_QWORD *)(v66 + 13);
      *(_OWORD *)v65 = *(_OWORD *)v66;
      v67 = v8[37];
      v68 = &a1[v67];
      v69 = &a2[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v8[38];
      v71 = &a1[v70];
      v72 = &a2[v70];
      *(_DWORD *)v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      v73 = (int *)type metadata accessor for LibraryBookInfo();
      v74 = v73[5];
      v75 = &a1[v74];
      v76 = &a2[v74];
      v77 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v77;
      *((_QWORD *)v75 + 4) = *((_QWORD *)v76 + 4);
      a1[v73[6]] = a2[v73[6]];
      *(_OWORD *)&a1[v73[7]] = *(_OWORD *)&a2[v73[7]];
      v78 = sub_21C3E344C(&qword_25527AD28);
      *(_QWORD *)&a1[*(int *)(v78 + 48)] = *(_QWORD *)&a2[*(int *)(v78 + 48)];
LABEL_31:
      swift_storeEnumTagMultiPayload();
      goto LABEL_32;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_32:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for BookInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C430734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_21C3E344C(&qword_25527A3A0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BookInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C4307BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527A3A0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

void sub_21C430838()
{
  unint64_t v0;

  sub_21C4308A8(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C4308A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527B3E0)
  {
    v2 = type metadata accessor for LibraryBookInfo();
    v3 = type metadata accessor for MBook();
    v5 = type metadata accessor for ContentDataSource(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25527B3E0);
  }
}

uint64_t sub_21C43090C(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  return sub_21C430BDC(a1, a2, v4, v5);
}

uint64_t sub_21C430954()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_21C43099C(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 1701869940;
  return 1717924456;
}

uint64_t sub_21C4309D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x22077C1E0](&unk_21C45DA78, a3);
  return sub_21C459518();
}

uint64_t sub_21C430A2C(uint64_t a1)
{
  MEMORY[0x22077C1E0](&unk_21C45DA78, a1);
  return sub_21C458FE4();
}

uint64_t sub_21C430A78()
{
  MEMORY[0x22077C1E0](&unk_21C45DA78);
  return sub_21C458FFC();
}

uint64_t sub_21C430AC8()
{
  MEMORY[0x22077C1E0](&unk_21C45DA78);
  return sub_21C458FF0();
}

uint64_t sub_21C430B18@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C430954();
  *a1 = result;
  return result;
}

uint64_t sub_21C430B4C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_21C43099C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MSparseResource.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void MSparseResource.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t MSparseResource.href.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C430BDC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v5 = v4;
  v7 = *a2;
  v8 = (void *)*((_QWORD *)a2 + 1);
  v31 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v9 = type metadata accessor for MSparseResource.Keys(0, v31, a3, a4);
  swift_bridgeObjectRetain();
  MEMORY[0x22077C1E0](&unk_21C45DA78, v9);
  sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v32);
  swift_bridgeObjectRelease();
  v10 = v33;
  if (v33)
  {
    v11 = v32;
    v12 = HIBYTE(v33) & 0xF;
    if ((v33 & 0x2000000000000000) == 0)
      v12 = v32 & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      swift_bridgeObjectRetain();
      sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v32);
      swift_bridgeObjectRelease();
      v13 = v33;
      if (v33)
      {
        v30 = v32;
        swift_bridgeObjectRetain();
        sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v32);
        swift_bridgeObjectRelease();
        v14 = v33;
        if (v33)
        {
          v15 = v32;
          swift_bridgeObjectRetain();
          sub_21C4547CC(v15, v14, (char *)&v32);
          v16 = v32;
          if (v32 == 6)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            static MResourceType.classType(for:)(v15, v14);
            v29 = v28;
            swift_bridgeObjectRelease();
            if (v29 && swift_dynamicCastMetatype())
            {
              *(_QWORD *)(v5 + 40) = v11;
              *(_QWORD *)(v5 + 48) = v10;
              *(_BYTE *)(v5 + 56) = v16;
              *(_QWORD *)(v5 + 64) = v30;
              *(_QWORD *)(v5 + 72) = v13;
              result = v5;
              *(_QWORD *)(v5 + 16) = a1;
              *(_BYTE *)(v5 + 24) = v7;
              *(_QWORD *)(v5 + 32) = v8;
              return result;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }

  if (qword_254078E68 != -1)
    swift_once();
  if (qword_255279EF0 != -1)
    swift_once();
  v17 = sub_21C458D20();
  sub_21C3E2BA0(v17, (uint64_t)qword_25527A278);
  swift_bridgeObjectRetain();
  v18 = sub_21C458D08();
  v19 = sub_21C45920C();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v32 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain();
    v22 = sub_21C458D80();
    v24 = v23;
    swift_bridgeObjectRelease();
    sub_21C409744(v22, v24, &v32);
    sub_21C459290();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v18, v19, "Invalid data for sparse resource: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v21, -1, -1);
    MEMORY[0x22077C294](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for MSparseResource(0, v31, v25, v26);
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t MSparseResource.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MSparseResource.__deallocating_deinit()
{
  MSparseResource.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_21C431034()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MSparseResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MSparseResource);
}

uint64_t method lookup function for MSparseResource()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for MSparseResource.Keys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MSparseResource.Keys);
}

uint64_t sub_21C4310BC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_21C4310C4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21C431110 + 4 * byte_21C45D93D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21C431144 + 4 * byte_21C45D938[v4]))();
}

uint64_t sub_21C431144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C43114C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C431154);
  return result;
}

uint64_t sub_21C431160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C431168);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21C43116C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C431174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_21C431180()
{
  JUMPOUT(0x22077C1E0);
}

id _sSo14NSUserDefaultsC14BookFoundationE05booksB16NeedingMigrationABSgyFZ_0()
{
  id v0;
  void *v1;
  id v2;
  _OWORD v4[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_21C458E40();
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    sub_21C4592CC();
    swift_unknownObjectRelease();
    sub_21C3E54E8((uint64_t)v4);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
    sub_21C3E54E8((uint64_t)v4);

    return 0;
  }
  return v0;
}

void _sSo14NSUserDefaultsC14BookFoundationE012booksMigrateC25ReadingSettingsToAppGroupyyABFZ_0(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (qword_255279F38 != -1)
    swift_once();
  v2 = (void *)qword_25527BA90;
  v3 = (void *)sub_21C458E40();
  v4 = objc_msgSend(a1, sel_BOOLForKey_, v3);

  objc_msgSend(v2, sel_setBKMenuOnLeft_, v4);
  v5 = (void *)sub_21C458E40();
  v6 = objc_msgSend(a1, sel_BOOLForKey_, v5);

  objc_msgSend(v2, sel_setBKSettingFilterBrightImages_, v6);
  v7 = (void *)sub_21C458E40();
  objc_msgSend(a1, sel_removeObjectForKey_, v7);

  v8 = (id)sub_21C458E40();
  objc_msgSend(a1, sel_removeObjectForKey_, v8);

}

void (*OSAllocatedUnfairLock.valueWithLock.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  *v6 = a2;
  v6[1] = a3;
  v7 = *(_QWORD *)(a3 - 8);
  v6[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v6[3] = malloc(v8);
  v9 = malloc(v8);
  v6[4] = v9;
  OSAllocatedUnfairLock.valueWithLock.getter(a2, a3, (uint64_t)v9);
  return sub_21C43145C;
}

void sub_21C43145C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  v5 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    sub_21C3E37C8((uint64_t)v3, v7, v5);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_21C3E37C8((*a1)[4], v7, v5);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void sub_21C431504(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  OSAllocatedUnfairLock.valueWithLock.getter(*a1, *(_QWORD *)(a3 + a2 - 8), a4);
}

void sub_21C431514(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  sub_21C3E37C8(a1, *a2, *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_21C431524()
{
  return 8;
}

_QWORD *sub_21C431530(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t MAsset.__sequenceNumber.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
  sub_21C40A46C(1, v1);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 0x100000000) != 0)
    return 0;
  else
    return sub_21C459254();
}

uint64_t MAsset.__genres.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v0 = sub_21C3FCCE4(CFSTR("genres"));
  v1 = v0;
  if (v0)
  {
    if (v0 >> 62)
    {
      sub_21C3E344C((uint64_t *)&unk_25527B510);
      v3 = sub_21C459410();
      swift_bridgeObjectRelease();
      return v3;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_21C459500();
      swift_bridgeObjectRelease();
    }
  }
  return v1;
}

uint64_t MAsset.__price.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  char v6;

  swift_getObjectType();
  v1 = objc_msgSend(v0, sel_offer);
  if (v1)
  {
    v2 = v1;
    v3 = sub_21C458D74();

  }
  else
  {
    v3 = 0;
  }
  sub_21C40A940();
  sub_21C4340FC(v3, MEMORY[0x24BEE13C8], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return 0;
  else
    return sub_21C458CF0();
}

_QWORD *MAsset.__width.getter()
{
  return sub_21C431960(2);
}

id sub_21C431890(char *a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  char v10;

  swift_getObjectType();
  v10 = a3;
  v5 = *(_QWORD **)&a1[OBJC_IVAR____TtC14BookFoundation6MAsset_artwork];
  sub_21C40A9C8();
  v6 = a1;
  v7 = sub_21C4342A8((uint64_t)&v10, v5);
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, sel_doubleValue);

    v8 = (void *)sub_21C458CF0();
  }

  return v8;
}

_QWORD *MAsset.__height.getter()
{
  return sub_21C431960(0);
}

_QWORD *sub_21C431960(char a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *result;
  void *v5;
  char v6;

  swift_getObjectType();
  v6 = a1;
  v3 = *(_QWORD **)(v1 + OBJC_IVAR____TtC14BookFoundation6MAsset_artwork);
  sub_21C40A9C8();
  result = sub_21C4342A8((uint64_t)&v6, v3);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, sel_doubleValue);

    return (_QWORD *)sub_21C458CF0();
  }
  return result;
}

unint64_t MAsset.__seriesResource.getter()
{
  unint64_t result;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  if (!sub_21C409458())
    return 0;
  result = sub_21C44F71C();
  if (!result)
  {
LABEL_11:
    swift_release();
    return 0;
  }
  v1 = result;
  v2 = result & 0xFFFFFFFFFFFFFF8;
  if (!(result >> 62))
  {
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
    goto LABEL_10;
  }
  result = sub_21C459434();
  if (!result)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = (id)MEMORY[0x22077BA00](0, v1);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(id *)(v1 + 32);
LABEL_8:
    v4 = v3;
    swift_bridgeObjectRelease();
    swift_release();
    return (unint64_t)v4;
  }
  __break(1u);
  return result;
}

uint64_t MClientIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C431B18 + 4 * byte_21C45DAC0[*v0]))(0x736B6F6F6269, 0xE600000000000000);
}

unint64_t sub_21C431B18()
{
  return 0xD000000000000011;
}

unint64_t sub_21C431B34()
{
  return 0xD000000000000016;
}

BookFoundation::MClientIdentifier_optional __swiftcall MClientIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  BookFoundation::MClientIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_21C459488();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static MClientIdentifier.allCases.getter()
{
  return &unk_24E03F118;
}

void sub_21C431BE8(char *a1)
{
  sub_21C3F82E4(*a1);
}

void sub_21C431BF4()
{
  char *v0;

  sub_21C431EC0(*v0);
}

void sub_21C431BFC(uint64_t a1)
{
  char *v1;

  sub_21C4322F8(a1, *v1);
}

void sub_21C431C04(uint64_t a1)
{
  char *v1;

  sub_21C432434(a1, *v1);
}

BookFoundation::MClientIdentifier_optional sub_21C431C0C(Swift::String *a1)
{
  return MClientIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_21C431C18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = MClientIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_21C431C3C(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E03F140;
}

void MCatalogServiceConfig.clientIdentifier.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void *MCatalogServiceConfig.account.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

_BYTE *MCatalogServiceConfig.init(clientIdentifier:account:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

unint64_t sub_21C431C90()
{
  unint64_t result;

  result = qword_25527B528;
  if (!qword_25527B528)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MClientIdentifier, &type metadata for MClientIdentifier);
    atomic_store(result, (unint64_t *)&qword_25527B528);
  }
  return result;
}

unint64_t sub_21C431CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527B530;
  if (!qword_25527B530)
  {
    v1 = sub_21C3E35C0(&qword_25527B538);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25527B530);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MClientIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21C431D70 + 4 * byte_21C45DACA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21C431DA4 + 4 * byte_21C45DAC5[v4]))();
}

uint64_t sub_21C431DA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C431DAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C431DB4);
  return result;
}

uint64_t sub_21C431DC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C431DC8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21C431DCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C431DD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MClientIdentifier()
{
  return &type metadata for MClientIdentifier;
}

ValueMetadata *type metadata accessor for MCatalogServiceConfig()
{
  return &type metadata for MCatalogServiceConfig;
}

BOOL CGSize.isLandscape.getter(double a1, double a2)
{
  return a2 < a1;
}

uint64_t CGSize.isNan.getter(double a1, double a2)
{
  _BOOL4 v2;

  v2 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

uint64_t CGSize.isInfinite.getter(double a1, double a2)
{
  _BOOL4 v2;

  v2 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) == 0;
  return (*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v2;
}

CGSize __swiftcall CGSize.scaledToFit(in:times:horizontally:)(CGSize in, Swift::Int times, Swift::Bool horizontally)
{
  double v3;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  double v8;
  CGSize result;

  if (horizontally)
    v5 = v3;
  else
    v5 = v4;
  if (!horizontally)
    in.width = in.height;
  v6 = in.width / (v5 * (double)times);
  v7 = floor(v6 * v3);
  v8 = floor(v6 * v4);
  result.height = v8;
  result.width = v7;
  return result;
}

double CGSize.inset(by:)(double a1, double a2)
{
  return a2 - a1;
}

CGSize __swiftcall CGSize.inset(by:)(Swift::Double by)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGSize result;

  v3 = v1 - by;
  v4 = v2 - by;
  v5 = v3;
  result.height = v4;
  result.width = v5;
  return result;
}

void sub_21C431EC0(char a1)
{
  sub_21C45959C();
  __asm { BR              X10 }
}

uint64_t sub_21C431F0C()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C431FA0()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C432024(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21C432068()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C43210C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_21C432154()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C43221C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21C432258()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C4322F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_21C432334()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C4323B4()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C432434(uint64_t a1, char a2)
{
  sub_21C45959C();
  __asm { BR              X10 }
}

uint64_t sub_21C43247C()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C432510(uint64_t a1, char a2)
{
  sub_21C45959C();
  __asm { BR              X10 }
}

uint64_t sub_21C432558()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C43260C(uint64_t a1, char a2)
{
  sub_21C45959C();
  __asm { BR              X10 }
}

uint64_t sub_21C43265C()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t MAudiobookSeries.narratorCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C4327F4();
  sub_21C4340FC(v1, v2, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  v3 = v5;
  sub_21C432838();
  sub_21C4340FC(v3, MEMORY[0x24BEE1768], (uint64_t)&v5);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_21C4327F4()
{
  unint64_t result;

  result = qword_25527B540;
  if (!qword_25527B540)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45DDC8, &type metadata for MAudiobookSeries.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527B540);
  }
  return result;
}

unint64_t sub_21C432838()
{
  unint64_t result;

  result = qword_25527B548;
  if (!qword_25527B548)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45DD90, &type metadata for MAudiobookSeries.NarratorAttributes);
    atomic_store(result, (unint64_t *)&qword_25527B548);
  }
  return result;
}

uint64_t MAudiobookSeries.narratorNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C4327F4();
  sub_21C4340FC(v1, v2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  v3 = v6;
  v4 = sub_21C3E344C(&qword_25527A748);
  sub_21C432838();
  sub_21C4340FC(v3, v4, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21C432968(char *a1, char *a2)
{
  return sub_21C3F84BC(*a1, *a2);
}

uint64_t sub_21C432974()
{
  return sub_21C431FA0();
}

uint64_t sub_21C43297C()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C4329DC()
{
  return sub_21C4323B4();
}

uint64_t sub_21C4329E4@<X0>(char *a1@<X8>)
{
  return sub_21C432F5C(a1);
}

void sub_21C4329F0(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000013;
  else
    v2 = 0xD000000000000012;
  v3 = 0x800000021C45F300;
  if (*v1)
    v3 = 0x800000021C45F320;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t MAudiobookSeries.hasUniqueNarrators.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators);
}

void *MAudiobookSeries.__allocating_init(with:config:)(uint64_t a1, char *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MAudiobookSeries.init(with:config:)(a1, a2);
}

void *MAudiobookSeries.init(with:config:)(uint64_t a1, char *a2)
{
  void *v2;
  char v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20[2];
  uint64_t v21;

  swift_getObjectType();
  v5 = *a2;
  v6 = (void *)*((_QWORD *)a2 + 1);
  LOBYTE(v21) = 0;
  v7 = v2;
  swift_bridgeObjectRetain();
  v8 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A120();
  sub_21C4340FC(a1, v8, (uint64_t)v20);
  swift_bridgeObjectRelease();
  v9 = v20[0];
  if (v20[0])
  {
    LOBYTE(v21) = 0;
    sub_21C4327F4();
    sub_21C4340FC(v9, MEMORY[0x24BEE1328], (uint64_t)v20);
    swift_bridgeObjectRelease();
    v10 = v20[0];
    if (LOBYTE(v20[0]) == 2)
      v10 = 0;
    v7[OBJC_IVAR____TtC14BookFoundation16MAudiobookSeries_hasUniqueNarrators] = v10;

    LOBYTE(v20[0]) = v5;
    v20[1] = (uint64_t)v6;
    return MSeries.init(with:config:)(a1, (unsigned __int8 *)v20);
  }
  else
  {

    if (qword_254078E68 != -1)
      swift_once();
    if (qword_255279EF0 != -1)
      swift_once();
    v12 = sub_21C458D20();
    sub_21C3E2BA0(v12, (uint64_t)qword_25527A278);
    swift_bridgeObjectRetain();
    v13 = sub_21C458D08();
    v14 = sub_21C45920C();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20[0] = v19;
      *(_DWORD *)v15 = 136315394;
      v21 = sub_21C409744(0xD000000000000011, 0x800000021C45FE90, v20);
      sub_21C459290();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      v16 = sub_21C458D80();
      v18 = v17;
      swift_bridgeObjectRelease();
      v21 = sub_21C409744(v16, v18, v20);
      sub_21C459290();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v13, v14, "Invalid data for %s: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22077C294](v19, -1, -1);
      MEMORY[0x22077C294](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_deallocPartialClassInstance();
    return 0;
  }
}

void static MAudiobookSeries.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

id MAudiobookSeries.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_21C432E30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_21C3F7478(*a1, *a2);
}

uint64_t sub_21C432E3C()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C432EA8()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C432EE8()
{
  sub_21C45959C();
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C432F50@<X0>(char *a1@<X8>)
{
  return sub_21C432F5C(a1);
}

uint64_t sub_21C432F5C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_21C432FB4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x746E756F63;
  if (*v1)
    v2 = 0x73656D616ELL;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_21C432FE4()
{
  return type metadata accessor for MAudiobookSeries();
}

uint64_t type metadata accessor for MAudiobookSeries()
{
  uint64_t result;

  result = qword_25527B578;
  if (!qword_25527B578)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C433028()
{
  return swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for MAudiobookSeries.NarratorAttributes()
{
  return &type metadata for MAudiobookSeries.NarratorAttributes;
}

uint64_t _s14BookFoundation16MAudiobookSeriesC18NarratorAttributesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C4330C8 + 4 * byte_21C45DC4B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C4330FC + 4 * byte_21C45DC46[v4]))();
}

uint64_t sub_21C4330FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C433104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C43310CLL);
  return result;
}

uint64_t sub_21C433118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C433120);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C433124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C43312C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MAudiobookSeries.Attributes()
{
  return &type metadata for MAudiobookSeries.Attributes;
}

unint64_t sub_21C43314C()
{
  unint64_t result;

  result = qword_25527B588;
  if (!qword_25527B588)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45DD00, &type metadata for MAudiobookSeries.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527B588);
  }
  return result;
}

unint64_t sub_21C433194()
{
  unint64_t result;

  result = qword_25527B590;
  if (!qword_25527B590)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45DD68, &type metadata for MAudiobookSeries.NarratorAttributes);
    atomic_store(result, (unint64_t *)&qword_25527B590);
  }
  return result;
}

uint64_t DateInterval.distance(_:calendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  char v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v3 = sub_21C458C60();
  v24 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - v7;
  v9 = sub_21C458B70();
  v22 = *(_QWORD *)(v9 - 8);
  v23 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C3E344C(&qword_25527B598);
  v12 = sub_21C458CB4();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21C45A5D0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, a1, v12);
  sub_21C4333D8(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_21C458A5C();
  sub_21C458A50();
  sub_21C458C90();
  swift_bridgeObjectRelease();
  v16 = *(void (**)(char *, uint64_t))(v24 + 8);
  v16(v6, v3);
  v16(v8, v3);
  v17 = sub_21C458B4C();
  v19 = v18;
  result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v23);
  if ((v19 & 1) != 0)
    return v17;
  if (!__OFADD__(v17++, 1))
    return v17;
  __break(1u);
  return result;
}

uint64_t sub_21C4333D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_21C458CB4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_21C3E344C(&qword_25527B5A0);
    v10 = sub_21C459338();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_21C433630(&qword_25527B5A8, MEMORY[0x24BDCF2A8]);
      v14 = sub_21C458DE0();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_21C433630(&qword_25527B5B0, MEMORY[0x24BDCF2C0]);
          v20 = sub_21C458E34();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_21C433630(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_21C458CB4();
    result = MEMORY[0x22077C1E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id UserDefault.mock(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  id v17;

  v17 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v3;
  v9 = *((_QWORD *)v3 + 1);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v3[*(int *)(v11 + 32)], v5);
  *(_QWORD *)a3 = v10;
  *((_QWORD *)a3 + 1) = v9;
  *((_QWORD *)a3 + 2) = v17;
  v14 = type metadata accessor for UserDefault(0, v5, v12, v13);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&a3[*(int *)(v14 + 32)], v8, v5);
  swift_bridgeObjectRetain();
  return v17;
}

unint64_t sub_21C433738()
{
  unint64_t result;

  result = qword_25527B5B8;
  if (!qword_25527B5B8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25527B5B8);
  }
  return result;
}

uint64_t sub_21C433774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  v10 = type metadata accessor for UserDefault(0, v4, v8, v9);
  return UserDefault.wrappedValue.setter((uint64_t)v6, v10);
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v15[2];
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  sub_21C3E344C(&qword_25527B5C0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_21C3F349C(v15, (uint64_t)v17);
    v7 = v18;
    v8 = v19;
    sub_21C3E359C(v17, v18);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) & 1) != 0)
    {
      v9 = *(void **)(v2 + 16);
      v10 = (void *)sub_21C458E40();
      objc_msgSend(v9, sel_removeObjectForKey_, v10);

      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
      return sub_21C3E2754((uint64_t)v17);
    }
    sub_21C3E2754((uint64_t)v17);
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_21C3FF670((uint64_t)v15, &qword_25527B5C8);
  }
  v12 = *(void **)(v2 + 16);
  v13 = sub_21C4594E8();
  v14 = (void *)sub_21C458E40();
  objc_msgSend(v12, sel_setObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void (*UserDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_21C433A1C;
}

void sub_21C433A1C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    UserDefault.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    UserDefault.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

BOOL sub_21C433AB4(uint64_t a1)
{
  uint64_t v1;

  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 48))(v1, 1) == 1;
}

uint64_t sub_21C433AE8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for UserDefault(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return UserDefault.wrappedValue.getter(v5, a4);
}

uint64_t sub_21C433B24()
{
  return 8;
}

_QWORD *sub_21C433B30(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t *sub_21C433B3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = *v12;
    *v11 = *v12;
    v14 = ((unint64_t)v11 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v17 = v13;
    v16(v14, v15, v4);
  }
  return a1;
}

_QWORD *sub_21C433C1C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void **)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  v9 = *v6;
  *v6 = *v7;
  v10 = v8;

  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_OWORD *sub_21C433CC0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_21C433D28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (void **)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (void **)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  *v7 = *v8;

  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t sub_21C433DB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 24) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C433E84 + 4 * byte_21C45DE00[(v9 - 1)]))();
}

void sub_21C433EFC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_21C4340FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[2];
  _BYTE v19[40];
  __int128 v20;

  v6 = sub_21C459278();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  if (!a1)
  {
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56);
LABEL_10:
    v15 = a3;
    v16 = 1;
    return v14(v15, v16, 1, a2);
  }
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  v18[0] = v20;
  sub_21C459314();
  if (*(_QWORD *)(a1 + 16) && (v10 = sub_21C4519C4((uint64_t)v19), (v11 & 1) != 0))
    sub_21C3E5528(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v18);
  else
    memset(v18, 0, sizeof(v18));
  sub_21C3E54B4((uint64_t)v19);
  sub_21C3E344C(&qword_254078EB8);
  v12 = swift_dynamicCast();
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v12 & 1) == 0)
  {
    v14((uint64_t)v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_10;
  }
  v14((uint64_t)v9, 0, 1, a2);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, a2);
  v15 = a3;
  v16 = 0;
  return v14(v15, v16, 1, a2);
}

_QWORD *sub_21C4342A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[7];
  _OWORD v29[2];

  v2 = a2;
  if (!a2)
    return v2;
  _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0();
  v26 = *(_OWORD *)&v28[5];
  sub_21C459314();
  if (v2[2] && (v3 = sub_21C4519C4((uint64_t)v28), (v4 & 1) != 0))
  {
    sub_21C3E5528(v2[7] + 32 * v3, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  sub_21C3E54B4((uint64_t)v28);
  if (!*((_QWORD *)&v27 + 1))
  {
    sub_21C3E54E8((uint64_t)&v26);
    return 0;
  }
  sub_21C3E8498(&v26, v29);
  sub_21C3E5528((uint64_t)v29, (uint64_t)v28);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_61:
    sub_21C3E8498(v29, v28);
    sub_21C433738();
    if (swift_dynamicCast())
      return (_QWORD *)v26;
    return 0;
  }
  result = (_QWORD *)v26;
  v6 = HIBYTE(*((_QWORD *)&v26 + 1)) & 0xFLL;
  v7 = v26 & 0xFFFFFFFFFFFFLL;
  if ((*((_QWORD *)&v26 + 1) & 0x2000000000000000) != 0)
    v8 = HIBYTE(*((_QWORD *)&v26 + 1)) & 0xFLL;
  else
    v8 = v26 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  if ((*((_QWORD *)&v26 + 1) & 0x1000000000000000) != 0)
  {
    v10 = (uint64_t)sub_21C4291EC(v26, *((uint64_t *)&v26 + 1), 10);
    v12 = v25;
    goto LABEL_52;
  }
  if ((*((_QWORD *)&v26 + 1) & 0x2000000000000000) == 0)
  {
    if ((v26 & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((*((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_21C45938C();
    v10 = (uint64_t)sub_21C4291D8(v9, v7, 10);
    v12 = v11 & 1;
LABEL_52:
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v10);
      sub_21C3E2754((uint64_t)v29);
      return v2;
    }
    goto LABEL_61;
  }
  v28[0] = v26;
  v28[1] = *((_QWORD *)&v26 + 1) & 0xFFFFFFFFFFFFFFLL;
  if (v26 == 43)
  {
    if (!v6)
      goto LABEL_68;
    if (v6 == 1 || (BYTE1(v26) - 48) > 9u)
      goto LABEL_39;
    v10 = (BYTE1(v26) - 48);
    if (v6 != 2)
    {
      if ((BYTE2(v26) - 48) > 9u)
        goto LABEL_39;
      v10 = 10 * (BYTE1(v26) - 48) + (BYTE2(v26) - 48);
      v13 = v6 - 3;
      if (v13)
      {
        v14 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v15 = *v14 - 48;
          if (v15 > 9)
            goto LABEL_39;
          v16 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_39;
          v10 = v16 + v15;
          if (__OFADD__(v16, v15))
            goto LABEL_39;
          v12 = 0;
          ++v14;
          if (!--v13)
            goto LABEL_52;
        }
      }
    }
LABEL_51:
    v12 = 0;
    goto LABEL_52;
  }
  if (v26 != 45)
  {
    if (!v6 || (v26 - 48) > 9u)
      goto LABEL_39;
    v10 = (v26 - 48);
    if (v6 != 1)
    {
      if ((BYTE1(v26) - 48) > 9u)
        goto LABEL_39;
      v10 = 10 * (v26 - 48) + (BYTE1(v26) - 48);
      v17 = v6 - 2;
      if (v17)
      {
        v18 = (unsigned __int8 *)v28 + 2;
        while (1)
        {
          v19 = *v18 - 48;
          if (v19 > 9)
            goto LABEL_39;
          v20 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_39;
          v10 = v20 + v19;
          if (__OFADD__(v20, v19))
            goto LABEL_39;
          v12 = 0;
          ++v18;
          if (!--v17)
            goto LABEL_52;
        }
      }
    }
    goto LABEL_51;
  }
  if (v6)
  {
    if (v6 != 1 && (BYTE1(v26) - 48) <= 9u)
    {
      if (v6 == 2)
      {
        v12 = 0;
        v10 = -(uint64_t)(BYTE1(v26) - 48);
        goto LABEL_52;
      }
      if ((BYTE2(v26) - 48) <= 9u)
      {
        v10 = -10 * (BYTE1(v26) - 48) - (BYTE2(v26) - 48);
        v21 = v6 - 3;
        if (!v21)
          goto LABEL_51;
        v22 = (unsigned __int8 *)v28 + 3;
        while (1)
        {
          v23 = *v22 - 48;
          if (v23 > 9)
            break;
          v24 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            break;
          v10 = v24 - v23;
          if (__OFSUB__(v24, v23))
            break;
          v12 = 0;
          ++v22;
          if (!--v21)
            goto LABEL_52;
        }
      }
    }
LABEL_39:
    v10 = 0;
    v12 = 1;
    goto LABEL_52;
  }
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

uint64_t sub_21C43469C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;

  v2 = sub_21C3E344C(&qword_25527B610);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_21C458AA4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v26 = (char *)&v25 - v9;
  v10 = *(_QWORD *)(a1 + 64);
  v29 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v30 = (unint64_t)(v11 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  v28 = MEMORY[0x24BEE4AF8];
  if (!v13)
    goto LABEL_7;
LABEL_4:
  for (v13 &= v13 - 1; ; v13 = (v17 - 1) & v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_21C458A8C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      result = sub_21C3FF670((uint64_t)v4, &qword_25527B610);
      if (v13)
        goto LABEL_4;
    }
    else
    {
      v19 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v20 = v26;
      v19(v26, v4, v5);
      v19(v27, v20, v5);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v28 = sub_21C3FD074(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
      v22 = *(_QWORD *)(v28 + 16);
      v21 = *(_QWORD *)(v28 + 24);
      if (v22 >= v21 >> 1)
        v28 = sub_21C3FD074(v21 > 1, v22 + 1, 1, v28);
      v23 = v27;
      v24 = v28;
      *(_QWORD *)(v28 + 16) = v22 + 1;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v19)(v24+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22, v23, v5);
      if (v13)
        goto LABEL_4;
    }
LABEL_7:
    v16 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v30)
      goto LABEL_29;
    v17 = *(_QWORD *)(v29 + 8 * v16);
    ++v15;
    if (!v17)
    {
      v15 = v16 + 1;
      if (v16 + 1 >= v30)
        goto LABEL_29;
      v17 = *(_QWORD *)(v29 + 8 * v15);
      if (!v17)
      {
        v15 = v16 + 2;
        if (v16 + 2 >= v30)
          goto LABEL_29;
        v17 = *(_QWORD *)(v29 + 8 * v15);
        if (!v17)
        {
          v15 = v16 + 3;
          if (v16 + 3 >= v30)
            goto LABEL_29;
          v17 = *(_QWORD *)(v29 + 8 * v15);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    ;
  }
  v18 = v16 + 4;
  if (v18 >= v30)
  {
LABEL_29:
    swift_release();
    return v28;
  }
  v17 = *(_QWORD *)(v29 + 8 * v18);
  if (v17)
  {
    v15 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v15 >= v30)
      goto LABEL_29;
    v17 = *(_QWORD *)(v29 + 8 * v15);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

__n128 MCatalogRequestURLBuilder.init(href:additionalParameters:bag:clientIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __n128 result;
  uint64_t v9;
  char v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;
  __n128 v15;
  char v16;

  v16 = *a5;
  sub_21C435680(0, 0, 0, a3, a1, a2, a4, &v16, (uint64_t)v12);
  if (!v6)
  {
    v9 = v13;
    v10 = v14;
    result = v15;
    v11 = v12[1];
    *(_OWORD *)a6 = v12[0];
    *(_OWORD *)(a6 + 16) = v11;
    *(_QWORD *)(a6 + 32) = v9;
    *(_BYTE *)(a6 + 40) = v10;
    *(__n128 *)(a6 + 48) = result;
  }
  return result;
}

uint64_t sub_21C434A9C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_21C3FD074(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = sub_21C458AA4();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C434C04(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_21C459434();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_21C459434();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x22077BA0C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_21C439804(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_21C459434();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_21C459038();
  }
  __break(1u);
  return result;
}

uint64_t MCatalogRequestURLBuilder.build()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(v2 + 208) = a1;
  sub_21C3E344C(&qword_25527A2D0);
  *(_QWORD *)(v2 + 216) = swift_task_alloc();
  sub_21C3E344C(&qword_25527B5D8);
  *(_QWORD *)(v2 + 224) = swift_task_alloc();
  v3 = sub_21C458B10();
  *(_QWORD *)(v2 + 232) = v3;
  *(_QWORD *)(v2 + 240) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 248) = swift_task_alloc();
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 256) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 272) = v4;
  *(_QWORD *)(v2 + 288) = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(v2 + 400) = *(_BYTE *)(v1 + 40);
  *(_OWORD *)(v2 + 296) = *(_OWORD *)(v1 + 48);
  return swift_task_switch();
}

uint64_t sub_21C434E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;

  if (*(_QWORD *)(v0 + 304))
  {
    v1 = *(_QWORD *)(v0 + 232);
    v2 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 224);
    sub_21C458AF8();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
    {
      sub_21C3FF670(*(_QWORD *)(v0 + 224), &qword_25527B5D8);
      sub_21C43706C();
      swift_allocError();
      *v4 = 0;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 32))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
      v10 = *(_BYTE *)(v0 + 400);
      v11 = *(_QWORD *)(v0 + 288);
      v12 = *(_OWORD *)(v0 + 272);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 256);
      *(_OWORD *)(v0 + 96) = v12;
      *(_QWORD *)(v0 + 112) = v11;
      *(_BYTE *)(v0 + 120) = v10;
      *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 296);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 344) = v13;
      *v13 = v0;
      v13[1] = sub_21C43512C;
      return sub_21C435E0C();
    }
  }
  else
  {
    v6 = *(_BYTE *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 288);
    v7 = *(_QWORD *)(v0 + 296);
    v14 = *(_OWORD *)(v0 + 272);
    v15 = *(_OWORD *)(v0 + 256);
    sub_21C458B04();
    *(_OWORD *)(v0 + 16) = v15;
    *(_OWORD *)(v0 + 32) = v14;
    *(_QWORD *)(v0 + 48) = v8;
    *(_BYTE *)(v0 + 56) = v6;
    *(_QWORD *)(v0 + 64) = v7;
    *(_QWORD *)(v0 + 72) = 0;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 312) = v9;
    *v9 = v0;
    v9[1] = sub_21C435038;
    return sub_21C43597C();
  }
}

uint64_t sub_21C435038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 320) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 328) = a2;
    *(_QWORD *)(v6 + 336) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_21C4350B0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  sub_21C458AE0();
  v1 = *(_BYTE *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 112) = v2;
  *(_BYTE *)(v0 + 120) = v1;
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(v0 + 296);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v4;
  *v4 = v0;
  v4[1] = sub_21C43512C;
  return sub_21C435E0C();
}

uint64_t sub_21C43512C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C435198()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 352) + 16))
  {
    v1 = sub_21C458AB0();
    if (!v1)
      v1 = MEMORY[0x24BEE4AF8];
    sub_21C434A9C(v1);
    sub_21C458ABC();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v2 = *(_BYTE *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v0 + 160) = v4;
  *(_QWORD *)(v0 + 176) = v3;
  *(_BYTE *)(v0 + 184) = v2;
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 296);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 368) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = sub_21C435278;
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(v0 + 176);
  *(_BYTE *)(v5 + 129) = *(_BYTE *)(v0 + 184);
  return swift_task_switch();
}

uint64_t sub_21C435278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 376) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 384) = a2;
    *(_QWORD *)(v6 + 392) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_21C4352F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 216);
  sub_21C458AEC();
  sub_21C458AD4();
  sub_21C458AC8();
  v2 = sub_21C458BF4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  if (v4 == 1)
  {
    sub_21C3FF670(*(_QWORD *)(v0 + 216), &qword_25527A2D0);
    sub_21C43706C();
    swift_allocError();
    *v8 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 208);
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10, v9, v2);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C43545C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C4354BC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C43551C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t MCatalogRequestURLBuilder.BuilderError.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000032;
  else
    return 0xD000000000000028;
}

BOOL static MCatalogRequestURLBuilder.BuilderError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t MCatalogRequestURLBuilder.BuilderError.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t MCatalogRequestURLBuilder.BuilderError.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

unint64_t sub_21C435640()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000032;
  else
    return 0xD000000000000028;
}

void sub_21C435680(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;

  if (a6)
  {
    v39 = *a8;
    v40 = a9;
    v41 = a6;
    v42 = a7;
    swift_bridgeObjectRelease();
    v37 = sub_21C417C90(MEMORY[0x24BEE4AF8]);
    goto LABEL_3;
  }
  if (!a1)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_21C43706C();
    swift_allocError();
    *v36 = 1;
    swift_willThrow();

    return;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v37 = a1;
  v39 = *a8;
  v40 = a9;
  v41 = 0;
  v42 = a7;
  a5 = 0;
LABEL_3:
  v13 = MEMORY[0x24BEE4AF8];
  if (!a2)
    a2 = MEMORY[0x24BEE4AF8];
  if (a3)
    v14 = a3;
  else
    v14 = MEMORY[0x24BEE4AF8];
  if (a4)
  {
    v43 = a4;
    v15 = *(_QWORD *)(a2 + 16);
    if (v15)
      goto LABEL_10;
  }
  else
  {
    v43 = sub_21C41604C(MEMORY[0x24BEE4AF8]);
    v15 = *(_QWORD *)(a2 + 16);
    if (v15)
    {
LABEL_10:
      sub_21C3FD494(0, v15, 0);
      v16 = 0;
      v17 = v13;
      do
      {
        v18 = sub_21C458E64();
        v20 = v19;
        v22 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        if (v22 >= v21 >> 1)
          sub_21C3FD494(v21 > 1, v22 + 1, 1);
        ++v16;
        *(_QWORD *)(v17 + 16) = v22 + 1;
        v23 = v17 + 16 * v22;
        *(_QWORD *)(v23 + 32) = v18;
        *(_QWORD *)(v23 + 40) = v20;
      }
      while (v15 != v16);
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x24BEE4AF8];
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  v17 = MEMORY[0x24BEE4AF8];
LABEL_20:
  v24 = sub_21C40A08C(v17);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v14 + 16);
  if (v25)
  {
    sub_21C3FD494(0, v25, 0);
    v26 = 0;
    v27 = v13;
    do
    {
      v28 = sub_21C458E64();
      v30 = v29;
      v32 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      if (v32 >= v31 >> 1)
        sub_21C3FD494(v31 > 1, v32 + 1, 1);
      ++v26;
      *(_QWORD *)(v27 + 16) = v32 + 1;
      v33 = v27 + 16 * v32;
      *(_QWORD *)(v33 + 32) = v28;
      *(_QWORD *)(v33 + 40) = v30;
    }
    while (v25 != v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v27 = MEMORY[0x24BEE4AF8];
  }
  v34 = sub_21C40A08C(v27);
  swift_bridgeObjectRelease();
  v35 = sub_21C43469C(v43);
  swift_bridgeObjectRelease();
  *(_QWORD *)v40 = v37;
  *(_QWORD *)(v40 + 8) = v24;
  *(_QWORD *)(v40 + 16) = v34;
  *(_QWORD *)(v40 + 24) = v35;
  *(_QWORD *)(v40 + 32) = v42;
  *(_BYTE *)(v40 + 40) = v39;
  *(_QWORD *)(v40 + 48) = a5;
  *(_QWORD *)(v40 + 56) = v41;
}

uint64_t sub_21C43597C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = v0[1];
  v1[17] = *v0;
  v1[18] = v2;
  v3 = v0[3];
  v1[19] = v0[2];
  v1[20] = v3;
  v4 = (void *)v0[4];
  v5 = v0[7];
  v1[21] = v4;
  v1[22] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v4;
  return swift_task_switch();
}

uint64_t sub_21C435A04()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend(*(id *)(v0 + 168), sel_countryCode);
  *(_QWORD *)(v0 + 184) = v1;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_21C435ABC;
  v2 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v3 = (_QWORD *)(v0 + 80);
  v3[1] = 0x40000000;
  v3[2] = sub_21C42B0C8;
  v3[3] = &unk_24E0422C0;
  v3[4] = v2;
  objc_msgSend(v1, sel_valueWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_21C435ABC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 192) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21C435B1C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(void **)(v0 + 120);

  sub_21C458E64();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  strcpy((char *)v12, "/v1/catalog/");
  BYTE5(v12[1]) = 0;
  HIWORD(v12[1]) = -5120;
  sub_21C458F00();
  swift_bridgeObjectRelease();
  v5 = v12[0];
  v4 = v12[1];
  if (*(_QWORD *)(v2 + 16) > 1uLL)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v4);
  v6 = sub_21C439A68(*(_QWORD *)(v0 + 136));
  if ((v8 & 1) != 0)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x21C435D64);
  }
  v9 = *(_QWORD *)(v0 + 136);
  if (*(_DWORD *)(v9 + 36) != v7)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 != 1 << *(_BYTE *)(v9 + 32))
  {
    sub_21C439A10(v6, v7, v9, v12);
    v10 = LOBYTE(v12[0]);
    if (LOBYTE(v12[0]) != 6)
    {
      v12[0] = v5;
      v12[1] = v4;
      sub_21C458F00();
      __asm { BR              X9 }
    }
    v12[0] = v5;
    v12[1] = v4;
    sub_21C458F00();
    v5 = v12[0];
    v4 = v12[1];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v4);
}

uint64_t sub_21C435D7C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 168);
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C435E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = sub_21C458AA4();
  *(_QWORD *)(v1 + 272) = v2;
  *(_QWORD *)(v1 + 280) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 288) = swift_task_alloc();
  *(_QWORD *)(v1 + 296) = swift_task_alloc();
  *(_QWORD *)(v1 + 304) = swift_task_alloc();
  *(_QWORD *)(v1 + 312) = swift_task_alloc();
  *(_QWORD *)(v1 + 320) = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 328) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 344) = v3;
  *(_QWORD *)(v1 + 360) = *(_QWORD *)(v0 + 32);
  *(_BYTE *)(v1 + 225) = *(_BYTE *)(v0 + 40);
  *(_OWORD *)(v1 + 368) = *(_OWORD *)(v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21C435EC8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  _QWORD *v48[2];

  v2 = v0;
  *(_QWORD *)(v0 + 232) = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v0 + 328);
  if (*(_QWORD *)(v3 + 16) >= 2uLL)
  {
    v4 = swift_bridgeObjectRetain();
    v5 = (_QWORD *)sub_21C443D1C(v4);
    swift_bridgeObjectRelease();
    v48[0] = v5;
    swift_retain();
    sub_21C43B3EC((uint64_t *)v48);
    swift_release();
    v17 = v48[0][2];
    if (v17)
    {
      v18 = swift_retain();
      v19 = 0;
      v1 = MEMORY[0x24BEE4AF8];
      v20 = v18;
      do
      {
        if (*(_QWORD *)(v3 + 16))
        {
          v21 = *(unsigned __int8 *)(v20 + v19 + 32);
          sub_21C45189C(*(_BYTE *)(v20 + v19 + 32));
          if ((v22 & 1) != 0)
          {
            v48[0] = (_QWORD *)1534289001;
            v48[1] = (_QWORD *)0xE400000000000000;
            __asm { BR              X8 }
          }
        }
        ++v19;
      }
      while (v17 != v19);
      swift_release_n();
      goto LABEL_18;
    }
    swift_release();
LABEL_17:
    v1 = MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  v6 = sub_21C439B68(*(_QWORD *)(v0 + 328));
  if ((v8 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x21C436844);
  }
  v9 = *(_QWORD *)(v0 + 328);
  if (*(_DWORD *)(v9 + 36) != v7)
  {
    __break(1u);
LABEL_33:
    v1 = sub_21C3FD074(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    goto LABEL_20;
  }
  if (v6 == 1 << *(_BYTE *)(v9 + 32))
    goto LABEL_17;
  sub_21C439BF0(v48, v6, v7, 0, v9);
  v10 = swift_bridgeObjectRetain();
  v11 = sub_21C443C38(v10);
  swift_bridgeObjectRelease();
  v48[0] = v11;
  sub_21C43748C((uint64_t *)v48);
  *(_QWORD **)(v0 + 256) = v48[0];
  sub_21C3E344C(&qword_25527A748);
  sub_21C43B49C((unint64_t *)&qword_25527A750, &qword_25527A748, MEMORY[0x24BEE12B0]);
  sub_21C458DF8();
  swift_release();
  swift_bridgeObjectRelease();
  sub_21C458A8C();
  swift_bridgeObjectRelease();
  v1 = sub_21C3FD074(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v13 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  if (v13 >= v12 >> 1)
    v1 = sub_21C3FD074(v12 > 1, v13 + 1, 1, v1);
  v14 = *(_QWORD *)(v2 + 312);
  v15 = *(_QWORD *)(v2 + 272);
  v16 = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v1 + 16) = v13 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v1+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v13, v14, v15);
  *(_QWORD *)(v2 + 232) = v1;
LABEL_18:
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 336) + 16))
    goto LABEL_23;
  v23 = swift_bridgeObjectRetain();
  v24 = sub_21C443C38(v23);
  swift_bridgeObjectRelease();
  v48[0] = v24;
  sub_21C43748C((uint64_t *)v48);
  *(_QWORD **)(v2 + 248) = v48[0];
  sub_21C3E344C(&qword_25527A748);
  sub_21C43B49C((unint64_t *)&qword_25527A750, &qword_25527A748, MEMORY[0x24BEE12B0]);
  sub_21C458DF8();
  swift_release();
  sub_21C458A8C();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_33;
LABEL_20:
  v26 = *(_QWORD *)(v1 + 16);
  v25 = *(_QWORD *)(v1 + 24);
  if (v26 >= v25 >> 1)
    v1 = sub_21C3FD074(v25 > 1, v26 + 1, 1, v1);
  v27 = *(_QWORD *)(v2 + 304);
  v28 = *(_QWORD *)(v2 + 272);
  v29 = *(_QWORD *)(v2 + 280);
  *(_QWORD *)(v1 + 16) = v26 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v1+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v26, v27, v28);
  *(_QWORD *)(v2 + 232) = v1;
LABEL_23:
  if (*(_QWORD *)(*(_QWORD *)(v2 + 344) + 16))
  {
    v30 = swift_bridgeObjectRetain();
    v31 = sub_21C443C38(v30);
    swift_bridgeObjectRelease();
    v48[0] = v31;
    sub_21C43748C((uint64_t *)v48);
    *(_QWORD **)(v2 + 240) = v48[0];
    sub_21C3E344C(&qword_25527A748);
    sub_21C43B49C((unint64_t *)&qword_25527A750, &qword_25527A748, MEMORY[0x24BEE12B0]);
    sub_21C458DF8();
    swift_release();
    sub_21C458A8C();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_21C3FD074(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    v33 = *(_QWORD *)(v1 + 16);
    v32 = *(_QWORD *)(v1 + 24);
    if (v33 >= v32 >> 1)
      v1 = sub_21C3FD074(v32 > 1, v33 + 1, 1, v1);
    v34 = *(_QWORD *)(v2 + 296);
    v35 = *(_QWORD *)(v2 + 272);
    v36 = *(_QWORD *)(v2 + 280);
    *(_QWORD *)(v1 + 16) = v33 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v36 + 32))(v1+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v33, v34, v35);
    *(_QWORD *)(v2 + 232) = v1;
  }
  v37 = *(_QWORD *)(v2 + 352);
  if (*(_QWORD *)(v37 + 16))
  {
    v48[0] = *(_QWORD **)(v2 + 352);
    swift_bridgeObjectRetain();
    sub_21C4374F4(v48);
    sub_21C434A9C((uint64_t)v48[0]);
    v37 = *(_QWORD *)(v2 + 352);
  }
  v39 = *(_QWORD *)(v2 + 368);
  v38 = *(_QWORD *)(v2 + 376);
  v40 = *(_BYTE *)(v2 + 225);
  v41 = *(void **)(v2 + 360);
  v43 = *(_QWORD *)(v2 + 336);
  v42 = *(_QWORD *)(v2 + 344);
  v44 = *(_QWORD *)(v2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = v41;
  *(_QWORD *)(v2 + 80) = v44;
  *(_QWORD *)(v2 + 88) = v43;
  *(_QWORD *)(v2 + 96) = v42;
  *(_QWORD *)(v2 + 104) = v37;
  *(_QWORD *)(v2 + 112) = v45;
  *(_BYTE *)(v2 + 120) = v40;
  *(_QWORD *)(v2 + 128) = v39;
  *(_QWORD *)(v2 + 136) = v38;
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 384) = v46;
  *v46 = v2;
  v46[1] = sub_21C436860;
  return sub_21C43597C();
}

uint64_t sub_21C436860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 392) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 400) = a2;
    *(_QWORD *)(v6 + 408) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_21C4368D8()
{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 408);
  v1 = *(void **)(v0 + 360);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 400);
  *(_QWORD *)(v0 + 200) = 0x6F6363612F656D2FLL;
  *(_QWORD *)(v0 + 208) = 0xEB00000000746E75;
  sub_21C3E8EB0();
  v2 = sub_21C4592C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  else
  {
    v5 = *(void **)(v0 + 360);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = v5;
    swift_bridgeObjectRetain();
    v7 = objc_msgSend(v6, sel_languageTag);
    *(_QWORD *)(v0 + 416) = v7;
    *(_QWORD *)(v0 + 56) = v0 + 216;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_21C436B9C;
    v8 = swift_continuation_init();
    *(_QWORD *)(v0 + 144) = MEMORY[0x24BDAC760];
    v9 = (_QWORD *)(v0 + 144);
    v9[1] = 0x40000000;
    v9[2] = sub_21C42B0C8;
    v9[3] = &unk_24E0422A8;
    v9[4] = v8;
    objc_msgSend(v7, sel_valueWithCompletion_, v9);
    return swift_continuation_await();
  }
}

uint64_t sub_21C436AEC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C436B9C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 424) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21C436BFC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 360);
  v2 = *(void **)(v0 + 216);

  v3 = sub_21C458E64();
  v5 = v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    sub_21C458A8C();
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 232);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_21C3FD074(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
    v9 = *(_QWORD *)(v7 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if (v9 >= v8 >> 1)
      v7 = sub_21C3FD074(v8 > 1, v9 + 1, 1, v7);
    v11 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 288);
    v12 = *(_QWORD *)(v0 + 272);
    *(_QWORD *)(v7 + 16) = v9 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v9, v10, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 232);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
}

uint64_t sub_21C436DAC()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 416);
  v2 = *(void **)(v0 + 360);
  swift_willThrow();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C436E7C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = *(_QWORD *)(v0 + 32);
  *(_BYTE *)(v1 + 129) = *(_BYTE *)(v0 + 40);
  return swift_task_switch();
}

uint64_t sub_21C436EA0()
{
  uint64_t v0;
  char **v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_BYTE *)(v0 + 129) == 3)
    v1 = &selRef_priceTrackingMediaAPIHost;
  else
    v1 = &selRef_booksMediaAPIHost;
  v2 = objc_msgSend(*(id *)(v0 + 136), *v1);
  *(_QWORD *)(v0 + 144) = v2;
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_21C436F70;
  v3 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v4 = (_QWORD *)(v0 + 80);
  v4[1] = 0x40000000;
  v4[2] = sub_21C42B0C8;
  v4[3] = &unk_24E042290;
  v4[4] = v3;
  objc_msgSend(v2, sel_valueWithCompletion_, v4);
  return swift_continuation_await();
}

uint64_t sub_21C436F70()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_21C436FD0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 120);

  v2 = sub_21C458E64();
  v4 = v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v4);
}

uint64_t sub_21C43702C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_21C43706C()
{
  unint64_t result;

  result = qword_25527B5F8;
  if (!qword_25527B5F8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MCatalogRequestURLBuilder.BuilderError, &type metadata for MCatalogRequestURLBuilder.BuilderError);
    atomic_store(result, (unint64_t *)&qword_25527B5F8);
  }
  return result;
}

unint64_t sub_21C4370B4()
{
  unint64_t result;

  result = qword_25527B600;
  if (!qword_25527B600)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MCatalogRequestURLBuilder.BuilderError, &type metadata for MCatalogRequestURLBuilder.BuilderError);
    atomic_store(result, (unint64_t *)&qword_25527B600);
  }
  return result;
}

uint64_t destroy for MCatalogRequestURLBuilder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MCatalogRequestURLBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogRequestURLBuilder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogRequestURLBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestURLBuilder()
{
  return &type metadata for MCatalogRequestURLBuilder;
}

uint64_t storeEnumTagSinglePayload for MCatalogRequestURLBuilder.BuilderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C43740C + 4 * byte_21C45DE95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C437440 + 4 * asc_21C45DE90[v4]))();
}

uint64_t sub_21C437440(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C437448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C437450);
  return result;
}

uint64_t sub_21C43745C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C437464);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C437468(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C437470(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MCatalogRequestURLBuilder.BuilderError()
{
  return &type metadata for MCatalogRequestURLBuilder.BuilderError;
}

uint64_t sub_21C43748C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21C439B18(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_21C437574(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_21C4374F4(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_21C458AA4() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_21C439B2C(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_21C437C5C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_21C437574(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_21C4594D0();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_21C4387F4(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_21C438B88((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_21C4397F0((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_21C459068();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_21C4594F4();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_21C4594F4()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_21C4393FC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_21C4393FC((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_21C438B88((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_21C4594F4() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C437C5C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;

  v2 = v1;
  v4 = sub_21C458AA4();
  v159 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v146 = (char *)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v153 = (char *)&v138 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v155 = (char *)&v138 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v154 = (char *)&v138 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v142 = (char *)&v138 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v149 = (char *)&v138 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v144 = (char *)&v138 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v143 = (char *)&v138 - v19;
  v158 = a1;
  v20 = a1[1];
  result = sub_21C4594D0();
  if (result >= v20)
  {
    if (v20 < 0)
      goto LABEL_150;
    if (v20)
      return sub_21C4388C0(0, v20, 1, v158);
    return result;
  }
  if (v20 >= 0)
    v22 = v20;
  else
    v22 = v20 + 1;
  if (v20 < -1)
    goto LABEL_158;
  v139 = result;
  if (v20 < 2)
  {
    v27 = (char *)MEMORY[0x24BEE4AF8];
    v26 = MEMORY[0x24BEE4AF8]
        + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
    v138 = MEMORY[0x24BEE4AF8];
    if (v20 != 1)
    {
      v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_116:
      if (v29 >= 2)
      {
        v131 = *v158;
        do
        {
          v132 = v29 - 2;
          if (v29 < 2)
            goto LABEL_145;
          if (!v131)
            goto LABEL_157;
          v133 = *(_QWORD *)&v27[16 * v132 + 32];
          v134 = *(_QWORD *)&v27[16 * v29 + 24];
          v135 = v26;
          sub_21C438E20(v131 + *(_QWORD *)(v159 + 72) * v133, v131 + *(_QWORD *)(v159 + 72) * *(_QWORD *)&v27[16 * v29 + 16], v131 + *(_QWORD *)(v159 + 72) * v134, v26);
          if (v2)
            break;
          if (v134 < v133)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = sub_21C4397F0((uint64_t)v27);
          if (v132 >= *((_QWORD *)v27 + 2))
            goto LABEL_147;
          v136 = &v27[16 * v132 + 32];
          *(_QWORD *)v136 = v133;
          *((_QWORD *)v136 + 1) = v134;
          v137 = *((_QWORD *)v27 + 2);
          if (v29 > v137)
            goto LABEL_148;
          memmove(&v27[16 * v29 + 16], &v27[16 * v29 + 32], 16 * (v137 - v29));
          *((_QWORD *)v27 + 2) = v137 - 1;
          v29 = v137 - 1;
          v26 = v135;
        }
        while (v137 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v138 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v23 = v22 >> 1;
    v24 = sub_21C459068();
    *(_QWORD *)(v24 + 16) = v23;
    v25 = *(unsigned __int8 *)(v159 + 80);
    v138 = v24;
    v26 = v24 + ((v25 + 32) & ~v25);
  }
  v28 = 0;
  v27 = (char *)MEMORY[0x24BEE4AF8];
  v148 = v26;
  v152 = v4;
  while (1)
  {
    v30 = v28;
    v31 = v28 + 1;
    if (v28 + 1 >= v20)
    {
      v39 = v28 + 1;
      goto LABEL_67;
    }
    v156 = v20;
    v32 = *v158;
    v33 = *(_QWORD *)(v159 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 16);
    v34(v143, *v158 + v33 * v31, v4);
    v147 = v30;
    v145 = v32;
    v157 = v33;
    v34(v144, v32 + v33 * v30, v4);
    v35 = sub_21C458A98();
    v37 = v36;
    if (v35 == sub_21C458A98() && v37 == v38)
      LODWORD(v151) = 0;
    else
      LODWORD(v151) = sub_21C4594F4();
    v40 = v142;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v159 + 8);
    v42 = v152;
    v41(v144, v152);
    v41(v143, v42);
    v39 = v147 + 2;
    if (v147 + 2 < v156)
    {
      v140 = v27;
      v141 = v2;
      v150 = v157 * v31;
      v43 = v145;
      v44 = v157 * v39;
      while (1)
      {
        v45 = v152;
        v34(v149, v43 + v44, v152);
        v34(v40, v43 + v150, v45);
        v46 = sub_21C458A98();
        v48 = v47;
        if (v46 == sub_21C458A98() && v48 == v49)
          v50 = 0;
        else
          v50 = sub_21C4594F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v51 = v152;
        v41(v40, v152);
        v41(v149, v51);
        if (((v151 ^ v50) & 1) != 0)
          break;
        ++v39;
        v43 += v157;
        if (v156 == v39)
        {
          v52 = v156;
          v39 = v156;
          v27 = v140;
          v2 = v141;
          goto LABEL_32;
        }
      }
      v27 = v140;
      v2 = v141;
    }
    v52 = v156;
LABEL_32:
    v30 = v147;
    v53 = v145;
    if ((v151 & 1) == 0)
      break;
    if (v39 < v147)
      goto LABEL_151;
    if (v147 >= v39)
      break;
    v140 = v27;
    v141 = v2;
    v54 = 0;
    v55 = v157 * (v39 - 1);
    v56 = v39 * v157;
    v57 = v147;
    v58 = v147 * v157;
    do
    {
      if (v57 != v39 + v54 - 1)
      {
        if (!v53)
          goto LABEL_156;
        v60 = v39;
        v61 = v53 + v55;
        v151 = *(_QWORD *)(v159 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v151)(v146, v53 + v58, v152);
        if (v58 < v55 || v53 + v58 >= (unint64_t)(v53 + v56))
        {
          v59 = v152;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v59 = v152;
          if (v58 != v55)
            swift_arrayInitWithTakeBackToFront();
        }
        ((void (*)(uint64_t, char *, uint64_t))v151)(v61, v146, v59);
        v39 = v60;
        v53 = v145;
      }
      ++v57;
      --v54;
      v55 -= v157;
      v56 -= v157;
      v58 += v157;
    }
    while (v57 < v39 + v54);
    v27 = v140;
    v2 = v141;
    v62 = v152;
    v30 = v147;
    v52 = v156;
    if (v39 < v156)
      goto LABEL_48;
LABEL_67:
    if (v39 < v30)
      goto LABEL_144;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v27 = sub_21C4393FC(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v80 = *((_QWORD *)v27 + 2);
    v79 = *((_QWORD *)v27 + 3);
    v29 = v80 + 1;
    v26 = v148;
    v157 = v39;
    if (v80 >= v79 >> 1)
    {
      v130 = sub_21C4393FC((char *)(v79 > 1), v80 + 1, 1, v27);
      v26 = v148;
      v27 = v130;
    }
    *((_QWORD *)v27 + 2) = v29;
    v81 = v27 + 32;
    v82 = &v27[16 * v80 + 32];
    v83 = v157;
    *(_QWORD *)v82 = v30;
    *((_QWORD *)v82 + 1) = v83;
    if (v80)
    {
      while (1)
      {
        v84 = v29 - 1;
        if (v29 >= 4)
        {
          v89 = &v81[16 * v29];
          v90 = *((_QWORD *)v89 - 8);
          v91 = *((_QWORD *)v89 - 7);
          v95 = __OFSUB__(v91, v90);
          v92 = v91 - v90;
          if (v95)
            goto LABEL_133;
          v94 = *((_QWORD *)v89 - 6);
          v93 = *((_QWORD *)v89 - 5);
          v95 = __OFSUB__(v93, v94);
          v87 = v93 - v94;
          v88 = v95;
          if (v95)
            goto LABEL_134;
          v96 = v29 - 2;
          v97 = &v81[16 * v29 - 32];
          v99 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          v95 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          if (v95)
            goto LABEL_136;
          v95 = __OFADD__(v87, v100);
          v101 = v87 + v100;
          if (v95)
            goto LABEL_139;
          if (v101 >= v92)
          {
            v119 = &v81[16 * v84];
            v121 = *(_QWORD *)v119;
            v120 = *((_QWORD *)v119 + 1);
            v95 = __OFSUB__(v120, v121);
            v122 = v120 - v121;
            if (v95)
              goto LABEL_143;
            v112 = v87 < v122;
            goto LABEL_104;
          }
        }
        else
        {
          if (v29 != 3)
          {
            v113 = *((_QWORD *)v27 + 4);
            v114 = *((_QWORD *)v27 + 5);
            v95 = __OFSUB__(v114, v113);
            v106 = v114 - v113;
            v107 = v95;
            goto LABEL_98;
          }
          v86 = *((_QWORD *)v27 + 4);
          v85 = *((_QWORD *)v27 + 5);
          v95 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          v88 = v95;
        }
        if ((v88 & 1) != 0)
          goto LABEL_135;
        v96 = v29 - 2;
        v102 = &v81[16 * v29 - 32];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v105 = __OFSUB__(v103, v104);
        v106 = v103 - v104;
        v107 = v105;
        if (v105)
          goto LABEL_138;
        v108 = &v81[16 * v84];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v95 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v95)
          goto LABEL_141;
        if (__OFADD__(v106, v111))
          goto LABEL_142;
        if (v106 + v111 >= v87)
        {
          v112 = v87 < v111;
LABEL_104:
          if (v112)
            v84 = v96;
          goto LABEL_106;
        }
LABEL_98:
        if ((v107 & 1) != 0)
          goto LABEL_137;
        v115 = &v81[16 * v84];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v95 = __OFSUB__(v116, v117);
        v118 = v116 - v117;
        if (v95)
          goto LABEL_140;
        if (v118 < v106)
          goto LABEL_14;
LABEL_106:
        v123 = v84 - 1;
        if (v84 - 1 >= v29)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!*v158)
          goto LABEL_155;
        v124 = v27;
        v125 = &v81[16 * v123];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v84];
        v128 = *((_QWORD *)v127 + 1);
        sub_21C438E20(*v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v125, *v158 + *(_QWORD *)(v159 + 72) * *(_QWORD *)v127, *v158 + *(_QWORD *)(v159 + 72) * v128, v26);
        if (v2)
          goto LABEL_127;
        if (v128 < v126)
          goto LABEL_130;
        if (v84 > *((_QWORD *)v124 + 2))
          goto LABEL_131;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v123 + 8] = v128;
        v129 = *((_QWORD *)v124 + 2);
        if (v84 >= v129)
          goto LABEL_132;
        v27 = v124;
        v29 = v129 - 1;
        memmove(&v81[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
        *((_QWORD *)v124 + 2) = v129 - 1;
        v26 = v148;
        if (v129 <= 2)
          goto LABEL_14;
      }
    }
    v29 = 1;
LABEL_14:
    v20 = v158[1];
    v28 = v157;
    v4 = v152;
    if (v157 >= v20)
      goto LABEL_116;
  }
  v62 = v152;
  if (v39 >= v52)
    goto LABEL_67;
LABEL_48:
  if (__OFSUB__(v39, v30))
    goto LABEL_149;
  if (v39 - v30 >= v139)
    goto LABEL_67;
  if (__OFADD__(v30, v139))
    goto LABEL_152;
  if (v30 + v139 >= v52)
    v63 = v52;
  else
    v63 = v30 + v139;
  if (v63 >= v30)
  {
    if (v39 != v63)
    {
      v147 = v30;
      v140 = v27;
      v141 = v2;
      v64 = *(_QWORD *)(v159 + 72);
      v150 = *(_QWORD *)(v159 + 16);
      v151 = v64;
      v156 = v39 * v64;
      v157 = v64 * (v39 - 1);
      v145 = v63;
      do
      {
        v66 = 0;
        v67 = v147;
        while (1)
        {
          v68 = *v158;
          v69 = (void (*)(char *, uint64_t, uint64_t))v150;
          ((void (*)(char *, uint64_t, uint64_t))v150)(v154, v156 + v66 + *v158, v62);
          v69(v155, v157 + v66 + v68, v62);
          v70 = sub_21C458A98();
          v72 = v71;
          if (v70 == sub_21C458A98() && v72 == v73)
            break;
          v74 = sub_21C4594F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v75 = *(void (**)(char *, uint64_t))(v159 + 8);
          v62 = v152;
          v75(v155, v152);
          v75(v154, v62);
          if ((v74 & 1) == 0)
            goto LABEL_58;
          v76 = *v158;
          if (!*v158)
            goto LABEL_154;
          v77 = (char *)(v76 + v157 + v66);
          v78 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 32);
          v78(v153, v76 + v156 + v66, v62);
          swift_arrayInitWithTakeFrontToBack();
          v78(v77, (uint64_t)v153, v62);
          v66 -= v151;
          if (v39 == ++v67)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n();
        v65 = *(void (**)(char *, uint64_t))(v159 + 8);
        v62 = v152;
        v65(v155, v152);
        v65(v154, v62);
LABEL_58:
        ++v39;
        v157 += v151;
        v156 += v151;
      }
      while (v39 != v145);
      v39 = v145;
      v27 = v140;
      v2 = v141;
      v30 = v147;
    }
    goto LABEL_67;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = sub_21C4593F8();
  __break(1u);
  return result;
}

uint64_t sub_21C4387F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_21C4594F4(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C4388C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v37 = a4;
  v31 = a1;
  v6 = sub_21C458AA4();
  v38 = *(_QWORD **)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v29 - v10;
  result = MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v29 - v12;
  v35 = a3;
  v30 = a2;
  if (a3 != a2)
  {
    v13 = v38[9];
    v32 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v33 = v13;
    v14 = v13 * (v35 - 1);
    v41 = v13 * v35;
LABEL_6:
    v16 = 0;
    v17 = v31;
    v34 = v14;
    while (1)
    {
      v18 = *v37;
      v19 = v32;
      v32(v39, v41 + v16 + *v37, v6);
      v19(v40, v14 + v16 + v18, v6);
      v20 = sub_21C458A98();
      v22 = v21;
      if (v20 == sub_21C458A98() && v22 == v23)
      {
        swift_bridgeObjectRelease_n();
        v15 = (void (*)(char *, uint64_t))v38[1];
        v15(v40, v6);
        result = ((uint64_t (*)(char *, uint64_t))v15)(v39, v6);
        v14 = v34;
LABEL_5:
        v14 += v33;
        v41 += v33;
        if (++v35 == v30)
          return result;
        goto LABEL_6;
      }
      v24 = sub_21C4594F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = (void (*)(char *, uint64_t))v38[1];
      v25(v40, v6);
      result = ((uint64_t (*)(char *, uint64_t))v25)(v39, v6);
      v14 = v34;
      if ((v24 & 1) == 0)
        goto LABEL_5;
      v26 = *v37;
      if (!*v37)
        break;
      v27 = v26 + v34 + v16;
      v28 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v28(v36, v26 + v41 + v16, v6);
      swift_arrayInitWithTakeFrontToBack();
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v36, v6);
      v16 -= v33;
      if (v35 == ++v17)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_21C438B88(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_21C4594F4() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_21C4594F4() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_21C4394F4((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C438E20(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v8 = sub_21C458AA4();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v54 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v54 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v54 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  v59 = v18;
  v60 = v19;
  if (!v19)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v60 == -1)
    goto LABEL_69;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v60 == -1)
    goto LABEL_70;
  v21 = (uint64_t)(a2 - a1) / v60;
  v63 = a1;
  v62 = a4;
  v22 = v20 / v60;
  if (v21 >= v20 / v60)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v60;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = a4 + v24;
      v61 = a4 + v24;
      v63 = a2;
      if (v24 >= 1 && a1 < a2)
      {
        v39 = -v60;
        v60 = *(_QWORD *)(v59 + 16);
        v55 = a4;
        v56 = a1;
        do
        {
          v40 = a3;
          v41 = (void (*)(char *, unint64_t, uint64_t))v60;
          ((void (*)(char *, unint64_t, uint64_t))v60)(v57, v37 + v39, v8);
          v42 = a2 + v39;
          v41(v58, a2 + v39, v8);
          v43 = sub_21C458A98();
          v45 = v44;
          if (v43 == sub_21C458A98() && v45 == v46)
            v47 = 0;
          else
            v47 = sub_21C4594F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 += v39;
          v48 = *(void (**)(char *, uint64_t))(v59 + 8);
          v48(v58, v8);
          v48(v57, v8);
          if ((v47 & 1) != 0)
          {
            if (v40 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v49 = v40 == a2;
              v50 = v55;
              v51 = v56;
              if (!v49)
                swift_arrayInitWithTakeBackToFront();
            }
            v63 += v39;
          }
          else
          {
            v52 = v61;
            v61 += v39;
            if (v40 < v52 || a3 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
              v42 = a2;
              v50 = v55;
              v51 = v56;
            }
            else
            {
              v51 = v56;
              if (v40 != v52)
                swift_arrayInitWithTakeBackToFront();
              v42 = a2;
              v50 = v55;
            }
          }
          v37 = v61;
          if (v61 <= v50)
            break;
          a2 = v42;
        }
        while (v42 > v51);
      }
LABEL_67:
      sub_21C43959C(&v63, &v62, (uint64_t *)&v61);
      return 1;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v60;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v58 = (char *)(a4 + v23);
    v61 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
      while (1)
      {
        v26(v17, a2, v8);
        v26(v15, a4, v8);
        v27 = sub_21C458A98();
        v29 = v28;
        if (v27 == sub_21C458A98() && v29 == v30)
          break;
        v32 = sub_21C4594F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v59 + 8);
        v33(v15, v8);
        v33(v17, v8);
        if ((v32 & 1) == 0)
          goto LABEL_31;
        v34 = v63;
        v35 = a2 + v60;
        if (v63 < a2 || v63 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v63 == a2)
        {
          v34 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
LABEL_37:
        v63 = v34 + v60;
        a4 = v62;
        if (v62 < (unint64_t)v58)
        {
          a2 = v35;
          if (v35 < a3)
            continue;
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      v31 = *(void (**)(char *, uint64_t))(v59 + 8);
      v31(v15, v8);
      v31(v17, v8);
LABEL_31:
      v34 = v63;
      v36 = v62 + v60;
      if (v63 < v62 || v63 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v63 != v62)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v62 = v36;
      v35 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  result = sub_21C459464();
  __break(1u);
  return result;
}

char *sub_21C4393FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_21C3E344C(&qword_25527B608);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_21C4394F4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_21C459464();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_21C43959C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_21C458AA4();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_21C459464();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_21C4396A8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    result = (char *)sub_21C459464();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

char *sub_21C439738(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_21C459464();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_21C4397F0(uint64_t a1)
{
  return sub_21C4393FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21C439804(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_21C459434();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_21C459434();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_21C43B49C(&qword_25527B618, &qword_25527A580, MEMORY[0x24BEE12E0]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          sub_21C3E344C(&qword_25527A580);
          v12 = sub_21C452444(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for MResource();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C439A10@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    *a4 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + result);
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_21C439A68(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_21C439B18(uint64_t a1)
{
  return sub_21C3FD628(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21C439B2C(_QWORD *a1)
{
  return sub_21C3FD790(0, a1[2], 0, a1);
}

uint64_t sub_21C439B40(uint64_t a1)
{
  return sub_21C3FD970(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_21C439B54(_QWORD *a1)
{
  return sub_21C3FDABC(0, a1[2], 0, a1);
}

uint64_t sub_21C439B68(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_BYTE *sub_21C439BF0(_BYTE *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    *result = *(_BYTE *)(*(_QWORD *)(a5 + 48) + a2);
    return (_BYTE *)swift_bridgeObjectRetain();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_21C439C4C(char *__src, char *a2, char *a3, char *__dst)
{
  size_t v8;
  int64_t v9;
  uint64_t result;
  char *v12;
  const void *v13;
  char *v14;

  v13 = __dst;
  v8 = a2 - __src;
  v9 = a3 - a2;
  v14 = __src;
  if (a2 - __src >= a3 - a2)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= __dst)
        memmove(__dst, a2, a3 - a2);
      v12 = &__dst[v9];
      v14 = a2;
      if (__src < a2 && a3 != a2)
        __asm { BR              X9 }
      goto LABEL_16;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v12 = &__dst[v8];
    if (a2 != __src && a2 < a3)
      __asm { BR              X9 }
LABEL_16:
    sub_21C4396A8((void **)&v14, &v13, &v12);
    return 1;
  }
  swift_bridgeObjectRelease();
  result = sub_21C459464();
  __break(1u);
  return result;
}

void sub_21C43A29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
    __asm { BR              X9 }
}

uint64_t sub_21C43A380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&loc_21C43A410 + dword_21C43A564[v2]))(a1, a2, 0x6F622D6F69647561);
}

void sub_21C43A430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  if (v13 != 0xD000000000000011 || v18 != (a13 | 0x8000000000000000))
  {
    v19 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      if (!v17)
      {
        __break(1u);
        JUMPOUT(0x21C43A548);
      }
      v20 = *v14;
      *v14 = *(v14 - 1);
      *(v14 - 1) = v20;
      if (v15 != v16 + 1)
        JUMPOUT(0x21C43A34CLL);
    }
    JUMPOUT(0x21C43A32CLL);
  }
  JUMPOUT(0x21C43A320);
}

uint64_t sub_21C43A580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *__dst;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;

  v3 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain_n();
  if (sub_21C4594D0() >= v3)
  {
    if (v3 < 0)
      goto LABEL_104;
    if (!v3)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    sub_21C43A29C(0, v3, 1, a1);
    if (!v1)
      return swift_bridgeObjectRelease_n();
LABEL_82:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v3 >= 0)
    v4 = v3;
  else
    v4 = v3 + 1;
  if (v3 < -1)
    goto LABEL_107;
  v83 = v1;
  v75 = (uint64_t *)a1;
  if (v3 < 2)
  {
    v7 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v9 = (char *)MEMORY[0x24BEE4AF8];
      goto LABEL_69;
    }
    v76 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v5 = v4 >> 1;
    sub_21C3E344C(&qword_25527A068);
    v6 = sub_21C459068();
    *(_QWORD *)(v6 + 16) = v5;
    v76 = v6;
    __dst = (char *)(v6 + 32);
  }
  v8 = 0;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v10 = *v75;
  v77 = v3;
  v84 = *v75;
  do
  {
    v12 = v8 + 1;
    if (v8 + 1 < v3)
      __asm { BR              X9 }
    if (v12 < v8)
      goto LABEL_99;
    v78 = v8 + 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v9 = sub_21C4393FC(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v14 = *((_QWORD *)v9 + 2);
    v13 = *((_QWORD *)v9 + 3);
    v11 = v14 + 1;
    if (v14 >= v13 >> 1)
      v9 = sub_21C4393FC((char *)(v13 > 1), v14 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v11;
    v15 = v9 + 32;
    v16 = &v9[16 * v14 + 32];
    *(_QWORD *)v16 = v8;
    *((_QWORD *)v16 + 1) = v78;
    if (v14)
    {
      v81 = v9;
      v79 = v9 + 32;
      while (1)
      {
        v17 = v11 - 1;
        if (v11 >= 4)
        {
          v22 = &v15[16 * v11];
          v23 = *((_QWORD *)v22 - 8);
          v24 = *((_QWORD *)v22 - 7);
          v28 = __OFSUB__(v24, v23);
          v25 = v24 - v23;
          if (v28)
            goto LABEL_88;
          v27 = *((_QWORD *)v22 - 6);
          v26 = *((_QWORD *)v22 - 5);
          v28 = __OFSUB__(v26, v27);
          v20 = v26 - v27;
          v21 = v28;
          if (v28)
            goto LABEL_89;
          v29 = v11 - 2;
          v30 = &v15[16 * v11 - 32];
          v32 = *(_QWORD *)v30;
          v31 = *((_QWORD *)v30 + 1);
          v28 = __OFSUB__(v31, v32);
          v33 = v31 - v32;
          if (v28)
            goto LABEL_91;
          v28 = __OFADD__(v20, v33);
          v34 = v20 + v33;
          if (v28)
            goto LABEL_94;
          if (v34 >= v25)
          {
            v52 = &v15[16 * v17];
            v54 = *(_QWORD *)v52;
            v53 = *((_QWORD *)v52 + 1);
            v28 = __OFSUB__(v53, v54);
            v55 = v53 - v54;
            if (v28)
              goto LABEL_98;
            v45 = v20 < v55;
            goto LABEL_57;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v46 = *((_QWORD *)v9 + 4);
            v47 = *((_QWORD *)v9 + 5);
            v28 = __OFSUB__(v47, v46);
            v39 = v47 - v46;
            v40 = v28;
            goto LABEL_51;
          }
          v19 = *((_QWORD *)v9 + 4);
          v18 = *((_QWORD *)v9 + 5);
          v28 = __OFSUB__(v18, v19);
          v20 = v18 - v19;
          v21 = v28;
        }
        if ((v21 & 1) != 0)
          goto LABEL_90;
        v29 = v11 - 2;
        v35 = &v15[16 * v11 - 32];
        v37 = *(_QWORD *)v35;
        v36 = *((_QWORD *)v35 + 1);
        v38 = __OFSUB__(v36, v37);
        v39 = v36 - v37;
        v40 = v38;
        if (v38)
          goto LABEL_93;
        v41 = &v15[16 * v17];
        v43 = *(_QWORD *)v41;
        v42 = *((_QWORD *)v41 + 1);
        v28 = __OFSUB__(v42, v43);
        v44 = v42 - v43;
        if (v28)
          goto LABEL_96;
        if (__OFADD__(v39, v44))
          goto LABEL_97;
        if (v39 + v44 >= v20)
        {
          v45 = v20 < v44;
LABEL_57:
          if (v45)
            v17 = v29;
          goto LABEL_59;
        }
LABEL_51:
        if ((v40 & 1) != 0)
          goto LABEL_92;
        v48 = &v15[16 * v17];
        v50 = *(_QWORD *)v48;
        v49 = *((_QWORD *)v48 + 1);
        v28 = __OFSUB__(v49, v50);
        v51 = v49 - v50;
        if (v28)
          goto LABEL_95;
        if (v51 < v39)
          goto LABEL_16;
LABEL_59:
        v56 = v17 - 1;
        if (v17 - 1 >= v11)
        {
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          __break(1u);
LABEL_104:
          __break(1u);
          JUMPOUT(0x21C43B2A4);
        }
        if (!v10)
        {
          swift_bridgeObjectRelease_n();
          __break(1u);
          JUMPOUT(0x21C43B2D0);
        }
        v57 = v10;
        v58 = &v15[16 * v56];
        v59 = *(_QWORD *)v58;
        v60 = v17;
        v61 = &v15[16 * v17];
        v62 = *((_QWORD *)v61 + 1);
        v63 = (char *)(v57 + *(_QWORD *)v58);
        v64 = (char *)(v57 + *(_QWORD *)v61);
        v65 = (char *)(v57 + v62);
        swift_bridgeObjectRetain();
        sub_21C439C4C(v63, v64, v65, __dst);
        if (v83)
        {
LABEL_81:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v76 + 16) = 0;
          goto LABEL_82;
        }
        swift_bridgeObjectRelease();
        if (v62 < v59)
          goto LABEL_85;
        v9 = v81;
        if (v60 > *((_QWORD *)v81 + 2))
          goto LABEL_86;
        *(_QWORD *)v58 = v59;
        v15 = v79;
        *(_QWORD *)&v79[16 * v56 + 8] = v62;
        v66 = *((_QWORD *)v81 + 2);
        if (v60 >= v66)
          goto LABEL_87;
        v83 = 0;
        v11 = v66 - 1;
        memmove(v61, v61 + 16, 16 * (v66 - 1 - v60));
        *((_QWORD *)v81 + 2) = v66 - 1;
        v10 = v84;
        if (v66 <= 2)
          goto LABEL_16;
      }
    }
    v11 = 1;
LABEL_16:
    v3 = v77;
    v8 = v78;
  }
  while (v78 < v77);
  v7 = v76;
LABEL_69:
  v82 = v9;
  v76 = v7;
  if (v11 >= 2)
  {
    v68 = *v75;
    while (1)
    {
      v69 = v11 - 2;
      if (v11 < 2)
        goto LABEL_100;
      if (!v68)
        break;
      v70 = *(_QWORD *)&v82[16 * v69 + 32];
      v71 = *(_QWORD *)&v82[16 * v11 + 24];
      v72 = (char *)(v68 + *(_QWORD *)&v82[16 * v11 + 16]);
      swift_bridgeObjectRetain();
      sub_21C439C4C((char *)(v68 + v70), v72, (char *)(v68 + v71), __dst);
      if (v83)
        goto LABEL_81;
      swift_bridgeObjectRelease();
      if (v71 < v70)
        goto LABEL_101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v82 = sub_21C4397F0((uint64_t)v82);
      if (v69 >= *((_QWORD *)v82 + 2))
        goto LABEL_102;
      v73 = &v82[16 * v69 + 32];
      *(_QWORD *)v73 = v70;
      *((_QWORD *)v73 + 1) = v71;
      v74 = *((_QWORD *)v82 + 2);
      if (v11 > v74)
        goto LABEL_103;
      memmove(&v82[16 * v11 + 16], &v82[16 * v11 + 32], 16 * (v74 - v11));
      *((_QWORD *)v82 + 2) = v74 - 1;
      v11 = v74 - 1;
      if (v74 <= 2)
        goto LABEL_80;
    }
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_107:
    swift_bridgeObjectRelease_n();
    sub_21C4593F8();
    __break(1u);
    JUMPOUT(0x21C43B344);
  }
LABEL_80:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v76 + 16) = 0;
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_21C43B3EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_21C439B40(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  swift_bridgeObjectRetain();
  sub_21C43A580((uint64_t)v5);
  swift_bridgeObjectRelease();
  *a1 = v2;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_21C43B49C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_21C3E35C0(a2);
    result = MEMORY[0x22077C1E0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id NSNumber.cgFloatValue.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_doubleValue);
}

uint64_t sub_21C43B4EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x24BEE4AF8];
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v14)) + (v8 << 6))
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + i);
    if (v12 == 6)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_21C3FD39C(0, *(_QWORD *)(v9 + 16) + 1, 1, (char *)v9);
        v9 = result;
      }
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_21C3FD39C((char *)(v16 > 1), v17 + 1, 1, (char *)v9);
        v9 = result;
      }
      *(_QWORD *)(v9 + 16) = v17 + 1;
      *(_BYTE *)(v9 + v17 + 32) = v12;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        goto LABEL_29;
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          goto LABEL_29;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v6)
            goto LABEL_29;
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release();
    return v9;
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_21C43B6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_21C4434B4(a1, (uint64_t)sub_21C4445FC, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21C43B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_21C45959C();
    sub_21C458EC4();
    v6 = sub_21C4595C0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_21C4594F4() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_21C4594F4() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

unint64_t MCatalogService.FetchError.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t result;

  v1 = *v0;
  if (v1 == 6)
    return 0xD000000000000034;
  if (v1 == 8)
    return 0xD000000000000029;
  sub_21C459350();
  swift_bridgeObjectRelease();
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      sub_21C458F00();
      swift_bridgeObjectRelease();
      result = 0xD00000000000002ALL;
      break;
    default:
      result = 0xEB00000000736BDDLL;
      break;
  }
  return result;
}

BOOL static MCatalogService.FetchError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 6:
      return v3 == 6;
    case 7:
      return v3 == 7;
    case 8:
      return v3 == 8;
  }
  if ((v3 - 6) < 3)
    return 0;
  return v2 == v3;
}

BOOL sub_21C43BA6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 6;
  v5 = v3 == 7;
  v6 = v3 == 8;
  v8 = v2 == v3 && (v3 - 9) < 0xFFFFFFFD;
  if (v2 == 8)
    v8 = v6;
  if (v2 == 7)
    v8 = v5;
  if (v2 == 6)
    return v4;
  else
    return v8;
}

id MCatalogService.init(config:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  void *v3;

  v2 = *a1;
  v3 = (void *)*((_QWORD *)a1 + 1);
  *(_BYTE *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 40) = &type metadata for MCatalogRequestHandler;
  *(_QWORD *)(a2 + 48) = &off_24E03F728;
  *(_BYTE *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = v3;
  return v3;
}

uint64_t MCatalogService.init(config:requestHandler:)@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)a3 = *(_BYTE *)a1;
  *(_QWORD *)(a3 + 8) = v3;
  return sub_21C3F349C(a2, a3 + 16);
}

uint64_t MCatalogService.batchRequests<A>(for:batchSize:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = *a6;
  v10 = a6[1];
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 120) = *((_DWORD *)a6 + 4);
  return swift_task_switch();
}

uint64_t sub_21C43BB3C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  __int128 v11;

  v1 = *(_DWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 40);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = *(_OWORD *)(v0 + 48);
  sub_21C458D5C();
  swift_bridgeObjectRelease();
  sub_21C458DA4();
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v7;
  *(_QWORD *)(v7 + 16) = v4;
  *(_OWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 72) = v3;
  *(_QWORD *)(v7 + 80) = v2;
  *(_DWORD *)(v7 + 88) = v1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v8;
  *v8 = v0;
  v8[1] = sub_21C43BC5C;
  return sub_21C459494();
}

uint64_t sub_21C43BC5C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C43BCC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21C43BCD4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C43BD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 148) = v12;
  *(_QWORD *)(v8 + 304) = a8;
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  sub_21C3E344C(&qword_25527B718);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  *(_QWORD *)(v8 + 328) = swift_task_alloc();
  v9 = sub_21C3E344C(&qword_25527B7B0);
  *(_QWORD *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C43BDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v80 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v70 = v12;
    v72 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v72 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v75 = v13;
      if (v15)
      {
        v82 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v82;
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 152) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 160) = v18;
          *(_BYTE *)(v0 + 168) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 128);
          v21 = *(_QWORD *)(v0 + 136);
          v22 = *(_BYTE *)(v0 + 144);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v82;
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v82;
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v81 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (v29 < *(_QWORD *)(v16 + 16))
        {
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 192) = v33;
          *(_QWORD *)(v0 + 200) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_57;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v81;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
          {
            v65 = (void *)swift_allocError();
            swift_willThrow();
            *(_QWORD *)(v0 + 232) = v65;
            v66 = v65;
            sub_21C3E344C(&qword_25527ABC0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_21C459350();
              *(_QWORD *)(v0 + 176) = 0;
              *(_QWORD *)(v0 + 184) = 0xE000000000000000;
              sub_21C458F00();
              sub_21C4593EC();
              sub_21C458F00();
              return sub_21C459404();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_58;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v44 = v80;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v80;
      }
      v13 = v75 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v75 + 1 != v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v74 = *(_QWORD *)(v44 + 16);
  if (!v74)
    goto LABEL_53;
  v71 = (_OWORD *)(v0 + 16);
  v47 = sub_21C4590EC();
  v48 = *(_QWORD *)(v47 - 8);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v49 = 0;
  v73 = v44;
  v68 = v48;
  do
  {
    v52 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v79 = *(_DWORD *)(v0 + 148);
    v53 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v76 = *(_OWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v44 + 8 * v49 + 32);
    v69(v51, 1, 1, v47);
    sub_21C445EFC(v54, (uint64_t)v71);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (_QWORD *)(v56 + 16);
    *(_QWORD *)(v56 + 24) = 0;
    v58 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v56 + 32) = *v71;
    *(_OWORD *)(v56 + 48) = v58;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v56 + 88) = v55;
    *(_OWORD *)(v56 + 96) = v76;
    *(_QWORD *)(v56 + 112) = v53;
    *(_QWORD *)(v56 + 120) = v77;
    *(_QWORD *)(v56 + 128) = v78;
    *(_DWORD *)(v56 + 136) = v79;
    sub_21C446030(v51, v52);
    LODWORD(v51) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v52, 1, v47);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v51 == 1)
    {
      sub_21C446078(*(_QWORD *)(v0 + 320));
      if (*v57)
        goto LABEL_45;
    }
    else
    {
      sub_21C4590E0();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v47);
      if (*v57)
      {
LABEL_45:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v60 = sub_21C4590BC();
        v62 = v61;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v60 = 0;
    v62 = 0;
LABEL_48:
    v63 = **(_QWORD **)(v0 + 248);
    sub_21C3E344C(&qword_25527B668);
    v64 = v62 | v60;
    if (v62 | v60)
    {
      v64 = v0 + 72;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = v60;
      *(_QWORD *)(v0 + 96) = v62;
    }
    ++v49;
    v50 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v64;
    *(_QWORD *)(v0 + 120) = v63;
    swift_task_create();
    swift_release();
    sub_21C446078(v50);
    swift_bridgeObjectRelease();
    v44 = v73;
  }
  while (v74 != v49);
  swift_bridgeObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527B668);
  sub_21C3E344C(&qword_25527ABC0);
  sub_21C459104();
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v67;
  *v67 = v0;
  v67[1] = sub_21C43C6C8;
  return sub_21C459110();
}

uint64_t sub_21C43C6C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

void sub_21C43C740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v40 = (_QWORD *)(v0 + 216);
      v2 = *(_QWORD *)(v0 + 368);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 216) = v2;
      v37 = v1 + 64;
      v4 = -1;
      v5 = -1 << *(_BYTE *)(v1 + 32);
      if (-v5 < 64)
        v4 = ~(-1 << -(char)v5);
      v6 = v4 & *(_QWORD *)(v1 + 64);
      v38 = (unint64_t)(63 - v5) >> 6;
      v7 = *(_QWORD **)(v0 + 368);
      swift_bridgeObjectRetain();
      v8 = 0;
      v39 = v0;
      while (1)
      {
        *(_QWORD *)(v0 + 384) = v7;
        if (v6)
        {
          v11 = isUniquelyReferenced_nonNull_native;
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v13 = v12 | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_42;
          if (v14 >= v38)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v36 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 392) = v36;
            *v36 = v0;
            v36[1] = sub_21C43CBBC;
            goto LABEL_38;
          }
          v15 = *(_QWORD *)(v37 + 8 * v14);
          ++v8;
          if (!v15)
          {
            v8 = v14 + 1;
            if (v14 + 1 >= v38)
              goto LABEL_37;
            v15 = *(_QWORD *)(v37 + 8 * v8);
            if (!v15)
            {
              v8 = v14 + 2;
              if (v14 + 2 >= v38)
                goto LABEL_37;
              v15 = *(_QWORD *)(v37 + 8 * v8);
              if (!v15)
              {
                v8 = v14 + 3;
                if (v14 + 3 >= v38)
                  goto LABEL_37;
                v15 = *(_QWORD *)(v37 + 8 * v8);
                if (!v15)
                {
                  v16 = v14 + 4;
                  if (v16 >= v38)
                    goto LABEL_37;
                  v15 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v16 + 1;
                      if (__OFADD__(v16, 1))
                        goto LABEL_43;
                      if (v8 >= v38)
                        goto LABEL_37;
                      v15 = *(_QWORD *)(v37 + 8 * v8);
                      ++v16;
                      if (v15)
                        goto LABEL_25;
                    }
                  }
                  v8 = v16;
                }
              }
            }
          }
LABEL_25:
          v11 = isUniquelyReferenced_nonNull_native;
          v6 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v17 = v1;
        v18 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
        v20 = *v18;
        v19 = v18[1];
        v21 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        v22 = v21;
        v24 = sub_21C45191C(v20, v19);
        v25 = v7[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v7[3] >= v27)
        {
          if ((v11 & 1) == 0)
            sub_21C457874();
        }
        else
        {
          sub_21C3E5850(v27, v11 & 1);
          v29 = sub_21C45191C(v20, v19);
          if ((v28 & 1) != (v30 & 1))
          {
            sub_21C459554();
            return;
          }
          v24 = v29;
        }
        v7 = (_QWORD *)*v40;
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = v7[7];
          v10 = 8 * v24;

          *(_QWORD *)(v9 + v10) = v22;
        }
        else
        {
          v7[(v24 >> 6) + 8] |= 1 << v24;
          v31 = (uint64_t *)(v7[6] + 16 * v24);
          *v31 = v20;
          v31[1] = v19;
          *(_QWORD *)(v7[7] + 8 * v24) = v22;
          v32 = v7[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_41;
          v7[2] = v34;
        }
        isUniquelyReferenced_nonNull_native = 1;
        v0 = v39;
        v1 = v17;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v35;
      *v35 = v0;
      v35[1] = sub_21C43CB54;
LABEL_38:
      sub_21C459110();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_21C43CB54()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C43CBBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 384);
  return swift_task_switch();
}

uint64_t sub_21C43CC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 148) = v12;
  *(_QWORD *)(v8 + 304) = a8;
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  sub_21C3E344C(&qword_25527B718);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  *(_QWORD *)(v8 + 328) = swift_task_alloc();
  v9 = sub_21C3E344C(&qword_25527B790);
  *(_QWORD *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C43CCE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v80 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v70 = v12;
    v72 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v72 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v75 = v13;
      if (v15)
      {
        v82 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v82;
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 152) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 160) = v18;
          *(_BYTE *)(v0 + 168) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 128);
          v21 = *(_QWORD *)(v0 + 136);
          v22 = *(_BYTE *)(v0 + 144);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v82;
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v82;
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v81 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (v29 < *(_QWORD *)(v16 + 16))
        {
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 192) = v33;
          *(_QWORD *)(v0 + 200) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_57;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v81;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
          {
            v65 = (void *)swift_allocError();
            swift_willThrow();
            *(_QWORD *)(v0 + 232) = v65;
            v66 = v65;
            sub_21C3E344C(&qword_25527ABC0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_21C459350();
              *(_QWORD *)(v0 + 176) = 0;
              *(_QWORD *)(v0 + 184) = 0xE000000000000000;
              sub_21C458F00();
              sub_21C4593EC();
              sub_21C458F00();
              return sub_21C459404();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_58;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v44 = v80;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v80;
      }
      v13 = v75 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v75 + 1 != v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v74 = *(_QWORD *)(v44 + 16);
  if (!v74)
    goto LABEL_53;
  v71 = (_OWORD *)(v0 + 16);
  v47 = sub_21C4590EC();
  v48 = *(_QWORD *)(v47 - 8);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v49 = 0;
  v73 = v44;
  v68 = v48;
  do
  {
    v52 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v79 = *(_DWORD *)(v0 + 148);
    v53 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v76 = *(_OWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v44 + 8 * v49 + 32);
    v69(v51, 1, 1, v47);
    sub_21C445EFC(v54, (uint64_t)v71);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (_QWORD *)(v56 + 16);
    *(_QWORD *)(v56 + 24) = 0;
    v58 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v56 + 32) = *v71;
    *(_OWORD *)(v56 + 48) = v58;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v56 + 88) = v55;
    *(_OWORD *)(v56 + 96) = v76;
    *(_QWORD *)(v56 + 112) = v53;
    *(_QWORD *)(v56 + 120) = v77;
    *(_QWORD *)(v56 + 128) = v78;
    *(_DWORD *)(v56 + 136) = v79;
    sub_21C446030(v51, v52);
    LODWORD(v51) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v52, 1, v47);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v51 == 1)
    {
      sub_21C446078(*(_QWORD *)(v0 + 320));
      if (*v57)
        goto LABEL_45;
    }
    else
    {
      sub_21C4590E0();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v47);
      if (*v57)
      {
LABEL_45:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v60 = sub_21C4590BC();
        v62 = v61;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v60 = 0;
    v62 = 0;
LABEL_48:
    v63 = **(_QWORD **)(v0 + 248);
    sub_21C3E344C(&qword_25527B690);
    v64 = v62 | v60;
    if (v62 | v60)
    {
      v64 = v0 + 72;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = v60;
      *(_QWORD *)(v0 + 96) = v62;
    }
    ++v49;
    v50 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v64;
    *(_QWORD *)(v0 + 120) = v63;
    swift_task_create();
    swift_release();
    sub_21C446078(v50);
    swift_bridgeObjectRelease();
    v44 = v73;
  }
  while (v74 != v49);
  swift_bridgeObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527B690);
  sub_21C3E344C(&qword_25527ABC0);
  sub_21C459104();
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v67;
  *v67 = v0;
  v67[1] = sub_21C43D5EC;
  return sub_21C459110();
}

uint64_t sub_21C43D5EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

void sub_21C43D664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v40 = (_QWORD *)(v0 + 216);
      v2 = *(_QWORD *)(v0 + 368);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 216) = v2;
      v37 = v1 + 64;
      v4 = -1;
      v5 = -1 << *(_BYTE *)(v1 + 32);
      if (-v5 < 64)
        v4 = ~(-1 << -(char)v5);
      v6 = v4 & *(_QWORD *)(v1 + 64);
      v38 = (unint64_t)(63 - v5) >> 6;
      v7 = *(_QWORD **)(v0 + 368);
      swift_bridgeObjectRetain();
      v8 = 0;
      v39 = v0;
      while (1)
      {
        *(_QWORD *)(v0 + 384) = v7;
        if (v6)
        {
          v11 = isUniquelyReferenced_nonNull_native;
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v13 = v12 | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_42;
          if (v14 >= v38)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v36 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 392) = v36;
            *v36 = v0;
            v36[1] = sub_21C43DAE0;
            goto LABEL_38;
          }
          v15 = *(_QWORD *)(v37 + 8 * v14);
          ++v8;
          if (!v15)
          {
            v8 = v14 + 1;
            if (v14 + 1 >= v38)
              goto LABEL_37;
            v15 = *(_QWORD *)(v37 + 8 * v8);
            if (!v15)
            {
              v8 = v14 + 2;
              if (v14 + 2 >= v38)
                goto LABEL_37;
              v15 = *(_QWORD *)(v37 + 8 * v8);
              if (!v15)
              {
                v8 = v14 + 3;
                if (v14 + 3 >= v38)
                  goto LABEL_37;
                v15 = *(_QWORD *)(v37 + 8 * v8);
                if (!v15)
                {
                  v16 = v14 + 4;
                  if (v16 >= v38)
                    goto LABEL_37;
                  v15 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v16 + 1;
                      if (__OFADD__(v16, 1))
                        goto LABEL_43;
                      if (v8 >= v38)
                        goto LABEL_37;
                      v15 = *(_QWORD *)(v37 + 8 * v8);
                      ++v16;
                      if (v15)
                        goto LABEL_25;
                    }
                  }
                  v8 = v16;
                }
              }
            }
          }
LABEL_25:
          v11 = isUniquelyReferenced_nonNull_native;
          v6 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v17 = v1;
        v18 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
        v20 = *v18;
        v19 = v18[1];
        v21 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        v22 = v21;
        v24 = sub_21C45191C(v20, v19);
        v25 = v7[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v7[3] >= v27)
        {
          if ((v11 & 1) == 0)
            sub_21C45813C();
        }
        else
        {
          sub_21C3E646C(v27, v11 & 1);
          v29 = sub_21C45191C(v20, v19);
          if ((v28 & 1) != (v30 & 1))
          {
            sub_21C459554();
            return;
          }
          v24 = v29;
        }
        v7 = (_QWORD *)*v40;
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = v7[7];
          v10 = 8 * v24;

          *(_QWORD *)(v9 + v10) = v22;
        }
        else
        {
          v7[(v24 >> 6) + 8] |= 1 << v24;
          v31 = (uint64_t *)(v7[6] + 16 * v24);
          *v31 = v20;
          v31[1] = v19;
          *(_QWORD *)(v7[7] + 8 * v24) = v22;
          v32 = v7[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_41;
          v7[2] = v34;
        }
        isUniquelyReferenced_nonNull_native = 1;
        v0 = v39;
        v1 = v17;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v35;
      *v35 = v0;
      v35[1] = sub_21C43DA78;
LABEL_38:
      sub_21C459110();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_21C43DA78()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C43DAE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 384);
  return swift_task_switch();
}

uint64_t sub_21C43DB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 148) = v12;
  *(_QWORD *)(v8 + 304) = a8;
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  sub_21C3E344C(&qword_25527B718);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  *(_QWORD *)(v8 + 328) = swift_task_alloc();
  v9 = sub_21C3E344C(&qword_25527B770);
  *(_QWORD *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C43DC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v80 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v70 = v12;
    v72 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v72 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v75 = v13;
      if (v15)
      {
        v82 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v82;
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 152) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 160) = v18;
          *(_BYTE *)(v0 + 168) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 128);
          v21 = *(_QWORD *)(v0 + 136);
          v22 = *(_BYTE *)(v0 + 144);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v82;
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v82;
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v81 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (v29 < *(_QWORD *)(v16 + 16))
        {
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 192) = v33;
          *(_QWORD *)(v0 + 200) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_57;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v81;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
          {
            v65 = (void *)swift_allocError();
            swift_willThrow();
            *(_QWORD *)(v0 + 232) = v65;
            v66 = v65;
            sub_21C3E344C(&qword_25527ABC0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_21C459350();
              *(_QWORD *)(v0 + 176) = 0;
              *(_QWORD *)(v0 + 184) = 0xE000000000000000;
              sub_21C458F00();
              sub_21C4593EC();
              sub_21C458F00();
              return sub_21C459404();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_58;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v44 = v80;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v80;
      }
      v13 = v75 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v75 + 1 != v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v74 = *(_QWORD *)(v44 + 16);
  if (!v74)
    goto LABEL_53;
  v71 = (_OWORD *)(v0 + 16);
  v47 = sub_21C4590EC();
  v48 = *(_QWORD *)(v47 - 8);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v49 = 0;
  v73 = v44;
  v68 = v48;
  do
  {
    v52 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v79 = *(_DWORD *)(v0 + 148);
    v53 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v76 = *(_OWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v44 + 8 * v49 + 32);
    v69(v51, 1, 1, v47);
    sub_21C445EFC(v54, (uint64_t)v71);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (_QWORD *)(v56 + 16);
    *(_QWORD *)(v56 + 24) = 0;
    v58 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v56 + 32) = *v71;
    *(_OWORD *)(v56 + 48) = v58;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v56 + 88) = v55;
    *(_OWORD *)(v56 + 96) = v76;
    *(_QWORD *)(v56 + 112) = v53;
    *(_QWORD *)(v56 + 120) = v77;
    *(_QWORD *)(v56 + 128) = v78;
    *(_DWORD *)(v56 + 136) = v79;
    sub_21C446030(v51, v52);
    LODWORD(v51) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v52, 1, v47);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v51 == 1)
    {
      sub_21C446078(*(_QWORD *)(v0 + 320));
      if (*v57)
        goto LABEL_45;
    }
    else
    {
      sub_21C4590E0();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v47);
      if (*v57)
      {
LABEL_45:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v60 = sub_21C4590BC();
        v62 = v61;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v60 = 0;
    v62 = 0;
LABEL_48:
    v63 = **(_QWORD **)(v0 + 248);
    sub_21C3E344C(&qword_25527B6B0);
    v64 = v62 | v60;
    if (v62 | v60)
    {
      v64 = v0 + 72;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = v60;
      *(_QWORD *)(v0 + 96) = v62;
    }
    ++v49;
    v50 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v64;
    *(_QWORD *)(v0 + 120) = v63;
    swift_task_create();
    swift_release();
    sub_21C446078(v50);
    swift_bridgeObjectRelease();
    v44 = v73;
  }
  while (v74 != v49);
  swift_bridgeObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527B6B0);
  sub_21C3E344C(&qword_25527ABC0);
  sub_21C459104();
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v67;
  *v67 = v0;
  v67[1] = sub_21C43E510;
  return sub_21C459110();
}

uint64_t sub_21C43E510()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

void sub_21C43E588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v40 = (_QWORD *)(v0 + 216);
      v2 = *(_QWORD *)(v0 + 368);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 216) = v2;
      v37 = v1 + 64;
      v4 = -1;
      v5 = -1 << *(_BYTE *)(v1 + 32);
      if (-v5 < 64)
        v4 = ~(-1 << -(char)v5);
      v6 = v4 & *(_QWORD *)(v1 + 64);
      v38 = (unint64_t)(63 - v5) >> 6;
      v7 = *(_QWORD **)(v0 + 368);
      swift_bridgeObjectRetain();
      v8 = 0;
      v39 = v0;
      while (1)
      {
        *(_QWORD *)(v0 + 384) = v7;
        if (v6)
        {
          v11 = isUniquelyReferenced_nonNull_native;
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v13 = v12 | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_42;
          if (v14 >= v38)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v36 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 392) = v36;
            *v36 = v0;
            v36[1] = sub_21C43EA04;
            goto LABEL_38;
          }
          v15 = *(_QWORD *)(v37 + 8 * v14);
          ++v8;
          if (!v15)
          {
            v8 = v14 + 1;
            if (v14 + 1 >= v38)
              goto LABEL_37;
            v15 = *(_QWORD *)(v37 + 8 * v8);
            if (!v15)
            {
              v8 = v14 + 2;
              if (v14 + 2 >= v38)
                goto LABEL_37;
              v15 = *(_QWORD *)(v37 + 8 * v8);
              if (!v15)
              {
                v8 = v14 + 3;
                if (v14 + 3 >= v38)
                  goto LABEL_37;
                v15 = *(_QWORD *)(v37 + 8 * v8);
                if (!v15)
                {
                  v16 = v14 + 4;
                  if (v16 >= v38)
                    goto LABEL_37;
                  v15 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v16 + 1;
                      if (__OFADD__(v16, 1))
                        goto LABEL_43;
                      if (v8 >= v38)
                        goto LABEL_37;
                      v15 = *(_QWORD *)(v37 + 8 * v8);
                      ++v16;
                      if (v15)
                        goto LABEL_25;
                    }
                  }
                  v8 = v16;
                }
              }
            }
          }
LABEL_25:
          v11 = isUniquelyReferenced_nonNull_native;
          v6 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v17 = v1;
        v18 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
        v20 = *v18;
        v19 = v18[1];
        v21 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        v22 = v21;
        v24 = sub_21C45191C(v20, v19);
        v25 = v7[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v7[3] >= v27)
        {
          if ((v11 & 1) == 0)
            sub_21C458148();
        }
        else
        {
          sub_21C3E6478(v27, v11 & 1);
          v29 = sub_21C45191C(v20, v19);
          if ((v28 & 1) != (v30 & 1))
          {
            sub_21C459554();
            return;
          }
          v24 = v29;
        }
        v7 = (_QWORD *)*v40;
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = v7[7];
          v10 = 8 * v24;

          *(_QWORD *)(v9 + v10) = v22;
        }
        else
        {
          v7[(v24 >> 6) + 8] |= 1 << v24;
          v31 = (uint64_t *)(v7[6] + 16 * v24);
          *v31 = v20;
          v31[1] = v19;
          *(_QWORD *)(v7[7] + 8 * v24) = v22;
          v32 = v7[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_41;
          v7[2] = v34;
        }
        isUniquelyReferenced_nonNull_native = 1;
        v0 = v39;
        v1 = v17;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v35;
      *v35 = v0;
      v35[1] = sub_21C43E99C;
LABEL_38:
      sub_21C459110();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_21C43E99C()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C43EA04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 384);
  return swift_task_switch();
}

uint64_t sub_21C43EA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 148) = v12;
  *(_QWORD *)(v8 + 304) = a8;
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  sub_21C3E344C(&qword_25527B718);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  *(_QWORD *)(v8 + 328) = swift_task_alloc();
  v9 = sub_21C3E344C(&qword_25527B750);
  *(_QWORD *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C43EB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v80 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v70 = v12;
    v72 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v72 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v75 = v13;
      if (v15)
      {
        v82 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v82;
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 152) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 160) = v18;
          *(_BYTE *)(v0 + 168) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 128);
          v21 = *(_QWORD *)(v0 + 136);
          v22 = *(_BYTE *)(v0 + 144);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v82;
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v82;
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v81 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (v29 < *(_QWORD *)(v16 + 16))
        {
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 192) = v33;
          *(_QWORD *)(v0 + 200) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_57;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v81;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
          {
            v65 = (void *)swift_allocError();
            swift_willThrow();
            *(_QWORD *)(v0 + 232) = v65;
            v66 = v65;
            sub_21C3E344C(&qword_25527ABC0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_21C459350();
              *(_QWORD *)(v0 + 176) = 0;
              *(_QWORD *)(v0 + 184) = 0xE000000000000000;
              sub_21C458F00();
              sub_21C4593EC();
              sub_21C458F00();
              return sub_21C459404();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_58;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v44 = v80;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v80;
      }
      v13 = v75 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v75 + 1 != v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v74 = *(_QWORD *)(v44 + 16);
  if (!v74)
    goto LABEL_53;
  v71 = (_OWORD *)(v0 + 16);
  v47 = sub_21C4590EC();
  v48 = *(_QWORD *)(v47 - 8);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v49 = 0;
  v73 = v44;
  v68 = v48;
  do
  {
    v52 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v79 = *(_DWORD *)(v0 + 148);
    v53 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v76 = *(_OWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v44 + 8 * v49 + 32);
    v69(v51, 1, 1, v47);
    sub_21C445EFC(v54, (uint64_t)v71);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (_QWORD *)(v56 + 16);
    *(_QWORD *)(v56 + 24) = 0;
    v58 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v56 + 32) = *v71;
    *(_OWORD *)(v56 + 48) = v58;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v56 + 88) = v55;
    *(_OWORD *)(v56 + 96) = v76;
    *(_QWORD *)(v56 + 112) = v53;
    *(_QWORD *)(v56 + 120) = v77;
    *(_QWORD *)(v56 + 128) = v78;
    *(_DWORD *)(v56 + 136) = v79;
    sub_21C446030(v51, v52);
    LODWORD(v51) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v52, 1, v47);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v51 == 1)
    {
      sub_21C446078(*(_QWORD *)(v0 + 320));
      if (*v57)
        goto LABEL_45;
    }
    else
    {
      sub_21C4590E0();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v47);
      if (*v57)
      {
LABEL_45:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v60 = sub_21C4590BC();
        v62 = v61;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v60 = 0;
    v62 = 0;
LABEL_48:
    v63 = **(_QWORD **)(v0 + 248);
    sub_21C3E344C(&qword_25527B6D0);
    v64 = v62 | v60;
    if (v62 | v60)
    {
      v64 = v0 + 72;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = v60;
      *(_QWORD *)(v0 + 96) = v62;
    }
    ++v49;
    v50 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v64;
    *(_QWORD *)(v0 + 120) = v63;
    swift_task_create();
    swift_release();
    sub_21C446078(v50);
    swift_bridgeObjectRelease();
    v44 = v73;
  }
  while (v74 != v49);
  swift_bridgeObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527B6D0);
  sub_21C3E344C(&qword_25527ABC0);
  sub_21C459104();
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v67;
  *v67 = v0;
  v67[1] = sub_21C43F434;
  return sub_21C459110();
}

uint64_t sub_21C43F434()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

void sub_21C43F4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v40 = (_QWORD *)(v0 + 216);
      v2 = *(_QWORD *)(v0 + 368);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 216) = v2;
      v37 = v1 + 64;
      v4 = -1;
      v5 = -1 << *(_BYTE *)(v1 + 32);
      if (-v5 < 64)
        v4 = ~(-1 << -(char)v5);
      v6 = v4 & *(_QWORD *)(v1 + 64);
      v38 = (unint64_t)(63 - v5) >> 6;
      v7 = *(_QWORD **)(v0 + 368);
      swift_bridgeObjectRetain();
      v8 = 0;
      v39 = v0;
      while (1)
      {
        *(_QWORD *)(v0 + 384) = v7;
        if (v6)
        {
          v11 = isUniquelyReferenced_nonNull_native;
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v13 = v12 | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_42;
          if (v14 >= v38)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v36 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 392) = v36;
            *v36 = v0;
            v36[1] = sub_21C43F928;
            goto LABEL_38;
          }
          v15 = *(_QWORD *)(v37 + 8 * v14);
          ++v8;
          if (!v15)
          {
            v8 = v14 + 1;
            if (v14 + 1 >= v38)
              goto LABEL_37;
            v15 = *(_QWORD *)(v37 + 8 * v8);
            if (!v15)
            {
              v8 = v14 + 2;
              if (v14 + 2 >= v38)
                goto LABEL_37;
              v15 = *(_QWORD *)(v37 + 8 * v8);
              if (!v15)
              {
                v8 = v14 + 3;
                if (v14 + 3 >= v38)
                  goto LABEL_37;
                v15 = *(_QWORD *)(v37 + 8 * v8);
                if (!v15)
                {
                  v16 = v14 + 4;
                  if (v16 >= v38)
                    goto LABEL_37;
                  v15 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v16 + 1;
                      if (__OFADD__(v16, 1))
                        goto LABEL_43;
                      if (v8 >= v38)
                        goto LABEL_37;
                      v15 = *(_QWORD *)(v37 + 8 * v8);
                      ++v16;
                      if (v15)
                        goto LABEL_25;
                    }
                  }
                  v8 = v16;
                }
              }
            }
          }
LABEL_25:
          v11 = isUniquelyReferenced_nonNull_native;
          v6 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v17 = v1;
        v18 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
        v20 = *v18;
        v19 = v18[1];
        v21 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        v22 = v21;
        v24 = sub_21C45191C(v20, v19);
        v25 = v7[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v7[3] >= v27)
        {
          if ((v11 & 1) == 0)
            sub_21C458154();
        }
        else
        {
          sub_21C3E6484(v27, v11 & 1);
          v29 = sub_21C45191C(v20, v19);
          if ((v28 & 1) != (v30 & 1))
          {
            sub_21C459554();
            return;
          }
          v24 = v29;
        }
        v7 = (_QWORD *)*v40;
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = v7[7];
          v10 = 8 * v24;

          *(_QWORD *)(v9 + v10) = v22;
        }
        else
        {
          v7[(v24 >> 6) + 8] |= 1 << v24;
          v31 = (uint64_t *)(v7[6] + 16 * v24);
          *v31 = v20;
          v31[1] = v19;
          *(_QWORD *)(v7[7] + 8 * v24) = v22;
          v32 = v7[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_41;
          v7[2] = v34;
        }
        isUniquelyReferenced_nonNull_native = 1;
        v0 = v39;
        v1 = v17;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v35;
      *v35 = v0;
      v35[1] = sub_21C43F8C0;
LABEL_38:
      sub_21C459110();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_21C43F8C0()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C43F928()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 384);
  return swift_task_switch();
}

uint64_t sub_21C43F998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 148) = v12;
  *(_QWORD *)(v8 + 304) = a8;
  *(_QWORD *)(v8 + 312) = v11;
  *(_QWORD *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 296) = a7;
  *(_QWORD *)(v8 + 272) = a4;
  *(_QWORD *)(v8 + 280) = a5;
  *(_QWORD *)(v8 + 256) = a2;
  *(_QWORD *)(v8 + 264) = a3;
  *(_QWORD *)(v8 + 248) = a1;
  sub_21C3E344C(&qword_25527B718);
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  *(_QWORD *)(v8 + 328) = swift_task_alloc();
  v9 = sub_21C3E344C(&qword_25527B720);
  *(_QWORD *)(v8 + 336) = v9;
  *(_QWORD *)(v8 + 344) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 352) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C43FA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v80 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v70 = v12;
    v72 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v72 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v75 = v13;
      if (v15)
      {
        v82 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v82;
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 152) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 160) = v18;
          *(_BYTE *)(v0 + 168) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 128);
          v21 = *(_QWORD *)(v0 + 136);
          v22 = *(_BYTE *)(v0 + 144);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v82;
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v82;
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v81 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (v29 < *(_QWORD *)(v16 + 16))
        {
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 192) = v33;
          *(_QWORD *)(v0 + 200) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_57;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v81;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
          {
            v65 = (void *)swift_allocError();
            swift_willThrow();
            *(_QWORD *)(v0 + 232) = v65;
            v66 = v65;
            sub_21C3E344C(&qword_25527ABC0);
            if ((swift_dynamicCast() & 1) != 0)
            {
              sub_21C459350();
              *(_QWORD *)(v0 + 176) = 0;
              *(_QWORD *)(v0 + 184) = 0xE000000000000000;
              sub_21C458F00();
              sub_21C4593EC();
              sub_21C458F00();
              return sub_21C459404();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return swift_unexpectedError();
            }
          }
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_58;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v44 = v80;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v80;
      }
      v13 = v75 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v75 + 1 != v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
  v74 = *(_QWORD *)(v44 + 16);
  if (!v74)
    goto LABEL_53;
  v71 = (_OWORD *)(v0 + 16);
  v47 = sub_21C4590EC();
  v48 = *(_QWORD *)(v47 - 8);
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  swift_bridgeObjectRetain();
  v49 = 0;
  v73 = v44;
  v68 = v48;
  do
  {
    v52 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 328);
    v79 = *(_DWORD *)(v0 + 148);
    v53 = *(_QWORD *)(v0 + 296);
    v77 = *(_QWORD *)(v0 + 304);
    v78 = *(_QWORD *)(v0 + 312);
    v76 = *(_OWORD *)(v0 + 280);
    v54 = *(_QWORD *)(v0 + 272);
    v55 = *(_QWORD *)(v44 + 8 * v49 + 32);
    v69(v51, 1, 1, v47);
    sub_21C445EFC(v54, (uint64_t)v71);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (_QWORD *)(v56 + 16);
    *(_QWORD *)(v56 + 24) = 0;
    v58 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v56 + 32) = *v71;
    *(_OWORD *)(v56 + 48) = v58;
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v56 + 80) = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v56 + 88) = v55;
    *(_OWORD *)(v56 + 96) = v76;
    *(_QWORD *)(v56 + 112) = v53;
    *(_QWORD *)(v56 + 120) = v77;
    *(_QWORD *)(v56 + 128) = v78;
    *(_DWORD *)(v56 + 136) = v79;
    sub_21C446030(v51, v52);
    LODWORD(v51) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v52, 1, v47);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = *(_QWORD *)(v0 + 320);
    if ((_DWORD)v51 == 1)
    {
      sub_21C446078(*(_QWORD *)(v0 + 320));
      if (*v57)
        goto LABEL_45;
    }
    else
    {
      sub_21C4590E0();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v47);
      if (*v57)
      {
LABEL_45:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v60 = sub_21C4590BC();
        v62 = v61;
        swift_unknownObjectRelease();
        goto LABEL_48;
      }
    }
    v60 = 0;
    v62 = 0;
LABEL_48:
    v63 = **(_QWORD **)(v0 + 248);
    sub_21C3E344C(&qword_25527B6F0);
    v64 = v62 | v60;
    if (v62 | v60)
    {
      v64 = v0 + 72;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = v60;
      *(_QWORD *)(v0 + 96) = v62;
    }
    ++v49;
    v50 = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 104) = 1;
    *(_QWORD *)(v0 + 112) = v64;
    *(_QWORD *)(v0 + 120) = v63;
    swift_task_create();
    swift_release();
    sub_21C446078(v50);
    swift_bridgeObjectRelease();
    v44 = v73;
  }
  while (v74 != v49);
  swift_bridgeObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
  sub_21C3E344C(&qword_25527B6F0);
  sub_21C3E344C(&qword_25527ABC0);
  sub_21C459104();
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v67;
  *v67 = v0;
  v67[1] = sub_21C440358;
  return sub_21C459110();
}

uint64_t sub_21C440358()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

void sub_21C4403D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
    {
      v40 = (_QWORD *)(v0 + 216);
      v2 = *(_QWORD *)(v0 + 368);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v0 + 216) = v2;
      v37 = v1 + 64;
      v4 = -1;
      v5 = -1 << *(_BYTE *)(v1 + 32);
      if (-v5 < 64)
        v4 = ~(-1 << -(char)v5);
      v6 = v4 & *(_QWORD *)(v1 + 64);
      v38 = (unint64_t)(63 - v5) >> 6;
      v7 = *(_QWORD **)(v0 + 368);
      swift_bridgeObjectRetain();
      v8 = 0;
      v39 = v0;
      while (1)
      {
        *(_QWORD *)(v0 + 384) = v7;
        if (v6)
        {
          v11 = isUniquelyReferenced_nonNull_native;
          v12 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
          v13 = v12 | (v8 << 6);
        }
        else
        {
          v14 = v8 + 1;
          if (__OFADD__(v8, 1))
            goto LABEL_42;
          if (v14 >= v38)
          {
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v36 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 392) = v36;
            *v36 = v0;
            v36[1] = sub_21C4408B0;
            goto LABEL_38;
          }
          v15 = *(_QWORD *)(v37 + 8 * v14);
          ++v8;
          if (!v15)
          {
            v8 = v14 + 1;
            if (v14 + 1 >= v38)
              goto LABEL_37;
            v15 = *(_QWORD *)(v37 + 8 * v8);
            if (!v15)
            {
              v8 = v14 + 2;
              if (v14 + 2 >= v38)
                goto LABEL_37;
              v15 = *(_QWORD *)(v37 + 8 * v8);
              if (!v15)
              {
                v8 = v14 + 3;
                if (v14 + 3 >= v38)
                  goto LABEL_37;
                v15 = *(_QWORD *)(v37 + 8 * v8);
                if (!v15)
                {
                  v16 = v14 + 4;
                  if (v16 >= v38)
                    goto LABEL_37;
                  v15 = *(_QWORD *)(v37 + 8 * v16);
                  if (!v15)
                  {
                    while (1)
                    {
                      v8 = v16 + 1;
                      if (__OFADD__(v16, 1))
                        goto LABEL_43;
                      if (v8 >= v38)
                        goto LABEL_37;
                      v15 = *(_QWORD *)(v37 + 8 * v8);
                      ++v16;
                      if (v15)
                        goto LABEL_25;
                    }
                  }
                  v8 = v16;
                }
              }
            }
          }
LABEL_25:
          v11 = isUniquelyReferenced_nonNull_native;
          v6 = (v15 - 1) & v15;
          v13 = __clz(__rbit64(v15)) + (v8 << 6);
        }
        v17 = v1;
        v18 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v13);
        v20 = *v18;
        v19 = v18[1];
        v21 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
        v22 = v21;
        v24 = sub_21C45191C(v20, v19);
        v25 = v7[2];
        v26 = (v23 & 1) == 0;
        v27 = v25 + v26;
        if (__OFADD__(v25, v26))
          break;
        v28 = v23;
        if (v7[3] >= v27)
        {
          if ((v11 & 1) == 0)
            sub_21C458160();
        }
        else
        {
          sub_21C3E6490(v27, v11 & 1);
          v29 = sub_21C45191C(v20, v19);
          if ((v28 & 1) != (v30 & 1))
          {
            sub_21C459554();
            return;
          }
          v24 = v29;
        }
        v7 = (_QWORD *)*v40;
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = v7[7];
          v10 = 8 * v24;

          *(_QWORD *)(v9 + v10) = v22;
        }
        else
        {
          v7[(v24 >> 6) + 8] |= 1 << v24;
          v31 = (uint64_t *)(v7[6] + 16 * v24);
          *v31 = v20;
          v31[1] = v19;
          *(_QWORD *)(v7[7] + 8 * v24) = v22;
          v32 = v7[2];
          v33 = __OFADD__(v32, 1);
          v34 = v32 + 1;
          if (v33)
            goto LABEL_41;
          v7[2] = v34;
        }
        isUniquelyReferenced_nonNull_native = 1;
        v0 = v39;
        v1 = v17;
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 376) = v35;
      *v35 = v0;
      v35[1] = sub_21C440848;
LABEL_38:
      sub_21C459110();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_21C4407E4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C440848()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C4408B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 368) = *(_QWORD *)(v2 + 384);
  return swift_task_switch();
}

uint64_t sub_21C440920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 208) = v12;
  *(_QWORD *)(v8 + 216) = v14;
  *(_DWORD *)(v8 + 36) = v13;
  *(_QWORD *)(v8 + 192) = a8;
  *(_QWORD *)(v8 + 200) = v11;
  *(_QWORD *)(v8 + 176) = a6;
  *(_QWORD *)(v8 + 184) = a7;
  *(_QWORD *)(v8 + 160) = a4;
  *(_QWORD *)(v8 + 168) = a5;
  *(_QWORD *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 152) = a3;
  *(_QWORD *)(v8 + 136) = a1;
  *(_QWORD *)(v8 + 224) = sub_21C458DA4();
  *(_QWORD *)(v8 + 232) = sub_21C3E35C0(&qword_25527ABC0);
  v9 = sub_21C45911C();
  *(_QWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 248) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 256) = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_21C4409E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t result;
  unint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  BOOL v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void *v57;
  id v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69[3];

  v1 = *(_QWORD *)(v0 + 160);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_21C43B4EC(v2);
  swift_bridgeObjectRelease();
  v4 = sub_21C40A3B4(v3);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v6 = 100;
  if (v5 == 1)
    v6 = 150;
  if (v6 >= v1)
    v7 = v1;
  else
    v7 = v6;
  if (v1 <= 0)
    v8 = v6;
  else
    v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = sub_21C443DF0(v9);
  swift_bridgeObjectRelease();
  v11 = sub_21C445984(0, v10[2], v8, v8, (uint64_t)v10);
  swift_release();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v67 = MEMORY[0x24BEE4AF8];
    sub_21C3FD530(0, v12, 0);
    v13 = 0;
    v59 = v12;
    v60 = v11 + 32;
    do
    {
      v14 = *(_QWORD *)(v60 + 8 * v13);
      v15 = *(_QWORD *)(v14 + 16);
      v62 = v13;
      if (v15)
      {
        v69[0] = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_21C3FD588(0, v15, 0);
        v16 = v69[0];
        v17 = (_BYTE *)(v14 + 48);
        do
        {
          v18 = *((_QWORD *)v17 - 1);
          v19 = *v17;
          *(_QWORD *)(v0 + 40) = *((_QWORD *)v17 - 2);
          *(_QWORD *)(v0 + 48) = v18;
          *(_BYTE *)(v0 + 56) = v19;
          swift_bridgeObjectRetain();
          sub_21C3E344C(&qword_25527B728);
          sub_21C3E344C(&qword_25527A3F0);
          swift_dynamicCast();
          v20 = *(_QWORD *)(v0 + 16);
          v21 = *(_QWORD *)(v0 + 24);
          v22 = *(_BYTE *)(v0 + 32);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_21C3FD588(0, *(_QWORD *)(v16 + 16) + 1, 1);
            v16 = v69[0];
          }
          v24 = *(_QWORD *)(v16 + 16);
          v23 = *(_QWORD *)(v16 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_21C3FD588(v23 > 1, v24 + 1, 1);
            v16 = v69[0];
          }
          v17 += 24;
          *(_QWORD *)(v16 + 16) = v24 + 1;
          v25 = v16 + 24 * v24;
          *(_QWORD *)(v25 + 32) = v20;
          *(_QWORD *)(v25 + 40) = v21;
          *(_BYTE *)(v25 + 48) = v22;
          --v15;
        }
        while (v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        v16 = MEMORY[0x24BEE4AF8];
      }
      v26 = *(_QWORD *)(v16 + 16);
      if (v26)
      {
        sub_21C3E344C(&qword_25527A0A0);
        v27 = (_QWORD *)sub_21C459458();
        v26 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v27 = (_QWORD *)MEMORY[0x24BEE4B00];
      }
      v68 = v27;
      result = swift_bridgeObjectRetain_n();
      if (v26)
      {
        v29 = 0;
        v30 = (_BYTE *)(v16 + 48);
        while (1)
        {
          if (v29 >= *(_QWORD *)(v16 + 16))
          {
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            return result;
          }
          v31 = *v30;
          v33 = *((_QWORD *)v30 - 2);
          v32 = *((_QWORD *)v30 - 1);
          swift_bridgeObjectRetain();
          if (!v32)
            goto LABEL_33;
          *(_QWORD *)(v0 + 80) = v33;
          *(_QWORD *)(v0 + 88) = v32;
          result = sub_21C45191C(v33, v32);
          v35 = v27[2];
          v36 = (v34 & 1) == 0;
          v37 = __OFADD__(v35, v36);
          v38 = v35 + v36;
          if (v37)
            goto LABEL_51;
          v39 = v34;
          if (v27[3] < v38)
          {
            sub_21C3E6158(v38, 1);
            v27 = v68;
            result = sub_21C45191C(v33, v32);
            if ((v39 & 1) != (v40 & 1))
              return sub_21C459554();
          }
          if ((v39 & 1) != 0)
            break;
          v27[(result >> 6) + 8] |= 1 << result;
          v41 = (uint64_t *)(v27[6] + 16 * result);
          *v41 = v33;
          v41[1] = v32;
          *(_BYTE *)(v27[7] + result) = v31;
          v42 = v27[2];
          v37 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v37)
            goto LABEL_52;
          ++v29;
          v27[2] = v43;
          v30 += 24;
          if (v26 == v29)
            goto LABEL_33;
        }
        v57 = (void *)swift_allocError();
        swift_willThrow();
        *(_QWORD *)(v0 + 120) = v57;
        v58 = v57;
        if ((swift_dynamicCast() & 1) != 0)
        {
          sub_21C459350();
          *(_QWORD *)(v0 + 64) = 0;
          *(_QWORD *)(v0 + 72) = 0xE000000000000000;
          sub_21C458F00();
          sub_21C4593EC();
          sub_21C458F00();
          return sub_21C459404();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return swift_unexpectedError();
        }
      }
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v44 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_21C3FD530(0, *(_QWORD *)(v67 + 16) + 1, 1);
        v44 = v67;
      }
      v46 = *(_QWORD *)(v44 + 16);
      v45 = *(_QWORD *)(v44 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_21C3FD530(v45 > 1, v46 + 1, 1);
        v44 = v67;
      }
      v13 = v62 + 1;
      *(_QWORD *)(v44 + 16) = v46 + 1;
      *(_QWORD *)(v44 + 8 * v46 + 32) = v27;
    }
    while (v62 + 1 != v59);
    swift_bridgeObjectRelease();
    v47 = *(_QWORD *)(v44 + 16);
    if (v47)
      goto LABEL_40;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
    v47 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v47)
    {
LABEL_40:
      swift_bridgeObjectRetain();
      v48 = 0;
      v61 = v47;
      v63 = v44;
      do
      {
        v49 = *(_QWORD *)(v0 + 216);
        v50 = *(_DWORD *)(v0 + 36);
        v65 = *(_QWORD *)(v0 + 200);
        v66 = *(_QWORD *)(v0 + 208);
        v51 = *(_QWORD *)(v0 + 184);
        v64 = *(_QWORD *)(v0 + 192);
        v53 = *(_QWORD *)(v0 + 168);
        v52 = *(_QWORD *)(v0 + 176);
        v54 = *(_QWORD *)(v0 + 144);
        v55 = *(_QWORD *)(v63 + 8 * v48++ + 32);
        v69[0] = v55;
        swift_bridgeObjectRetain();
        sub_21C441388(v69, v54, v53, v52, v51, v64, v65, v66, v50, v49);
        swift_bridgeObjectRelease();
      }
      while (v61 != v48);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = sub_21C458D5C();
  *(_QWORD *)(v0 + 264) = swift_checkMetadataState();
  sub_21C459104();
  v56 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v56;
  *v56 = v0;
  v56[1] = sub_21C441124;
  return sub_21C459110();
}

uint64_t sub_21C441124()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 280) = 0;
  return swift_task_switch();
}

uint64_t sub_21C441190()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 128))
  {
    if ((MEMORY[0x22077B424](*(_QWORD *)(v0 + 128), MEMORY[0x24BEE0D00], *(_QWORD *)(v0 + 216), MEMORY[0x24BEE0D10]) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v3 = *(_QWORD *)(v0 + 216);
      *(_QWORD *)(swift_task_alloc() + 16) = v3;
      sub_21C458D8C();
      swift_task_dealloc();
    }
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v4;
    *v4 = v0;
    v4[1] = sub_21C4412D4;
    return sub_21C459110();
  }
  else
  {
    v1 = *(_QWORD **)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
    *v1 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_21C4412D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v2 + 280) = 0;
  return swift_task_switch();
}

uint64_t sub_21C441340()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C441388(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[3];
  uint64_t v29;

  v26 = a7;
  v27 = a2;
  v16 = sub_21C3E344C(&qword_25527B718);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  v20 = sub_21C4590EC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  sub_21C445EFC(a3, (uint64_t)v28);
  v21 = swift_allocObject();
  v22 = v28[1];
  *(_OWORD *)(v21 + 40) = v28[0];
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = a10;
  *(_OWORD *)(v21 + 56) = v22;
  *(_OWORD *)(v21 + 72) = v28[2];
  *(_QWORD *)(v21 + 88) = v29;
  *(_QWORD *)(v21 + 96) = v19;
  *(_QWORD *)(v21 + 104) = a4;
  *(_QWORD *)(v21 + 112) = a5;
  v23 = v26;
  *(_QWORD *)(v21 + 120) = a6;
  *(_QWORD *)(v21 + 128) = v23;
  *(_QWORD *)(v21 + 136) = a8;
  *(_DWORD *)(v21 + 144) = a9;
  sub_21C458DA4();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_21C3E35C0(&qword_25527ABC0);
  sub_21C459128();
  sub_21C441700((uint64_t)v18, (uint64_t)&unk_25527B7D0, v21);
  return sub_21C446078((uint64_t)v18);
}

uint64_t sub_21C441544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  int v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 104) = v12;
  *(_DWORD *)(v8 + 36) = v11;
  *(_OWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C441580()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v9 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(int **)(v6 + 8)
                                                                                                 + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v7;
  *v7 = v0;
  v7[1] = sub_21C441668;
  return v9(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, *(_QWORD *)(v0 + 104), v5, v6);
}

uint64_t sub_21C441668(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch();
}

uint64_t sub_21C4416DC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 40) = *(_QWORD *)(v0 + 128);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C4416F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C441700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = sub_21C3E344C(&qword_25527B718);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_21C446030(a1, (uint64_t)v9);
  v10 = sub_21C4590EC();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_21C446078((uint64_t)v9);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_21C4590BC();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_21C4590E0();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t MCatalogService.fetch(bookAssets:audiobookAssets:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = *a7;
  v10 = a7[1];
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 128) = *((_DWORD *)a7 + 4);
  return swift_task_switch();
}

uint64_t sub_21C4418B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23[9];
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (!v1)
  {
    if (v2)
    {
      v22 = 0;
      v7 = sub_21C442728(&v22, v2, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
      goto LABEL_8;
    }
LABEL_11:
    sub_21C4037D4();
    swift_allocError();
    *v9 = 8;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v23[0] = 3;
  v3 = sub_21C442728(v23, v1, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v4 = v3;
  if (!v2)
  {
    if (v3)
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(v0 + 32);
  v22 = 0;
  v6 = sub_21C442728(&v22, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v7 = v6;
  if (v4)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      v11 = sub_21C43B6C8(v8, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v11;
    }
    goto LABEL_12;
  }
LABEL_8:
  v4 = v7;
  if (!v7)
    goto LABEL_11;
LABEL_12:
  v12 = *(_DWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 56);
  v20 = *(_OWORD *)(v0 + 40);
  v21 = *(_OWORD *)(v0 + 64);
  v16 = sub_21C429F70(v4);
  *(_QWORD *)(v0 + 96) = v16;
  swift_bridgeObjectRelease();
  v17 = sub_21C3E344C(&qword_25527B668);
  v18 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v18;
  *(_QWORD *)(v18 + 16) = v16;
  *(_OWORD *)(v18 + 24) = v21;
  *(_OWORD *)(v18 + 40) = v20;
  *(_QWORD *)(v18 + 56) = v15;
  *(_QWORD *)(v18 + 64) = v14;
  *(_QWORD *)(v18 + 72) = v13;
  *(_DWORD *)(v18 + 80) = v12;
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v19;
  *v19 = v0;
  v19[1] = sub_21C441B14;
  v24 = v17;
  return sub_21C459494();
}

uint64_t sub_21C441B14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C441B80()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21C441BB4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MCatalogService.fetch(adamID:type:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 128) = a6;
  *(_QWORD *)(v8 + 136) = v7;
  *(_QWORD *)(v8 + 112) = a4;
  *(_QWORD *)(v8 + 120) = a5;
  *(_QWORD *)(v8 + 96) = a1;
  *(_QWORD *)(v8 + 104) = a2;
  *(_BYTE *)(v8 + 192) = *a3;
  v9 = *(_QWORD *)(a7 + 8);
  *(_QWORD *)(v8 + 144) = *(_QWORD *)a7;
  *(_QWORD *)(v8 + 152) = v9;
  *(_DWORD *)(v8 + 92) = *(_DWORD *)(a7 + 16);
  return swift_task_switch();
}

uint64_t sub_21C441C28()
{
  uint64_t v0;
  int v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t (*v17)(unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 192);
  if (v1 == 3 || v1 == 0)
  {
    v3 = *(_DWORD *)(v0 + 92);
    v5 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD **)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = v6[5];
    v10 = v6[6];
    sub_21C3E359C(v6 + 2, v9);
    sub_21C3E344C(&qword_25527A3E8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21C45A5D0;
    *(_QWORD *)(inited + 32) = v7;
    *(_QWORD *)(inited + 40) = v8;
    *(_BYTE *)(inited + 48) = v1;
    swift_bridgeObjectRetain();
    v12 = sub_21C4163E0(inited);
    *(_QWORD *)(v0 + 160) = v12;
    *(_QWORD *)(v0 + 72) = v5;
    *(_QWORD *)(v0 + 80) = v4;
    *(_DWORD *)(v0 + 88) = v3;
    v17 = (uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v10 + 8) + *(_QWORD *)(v10 + 8));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v13;
    v14 = type metadata accessor for MAsset();
    *v13 = v0;
    v13[1] = sub_21C441DA0;
    return v17(v12, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), v0 + 72, v14, v9, v10);
  }
  else
  {
    sub_21C4037D4();
    swift_allocError();
    *v15 = v1;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_21C441DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C441E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 176) + 16))
  {
    v2 = *(_QWORD *)(v0 + 96);
    v1 = *(_QWORD *)(v0 + 104);
    swift_bridgeObjectRetain();
    v3 = sub_21C45191C(v2, v1);
    if ((v4 & 1) != 0)
    {
      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(v0 + 176) + 56) + 8 * v3);
      v6 = v5;
    }
    else
    {
      v5 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void *))(v0 + 8))(v5);
}

uint64_t sub_21C441EB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MCatalogService.fetch(authorIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 40) = a3;
  *(_QWORD *)(v7 + 48) = a4;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)a6;
  *(_QWORD *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return swift_task_switch();
}

uint64_t sub_21C441EF0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v1 = *(_DWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  v12 = *(_OWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 24);
  v14 = 2;
  v6 = sub_21C442728(&v14, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v7 = sub_21C429F70(v6);
  *(_QWORD *)(v0 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = sub_21C3E344C(&qword_25527B690);
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v9;
  *(_QWORD *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v13;
  *(_OWORD *)(v9 + 40) = v12;
  *(_QWORD *)(v9 + 56) = v4;
  *(_QWORD *)(v9 + 64) = v3;
  *(_QWORD *)(v9 + 72) = v2;
  *(_DWORD *)(v9 + 80) = v1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_21C442024;
  v15 = v8;
  return sub_21C459494();
}

uint64_t sub_21C442024()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t MCatalogService.fetch(genreIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 40) = a3;
  *(_QWORD *)(v7 + 48) = a4;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)a6;
  *(_QWORD *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return swift_task_switch();
}

uint64_t sub_21C4420C0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v1 = *(_DWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  v12 = *(_OWORD *)(v0 + 32);
  v13 = *(_OWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 24);
  v14 = 5;
  v6 = sub_21C442728(&v14, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v7 = sub_21C429F70(v6);
  *(_QWORD *)(v0 + 88) = v7;
  swift_bridgeObjectRelease();
  v8 = sub_21C3E344C(&qword_25527B6B0);
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v9;
  *(_QWORD *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v13;
  *(_OWORD *)(v9 + 40) = v12;
  *(_QWORD *)(v9 + 56) = v4;
  *(_QWORD *)(v9 + 64) = v3;
  *(_QWORD *)(v9 + 72) = v2;
  *(_DWORD *)(v9 + 80) = v1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_21C442024;
  v15 = v8;
  return sub_21C459494();
}

uint64_t MCatalogService.fetch(bookSeries:audiobookSeries:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  v9 = *a7;
  v10 = a7[1];
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 128) = *((_DWORD *)a7 + 4);
  return swift_task_switch();
}

uint64_t sub_21C442228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23[9];
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (!v1)
  {
    if (v2)
    {
      v22 = 1;
      v7 = sub_21C442728(&v22, v2, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
      goto LABEL_8;
    }
LABEL_11:
    sub_21C4037D4();
    swift_allocError();
    *v9 = 8;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v23[0] = 4;
  v3 = sub_21C442728(v23, v1, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v4 = v3;
  if (!v2)
  {
    if (v3)
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(v0 + 32);
  v22 = 1;
  v6 = sub_21C442728(&v22, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD5B4, &qword_25527A0D0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C4438B0);
  v7 = v6;
  if (v4)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      v11 = sub_21C43B6C8(v8, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v11;
    }
    goto LABEL_12;
  }
LABEL_8:
  v4 = v7;
  if (!v7)
    goto LABEL_11;
LABEL_12:
  v12 = *(_DWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 56);
  v20 = *(_OWORD *)(v0 + 40);
  v21 = *(_OWORD *)(v0 + 64);
  v16 = sub_21C429F70(v4);
  *(_QWORD *)(v0 + 96) = v16;
  swift_bridgeObjectRelease();
  v17 = sub_21C3E344C(&qword_25527B6D0);
  v18 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v18;
  *(_QWORD *)(v18 + 16) = v16;
  *(_OWORD *)(v18 + 24) = v21;
  *(_OWORD *)(v18 + 40) = v20;
  *(_QWORD *)(v18 + 56) = v15;
  *(_QWORD *)(v18 + 64) = v14;
  *(_QWORD *)(v18 + 72) = v13;
  *(_DWORD *)(v18 + 80) = v12;
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v19;
  *v19 = v0;
  v19[1] = sub_21C44248C;
  v24 = v17;
  return sub_21C459494();
}

uint64_t sub_21C44248C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t MCatalogService.fetch(adamIDs:relationships:views:additionalParameters:batchSize:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 40) = a3;
  *(_QWORD *)(v7 + 48) = a4;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v7 + 72) = *(_QWORD *)a6;
  *(_QWORD *)(v7 + 80) = v8;
  *(_DWORD *)(v7 + 120) = *(_DWORD *)(a6 + 16);
  return swift_task_switch();
}

uint64_t sub_21C442528()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;

  v1 = *(_DWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  v11 = *(_OWORD *)(v0 + 32);
  v12 = *(_OWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 24);
  v13 = 6;
  v6 = sub_21C442728(&v13, v5, (void (*)(BOOL, unint64_t, uint64_t))sub_21C3FD588, &qword_25527A0A0, (void (*)(_QWORD, _QWORD, _QWORD))sub_21C44312C);
  *(_QWORD *)(v0 + 88) = v6;
  v7 = sub_21C3E344C(&qword_25527B6F0);
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v8;
  *(_QWORD *)(v8 + 16) = v6;
  *(_OWORD *)(v8 + 24) = v12;
  *(_OWORD *)(v8 + 40) = v11;
  *(_QWORD *)(v8 + 56) = v4;
  *(_QWORD *)(v8 + 64) = v3;
  *(_QWORD *)(v8 + 72) = v2;
  *(_DWORD *)(v8 + 80) = v1;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v9;
  *v9 = v0;
  v9[1] = sub_21C44264C;
  v14 = v7;
  return sub_21C459494();
}

uint64_t sub_21C44264C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_21C4426B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21C4426EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C442728(char *a1, uint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t), uint64_t *a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  void (*v28)(BOOL, unint64_t, uint64_t);
  uint64_t *v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  char v31;
  char v32;
  uint64_t v33;

  v31 = *a1;
  LOBYTE(v33) = *a1;
  v8 = sub_21C442B30((unsigned __int8 *)&v33, a2);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v29 = a4;
    v30 = a5;
    v33 = MEMORY[0x24BEE4AF8];
    v28 = a3;
    a3(0, v9, 0);
    v10 = v33;
    v11 = sub_21C444478(v8);
    v13 = v12;
    v15 = v14 & 1;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(v8 + 32))
    {
      if (((*(_QWORD *)(v8 + 56 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v8 + 36) != v13)
        goto LABEL_18;
      v32 = v15;
      v16 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      v33 = v10;
      v20 = *(_QWORD *)(v10 + 16);
      v19 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v20 >= v19 >> 1)
      {
        v28(v19 > 1, v20 + 1, 1);
        v10 = v33;
      }
      *(_QWORD *)(v10 + 16) = v20 + 1;
      v21 = v10 + 24 * v20;
      *(_QWORD *)(v21 + 32) = v18;
      *(_QWORD *)(v21 + 40) = v17;
      *(_BYTE *)(v21 + 48) = v31;
      v22 = sub_21C444518(v11, v13, v32 & 1, v8);
      v11 = v22;
      v13 = v23;
      v15 = v24 & 1;
      if (!--v9)
      {
        sub_21C4460B8(v22, v23, v15);
        swift_bridgeObjectRelease();
        a4 = v29;
        a5 = v30;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
LABEL_12:
    if (*(_QWORD *)(v10 + 16))
    {
      sub_21C3E344C(a4);
      v25 = sub_21C459458();
    }
    else
    {
      v25 = MEMORY[0x24BEE4B00];
    }
    v33 = v25;
    v26 = swift_bridgeObjectRetain();
    a5(v26, 1, &v33);
    swift_bridgeObjectRelease();
    return v33;
  }
  return result;
}

uint64_t MCatalogService.fetch(adamID:relationships:views:additionalParameters:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 128) = a5;
  *(_QWORD *)(v7 + 136) = v6;
  *(_QWORD *)(v7 + 112) = a3;
  *(_QWORD *)(v7 + 120) = a4;
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  v8 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v7 + 144) = *(_QWORD *)a6;
  *(_QWORD *)(v7 + 152) = v8;
  *(_DWORD *)(v7 + 92) = *(_DWORD *)(a6 + 16);
  return swift_task_switch();
}

uint64_t sub_21C442994()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v14)(unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_DWORD *)(v0 + 92);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD **)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = v4[5];
  v8 = v4[6];
  sub_21C3E359C(v4 + 2, v7);
  sub_21C3E344C(&qword_25527A3E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21C45A5D0;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v5;
  *(_BYTE *)(inited + 48) = 6;
  swift_bridgeObjectRetain();
  v10 = sub_21C4163E0(inited);
  *(_QWORD *)(v0 + 160) = v10;
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 80) = v2;
  *(_DWORD *)(v0 + 88) = v1;
  v14 = (uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v8 + 8) + *(_QWORD *)(v8 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v11;
  v12 = type metadata accessor for MResource();
  *v11 = v0;
  v11[1] = sub_21C442AB0;
  return v14(v10, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), v0 + 72, v12, v7, v8);
}

uint64_t sub_21C442AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_21C442B24()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C442B30(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = *a1;
  result = MEMORY[0x24BEE4B08];
  v16 = MEMORY[0x24BEE4B08];
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v5 = (unint64_t *)(a2 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v8 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_21C43B744(v6, v7, v8);
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
      {
        if (qword_255279F28 != -1)
          swift_once();
        v10 = sub_21C458D20();
        sub_21C3E2BA0(v10, (uint64_t)qword_25527B630);
        v11 = sub_21C459200();
        swift_bridgeObjectRetain();
        v12 = sub_21C458D08();
        if (os_log_type_enabled(v12, v11))
        {
          v13 = swift_slowAlloc();
          v15 = swift_slowAlloc();
          *(_DWORD *)v13 = 136315394;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v13 + 4) = sub_21C409744(v6, v7, &v15);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v13 + 12) = 2080;
          __asm { BR              X8 }
        }

        swift_bridgeObjectRelease_n();
      }
      else
      {
        sub_21C3E7104(&v15, v6, v7);
        swift_bridgeObjectRelease();
      }
      v5 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

void sub_21C442E54()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    v2 = sub_21C458E64();
    v4 = v3;

  }
  else
  {
    v4 = 0x800000021C45F9A0;
    v2 = 0xD000000000000010;
  }
  qword_25527B620 = v2;
  *(_QWORD *)algn_25527B628 = v4;
}

uint64_t static Logger.bundleIdentifier.getter()
{
  uint64_t v0;

  if (qword_255279F20 != -1)
    swift_once();
  v0 = qword_25527B620;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_21C442F50()
{
  uint64_t v0;

  v0 = sub_21C458D20();
  sub_21C3E3604(v0, qword_25527B630);
  sub_21C3E2BA0(v0, (uint64_t)qword_25527B630);
  if (qword_255279F20 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return sub_21C458D14();
}

uint64_t static Logger.catalogService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_255279F28 != -1)
    swift_once();
  v2 = sub_21C458D20();
  v3 = sub_21C3E2BA0(v2, (uint64_t)qword_25527B630);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_21C443078(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v12 = v2[3];
  v5 = v2[5];
  v11 = v2[4];
  v6 = v2[6];
  v7 = v2[7];
  v8 = v2[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_21C403880;
  return sub_21C440920(a1, a2, v12, v11, v5, v6, v7, v8);
}

void sub_21C44312C(uint64_t a1, char a2, _QWORD *a3)
{
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  LOBYTE(v7) = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_21C45191C(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_21C3E6158(v16, v4 & 1);
    v11 = sub_21C45191C(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_21C459554();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_21C457F88();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v8;
  *(_BYTE *)(v22[7] + v11) = v7;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v4 = (_BYTE *)(a1 + 72);
    v7 = 1;
    while (v7 < *(_QWORD *)(a1 + 16))
    {
      v26 = *v4;
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_21C45191C(v9, v8);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      v17 = v29;
      if (v27[3] < v32)
      {
        sub_21C3E6158(v32, 1);
        v28 = sub_21C45191C(v9, v8);
        if ((v17 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((v17 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v8;
      *(_BYTE *)(v34[7] + v28) = v26;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v7;
      v34[2] = v37;
      v4 += 24;
      if (v6 == v7)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

void sub_21C4434B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  void *v23;
  _BYTE *v24;
  id v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  char v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_21C444614((uint64_t)&v47);
  v12 = v48;
  if (!v48)
    goto LABEL_23;
  v13 = v47;
  v46 = v49;
  v14 = (_QWORD *)*a5;
  v16 = sub_21C45191C(v47, v48);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_21C458130();
      if ((v20 & 1) == 0)
        goto LABEL_15;
    }
LABEL_12:
    sub_21C4037D4();
    v23 = (void *)swift_allocError();
    *v24 = 7;
    swift_willThrow();
    v57 = v23;
    v25 = v23;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_21C4184B0();
      swift_release();

      return;
    }
    goto LABEL_28;
  }
  sub_21C3E6460(v19, a4 & 1);
  v21 = sub_21C45191C(v13, v12);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_27:
    sub_21C459554();
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    return;
  }
  v16 = v21;
  if ((v20 & 1) != 0)
    goto LABEL_12;
LABEL_15:
  v26 = (_QWORD *)*a5;
  *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
  v27 = (uint64_t *)(v26[6] + 16 * v16);
  *v27 = v13;
  v27[1] = v12;
  *(_BYTE *)(v26[7] + v16) = v46;
  v28 = v26[2];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v26[2] = v30;
  sub_21C444614((uint64_t)&v47);
  for (i = v48; v48; i = v48)
  {
    v32 = v47;
    v33 = v49;
    v34 = (_QWORD *)*a5;
    v35 = sub_21C45191C(v47, i);
    v37 = v34[2];
    v38 = (v36 & 1) == 0;
    v29 = __OFADD__(v37, v38);
    v39 = v37 + v38;
    if (v29)
      goto LABEL_25;
    v40 = v36;
    if (v34[3] < v39)
    {
      sub_21C3E6460(v39, 1);
      v35 = sub_21C45191C(v32, i);
      if ((v40 & 1) != (v41 & 1))
        goto LABEL_27;
    }
    if ((v40 & 1) != 0)
      goto LABEL_12;
    v42 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    v43 = (uint64_t *)(v42[6] + 16 * v35);
    *v43 = v32;
    v43[1] = i;
    *(_BYTE *)(v42[7] + v35) = v33;
    v44 = v42[2];
    v29 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (v29)
      goto LABEL_26;
    v42[2] = v45;
    sub_21C444614((uint64_t)&v47);
  }
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  sub_21C4184B0();
  swift_release();
}

void sub_21C4438B0(uint64_t a1, char a2, _QWORD *a3)
{
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  LOBYTE(v7) = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_21C45191C(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_21C3E6460(v16, v4 & 1);
    v11 = sub_21C45191C(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_21C459554();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_21C458130();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v8;
  *(_BYTE *)(v22[7] + v11) = v7;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v4 = (_BYTE *)(a1 + 72);
    v7 = 1;
    while (v7 < *(_QWORD *)(a1 + 16))
    {
      v26 = *v4;
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_21C45191C(v9, v8);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      v17 = v29;
      if (v27[3] < v32)
      {
        sub_21C3E6460(v32, 1);
        v28 = sub_21C45191C(v9, v8);
        if ((v17 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((v17 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v8;
      *(_BYTE *)(v34[7] + v28) = v26;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v7;
      v34[2] = v37;
      v4 += 24;
      if (v6 == v7)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

_QWORD *sub_21C443C38(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21C3E344C(&qword_25527A3B8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_21C443EE4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_21C4184B0();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_21C443D1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  sub_21C3E344C(&qword_25527A438);
  v3 = swift_allocObject();
  v4 = j__malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_21C4440E0(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_21C4184B0();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_21C443DF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_21C3E344C(&qword_25527B740);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  v5 = sub_21C444274((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_21C4184B0();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_21C443EE4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_21C4440E0(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_21C444274(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    LOBYTE(v20) = *(_BYTE *)(*(_QWORD *)(a4 + 56) + v16);
    *(_QWORD *)v11 = v22;
    *(_QWORD *)(v11 + 8) = v21;
    *(_BYTE *)(v11 + 16) = (_BYTE)v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_21C444478(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_21C444518(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21C4445FC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C444614@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(_QWORD *);
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  _QWORD v21[2];
  char v22;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v8);
    v1[3] = v6;
    v1[4] = v7;
    v13 = (void (*)(_QWORD *))v1[5];
    v21[0] = v10;
    v21[1] = v11;
    v22 = v12;
    swift_bridgeObjectRetain();
    v13(v21);
    return swift_bridgeObjectRelease();
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)(v1[2] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v1[1];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        v7 = (v18 - 1) & v18;
        v8 = __clz(__rbit64(v18)) + (v15 << 6);
        v6 = v15;
        goto LABEL_3;
      }
      v19 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          v15 = v19;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * (v5 + 3));
          if (v18)
          {
            v15 = v5 + 3;
            goto LABEL_7;
          }
          v19 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v19);
            if (v18)
              goto LABEL_10;
            v15 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v16)
            {
              v18 = *(_QWORD *)(v17 + 8 * v15);
              if (v18)
                goto LABEL_7;
              v6 = v16 - 1;
              v20 = v5 + 6;
              while (v16 != v20)
              {
                v18 = *(_QWORD *)(v17 + 8 * v20++);
                if (v18)
                {
                  v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_21C444798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  uint64_t v18;

  *(_QWORD *)(v8 + 16) = a1;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v15;
  *v15 = v8;
  v15[1] = sub_21C446574;
  return sub_21C43BD08(a2, a3, a4, a5, a6, a7, a8, v18);
}

void sub_21C44484C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444798 }
}

uint64_t sub_21C444908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 36) = v12;
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C44493C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = type metadata accessor for MAsset();
  *v7 = v0;
  v7[1] = sub_21C444A2C;
  return v10(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, v8, v5, v6);
}

uint64_t sub_21C444A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_21C444AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  uint64_t v18;

  *(_QWORD *)(v8 + 16) = a1;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v15;
  *v15 = v8;
  v15[1] = sub_21C446574;
  return sub_21C43CC2C(a2, a3, a4, a5, a6, a7, a8, v18);
}

void sub_21C444B54()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444AA0 }
}

uint64_t sub_21C444C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 36) = v12;
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C444C44()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = type metadata accessor for MAuthor();
  *v7 = v0;
  v7[1] = sub_21C444A2C;
  return v10(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, v8, v5, v6);
}

uint64_t sub_21C444D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  uint64_t v18;

  *(_QWORD *)(v8 + 16) = a1;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v15;
  *v15 = v8;
  v15[1] = sub_21C446574;
  return sub_21C43DB50(a2, a3, a4, a5, a6, a7, a8, v18);
}

void sub_21C444DE8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444D34 }
}

uint64_t sub_21C444EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 36) = v12;
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C444ED8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = type metadata accessor for MGenre();
  *v7 = v0;
  v7[1] = sub_21C444A2C;
  return v10(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, v8, v5, v6);
}

uint64_t sub_21C444FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  uint64_t v18;

  *(_QWORD *)(v8 + 16) = a1;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v15;
  *v15 = v8;
  v15[1] = sub_21C446574;
  return sub_21C43EA74(a2, a3, a4, a5, a6, a7, a8, v18);
}

void sub_21C44507C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444FC8 }
}

uint64_t sub_21C445138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 36) = v12;
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C44516C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = type metadata accessor for MSeries();
  *v7 = v0;
  v7[1] = sub_21C444A2C;
  return v10(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, v8, v5, v6);
}

uint64_t sub_21C44525C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  uint64_t v18;

  *(_QWORD *)(v8 + 16) = a1;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v15;
  *v15 = v8;
  v15[1] = sub_21C445310;
  return sub_21C43F998(a2, a3, a4, a5, a6, a7, a8, v18);
}

uint64_t sub_21C445310(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_21C44536C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C40347C;
  __asm { BR              X9; sub_21C44525C }
}

uint64_t destroy for MCatalogService(uint64_t a1)
{

  return sub_21C3E2754(a1 + 16);
}

uint64_t initializeWithCopy for MCatalogService(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  v9 = v3;
  v8(v4, v5, v7);
  return a1;
}

uint64_t assignWithCopy for MCatalogService(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  sub_21C3F5A14((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

__n128 initializeWithTake for MCatalogService(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MCatalogService(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  sub_21C3E2754(a1 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for MCatalogService(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MCatalogService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MCatalogService()
{
  return &type metadata for MCatalogService;
}

uint64_t getEnumTagSinglePayload for MCatalogService.FetchError(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
  {
    v6 = *a1;
    if (v6 >= 6)
      v7 = v6 - 5;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 8;
    if (a2 + 8 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21C445678 + 4 * byte_21C45DFD1[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for MCatalogService.FetchError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 8;
  if (a3 + 8 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF8)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21C445724 + 4 * byte_21C45DFDB[v5]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21C445758 + 4 * byte_21C45DFD6[v5]))();
}

uint64_t sub_21C445758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C445760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C445768);
  return result;
}

uint64_t sub_21C445774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C44577CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21C445780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C445788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C445794(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 6)
    return v1 - 5;
  else
    return 0;
}

_BYTE *sub_21C4457A8(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 5;
  return result;
}

ValueMetadata *type metadata accessor for MCatalogService.FetchError()
{
  return &type metadata for MCatalogService.FetchError;
}

uint64_t sub_21C4457C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_DWORD *)(v8 + 36) = v12;
  *(_QWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a1;
  *(_QWORD *)(v8 + 48) = a4;
  return swift_task_switch();
}

uint64_t sub_21C4457FC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  sub_21C4590F8();
  v1 = *(_DWORD *)(v0 + 36);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 48);
  v5 = v4[5];
  v6 = v4[6];
  sub_21C3E359C(v4 + 2, v5);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  *(_DWORD *)(v0 + 32) = v1;
  v10 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = type metadata accessor for MResource();
  *v7 = v0;
  v7[1] = sub_21C4458EC;
  return v10(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v0 + 16, v8, v5, v6);
}

uint64_t sub_21C4458EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 120) = a1;
  return swift_task_switch();
}

uint64_t sub_21C445960()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 40) = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C445978()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C445984(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t result;
  int64_t v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  BOOL v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a3;
  v7 = a1;
  v8 = 0;
  v9 = a1;
  while (1)
  {
    v10 = v9 <= a2;
    if (a3 > 0)
      v10 = v9 >= a2;
    if (v10)
      break;
    v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11)
      v9 = (v9 >> 63) ^ 0x8000000000000000;
    v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  v44 = MEMORY[0x24BEE4AF8];
  sub_21C3FD55C(0, v8, 0);
  result = v44;
  if (v8)
  {
    v40 = *(_QWORD *)(a5 + 16);
    v13 = a2;
    while (1)
    {
      v14 = v7 <= v13;
      if (v6 > 0)
        v14 = v7 >= v13;
      if (v14)
        break;
      if (__OFADD__(v7, v6))
        v15 = ((v7 + v6) >> 63) ^ 0x8000000000000000;
      else
        v15 = v7 + v6;
      if (__OFADD__(v7, a4))
        goto LABEL_72;
      if (v40 >= v7 + a4)
        v16 = v7 + a4;
      else
        v16 = v40;
      v17 = v16 - v7;
      if (v16 < v7)
        goto LABEL_73;
      if (v7 < 0)
        goto LABEL_74;
      v43 = result;
      v18 = v6;
      sub_21C45950C();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_bridgeObjectRelease();
        v19 = MEMORY[0x24BEE4AF8];
      }
      v20 = *(_QWORD *)(v19 + 16);
      swift_release();
      if (v20 == v17)
      {
        v21 = (_QWORD *)swift_dynamicCastClass();
        v6 = v18;
        v13 = a2;
        if (!v21)
        {
          swift_bridgeObjectRelease();
          v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v6 = v18;
        v13 = a2;
        if (v16 != v7)
        {
          if (v17 < 1)
          {
            if (v17 < 0)
              goto LABEL_78;
          }
          else
          {
            sub_21C3E344C(&qword_25527B740);
            v21 = (_QWORD *)swift_allocObject();
            v24 = j__malloc_size(v21);
            v21[2] = v17;
            v21[3] = 2 * ((uint64_t)(v24 - 32) / 24);
          }
          v25 = a5 + 32 + 24 * v7;
          if (v25 < (unint64_t)&v21[3 * v17 + 4] && (unint64_t)(v21 + 4) < v25 + 24 * v17)
            goto LABEL_78;
          sub_21C3E344C(&qword_25527B728);
          swift_arrayInitWithCopy();
        }
      }
      swift_bridgeObjectRelease();
      result = v43;
      v23 = *(_QWORD *)(v43 + 16);
      v22 = *(_QWORD *)(v43 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_21C3FD55C(v22 > 1, v23 + 1, 1);
        v13 = a2;
        result = v43;
      }
      *(_QWORD *)(result + 16) = v23 + 1;
      *(_QWORD *)(result + 8 * v23 + 32) = v21;
      v7 = v15;
      if (!--v8)
        goto LABEL_41;
    }
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
  }
  else
  {
    v15 = v7;
    v13 = a2;
LABEL_41:
    v26 = v15 <= v13;
    if (v6 > 0)
      v26 = v15 >= v13;
    if (v26)
      return result;
    while (1)
    {
      v27 = __OFADD__(v15, v6) ? ((v15 + v6) >> 63) ^ 0x8000000000000000 : v15 + v6;
      if (__OFADD__(v15, a4))
        break;
      if (*(_QWORD *)(a5 + 16) >= v15 + a4)
        v28 = v15 + a4;
      else
        v28 = *(_QWORD *)(a5 + 16);
      v29 = v28 - v15;
      if (v28 < v15)
        goto LABEL_76;
      if (v15 < 0)
        goto LABEL_77;
      v30 = result;
      sub_21C45950C();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_bridgeObjectRelease();
        v31 = MEMORY[0x24BEE4AF8];
      }
      v32 = *(_QWORD *)(v31 + 16);
      swift_release();
      if (v32 == v29)
      {
        v33 = (_QWORD *)swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (v28 != v15)
        {
          if (v29 < 1)
          {
            if (v29 < 0)
              goto LABEL_78;
          }
          else
          {
            sub_21C3E344C(&qword_25527B740);
            v33 = (_QWORD *)swift_allocObject();
            v38 = j__malloc_size(v33);
            v33[2] = v29;
            v33[3] = 2 * ((uint64_t)(v38 - 32) / 24);
          }
          v39 = a5 + 32 + 24 * v15;
          if (v39 < (unint64_t)&v33[3 * v29 + 4] && (unint64_t)(v33 + 4) < v39 + 24 * v29)
            goto LABEL_78;
          sub_21C3E344C(&qword_25527B728);
          swift_arrayInitWithCopy();
        }
      }
      swift_bridgeObjectRelease();
      result = v30;
      v45 = v30;
      v35 = *(_QWORD *)(v30 + 16);
      v34 = *(_QWORD *)(v30 + 24);
      v36 = a2;
      if (v35 >= v34 >> 1)
      {
        sub_21C3FD55C(v34 > 1, v35 + 1, 1);
        v36 = a2;
        result = v45;
      }
      *(_QWORD *)(result + 16) = v35 + 1;
      *(_QWORD *)(result + 8 * v35 + 32) = v33;
      v37 = v27 <= v36;
      if (v6 > 0)
        v37 = v27 >= v36;
      v15 = v27;
      if (v37)
        return result;
    }
  }
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = sub_21C459464();
  __break(1u);
  return result;
}

uint64_t sub_21C445EFC(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  v4 = a2 + 16;
  v5 = a1 + 16;
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  v9 = v3;
  v8(v4, v5, v7);
  return a2;
}

void sub_21C445F70()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C4457C8 }
}

uint64_t sub_21C446030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527B718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21C446078(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527B718);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21C4460B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_21C4460C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C445138 }
}

void sub_21C44618C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444EA4 }
}

void sub_21C446250()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444C10 }
}

uint64_t sub_21C446314()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  sub_21C3E2754(v0 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_21C446370()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_21C403880;
  __asm { BR              X9; sub_21C444908 }
}

id sub_21C446430@<X0>(void **a1@<X1>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  return v2;
}

uint64_t sub_21C44645C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  sub_21C3E2754(v0 + 56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21C4464B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = v1 + 40;
  v10 = *(_OWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 96);
  v9 = *(_OWORD *)(v1 + 128);
  v6 = *(_DWORD *)(v1 + 144);
  v7 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_21C403880;
  *(_QWORD *)(v7 + 104) = v4;
  *(_DWORD *)(v7 + 36) = v6;
  *(_OWORD *)(v7 + 88) = v9;
  *(_OWORD *)(v7 + 72) = v10;
  *(_OWORD *)(v7 + 56) = v11;
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = v5;
  return swift_task_switch();
}

uint64_t CommonLibraryAssetInfoEmbedding.author.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 44)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t type metadata accessor for CommonLibraryAssetInfo()
{
  uint64_t result;

  result = qword_25527B848;
  if (!qword_25527B848)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C44666C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CommonLibraryAssetInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CommonLibraryAssetInfoEmbedding.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 48)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 52)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.dateFinished.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_21C415EDC((uint64_t)&v8[*(int *)(v6 + 56)], a3, &qword_254078EC0);
  return sub_21C44666C((uint64_t)v8);
}

uint64_t CommonLibraryAssetInfoEmbedding.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 60)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.filePath.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 64)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.finishedDateKind.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  LOBYTE(a2) = v8[*(int *)(v6 + 68)];
  result = sub_21C44666C((uint64_t)v8);
  *a3 = a2;
  return result;
}

uint64_t CommonLibraryAssetInfoEmbedding.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 76)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isDownloading.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 80)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 84)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isFinished.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 88)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isLocal.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 92)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isManaged.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 96)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 100)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 104)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 108)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 112)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = v6[*(int *)(v4 + 116)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.language.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 120)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.lastEngagedDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_21C415EDC((uint64_t)&v8[*(int *)(v6 + 124)], a3, &qword_254078EC0);
  return sub_21C44666C((uint64_t)v8);
}

uint64_t CommonLibraryAssetInfoEmbedding.rating.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 128)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

double CommonLibraryAssetInfoEmbedding.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(double *)&v6[*(int *)(v4 + 132)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.releaseDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_21C415EDC((uint64_t)&v8[*(int *)(v6 + 136)], a3, &qword_254078EC0);
  return sub_21C44666C((uint64_t)v8);
}

uint64_t CommonLibraryAssetInfoEmbedding.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 140)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 144)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 148)];
  sub_21C44666C((uint64_t)v6);
  return v7;
}

unint64_t CommonLibraryAssetInfoEmbedding.versionNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = &v6[*(int *)(v4 + 152)];
  v8 = *(unsigned int *)v7;
  v9 = v7[4];
  sub_21C44666C((uint64_t)v6);
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t CommonLibraryAssetInfoEmbedding.assetLogID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *v6;
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.collectionMemberships.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *((_QWORD *)v6 + 2);
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.id.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *((_QWORD *)v6 + 3);
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.genreNames.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *(_QWORD *)&v6[*(int *)(v4 + 72)];
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.sortTitle.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *((_QWORD *)v6 + 5);
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.storeID.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *((_QWORD *)v6 + 7);
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.title.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  v7 = *((_QWORD *)v6 + 9);
  swift_bridgeObjectRetain();
  sub_21C44666C((uint64_t)v6);
  return v7;
}

uint64_t CommonLibraryAssetInfoEmbedding.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v6 = type metadata accessor for CommonLibraryAssetInfo();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  sub_21C415EDC((uint64_t)&v8[*(int *)(v6 + 40)], a3, &qword_25527A2D0);
  return sub_21C44666C((uint64_t)v8);
}

uint64_t sub_21C447B6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 56), a1, &qword_254078EC0);
}

uint64_t sub_21C447BA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CommonLibraryAssetInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 68));
  return result;
}

uint64_t sub_21C447BD8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 76));
}

uint64_t sub_21C447BF8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 80));
}

uint64_t sub_21C447C18()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 84));
}

uint64_t sub_21C447C38()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 88));
}

uint64_t sub_21C447C58()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 92));
}

uint64_t sub_21C447C78()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 96));
}

uint64_t sub_21C447C98()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 100));
}

uint64_t sub_21C447CB8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 104));
}

uint64_t sub_21C447CD8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 108));
}

uint64_t sub_21C447CF8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 112));
}

uint64_t sub_21C447D18()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 116));
}

uint64_t sub_21C447D38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 124), a1, &qword_254078EC0);
}

double sub_21C447D74()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 132));
}

uint64_t sub_21C447D94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 136), a1, &qword_254078EC0);
}

uint64_t sub_21C447DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 40), a1, &qword_25527A2D0);
}

uint64_t LibraryAssetInfo.enriched(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _BYTE v9[40];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  sub_21C3E95B0(a1, (uint64_t)v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 224))(v9, a2, a3);
}

uint64_t CommonLibraryAssetInfo.assetLogID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.collectionMemberships.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibraryAssetInfo.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.sortTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.storeID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 40), a1, &qword_25527A2D0);
}

uint64_t CommonLibraryAssetInfo.author.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.coverAspectRatio.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 48));
}

uint64_t CommonLibraryAssetInfo.coverURLString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.dateFinished.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 56), a1, &qword_254078EC0);
}

uint64_t CommonLibraryAssetInfo.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.filePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.finishedDateKind.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CommonLibraryAssetInfo();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 68));
  return result;
}

uint64_t CommonLibraryAssetInfo.genreNames.getter()
{
  type metadata accessor for CommonLibraryAssetInfo();
  return swift_bridgeObjectRetain();
}

uint64_t CommonLibraryAssetInfo.hasSpecifiedFinishedDate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 76));
}

uint64_t CommonLibraryAssetInfo.isDownloading.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 80));
}

uint64_t CommonLibraryAssetInfo.isExplicit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 84));
}

uint64_t CommonLibraryAssetInfo.isFinished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 88));
}

uint64_t CommonLibraryAssetInfo.isLocal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 92));
}

uint64_t CommonLibraryAssetInfo.isManaged.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 96));
}

uint64_t CommonLibraryAssetInfo.isPartOfSeries.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 100));
}

uint64_t CommonLibraryAssetInfo.isPreorder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 104));
}

uint64_t CommonLibraryAssetInfo.isPurchased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 108));
}

uint64_t CommonLibraryAssetInfo.isInSamples.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 112));
}

uint64_t CommonLibraryAssetInfo.isSideloaded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 116));
}

uint64_t CommonLibraryAssetInfo.language.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 120));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.lastEngagedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 124), a1, &qword_254078EC0);
}

uint64_t CommonLibraryAssetInfo.rating.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 128));
}

double CommonLibraryAssetInfo.readingProgress.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 132));
}

uint64_t CommonLibraryAssetInfo.releaseDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CommonLibraryAssetInfo();
  return sub_21C415EDC(v1 + *(int *)(v3 + 136), a1, &qword_254078EC0);
}

uint64_t CommonLibraryAssetInfo.sequenceLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 140));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommonLibraryAssetInfo.sequenceNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 144));
}

double CommonLibraryAssetInfo.seriesInfo.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t _s14BookFoundation14LibraryPDFInfoV10seriesInfoAA0c6SeriesF0_pSgvs_0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527A2A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*CommonLibraryAssetInfo.seriesInfo.modify(_QWORD *a1))(uint64_t *a1)
{
  _OWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  return sub_21C4484B8;
}

void sub_21C4484B8(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  _s14BookFoundation14LibraryPDFInfoV10seriesInfoAA0c6SeriesF0_pSgvs_0(*a1);
  free(v1);
}

uint64_t CommonLibraryAssetInfo.seriesSortKey.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 148));
}

unint64_t CommonLibraryAssetInfo.versionNumber.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 152));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t CommonLibraryAssetInfo.init(assetLogID:collectionMemberships:id:sortTitle:storeID:title:url:author:coverAspectRatio:coverURLString:dateFinished:description:filePath:finishedDateKind:genreNames:hasSpecifiedFinishedDate:isDownloading:isExplicit:isFinished:isInSamples:isLocal:isManaged:isPartOfSeries:isPreorder:isPurchased:isSideloaded:language:lastEngagedDate:rating:readingProgress:releaseDate:sequenceLabel:sequenceNumber:seriesSortKey:versionNumber:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,char a27,char a28,char a29,char a30,char a31,char a32,char a33,char a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,char a49,uint64_t a50,char a51,int a52,int a53,char a54)
{
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t result;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  v69 = *a25;
  *(_OWORD *)(a9 + 64) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  v56 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  sub_21C4488BC(a13, a9 + v56[10], &qword_25527A2D0);
  v57 = (_QWORD *)(a9 + v56[11]);
  *v57 = a14;
  v57[1] = a15;
  v58 = a9 + v56[12];
  *(_QWORD *)v58 = a16;
  *(_BYTE *)(v58 + 8) = a17 & 1;
  v59 = (_QWORD *)(a9 + v56[13]);
  *v59 = a18;
  v59[1] = a19;
  sub_21C4488BC(a20, a9 + v56[14], &qword_254078EC0);
  v60 = (_QWORD *)(a9 + v56[15]);
  *v60 = a21;
  v60[1] = a22;
  v61 = (_QWORD *)(a9 + v56[16]);
  *v61 = a23;
  v61[1] = a24;
  *(_BYTE *)(a9 + v56[17]) = v69;
  *(_QWORD *)(a9 + v56[18]) = a26;
  *(_BYTE *)(a9 + v56[19]) = a27;
  *(_BYTE *)(a9 + v56[20]) = a28;
  *(_BYTE *)(a9 + v56[21]) = a29;
  *(_BYTE *)(a9 + v56[22]) = a30;
  *(_BYTE *)(a9 + v56[28]) = a31;
  *(_BYTE *)(a9 + v56[23]) = a32;
  *(_BYTE *)(a9 + v56[24]) = a33;
  *(_BYTE *)(a9 + v56[25]) = a34;
  *(_BYTE *)(a9 + v56[26]) = a35;
  *(_BYTE *)(a9 + v56[27]) = a36;
  *(_BYTE *)(a9 + v56[29]) = a37;
  v62 = (_QWORD *)(a9 + v56[30]);
  *v62 = a38;
  v62[1] = a39;
  sub_21C4488BC(a40, a9 + v56[31], &qword_254078EC0);
  v63 = a9 + v56[32];
  *(_QWORD *)v63 = a41;
  *(_BYTE *)(v63 + 8) = a42 & 1;
  *(double *)(a9 + v56[33]) = a10;
  result = sub_21C4488BC(a43, a9 + v56[34], &qword_254078EC0);
  v65 = (_QWORD *)(a9 + v56[35]);
  *v65 = a44;
  v65[1] = a45;
  v66 = a9 + v56[36];
  *(_QWORD *)v66 = a46;
  *(_QWORD *)(v66 + 8) = a47;
  *(_DWORD *)(v66 + 16) = a48;
  *(_BYTE *)(v66 + 20) = a49 & 1;
  v67 = a9 + v56[37];
  *(_QWORD *)v67 = a50;
  *(_BYTE *)(v67 + 8) = a51 & 1;
  v68 = a9 + v56[38];
  *(_DWORD *)v68 = a53;
  *(_BYTE *)(v68 + 4) = a54 & 1;
  return result;
}

uint64_t sub_21C4488BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_21C3E344C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_21C448900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C448934(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48));
}

uint64_t sub_21C448948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 52));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C44897C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C415EDC(v2 + *(int *)(a1 + 56), a2, &qword_254078EC0);
}

uint64_t sub_21C4489A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 60));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C4489D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 64));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C448A0C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 68));
  return result;
}

uint64_t sub_21C448A1C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 76));
}

uint64_t sub_21C448A28(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 80));
}

uint64_t sub_21C448A34(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 84));
}

uint64_t sub_21C448A40(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 88));
}

uint64_t sub_21C448A4C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 92));
}

uint64_t sub_21C448A58(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 96));
}

uint64_t sub_21C448A64(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 100));
}

uint64_t sub_21C448A70(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 104));
}

uint64_t sub_21C448A7C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_21C448A88(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 112));
}

uint64_t sub_21C448A94(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 116));
}

uint64_t sub_21C448AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 120));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C448AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C415EDC(v2 + *(int *)(a1 + 124), a2, &qword_254078EC0);
}

uint64_t sub_21C448AFC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 128));
}

double sub_21C448B10(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 132));
}

uint64_t sub_21C448B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C415EDC(v2 + *(int *)(a1 + 136), a2, &qword_254078EC0);
}

uint64_t sub_21C448B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 140));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_21C448B78(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 144));
}

double sub_21C448BA4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void (*sub_21C448BB8(_QWORD *a1))(uint64_t *)
{
  _OWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  return sub_21C44AE64;
}

uint64_t sub_21C448BF8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 148));
}

unint64_t sub_21C448C0C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 152)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 152) + 4) << 32);
}

uint64_t sub_21C448C34(uint64_t a1)
{
  uint64_t result;

  result = sub_21C448D04(&qword_25527B7D8, (uint64_t)&protocol conformance descriptor for CommonLibraryAssetInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C448C68()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C448C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_21C415EDC(v2 + *(int *)(a1 + 40), a2, &qword_25527A2D0);
}

uint64_t sub_21C448C9C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C448D04(&qword_25527B7E0, (uint64_t)&protocol conformance descriptor for CommonLibraryAssetInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C448CD0(uint64_t a1)
{
  uint64_t result;

  result = sub_21C448D04(&qword_25527B7E8, (uint64_t)&protocol conformance descriptor for CommonLibraryAssetInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C448D04(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CommonLibraryAssetInfo();
    result = MEMORY[0x22077C1E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double sub_21C448D48@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t dispatch thunk of LibraryAssetInfo.author.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LibraryAssetInfo.coverAspectRatio.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LibraryAssetInfo.coverURLString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LibraryAssetInfo.dateFinished.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LibraryAssetInfo.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LibraryAssetInfo.filePath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LibraryAssetInfo.finishedDateKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LibraryAssetInfo.hasSpecifiedFinishedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isDownloading.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isExplicit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isFinished.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isLocal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isManaged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPartOfSeries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPreorder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isPurchased.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isInSamples.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of LibraryAssetInfo.isSideloaded.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of LibraryAssetInfo.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of LibraryAssetInfo.lastEngagedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of LibraryAssetInfo.rating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of LibraryAssetInfo.readingProgress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of LibraryAssetInfo.releaseDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of LibraryAssetInfo.sequenceLabel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of LibraryAssetInfo.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesInfo.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 232))();
}

uint64_t dispatch thunk of LibraryAssetInfo.seriesSortKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of LibraryAssetInfo.versionNumber.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = (*(uint64_t (**)(void))(a2 + 248))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of CommonLibraryAssetInfoEmbedding.commonInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

_QWORD *initializeBufferWithCopyOfBuffer for CommonLibraryAssetInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a3[10];
    v81 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    a1[10] = a2[10];
    v13 = sub_21C458BF4();
    v79 = *(_QWORD *)(v13 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v80(v81, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v81, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v81, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v13);
    }
    v16 = a3[11];
    v17 = a3[12];
    v18 = (_QWORD *)((char *)v4 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (char *)v4 + v17;
    v22 = (char *)a2 + v17;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = a3[13];
    v24 = a3[14];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (char *)v4 + v24;
    v29 = (char *)a2 + v24;
    v30 = sub_21C458C60();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = v32;
    if (v32(v29, 1, v30))
    {
      v33 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = a3[15];
    v35 = a3[16];
    v36 = (_QWORD *)((char *)v4 + v34);
    v37 = (_QWORD *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = (_QWORD *)((char *)v4 + v35);
    v40 = (_QWORD *)((char *)a2 + v35);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = a3[18];
    *((_BYTE *)v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    *(_QWORD *)((char *)v4 + v42) = *(_QWORD *)((char *)a2 + v42);
    v43 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    *((_BYTE *)v4 + v43) = *((_BYTE *)a2 + v43);
    v44 = a3[22];
    *((_BYTE *)v4 + a3[21]) = *((_BYTE *)a2 + a3[21]);
    *((_BYTE *)v4 + v44) = *((_BYTE *)a2 + v44);
    v45 = a3[24];
    *((_BYTE *)v4 + a3[23]) = *((_BYTE *)a2 + a3[23]);
    *((_BYTE *)v4 + v45) = *((_BYTE *)a2 + v45);
    v46 = a3[26];
    *((_BYTE *)v4 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    *((_BYTE *)v4 + v46) = *((_BYTE *)a2 + v46);
    v47 = a3[28];
    *((_BYTE *)v4 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    *((_BYTE *)v4 + v47) = *((_BYTE *)a2 + v47);
    v48 = a3[30];
    *((_BYTE *)v4 + a3[29]) = *((_BYTE *)a2 + a3[29]);
    v49 = (_QWORD *)((char *)v4 + v48);
    v50 = (_QWORD *)((char *)a2 + v48);
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = a3[31];
    v53 = (char *)v4 + v52;
    v54 = (char *)a2 + v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dsta(v54, 1, v30))
    {
      v55 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v53, v54, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v53, 0, 1, v30);
    }
    v56 = a3[32];
    v57 = a3[33];
    v58 = (char *)v4 + v56;
    v59 = (char *)a2 + v56;
    *(_QWORD *)v58 = *(_QWORD *)v59;
    v60 = *(_QWORD *)((char *)a2 + v57);
    v58[8] = v59[8];
    *(_QWORD *)((char *)v4 + v57) = v60;
    v61 = a3[34];
    v62 = (char *)v4 + v61;
    v63 = (char *)a2 + v61;
    if (__dsta((char *)a2 + v61, 1, v30))
    {
      v64 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v62, v63, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v62, 0, 1, v30);
    }
    v65 = a3[35];
    v66 = a3[36];
    v67 = (_QWORD *)((char *)v4 + v65);
    v68 = (_QWORD *)((char *)a2 + v65);
    v69 = v68[1];
    *v67 = *v68;
    v67[1] = v69;
    v70 = (char *)v4 + v66;
    v71 = (char *)a2 + v66;
    *(_OWORD *)v70 = *(_OWORD *)v71;
    *(_QWORD *)(v70 + 13) = *(_QWORD *)(v71 + 13);
    v72 = a3[37];
    v73 = a3[38];
    v74 = (char *)v4 + v72;
    v75 = (char *)a2 + v72;
    *(_QWORD *)v74 = *(_QWORD *)v75;
    v74[8] = v75[8];
    v76 = (char *)v4 + v73;
    v77 = (char *)a2 + v73;
    *(_DWORD *)v76 = *(_DWORD *)v77;
    v76[4] = v77[4];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CommonLibraryAssetInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  v5 = sub_21C458BF4();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + a2[14];
  v8 = sub_21C458C60();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + a2[31];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  v12 = a1 + a2[34];
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CommonLibraryAssetInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v77;
  unsigned int (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a3[10];
  v79 = (char *)a2 + v11;
  __dst = (char *)a1 + v11;
  a1[10] = a2[10];
  v12 = sub_21C458BF4();
  v77 = *(_QWORD *)(v12 - 8);
  v78 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v78(v79, 1, v12))
  {
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(__dst, v79, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(__dst, v79, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v12);
  }
  v14 = a3[11];
  v15 = a3[12];
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = (_QWORD *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (char *)a1 + v15;
  v20 = (char *)a2 + v15;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = a3[13];
  v22 = a3[14];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (char *)a1 + v22;
  v27 = (char *)a2 + v22;
  v28 = sub_21C458C60();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = v30;
  if (v30(v27, 1, v28))
  {
    v31 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = a3[15];
  v33 = a3[16];
  v34 = (_QWORD *)((char *)a1 + v32);
  v35 = (_QWORD *)((char *)a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = (_QWORD *)((char *)a1 + v33);
  v38 = (_QWORD *)((char *)a2 + v33);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a3[18];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + v40) = *(_QWORD *)((char *)a2 + v40);
  v41 = a3[20];
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  *((_BYTE *)a1 + v41) = *((_BYTE *)a2 + v41);
  v42 = a3[22];
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  *((_BYTE *)a1 + v42) = *((_BYTE *)a2 + v42);
  v43 = a3[24];
  *((_BYTE *)a1 + a3[23]) = *((_BYTE *)a2 + a3[23]);
  *((_BYTE *)a1 + v43) = *((_BYTE *)a2 + v43);
  v44 = a3[26];
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  *((_BYTE *)a1 + v44) = *((_BYTE *)a2 + v44);
  v45 = a3[28];
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *((_BYTE *)a1 + v45) = *((_BYTE *)a2 + v45);
  v46 = a3[30];
  *((_BYTE *)a1 + a3[29]) = *((_BYTE *)a2 + a3[29]);
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v49 = v48[1];
  *v47 = *v48;
  v47[1] = v49;
  v50 = a3[31];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dsta(v52, 1, v28))
  {
    v53 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v51, v52, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v51, 0, 1, v28);
  }
  v54 = a3[32];
  v55 = a3[33];
  v56 = (char *)a1 + v54;
  v57 = (char *)a2 + v54;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v58 = *(_QWORD *)((char *)a2 + v55);
  v56[8] = v57[8];
  *(_QWORD *)((char *)a1 + v55) = v58;
  v59 = a3[34];
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  if (__dsta((char *)a2 + v59, 1, v28))
  {
    v62 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v60, v61, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v60, 0, 1, v28);
  }
  v63 = a3[35];
  v64 = a3[36];
  v65 = (_QWORD *)((char *)a1 + v63);
  v66 = (_QWORD *)((char *)a2 + v63);
  v67 = v66[1];
  *v65 = *v66;
  v65[1] = v67;
  v68 = (char *)a1 + v64;
  v69 = (char *)a2 + v64;
  *(_OWORD *)v68 = *(_OWORD *)v69;
  *(_QWORD *)(v68 + 13) = *(_QWORD *)(v69 + 13);
  v70 = a3[37];
  v71 = a3[38];
  v72 = (char *)a1 + v70;
  v73 = (char *)a2 + v70;
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
  v74 = (char *)a1 + v71;
  v75 = (char *)a2 + v71;
  *(_DWORD *)v74 = *(_DWORD *)v75;
  v74[4] = v75[4];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CommonLibraryAssetInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[10];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[11];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[12];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = a3[13];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[14];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_21C458C60();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    v33 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_13:
  v34 = a3[15];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = (_QWORD *)((char *)a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[16];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  *((_BYTE *)a1 + a3[23]) = *((_BYTE *)a2 + a3[23]);
  *((_BYTE *)a1 + a3[24]) = *((_BYTE *)a2 + a3[24]);
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  *((_BYTE *)a1 + a3[26]) = *((_BYTE *)a2 + a3[26]);
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *((_BYTE *)a1 + a3[28]) = *((_BYTE *)a2 + a3[28]);
  *((_BYTE *)a1 + a3[29]) = *((_BYTE *)a2 + a3[29]);
  v40 = a3[30];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  *v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = a3[31];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = v30((char *)a1 + v43, 1, v28);
  v47 = v30(v45, 1, v28);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v44, v45, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v44, 0, 1, v28);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v28);
LABEL_18:
    v48 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v44, v45, v28);
LABEL_19:
  v49 = a3[32];
  v50 = (char *)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(_QWORD *)v51;
  v50[8] = v51[8];
  *(_QWORD *)v50 = v52;
  *(_QWORD *)((char *)a1 + a3[33]) = *(_QWORD *)((char *)a2 + a3[33]);
  v53 = a3[34];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = v30((char *)a1 + v53, 1, v28);
  v57 = v30(v55, 1, v28);
  if (!v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v54, v55, v28);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v54, v28);
    goto LABEL_24;
  }
  if (v57)
  {
LABEL_24:
    v58 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v54, v55, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v54, 0, 1, v28);
LABEL_25:
  v59 = a3[35];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  *v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = a3[36];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v65 = *(_OWORD *)v64;
  *(_QWORD *)(v63 + 13) = *(_QWORD *)(v64 + 13);
  *(_OWORD *)v63 = v65;
  v66 = a3[37];
  v67 = (char *)a1 + v66;
  v68 = (char *)a2 + v66;
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
  v70 = a3[38];
  v71 = (char *)a1 + v70;
  v72 = (char *)a2 + v70;
  v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)v71 = v73;
  return a1;
}

uint64_t initializeWithTake for CommonLibraryAssetInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_21C458C60();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v17, 1, v18))
  {
    v21 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v22 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  v23 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v24 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = a3[26];
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  v28 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[30];
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  v30 = a3[31];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  if (v20((const void *)(a2 + v30), 1, v18))
  {
    v33 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v31, v32, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v18);
  }
  v34 = a3[32];
  v35 = a3[33];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v38 = *(_QWORD *)(a2 + v35);
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)(a1 + v35) = v38;
  v39 = a3[34];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  if (v20((const void *)(a2 + v39), 1, v18))
  {
    v42 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v40, v41, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v40, 0, 1, v18);
  }
  v43 = a3[36];
  *(_OWORD *)(a1 + a3[35]) = *(_OWORD *)(a2 + a3[35]);
  v44 = a1 + v43;
  v45 = a2 + v43;
  *(_QWORD *)(v44 + 13) = *(_QWORD *)(v45 + 13);
  *(_OWORD *)v44 = *(_OWORD *)v45;
  v46 = a3[37];
  v47 = a3[38];
  v48 = a1 + v46;
  v49 = a2 + v46;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v50 = a1 + v47;
  v51 = a2 + v47;
  *(_DWORD *)v50 = *(_DWORD *)v51;
  *(_BYTE *)(v50 + 4) = *(_BYTE *)(v51 + 4);
  return a1;
}

_QWORD *assignWithTake for CommonLibraryAssetInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[8];
  a1[7] = a2[7];
  a1[8] = v9;
  swift_bridgeObjectRelease();
  v10 = a2[10];
  a1[9] = a2[9];
  a1[10] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[10];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_21C458BF4();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = a3[11];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[12];
  v26 = a3[13];
  v27 = (char *)a1 + v25;
  v28 = (char *)a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = (_QWORD *)((char *)a1 + v26);
  v30 = (_QWORD *)((char *)a2 + v26);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = a3[14];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_21C458C60();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_12:
    v41 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_13:
  v42 = a3[15];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  v47 = a3[16];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v52 = a3[18];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + v52) = *(_QWORD *)((char *)a2 + v52);
  swift_bridgeObjectRelease();
  v53 = a3[20];
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  *((_BYTE *)a1 + v53) = *((_BYTE *)a2 + v53);
  v54 = a3[22];
  *((_BYTE *)a1 + a3[21]) = *((_BYTE *)a2 + a3[21]);
  *((_BYTE *)a1 + v54) = *((_BYTE *)a2 + v54);
  v55 = a3[24];
  *((_BYTE *)a1 + a3[23]) = *((_BYTE *)a2 + a3[23]);
  *((_BYTE *)a1 + v55) = *((_BYTE *)a2 + v55);
  v56 = a3[26];
  *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
  *((_BYTE *)a1 + v56) = *((_BYTE *)a2 + v56);
  v57 = a3[28];
  *((_BYTE *)a1 + a3[27]) = *((_BYTE *)a2 + a3[27]);
  *((_BYTE *)a1 + v57) = *((_BYTE *)a2 + v57);
  v58 = a3[30];
  *((_BYTE *)a1 + a3[29]) = *((_BYTE *)a2 + a3[29]);
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  v62 = *v60;
  v61 = v60[1];
  *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  v63 = a3[31];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = v38((char *)a1 + v63, 1, v36);
  v67 = v38(v65, 1, v36);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v64, v65, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v64, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v64, v36);
LABEL_18:
    v68 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v64, v65, v36);
LABEL_19:
  v69 = a3[32];
  v70 = a3[33];
  v71 = (char *)a1 + v69;
  v72 = (char *)a2 + v69;
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *(_QWORD *)((char *)a2 + v70);
  v71[8] = v72[8];
  *(_QWORD *)((char *)a1 + v70) = v73;
  v74 = a3[34];
  v75 = (char *)a1 + v74;
  v76 = (char *)a2 + v74;
  v77 = v38((char *)a1 + v74, 1, v36);
  v78 = v38(v76, 1, v36);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v75, v76, v36);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v75, v36);
    goto LABEL_24;
  }
  if (v78)
  {
LABEL_24:
    v79 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v75, v76, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v75, 0, 1, v36);
LABEL_25:
  v80 = a3[35];
  v81 = (_QWORD *)((char *)a1 + v80);
  v82 = (_QWORD *)((char *)a2 + v80);
  v84 = *v82;
  v83 = v82[1];
  *v81 = v84;
  v81[1] = v83;
  swift_bridgeObjectRelease();
  v85 = a3[36];
  v86 = a3[37];
  v87 = (char *)a1 + v85;
  v88 = (char *)a2 + v85;
  *(_OWORD *)v87 = *(_OWORD *)v88;
  *(_QWORD *)(v87 + 13) = *(_QWORD *)(v88 + 13);
  v89 = (char *)a1 + v86;
  v90 = (char *)a2 + v86;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  v89[8] = v90[8];
  v91 = a3[38];
  v92 = (char *)a1 + v91;
  v93 = (char *)a2 + v91;
  *(_DWORD *)v92 = *(_DWORD *)v93;
  v92[4] = v93[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonLibraryAssetInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C44A8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_21C3E344C(&qword_25527A2D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      v10 = sub_21C3E344C(&qword_254078EC0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CommonLibraryAssetInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C44A984(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_21C3E344C(&qword_25527A2D0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      v10 = sub_21C3E344C(&qword_254078EC0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 56);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_21C44AA28()
{
  unint64_t v0;
  unint64_t v1;

  sub_21C44AB68(319, (unint64_t *)&qword_25527AFA0, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    sub_21C44AB68(319, qword_25527B858, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_21C44AB68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_21C459278();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_21C44ABB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44ABF0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 48));
}

uint64_t sub_21C44AC18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44AC54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44AC90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44ACCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 120));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44AD08()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 128));
}

uint64_t sub_21C44AD30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 140));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_21C44AD6C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 144));
}

uint64_t sub_21C44ADAC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 148));
}

unint64_t sub_21C44ADD4()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for CommonLibraryAssetInfo() + 152));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t sub_21C44AE10()
{
  type metadata accessor for CommonLibraryAssetInfo();
  return swift_bridgeObjectRetain();
}

uint64_t MAudiobook.narrator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C44AEE8();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_21C44AEE8()
{
  unint64_t result;

  result = qword_25527B910;
  if (!qword_25527B910)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E3F4, &type metadata for MAudiobook.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527B910);
  }
  return result;
}

uint64_t sub_21C44AF2C()
{
  return sub_21C408AD4();
}

uint64_t sub_21C44AF44()
{
  return sub_21C458EC4();
}

uint64_t sub_21C44AF5C()
{
  return sub_21C408B40();
}

uint64_t sub_21C44AF74@<X0>(BOOL *a1@<X8>)
{
  return sub_21C408B94(a1);
}

void sub_21C44AF80(_QWORD *a1@<X8>)
{
  *a1 = 0x726F74617272616ELL;
  a1[1] = 0xE800000000000000;
}

void *MAudiobook.__allocating_init(with:config:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  uint64_t v6;
  unsigned __int8 v8[8];
  uint64_t v9;

  v5 = objc_allocWithZone(v2);
  v6 = *(_QWORD *)(a2 + 8);
  v8[0] = *(_BYTE *)a2;
  v9 = v6;
  return MAsset.init(with:config:)(a1, v8);
}

void *MAudiobook.init(with:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v4[8];
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 8);
  v4[0] = *(_BYTE *)a2;
  v5 = v2;
  return MAsset.init(with:config:)(a1, v4);
}

void static MAudiobook.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_21C44B02C()
{
  return sub_21C408AD4();
}

uint64_t sub_21C44B048()
{
  return sub_21C458EC4();
}

uint64_t sub_21C44B064()
{
  return sub_21C408B40();
}

uint64_t sub_21C44B080@<X0>(BOOL *a1@<X8>)
{
  return sub_21C408B94(a1);
}

void sub_21C44B08C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E49736569726573;
  a1[1] = 0xEA00000000006F66;
}

uint64_t sub_21C44B0AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  swift_getObjectType();
  v0 = MAsset.seriesResource.getter();
  if (v0)
  {
    v1 = (void *)v0;
    sub_21C44F8CC(3);
    v3 = v2;

  }
  else
  {
    v3 = 0;
  }
  v4 = sub_21C3E344C(&qword_25527A088);
  sub_21C44B410();
  sub_21C4340FC(v3, v4, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  result = v7;
  if (!v7)
  {
    sub_21C44F8CC(3);
    sub_21C4340FC(v6, v4, (uint64_t)&v7);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

unint64_t MAudiobook.seriesName.getter()
{
  unint64_t result;
  unint64_t v1;
  char *v2;
  uint64_t v3;

  if (!sub_21C409458())
    return 0;
  result = sub_21C44F71C();
  v1 = result;
  if (!result)
  {
    swift_release();
    return v1;
  }
  if (!(result >> 62))
  {
    if (*(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  result = sub_21C459434();
  if (!result)
    goto LABEL_11;
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x22077BA00](0, v1);
    swift_bridgeObjectRelease();
    swift_release();
    v1 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14BookFoundation7MSeries_name);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    return v1;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = (char *)*(id *)(v1 + 32);
    swift_bridgeObjectRelease();
    swift_release();
    v1 = *(_QWORD *)&v2[OBJC_IVAR____TtC14BookFoundation7MSeries_name];
    swift_bridgeObjectRetain();

    return v1;
  }
  __break(1u);
  return result;
}

id MAudiobook.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_21C44B370()
{
  return type metadata accessor for MAudiobook();
}

uint64_t type metadata accessor for MAudiobook()
{
  uint64_t result;

  result = qword_25527B940;
  if (!qword_25527B940)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for MAudiobook.Attributes()
{
  return &type metadata for MAudiobook.Attributes;
}

unint64_t sub_21C44B3CC()
{
  unint64_t result;

  result = qword_25527B950;
  if (!qword_25527B950)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E3CC, &type metadata for MAudiobook.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527B950);
  }
  return result;
}

unint64_t sub_21C44B410()
{
  unint64_t result;

  result = qword_25527B958;
  if (!qword_25527B958)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E49C, &type metadata for MAudiobook.Meta);
    atomic_store(result, (unint64_t *)&qword_25527B958);
  }
  return result;
}

uint64_t _s14BookFoundation10MAudiobookC10AttributesOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21C44B494 + 4 * byte_21C45E348[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21C44B4B4 + 4 * byte_21C45E34D[v4]))();
}

_BYTE *sub_21C44B494(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21C44B4B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C44B4BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C44B4C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C44B4CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C44B4D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MAudiobook.Meta()
{
  return &type metadata for MAudiobook.Meta;
}

unint64_t sub_21C44B4F4()
{
  unint64_t result;

  result = qword_25527B960;
  if (!qword_25527B960)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E474, &type metadata for MAudiobook.Meta);
    atomic_store(result, (unint64_t *)&qword_25527B960);
  }
  return result;
}

uint64_t LibraryPDFInfo.commonInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C3F42C4(v1, a1);
}

uint64_t LibraryPDFInfo.commonInfo.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_21C3F4310(a1, v1);
}

uint64_t (*LibraryPDFInfo.commonInfo.modify())()
{
  return nullsub_1;
}

double LibraryPDFInfo.seriesInfo.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void (*LibraryPDFInfo.seriesInfo.modify(_QWORD *a1))(uint64_t *a1)
{
  _OWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  return sub_21C4484B8;
}

uint64_t LibraryPDFInfo.init(commonInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_21C3F4584(a1, a2);
}

uint64_t sub_21C44B5B8(uint64_t a1)
{
  uint64_t result;

  result = sub_21C44B6C4(&qword_25527AC08, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LibraryPDFInfo()
{
  uint64_t result;

  result = qword_25527B9D0;
  if (!qword_25527B9D0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C44B628(uint64_t a1)
{
  uint64_t result;

  result = sub_21C44B6C4(&qword_25527ABD0, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C44B65C(uint64_t a1)
{
  uint64_t result;

  result = sub_21C44B6C4(&qword_25527B968, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C44B690(uint64_t a1)
{
  uint64_t result;

  result = sub_21C44B6C4(&qword_25527B970, (uint64_t)&protocol conformance descriptor for LibraryPDFInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C44B6C4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LibraryPDFInfo();
    result = MEMORY[0x22077C1E0](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double sub_21C44B708@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LibraryPDFInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  char *v73;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    a1[10] = a2[10];
    v12 = *(int *)(v4 + 40);
    v73 = (char *)a2 + v12;
    __dst = (char *)a1 + v12;
    v13 = sub_21C458BF4();
    v71 = *(_QWORD *)(v13 - 8);
    v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72(v73, 1, v13))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(__dst, v73, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(__dst, v73, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v13);
    }
    v16 = v6[11];
    v17 = (_QWORD *)((char *)a1 + v16);
    v18 = (_QWORD *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = v6[12];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v21[8] = v22[8];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v23 = v6[13];
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = v6[14];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_21C458C60();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __dsta = v32;
    if (v32(v29, 1, v30))
    {
      v33 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = v6[15];
    v35 = (_QWORD *)((char *)a1 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v6[16];
    v39 = (_QWORD *)((char *)a1 + v38);
    v40 = (_QWORD *)((char *)a2 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    *((_BYTE *)a1 + v6[17]) = *((_BYTE *)a2 + v6[17]);
    *(_QWORD *)((char *)a1 + v6[18]) = *(_QWORD *)((char *)a2 + v6[18]);
    *((_BYTE *)a1 + v6[19]) = *((_BYTE *)a2 + v6[19]);
    *((_BYTE *)a1 + v6[20]) = *((_BYTE *)a2 + v6[20]);
    *((_BYTE *)a1 + v6[21]) = *((_BYTE *)a2 + v6[21]);
    *((_BYTE *)a1 + v6[22]) = *((_BYTE *)a2 + v6[22]);
    *((_BYTE *)a1 + v6[23]) = *((_BYTE *)a2 + v6[23]);
    *((_BYTE *)a1 + v6[24]) = *((_BYTE *)a2 + v6[24]);
    *((_BYTE *)a1 + v6[25]) = *((_BYTE *)a2 + v6[25]);
    *((_BYTE *)a1 + v6[26]) = *((_BYTE *)a2 + v6[26]);
    *((_BYTE *)a1 + v6[27]) = *((_BYTE *)a2 + v6[27]);
    *((_BYTE *)a1 + v6[28]) = *((_BYTE *)a2 + v6[28]);
    *((_BYTE *)a1 + v6[29]) = *((_BYTE *)a2 + v6[29]);
    v42 = v6[30];
    v43 = (_QWORD *)((char *)a1 + v42);
    v44 = (_QWORD *)((char *)a2 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v6[31];
    v47 = (char *)a1 + v46;
    v48 = (char *)a2 + v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__dsta(v48, 1, v30))
    {
      v49 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v47, v48, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v47, 0, 1, v30);
    }
    v50 = v6[32];
    v51 = (char *)a1 + v50;
    v52 = (char *)a2 + v50;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    *(_QWORD *)((char *)a1 + v6[33]) = *(_QWORD *)((char *)a2 + v6[33]);
    v53 = v6[34];
    v54 = (char *)a1 + v53;
    v55 = (char *)a2 + v53;
    if (__dsta((char *)a2 + v53, 1, v30))
    {
      v56 = sub_21C3E344C(&qword_254078EC0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v54, v55, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v54, 0, 1, v30);
    }
    v57 = v6[35];
    v58 = (_QWORD *)((char *)a1 + v57);
    v59 = (_QWORD *)((char *)a2 + v57);
    v60 = v59[1];
    *v58 = *v59;
    v58[1] = v60;
    v61 = v6[36];
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    *(_QWORD *)(v62 + 13) = *(_QWORD *)(v63 + 13);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    v64 = v6[37];
    v65 = (char *)a1 + v64;
    v66 = (char *)a2 + v64;
    v65[8] = v66[8];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v67 = v6[38];
    v68 = (char *)a1 + v67;
    v69 = (char *)a2 + v67;
    v68[4] = v69[4];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for LibraryPDFInfo(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v3 = a1 + v2[10];
  v4 = sub_21C458BF4();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + v2[14];
  v7 = sub_21C458C60();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + v2[31];
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  v11 = a1 + v2[34];
  if (!v9(v11, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LibraryPDFInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  char *__dst;
  unsigned int (*__dsta)(char *, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = a2[10];
  v9 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v10 = v9[10];
  v70 = (char *)a2 + v10;
  __dst = (char *)a1 + v10;
  v11 = sub_21C458BF4();
  v68 = *(_QWORD *)(v11 - 8);
  v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v69(v70, 1, v11))
  {
    v12 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(__dst, v70, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(__dst, v70, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v11);
  }
  v13 = v9[11];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v9[12];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v18[8] = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = v9[13];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v9[14];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_21C458C60();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __dsta = v29;
  if (v29(v26, 1, v27))
  {
    v30 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v31 = v9[15];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = v9[16];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *((_BYTE *)a1 + v9[17]) = *((_BYTE *)a2 + v9[17]);
  *(_QWORD *)((char *)a1 + v9[18]) = *(_QWORD *)((char *)a2 + v9[18]);
  *((_BYTE *)a1 + v9[19]) = *((_BYTE *)a2 + v9[19]);
  *((_BYTE *)a1 + v9[20]) = *((_BYTE *)a2 + v9[20]);
  *((_BYTE *)a1 + v9[21]) = *((_BYTE *)a2 + v9[21]);
  *((_BYTE *)a1 + v9[22]) = *((_BYTE *)a2 + v9[22]);
  *((_BYTE *)a1 + v9[23]) = *((_BYTE *)a2 + v9[23]);
  *((_BYTE *)a1 + v9[24]) = *((_BYTE *)a2 + v9[24]);
  *((_BYTE *)a1 + v9[25]) = *((_BYTE *)a2 + v9[25]);
  *((_BYTE *)a1 + v9[26]) = *((_BYTE *)a2 + v9[26]);
  *((_BYTE *)a1 + v9[27]) = *((_BYTE *)a2 + v9[27]);
  *((_BYTE *)a1 + v9[28]) = *((_BYTE *)a2 + v9[28]);
  *((_BYTE *)a1 + v9[29]) = *((_BYTE *)a2 + v9[29]);
  v39 = v9[30];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = v9[31];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dsta(v45, 1, v27))
  {
    v46 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v44, v45, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v44, 0, 1, v27);
  }
  v47 = v9[32];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  *(_QWORD *)((char *)a1 + v9[33]) = *(_QWORD *)((char *)a2 + v9[33]);
  v50 = v9[34];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  if (__dsta((char *)a2 + v50, 1, v27))
  {
    v53 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v51, v52, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v51, 0, 1, v27);
  }
  v54 = v9[35];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v58 = v9[36];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  *(_QWORD *)(v59 + 13) = *(_QWORD *)(v60 + 13);
  *(_OWORD *)v59 = *(_OWORD *)v60;
  v61 = v9[37];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v62[8] = v63[8];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v64 = v9[38];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v65[4] = v66[4];
  *(_DWORD *)v65 = *(_DWORD *)v66;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LibraryPDFInfo(_QWORD *a1, _QWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  int v72;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v5 = v4[10];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_21C458BF4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
LABEL_6:
    v13 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
LABEL_7:
  v14 = v4[11];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = v4[12];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = v4[13];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v4[14];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_21C458C60();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
LABEL_12:
    v32 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
LABEL_13:
  v33 = v4[15];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = v4[16];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  *v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v4[17]) = *((_BYTE *)a2 + v4[17]);
  *(_QWORD *)((char *)a1 + v4[18]) = *(_QWORD *)((char *)a2 + v4[18]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v4[19]) = *((_BYTE *)a2 + v4[19]);
  *((_BYTE *)a1 + v4[20]) = *((_BYTE *)a2 + v4[20]);
  *((_BYTE *)a1 + v4[21]) = *((_BYTE *)a2 + v4[21]);
  *((_BYTE *)a1 + v4[22]) = *((_BYTE *)a2 + v4[22]);
  *((_BYTE *)a1 + v4[23]) = *((_BYTE *)a2 + v4[23]);
  *((_BYTE *)a1 + v4[24]) = *((_BYTE *)a2 + v4[24]);
  *((_BYTE *)a1 + v4[25]) = *((_BYTE *)a2 + v4[25]);
  *((_BYTE *)a1 + v4[26]) = *((_BYTE *)a2 + v4[26]);
  *((_BYTE *)a1 + v4[27]) = *((_BYTE *)a2 + v4[27]);
  *((_BYTE *)a1 + v4[28]) = *((_BYTE *)a2 + v4[28]);
  *((_BYTE *)a1 + v4[29]) = *((_BYTE *)a2 + v4[29]);
  v39 = v4[30];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  *v40 = *v41;
  v40[1] = v41[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = v4[31];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = v29((char *)a1 + v42, 1, v27);
  v46 = v29(v44, 1, v27);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v43, v44, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v43, 0, 1, v27);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v43, v27);
LABEL_18:
    v47 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v43, v44, v27);
LABEL_19:
  v48 = v4[32];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(_QWORD *)v50;
  v49[8] = v50[8];
  *(_QWORD *)v49 = v51;
  *(_QWORD *)((char *)a1 + v4[33]) = *(_QWORD *)((char *)a2 + v4[33]);
  v52 = v4[34];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = v29((char *)a1 + v52, 1, v27);
  v56 = v29(v54, 1, v27);
  if (!v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 24))(v53, v54, v27);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v53, v27);
    goto LABEL_24;
  }
  if (v56)
  {
LABEL_24:
    v57 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v54, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v53, 0, 1, v27);
LABEL_25:
  v58 = v4[35];
  v59 = (_QWORD *)((char *)a1 + v58);
  v60 = (_QWORD *)((char *)a2 + v58);
  *v59 = *v60;
  v59[1] = v60[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v61 = v4[36];
  v62 = (char *)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = *(_OWORD *)v63;
  *(_QWORD *)(v62 + 13) = *(_QWORD *)(v63 + 13);
  *(_OWORD *)v62 = v64;
  v65 = v4[37];
  v66 = (char *)a1 + v65;
  v67 = (char *)a2 + v65;
  v68 = v67[8];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v68;
  v69 = v4[38];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  v72 = *(_DWORD *)v71;
  v70[4] = v71[4];
  *(_DWORD *)v70 = v72;
  return a1;
}

uint64_t initializeWithTake for LibraryPDFInfo(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v5 = v4[10];
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_21C458BF4();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(_OWORD *)(a1 + v4[11]) = *(_OWORD *)(a2 + v4[11]);
  v11 = v4[12];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_OWORD *)(a1 + v4[13]) = *(_OWORD *)(a2 + v4[13]);
  v14 = v4[14];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_21C458C60();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)(a1 + v4[15]) = *(_OWORD *)(a2 + v4[15]);
  *(_OWORD *)(a1 + v4[16]) = *(_OWORD *)(a2 + v4[16]);
  *(_BYTE *)(a1 + v4[17]) = *(_BYTE *)(a2 + v4[17]);
  *(_QWORD *)(a1 + v4[18]) = *(_QWORD *)(a2 + v4[18]);
  *(_BYTE *)(a1 + v4[19]) = *(_BYTE *)(a2 + v4[19]);
  *(_BYTE *)(a1 + v4[20]) = *(_BYTE *)(a2 + v4[20]);
  *(_BYTE *)(a1 + v4[21]) = *(_BYTE *)(a2 + v4[21]);
  *(_BYTE *)(a1 + v4[22]) = *(_BYTE *)(a2 + v4[22]);
  *(_BYTE *)(a1 + v4[23]) = *(_BYTE *)(a2 + v4[23]);
  *(_BYTE *)(a1 + v4[24]) = *(_BYTE *)(a2 + v4[24]);
  *(_BYTE *)(a1 + v4[25]) = *(_BYTE *)(a2 + v4[25]);
  *(_BYTE *)(a1 + v4[26]) = *(_BYTE *)(a2 + v4[26]);
  *(_BYTE *)(a1 + v4[27]) = *(_BYTE *)(a2 + v4[27]);
  *(_BYTE *)(a1 + v4[28]) = *(_BYTE *)(a2 + v4[28]);
  *(_BYTE *)(a1 + v4[29]) = *(_BYTE *)(a2 + v4[29]);
  *(_OWORD *)(a1 + v4[30]) = *(_OWORD *)(a2 + v4[30]);
  v21 = v4[31];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (v19((const void *)(a2 + v21), 1, v17))
  {
    v24 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v22, v23, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
  }
  v25 = v4[32];
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)(a1 + v4[33]) = *(_QWORD *)(a2 + v4[33]);
  v28 = v4[34];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v19((const void *)(a2 + v28), 1, v17))
  {
    v31 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v29, v30, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v29, 0, 1, v17);
  }
  *(_OWORD *)(a1 + v4[35]) = *(_OWORD *)(a2 + v4[35]);
  v32 = v4[36];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_QWORD *)(v33 + 13) = *(_QWORD *)(v34 + 13);
  *(_OWORD *)v33 = *(_OWORD *)v34;
  v35 = v4[37];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  v38 = v4[38];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_DWORD *)v39 = *(_DWORD *)v40;
  *(_BYTE *)(v39 + 4) = *(_BYTE *)(v40 + 4);
  return a1;
}

_QWORD *assignWithTake for LibraryPDFInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[10];
  a1[9] = a2[9];
  a1[10] = v8;
  swift_bridgeObjectRelease();
  v9 = (int *)type metadata accessor for CommonLibraryAssetInfo();
  v10 = v9[10];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_21C458BF4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_21C3E344C(&qword_25527A2D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = v9[11];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = v9[12];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  v27 = v9[13];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v32 = v9[14];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = sub_21C458C60();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_12:
    v40 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
LABEL_13:
  v41 = v9[15];
  v42 = (_QWORD *)((char *)a1 + v41);
  v43 = (_QWORD *)((char *)a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  v46 = v9[16];
  v47 = (_QWORD *)((char *)a1 + v46);
  v48 = (_QWORD *)((char *)a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v9[17]) = *((_BYTE *)a2 + v9[17]);
  *(_QWORD *)((char *)a1 + v9[18]) = *(_QWORD *)((char *)a2 + v9[18]);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v9[19]) = *((_BYTE *)a2 + v9[19]);
  *((_BYTE *)a1 + v9[20]) = *((_BYTE *)a2 + v9[20]);
  *((_BYTE *)a1 + v9[21]) = *((_BYTE *)a2 + v9[21]);
  *((_BYTE *)a1 + v9[22]) = *((_BYTE *)a2 + v9[22]);
  *((_BYTE *)a1 + v9[23]) = *((_BYTE *)a2 + v9[23]);
  *((_BYTE *)a1 + v9[24]) = *((_BYTE *)a2 + v9[24]);
  *((_BYTE *)a1 + v9[25]) = *((_BYTE *)a2 + v9[25]);
  *((_BYTE *)a1 + v9[26]) = *((_BYTE *)a2 + v9[26]);
  *((_BYTE *)a1 + v9[27]) = *((_BYTE *)a2 + v9[27]);
  *((_BYTE *)a1 + v9[28]) = *((_BYTE *)a2 + v9[28]);
  *((_BYTE *)a1 + v9[29]) = *((_BYTE *)a2 + v9[29]);
  v51 = v9[30];
  v52 = (_QWORD *)((char *)a1 + v51);
  v53 = (_QWORD *)((char *)a2 + v51);
  v55 = *v53;
  v54 = v53[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  v56 = v9[31];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = v37((char *)a1 + v56, 1, v35);
  v60 = v37(v58, 1, v35);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v57, v58, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v57, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v57, v35);
LABEL_18:
    v61 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v57, v58, v35);
LABEL_19:
  v62 = v9[32];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v64[8];
  *(_QWORD *)((char *)a1 + v9[33]) = *(_QWORD *)((char *)a2 + v9[33]);
  v65 = v9[34];
  v66 = (char *)a1 + v65;
  v67 = (char *)a2 + v65;
  v68 = v37((char *)a1 + v65, 1, v35);
  v69 = v37(v67, 1, v35);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v66, v67, v35);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v66, v35);
    goto LABEL_24;
  }
  if (v69)
  {
LABEL_24:
    v70 = sub_21C3E344C(&qword_254078EC0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v66, v67, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v66, 0, 1, v35);
LABEL_25:
  v71 = v9[35];
  v72 = (_QWORD *)((char *)a1 + v71);
  v73 = (_QWORD *)((char *)a2 + v71);
  v75 = *v73;
  v74 = v73[1];
  *v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRelease();
  v76 = v9[36];
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *(_QWORD *)(v77 + 13) = *(_QWORD *)(v78 + 13);
  v79 = v9[37];
  v80 = (char *)a1 + v79;
  v81 = (char *)a2 + v79;
  v80[8] = v81[8];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v82 = v9[38];
  v83 = (char *)a1 + v82;
  v84 = (char *)a2 + v82;
  v83[4] = v84[4];
  *(_DWORD *)v83 = *(_DWORD *)v84;
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryPDFInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C44D1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LibraryPDFInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C44D238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommonLibraryAssetInfo();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_21C44D278()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommonLibraryAssetInfo();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void __swiftcall GenreInfo.init(id:name:parentId:parentName:)(BookFoundation::GenreInfo *__return_ptr retstr, Swift::String_optional id, Swift::String name, Swift::String_optional parentId, Swift::String_optional parentName)
{
  retstr->id = id;
  retstr->name = name;
  retstr->parentId = parentId;
  retstr->parentName = parentName;
}

uint64_t GenreInfo.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.parentId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenreInfo.parentName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for GenreInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GenreInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GenreInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for GenreInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenreInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenreInfo()
{
  return &type metadata for GenreInfo;
}

uint64_t sub_21C44D5F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = swift_checkMetadataState();
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      v4 = *(_QWORD *)(v0 - 8) + 64;
      v5 = *(_QWORD *)(v2 - 8) + 64;
      swift_getTupleTypeLayout2();
      v8 = &v7;
      v9 = v4;
      v10 = v5;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_21C44D6B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v7 + v9;
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= ((v7 + v9) & ~v9) + v11)
    v7 = ((v7 + v9) & ~v9) + v11;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v8 + 80));
  if (v13 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 + 1 > 0x18)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  else
  {
    v17 = *((unsigned __int8 *)a2 + v12);
    if (v17 >= 3)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X14 }
    }
    if (v17 == 2)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v5);
      *((_BYTE *)v4 + v12) = 2;
    }
    else if (v17 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
      *((_BYTE *)v4 + v12) = 1;
    }
    else
    {
      v19 = ~v9;
      (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v19, ((unint64_t)a2 + v10) & v19, v5);
      *((_BYTE *)v4 + v12) = 0;
    }
  }
  return v4;
}

uint64_t sub_21C44D85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if (v3 <= ((v3 + v5) & ~v5) + v6)
    v3 = ((v3 + v5) & ~v5) + v6;
  if (v6 > v3)
    v3 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(a1 + v3);
  if (v7 >= 3)
  {
    if (v3 <= 3)
      v8 = v3;
    else
      v8 = 4;
    __asm { BR              X15 }
  }
  if (v7 == 2)
  {
    v9 = *(uint64_t (**)(void))(v4 + 8);
  }
  else if (v7 == 1)
  {
    v9 = *(uint64_t (**)(void))(v2 + 8);
  }
  else
  {
    (*(void (**)(uint64_t))(v2 + 8))(a1);
    v9 = *(uint64_t (**)(void))(v4 + 8);
  }
  return v9();
}

uint64_t sub_21C44D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= ((v7 + v9) & ~v9) + v11)
    v7 = ((v7 + v9) & ~v9) + v11;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v5);
    v15 = 2;
  }
  else if (v13 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, a2);
    v15 = 1;
  }
  else
  {
    v16 = ~v9;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))((v10 + a1) & v16, (v10 + a2) & v16, v5);
    v15 = 0;
  }
  *(_BYTE *)(a1 + v12) = v15;
  return a1;
}

uint64_t sub_21C44DAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  unsigned int v18;
  uint64_t v19;
  char v20;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v5 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = v8 + v10;
    v12 = *(_QWORD *)(v9 + 64);
    if (v8 <= ((v8 + v10) & ~v10) + v12)
      v8 = ((v8 + v10) & ~v10) + v12;
    if (v12 <= v8)
      v13 = v8;
    else
      v13 = *(_QWORD *)(v9 + 64);
    v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 3)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = ~v10;
    if (v14 == 2)
    {
      v17 = *(void (**)(void))(v9 + 8);
    }
    else if (v14 == 1)
    {
      v17 = *(void (**)(void))(v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(a1, *(_QWORD *)(a3 + 16));
      v17 = *(void (**)(void))(v9 + 8);
    }
    v17();
    v18 = *(unsigned __int8 *)(a2 + v13);
    if (v18 >= 3)
    {
      if (v13 <= 3)
        v19 = v13;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 2)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v5);
      v20 = 2;
    }
    else if (v18 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      v20 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v11 + a1) & v16, (v11 + a2) & v16, v5);
      v20 = 0;
    }
    *(_BYTE *)(a1 + v13) = v20;
  }
  return a1;
}

uint64_t sub_21C44DD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = *(_QWORD *)(v8 + 64);
  if (v7 <= ((v7 + v9) & ~v9) + v11)
    v7 = ((v7 + v9) & ~v9) + v11;
  if (v11 <= v7)
    v12 = v7;
  else
    v12 = *(_QWORD *)(v8 + 64);
  v13 = *(unsigned __int8 *)(a2 + v12);
  if (v13 >= 3)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  if (v13 == 2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v5);
    v15 = 2;
  }
  else if (v13 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a1, a2);
    v15 = 1;
  }
  else
  {
    v16 = ~v9;
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a1, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((v10 + a1) & v16, (v10 + a2) & v16, v5);
    v15 = 0;
  }
  *(_BYTE *)(a1 + v12) = v15;
  return a1;
}

uint64_t sub_21C44DE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  unsigned int v18;
  uint64_t v19;
  char v20;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v5 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = v8 + v10;
    v12 = *(_QWORD *)(v9 + 64);
    if (v8 <= ((v8 + v10) & ~v10) + v12)
      v8 = ((v8 + v10) & ~v10) + v12;
    if (v12 <= v8)
      v13 = v8;
    else
      v13 = *(_QWORD *)(v9 + 64);
    v14 = *(unsigned __int8 *)(a1 + v13);
    if (v14 >= 3)
    {
      if (v13 <= 3)
        v15 = v13;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = ~v10;
    if (v14 == 2)
    {
      v17 = *(void (**)(void))(v9 + 8);
    }
    else if (v14 == 1)
    {
      v17 = *(void (**)(void))(v7 + 8);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD))(v7 + 8))(a1, *(_QWORD *)(a3 + 16));
      v17 = *(void (**)(void))(v9 + 8);
    }
    v17();
    v18 = *(unsigned __int8 *)(a2 + v13);
    if (v18 >= 3)
    {
      if (v13 <= 3)
        v19 = v13;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 2)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v5);
      v20 = 2;
    }
    else if (v18 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      v20 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((v11 + a1) & v16, (v11 + a2) & v16, v5);
      v20 = 0;
    }
    *(_BYTE *)(a1 + v13) = v20;
  }
  return a1;
}

uint64_t sub_21C44E0AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = ((v3 + v5) & ~v5) + v6;
  if (v3 <= v7)
    v3 = v7;
  if (v6 <= v3)
    v6 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v8 = v6 + 1;
  v9 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v12 < 2)
    {
LABEL_23:
      v14 = *(unsigned __int8 *)(a1 + v6);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_23;
LABEL_16:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 254);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C44E18C + 4 * byte_21C45E5D8[(v8 - 1)]))();
}

void sub_21C44E1D8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = ((v5 + v7) & ~v7) + v8;
  if (v5 <= v9)
    v5 = v9;
  if (v8 > v5)
    v5 = v8;
  v10 = v5 + 1;
  if (a3 < 0xFE)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v10 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_21C44E39C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = ((v2 + v4) & ~v4) + v5;
  if (v2 <= v6)
    v2 = v6;
  if (v5 <= v2)
    v5 = v2;
  if (*(unsigned __int8 *)(a1 + v5) < 3u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v7 = v5;
  else
    v7 = 4;
  return ((uint64_t (*)(void))((char *)&loc_21C44E400 + 4 * byte_21C45E5E6[v7]))();
}

void sub_21C44E448(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  if (a2 > 2)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 64);
    v12 = ((v8 + v10) & ~v10) + v11;
    if (v8 <= v12)
      v8 = v12;
    if (v11 <= v8)
      v13 = v8;
    else
      v13 = v11;
    v14 = a2 - 3;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 3;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 3;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v7 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
    if (v6 > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (v5 > v7)
      v7 = v5;
    a1[v7] = a2;
  }
}

uint64_t type metadata accessor for ContentDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_21C3E2520(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentDataSource);
}

id sub_21C44E56C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)BooksSettings), sel_init);
  qword_25527BA88 = (uint64_t)result;
  return result;
}

void __swiftcall BooksSettings.init()(BooksSettings *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id static NSUserDefaults.booksAppGroup.getter()
{
  return sub_21C44E5F8(&qword_255279F38, (id *)&qword_25527BA90);
}

id static BooksSettings.shared()()
{
  return sub_21C44E5F8(&qword_255279F30, (id *)&qword_25527BA88);
}

id sub_21C44E5F8(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

id BooksSettings.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  objc_super v7;

  v1 = OBJC_IVAR___BooksSettings_defaults;
  v2 = qword_255279F38;
  v3 = v0;
  if (v2 != -1)
    swift_once();
  v4 = (void *)qword_25527BA90;
  *(_QWORD *)&v3[v1] = qword_25527BA90;
  v5 = v4;

  v7.receiver = v3;
  v7.super_class = (Class)BooksSettings;
  return objc_msgSendSuper2(&v7, sel_init);
}

unint64_t static NSUserDefaults.booksFilterBrightImagesKey.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static NSUserDefaults.booksMenuOnLeftKey.getter()
{
  return 0x6E4F756E654D4B42;
}

id sub_21C44E814()
{
  return (id)sub_21C458E40();
}

id sub_21C44E84C()
{
  id result;

  result = sub_21C44E868();
  qword_25527BA90 = (uint64_t)result;
  return result;
}

id sub_21C44E868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v17[4];

  v0 = sub_21C458BF4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundlePath);

  v6 = sub_21C458E64();
  v8 = v7;

  v17[2] = v6;
  v17[3] = v8;
  v17[0] = 0x736B6F6F42;
  v17[1] = 0xE500000000000000;
  sub_21C3E8EB0();
  LOBYTE(v6) = sub_21C4592C0();
  swift_bridgeObjectRelease();
  v9 = (void *)objc_opt_self();
  v10 = v9;
  if ((v6 & 1) != 0)
    return objc_msgSend(v9, sel_bu_groupUserDefaults);
  v12 = (void *)sub_21C458E40();
  v13 = objc_msgSend((id)objc_opt_self(), sel_books);
  v14 = objc_msgSend(v13, sel_containerURL);

  sub_21C458BC4();
  v15 = (void *)sub_21C458BAC();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v16 = objc_msgSend(v10, sel_bu_createWithSuiteName_container_, v12, v15);

  return v16;
}

id sub_21C44EA74(uint64_t a1, uint64_t a2)
{
  return sub_21C44EA90(a1, a2, &qword_255279F38, (id *)&qword_25527BA90);
}

id sub_21C44EA90(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  return *a4;
}

id sub_21C44EACC(void *a1)
{
  return sub_21C44EBA4(a1);
}

id NSUserDefaults.booksMenuOnLeft.getter()
{
  void *v0;
  void *v1;
  id v2;

  v1 = (void *)sub_21C458E40();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void sub_21C44EB48(void *a1)
{
  sub_21C44EC7C(a1);
}

void NSUserDefaults.booksMenuOnLeft.setter()
{
  sub_21C44ED14();
}

id sub_21C44EB88(void *a1)
{
  return sub_21C44EBA4(a1);
}

id sub_21C44EBA4(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)sub_21C458E40();
  v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  return v3;
}

id NSUserDefaults.booksFilterBrightImages.getter()
{
  void *v0;
  void *v1;
  id v2;

  v1 = (void *)sub_21C458E40();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  return v2;
}

void sub_21C44EC60(void *a1)
{
  sub_21C44EC7C(a1);
}

void sub_21C44EC7C(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)sub_21C4590B0();
  v3 = (id)sub_21C458E40();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);

}

void NSUserDefaults.booksFilterBrightImages.setter()
{
  sub_21C44ED14();
}

void sub_21C44ED14()
{
  void *v0;
  void *v1;
  id v2;

  v1 = (void *)sub_21C4590B0();
  v2 = (id)sub_21C458E40();
  objc_msgSend(v0, sel_setValue_forKey_, v1, v2);

}

void _sSo14NSUserDefaultsC14BookFoundationE29books_registerReadingSettingsyyFZ_0()
{
  id v0;
  void *v1;
  uint64_t inited;
  uint64_t v3;
  void *v4;
  id v5;

  v0 = _sSo14NSUserDefaultsC14BookFoundationE05booksB16NeedingMigrationABSgyFZ_0();
  if (qword_255279F38 != -1)
    swift_once();
  v1 = (void *)qword_25527BA90;
  sub_21C3E344C(&qword_25527BAD0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21C45E620;
  *(_QWORD *)(inited + 32) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 40) = 0x800000021C4602F0;
  v3 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 72) = v3;
  strcpy((char *)(inited + 80), "BKMenuOnLeft");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(_QWORD *)(inited + 120) = v3;
  *(_BYTE *)(inited + 96) = 0;
  sub_21C41616C(inited);
  v4 = (void *)sub_21C458D68();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_registerDefaults_, v4);

  if (v0)
  {
    v5 = v0;
    _sSo14NSUserDefaultsC14BookFoundationE012booksMigrateC25ReadingSettingsToAppGroupyyABFZ_0(v5);

  }
}

char *sub_21C44EEB8()
{
  return sel_BKMenuOnLeft;
}

id sub_21C44EEC4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_BKMenuOnLeft);
  *a2 = (_BYTE)result;
  return result;
}

id sub_21C44EEF4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBKMenuOnLeft_, *a1);
}

char *sub_21C44EF08()
{
  return sel_BKSettingFilterBrightImages;
}

id sub_21C44EF14@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_BKSettingFilterBrightImages);
  *a2 = (_BYTE)result;
  return result;
}

id sub_21C44EF44(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBKSettingFilterBrightImages_, *a1);
}

unint64_t type metadata accessor for BooksSettings()
{
  unint64_t result;

  result = qword_25527BAC8;
  if (!qword_25527BAC8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25527BAC8);
  }
  return result;
}

uint64_t MSeries.itemCountForDisplay.getter()
{
  return sub_21C44EFA8();
}

uint64_t MSeries.itemMinimumCountForDisplay.getter()
{
  return sub_21C44EFA8();
}

uint64_t sub_21C44EFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C44FBF4();
  sub_21C4340FC(v1, MEMORY[0x24BEE1768], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

id MSeries.authorCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  _QWORD *v7;
  char v8;

  swift_getObjectType();
  v8 = 0;
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C44FBF4();
  sub_21C4340FC(v1, v2, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  v3 = v7;
  sub_21C44FC38();
  v4 = sub_21C4342A8((uint64_t)&v8, v3);
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
  v5 = objc_msgSend(v4, sel_integerValue);

  return v5;
}

uint64_t MSeries.contentsForArtwork.getter()
{
  return sub_21C3FCCCC(CFSTR("contents-for-artwork"));
}

uint64_t MSeries.assetsResourceSet.getter()
{
  uint64_t ObjectType;
  __CFString **v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v15);
  v1 = BFMCatalogRequestRelationshipAudiobooks;
  if (v15 == 4)
    v1 = BFMCatalogRequestRelationshipBooks;
  v2 = *v1;
  v3 = sub_21C416AD4();
  if (v3)
  {
    v4 = v3;
    v5 = sub_21C458E64();
    if (*(_QWORD *)(v4 + 16))
    {
      v7 = sub_21C45191C(v5, v6);
      if ((v8 & 1) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v7);
        swift_retain();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_255279EF0 != -1)
    swift_once();
  v10 = sub_21C458D20();
  sub_21C3E2BA0(v10, (uint64_t)qword_25527A278);
  v11 = sub_21C458D08();
  v12 = sub_21C45920C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    MEMORY[0x22077C294](v13, -1, -1);
  }

  return 0;
}

uint64_t MSeries.currentSort.getter()
{
  uint64_t ObjectType;
  __CFString **v1;
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v11);
  v1 = BFMCatalogRequestRelationshipBooks;
  if (v11 == 1)
    v1 = BFMCatalogRequestRelationshipAudiobooks;
  v2 = *v1;
  v3 = sub_21C416AD4();
  if (!v3)
  {
LABEL_10:

    return 0;
  }
  v4 = v3;
  v5 = sub_21C458E64();
  if (*(_QWORD *)(v4 + 16))
  {
    sub_21C45191C(v5, v6);
    if ((v7 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = sub_21C401F0C();
      if (v8)
      {
        v9 = v8;
        sub_21C451980();
        sub_21C4340FC(v9, MEMORY[0x24BEE0D00], (uint64_t)&v11);
        swift_release();

        swift_bridgeObjectRelease();
        return v11;
      }
      swift_release();
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t MSeries.mappedSeries.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v0 = sub_21C44FE00(CFSTR("mapped-series"));
  if (!v0)
    return 0;
  v1 = v0;
  v2 = v0 & 0xFFFFFFFFFFFFFF8;
  if (!(v0 >> 62))
  {
    result = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_4;
    goto LABEL_9;
  }
  result = sub_21C459434();
  if (!result)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x22077BA00](0, v1);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v1 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t MSeries.assetsEnrichedWithSeries.getter()
{
  void *v0;
  void *v1;
  unint64_t v2;
  id v3;
  uint64_t v4;

  v1 = v0;
  if (!MSeries.assetsResourceSet.getter())
    return 0;
  v2 = sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MAsset);
  swift_release();
  if (!v2)
    return 0;
  v3 = v1;
  v4 = sub_21C452538(v2);
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_21C44F554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  v2 = sub_21C3E344C(&qword_25527A738);
  sub_21C401E80();
  sub_21C4340FC(v1, v2, (uint64_t)&v12);
  v3 = v12;
  if (v12)
  {
    v12 = MEMORY[0x24BEE4AF8];
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      for (i = 0; i != v4; ++i)
      {
        v6 = *(void **)(v0 + 32);
        v7 = *(_BYTE *)(v0 + 24);
        sub_21C3E344C(&qword_25527BB78);
        swift_allocObject();
        v8 = v6;
        v9 = swift_bridgeObjectRetain();
        if (sub_21C45070C(v9, v7, v6))
        {
          MEMORY[0x22077B6A0]();
          if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_21C459044();
          sub_21C459074();
          sub_21C459038();
        }
      }
      swift_bridgeObjectRelease();
      v10 = v12;
    }
    else
    {
      swift_retain();
      v10 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t sub_21C44F71C()
{
  return sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MSeries);
}

uint64_t sub_21C44F728()
{
  return sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MAsset);
}

uint64_t sub_21C44F734()
{
  return sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MAuthor);
}

uint64_t sub_21C44F740()
{
  return sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MGenre);
}

uint64_t sub_21C44F74C(void (*a1)(_QWORD))
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_21C402E70();
  if (!v2)
    return 0;
  v3 = v2;
  v10 = MEMORY[0x24BEE4AF8];
  if (!(v2 >> 62))
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
LABEL_19:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRetain();
  result = sub_21C459434();
  v4 = result;
  if (!result)
    goto LABEL_18;
LABEL_4:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x22077BA00](i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      a1(0);
      if (swift_dynamicCastClass())
      {
        MEMORY[0x22077B6A0]();
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21C459044();
        sub_21C459074();
        sub_21C459038();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v9 = v10;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

void sub_21C44F8CC(char a1)
{
  __asm { BR              X12 }
}

void sub_21C44FA64(char a1)
{
  __asm { BR              X12 }
}

unint64_t sub_21C44FBF4()
{
  unint64_t result;

  result = qword_25527BAD8;
  if (!qword_25527BAD8)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E8C4, &type metadata for MSeries.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527BAD8);
  }
  return result;
}

unint64_t sub_21C44FC38()
{
  unint64_t result;

  result = qword_25527BAE0;
  if (!qword_25527BAE0)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E88C, &type metadata for MSeries.AuthorAttributes);
    atomic_store(result, (unint64_t *)&qword_25527BAE0);
  }
  return result;
}

uint64_t MSeries.trimmed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t, _BYTE *);
  id v6;
  _BYTE v8[8];
  void *v9;
  _OWORD v10[2];
  uint64_t v11;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation9MResource_data);
  LOBYTE(v10[0]) = 1;
  sub_21C4526AC();
  swift_bridgeObjectRetain();
  sub_21C459314();
  sub_21C451E08((uint64_t)v8, v10);
  sub_21C3E54B4((uint64_t)v8);
  sub_21C3FF670((uint64_t)v10, &qword_254078EB8);
  LOBYTE(v10[0]) = 2;
  sub_21C459314();
  sub_21C451E08((uint64_t)v8, v10);
  sub_21C3E54B4((uint64_t)v8);
  sub_21C3FF670((uint64_t)v10, &qword_254078EB8);
  v3 = v11;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config + 8);
  v8[0] = *(_BYTE *)(v1 + OBJC_IVAR____TtC14BookFoundation9MResource_config);
  v9 = v4;
  v5 = *(uint64_t (**)(uint64_t, _BYTE *))(ObjectType + 128);
  v6 = v4;
  return v5(v3, v8);
}

uint64_t MSeries.assets.getter()
{
  uint64_t v0;

  if (!MSeries.assetsResourceSet.getter())
    return 0;
  v0 = sub_21C44F74C((void (*)(_QWORD))type metadata accessor for MAsset);
  swift_release();
  return v0;
}

uint64_t MSeries.genres.getter()
{
  return sub_21C3FCCE4(CFSTR("genres"));
}

uint64_t sub_21C44FE00(void *a1)
{
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  ObjectType = swift_getObjectType();
  v3 = sub_21C416AD4();
  if (v3)
  {
    v4 = v3;
    v5 = sub_21C458E64();
    if (*(_QWORD *)(v4 + 16))
    {
      sub_21C45191C(v5, v6);
      if ((v7 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = sub_21C44F554();
        swift_release();
        return v8;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_255279EF0 != -1)
    swift_once();
  v10 = sub_21C458D20();
  sub_21C3E2BA0(v10, (uint64_t)qword_25527A278);
  v11 = a1;
  v12 = sub_21C458D08();
  v13 = sub_21C45920C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v20 = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = sub_21C458E64();
    sub_21C409744(v16, v17, &v20);
    sub_21C459290();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v18 = sub_21C417B84(ObjectType);
    sub_21C409744(v18, v19, &v20);
    sub_21C459290();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x22077C294](v15, -1, -1);
    MEMORY[0x22077C294](v14, -1, -1);

  }
  else
  {

  }
  return 0;
}

void *MSeries.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  void *v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  _BYTE *v30;
  _QWORD *v31;
  id v32;
  void (*v33)(char *, uint64_t);
  id v34;
  id v35;
  id v36;
  int v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;

  ObjectType = swift_getObjectType();
  v6 = sub_21C3E344C(&qword_25527A2D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *a2;
  v13 = (void *)*((_QWORD *)a2 + 1);
  LOBYTE(v42) = 0;
  v14 = v2;
  swift_bridgeObjectRetain();
  v15 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A120();
  sub_21C4340FC(a1, v15, (uint64_t)&v40);
  swift_bridgeObjectRelease();
  v16 = (uint64_t)v40;
  if (!v40)
  {

    goto LABEL_10;
  }
  v38 = v13;
  v39 = v14;
  LOBYTE(v42) = 3;
  sub_21C44FBF4();
  swift_bridgeObjectRetain();
  sub_21C4340FC(v16, MEMORY[0x24BEE1328], (uint64_t)&v40);
  swift_bridgeObjectRelease();
  v17 = (char)v40;
  if (v40 == 2
    || (LOBYTE(v42) = 7,
        swift_bridgeObjectRetain(),
        sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v40),
        swift_bridgeObjectRelease(),
        !v41))
  {
LABEL_9:
    swift_bridgeObjectRelease();

    goto LABEL_10;
  }
  v36 = v41;
  v35 = v40;
  LOBYTE(v42) = 8;
  swift_bridgeObjectRetain();
  sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v40);
  swift_bridgeObjectRelease();
  if (!v41)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_21C458BDC();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_21C3FF670((uint64_t)v8, &qword_25527A2D0);
LABEL_10:
    if (qword_254078E68 != -1)
      swift_once();
    if (qword_255279EF0 != -1)
      swift_once();
    v18 = sub_21C458D20();
    sub_21C3E2BA0(v18, (uint64_t)qword_25527A278);
    swift_bridgeObjectRetain();
    v19 = sub_21C458D08();
    v20 = sub_21C45920C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v39 = (id)swift_slowAlloc();
      v40 = v39;
      *(_DWORD *)v21 = 136315394;
      sub_21C450EBC(ObjectType);
      v42 = sub_21C409744(v22, v23, (uint64_t *)&v40);
      sub_21C459290();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain();
      v24 = sub_21C458D80();
      v26 = v25;
      swift_bridgeObjectRelease();
      v42 = sub_21C409744(v24, v26, (uint64_t *)&v40);
      sub_21C459290();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v19, v20, "Invalid data for %s: %s", (uint8_t *)v21, 0x16u);
      v27 = v39;
      swift_arrayDestroy();
      MEMORY[0x22077C294](v27, -1, -1);
      MEMORY[0x22077C294](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for MSeries();
    swift_deallocPartialClassInstance();
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v30 = v39;
  *((_BYTE *)v39 + OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered) = v17 & 1;
  v30[OBJC_IVAR____TtC14BookFoundation7MSeries_kind] = 2;
  v31 = &v30[OBJC_IVAR____TtC14BookFoundation7MSeries_name];
  v32 = v36;
  *v31 = v35;
  v31[1] = v32;
  (*(void (**)(_BYTE *, char *, uint64_t))(v10 + 16))(&v30[OBJC_IVAR____TtC14BookFoundation7MSeries_url], v12, v9);
  LOBYTE(v42) = 1;
  sub_21C4340FC(v16, MEMORY[0x24BEE1328], (uint64_t)&v40);
  swift_bridgeObjectRelease();
  v30[OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors] = v40 & 1;

  LOBYTE(v40) = v37;
  v41 = v38;
  v28 = (void *)MResource.init(with:config:)(a1, (uint64_t)&v40);
  v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v34 = v28;
  v33(v12, v9);
  if (v28)

  return v28;
}

BOOL sub_21C450684()
{
  uint64_t ObjectType;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 4;
}

BOOL sub_21C4506C8()
{
  uint64_t ObjectType;
  uint64_t v2;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr))(ObjectType + 136))(&v2);
  return v2 == 1;
}

uint64_t sub_21C45070C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = v3;
  swift_bridgeObjectRetain();
  sub_21C3E344C(&qword_25527BB80);
  sub_21C452B58();
  sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v27);
  swift_bridgeObjectRelease();
  v8 = v28;
  if (v28)
  {
    v9 = v27;
    v10 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v10 = v27 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v27);
      swift_bridgeObjectRelease();
      v11 = v28;
      if (v28)
      {
        v26 = v27;
        swift_bridgeObjectRetain();
        sub_21C4340FC(a1, MEMORY[0x24BEE0D00], (uint64_t)&v27);
        swift_bridgeObjectRelease();
        v12 = v28;
        if (v28)
        {
          v13 = v27;
          swift_bridgeObjectRetain();
          sub_21C4547CC(v13, v12, (char *)&v27);
          v14 = v27;
          if (v27 == 6)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            static MResourceType.classType(for:)(v13, v12);
            v25 = v24;
            swift_bridgeObjectRelease();
            if (v25)
            {
              type metadata accessor for MSeries();
              if (swift_dynamicCastMetatype())
              {
                *(_QWORD *)(v4 + 40) = v9;
                *(_QWORD *)(v4 + 48) = v8;
                *(_BYTE *)(v4 + 56) = v14;
                *(_QWORD *)(v4 + 64) = v26;
                *(_QWORD *)(v4 + 72) = v11;
                result = v4;
                *(_QWORD *)(v4 + 16) = a1;
                *(_BYTE *)(v4 + 24) = a2;
                *(_QWORD *)(v4 + 32) = a3;
                return result;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
  }

  if (qword_254078E68 != -1)
    swift_once();
  if (qword_255279EF0 != -1)
    swift_once();
  v15 = sub_21C458D20();
  sub_21C3E2BA0(v15, (uint64_t)qword_25527A278);
  swift_bridgeObjectRetain();
  v16 = sub_21C458D08();
  v17 = sub_21C45920C();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v27 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    v20 = sub_21C458D80();
    v22 = v21;
    swift_bridgeObjectRelease();
    sub_21C409744(v20, v22, &v27);
    sub_21C459290();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21C3E0000, v16, v17, "Invalid data for sparse resource: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22077C294](v19, -1, -1);
    MEMORY[0x22077C294](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_21C3E344C(&qword_25527BB78);
  swift_deallocPartialClassInstance();
  return 0;
}

void sub_21C450B04()
{
  sub_21C459404();
  __break(1u);
}

uint64_t sub_21C450B5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21C450B98 + 4 * byte_21C45E640[a1]))(0xD000000000000011, 0x800000021C45F350);
}

unint64_t sub_21C450B98()
{
  return 0xD000000000000010;
}

uint64_t sub_21C450BB4()
{
  return 0x52746E65746E6F63;
}

uint64_t sub_21C450BD8()
{
  return 0x65726564724F7369;
}

uint64_t sub_21C450BF4()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_21C450C2C()
{
  return 1701667182;
}

uint64_t sub_21C450C3C()
{
  return 7107189;
}

void sub_21C450C4C(char *a1)
{
  sub_21C3F747C(*a1);
}

uint64_t sub_21C450C58()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_21C45959C();
  sub_21C43210C((uint64_t)v3, v1);
  return sub_21C4595C0();
}

void sub_21C450C9C(uint64_t a1)
{
  char *v1;

  sub_21C43210C(a1, *v1);
}

uint64_t sub_21C450CA4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_21C45959C();
  sub_21C43210C((uint64_t)v3, v1);
  return sub_21C4595C0();
}

uint64_t sub_21C450CE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C452B10();
  *a1 = result;
  return result;
}

uint64_t sub_21C450D10@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_21C450B5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t MSeries.hasUniqueAuthors.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_hasUniqueAuthors);
}

uint64_t MSeries.isOrdered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_isOrdered);
}

void MSeries.kind.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14BookFoundation7MSeries_kind);
}

uint64_t MSeries.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MSeries.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14BookFoundation7MSeries_url;
  v4 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void *MSeries.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MSeries.init(with:config:)(a1, a2);
}

void sub_21C450EBC(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t *__return_ptr))(a1 + 136))(&v1);
  __asm { BR              X10 }
}

unint64_t sub_21C450F18()
{
  return 0xD000000000000011;
}

uint64_t sub_21C451050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14BookFoundation7MSeries_url;
  v2 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id MSeries.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MSeries();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MSeries.isExplicit.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C44FBF4();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (v4 == 0x746963696C707865 && v5 == 0xE800000000000000)
      v2 = 1;
    else
      v2 = sub_21C4594F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  return v2 & 1;
}

uint64_t MSeries.fetchNextAssets()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_21C451268()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = MSeries.assetsResourceSet.getter();
  *(_QWORD *)(v0 + 24) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
  *(_QWORD *)(v0 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = sub_21C45130C;
  return sub_21C40233C((uint64_t)v2, (uint64_t)&unk_25527A598, 0);
}

uint64_t sub_21C45130C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();

  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t MSeries.fetchAllAssets()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_21C4513A4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v1 = MSeries.assetsResourceSet.getter();
  *(_QWORD *)(v0 + 24) = v1;
  if (v1)
  {
    if (*(_QWORD *)(v1 + 48))
    {
      v2 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
      *(_QWORD *)(v0 + 32) = v2;
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 40) = v3;
      *v3 = v0;
      v3[1] = sub_21C45145C;
      return sub_21C40233C((uint64_t)v2, (uint64_t)&unk_25527A598, 0);
    }
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C45145C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

uint64_t sub_21C4514C8()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 48))
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_defaultBag);
    *(_QWORD *)(v0 + 32) = v1;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = sub_21C45145C;
    return sub_21C40233C((uint64_t)v1, (uint64_t)&unk_25527A598, 0);
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_21C451570()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_21C4515AC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t MSeries.authorNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  v2 = sub_21C3E344C(&qword_25527A088);
  sub_21C44FBF4();
  sub_21C4340FC(v1, v2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  v3 = v6;
  v4 = sub_21C3E344C(&qword_25527A748);
  sub_21C44FC38();
  sub_21C4340FC(v3, v4, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_21C45174C()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C4517A4()
{
  return sub_21C458EC4();
}

uint64_t sub_21C4517C4()
{
  sub_21C45959C();
  sub_21C458EC4();
  return sub_21C4595C0();
}

uint64_t sub_21C451818@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_21C459488();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_21C451868(_QWORD *a1@<X8>)
{
  *a1 = 0x53746E6572727563;
  a1[1] = 0xEB0000000074726FLL;
}

uint64_t MSeries.authors.getter()
{
  return sub_21C3FCCD8(CFSTR("authors"));
}

unint64_t sub_21C45189C(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;

  v2 = a1;
  sub_21C45959C();
  sub_21C4595B4();
  if (v2 != 6)
    sub_21C4595A8();
  v3 = sub_21C4595C0();
  return sub_21C451A50(a1, v3);
}

unint64_t sub_21C45191C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_21C45959C();
  sub_21C458EC4();
  v4 = sub_21C4595C0();
  return sub_21C451ADC(a1, a2, v4);
}

unint64_t sub_21C451980()
{
  unint64_t result;

  result = qword_25527BAE8;
  if (!qword_25527BAE8)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E854, &type metadata for MSeries.MetaKeys);
    atomic_store(result, (unint64_t *)&qword_25527BAE8);
  }
  return result;
}

unint64_t sub_21C4519C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C4592FC();
  return sub_21C451BBC(a1, v2);
}

unint64_t sub_21C4519F4(char a1)
{
  char v1;
  uint64_t v2;

  v1 = a1 & 1;
  sub_21C45959C();
  sub_21C4595A8();
  v2 = sub_21C4595C0();
  return sub_21C451C80(v1, v2);
}

unint64_t sub_21C451A50(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + result);
      if (v7 == 6)
      {
        if (a1 == 6)
          return result;
      }
      else if (a1 != 6 && v7 == a1)
      {
        return result;
      }
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_21C451ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_21C4594F4() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_21C4594F4() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_21C451BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_21C418474(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x22077B994](v9, a1);
      sub_21C3E54B4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_21C451C80(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (((((a1 & 1) == 0) ^ *(_BYTE *)(v7 + result)) & 1) != 0)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_21C451D3C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_21C45191C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_21C457BE4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_21C4520A8(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_21C451E08@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_21C4519C4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_21C457D98();
      v9 = v11;
    }
    sub_21C3E54B4(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_21C3E8498((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_21C45227C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_21C451EF0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_21C4592F0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_21C45959C();
        sub_21C4595A8();
        result = sub_21C4595C0();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_BYTE *)(v11 + v3);
          v13 = (_BYTE *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 32 * v3);
          v16 = (_OWORD *)(v14 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 2))
          {
            v9 = v16[1];
            *v15 = *v16;
            v15[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21C4520A8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_21C4592F0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_21C45959C();
        swift_bridgeObjectRetain();
        sub_21C458EC4();
        v9 = sub_21C4595C0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_21C45227C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_21C4592F0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_21C418474(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_21C4592FC();
        result = sub_21C3E54B4((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void (*sub_21C452444(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_21C4524C4(v6, a2, a3);
  return sub_21C452498;
}

void sub_21C452498(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_21C4524C4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22077BA00](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_21C452530;
  }
  __break(1u);
  return result;
}

void sub_21C452530(id *a1)
{

}

uint64_t sub_21C452538(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_21C459434())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22077BA00](i - 4, a1) : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = MAsset.enrichIfNeeded(with:)();

      if (v7)
      {
        MEMORY[0x22077B6A0]();
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_21C459044();
        sub_21C459074();
        sub_21C459038();
      }
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_21C4526AC()
{
  unint64_t result;

  result = qword_25527BAF0;
  if (!qword_25527BAF0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResource.Keys, &type metadata for MResource.Keys);
    atomic_store(result, (unint64_t *)&qword_25527BAF0);
  }
  return result;
}

uint64_t type metadata accessor for MSeries()
{
  uint64_t result;

  result = qword_25527BB50;
  if (!qword_25527BB50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C45272C()
{
  return type metadata accessor for MSeries();
}

uint64_t sub_21C452734()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C458BF4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MSeries()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MSeries.isBookSeries.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of MSeries.isAudiobookSeries.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t storeEnumTagSinglePayload for MSeries.MetaKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21C452844 + 4 * byte_21C45E64F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21C452864 + 4 * byte_21C45E654[v4]))();
}

_BYTE *sub_21C452844(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21C452864(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C45286C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C452874(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C45287C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C452884(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MSeries.MetaKeys()
{
  return &type metadata for MSeries.MetaKeys;
}

uint64_t storeEnumTagSinglePayload for MSeries.AuthorAttributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21C4528EC + 4 * byte_21C45E65E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21C452920 + 4 * byte_21C45E659[v4]))();
}

uint64_t sub_21C452920(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C452928(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C452930);
  return result;
}

uint64_t sub_21C45293C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C452944);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21C452948(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C452950(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MSeries.AuthorAttributes()
{
  return &type metadata for MSeries.AuthorAttributes;
}

uint64_t storeEnumTagSinglePayload for MSeries.Attributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21C4529B8 + 4 * byte_21C45E668[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21C4529EC + 4 * byte_21C45E663[v4]))();
}

uint64_t sub_21C4529EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4529F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C4529FCLL);
  return result;
}

uint64_t sub_21C452A08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C452A10);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21C452A14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C452A1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MSeries.Attributes()
{
  return &type metadata for MSeries.Attributes;
}

unint64_t sub_21C452A3C()
{
  unint64_t result;

  result = qword_25527BB60;
  if (!qword_25527BB60)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E75C, &type metadata for MSeries.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527BB60);
  }
  return result;
}

unint64_t sub_21C452A84()
{
  unint64_t result;

  result = qword_25527BB68;
  if (!qword_25527BB68)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E7C4, &type metadata for MSeries.AuthorAttributes);
    atomic_store(result, (unint64_t *)&qword_25527BB68);
  }
  return result;
}

unint64_t sub_21C452ACC()
{
  unint64_t result;

  result = qword_25527BB70;
  if (!qword_25527BB70)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45E82C, &type metadata for MSeries.MetaKeys);
    atomic_store(result, (unint64_t *)&qword_25527BB70);
  }
  return result;
}

uint64_t sub_21C452B10()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_21C452B58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527BB88;
  if (!qword_25527BB88)
  {
    v1 = sub_21C3E35C0(&qword_25527BB80);
    result = MEMORY[0x22077C1E0](&unk_21C45DA78, v1);
    atomic_store(result, (unint64_t *)&qword_25527BB88);
  }
  return result;
}

BookFoundation::AssetArtistInfo __swiftcall AssetArtistInfo.init(id:name:)(Swift::String id, Swift::String name)
{
  Swift::String *v2;
  BookFoundation::AssetArtistInfo result;

  *v2 = id;
  v2[1] = name;
  result.name = name;
  result.id = id;
  return result;
}

uint64_t AssetArtistInfo.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssetArtistInfo.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for AssetArtistInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AssetArtistInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssetArtistInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AssetArtistInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetArtistInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetArtistInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetArtistInfo()
{
  return &type metadata for AssetArtistInfo;
}

uint64_t BooksAppleAccountFeatureFlag.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t BooksAppleAccountFeatureFlag.init(rawValue:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;
  char v9;

  v2 = sub_21C459368();
  v4 = v3;
  if (v2 == sub_21C459368() && v4 == v5)
  {
    result = swift_bridgeObjectRelease_n();
    v9 = 0;
  }
  else
  {
    v7 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v9 = v7 ^ 1;
  }
  *a1 = v9 & 1;
  return result;
}

uint64_t BooksAppleAccountFeatureFlag.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

void BooksAppleAccountFeatureFlag.rawValue.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "AABranding";
  *(_QWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 16) = 2;
}

uint64_t sub_21C452EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_21C459368();
  v2 = v1;
  if (v0 == sub_21C459368() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_21C452F90()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t sub_21C452FD0()
{
  return sub_21C4595A8();
}

uint64_t sub_21C452FF4()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t sub_21C453030@<X0>(_BYTE *a1@<X8>)
{
  return BooksAppleAccountFeatureFlag.init(rawValue:)(a1);
}

void sub_21C453060(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = "AABranding";
  *(_QWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 16) = 2;
}

const char *sub_21C45307C()
{
  return "AppleAccount";
}

const char *sub_21C453090()
{
  return "AABranding";
}

uint64_t sub_21C4530A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  sub_21C3FD5E0(0, 1, 0);
  v0 = v9;
  v1 = sub_21C459368();
  v3 = v2;
  v5 = *(_QWORD *)(v9 + 16);
  v4 = *(_QWORD *)(v9 + 24);
  if (v5 >= v4 >> 1)
  {
    sub_21C3FD5E0(v4 > 1, v5 + 1, 1);
    v0 = v9;
  }
  *(_QWORD *)(v0 + 16) = v5 + 1;
  v6 = v0 + 16 * v5;
  *(_QWORD *)(v6 + 32) = v1;
  *(_QWORD *)(v6 + 40) = v3;
  sub_21C3E344C(&qword_25527A098);
  v9 = sub_21C459458();
  v7 = (_QWORD *)swift_bridgeObjectRetain();
  sub_21C4534AC(v7, 1, &v9);
  result = swift_release();
  off_25527BB90 = (_UNKNOWN *)v9;
  return result;
}

void *static BooksAppleAccountFeatureFlag.allCases.getter()
{
  return &unk_24E03F3F8;
}

uint64_t BooksAppleAccountFeatureFlag.init(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  char v7;
  uint64_t result;
  char v9;

  if (qword_255279F40 != -1)
    swift_once();
  if (*((_QWORD *)off_25527BB90 + 2))
  {
    sub_21C45191C(a1, a2);
    v7 = v6;
    result = swift_bridgeObjectRelease();
    v9 = v7 ^ 1;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v9 = 1;
  }
  *a3 = v9 & 1;
  return result;
}

void sub_21C453264(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E03F420;
}

uint64_t isFeatureEnabled(_:)()
{
  char v0;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for BooksAppleAccountFeatureFlag;
  v4 = sub_21C4532C0();
  v0 = sub_21C458CFC();
  sub_21C3E2754((uint64_t)v2);
  return v0 & 1;
}

unint64_t sub_21C4532C0()
{
  unint64_t result;

  result = qword_25527BB98;
  if (!qword_25527BB98)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksAppleAccountFeatureFlag, &type metadata for BooksAppleAccountFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BB98);
  }
  return result;
}

unint64_t sub_21C453308()
{
  unint64_t result;

  result = qword_25527BBA0;
  if (!qword_25527BBA0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksAppleAccountFeatureFlag, &type metadata for BooksAppleAccountFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BBA0);
  }
  return result;
}

_UNKNOWN **sub_21C45334C()
{
  return &protocol witness table for FeatureFlagsDomain.AppleAccount;
}

unint64_t sub_21C453358(uint64_t a1)
{
  unint64_t result;

  result = sub_21C45337C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C45337C()
{
  unint64_t result;

  result = qword_25527BBD0;
  if (!qword_25527BBD0)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksAppleAccountFeatureFlag, &type metadata for BooksAppleAccountFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BBD0);
  }
  return result;
}

unint64_t sub_21C4533C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527BBD8;
  if (!qword_25527BBD8)
  {
    v1 = sub_21C3E35C0(&qword_25527BBE0);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25527BBD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BooksAppleAccountFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21C453450 + 4 * asc_21C45E920[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21C453470 + 4 * byte_21C45E925[v4]))();
}

_BYTE *sub_21C453450(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21C453470(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C453478(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C453480(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21C453488(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21C453490(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BooksAppleAccountFeatureFlag()
{
  return &type metadata for BooksAppleAccountFeatureFlag;
}

void sub_21C4534AC(_QWORD *a1, char a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  char v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  LOBYTE(v4) = a2;
  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  v8 = a1[4];
  v7 = a1[5];
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_23;
  v9 = *a3;
  v10 = sub_21C45191C(v8, v7);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v11 & 1) == 0;
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v11;
  if (*(_QWORD *)(v9 + 24) < v15)
  {
    sub_21C3E67A4(v15, v4 & 1);
    v10 = sub_21C45191C(v8, v7);
    if ((v16 & 1) == (v17 & 1))
      goto LABEL_8;
LABEL_6:
    v10 = sub_21C459554();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v16 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v20 = v10;
  sub_21C458314();
  v10 = v20;
  if ((v16 & 1) != 0)
  {
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v21 = *a3;
  *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
  v22 = (uint64_t *)(*(_QWORD *)(v21 + 48) + 16 * v10);
  *v22 = v8;
  v22[1] = v7;
  v23 = *(_QWORD *)(v21 + 16);
  v14 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (v14)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    return;
  }
  *(_QWORD *)(v21 + 16) = v24;
  if (v6 != 1)
  {
    v4 = a1 + 7;
    v25 = 1;
    while (v25 < a1[2])
    {
      v8 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain();
      if (!v7)
        goto LABEL_23;
      v26 = *a3;
      v27 = sub_21C45191C(v8, v7);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = (v28 & 1) == 0;
      v14 = __OFADD__(v29, v30);
      v31 = v29 + v30;
      if (v14)
        goto LABEL_25;
      v16 = v28;
      if (*(_QWORD *)(v26 + 24) < v31)
      {
        sub_21C3E67A4(v31, 1);
        v27 = sub_21C45191C(v8, v7);
        if ((v16 & 1) != (v32 & 1))
          goto LABEL_6;
      }
      if ((v16 & 1) != 0)
        goto LABEL_9;
      v33 = *a3;
      *(_QWORD *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      v34 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v27);
      *v34 = v8;
      v34[1] = v7;
      v35 = *(_QWORD *)(v33 + 16);
      v14 = __OFADD__(v35, 1);
      v36 = v35 + 1;
      if (v14)
        goto LABEL_26;
      ++v25;
      *(_QWORD *)(v33 + 16) = v36;
      v4 += 2;
      if (v6 == v25)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t Comparable.clamped(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  if ((sub_21C458E10() & 1) != 0)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  }
  else
  {
    a1 += *(int *)(sub_21C458E28() + 36);
    v9 = sub_21C458E04();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
    if ((v9 & 1) == 0)
    {
      v10 = a3;
      v11 = v4;
      return v8(v10, v11, a2);
    }
  }
  v10 = a3;
  v11 = a1;
  return v8(v10, v11, a2);
}

uint64_t MGenre.parentId.getter()
{
  return sub_21C453914();
}

unint64_t sub_21C4538C8()
{
  unint64_t result;

  result = qword_25527BBE8;
  if (!qword_25527BBE8)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45EB5C, &type metadata for MGenre.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527BBE8);
  }
  return result;
}

uint64_t MGenre.parentName.getter()
{
  return sub_21C453914();
}

uint64_t sub_21C453914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_getObjectType();
  sub_21C44F8CC(0);
  v1 = v0;
  sub_21C4538C8();
  sub_21C4340FC(v1, MEMORY[0x24BEE0D00], (uint64_t)&v3);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_21C4539A0(char *a1)
{
  sub_21C3F7760(*a1);
}

void sub_21C4539AC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C4539EC()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

void sub_21C453A68()
{
  __asm { BR              X10 }
}

uint64_t sub_21C453A98()
{
  sub_21C458EC4();
  return swift_bridgeObjectRelease();
}

void sub_21C453B00()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_21C45959C();
  __asm { BR              X9 }
}

uint64_t sub_21C453B3C()
{
  sub_21C458EC4();
  swift_bridgeObjectRelease();
  return sub_21C4595C0();
}

uint64_t sub_21C453BB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_21C454628();
  *a1 = result;
  return result;
}

uint64_t sub_21C453BE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21C453C08 + 4 * byte_21C45EA97[*v0]))();
}

void sub_21C453C08(_QWORD *a1@<X8>)
{
  *a1 = 1701667182;
  a1[1] = 0xE400000000000000;
}

void sub_21C453C1C(_QWORD *a1@<X8>)
{
  *a1 = 0x6449746E65726170;
  a1[1] = 0xE800000000000000;
}

void sub_21C453C38(_QWORD *a1@<X8>)
{
  *a1 = 0x614E746E65726170;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_21C453C58(_QWORD *a1@<X8>)
{
  *a1 = 7107189;
  a1[1] = 0xE300000000000000;
}

uint64_t MGenre.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14BookFoundation6MGenre_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MGenre.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14BookFoundation6MGenre_url;
  swift_beginAccess();
  v4 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MGenre.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14BookFoundation6MGenre_url;
  swift_beginAccess();
  v4 = sub_21C458BF4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*MGenre.url.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void *MGenre.__allocating_init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return MGenre.init(with:config:)(a1, a2);
}

void *MGenre.init(with:config:)(uint64_t a1, unsigned __int8 *a2)
{
  void *v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  char *v30;
  uint64_t *v31;
  void (*v32)(char *, uint64_t);
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  ObjectType = swift_getObjectType();
  v6 = sub_21C3E344C(&qword_25527A2D0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_21C458BF4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v36) = *a2;
  v13 = (void *)*((_QWORD *)a2 + 1);
  LOBYTE(v39) = 0;
  v14 = v2;
  swift_bridgeObjectRetain();
  v15 = sub_21C3E344C(&qword_25527A088);
  sub_21C40A120();
  sub_21C4340FC(a1, v15, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  v16 = v37;
  if (!v37)
  {

LABEL_10:
    if (qword_254078E68 != -1)
      swift_once();
    if (qword_255279EF0 != -1)
      swift_once();
    v19 = sub_21C458D20();
    sub_21C3E2BA0(v19, (uint64_t)qword_25527A278);
    swift_bridgeObjectRetain();
    v20 = sub_21C458D08();
    v21 = sub_21C45920C();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v35 = (char *)v23;
      *(_DWORD *)v22 = 136315394;
      v36 = ObjectType;
      v37 = v23;
      v39 = sub_21C409744(0x7365726E6567, 0xE600000000000000, &v37);
      sub_21C459290();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      v24 = sub_21C458D80();
      v26 = v25;
      swift_bridgeObjectRelease();
      v39 = sub_21C409744(v24, v26, &v37);
      sub_21C459290();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21C3E0000, v20, v21, "Missing genre data for %s: %s", (uint8_t *)v22, 0x16u);
      v27 = v35;
      swift_arrayDestroy();
      MEMORY[0x22077C294](v27, -1, -1);
      MEMORY[0x22077C294](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_deallocPartialClassInstance();
    return 0;
  }
  v35 = v12;
  LOBYTE(v39) = 1;
  sub_21C4538C8();
  swift_bridgeObjectRetain();
  v17 = ObjectType;
  sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  v18 = v38;
  if (!v38)
  {
    swift_bridgeObjectRelease();

    ObjectType = v17;
    goto LABEL_10;
  }
  v34 = v37;
  LOBYTE(v39) = 4;
  sub_21C4340FC(v16, MEMORY[0x24BEE0D00], (uint64_t)&v37);
  swift_bridgeObjectRelease();
  if (!v38)
  {
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  sub_21C458BDC();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();

    sub_21C403A74((uint64_t)v8);
LABEL_9:
    ObjectType = v17;
    goto LABEL_10;
  }
  v30 = v35;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v8, v9);
  v31 = (uint64_t *)&v14[OBJC_IVAR____TtC14BookFoundation6MGenre_name];
  *v31 = v34;
  v31[1] = v18;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v14[OBJC_IVAR____TtC14BookFoundation6MGenre_url], v30, v9);

  LOBYTE(v37) = v36;
  v38 = (uint64_t)v13;
  v28 = (void *)MResource.init(with:config:)(a1, (uint64_t)&v37);
  v32 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33 = v28;
  v32(v30, v9);
  if (v28)

  return v28;
}

void static MGenre.type.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_21C454380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14BookFoundation6MGenre_url;
  v2 = sub_21C458BF4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id MGenre.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_21C454458()
{
  return type metadata accessor for MGenre();
}

uint64_t type metadata accessor for MGenre()
{
  uint64_t result;

  result = qword_25527BC20;
  if (!qword_25527BC20)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_21C45449C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_21C458BF4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MGenre.Attributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21C454560 + 4 * byte_21C45EAA1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21C454594 + 4 * byte_21C45EA9C[v4]))();
}

uint64_t sub_21C454594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C45459C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C4545A4);
  return result;
}

uint64_t sub_21C4545B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C4545B8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21C4545BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C4545C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MGenre.Attributes()
{
  return &type metadata for MGenre.Attributes;
}

unint64_t sub_21C4545E4()
{
  unint64_t result;

  result = qword_25527BC30;
  if (!qword_25527BC30)
  {
    result = MEMORY[0x22077C1E0](&unk_21C45EB34, &type metadata for MGenre.Attributes);
    atomic_store(result, (unint64_t *)&qword_25527BC30);
  }
  return result;
}

uint64_t sub_21C454628()
{
  unint64_t v0;

  v0 = sub_21C459488();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

void static MResourceType.classType(for:)(uint64_t a1, uint64_t a2)
{
  char v4;

  swift_bridgeObjectRetain();
  sub_21C4547CC(a1, a2, &v4);
  __asm { BR              X10 }
}

uint64_t sub_21C4546C0()
{
  return type metadata accessor for MAudiobook();
}

uint64_t MResourceType.name.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21C454750 + 4 * byte_21C45EB9B[*v0]))(0x6F622D6F69647561, 0xEB00000000736B6FLL);
}

unint64_t sub_21C454750()
{
  return 0xD000000000000011;
}

uint64_t sub_21C45476C()
{
  return 0x73726F68747561;
}

uint64_t sub_21C454784()
{
  return 0x736B6F6F62;
}

uint64_t sub_21C454798()
{
  return 0x7265732D6B6F6F62;
}

uint64_t sub_21C4547B8()
{
  return 0x7365726E6567;
}

uint64_t sub_21C4547CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  char v7;
  char v8;

  if (a1 == 0x6F622D6F69647561 && a2 == 0xEB00000000736B6FLL || (sub_21C4594F4() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021C45FE90 || (sub_21C4594F4() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (a1 == 0x73726F68747561 && a2 == 0xE700000000000000 || (sub_21C4594F4() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (a1 == 0x736B6F6F62 && a2 == 0xE500000000000000 || (sub_21C4594F4() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (a1 == 0x7265732D6B6F6F62 && a2 == 0xEB00000000736569 || (sub_21C4594F4() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else if (a1 == 0x7365726E6567 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 5;
  }
  else
  {
    v8 = sub_21C4594F4();
    result = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 5;
    else
      v7 = 6;
  }
  *a3 = v7;
  return result;
}

BookFoundation::MResourceType_optional __swiftcall MResourceType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 6;
  if ((unint64_t)rawValue < 6)
    v2 = rawValue;
  *v1 = v2;
  return (BookFoundation::MResourceType_optional)rawValue;
}

BookFoundation::MResourceType_optional sub_21C454A70(Swift::Int *a1)
{
  return MResourceType.init(rawValue:)(*a1);
}

void sub_21C454A78(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

unint64_t MResourceType.init(_:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result >= 6)
  {
    sub_21C459350();
    sub_21C458F00();
    type metadata accessor for __BFMResourceType(0);
    sub_21C4593EC();
    sub_21C458F00();
    result = sub_21C459404();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

uint64_t MResourceType.bfmType.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_21C454B70()
{
  unint64_t result;

  result = qword_25527BC38;
  if (!qword_25527BC38)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for MResourceType, &type metadata for MResourceType);
    atomic_store(result, (unint64_t *)&qword_25527BC38);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MResourceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MResourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21C454C90 + 4 * byte_21C45EBA6[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21C454CC4 + 4 * byte_21C45EBA1[v4]))();
}

uint64_t sub_21C454CC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C454CCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C454CD4);
  return result;
}

uint64_t sub_21C454CE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C454CE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21C454CEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C454CF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MResourceType()
{
  return &type metadata for MResourceType;
}

uint64_t sub_21C454D14()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookInfo);
}

uint64_t sub_21C454D20()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for LibraryBookInfo);
}

uint64_t sub_21C454D2C(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12[4];

  v3 = sub_21C4595F0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = a1(0);
  v7 = sub_21C3E30F8(v12);
  sub_21C456D5C(v1, (uint64_t)v7, a1);
  sub_21C4595CC();
  sub_21C4595D8();
  v12[0] = sub_21C45962C();
  v12[1] = v8;
  sub_21C458F00();
  sub_21C4595E4();
  v9 = sub_21C419610();
  swift_release();
  v11 = v9;
  sub_21C3E344C(&qword_25527A748);
  sub_21C3E3134();
  sub_21C458DF8();
  swift_bridgeObjectRelease();
  sub_21C458F00();
  swift_bridgeObjectRelease();
  sub_21C458F00();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12[0];
}

uint64_t sub_21C454E94()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for LibraryBookSeriesInfo);
}

uint64_t sub_21C454EA0()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for BookInfo);
}

uint64_t sub_21C454EAC()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for AudiobookInfo);
}

uint64_t sub_21C454EB8()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for LibraryPDFInfo);
}

uint64_t sub_21C454EC4()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for AudiobookSeriesInfo);
}

uint64_t sub_21C454ED0()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for CommonLibraryAssetInfo);
}

uint64_t sub_21C454EDC()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for LibraryAudiobookSeriesInfo);
}

uint64_t sub_21C454EE8()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for PDFInfo);
}

uint64_t BookSeriesInfo.init(dataSource:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  sub_21C454F28(a1, a2);
  result = type metadata accessor for BookSeriesInfo();
  *(_QWORD *)(a2 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t sub_21C454F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527AD70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BookSeriesInfo()
{
  uint64_t result;

  result = qword_25527BD28;
  if (!qword_25527BD28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BookSeriesInfo.init(dataSource:additionalStoreAssetsForEnrichment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_21C454F28(a1, a3);
  result = type metadata accessor for BookSeriesInfo();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t BookSeriesInfo.contentKind.getter()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = swift_getKeyPath();
  sub_21C423724(KeyPath, v1);
  swift_release();
  return swift_release();
}

void BookSeriesInfo.seriesType.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BookSeriesInfo.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C45505C(v1, a1);
}

uint64_t sub_21C45505C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_21C3E344C(&qword_25527AD70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t BookSeriesInfo.additionalStoreAssetsForEnrichment.getter()
{
  type metadata accessor for BookSeriesInfo();
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C4550C4()
{
  return sub_21C3E871C(&qword_25527A398, (uint64_t (*)(uint64_t))type metadata accessor for BookInfo, (uint64_t)&protocol conformance descriptor for BookInfo);
}

uint64_t sub_21C4550F0()
{
  return sub_21C3E871C(&qword_25527B250, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
}

void sub_21C45511C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_21C455128()
{
  uint64_t KeyPath;
  uint64_t v1;

  KeyPath = swift_getKeyPath();
  v1 = swift_getKeyPath();
  sub_21C423724(KeyPath, v1);
  swift_release();
  return swift_release();
}

uint64_t sub_21C455188()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_21C455194(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527BC80, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C4551D0()
{
  return sub_21C3E871C(&qword_25527B248, (uint64_t (*)(uint64_t))type metadata accessor for LibraryBookSeriesInfo, (uint64_t)&protocol conformance descriptor for LibraryBookSeriesInfo);
}

uint64_t sub_21C4551FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_21C45505C(v1, a1);
}

uint64_t sub_21C455208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = sub_21C454F28(a1, a3);
  *(_QWORD *)(a3 + *(int *)(a2 + 20)) = 0;
  return result;
}

uint64_t sub_21C455238(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527BCC0, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C455274(uint64_t a1)
{
  uint64_t result;

  result = sub_21C3E871C(&qword_25527BCC8, (uint64_t (*)(uint64_t))type metadata accessor for BookSeriesInfo, (uint64_t)&protocol conformance descriptor for BookSeriesInfo);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21C4552B0()
{
  return sub_21C454D2C((uint64_t (*)(_QWORD))type metadata accessor for BookSeriesInfo);
}

char *initializeBufferWithCopyOfBuffer for BookSeriesInfo(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v20[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    sub_21C3E344C(&qword_25527AD70);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v21 = *a2;
      *(_QWORD *)a1 = *a2;
      v22 = v21;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v8;
      v9 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v9;
      v10 = a2[5];
      *((_QWORD *)a1 + 4) = a2[4];
      *((_QWORD *)a1 + 5) = v10;
      v11 = a2[7];
      *((_QWORD *)a1 + 6) = a2[6];
      *((_QWORD *)a1 + 7) = v11;
      v12 = a2[9];
      *((_QWORD *)a1 + 8) = a2[8];
      *((_QWORD *)a1 + 9) = v12;
      *((_QWORD *)a1 + 10) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v14 = v13[14];
      v15 = &a1[v14];
      v16 = (char *)a2 + v14;
      v17 = sub_21C458BF4();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      *(_QWORD *)&a1[v13[15]] = *(char **)((char *)a2 + v13[15]);
      v35 = v13[16];
      v36 = &a1[v35];
      v37 = (char *)a2 + v35;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *(_QWORD *)&a1[v13[17]] = *(char **)((char *)a2 + v13[17]);
      a1[v13[18]] = *((_BYTE *)a2 + v13[18]);
      *(_QWORD *)&a1[v13[19]] = *(char **)((char *)a2 + v13[19]);
      a1[v13[20]] = *((_BYTE *)a2 + v13[20]);
      a1[v13[21]] = *((_BYTE *)a2 + v13[21]);
      v38 = v13[22];
      v39 = &a1[v38];
      v40 = (char *)a2 + v38;
      v41 = *((_QWORD *)v40 + 1);
      *(_QWORD *)v39 = *(_QWORD *)v40;
      *((_QWORD *)v39 + 1) = v41;
      v39[16] = v40[16];
      v42 = v13[23];
      v43 = &a1[v42];
      v44 = (char *)a2 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      *(_QWORD *)&a1[v13[24]] = *(char **)((char *)a2 + v13[24]);
      a1[v13[25]] = *((_BYTE *)a2 + v13[25]);
      v45 = type metadata accessor for LibraryBookSeriesInfo();
      a1[*(int *)(v45 + 20)] = *((_BYTE *)a2 + *(int *)(v45 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v23;
      v24 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v24;
      v25 = a2[5];
      *((_QWORD *)a1 + 4) = a2[4];
      *((_QWORD *)a1 + 5) = v25;
      v26 = a2[7];
      *((_QWORD *)a1 + 6) = a2[6];
      *((_QWORD *)a1 + 7) = v26;
      v27 = a2[9];
      *((_QWORD *)a1 + 8) = a2[8];
      *((_QWORD *)a1 + 9) = v27;
      *((_QWORD *)a1 + 10) = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v29 = v28[14];
      v30 = &a1[v29];
      v31 = (char *)a2 + v29;
      v32 = sub_21C458BF4();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      *(_QWORD *)&a1[v28[15]] = *(char **)((char *)a2 + v28[15]);
      v46 = v28[16];
      v47 = &a1[v46];
      v48 = (char *)a2 + v46;
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      *(_QWORD *)&a1[v28[17]] = *(char **)((char *)a2 + v28[17]);
      a1[v28[18]] = *((_BYTE *)a2 + v28[18]);
      *(_QWORD *)&a1[v28[19]] = *(char **)((char *)a2 + v28[19]);
      a1[v28[20]] = *((_BYTE *)a2 + v28[20]);
      a1[v28[21]] = *((_BYTE *)a2 + v28[21]);
      v49 = v28[22];
      v50 = &a1[v49];
      v51 = (char *)a2 + v49;
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v50[16] = v51[16];
      v53 = v28[23];
      v54 = &a1[v53];
      v55 = (char *)a2 + v53;
      *(_QWORD *)v54 = *(_QWORD *)v55;
      v54[8] = v55[8];
      *(_QWORD *)&a1[v28[24]] = *(char **)((char *)a2 + v28[24]);
      a1[v28[25]] = *((_BYTE *)a2 + v28[25]);
      v56 = type metadata accessor for LibraryBookSeriesInfo();
      a1[*(int *)(v56 + 20)] = *((_BYTE *)a2 + *(int *)(v56 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57 = *(int *)(sub_21C3E344C(&qword_25527AD68) + 48);
      v58 = *(char **)((char *)a2 + v57);
      *(_QWORD *)&a1[v57] = v58;
      v59 = v58;
    }
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(char **)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for BookSeriesInfo(void **a1)
{
  int EnumCaseMultiPayload;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  sub_21C3E344C(&qword_25527AD70);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v6 = *a1;
LABEL_8:

      return swift_bridgeObjectRelease();
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = (char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 56);
      v8 = sub_21C458BF4();
      v9 = *(_QWORD *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AFA8) + 56);
      v4 = sub_21C458BF4();
      v5 = *(_QWORD *)(v4 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
        (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = *(void **)((char *)a1 + *(int *)(sub_21C3E344C(&qword_25527AD68) + 48));
      goto LABEL_8;
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BookSeriesInfo(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v59;

  sub_21C3E344C(&qword_25527AD70);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v19 = *(void **)a2;
    *a1 = *(_QWORD *)a2;
    v20 = v19;
  }
  else
  {
    v59 = a3;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v7;
      v8 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v8;
      v9 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v9;
      v10 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v10;
      v11 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v11;
      a1[10] = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v13 = v12[14];
      v14 = (char *)a1 + v13;
      v15 = (const void *)(a2 + v13);
      v16 = sub_21C458BF4();
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      *(_QWORD *)((char *)a1 + v12[15]) = *(_QWORD *)(a2 + v12[15]);
      v33 = v12[16];
      v34 = (char *)a1 + v33;
      v35 = a2 + v33;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = *(_BYTE *)(v35 + 8);
      *(_QWORD *)((char *)a1 + v12[17]) = *(_QWORD *)(a2 + v12[17]);
      *((_BYTE *)a1 + v12[18]) = *(_BYTE *)(a2 + v12[18]);
      *(_QWORD *)((char *)a1 + v12[19]) = *(_QWORD *)(a2 + v12[19]);
      *((_BYTE *)a1 + v12[20]) = *(_BYTE *)(a2 + v12[20]);
      *((_BYTE *)a1 + v12[21]) = *(_BYTE *)(a2 + v12[21]);
      v36 = v12[22];
      v37 = (char *)a1 + v36;
      v38 = a2 + v36;
      v39 = *(_QWORD *)(v38 + 8);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *((_QWORD *)v37 + 1) = v39;
      v37[16] = *(_BYTE *)(v38 + 16);
      v40 = v12[23];
      v41 = (char *)a1 + v40;
      v42 = a2 + v40;
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = *(_BYTE *)(v42 + 8);
      *(_QWORD *)((char *)a1 + v12[24]) = *(_QWORD *)(a2 + v12[24]);
      *((_BYTE *)a1 + v12[25]) = *(_BYTE *)(a2 + v12[25]);
      v43 = type metadata accessor for LibraryBookSeriesInfo();
      *((_BYTE *)a1 + *(int *)(v43 + 20)) = *(_BYTE *)(a2 + *(int *)(v43 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v21 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v21;
      v22 = *(_QWORD *)(a2 + 24);
      a1[2] = *(_QWORD *)(a2 + 16);
      a1[3] = v22;
      v23 = *(_QWORD *)(a2 + 40);
      a1[4] = *(_QWORD *)(a2 + 32);
      a1[5] = v23;
      v24 = *(_QWORD *)(a2 + 56);
      a1[6] = *(_QWORD *)(a2 + 48);
      a1[7] = v24;
      v25 = *(_QWORD *)(a2 + 72);
      a1[8] = *(_QWORD *)(a2 + 64);
      a1[9] = v25;
      a1[10] = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v27 = v26[14];
      v28 = (char *)a1 + v27;
      v29 = (const void *)(a2 + v27);
      v30 = sub_21C458BF4();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      *(_QWORD *)((char *)a1 + v26[15]) = *(_QWORD *)(a2 + v26[15]);
      v44 = v26[16];
      v45 = (char *)a1 + v44;
      v46 = a2 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = *(_BYTE *)(v46 + 8);
      *(_QWORD *)((char *)a1 + v26[17]) = *(_QWORD *)(a2 + v26[17]);
      *((_BYTE *)a1 + v26[18]) = *(_BYTE *)(a2 + v26[18]);
      *(_QWORD *)((char *)a1 + v26[19]) = *(_QWORD *)(a2 + v26[19]);
      *((_BYTE *)a1 + v26[20]) = *(_BYTE *)(a2 + v26[20]);
      *((_BYTE *)a1 + v26[21]) = *(_BYTE *)(a2 + v26[21]);
      v47 = v26[22];
      v48 = (char *)a1 + v47;
      v49 = a2 + v47;
      v50 = *(_QWORD *)(v49 + 8);
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *((_QWORD *)v48 + 1) = v50;
      v48[16] = *(_BYTE *)(v49 + 16);
      v51 = v26[23];
      v52 = (char *)a1 + v51;
      v53 = a2 + v51;
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = *(_BYTE *)(v53 + 8);
      *(_QWORD *)((char *)a1 + v26[24]) = *(_QWORD *)(a2 + v26[24]);
      *((_BYTE *)a1 + v26[25]) = *(_BYTE *)(a2 + v26[25]);
      v54 = type metadata accessor for LibraryBookSeriesInfo();
      *((_BYTE *)a1 + *(int *)(v54 + 20)) = *(_BYTE *)(a2 + *(int *)(v54 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v55 = *(int *)(sub_21C3E344C(&qword_25527AD68) + 48);
      v56 = *(void **)(a2 + v55);
      *(_QWORD *)((char *)a1 + v55) = v56;
      v57 = v56;
    }
    a3 = v59;
  }
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BookSeriesInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;

  if (a1 != a2)
  {
    sub_21C456348((uint64_t)a1);
    sub_21C3E344C(&qword_25527AD70);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = (void *)*a2;
      *a1 = *a2;
      v15 = v14;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v8 = v7[14];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_21C458BF4();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_QWORD *)((char *)a1 + v7[15]) = *(_QWORD *)((char *)a2 + v7[15]);
      v23 = v7[16];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = *(_QWORD *)v25;
      v24[8] = v25[8];
      *(_QWORD *)v24 = v26;
      *(_QWORD *)((char *)a1 + v7[17]) = *(_QWORD *)((char *)a2 + v7[17]);
      *((_BYTE *)a1 + v7[18]) = *((_BYTE *)a2 + v7[18]);
      *(_QWORD *)((char *)a1 + v7[19]) = *(_QWORD *)((char *)a2 + v7[19]);
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      *((_BYTE *)a1 + v7[21]) = *((_BYTE *)a2 + v7[21]);
      v27 = v7[22];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      *(_QWORD *)v28 = *(_QWORD *)v29;
      *((_QWORD *)v28 + 1) = *((_QWORD *)v29 + 1);
      v28[16] = v29[16];
      v30 = v7[23];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)v31 = v33;
      *(_QWORD *)((char *)a1 + v7[24]) = *(_QWORD *)((char *)a2 + v7[24]);
      *((_BYTE *)a1 + v7[25]) = *((_BYTE *)a2 + v7[25]);
      v34 = type metadata accessor for LibraryBookSeriesInfo();
      *((_BYTE *)a1 + *(int *)(v34 + 20)) = *((_BYTE *)a2 + *(int *)(v34 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v17 = v16[14];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = sub_21C458BF4();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(_QWORD *)((char *)a1 + v16[15]) = *(_QWORD *)((char *)a2 + v16[15]);
      v35 = v16[16];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = *(_QWORD *)v37;
      v36[8] = v37[8];
      *(_QWORD *)v36 = v38;
      *(_QWORD *)((char *)a1 + v16[17]) = *(_QWORD *)((char *)a2 + v16[17]);
      *((_BYTE *)a1 + v16[18]) = *((_BYTE *)a2 + v16[18]);
      *(_QWORD *)((char *)a1 + v16[19]) = *(_QWORD *)((char *)a2 + v16[19]);
      *((_BYTE *)a1 + v16[20]) = *((_BYTE *)a2 + v16[20]);
      *((_BYTE *)a1 + v16[21]) = *((_BYTE *)a2 + v16[21]);
      v39 = v16[22];
      v40 = (char *)a1 + v39;
      v41 = (char *)a2 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
      v40[16] = v41[16];
      v42 = v16[23];
      v43 = (char *)a1 + v42;
      v44 = (char *)a2 + v42;
      v45 = *(_QWORD *)v44;
      v43[8] = v44[8];
      *(_QWORD *)v43 = v45;
      *(_QWORD *)((char *)a1 + v16[24]) = *(_QWORD *)((char *)a2 + v16[24]);
      *((_BYTE *)a1 + v16[25]) = *((_BYTE *)a2 + v16[25]);
      v46 = type metadata accessor for LibraryBookSeriesInfo();
      *((_BYTE *)a1 + *(int *)(v46 + 20)) = *((_BYTE *)a2 + *(int *)(v46 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v47 = *(int *)(sub_21C3E344C(&qword_25527AD68) + 48);
      v48 = *(void **)((char *)a2 + v47);
      *(_QWORD *)((char *)a1 + v47) = v48;
      v49 = v48;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_21C456348(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_21C3E344C(&qword_25527AD70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for BookSeriesInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_21C3E344C(&qword_25527AD70);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v15 = (int *)sub_21C3E344C(&qword_25527AFA8);
    v16 = v15[14];
    v17 = &a1[v16];
    v18 = &a2[v16];
    v19 = sub_21C458BF4();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_QWORD *)&a1[v15[15]] = *(_QWORD *)&a2[v15[15]];
    v33 = v15[16];
    v34 = &a1[v33];
    v35 = &a2[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    *(_QWORD *)&a1[v15[17]] = *(_QWORD *)&a2[v15[17]];
    a1[v15[18]] = a2[v15[18]];
    *(_QWORD *)&a1[v15[19]] = *(_QWORD *)&a2[v15[19]];
    a1[v15[20]] = a2[v15[20]];
    a1[v15[21]] = a2[v15[21]];
    v36 = v15[22];
    v37 = &a1[v36];
    v38 = &a2[v36];
    *(_OWORD *)v37 = *(_OWORD *)v38;
    v37[16] = v38[16];
    v39 = v15[23];
    v40 = &a1[v39];
    v41 = &a2[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    *(_QWORD *)&a1[v15[24]] = *(_QWORD *)&a2[v15[24]];
    a1[v15[25]] = a2[v15[25]];
    v42 = type metadata accessor for LibraryBookSeriesInfo();
    a1[*(int *)(v42 + 20)] = a2[*(int *)(v42 + 20)];
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v8 = (int *)sub_21C3E344C(&qword_25527AFA8);
    v9 = v8[14];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_21C458BF4();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_21C3E344C(&qword_25527A2D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_QWORD *)&a1[v8[15]] = *(_QWORD *)&a2[v8[15]];
    v22 = v8[16];
    v23 = &a1[v22];
    v24 = &a2[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)&a1[v8[17]] = *(_QWORD *)&a2[v8[17]];
    a1[v8[18]] = a2[v8[18]];
    *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&a2[v8[19]];
    a1[v8[20]] = a2[v8[20]];
    a1[v8[21]] = a2[v8[21]];
    v25 = v8[22];
    v26 = &a1[v25];
    v27 = &a2[v25];
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v28 = v8[23];
    v29 = &a1[v28];
    v30 = &a2[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_QWORD *)&a1[v8[24]] = *(_QWORD *)&a2[v8[24]];
    a1[v8[25]] = a2[v8[25]];
    v31 = type metadata accessor for LibraryBookSeriesInfo();
    a1[*(int *)(v31 + 20)] = a2[*(int *)(v31 + 20)];
    v32 = sub_21C3E344C(&qword_25527AD68);
    *(_QWORD *)&a1[*(int *)(v32 + 48)] = *(_QWORD *)&a2[*(int *)(v32 + 48)];
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_13:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for BookSeriesInfo(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  if (a1 != a2)
  {
    sub_21C456348((uint64_t)a1);
    v6 = sub_21C3E344C(&qword_25527AD70);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v15 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v16 = v15[14];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = sub_21C458BF4();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_QWORD *)&a1[v15[15]] = *(_QWORD *)&a2[v15[15]];
      v33 = v15[16];
      v34 = &a1[v33];
      v35 = &a2[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      *(_QWORD *)&a1[v15[17]] = *(_QWORD *)&a2[v15[17]];
      a1[v15[18]] = a2[v15[18]];
      *(_QWORD *)&a1[v15[19]] = *(_QWORD *)&a2[v15[19]];
      a1[v15[20]] = a2[v15[20]];
      a1[v15[21]] = a2[v15[21]];
      v36 = v15[22];
      v37 = &a1[v36];
      v38 = &a2[v36];
      *(_OWORD *)v37 = *(_OWORD *)v38;
      v37[16] = v38[16];
      v39 = v15[23];
      v40 = &a1[v39];
      v41 = &a2[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      *(_QWORD *)&a1[v15[24]] = *(_QWORD *)&a2[v15[24]];
      a1[v15[25]] = a2[v15[25]];
      v42 = type metadata accessor for LibraryBookSeriesInfo();
      a1[*(int *)(v42 + 20)] = a2[*(int *)(v42 + 20)];
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      v8 = (int *)sub_21C3E344C(&qword_25527AFA8);
      v9 = v8[14];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = sub_21C458BF4();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_21C3E344C(&qword_25527A2D0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_QWORD *)&a1[v8[15]] = *(_QWORD *)&a2[v8[15]];
      v22 = v8[16];
      v23 = &a1[v22];
      v24 = &a2[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      *(_QWORD *)&a1[v8[17]] = *(_QWORD *)&a2[v8[17]];
      a1[v8[18]] = a2[v8[18]];
      *(_QWORD *)&a1[v8[19]] = *(_QWORD *)&a2[v8[19]];
      a1[v8[20]] = a2[v8[20]];
      a1[v8[21]] = a2[v8[21]];
      v25 = v8[22];
      v26 = &a1[v25];
      v27 = &a2[v25];
      *(_OWORD *)v26 = *(_OWORD *)v27;
      v26[16] = v27[16];
      v28 = v8[23];
      v29 = &a1[v28];
      v30 = &a2[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      *(_QWORD *)&a1[v8[24]] = *(_QWORD *)&a2[v8[24]];
      a1[v8[25]] = a2[v8[25]];
      v31 = type metadata accessor for LibraryBookSeriesInfo();
      a1[*(int *)(v31 + 20)] = a2[*(int *)(v31 + 20)];
      v32 = sub_21C3E344C(&qword_25527AD68);
      *(_QWORD *)&a1[*(int *)(v32 + 48)] = *(_QWORD *)&a2[*(int *)(v32 + 48)];
LABEL_13:
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
LABEL_14:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BookSeriesInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C456B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_21C3E344C(&qword_25527AD70);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for BookSeriesInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21C456C0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_21C3E344C(&qword_25527AD70);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_21C456C88()
{
  unint64_t v0;

  sub_21C456CF8(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_21C456CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25527BD38[0])
  {
    v2 = type metadata accessor for LibraryBookSeriesInfo();
    v3 = type metadata accessor for MBookSeries();
    v5 = type metadata accessor for ContentDataSource(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, qword_25527BD38);
  }
}

uint64_t sub_21C456D5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t BooksUIKitFeatureFlag.hash(into:)()
{
  return sub_21C4595A8();
}

uint64_t BooksUIKitFeatureFlag.init(rawValue:)@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v2 = sub_21C459368();
  v4 = v3;
  if (v2 == sub_21C459368() && v4 == v5)
  {
    v9 = 0;
    goto LABEL_10;
  }
  v7 = sub_21C4594F4();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v9 = 0;
  if ((v7 & 1) == 0)
  {
    v10 = sub_21C459368();
    v12 = v11;
    if (v10 == sub_21C459368() && v12 == v13)
    {
      v9 = 1;
LABEL_10:
      result = swift_bridgeObjectRelease_n();
      goto LABEL_11;
    }
    v14 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      v9 = 1;
      goto LABEL_11;
    }
    v9 = 2;
    v15 = sub_21C459368();
    v17 = v16;
    if (v15 == sub_21C459368() && v17 == v18)
      goto LABEL_10;
    v19 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      goto LABEL_11;
    v20 = sub_21C459368();
    v22 = v21;
    v9 = 3;
    if (v20 == sub_21C459368() && v22 == v23)
      goto LABEL_10;
    v24 = sub_21C4594F4();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      v9 = 3;
    else
      v9 = 4;
  }
LABEL_11:
  *a1 = v9;
  return result;
}

uint64_t BooksUIKitFeatureFlag.hashValue.getter()
{
  sub_21C45959C();
  sub_21C4595A8();
  return sub_21C4595C0();
}

uint64_t BooksUIKitFeatureFlag.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(double))((char *)sub_21C45706C + 4 * byte_21C45ED80[*v0]))(COERCE_DOUBLE("uip_floating_tab_bar"));
}

double sub_21C45706C@<D0>(int64x2_t *a1@<X8>)
{
  int64x2_t v1;

  v1 = vdupq_n_s64(0x19uLL);
  v1.i64[0] = (uint64_t)"uip_floating_tab_bar_only";
  *a1 = v1;
  a1[1].i8[0] = 2;
  return *(double *)v1.i64;
}

uint64_t sub_21C4570B8(unsigned __int8 *a1)
{
  return sub_21C3F8004(*a1);
}

uint64_t sub_21C4570C4@<X0>(char *a1@<X8>)
{
  return BooksUIKitFeatureFlag.init(rawValue:)(a1);
}

uint64_t sub_21C4570F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(double))((char *)sub_21C457124 + 4 * byte_21C45ED84[*v0]))(COERCE_DOUBLE("uip_floating_tab_bar"));
}

double sub_21C457124@<D0>(int64x2_t *a1@<X8>)
{
  int64x2_t v1;

  v1 = vdupq_n_s64(0x19uLL);
  v1.i64[0] = (uint64_t)"uip_floating_tab_bar_only";
  *a1 = v1;
  a1[1].i8[0] = 2;
  return *(double *)v1.i64;
}

const char *sub_21C457170()
{
  return "UIKit";
}

uint64_t sub_21C457184()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_21C4571AC + 4 * byte_21C45ED88[*v0]))("uip_floating_tab_bar", 20);
}

const char *sub_21C4571AC()
{
  return "uip_floating_tab_bar_only";
}

void sub_21C4571E0()
{
  uint64_t v0;

  v0 = MEMORY[0x24BEE4AF8];
  sub_21C3FD5FC(0, 4, 0);
  __asm { BR              X9; loc_21C457274 }
}

void *static BooksUIKitFeatureFlag.allCases.getter()
{
  return &unk_24E03F508;
}

BookFoundation::BooksUIKitFeatureFlag_optional __swiftcall BooksUIKitFeatureFlag.init(key:)(Swift::String key)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  char v8;
  BookFoundation::BooksUIKitFeatureFlag_optional result;

  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  v4 = v1;
  if (qword_255279F48 != -1)
    swift_once();
  v5 = off_25527BD68;
  if (*((_QWORD *)off_25527BD68 + 2) && (v6 = sub_21C45191C(countAndFlagsBits, (uint64_t)object), (v7 & 1) != 0))
    v8 = *(_BYTE *)(v5[7] + v6);
  else
    v8 = 4;
  result.value = swift_bridgeObjectRelease();
  *v4 = v8;
  return result;
}

void sub_21C4575F4(_QWORD *a1@<X8>)
{
  *a1 = &unk_24E03F530;
}

Swift::Bool __swiftcall isFeatureEnabled(_:)(BookFoundation::BooksUIKitFeatureFlag a1)
{
  char v1;
  char v2;
  _BYTE v4[24];
  ValueMetadata *v5;
  unint64_t v6;

  v1 = *(_BYTE *)a1;
  v5 = &type metadata for BooksUIKitFeatureFlag;
  v6 = sub_21C457658();
  v4[0] = v1;
  v2 = sub_21C458CFC();
  sub_21C3E2754((uint64_t)v4);
  return v2 & 1;
}

unint64_t sub_21C457658()
{
  unint64_t result;

  result = qword_25527BD70;
  if (!qword_25527BD70)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksUIKitFeatureFlag, &type metadata for BooksUIKitFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BD70);
  }
  return result;
}

unint64_t sub_21C4576A0()
{
  unint64_t result;

  result = qword_25527BD78;
  if (!qword_25527BD78)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksUIKitFeatureFlag, &type metadata for BooksUIKitFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BD78);
  }
  return result;
}

_UNKNOWN **sub_21C4576E4()
{
  return &protocol witness table for FeatureFlagsDomain.UIKit;
}

unint64_t sub_21C4576F0(uint64_t a1)
{
  unint64_t result;

  result = sub_21C457714();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_21C457714()
{
  unint64_t result;

  result = qword_25527BDA8;
  if (!qword_25527BDA8)
  {
    result = MEMORY[0x22077C1E0](&protocol conformance descriptor for BooksUIKitFeatureFlag, &type metadata for BooksUIKitFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_25527BDA8);
  }
  return result;
}

unint64_t sub_21C45775C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25527BDB0;
  if (!qword_25527BDB0)
  {
    v1 = sub_21C3E35C0(&qword_25527BDB8);
    result = MEMORY[0x22077C1E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25527BDB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BooksUIKitFeatureFlag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21C4577F4 + 4 * byte_21C45EDA1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21C457828 + 4 * byte_21C45ED9C[v4]))();
}

uint64_t sub_21C457828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C457830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21C457838);
  return result;
}

uint64_t sub_21C457844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21C45784CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21C457850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21C457858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BooksUIKitFeatureFlag()
{
  return &type metadata for BooksUIKitFeatureFlag;
}

id sub_21C457874()
{
  return sub_21C45816C(&qword_25527A0D8);
}

void *sub_21C457880()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21C3E344C(&qword_25527A0F8);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C457A28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_21C3E344C(&qword_25527A0F0);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_21C3E5528(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_21C3E8498(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C457BE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_21C3E344C(&qword_25527A0E8);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C457D98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_21C3E344C(&qword_25527ADE0);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_21C418474(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_21C3E5528(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_21C3E8498(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C457F7C()
{
  return sub_21C4584B0(&qword_25527A0E0);
}

void *sub_21C457F88()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21C3E344C(&qword_25527A0A0);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C458130()
{
  return sub_21C4584B0(&qword_25527A0D0);
}

id sub_21C45813C()
{
  return sub_21C45816C(&qword_25527A0C8);
}

id sub_21C458148()
{
  return sub_21C45816C(&qword_25527A0C0);
}

id sub_21C458154()
{
  return sub_21C45816C(&qword_25527A0B8);
}

id sub_21C458160()
{
  return sub_21C45816C(&qword_25527A0A8);
}

id sub_21C45816C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_21C3E344C(a1);
  v3 = *v1;
  v4 = sub_21C459440();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C458314()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_21C3E344C(&qword_25527A098);
  v2 = *v0;
  v3 = sub_21C459440();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_21C4584B0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_21C3E344C(a1);
  v3 = *v1;
  v4 = sub_21C459440();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = *v17;
    v18 = v17[1];
    LOBYTE(v17) = *(_BYTE *)(*(_QWORD *)(v3 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    *v20 = v19;
    v20[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16) = (_BYTE)v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_21C458650(uint64_t a1, char a2, _QWORD *a3)
{
  _BYTE *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  LOBYTE(v7) = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_21C45191C(v9, v8);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_21C3E6A94(v16, v4 & 1);
    v11 = sub_21C45191C(v9, v8);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_21C459554();
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_21C4584B0(&qword_25527A090);
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    sub_21C3E344C(&qword_25527ABC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v8;
  *(_BYTE *)(v22[7] + v11) = v7;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_21C459350();
    sub_21C458F00();
    sub_21C4593EC();
    sub_21C458F00();
    sub_21C459404();
    __break(1u);
    sub_21C4589E4();
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v4 = (_BYTE *)(a1 + 72);
    v7 = 1;
    while (v7 < *(_QWORD *)(a1 + 16))
    {
      v26 = *v4;
      v9 = *((_QWORD *)v4 - 2);
      v8 = *((_QWORD *)v4 - 1);
      swift_bridgeObjectRetain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_21C45191C(v9, v8);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      v17 = v29;
      if (v27[3] < v32)
      {
        sub_21C3E6A94(v32, 1);
        v28 = sub_21C45191C(v9, v8);
        if ((v17 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((v17 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v8;
      *(_BYTE *)(v34[7] + v28) = v26;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v7;
      v34[2] = v37;
      v4 += 24;
      if (v6 == v7)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_21C4589E4()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_21C4589F0()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_21C4589FC()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_21C458A08()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_21C458A14()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_21C458A20()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_21C458A2C()
{
  return MEMORY[0x24BDCB668]();
}

uint64_t sub_21C458A38()
{
  return MEMORY[0x24BDCB6F8]();
}

uint64_t sub_21C458A44()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_21C458A50()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_21C458A5C()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_21C458A68()
{
  return MEMORY[0x24BDCB8F0]();
}

uint64_t sub_21C458A74()
{
  return MEMORY[0x24BDCB918]();
}

uint64_t sub_21C458A80()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t sub_21C458A8C()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t sub_21C458A98()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t sub_21C458AA4()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t sub_21C458AB0()
{
  return MEMORY[0x24BDCBA58]();
}

uint64_t sub_21C458ABC()
{
  return MEMORY[0x24BDCBA60]();
}

uint64_t sub_21C458AC8()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_21C458AD4()
{
  return MEMORY[0x24BDCBAD0]();
}

uint64_t sub_21C458AE0()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_21C458AEC()
{
  return MEMORY[0x24BDCBB28]();
}

uint64_t sub_21C458AF8()
{
  return MEMORY[0x24BDCBB30]();
}

uint64_t sub_21C458B04()
{
  return MEMORY[0x24BDCBB68]();
}

uint64_t sub_21C458B10()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_21C458B1C()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t sub_21C458B28()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t sub_21C458B34()
{
  return MEMORY[0x24BDCBD28]();
}

uint64_t sub_21C458B40()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t sub_21C458B4C()
{
  return MEMORY[0x24BDCBD58]();
}

uint64_t sub_21C458B58()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t sub_21C458B64()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_21C458B70()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_21C458B7C()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_21C458B88()
{
  return MEMORY[0x24BDCD750]();
}

uint64_t sub_21C458B94()
{
  return MEMORY[0x24BDCD778]();
}

uint64_t sub_21C458BA0()
{
  return MEMORY[0x24BDCD830]();
}

uint64_t sub_21C458BAC()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_21C458BB8()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t sub_21C458BC4()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_21C458BD0()
{
  return MEMORY[0x24BDCDA18]();
}

uint64_t sub_21C458BDC()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_21C458BE8()
{
  return MEMORY[0x24BDCDA80]();
}

uint64_t sub_21C458BF4()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_21C458C00()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_21C458C0C()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_21C458C18()
{
  return MEMORY[0x24BDCE2F8]();
}

uint64_t sub_21C458C24()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_21C458C30()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t sub_21C458C3C()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t sub_21C458C48()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_21C458C54()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_21C458C60()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_21C458C6C()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_21C458C78()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_21C458C84()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_21C458C90()
{
  return MEMORY[0x24BDCF040]();
}

uint64_t sub_21C458C9C()
{
  return MEMORY[0x24BDCF140]();
}

uint64_t sub_21C458CA8()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_21C458CB4()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_21C458CC0()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_21C458CCC()
{
  return MEMORY[0x24BDCF4D8]();
}

uint64_t sub_21C458CD8()
{
  return MEMORY[0x24BDCF4E0]();
}

uint64_t sub_21C458CE4()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_21C458CF0()
{
  return MEMORY[0x24BDCF760]();
}

uint64_t sub_21C458CFC()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_21C458D08()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_21C458D14()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_21C458D20()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_21C458D2C()
{
  return MEMORY[0x24BEE5438]();
}

uint64_t sub_21C458D38()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_21C458D44()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_21C458D50()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_21C458D5C()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t sub_21C458D68()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_21C458D74()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_21C458D80()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_21C458D8C()
{
  return MEMORY[0x24BEE0380]();
}

uint64_t sub_21C458D98()
{
  return MEMORY[0x24BEE03E8]();
}

uint64_t sub_21C458DA4()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_21C458DB0()
{
  return MEMORY[0x24BEE0470]();
}

uint64_t sub_21C458DBC()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_21C458DC8()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_21C458DD4()
{
  return MEMORY[0x24BEE0548]();
}

uint64_t sub_21C458DE0()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_21C458DEC()
{
  return MEMORY[0x24BEE0780]();
}

uint64_t sub_21C458DF8()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_21C458E04()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_21C458E10()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_21C458E1C()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_21C458E28()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_21C458E34()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_21C458E40()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_21C458E4C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_21C458E58()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_21C458E64()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_21C458E70()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_21C458E7C()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_21C458E88()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_21C458E94()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_21C458EA0()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_21C458EAC()
{
  return MEMORY[0x24BEE0A58]();
}

uint64_t sub_21C458EB8()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_21C458EC4()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_21C458ED0()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_21C458EDC()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_21C458EE8()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_21C458EF4()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_21C458F00()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_21C458F0C()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_21C458F18()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_21C458F24()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_21C458F30()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_21C458F3C()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_21C458F48()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_21C458F54()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_21C458F60()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_21C458F6C()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_21C458F78()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_21C458F84()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_21C458F90()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_21C458F9C()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_21C458FA8()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t sub_21C458FB4()
{
  return MEMORY[0x24BEE0EC0]();
}

uint64_t sub_21C458FC0()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t _sSY14BookFoundation12FeatureFlags0cD3Key8RawValueRpzrlE3keyAEvg_0()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_21C458FD8()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_21C458FE4()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t sub_21C458FF0()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t sub_21C458FFC()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t sub_21C459008()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_21C459014()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_21C459020()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_21C45902C()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_21C459038()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_21C459044()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_21C459050()
{
  return MEMORY[0x24BEE1170]();
}

uint64_t sub_21C45905C()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_21C459068()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_21C459074()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_21C459080()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_21C45908C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_21C459098()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_21C4590A4()
{
  return MEMORY[0x24BEE1290]();
}

uint64_t sub_21C4590B0()
{
  return MEMORY[0x24BDCFC08]();
}

uint64_t sub_21C4590BC()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_21C4590C8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_21C4590D4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_21C4590E0()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_21C4590EC()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_21C4590F8()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_21C459104()
{
  return MEMORY[0x24BEE6B98]();
}

uint64_t sub_21C459110()
{
  return MEMORY[0x24BEE6BB8]();
}

uint64_t sub_21C45911C()
{
  return MEMORY[0x24BEE6BC8]();
}

uint64_t sub_21C459128()
{
  return MEMORY[0x24BEE6BE8]();
}

uint64_t sub_21C459134()
{
  return MEMORY[0x24BDCFC58]();
}

uint64_t sub_21C459140()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_21C45914C()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_21C459158()
{
  return MEMORY[0x24BEE17F8]();
}

uint64_t sub_21C459164()
{
  return MEMORY[0x24BEE1848]();
}

uint64_t sub_21C459170()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_21C45917C()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_21C459188()
{
  return MEMORY[0x24BEE18F8]();
}

uint64_t sub_21C459194()
{
  return MEMORY[0x24BEE1900]();
}

uint64_t sub_21C4591A0()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_21C4591AC()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_21C4591B8()
{
  return MEMORY[0x24BEE1938]();
}

uint64_t sub_21C4591C4()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t sub_21C4591D0()
{
  return MEMORY[0x24BEE19A8]();
}

uint64_t sub_21C4591DC()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_21C4591E8()
{
  return MEMORY[0x24BEE1A00]();
}

uint64_t sub_21C4591F4()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_21C459200()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_21C45920C()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_21C459218()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_21C459224()
{
  return MEMORY[0x24BEE5650]();
}

uint64_t sub_21C459230()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_21C45923C()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_21C459248()
{
  return MEMORY[0x24BDD02E0]();
}

uint64_t sub_21C459254()
{
  return MEMORY[0x24BDD02E8]();
}

uint64_t sub_21C459260()
{
  return MEMORY[0x24BDD02F8]();
}

uint64_t sub_21C45926C()
{
  return MEMORY[0x24BDD0360]();
}

uint64_t sub_21C459278()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_21C459284()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_21C459290()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_21C45929C()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_21C4592A8()
{
  return MEMORY[0x24BDD0570]();
}

uint64_t sub_21C4592B4()
{
  return MEMORY[0x24BDD05A0]();
}

uint64_t sub_21C4592C0()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_21C4592CC()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_21C4592D8()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_21C4592E4()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_21C4592F0()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_21C4592FC()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_21C459308()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_21C459314()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_21C459320()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_21C45932C()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_21C459338()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_21C459344()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_21C459350()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_21C45935C()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_21C459368()
{
  return MEMORY[0x24BEE25B8]();
}

uint64_t sub_21C459374()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_21C459380()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_21C45938C()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_21C459398()
{
  return MEMORY[0x24BEE28C0]();
}

uint64_t sub_21C4593A4()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_21C4593B0()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_21C4593BC()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_21C4593C8()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_21C4593D4()
{
  return MEMORY[0x24BEE2B80]();
}

uint64_t sub_21C4593E0()
{
  return MEMORY[0x24BEE2BD8]();
}

uint64_t sub_21C4593EC()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_21C4593F8()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_21C459404()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_21C459410()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_21C45941C()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t sub_21C459428()
{
  return MEMORY[0x24BEE2F70]();
}

uint64_t sub_21C459434()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_21C459440()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_21C45944C()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_21C459458()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_21C459464()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_21C459470()
{
  return MEMORY[0x24BEE30D0]();
}

uint64_t sub_21C45947C()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_21C459488()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_21C459494()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_21C4594A0()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_21C4594AC()
{
  return MEMORY[0x24BEE3398]();
}

uint64_t sub_21C4594B8()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_21C4594C4()
{
  return MEMORY[0x24BEE34E8]();
}

uint64_t sub_21C4594D0()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_21C4594DC()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_21C4594E8()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_21C4594F4()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_21C459500()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_21C45950C()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_21C459518()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t sub_21C459524()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t sub_21C459530()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_21C45953C()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_21C459548()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_21C459554()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_21C459560()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_21C45956C()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_21C459578()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_21C459584()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_21C459590()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_21C45959C()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_21C4595A8()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_21C4595B4()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_21C4595C0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_21C4595CC()
{
  return MEMORY[0x24BEE4358]();
}

uint64_t sub_21C4595D8()
{
  return MEMORY[0x24BEE4360]();
}

uint64_t sub_21C4595E4()
{
  return MEMORY[0x24BEE43D0]();
}

uint64_t sub_21C4595F0()
{
  return MEMORY[0x24BEE43D8]();
}

uint64_t sub_21C4595FC()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_21C459608()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_21C459614()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_21C459620()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_21C45962C()
{
  return MEMORY[0x24BEE4A98]();
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x24BDAC7E0](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x24BEE4B48]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x24BEE4B50]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x24BDAF4D0]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

