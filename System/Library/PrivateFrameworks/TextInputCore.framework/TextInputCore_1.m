void KB::FilterNondominantCorrectionOfMoreWords::~FilterNondominantCorrectionOfMoreWords(KB::FilterNondominantCorrectionOfMoreWords *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterNondominantCorrectionOfMoreWords::filter_description(KB::FilterNondominantCorrectionOfMoreWords *this)
{
  return "FilterNondominantCorrectionOfMoreWords";
}

_QWORD *KB::FilterNondominantCorrectionOfMoreWords::filter_candidates(KB::FilterNondominantCorrectionOfMoreWords *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  int matched;

  matched = KB::FilterNondominantCorrectionOfMoreWords::required_candidate_input_word_match_count((uint64_t)this, a2, a3, (uint64_t)a4);
  return KB::CandidateFilter::remove_candidates_with_input_mismatch((uint64_t)this, (uint64_t)a2, matched, (uint64_t)a3, (uint64_t)a4, (uint64_t)"match length is equal to the max input length which has a boosted omega > top candidate");
}

uint64_t KB::FilterNondominantCorrectionOfMoreWords::required_candidate_input_word_match_count(uint64_t a1, KB::Candidate **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  KB::Candidate *v10;
  float v11;
  uint64_t v12;
  float v13;
  KB::Candidate *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v22;
  uint64_t v23;
  _BYTE v24[8];
  void *v25;
  _BYTE v26[6];
  char v27;
  void *v28;
  _BYTE v29[6];
  char v30;
  void *v31;
  _BYTE v32[6];
  char v33;
  void *v34;
  _BYTE v35[6];
  char v36;
  void *v37;
  _BYTE v38[8];
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*a2 == a2[1])
    return 0;
  v7 = *(_QWORD *)(a4 + 16);
  if (v7)
  {
    do
      v8 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v8 + 1, (unsigned int *)v7));
  }
  v9 = *(_QWORD *)(v7 + 8) + 144;
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v7);
  v10 = *a2;
  v11 = expf(*((float *)*a2 + 186));
  v23 = v9;
  v22 = KB::Candidate::num_words_matching_input(v10, a3, v9);
  v12 = 8;
  if (*a3 - (unint64_t)v22 > 1)
    v12 = 12;
  v13 = *(float *)(a1 + v12);
  KB::Candidate::capitalized_string(*a2, (uint64_t)v32);
  KB::String::String((KB::String *)v29, "");
  KB::String::replace_char((KB::String *)v32, (const KB::String *)v29, 39, (uint64_t)v35);
  KB::String::String((KB::String *)v26, "");
  KB::String::replace_char((KB::String *)v35, (const KB::String *)v26, 8217, (uint64_t)v38);
  if (v28 && v27 == 1)
    free(v28);
  if (v37 && v36 == 1)
    free(v37);
  if (v31 && v30 == 1)
    free(v31);
  if (v34 && v33 == 1)
    free(v34);
  v14 = *a2;
  if ((unint64_t)(0x1CAC083126E978D5 * ((a2[1] - *a2) >> 3)) < 2)
  {
    v15 = 0;
    goto LABEL_47;
  }
  v15 = 0;
  v16 = 2;
  v17 = 1;
  while (1)
  {
    KB::Candidate::capitalized_string((KB::Candidate *)((char *)v14 + 1000 * v17), (uint64_t)v29);
    KB::String::String((KB::String *)v26, "");
    KB::String::replace_char((KB::String *)v29, (const KB::String *)v26, 39, (uint64_t)v32);
    KB::String::String((KB::String *)v24, "");
    KB::String::replace_char((KB::String *)v32, (const KB::String *)v24, 8217, (uint64_t)v35);
    if (v25 && v24[6] == 1)
      free(v25);
    if (v34 && v33 == 1)
      free(v34);
    if (v28 && v27 == 1)
      free(v28);
    if (v31 && v30 == 1)
      free(v31);
    if (KB::String::equal((KB::String *)v38, (const KB::String *)v35, 1))
      goto LABEL_40;
    if ((float)(v13 * expf(*((float *)v14 + 250 * v17 + 186))) < v11)
      break;
    v18 = KB::Candidate::num_words_matching_input((_QWORD *)v14 + 125 * v17, a3, v23);
    if (v15 <= v18)
      v19 = v18;
    else
      v19 = v15;
    if (v18 <= v22)
      v15 = v15;
    else
      v15 = v19;
LABEL_40:
    if (v37 && v36 == 1)
      free(v37);
    v17 = v16;
    v14 = *a2;
    if (0x1CAC083126E978D5 * ((a2[1] - *a2) >> 3) <= (unint64_t)v16++)
      goto LABEL_47;
  }
  if (v37 && v36 == 1)
    free(v37);
LABEL_47:
  if (v39 && v38[6] == 1)
    free(v39);
  return v15;
}

void KB::FilterInputPrefixMismatch::~FilterInputPrefixMismatch(KB::FilterInputPrefixMismatch *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterInputPrefixMismatch::filter_description(KB::FilterInputPrefixMismatch *this)
{
  return "FilterInputPrefixMismatch";
}

void KB::FilterInputPrefixMismatch::filter_candidates(KB::FilterInputPrefixMismatch *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v7;
  const KB::String *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _BYTE *i;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  KB::Candidate *v22;
  KB::Candidate *v23;
  unint64_t v24;
  _BOOL8 v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[2];
  ByteString v36;
  _BYTE v37[8];
  void *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _BYTE v41[24];
  _BYTE *v42;
  void **v43;
  void *v44;
  _BYTE *v45;
  void *v46;
  _QWORD v47[126];

  v47[125] = *MEMORY[0x1E0C80C00];
  KB::Candidate::Candidate((KB::Candidate *)v47, a3);
  if (!v47[0])
    goto LABEL_73;
  v7 = v47[1] + 240 * v47[0];
  if ((*(_BYTE *)(v7 - 105) & 4) != 0)
  {
LABEL_21:
    KB::Candidate::capitalized_string((KB::Candidate *)v47, (uint64_t)&v45);
    v16 = WORD2(v45);
    if (!WORD2(v45))
    {
      KB::String::compute_length((unsigned __int16 *)&v45);
      v16 = WORD2(v45);
    }
    goto LABEL_23;
  }
  v8 = (const KB::String *)(v7 - 240);
  v9 = (unsigned int *)*((_QWORD *)a4 + 2);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    WTF::RefCounted<KB::DictionaryContainer>::deref(v9);
    v11 = (unsigned int *)*((_QWORD *)a4 + 2);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
      KB::DictionaryContainer::lookup((uint64_t)v11, v8, 0, 0, (uint64_t *)&v45);
      WTF::RefCounted<KB::DictionaryContainer>::deref(v11);
    }
    else
    {
      KB::DictionaryContainer::lookup(0, v8, 0, 0, (uint64_t *)&v45);
    }
    for (i = v45; ; i += 240)
    {
      if (i == v46)
      {
        v43 = (void **)&v45;
        std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v43);
        goto LABEL_13;
      }
      if ((i[107] & 0x10) != 0)
        break;
    }
    v43 = (void **)&v45;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v43);
    goto LABEL_21;
  }
LABEL_13:
  KB::Candidate::capitalized_string((KB::Candidate *)v47, (uint64_t)&v45);
  v14 = WORD2(v45);
  if (!WORD2(v45))
  {
    KB::String::compute_length((unsigned __int16 *)&v45);
    v14 = WORD2(v45);
  }
  KB::Word::capitalized_string(v8, (uint64_t)&v43);
  v15 = WORD2(v43);
  if (!WORD2(v43))
  {
    KB::String::compute_length((unsigned __int16 *)&v43);
    v15 = WORD2(v43);
  }
  v16 = v14 - ((v15 - *((_DWORD *)this + 2)) & ~((v15 - *((_DWORD *)this + 2)) >> 31));
  if (v44 && BYTE6(v43) == 1)
    free(v44);
LABEL_23:
  if (*((_QWORD *)this + 2) >= (unint64_t)(0x1CAC083126E978D5
                                                 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)))
    v17 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  else
    v17 = *((_QWORD *)this + 2);
  KB::String::String((KB::String *)&v43, (const KB::String *)&v45);
  if (!(_WORD)v43)
    goto LABEL_67;
  while (1)
  {
    v18 = *((_QWORD *)a4 + 2);
    if (v18)
    {
      do
        v19 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v19 + 1, (unsigned int *)v18));
    }
    v20 = *(_QWORD *)(v18 + 8) + 112;
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v18);
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v41, v20);
    KB::CandidateFilter::_sortkey_for_string((_LXLexicon *)&v43, a4, &v36);
    v35[0] = &v36;
    v35[1] = v41;
    v22 = *(KB::Candidate **)a2;
    v23 = (KB::Candidate *)*((_QWORD *)a2 + 1);
    if (*(KB::Candidate **)a2 == v23)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = KB::Candidate::sort_key(v22, (uint64_t)v41);
        v24 += KB::ByteString::starts_with((KB::ByteString *)v25, &v36);
        v22 = (KB::Candidate *)((char *)v22 + 1000);
      }
      while (v22 != v23);
    }
    if (v24 >= v17)
      break;
    v26 = WORD2(v43);
    if (!WORD2(v43))
    {
      KB::String::compute_length((unsigned __int16 *)&v43);
      v26 = WORD2(v43);
    }
    if (v16 >= v26)
      break;
    if (!v26)
    {
      KB::String::compute_length((unsigned __int16 *)&v43);
      LOWORD(v26) = WORD2(v43);
    }
    KB::String::shorten((KB::String *)&v43, (unsigned __int16)(v26 - 1), (uint64_t)v37);
    KB::String::operator=((uint64_t)&v43, (KB::String *)v37);
    if (v38 && v37[6] == 1)
      free(v38);
    if (v36.var0.var0.var0 >= 0xFu && v36.var0.var0.var1)
      MEMORY[0x1DF0A212C](v36.var0.var0.var1, 0x1000C8077774924);
    v28 = v42;
    if (v42 == v41)
    {
      v28 = v41;
      v29 = 4;
      goto LABEL_50;
    }
    if (v42)
    {
      v29 = 5;
LABEL_50:
      (*(void (**)(_QWORD *, uint64_t))(*v28 + 8 * v29))(v28, v27);
    }
    if (!(_WORD)v43)
      goto LABEL_67;
  }
  if (v24 < 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3))
  {
    v30 = *((_QWORD *)a4 + 7);
    v39[0] = &off_1EA0FE3A0;
    v39[1] = v35;
    v40 = v39;
    KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)a2, v30, (uint64_t)"FilterInputPrefixMismatch", v39);
    v31 = v40;
    if (v40 == v39)
    {
      v32 = 4;
      v31 = v39;
LABEL_58:
      (*(void (**)(_QWORD *, uint64_t))(*v31 + 8 * v32))(v31, v21);
    }
    else if (v40)
    {
      v32 = 5;
      goto LABEL_58;
    }
  }
  if (v36.var0.var0.var0 >= 0xFu && v36.var0.var0.var1)
    MEMORY[0x1DF0A212C](v36.var0.var0.var1, 0x1000C8077774924);
  v33 = v42;
  if (v42 == v41)
  {
    v34 = 4;
    v33 = v41;
LABEL_66:
    (*(void (**)(_QWORD *, uint64_t))(*v33 + 8 * v34))(v33, v21);
  }
  else if (v42)
  {
    v34 = 5;
    goto LABEL_66;
  }
LABEL_67:
  if (v44 && BYTE6(v43) == 1)
    free(v44);
  if (v46 && BYTE6(v45) == 1)
    free(v46);
LABEL_73:
  KB::Candidate::~Candidate((KB::Candidate *)v47);
}

void std::__function::__func<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2,std::allocator<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2,std::allocator<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA0FE3A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2,std::allocator<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA0FE3A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2,std::allocator<KB::FilterInputPrefixMismatch::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_2>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::Candidate *a2, KB::String **a3)
{
  KB::String *v3;
  uint64_t v4;
  _BOOL8 v5;
  _BOOL4 v6;
  _BOOL4 v7;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = KB::Candidate::sort_key(a2, *(_QWORD *)(v4 + 8));
  v6 = KB::ByteString::starts_with((KB::ByteString *)v5, *(const ByteString **)v4);
  v7 = v6;
  if (v3 && !v6)
    KB::String::append_format(v3, "candidate does not contain the original input as a prefix");
  return !v7;
}

void KB::AddAlternativesForRetrocorrection::~AddAlternativesForRetrocorrection(KB::AddAlternativesForRetrocorrection *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::AddAlternativesForRetrocorrection::filter_description(KB::AddAlternativesForRetrocorrection *this)
{
  return "AddAlternativesForRetrocorrection";
}

void KB::AddAlternativesForRetrocorrection::filter_candidates(KB::AddAlternativesForRetrocorrection *this, const KB::Word ***a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v5;
  uint64_t i;
  const KB::Word **v7;
  const KB::Word **v8;
  const KB::Word *v9;
  char *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned int *v15;
  unsigned int v16;
  const void *v17;
  unsigned int *v18;
  unsigned int v19;
  const KB::Word *v20;
  const KB::Word *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  KB::Candidate *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  unint64_t v38;
  const KB::Candidate *v39;
  const KB::Candidate *v40;
  _QWORD *v41;
  KB::Candidate *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  const KB::Word **v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  __n128 (*v53)(_QWORD *, uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55[3];
  int64x2_t v56;
  unint64_t v57;
  _OWORD v58[2];
  int v59;
  _BYTE v60[8];
  void *v61;
  void *__p[2];
  char *v63;
  _QWORD v64[3];
  uint64_t v65[3];
  _QWORD v66[121];
  _BYTE v67[240];
  unsigned __int16 v68[120];
  unint64_t v69;
  int64x2_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (HIBYTE(add_alternatives_for_retrocorrection_override))
  {
    if (!(_BYTE)add_alternatives_for_retrocorrection_override)
      return;
  }
  else if (!_os_feature_enabled_impl())
  {
    return;
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "were");
  std::string::basic_string[abi:nn180100]<0>(v64, "we're");
  std::string::basic_string[abi:nn180100]<0>(v65, "well");
  std::string::basic_string[abi:nn180100]<0>(v66, "we'll");
  v5 = 0;
  memset(v58, 0, sizeof(v58));
  v59 = 1065353216;
  do
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v58, (uint64_t)&__p[v5], (uint64_t)&__p[v5]);
    v5 += 3;
  }
  while (v5 != 12);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v66[i + 2]) < 0)
      operator delete((void *)v66[i]);
  }
  v56 = 0uLL;
  v57 = 0;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v49 = a2[1];
    do
    {
      v9 = v7[1];
      if (*(_WORD *)v9)
      {
        if (*((_QWORD *)v9 + 1))
          v10 = (char *)*((_QWORD *)v9 + 1);
        else
          v10 = (char *)v9 + 16;
      }
      else
      {
        v10 = "";
      }
      v11 = *((_DWORD *)v9 + 26);
      std::string::basic_string[abi:nn180100]<0>(__p, v10);
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::find<std::string>(v58, (uint64_t)__p);
      if (SHIBYTE(v63) < 0)
        operator delete(__p[0]);
      v13 = (v11 >> 17) & 1;
      if (v12)
        v13 = 1;
      if ((unint64_t)*v7 >= 2 && v13 != 0)
      {
        KB::Word::Word((KB::Word *)v68, v7[1]);
        v50 = 0;
        v51 = &v50;
        v52 = 0x4002000000;
        v53 = __Block_byref_object_copy__4869;
        v54 = __Block_byref_object_dispose__4870;
        memset(v55, 0, sizeof(v55));
        if ((v11 & 0x20000) != 0)
        {
          v15 = (unsigned int *)*((_QWORD *)a4 + 2);
          if (v15)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          KB::cf_string_impl<KB::String>((CFStringRef *)__p, v68);
          v17 = __p[0];
          v66[116] = MEMORY[0x1E0C809B0];
          v66[117] = 1174405120;
          v66[118] = ___ZNK2KB33AddAlternativesForRetrocorrection17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke;
          v66[119] = &unk_1EA0FDB90;
          KB::Word::Word((KB::Word *)v67, (const KB::Word *)v68);
          v66[120] = &v50;
          LXLexiconEnumerateEntriesForString();
          if (v17)
            CFRelease(v17);
          WTF::RefCounted<KB::DictionaryContainer>::deref(v15);
          KB::Word::~Word((KB::Word *)v67);
        }
        else if (v12)
        {
          v18 = (unsigned int *)*((_QWORD *)a4 + 2);
          if (v18)
          {
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
            KB::DictionaryContainer::derive_static_words((KB::DictionaryContainer *)v18, v51 + 5, v68);
            WTF::RefCounted<KB::DictionaryContainer>::deref(v18);
          }
          else
          {
            KB::DictionaryContainer::derive_static_words(0, v55, v68);
          }
        }
        v20 = (const KB::Word *)v51[5];
        v21 = (const KB::Word *)v51[6];
        while (v20 != v21)
        {
          if (!KB::String::equal(v20, (const KB::String *)v68, 0))
          {
            KB::Candidate::Candidate((KB::Candidate *)__p, (const KB::Candidate *)v7);
            KB::Candidate::clear((KB::Candidate *)__p);
            KB::Candidate::append((unsigned __int16 *)__p, v20);
            if ((unint64_t)*v7 >= 2)
            {
              v22 = 240;
              v23 = 1;
              do
              {
                KB::Candidate::append((unsigned __int16 *)__p, (const KB::Word *)((char *)v7[1] + v22));
                ++v23;
                v22 += 240;
              }
              while ((unint64_t)*v7 > v23);
            }
            if (a2[1] == *a2)
            {
LABEL_55:
              if (v56.i64[1] >= v57)
              {
                v29 = 0x1CAC083126E978D5 * ((v56.i64[1] - v56.i64[0]) >> 3);
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) > 0x4189374BC6A7EFLL)
LABEL_95:
                  abort();
                if (0x395810624DD2F1AALL * ((uint64_t)(v57 - v56.i64[0]) >> 3) > v30)
                  v30 = 0x395810624DD2F1AALL * ((uint64_t)(v57 - v56.i64[0]) >> 3);
                if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(v57 - v56.i64[0]) >> 3)) >= 0x20C49BA5E353F7)
                  v31 = 0x4189374BC6A7EFLL;
                else
                  v31 = v30;
                v72 = &v57;
                if (v31)
                  v31 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v31);
                else
                  v32 = 0;
                v33 = (KB::Candidate *)(v31 + 1000 * v29);
                v69 = v31;
                v70.i64[0] = (uint64_t)v33;
                v71 = v31 + 1000 * v32;
                KB::Candidate::Candidate(v33, (const KB::Candidate *)__p);
                v28 = (char *)v33 + 1000;
                v70.i64[1] = (uint64_t)v33 + 1000;
                v34 = v56.i64[1];
                v35 = v56.i64[0];
                v36 = v70.i64[0];
                if (v56.i64[1] == v56.i64[0])
                {
                  v37 = vdupq_n_s64(v56.u64[1]);
                }
                else
                {
                  do
                  {
                    v34 -= 1000;
                    v36 = KB::Candidate::Candidate(v36 - 1000, v34);
                  }
                  while (v34 != v35);
                  v37 = v56;
                  v28 = (char *)v70.i64[1];
                }
                v56.i64[0] = v36;
                v56.i64[1] = (uint64_t)v28;
                v70 = v37;
                v38 = v57;
                v57 = v71;
                v71 = v38;
                v69 = v37.i64[0];
                std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v69);
              }
              else
              {
                v28 = (char *)KB::Candidate::Candidate((KB::Candidate *)v56.i64[1], (const KB::Candidate *)__p) + 1000;
              }
              v56.i64[1] = (uint64_t)v28;
            }
            else
            {
              v24 = 0;
              v25 = 0;
              while (1)
              {
                KB::Candidate::capitalized_string((KB::Candidate *)__p, (uint64_t)&v69);
                KB::Candidate::capitalized_string((KB::Candidate *)&(*a2)[v24], (uint64_t)v60);
                v26 = KB::String::equal((KB::String *)&v69, (const KB::String *)v60, 1);
                if (v61)
                  v27 = v60[6] == 1;
                else
                  v27 = 0;
                if (v27)
                  free(v61);
                if (v70.i64[0] && BYTE6(v69) == 1)
                  free((void *)v70.i64[0]);
                if (v26)
                  break;
                ++v25;
                v24 += 125;
                if (0x1CAC083126E978D5 * (a2[1] - *a2) <= v25)
                  goto LABEL_55;
              }
            }
            KB::Candidate::~Candidate((KB::Candidate *)__p);
          }
          v20 = (const KB::Word *)((char *)v20 + 240);
        }
        _Block_object_dispose(&v50, 8);
        __p[0] = v55;
        std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
        KB::Word::~Word((KB::Word *)v68);
        v8 = v49;
      }
      v7 += 125;
    }
    while (v7 != v8);
    v40 = (const KB::Candidate *)v56.i64[1];
    v39 = (const KB::Candidate *)v56.i64[0];
    if (v56.i64[0] != v56.i64[1])
    {
      v41 = a2 + 2;
      v42 = (KB::Candidate *)a2[1];
      do
      {
        if ((unint64_t)v42 >= *v41)
        {
          v43 = 0x1CAC083126E978D5 * ((v42 - (KB::Candidate *)*a2) >> 3);
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) > 0x4189374BC6A7EFLL)
            goto LABEL_95;
          if (0x395810624DD2F1AALL * ((uint64_t)(*v41 - (_QWORD)*a2) >> 3) > v44)
            v44 = 0x395810624DD2F1AALL * ((uint64_t)(*v41 - (_QWORD)*a2) >> 3);
          if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*v41 - (_QWORD)*a2) >> 3)) >= 0x20C49BA5E353F7)
            v45 = 0x4189374BC6A7EFLL;
          else
            v45 = v44;
          v64[1] = a2 + 2;
          if (v45)
            v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v45);
          else
            v46 = 0;
          v47 = (char *)(v45 + 1000 * v43);
          __p[0] = (void *)v45;
          __p[1] = v47;
          v64[0] = v45 + 1000 * v46;
          KB::Candidate::Candidate((KB::Candidate *)v47, v39);
          v63 = v47 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, __p);
          v42 = (KB::Candidate *)a2[1];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          KB::Candidate::Candidate(v42, v39);
          v42 = (KB::Candidate *)((char *)v42 + 1000);
        }
        a2[1] = (const KB::Word **)v42;
        v39 = (const KB::Candidate *)((char *)v39 + 1000);
      }
      while (v39 != v40);
    }
  }
  __p[0] = &v56;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v58);
}

__n128 __Block_byref_object_copy__4869(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__4870(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZNK2KB33AddAlternativesForRetrocorrection17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  KB::Word *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  KB::Word *v14;
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  _BYTE v18[240];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  KB::Word::Word((uint64_t)v18, a2, *(_DWORD *)(a1 + 176));
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v4 = (KB::Word *)v3[6];
  v5 = v3[7];
  if ((unint64_t)v4 >= v5)
  {
    v7 = v3[5];
    v8 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v4 - v7) >> 4);
    if (v8 + 1 > 0x111111111111111)
      abort();
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - v7) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x88888888888888)
      v11 = 0x111111111111111;
    else
      v11 = v10;
    v17 = v3 + 7;
    if (v11)
      v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v11);
    else
      v12 = 0;
    v13 = v11;
    v14 = (KB::Word *)(v11 + 240 * v8);
    v16 = v11 + 240 * v12;
    KB::Word::Word(v14, (const KB::Word *)v18);
    v15 = (char *)v14 + 240;
    std::vector<KB::Word>::__swap_out_circular_buffer(v3 + 5, &v13);
    v6 = (char *)v3[6];
    std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    v6 = (char *)KB::Word::Word(v4, (const KB::Word *)v18) + 240;
  }
  v3[6] = (uint64_t)v6;
  KB::Word::~Word((KB::Word *)v18);
}

KB::Word *__copy_helper_block_8_40c14_ZTSN2KB4WordE(uint64_t a1, uint64_t a2)
{
  return KB::Word::Word((KB::Word *)(a1 + 40), (const KB::Word *)(a2 + 40));
}

void __destroy_helper_block_8_40c14_ZTSN2KB4WordE(uint64_t a1)
{
  KB::Word::~Word((KB::Word *)(a1 + 40));
}

void KB::FilterDuplicates::~FilterDuplicates(KB::FilterDuplicates *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterDuplicates::filter_description(KB::FilterDuplicates *this)
{
  return "FilterDuplicates";
}

uint64_t KB::FilterDuplicates::filter_candidates(KB::FilterDuplicates *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _OWORD v13[2];
  int v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  v14 = 1065353216;
  v6 = *((_QWORD *)a4 + 7);
  v17[0] = &off_1EA0FE3E8;
  v17[1] = v13;
  v18 = v17;
  KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)a2, v6, (uint64_t)"FilterDuplicates", v17);
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *((_QWORD *)a4 + 7);
  v15[0] = &off_1EA0FE430;
  v15[1] = v13;
  v16 = v15;
  KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)a2 + 24, v9, (uint64_t)"FilterDuplicates", v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_10;
  }
  if (v16)
  {
    v11 = 5;
LABEL_10:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return std::__hash_table<std::__hash_value_type<KB::String,_LXLexicon const*>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,_LXLexicon const*>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,_LXLexicon const*>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,_LXLexicon const*>>>::~__hash_table((uint64_t)v13);
}

void std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA0FE430;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA0FE430;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_1>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::Candidate *a2, unsigned __int16 **a3)
{
  unsigned __int16 *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t is_duplicate_candidate;
  _WORD v11[3];
  char v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[8];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  KB::Candidate::capitalized_string(a2, (uint64_t)v11);
  v6 = (const char *)v13;
  if (!v13)
    v6 = (const char *)&v14;
  if (v11[0])
    v7 = v6;
  else
    v7 = "";
  KB::String::format((KB::String *)"Removing duplicate candidate with string %s from linguistic_alternate candidate list.", (uint64_t)v15, v7);
  if (v13 && v12 == 1)
    free(v13);
  v8 = *(_QWORD *)(a1 + 8);
  KB::String::String((KB::String *)v11, (const KB::String *)v15);
  is_duplicate_candidate = KB::FilterDuplicates::is_duplicate_candidate(a2, v8, v5, (KB::String *)v11);
  if (v13 && v12 == 1)
    free(v13);
  if (v16 && v15[6] == 1)
    free(v16);
  return is_duplicate_candidate;
}

uint64_t KB::FilterDuplicates::is_duplicate_candidate(KB::Candidate *a1, uint64_t a2, unsigned __int16 *a3, KB::String *a4)
{
  KB::String *v7;
  KB::String *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  KB::String *v19;
  unsigned int v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  KB::String *v41;
  uint64_t v42[2];
  char v43;
  _WORD v44[3];
  char v45;
  void *v46;
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  KB::Candidate::capitalized_string(a1, (uint64_t)v44);
  v7 = (KB::String *)v46;
  if (v46)
    v8 = (KB::String *)v46;
  else
    v8 = (KB::String *)v47;
  v9 = v44[0];
  v10 = KB::String::hash(v8, (const char *)v44[0]);
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v41 = a4;
    v12 = v10;
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v15 = v10;
      if (v11 <= v10)
        v15 = v10 % v11;
    }
    else
    {
      v15 = ((_DWORD)v11 - 1) & v10;
    }
    v16 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v15);
    if (v16)
    {
      v17 = (uint64_t **)*v16;
      if (*v16)
      {
        while (1)
        {
          v18 = (unint64_t)v17[1];
          if (v18 == v12)
          {
            if (v17 + 2 == (uint64_t **)v44 || KB::String::equal((KB::String *)(v17 + 2), (const KB::String *)v44, 1))
            {
              if (a3)
                KB::String::append(a3, v41);
              v38 = 1;
              goto LABEL_69;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v18 >= v11)
                v18 %= v11;
            }
            else
            {
              v18 &= v11 - 1;
            }
            if (v18 != v15)
            {
LABEL_21:
              v7 = (KB::String *)v46;
              v9 = v44[0];
              v11 = *(_QWORD *)(a2 + 8);
              break;
            }
          }
          v17 = (uint64_t **)*v17;
          if (!v17)
            goto LABEL_21;
        }
      }
    }
  }
  if (v7)
    v19 = v7;
  else
    v19 = (KB::String *)v47;
  v20 = KB::String::hash(v19, (const char *)v9);
  v21 = v20;
  if (v11)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v22.i16[0] = vaddlv_u8(v22);
    v23 = v22.u32[0];
    if (v22.u32[0] > 1uLL)
    {
      v9 = v20;
      if (v11 <= v20)
        v9 = v20 % v11;
    }
    else
    {
      v9 = ((_DWORD)v11 - 1) & v20;
    }
    v24 = *(uint64_t ***)(*(_QWORD *)a2 + 8 * v9);
    if (v24)
    {
      v25 = (uint64_t **)*v24;
      if (*v24)
      {
        do
        {
          v26 = (unint64_t)v25[1];
          if (v26 == v21)
          {
            if (v25 + 2 == (uint64_t **)v44 || KB::String::equal((KB::String *)(v25 + 2), (const KB::String *)v44, 1))
              goto LABEL_68;
          }
          else
          {
            if (v23 > 1)
            {
              if (v26 >= v11)
                v26 %= v11;
            }
            else
            {
              v26 &= v11 - 1;
            }
            if (v26 != v9)
              break;
          }
          v25 = (uint64_t **)*v25;
        }
        while (v25);
      }
    }
  }
  v27 = (_QWORD *)(a2 + 16);
  v28 = operator new(0x30uLL);
  v42[1] = a2 + 16;
  *v28 = 0;
  v28[1] = v21;
  KB::String::String((KB::String *)(v28 + 2), (const KB::String *)v44);
  v43 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
  v30 = *(float *)(a2 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      v34 = v33;
    else
      v34 = v32;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a2, v34);
    v11 = *(_QWORD *)(a2 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v21)
        v9 = v21 % v11;
      else
        v9 = v21;
    }
    else
    {
      v9 = ((_DWORD)v11 - 1) & v21;
    }
  }
  v35 = *(_QWORD *)a2;
  v36 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v9);
  if (v36)
  {
    *v28 = *v36;
  }
  else
  {
    *v28 = *v27;
    *v27 = v28;
    *(_QWORD *)(v35 + 8 * v9) = v27;
    if (!*v28)
      goto LABEL_67;
    v37 = *(_QWORD *)(*v28 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v37 >= v11)
        v37 %= v11;
    }
    else
    {
      v37 &= v11 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a2 + 8 * v37);
  }
  *v36 = v28;
LABEL_67:
  v42[0] = 0;
  ++*(_QWORD *)(a2 + 24);
  std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100](v42);
LABEL_68:
  v38 = 0;
LABEL_69:
  if (v46)
    v39 = v45 == 1;
  else
    v39 = 0;
  if (v39)
    free(v46);
  return v38;
}

void std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v2 = *(void **)(v1 + 24);
      if (v2)
      {
        if (*(_BYTE *)(v1 + 22) == 1)
          free(v2);
      }
    }
    operator delete((void *)v1);
  }
}

void std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA0FE3E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA0FE3E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterDuplicates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::Candidate *a2, unsigned __int16 **a3)
{
  unsigned __int16 *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t is_duplicate_candidate;
  _WORD v11[3];
  char v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[8];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  KB::Candidate::capitalized_string(a2, (uint64_t)v11);
  v6 = (const char *)v13;
  if (!v13)
    v6 = (const char *)&v14;
  if (v11[0])
    v7 = v6;
  else
    v7 = "";
  KB::String::format((KB::String *)"Removing duplicate candidate with string %s from linguistic candidate list.", (uint64_t)v15, v7);
  if (v13 && v12 == 1)
    free(v13);
  v8 = *(_QWORD *)(a1 + 8);
  KB::String::String((KB::String *)v11, (const KB::String *)v15);
  is_duplicate_candidate = KB::FilterDuplicates::is_duplicate_candidate(a2, v8, v5, (KB::String *)v11);
  if (v13 && v12 == 1)
    free(v13);
  if (v16 && v15[6] == 1)
    free(v16);
  return is_duplicate_candidate;
}

void KB::FilterCaseVariantsOfStaticWords::~FilterCaseVariantsOfStaticWords(KB::FilterCaseVariantsOfStaticWords *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterCaseVariantsOfStaticWords::filter_description(KB::FilterCaseVariantsOfStaticWords *this)
{
  return "FilterCaseVariantsOfStaticWords";
}

void KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::FilterCaseVariantsOfStaticWords *this, const KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  unint64_t v4;
  const KB::Candidate *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  KB::String *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  const KB::Candidate *v47;
  const KB::Candidate *v48;
  int v49;
  void *__p[2];
  __int128 v51;
  int v52;
  uint64_t v53[2];
  char v54;
  _QWORD v55[3];
  _QWORD *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  v51 = 0u;
  v52 = 1065353216;
  v5 = *a2;
  v47 = a2[1];
  if (*a2 != v47)
  {
    while (1)
    {
      v48 = v5;
      KB::Candidate::Candidate((KB::Candidate *)&v62, v5);
      v49 = 0;
      v6 = v62;
      if (v62)
        break;
LABEL_67:
      KB::Candidate::~Candidate((KB::Candidate *)&v62);
      v5 = (const KB::Candidate *)((char *)v48 + 1000);
      if ((const KB::Candidate *)((char *)v48 + 1000) == v47)
        goto LABEL_68;
    }
    v7 = 0;
    v8 = 0;
    while ((*(_BYTE *)(v63 + 240 * v8 + 106) & 4) == 0)
    {
LABEL_66:
      v49 = ++v7;
      v8 = v7;
      if (v6 <= v7)
        goto LABEL_67;
    }
    if (!std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(__p, v7))
    {
      v9 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)__p, v7, &v49);
      v10 = v9;
      if (*((_QWORD *)v9 + 6))
      {
        std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__deallocate_node(*((_QWORD **)v9 + 5));
        *((_QWORD *)v10 + 5) = 0;
        v11 = *((_QWORD *)v10 + 4);
        if (v11)
        {
          for (i = 0; i != v11; ++i)
            *(_QWORD *)(*((_QWORD *)v10 + 3) + 8 * i) = 0;
        }
        *((_QWORD *)v10 + 6) = 0;
      }
      v13 = (void *)*((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      if (v13)
        operator delete(v13);
      *((_QWORD *)v10 + 4) = 0;
      *((_QWORD *)v10 + 5) = 0;
      *((_QWORD *)v10 + 6) = 0;
      *((_DWORD *)v10 + 14) = 1065353216;
      std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__deallocate_node(0);
    }
    v14 = (uint64_t *)(std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)__p, v7, &v49)+ 24);
    KB::lower_string((KB *)(v63 + 240 * v7), 0, (KB::String *)&v60);
    v57 = (char *)&v60;
    v15 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(v14, &v60, (KB::String **)&v57);
    v16 = v15 + 6;
    KB::Word::capitalized_string((KB::Word *)(v63 + 240 * v7), (uint64_t)&v57);
    if (v58)
      v17 = (KB::String *)v58;
    else
      v17 = (KB::String *)&v59;
    v18 = KB::String::hash(v17, (const char *)(unsigned __int16)v57);
    v19 = v18;
    v20 = v15[7];
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.u32[0];
      if (v21.u32[0] > 1uLL)
      {
        v4 = v18;
        if (v20 <= v18)
          v4 = v18 % v20;
      }
      else
      {
        v4 = ((_DWORD)v20 - 1) & v18;
      }
      v23 = *(uint64_t ***)(*v16 + 8 * v4);
      if (v23)
      {
        v24 = (uint64_t **)*v23;
        if (*v23)
        {
          do
          {
            v25 = (unint64_t)v24[1];
            if (v25 == v19)
            {
              if (v24 + 2 == (uint64_t **)&v57
                || KB::String::equal((KB::String *)(v24 + 2), (const KB::String *)&v57, 1))
              {
                goto LABEL_56;
              }
            }
            else
            {
              if (v22 > 1)
              {
                if (v25 >= v20)
                  v25 %= v20;
              }
              else
              {
                v25 &= v20 - 1;
              }
              if (v25 != v4)
                break;
            }
            v24 = (uint64_t **)*v24;
          }
          while (v24);
        }
      }
    }
    v26 = v15 + 8;
    v27 = operator new(0x30uLL);
    v53[1] = (uint64_t)(v15 + 8);
    *v27 = 0;
    v27[1] = v19;
    *((_DWORD *)v27 + 4) = 0x100000;
    *((_WORD *)v27 + 10) = 0;
    *((_BYTE *)v27 + 22) = 0;
    v27[3] = 0;
    KB::String::operator=((uint64_t)(v27 + 2), (KB::String *)&v57);
    v54 = 1;
    v28 = (float)(unint64_t)(v15[9] + 1);
    v29 = *((float *)v15 + 20);
    if (!v20 || (float)(v29 * (float)v20) < v28)
    {
      v30 = (v20 & (v20 - 1)) != 0;
      if (v20 < 3)
        v30 = 1;
      v31 = v30 | (2 * v20);
      v32 = vcvtps_u32_f32(v28 / v29);
      if (v31 <= v32)
        v33 = v32;
      else
        v33 = v31;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v16, v33);
      v20 = v15[7];
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v20 <= v19)
          v4 = v19 % v20;
        else
          v4 = v19;
      }
      else
      {
        v4 = ((_DWORD)v20 - 1) & v19;
      }
    }
    v34 = *v16;
    v35 = *(_QWORD **)(*v16 + 8 * v4);
    if (v35)
    {
      *v27 = *v35;
    }
    else
    {
      *v27 = *v26;
      *v26 = v27;
      *(_QWORD *)(v34 + 8 * v4) = v26;
      if (!*v27)
        goto LABEL_55;
      v36 = *(_QWORD *)(*v27 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v36 >= v20)
          v36 %= v20;
      }
      else
      {
        v36 &= v20 - 1;
      }
      v35 = (_QWORD *)(*v16 + 8 * v36);
    }
    *v35 = v27;
LABEL_55:
    v53[0] = 0;
    ++v15[9];
    std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100](v53);
LABEL_56:
    if (v58)
      v37 = BYTE6(v57) == 1;
    else
      v37 = 0;
    if (v37)
      free(v58);
    if (v61 && BYTE6(v60) == 1)
      free(v61);
    v7 = v49;
    v6 = v62;
    goto LABEL_66;
  }
LABEL_68:
  v38 = *((_QWORD *)a4 + 7);
  v55[0] = &off_1EA0FE478;
  v55[1] = a3;
  v55[2] = __p;
  v56 = v55;
  KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)a2, v38, (uint64_t)"FilterCaseVariantsOfStaticWords", v55);
  v39 = v56;
  if (v56 == v55)
  {
    v40 = 4;
    v39 = v55;
  }
  else
  {
    if (!v56)
      goto LABEL_73;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_73:
  v41 = (_QWORD *)v51;
  if ((_QWORD)v51)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::~__hash_table((uint64_t)(v41 + 3));
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = __p[0];
  __p[0] = 0;
  if (v43)
    operator delete(v43);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

char *std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(uint64_t *a1, _QWORD *a2, KB::String **a3)
{
  unint64_t v3;
  KB::String *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  KB::String *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;

  if (a2[1])
    v7 = (KB::String *)a2[1];
  else
    v7 = (KB::String *)(a2 + 2);
  v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = a1 + 2;
  v14 = operator new(0x58uLL);
  *v14 = 0;
  v14[1] = v9;
  v17 = *a3;
  *((_DWORD *)v14 + 4) = 0x100000;
  *((_WORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 22) = 0;
  v14[3] = 0;
  KB::String::operator=((uint64_t)(v14 + 2), v17);
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_DWORD *)v14 + 20) = 1065353216;
  v18 = (float)(unint64_t)(a1[3] + 1);
  v19 = *((float *)a1 + 8);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v16;
          if (*v16)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v28) = v16;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v34))
                  {
                    *(_QWORD *)(*a1 + 8 * v34) = v27;
                    goto LABEL_59;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*a1 + 8 * v34);
                  **(_QWORD **)(*a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_59:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v35 = *a1;
  v36 = *(_QWORD **)(*a1 + 8 * v3);
  if (v36)
  {
    *v14 = *v36;
LABEL_76:
    *v36 = v14;
    goto LABEL_77;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v35 + 8 * v3) = v16;
  if (*v14)
  {
    v37 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (_QWORD *)(*a1 + 8 * v37);
    goto LABEL_76;
  }
LABEL_77:
  ++a1[3];
  return v14;
}

void std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = v1;
      v1 = (_QWORD *)*v1;
      std::__hash_table<std::__hash_value_type<KB::String,_LXLexicon const*>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,_LXLexicon const*>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,_LXLexicon const*>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,_LXLexicon const*>>>::~__hash_table((uint64_t)(v2 + 6));
      v3 = (void *)v2[3];
      if (v3)
      {
        if (*((_BYTE *)v2 + 22) == 1)
          free(v3);
      }
      operator delete(v2);
    }
    while (v1);
  }
}

void std::__function::__func<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

__n128 std::__function::__func<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA0FE478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA0FE478;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterCaseVariantsOfStaticWords::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::Candidate *a2, KB::String **a3)
{
  KB::String *v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  char *v11;
  void *v12;
  KB::String *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  void *v26;
  KB::String *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  unint64_t v36;
  KB::String *v38;
  int v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _WORD v45[3];
  char v46;
  void *v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  KB::Candidate::capitalized_string(a2, (uint64_t)v45);
  KB::Candidate::capitalized_string(*(KB::Candidate **)(a1 + 8), (uint64_t)&v43);
  v6 = KB::String::equal((KB::String *)v45, (const KB::String *)&v43, 1);
  if (v44)
    v7 = BYTE6(v43) == 1;
  else
    v7 = 0;
  if (v7)
    free(v44);
  if (v47 && v46 == 1)
    free(v47);
  if (v6)
    return 0;
  v38 = v5;
  v39 = 0;
  if (!*(_QWORD *)a2)
    return 0;
  LODWORD(v8) = 0;
  v9 = 0;
  while (2)
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 + 1) + 240 * v9 + 106) & 4) != 0)
      goto LABEL_39;
    v10 = *(uint64_t **)(a1 + 16);
    if (!std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(v10, v8))goto LABEL_39;
    v11 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v10, v8, &v39);
    KB::lower_string((KB *)(*((_QWORD *)a2 + 1) + 240 * (int)v8), 0, (KB::String *)v45);
    v12 = v47;
    if (v47)
      v13 = (KB::String *)v47;
    else
      v13 = (KB::String *)v48;
    v14 = KB::String::hash(v13, (const char *)v45[0]);
    v15 = *((_QWORD *)v11 + 4);
    if (!v15)
      goto LABEL_36;
    v16 = v14;
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = v17.u32[0];
    if (v17.u32[0] > 1uLL)
    {
      v19 = v14;
      if (v15 <= v14)
        v19 = v14 % v15;
    }
    else
    {
      v19 = ((_DWORD)v15 - 1) & v14;
    }
    v20 = *(uint64_t ***)(*((_QWORD *)v11 + 3) + 8 * v19);
    if (!v20 || (v21 = (uint64_t **)*v20) == 0)
    {
LABEL_36:
      if (v12 && v46 == 1)
        free(v12);
      goto LABEL_39;
    }
    while (1)
    {
      v22 = (unint64_t)v21[1];
      if (v22 == v16)
        break;
      if (v18 > 1)
      {
        if (v22 >= v15)
          v22 %= v15;
      }
      else
      {
        v22 &= v15 - 1;
      }
      if (v22 != v19)
      {
LABEL_35:
        v12 = v47;
        goto LABEL_36;
      }
LABEL_34:
      v21 = (uint64_t **)*v21;
      if (!v21)
        goto LABEL_35;
    }
    if (v21 + 2 != (uint64_t **)v45 && !KB::String::equal((KB::String *)(v21 + 2), (const KB::String *)v45, 1))
      goto LABEL_34;
    v23 = v39;
    v24 = (uint64_t *)(std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(*(uint64_t **)(a1 + 16), v39, &v39)+ 24);
    KB::lower_string((KB *)(*((_QWORD *)a2 + 1) + 240 * v23), 0, (KB::String *)&v43);
    v40 = (char *)&v43;
    v25 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_set<KB::String>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_set<KB::String>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(v24, &v43, (KB::String **)&v40);
    KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)a2 + 1) + 240 * v23), (uint64_t)&v40);
    v26 = v41;
    if (v41)
      v27 = (KB::String *)v41;
    else
      v27 = (KB::String *)&v42;
    v28 = KB::String::hash(v27, (const char *)(unsigned __int16)v40);
    v29 = v25[7];
    if (!v29)
      goto LABEL_62;
    v30 = v28;
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.u32[0];
    if (v31.u32[0] > 1uLL)
    {
      v33 = v28;
      if (v29 <= v28)
        v33 = v28 % v29;
    }
    else
    {
      v33 = ((_DWORD)v29 - 1) & v28;
    }
    v34 = *(uint64_t ***)(v25[6] + 8 * v33);
    if (!v34)
    {
LABEL_62:
      v35 = 0;
LABEL_63:
      if (!v26)
        goto LABEL_66;
LABEL_64:
      if (BYTE6(v40) == 1)
        free(v26);
      goto LABEL_66;
    }
    v35 = (uint64_t **)*v34;
    if (!*v34)
      goto LABEL_63;
    while (2)
    {
      v36 = (unint64_t)v35[1];
      if (v36 == v30)
      {
        if (v35 + 2 == (uint64_t **)&v40 || KB::String::equal((KB::String *)(v35 + 2), (const KB::String *)&v40, 1))
          goto LABEL_75;
        goto LABEL_60;
      }
      if (v32 > 1)
      {
        if (v36 >= v29)
          v36 %= v29;
      }
      else
      {
        v36 &= v29 - 1;
      }
      if (v36 == v33)
      {
LABEL_60:
        v35 = (uint64_t **)*v35;
        if (!v35)
          goto LABEL_75;
        continue;
      }
      break;
    }
    v35 = 0;
LABEL_75:
    v26 = v41;
    if (v41)
      goto LABEL_64;
LABEL_66:
    if (v44 && BYTE6(v43) == 1)
      free(v44);
    if (v47 && v46 == 1)
      free(v47);
    if (v35)
    {
LABEL_39:
      v8 = ++v39;
      v9 = v8;
      if (*(_QWORD *)a2 <= v8)
        return 0;
      continue;
    }
    break;
  }
  if (v38)
    KB::String::append_format(v38, "candidate contains case variant of static word");
  return 1;
}

uint64_t KB::enum_value_from_string<KB::FilterNotSuggestibleForInput::ApplyFilterCondition>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  if (v1 == 34)
  {
    if (v2 < 0)
      a1 = (uint64_t *)*a1;
    if (!memcmp(a1, "ApplyIfCandidatesContainInputMatch", 0x22uLL))
    {
      v8 = 0x100000000;
      v7 = 1;
      return v7 | v8;
    }
    goto LABEL_17;
  }
  if (v1 != 11
    || (v2 >= 0 ? (v3 = a1) : (v3 = (uint64_t *)*a1),
        (v4 = *v3, v5 = *(uint64_t *)((char *)v3 + 3), v4 == 0x776C41796C707041)
      ? (v6 = v5 == 0x737961776C41796CLL)
      : (v6 = 0),
        !v6))
  {
LABEL_17:
    v8 = 0;
    v7 = 0;
    return v7 | v8;
  }
  v7 = 0;
  v8 = 0x100000000;
  return v7 | v8;
}

uint64_t KB::FilterNotSuggestibleForInput::should_apply_filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 36) != 1)
    return 1;
  v6 = *(_QWORD *)(a4 + 16);
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  v8 = *(_QWORD *)(v6 + 8) + 144;
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v6);
  return KB::FilterNotSuggestibleForInput::does_candidate_list_contain_input_match(a2, a3, v8);
}

uint64_t KB::enum_value_from_string<KB::FilterCharacterCount::CharacterCountRelation>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = a1[1];
  switch(v1)
  {
    case 17:
      if (v2 >= 0)
        v3 = a1;
      else
        v3 = (uint64_t *)*a1;
      v4 = *v3;
      v5 = v3[1];
      v6 = *((unsigned __int8 *)v3 + 16);
      if (v4 != 0x496F546C61757145 || v5 != 0x6E756F437475706ELL || v6 != 116)
        goto LABEL_80;
      v9 = 0x100000000;
      v10 = 2;
      break;
    case 18:
      if (v2 >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      v12 = *v11;
      v13 = v11[1];
      v14 = *((unsigned __int16 *)v11 + 8);
      if (v12 != 0x6E6168547373654CLL || v13 != 0x756F437475706E49 || v14 != 29806)
        goto LABEL_80;
      v10 = 0;
      v9 = 0x100000000;
      break;
    case 20:
      if (v2 >= 0)
        v17 = a1;
      else
        v17 = (uint64_t *)*a1;
      v18 = *v17;
      v19 = v17[1];
      v20 = *((_DWORD *)v17 + 4);
      if (v18 != 0x6C61757145746F4ELL || v19 != 0x437475706E496F54 || v20 != 1953396079)
        goto LABEL_80;
      v9 = 0x100000000;
      v10 = 3;
      break;
    case 21:
      if (v2 >= 0)
        v23 = a1;
      else
        v23 = (uint64_t *)*a1;
      v24 = *v23;
      v25 = v23[1];
      v26 = *(uint64_t *)((char *)v23 + 13);
      if (v24 != 0x5472657461657247 || v25 != 0x7475706E496E6168 || v26 != 0x746E756F43747570)
        goto LABEL_80;
      v9 = 0x100000000;
      v10 = 5;
      break;
    case 27:
      if (v2 >= 0)
        v29 = a1;
      else
        v29 = (uint64_t *)*a1;
      v30 = *v29;
      v31 = v29[1];
      v32 = v29[2];
      v33 = *(uint64_t *)((char *)v29 + 19);
      if (v30 != 0x6E6168547373654CLL
        || v31 != 0x546C61757145724FLL
        || v32 != 0x6F437475706E496FLL
        || v33 != 0x746E756F43747570)
      {
        goto LABEL_80;
      }
      v9 = 0x100000000;
      v10 = 1;
      break;
    case 30:
      if (v2 >= 0)
        v37 = a1;
      else
        v37 = (uint64_t *)*a1;
      v38 = *v37;
      v39 = v37[1];
      v40 = v37[2];
      v41 = *(uint64_t *)((char *)v37 + 22);
      if (v38 != 0x5472657461657247
        || v39 != 0x757145724F6E6168
        || v40 != 0x75706E496F546C61
        || v41 != 0x746E756F43747570)
      {
        goto LABEL_80;
      }
      v9 = 0x100000000;
      v10 = 4;
      break;
    default:
LABEL_80:
      v9 = 0;
      v10 = 0;
      break;
  }
  return v10 | v9;
}

void TI::CP::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(TI::CP::SearchNodeLanguageExtensions *this)
{
  *(_QWORD *)this = &off_1EA0FE4C0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  *(_QWORD *)this = &off_1EA0FE4C0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeLanguageExtensions::source_debug_data@<X0>(TI::CP::SearchNodeLanguageExtensions *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  TI::Favonius::Key *v6;
  const char *v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;
  char *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  if (*((_DWORD *)this + 14))
  {
    v4 = *((unsigned int *)this + 14) - 1;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v4);
      v6 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v18 = 0x100000;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      TI::Favonius::Key::append_debug_data(v6, (KB::String *)&v18);
      v7 = v21;
      if (!v21)
        v7 = &v22;
      if ((_WORD)v18)
        v8 = v7;
      else
        v8 = "";
      v9 = strlen(v8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v8, v9);
      if (v21 && v20 == 1)
        free(v21);
      if (!v4)
        break;
      v10 = v4;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
      --v4;
    }
    while (v10);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14 = v11;
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v17);
}

_QWORD *TI::CP::SearchNodeLanguageExtensions::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeLanguageExtensions");
}

void TI::CP::SearchNodeSource::node_at_current_bound(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TI::CP::SearchNodeLanguageExtensions::branch_at_current_bound(TI::CP::SearchNodeLanguageExtensions *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  std::__shared_weak_count_vtbl *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  __int128 v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;

  if (*((_BYTE *)this + 80))
  {
    v5 = (unsigned int *)((char *)this + 56);
    v4 = *((_QWORD *)this + 7);
    if (v4)
    {
      v6 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 3);
      v24 = *((_OWORD *)this + 2);
      if (*((_QWORD *)&v24 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v4 = *(_QWORD *)v5;
      }
      v9 = *((_DWORD *)this + 12);
      v10 = *((_QWORD *)this + 8) + 8 * v4;
      v11 = *(_QWORD *)(v10 - 8);
      *(_QWORD *)(v10 - 8) = 0;
      v12 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v12->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE28;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FE820;
      v14 = v12 + 1;
      v12[1].__shared_owners_ = 0;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = v6;
      *(_OWORD *)&v12[2].__shared_owners_ = v24;
      LODWORD(v12[3].__vftable) = v9;
      v12[3].__shared_owners_ = 0;
      v12[3].__shared_weak_owners_ = v11;
      LOWORD(v12[4].__shared_owners_) = 256;
      BYTE2(v12[4].__shared_owners_) = 0;
      *(_OWORD *)&v12[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v12[5].__shared_owners_ = 0u;
      v12[6].std::__shared_count = 0u;
      TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)&v12[1]);
      *(_QWORD *)&v15 = v12 + 1;
      *((_QWORD *)&v15 + 1) = v12;
      v25 = v15;
      shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1)
        {
LABEL_20:
          WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink(v5, *((_QWORD *)this + 7) - 1);
          TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score(this);
          *(_OWORD *)a2 = v25;
          return;
        }
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v19 = __ldxr(p_shared_weak_owners);
        while (__stxr(v19 + 1, p_shared_weak_owners));
        v12[1].__shared_owners_ = (uint64_t)v14;
        v12[1].__shared_weak_owners_ = (uint64_t)v12;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v12[1].__shared_owners_ = (uint64_t)v14;
        v12[1].__shared_weak_owners_ = (uint64_t)v12;
      }
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_20;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
}

void TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(TI::CP::SearchNodeLanguageExtensions *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 4);
    if (!*(_BYTE *)(v2 + 82))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 48))(*(_QWORD *)(v2 + 64), v2 + 88);
      *(_BYTE *)(v2 + 82) = 1;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=((unint64_t *)this + 7, (unint64_t *)(v2 + 88));
    v3 = *((_QWORD *)this + 7);
    v4 = 126 - 2 * __clz(v3);
    if (v3)
      v5 = v4;
    else
      v5 = 0;
    std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((int8x16_t **)this + 8), (int8x16_t *)(*((_QWORD *)this + 8) + 8 * v3), v5, 1);
    *((_BYTE *)this + 80) = 1;
    TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score(this);
  }
}

double TI::CP::SearchNodeLanguageExtensions::bound_on_score(TI::CP::SearchNodeLanguageExtensions *this)
{
  return *((double *)this + 12);
}

unint64_t *WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int **v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;

  if (a2 != a1)
  {
    v4 = *a2;
    if (*a1 <= v4)
    {
      if (v4 > a1[2])
      {
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity((uint64_t)a1);
        WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a1, *a2);
        if (!a1[1])
          return a1;
      }
    }
    else
    {
      WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink((unsigned int *)a1, v4);
    }
    v5 = (unsigned int **)a2[1];
    if (*a1)
    {
      v6 = &v5[*a1];
      v7 = (unsigned int **)a1[1];
      do
      {
        v8 = *v5;
        if (*v5)
        {
          v9 = v8 + 2;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        v11 = *v7;
        *v7 = v8;
        if (v11)
        {
          v12 = v11 + 2;
          v13 = atomic_load(v11 + 2);
          if (v13 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 248))(v11);
          }
          else
          {
            do
              v14 = __ldaxr(v12);
            while (__stlxr(v14 - 1, v12));
          }
        }
        ++v5;
        ++v7;
      }
      while (v5 != v6);
      v5 = (unsigned int **)a2[1];
      v15 = *a1;
    }
    else
    {
      v15 = 0;
    }
    if (v15 != *a2)
    {
      v16 = &v5[*a2];
      v17 = (unsigned int **)(a1[1] + 8 * v15);
      v18 = &v5[v15];
      do
      {
        v19 = *v18;
        *v17 = *v18;
        if (v19)
        {
          v20 = v19 + 2;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        ++v17;
        ++v18;
      }
      while (v18 != v16);
      v15 = *a2;
    }
    *a1 = v15;
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  float v19;
  int8x16_t *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t *v47;
  float v48;
  int8x16_t *v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  uint64_t v68;
  int8x16_t *v69;
  uint64_t *v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int8x16_t *v80;
  BOOL v82;
  uint64_t *v83;
  unsigned int **v84;
  float v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int **i;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  float v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  unsigned int **v102;
  float v103;
  unsigned int **v104;
  float v105;
  unsigned int *v106;
  unsigned int **v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int **v122;
  unsigned int **v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int **v126;
  unsigned int **v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int **v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int **v148;
  float v149;
  unsigned int *v150;
  unsigned int **v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  float v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t *v166;
  float v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int **v170;
  unsigned int **v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  float v176;
  float v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t *v181;
  int8x16_t *v182;
  unsigned int **v183;
  uint64_t *v184;
  int64_t v185;

LABEL_1:
  v182 = a2 - 1;
  v184 = &a2[-1].i64[1];
  v181 = &a2[-2].i64[1];
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184);
        if (v67 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
        {
          v68 = a1->i64[0];
          a1->i64[0] = *v184;
          *v184 = v68;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], v184);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, v184);
        return;
      case 5:
        v69 = a1 + 1;
        v70 = &a1[1].i64[1];
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1]);
        v71 = (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184);
        if (v71 < (*(float (**)(uint64_t))(*(_QWORD *)a1[1].i64[1] + 24))(a1[1].i64[1]))
        {
          v72 = *v70;
          *v70 = *v184;
          *v184 = v72;
          v73 = (*(float (**)(uint64_t))(*(_QWORD *)*v70 + 24))(*v70);
          if (v73 < (*(float (**)(uint64_t))(*(_QWORD *)v69->i64[0] + 24))(v69->i64[0]))
          {
            v74 = v69->i64[0];
            v75 = *v70;
            v69->i64[0] = *v70;
            *v70 = v74;
            v76 = (*(float (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
            if (v76 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[1] + 24))(a1->i64[1]))
            {
              v78 = a1->i64[1];
              v77 = a1[1].i64[0];
              a1->i64[1] = v77;
              a1[1].i64[0] = v78;
              v79 = (*(float (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
              if (v79 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
                *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v80 = (int8x16_t *)&a1->u64[1];
          v82 = a1 == a2 || v80 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = (uint64_t *)a1;
              do
              {
                v84 = (unsigned int **)v83;
                v83 = (uint64_t *)v80;
                v85 = (*(float (**)(unsigned int *))(*(_QWORD *)v84[1] + 24))(v84[1]);
                if (v85 < (*(float (**)(unsigned int *))(*(_QWORD *)*v84 + 24))(*v84))
                {
                  v86 = 0;
                  v87 = (unsigned int *)*v83;
                  *v83 = 0;
                  for (i = (unsigned int **)v83; ; v86 = *i)
                  {
                    v89 = i;
                    i = v84;
                    v90 = *v84;
                    *v84 = 0;
                    *v89 = v90;
                    if (v86)
                    {
                      v91 = v86 + 2;
                      v92 = atomic_load(v86 + 2);
                      if (v92 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 248))(v86);
                      }
                      else
                      {
                        do
                          v93 = __ldaxr(v91);
                        while (__stlxr(v93 - 1, v91));
                      }
                    }
                    if (v84 == (unsigned int **)a1)
                      break;
                    v94 = (*(float (**)(unsigned int *))(*(_QWORD *)v87 + 24))(v87);
                    --v84;
                    if (v94 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
                      goto LABEL_93;
                  }
                  i = (unsigned int **)a1;
LABEL_93:
                  v95 = *i;
                  *i = v87;
                  if (v95)
                  {
                    v96 = v95 + 2;
                    v97 = atomic_load(v95 + 2);
                    if (v97 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 248))(v95);
                    }
                    else
                    {
                      do
                        v98 = __ldaxr(v96);
                      while (__stlxr(v98 - 1, v96));
                    }
                  }
                }
                v80 = (int8x16_t *)(v83 + 1);
              }
              while (v83 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v82)
          {
            do
            {
              v166 = (uint64_t *)a1;
              a1 = v80;
              v167 = (*(float (**)(uint64_t))(*(_QWORD *)v166[1] + 24))(v166[1]);
              if (v167 < (*(float (**)(uint64_t))(*(_QWORD *)*v166 + 24))(*v166))
              {
                v168 = 0;
                v169 = (unsigned int *)a1->i64[0];
                a1->i64[0] = 0;
                v170 = (unsigned int **)a1;
                do
                {
                  v171 = v170;
                  v170 = (unsigned int **)v166;
                  v172 = (unsigned int *)*v166;
                  *v166 = 0;
                  *v171 = v172;
                  if (v168)
                  {
                    v173 = v168 + 2;
                    v174 = atomic_load(v168 + 2);
                    if (v174 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 248))(v168);
                    }
                    else
                    {
                      do
                        v175 = __ldaxr(v173);
                      while (__stlxr(v175 - 1, v173));
                    }
                  }
                  v176 = (*(float (**)(unsigned int *))(*(_QWORD *)v169 + 24))(v169);
                  --v166;
                  v177 = (*(float (**)(_QWORD))(*(_QWORD *)*(v170 - 1) + 24))(*(v170 - 1));
                  v168 = *v170;
                }
                while (v176 < v177);
                *v170 = v169;
                if (v168)
                {
                  v178 = v168 + 2;
                  v179 = atomic_load(v168 + 2);
                  if (v179 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 248))(v168);
                  }
                  else
                  {
                    do
                      v180 = __ldaxr(v178);
                    while (__stlxr(v180 - 1, v178));
                  }
                }
              }
              v80 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v99 = (unint64_t)(v10 - 2) >> 1;
          v183 = (unsigned int **)a2;
          v185 = v99;
          do
          {
            v100 = v99;
            if (v185 >= v99)
            {
              v101 = (2 * v99) | 1;
              v102 = (unsigned int **)a1 + v101;
              if (2 * v99 + 2 < v10)
              {
                v103 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                if (v103 < (*(float (**)(unsigned int *))(*(_QWORD *)v102[1] + 24))(v102[1]))
                {
                  ++v102;
                  v101 = 2 * v100 + 2;
                }
              }
              v104 = (unsigned int **)a1 + v100;
              v105 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
              if (v105 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v104 + 24))(*v104))
              {
                v106 = *v104;
                *v104 = 0;
                do
                {
                  v107 = v102;
                  v108 = *v102;
                  *v102 = 0;
                  v109 = *v104;
                  *v104 = v108;
                  if (v109)
                  {
                    v110 = v109 + 2;
                    v111 = atomic_load(v109 + 2);
                    if (v111 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 248))(v109);
                    }
                    else
                    {
                      do
                        v112 = __ldaxr(v110);
                      while (__stlxr(v112 - 1, v110));
                    }
                  }
                  if (v185 < v101)
                    break;
                  v113 = 2 * v101;
                  v101 = (2 * v101) | 1;
                  v102 = (unsigned int **)a1 + v101;
                  v114 = v113 + 2;
                  if (v113 + 2 < v10)
                  {
                    v115 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                    if (v115 < (*(float (**)(unsigned int *))(*(_QWORD *)v102[1] + 24))(v102[1]))
                    {
                      ++v102;
                      v101 = v114;
                    }
                  }
                  v116 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                  v104 = v107;
                }
                while (v116 >= (*(float (**)(unsigned int *))(*(_QWORD *)v106 + 24))(v106));
                v117 = *v107;
                *v107 = v106;
                if (v117)
                {
                  v118 = v117 + 2;
                  v119 = atomic_load(v117 + 2);
                  if (v119 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 248))(v117);
                  }
                  else
                  {
                    do
                      v120 = __ldaxr(v118);
                    while (__stlxr(v120 - 1, v118));
                  }
                }
              }
            }
            v99 = v100 - 1;
          }
          while (v100);
          v121 = (unint64_t)v9 >> 3;
          v122 = v183;
          while (2)
          {
            v123 = v122;
            v124 = 0;
            v125 = a1->i64[0];
            a1->i64[0] = 0;
            v126 = (unsigned int **)a1;
            do
            {
              v127 = v126;
              v126 += v124 + 1;
              v128 = 2 * v124;
              v124 = (2 * v124) | 1;
              v129 = v128 + 2;
              if (v128 + 2 < v121)
              {
                v130 = (*(float (**)(unsigned int *))(*(_QWORD *)*v126 + 24))(*v126);
                if (v130 < (*(float (**)(unsigned int *))(*(_QWORD *)v126[1] + 24))(v126[1]))
                {
                  ++v126;
                  v124 = v129;
                }
              }
              v131 = *v126;
              *v126 = 0;
              v132 = *v127;
              *v127 = v131;
              if (v132)
              {
                v133 = v132 + 2;
                v134 = atomic_load(v132 + 2);
                if (v134 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v132 + 248))(v132);
                }
                else
                {
                  do
                    v135 = __ldaxr(v133);
                  while (__stlxr(v135 - 1, v133));
                }
              }
            }
            while (v124 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
            v136 = v123 - 1;
            if (v126 == v136)
            {
              v122 = v136;
              v158 = *v126;
              *v126 = (unsigned int *)v125;
              if (!v158)
                goto LABEL_157;
              v162 = v158 + 2;
              v163 = atomic_load(v158 + 2);
              if (v163 == 1)
                goto LABEL_155;
              do
                v164 = __ldaxr(v162);
              while (__stlxr(v164 - 1, v162));
            }
            else
            {
              v137 = *v136;
              v122 = v136;
              *v136 = 0;
              v138 = *v126;
              *v126 = v137;
              if (v138)
              {
                v139 = v138 + 2;
                v140 = atomic_load(v138 + 2);
                if (v140 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 248))(v138);
                }
                else
                {
                  do
                    v141 = __ldaxr(v139);
                  while (__stlxr(v141 - 1, v139));
                }
              }
              v142 = *v136;
              *v136 = (unsigned int *)v125;
              if (v142)
              {
                v143 = v142 + 2;
                v144 = atomic_load(v142 + 2);
                if (v144 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v142 + 248))(v142);
                }
                else
                {
                  do
                    v145 = __ldaxr(v143);
                  while (__stlxr(v145 - 1, v143));
                }
              }
              v146 = (char *)(v126 + 1) - (char *)a1;
              if (v146 >= 9)
              {
                v147 = (((unint64_t)v146 >> 3) - 2) >> 1;
                v148 = (unsigned int **)a1 + v147;
                v149 = (*(float (**)(unsigned int *))(*(_QWORD *)*v148 + 24))(*v148);
                if (v149 < (*(float (**)(unsigned int *))(*(_QWORD *)*v126 + 24))(*v126))
                {
                  v150 = *v126;
                  *v126 = 0;
                  do
                  {
                    v151 = v148;
                    v152 = *v148;
                    *v148 = 0;
                    v153 = *v126;
                    *v126 = v152;
                    if (v153)
                    {
                      v154 = v153 + 2;
                      v155 = atomic_load(v153 + 2);
                      if (v155 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v153 + 248))(v153);
                      }
                      else
                      {
                        do
                          v156 = __ldaxr(v154);
                        while (__stlxr(v156 - 1, v154));
                      }
                    }
                    if (!v147)
                      break;
                    v147 = (v147 - 1) >> 1;
                    v148 = (unsigned int **)a1 + v147;
                    v157 = (*(float (**)(unsigned int *))(*(_QWORD *)*v148 + 24))(*v148);
                    v126 = v151;
                  }
                  while (v157 < (*(float (**)(unsigned int *))(*(_QWORD *)v150 + 24))(v150));
                  v158 = *v151;
                  *v151 = v150;
                  if (v158)
                  {
                    v159 = v158 + 2;
                    v160 = atomic_load(v158 + 2);
                    if (v160 != 1)
                    {
                      do
                        v161 = __ldaxr(v159);
                      while (__stlxr(v161 - 1, v159));
                      goto LABEL_157;
                    }
LABEL_155:
                    (*(void (**)(unsigned int *))(*(_QWORD *)v158 + 248))(v158);
                  }
                }
              }
            }
LABEL_157:
            if (v121-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1->i64[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v12, a1, v184);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v12, v184);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(&a1->i64[1], v12 - 1, v182);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>((int8x16_t *)a1[1].i64, &a1->i64[v11 + 1], v181);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v12 - 1, v12, &a1->i64[v11 + 1]);
          v13 = a1->i64[0];
          a1->i64[0] = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = (*(float (**)(uint64_t))(*(_QWORD *)a1[-1].i64[1] + 24))(a1[-1].i64[1]);
          if (v14 >= (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
          {
            v43 = a1->i64[0];
            a1->i64[0] = 0;
            v44 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
            if (v44 >= (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184))
            {
              v47 = &a1->i64[1];
              do
              {
                v8 = (int8x16_t *)v47;
                if (v47 >= (uint64_t *)a2)
                  break;
                v48 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                ++v47;
              }
              while (v48 >= (*(float (**)(uint64_t))(*(_QWORD *)v8->i64[0] + 24))(v8->i64[0]));
            }
            else
            {
              v8 = a1;
              do
              {
                v45 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v46 = v8->i64[1];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v45 >= (*(float (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46));
            }
            v49 = a2;
            if (v8 < a2)
            {
              v49 = a2;
              do
              {
                v50 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v51 = v49[-1].i64[1];
                v49 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v50 < (*(float (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51));
            }
            while (v8 < v49)
            {
              v52 = v8->i64[0];
              v8->i64[0] = v49->i64[0];
              v49->i64[0] = v52;
              do
              {
                v53 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v54 = v8->i64[1];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v53 >= (*(float (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54));
              do
              {
                v55 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v56 = v49[-1].i64[1];
                v49 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v55 < (*(float (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56));
            }
            v57 = (unsigned int **)&v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)a1)
            {
              v58 = *v57;
              *v57 = 0;
              v59 = (unsigned int *)a1->i64[0];
              a1->i64[0] = (uint64_t)v58;
              if (v59)
              {
                v60 = v59 + 2;
                v61 = atomic_load(v59 + 2);
                if (v61 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 248))(v59);
                }
                else
                {
                  do
                    v62 = __ldaxr(v60);
                  while (__stlxr(v62 - 1, v60));
                }
              }
            }
            a4 = 0;
            v63 = *v57;
            *v57 = (unsigned int *)v43;
            if (v63)
            {
              v64 = v63 + 2;
              v65 = atomic_load(v63 + 2);
              if (v65 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 248))(v63);
              }
              else
              {
                do
                  v66 = __ldaxr(v64);
                while (__stlxr(v66 - 1, v64));
              }
              a4 = 0;
            }
            continue;
          }
        }
        v15 = a1->i64[0];
        a1->i64[0] = 0;
        v16 = a1;
        do
        {
          v17 = v16;
          v18 = v16->i64[1];
          v16 = (int8x16_t *)((char *)v16 + 8);
          v19 = (*(float (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        }
        while (v19 < (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        v20 = a2;
        if (v17 == a1)
        {
          do
          {
            if (v16 >= a2)
              break;
            v23 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            v24 = (*(float (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          }
          while (v24 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        }
        else
        {
          do
          {
            v21 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            v22 = (*(float (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
          }
          while (v22 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        }
        if (v16 < a2)
        {
          v25 = (uint64_t *)v16;
          v26 = (uint64_t *)a2;
          do
          {
            v27 = *v25;
            *v25 = *v26;
            *v26 = v27;
            do
            {
              v17 = (int8x16_t *)v25;
              v28 = v25[1];
              ++v25;
              v29 = (*(float (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
            }
            while (v29 < (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
            do
            {
              v30 = *--v26;
              v31 = (*(float (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
            }
            while (v31 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
          }
          while (v25 < v26);
        }
        if (v17 != a1)
        {
          v32 = v17->i64[0];
          v17->i64[0] = 0;
          v33 = (unsigned int *)a1->i64[0];
          a1->i64[0] = v32;
          if (v33)
          {
            v34 = v33 + 2;
            v35 = atomic_load(v33 + 2);
            if (v35 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 248))(v33);
            }
            else
            {
              do
                v36 = __ldaxr(v34);
              while (__stlxr(v36 - 1, v34));
            }
          }
        }
        v37 = (unsigned int *)v17->i64[0];
        v17->i64[0] = v15;
        if (v37)
        {
          v38 = v37 + 2;
          v39 = atomic_load(v37 + 2);
          if (v39 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 248))(v37);
          }
          else
          {
            do
              v40 = __ldaxr(v38);
            while (__stlxr(v40 - 1, v38));
          }
        }
        v41 = v16 >= a2;
        a2 = v20;
        if (!v41)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(a1, v17, a3, a4 & 1);
          a4 = 0;
          v8 = (int8x16_t *)&v17->u64[1];
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v17);
        v8 = (int8x16_t *)&v17->u64[1];
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>((int8x16_t *)&v17->u64[1], v20))
        {
          if (v42)
            continue;
          goto LABEL_36;
        }
        a2 = v17;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v182 = a2 - 1;
  v184 = &a2[-1].i64[1];
  v181 = &a2[-2].i64[1];
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184);
        if (v67 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
        {
          v68 = a1->i64[0];
          a1->i64[0] = *v184;
          *v184 = v68;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], v184);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, v184);
        return;
      case 5:
        v69 = a1 + 1;
        v70 = &a1[1].i64[1];
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1]);
        v71 = (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184);
        if (v71 < (*(float (**)(uint64_t))(*(_QWORD *)a1[1].i64[1] + 24))(a1[1].i64[1]))
        {
          v72 = *v70;
          *v70 = *v184;
          *v184 = v72;
          v73 = (*(float (**)(uint64_t))(*(_QWORD *)*v70 + 24))(*v70);
          if (v73 < (*(float (**)(uint64_t))(*(_QWORD *)v69->i64[0] + 24))(v69->i64[0]))
          {
            v74 = v69->i64[0];
            v75 = *v70;
            v69->i64[0] = *v70;
            *v70 = v74;
            v76 = (*(float (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75);
            if (v76 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[1] + 24))(a1->i64[1]))
            {
              v78 = a1->i64[1];
              v77 = a1[1].i64[0];
              a1->i64[1] = v77;
              a1[1].i64[0] = v78;
              v79 = (*(float (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
              if (v79 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
                *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v80 = (int8x16_t *)&a1->u64[1];
          v82 = a1 == a2 || v80 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = (uint64_t *)a1;
              do
              {
                v84 = (unsigned int **)v83;
                v83 = (uint64_t *)v80;
                v85 = (*(float (**)(unsigned int *))(*(_QWORD *)v84[1] + 24))(v84[1]);
                if (v85 < (*(float (**)(unsigned int *))(*(_QWORD *)*v84 + 24))(*v84))
                {
                  v86 = 0;
                  v87 = (unsigned int *)*v83;
                  *v83 = 0;
                  for (i = (unsigned int **)v83; ; v86 = *i)
                  {
                    v89 = i;
                    i = v84;
                    v90 = *v84;
                    *v84 = 0;
                    *v89 = v90;
                    if (v86)
                    {
                      v91 = v86 + 2;
                      v92 = atomic_load(v86 + 2);
                      if (v92 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 248))(v86);
                      }
                      else
                      {
                        do
                          v93 = __ldaxr(v91);
                        while (__stlxr(v93 - 1, v91));
                      }
                    }
                    if (v84 == (unsigned int **)a1)
                      break;
                    v94 = (*(float (**)(unsigned int *))(*(_QWORD *)v87 + 24))(v87);
                    --v84;
                    if (v94 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
                      goto LABEL_93;
                  }
                  i = (unsigned int **)a1;
LABEL_93:
                  v95 = *i;
                  *i = v87;
                  if (v95)
                  {
                    v96 = v95 + 2;
                    v97 = atomic_load(v95 + 2);
                    if (v97 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 248))(v95);
                    }
                    else
                    {
                      do
                        v98 = __ldaxr(v96);
                      while (__stlxr(v98 - 1, v96));
                    }
                  }
                }
                v80 = (int8x16_t *)(v83 + 1);
              }
              while (v83 + 1 != (uint64_t *)a2);
            }
          }
          else if (!v82)
          {
            do
            {
              v166 = (uint64_t *)a1;
              a1 = v80;
              v167 = (*(float (**)(uint64_t))(*(_QWORD *)v166[1] + 24))(v166[1]);
              if (v167 < (*(float (**)(uint64_t))(*(_QWORD *)*v166 + 24))(*v166))
              {
                v168 = 0;
                v169 = (unsigned int *)a1->i64[0];
                a1->i64[0] = 0;
                v170 = (unsigned int **)a1;
                do
                {
                  v171 = v170;
                  v170 = (unsigned int **)v166;
                  v172 = (unsigned int *)*v166;
                  *v166 = 0;
                  *v171 = v172;
                  if (v168)
                  {
                    v173 = v168 + 2;
                    v174 = atomic_load(v168 + 2);
                    if (v174 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 248))(v168);
                    }
                    else
                    {
                      do
                        v175 = __ldaxr(v173);
                      while (__stlxr(v175 - 1, v173));
                    }
                  }
                  v176 = (*(float (**)(unsigned int *))(*(_QWORD *)v169 + 24))(v169);
                  --v166;
                  v177 = (*(float (**)(_QWORD))(*(_QWORD *)*(v170 - 1) + 24))(*(v170 - 1));
                  v168 = *v170;
                }
                while (v176 < v177);
                *v170 = v169;
                if (v168)
                {
                  v178 = v168 + 2;
                  v179 = atomic_load(v168 + 2);
                  if (v179 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 248))(v168);
                  }
                  else
                  {
                    do
                      v180 = __ldaxr(v178);
                    while (__stlxr(v180 - 1, v178));
                  }
                }
              }
              v80 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v99 = (unint64_t)(v10 - 2) >> 1;
          v183 = (unsigned int **)a2;
          v185 = v99;
          do
          {
            v100 = v99;
            if (v185 >= v99)
            {
              v101 = (2 * v99) | 1;
              v102 = (unsigned int **)a1 + v101;
              if (2 * v99 + 2 < v10)
              {
                v103 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                if (v103 < (*(float (**)(unsigned int *))(*(_QWORD *)v102[1] + 24))(v102[1]))
                {
                  ++v102;
                  v101 = 2 * v100 + 2;
                }
              }
              v104 = (unsigned int **)a1 + v100;
              v105 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
              if (v105 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v104 + 24))(*v104))
              {
                v106 = *v104;
                *v104 = 0;
                do
                {
                  v107 = v102;
                  v108 = *v102;
                  *v102 = 0;
                  v109 = *v104;
                  *v104 = v108;
                  if (v109)
                  {
                    v110 = v109 + 2;
                    v111 = atomic_load(v109 + 2);
                    if (v111 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v109 + 248))(v109);
                    }
                    else
                    {
                      do
                        v112 = __ldaxr(v110);
                      while (__stlxr(v112 - 1, v110));
                    }
                  }
                  if (v185 < v101)
                    break;
                  v113 = 2 * v101;
                  v101 = (2 * v101) | 1;
                  v102 = (unsigned int **)a1 + v101;
                  v114 = v113 + 2;
                  if (v113 + 2 < v10)
                  {
                    v115 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                    if (v115 < (*(float (**)(unsigned int *))(*(_QWORD *)v102[1] + 24))(v102[1]))
                    {
                      ++v102;
                      v101 = v114;
                    }
                  }
                  v116 = (*(float (**)(unsigned int *))(*(_QWORD *)*v102 + 24))(*v102);
                  v104 = v107;
                }
                while (v116 >= (*(float (**)(unsigned int *))(*(_QWORD *)v106 + 24))(v106));
                v117 = *v107;
                *v107 = v106;
                if (v117)
                {
                  v118 = v117 + 2;
                  v119 = atomic_load(v117 + 2);
                  if (v119 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 248))(v117);
                  }
                  else
                  {
                    do
                      v120 = __ldaxr(v118);
                    while (__stlxr(v120 - 1, v118));
                  }
                }
              }
            }
            v99 = v100 - 1;
          }
          while (v100);
          v121 = (unint64_t)v9 >> 3;
          v122 = v183;
          while (2)
          {
            v123 = v122;
            v124 = 0;
            v125 = a1->i64[0];
            a1->i64[0] = 0;
            v126 = (unsigned int **)a1;
            do
            {
              v127 = v126;
              v126 += v124 + 1;
              v128 = 2 * v124;
              v124 = (2 * v124) | 1;
              v129 = v128 + 2;
              if (v128 + 2 < v121)
              {
                v130 = (*(float (**)(unsigned int *))(*(_QWORD *)*v126 + 24))(*v126);
                if (v130 < (*(float (**)(unsigned int *))(*(_QWORD *)v126[1] + 24))(v126[1]))
                {
                  ++v126;
                  v124 = v129;
                }
              }
              v131 = *v126;
              *v126 = 0;
              v132 = *v127;
              *v127 = v131;
              if (v132)
              {
                v133 = v132 + 2;
                v134 = atomic_load(v132 + 2);
                if (v134 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v132 + 248))(v132);
                }
                else
                {
                  do
                    v135 = __ldaxr(v133);
                  while (__stlxr(v135 - 1, v133));
                }
              }
            }
            while (v124 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
            v136 = v123 - 1;
            if (v126 == v136)
            {
              v122 = v136;
              v158 = *v126;
              *v126 = (unsigned int *)v125;
              if (!v158)
                goto LABEL_157;
              v162 = v158 + 2;
              v163 = atomic_load(v158 + 2);
              if (v163 == 1)
                goto LABEL_155;
              do
                v164 = __ldaxr(v162);
              while (__stlxr(v164 - 1, v162));
            }
            else
            {
              v137 = *v136;
              v122 = v136;
              *v136 = 0;
              v138 = *v126;
              *v126 = v137;
              if (v138)
              {
                v139 = v138 + 2;
                v140 = atomic_load(v138 + 2);
                if (v140 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v138 + 248))(v138);
                }
                else
                {
                  do
                    v141 = __ldaxr(v139);
                  while (__stlxr(v141 - 1, v139));
                }
              }
              v142 = *v136;
              *v136 = (unsigned int *)v125;
              if (v142)
              {
                v143 = v142 + 2;
                v144 = atomic_load(v142 + 2);
                if (v144 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v142 + 248))(v142);
                }
                else
                {
                  do
                    v145 = __ldaxr(v143);
                  while (__stlxr(v145 - 1, v143));
                }
              }
              v146 = (char *)(v126 + 1) - (char *)a1;
              if (v146 >= 9)
              {
                v147 = (((unint64_t)v146 >> 3) - 2) >> 1;
                v148 = (unsigned int **)a1 + v147;
                v149 = (*(float (**)(unsigned int *))(*(_QWORD *)*v148 + 24))(*v148);
                if (v149 < (*(float (**)(unsigned int *))(*(_QWORD *)*v126 + 24))(*v126))
                {
                  v150 = *v126;
                  *v126 = 0;
                  do
                  {
                    v151 = v148;
                    v152 = *v148;
                    *v148 = 0;
                    v153 = *v126;
                    *v126 = v152;
                    if (v153)
                    {
                      v154 = v153 + 2;
                      v155 = atomic_load(v153 + 2);
                      if (v155 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v153 + 248))(v153);
                      }
                      else
                      {
                        do
                          v156 = __ldaxr(v154);
                        while (__stlxr(v156 - 1, v154));
                      }
                    }
                    if (!v147)
                      break;
                    v147 = (v147 - 1) >> 1;
                    v148 = (unsigned int **)a1 + v147;
                    v157 = (*(float (**)(unsigned int *))(*(_QWORD *)*v148 + 24))(*v148);
                    v126 = v151;
                  }
                  while (v157 < (*(float (**)(unsigned int *))(*(_QWORD *)v150 + 24))(v150));
                  v158 = *v151;
                  *v151 = v150;
                  if (v158)
                  {
                    v159 = v158 + 2;
                    v160 = atomic_load(v158 + 2);
                    if (v160 != 1)
                    {
                      do
                        v161 = __ldaxr(v159);
                      while (__stlxr(v161 - 1, v159));
                      goto LABEL_157;
                    }
LABEL_155:
                    (*(void (**)(unsigned int *))(*(_QWORD *)v158 + 248))(v158);
                  }
                }
              }
            }
LABEL_157:
            if (v121-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1->i64[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v12, a1, v184);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v12, v184);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(&a1->i64[1], v12 - 1, v182);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>((int8x16_t *)a1[1].i64, &a1->i64[v11 + 1], v181);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v12 - 1, v12, &a1->i64[v11 + 1]);
          v13 = a1->i64[0];
          a1->i64[0] = *v12;
          *v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = (*(float (**)(uint64_t))(*(_QWORD *)a1[-1].i64[1] + 24))(a1[-1].i64[1]);
          if (v14 >= (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
          {
            v43 = a1->i64[0];
            a1->i64[0] = 0;
            v44 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
            if (v44 >= (*(float (**)(uint64_t))(*(_QWORD *)*v184 + 24))(*v184))
            {
              v47 = &a1->i64[1];
              do
              {
                v8 = (int8x16_t *)v47;
                if (v47 >= (uint64_t *)a2)
                  break;
                v48 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                ++v47;
              }
              while (v48 >= (*(float (**)(uint64_t))(*(_QWORD *)v8->i64[0] + 24))(v8->i64[0]));
            }
            else
            {
              v8 = a1;
              do
              {
                v45 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v46 = v8->i64[1];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v45 >= (*(float (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46));
            }
            v49 = a2;
            if (v8 < a2)
            {
              v49 = a2;
              do
              {
                v50 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v51 = v49[-1].i64[1];
                v49 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v50 < (*(float (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51));
            }
            while (v8 < v49)
            {
              v52 = v8->i64[0];
              v8->i64[0] = v49->i64[0];
              v49->i64[0] = v52;
              do
              {
                v53 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v54 = v8->i64[1];
                v8 = (int8x16_t *)((char *)v8 + 8);
              }
              while (v53 >= (*(float (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54));
              do
              {
                v55 = (*(float (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
                v56 = v49[-1].i64[1];
                v49 = (int8x16_t *)((char *)v49 - 8);
              }
              while (v55 < (*(float (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56));
            }
            v57 = (unsigned int **)&v8[-1].i64[1];
            if (&v8[-1].u64[1] != (unint64_t *)a1)
            {
              v58 = *v57;
              *v57 = 0;
              v59 = (unsigned int *)a1->i64[0];
              a1->i64[0] = (uint64_t)v58;
              if (v59)
              {
                v60 = v59 + 2;
                v61 = atomic_load(v59 + 2);
                if (v61 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 248))(v59);
                }
                else
                {
                  do
                    v62 = __ldaxr(v60);
                  while (__stlxr(v62 - 1, v60));
                }
              }
            }
            a4 = 0;
            v63 = *v57;
            *v57 = (unsigned int *)v43;
            if (v63)
            {
              v64 = v63 + 2;
              v65 = atomic_load(v63 + 2);
              if (v65 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 248))(v63);
              }
              else
              {
                do
                  v66 = __ldaxr(v64);
                while (__stlxr(v66 - 1, v64));
              }
              a4 = 0;
            }
            continue;
          }
        }
        v15 = a1->i64[0];
        a1->i64[0] = 0;
        v16 = a1;
        do
        {
          v17 = v16;
          v18 = v16->i64[1];
          v16 = (int8x16_t *)((char *)v16 + 8);
          v19 = (*(float (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        }
        while (v19 < (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        v20 = a2;
        if (v17 == a1)
        {
          do
          {
            if (v16 >= a2)
              break;
            v23 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            v24 = (*(float (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
          }
          while (v24 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        }
        else
        {
          do
          {
            v21 = a2[-1].i64[1];
            a2 = (int8x16_t *)((char *)a2 - 8);
            v22 = (*(float (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
          }
          while (v22 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
        }
        if (v16 < a2)
        {
          v25 = (uint64_t *)v16;
          v26 = (uint64_t *)a2;
          do
          {
            v27 = *v25;
            *v25 = *v26;
            *v26 = v27;
            do
            {
              v17 = (int8x16_t *)v25;
              v28 = v25[1];
              ++v25;
              v29 = (*(float (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
            }
            while (v29 < (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
            do
            {
              v30 = *--v26;
              v31 = (*(float (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30);
            }
            while (v31 >= (*(float (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15));
          }
          while (v25 < v26);
        }
        if (v17 != a1)
        {
          v32 = v17->i64[0];
          v17->i64[0] = 0;
          v33 = (unsigned int *)a1->i64[0];
          a1->i64[0] = v32;
          if (v33)
          {
            v34 = v33 + 2;
            v35 = atomic_load(v33 + 2);
            if (v35 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 248))(v33);
            }
            else
            {
              do
                v36 = __ldaxr(v34);
              while (__stlxr(v36 - 1, v34));
            }
          }
        }
        v37 = (unsigned int *)v17->i64[0];
        v17->i64[0] = v15;
        if (v37)
        {
          v38 = v37 + 2;
          v39 = atomic_load(v37 + 2);
          if (v39 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 248))(v37);
          }
          else
          {
            do
              v40 = __ldaxr(v38);
            while (__stlxr(v40 - 1, v38));
          }
        }
        v41 = v16 >= a2;
        a2 = v20;
        if (!v41)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(a1, v17, a3, a4 & 1);
          a4 = 0;
          v8 = (int8x16_t *)&v17->u64[1];
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v17);
        v8 = (int8x16_t *)&v17->u64[1];
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>((int8x16_t *)&v17->u64[1], v20))
        {
          if (v42)
            continue;
          goto LABEL_36;
        }
        a2 = v17;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a1;
  v147 = a1 + 128;
  v148 = a1 + 64;
  v8 = a1 + 24;
  v151 = (_QWORD *)(a1 + 32);
  v153 = (_QWORD *)(a1 + 8);
  v150 = a1 + 48;
  while (2)
  {
    v9 = (uint64_t)a2 - v7;
    v10 = ((uint64_t)a2 - v7) >> 6;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 2) > *(double *)(v7 + 48))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)v7, a2 - 4);
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v7, v7 + 64, (uint64_t)(a2 - 4));
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v7, v7 + 64, v7 + 128, (uint64_t)(a2 - 4));
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v7, v7 + 64, v7 + 128, v7 + 192, (uint64_t)(a2 - 4));
        return;
      default:
        v163 = (uint64_t)a2;
        if (v9 > 1535)
        {
          if (!a3)
          {
            if ((__int128 *)v7 != a2)
            {
              v81 = (unint64_t)(v10 - 2) >> 1;
              v82 = v81;
              do
              {
                v83 = v82;
                if (v81 >= v82)
                {
                  v84 = (2 * v82) | 1;
                  v85 = v7 + (v84 << 6);
                  if (2 * v83 + 2 < v10 && *(double *)(v85 + 48) > *(double *)(v85 + 112))
                  {
                    v85 += 64;
                    v84 = 2 * v83 + 2;
                  }
                  v86 = v7 + (v83 << 6);
                  v87 = *(double *)(v86 + 48);
                  if (*(double *)(v85 + 48) <= v87)
                  {
                    v88 = v7 + (v83 << 6);
                    v152 = *(void **)v88;
                    *(_QWORD *)&v182[7] = *(_QWORD *)(v88 + 15);
                    *(_QWORD *)v182 = *(_QWORD *)(v88 + 8);
                    v89 = *(_BYTE *)(v88 + 23);
                    *(_QWORD *)v88 = 0;
                    *(_QWORD *)(v88 + 8) = 0;
                    *(_QWORD *)(v88 + 16) = 0;
                    v156 = *(_QWORD *)(v86 + 24);
                    *(_QWORD *)v175 = *(_QWORD *)(v86 + 32);
                    *(_QWORD *)&v175[7] = *(_QWORD *)(v86 + 39);
                    v160 = *(_BYTE *)(v88 + 47);
                    *(_QWORD *)(v86 + 24) = 0;
                    *(_QWORD *)(v86 + 32) = 0;
                    *(_QWORD *)(v86 + 40) = 0;
                    v154 = *(_DWORD *)(v86 + 56);
                    do
                    {
                      v90 = v88;
                      v88 = v85;
                      if (*(char *)(v90 + 23) < 0)
                        operator delete(*(void **)v90);
                      v91 = *(_OWORD *)v88;
                      *(_QWORD *)(v90 + 16) = *(_QWORD *)(v88 + 16);
                      *(_OWORD *)v90 = v91;
                      *(_BYTE *)(v88 + 23) = 0;
                      *(_BYTE *)v88 = 0;
                      v92 = (void **)(v90 + 24);
                      if (*(char *)(v90 + 47) < 0)
                        operator delete(*v92);
                      v93 = *(_OWORD *)(v88 + 24);
                      *(_QWORD *)(v90 + 40) = *(_QWORD *)(v88 + 40);
                      *(_OWORD *)v92 = v93;
                      *(_BYTE *)(v88 + 47) = 0;
                      *(_BYTE *)(v88 + 24) = 0;
                      v94 = *(_QWORD *)(v88 + 48);
                      *(_DWORD *)(v90 + 56) = *(_DWORD *)(v88 + 56);
                      *(_QWORD *)(v90 + 48) = v94;
                      if (v81 < v84)
                        break;
                      v95 = 2 * v84;
                      v84 = (2 * v84) | 1;
                      v85 = v7 + (v84 << 6);
                      v96 = v95 + 2;
                      if (v96 < v10 && *(double *)(v85 + 48) > *(double *)(v85 + 112))
                      {
                        v85 += 64;
                        v84 = v96;
                      }
                    }
                    while (*(double *)(v85 + 48) <= v87);
                    if (*(char *)(v88 + 23) < 0)
                      operator delete(*(void **)v88);
                    *(_QWORD *)v88 = v152;
                    *(_QWORD *)(v88 + 8) = *(_QWORD *)v182;
                    *(_QWORD *)(v88 + 15) = *(_QWORD *)&v182[7];
                    *(_BYTE *)(v88 + 23) = v89;
                    if (*(char *)(v88 + 47) < 0)
                      operator delete(*(void **)(v88 + 24));
                    *(_QWORD *)(v88 + 24) = v156;
                    *(_QWORD *)(v88 + 32) = *(_QWORD *)v175;
                    *(_QWORD *)(v88 + 39) = *(_QWORD *)&v175[7];
                    *(_BYTE *)(v88 + 47) = v160;
                    *(double *)(v88 + 48) = v87;
                    *(_DWORD *)(v88 + 56) = v154;
                  }
                }
                v82 = v83 - 1;
              }
              while (v83);
              v97 = (unint64_t)v9 >> 6;
              v98 = v163;
              do
              {
                if (v97 >= 2)
                {
                  v99 = 0;
                  v161 = *(_QWORD *)v7;
                  v164 = v98;
                  *(_QWORD *)v169 = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)&v169[7] = *(_QWORD *)(v7 + 15);
                  v100 = *(_BYTE *)(v7 + 23);
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)(v7 + 8) = 0;
                  *(_QWORD *)(v7 + 16) = 0;
                  v101 = *(_QWORD *)(v7 + 24);
                  *(_QWORD *)v167 = *(_QWORD *)(v7 + 32);
                  *(_QWORD *)&v167[7] = *(_QWORD *)(v7 + 39);
                  v102 = *(_BYTE *)(v7 + 47);
                  *(_QWORD *)(v7 + 32) = 0;
                  *(_QWORD *)(v7 + 40) = 0;
                  v166 = *(_DWORD *)(v7 + 56);
                  v165 = *(_QWORD *)(v7 + 48);
                  v103 = v7;
                  *(_QWORD *)(v7 + 24) = 0;
                  do
                  {
                    v104 = v103 + ((v99 + 1) << 6);
                    v105 = 2 * v99;
                    v99 = (2 * v99) | 1;
                    v106 = v105 + 2;
                    if (v106 < v97 && *(double *)(v104 + 48) > *(double *)(v104 + 112))
                    {
                      v104 += 64;
                      v99 = v106;
                    }
                    if (*(char *)(v103 + 23) < 0)
                      operator delete(*(void **)v103);
                    v107 = *(_OWORD *)v104;
                    *(_QWORD *)(v103 + 16) = *(_QWORD *)(v104 + 16);
                    *(_OWORD *)v103 = v107;
                    *(_BYTE *)(v104 + 23) = 0;
                    *(_BYTE *)v104 = 0;
                    v108 = (void **)(v103 + 24);
                    if (*(char *)(v103 + 47) < 0)
                      operator delete(*v108);
                    v109 = *(_OWORD *)(v104 + 24);
                    *(_QWORD *)(v103 + 40) = *(_QWORD *)(v104 + 40);
                    *(_OWORD *)v108 = v109;
                    v111 = (double *)(v104 + 48);
                    v110 = *(_QWORD *)(v104 + 48);
                    *(_BYTE *)(v104 + 47) = 0;
                    *(_BYTE *)(v104 + 24) = 0;
                    *(_DWORD *)(v103 + 56) = *(_DWORD *)(v104 + 56);
                    *(_QWORD *)(v103 + 48) = v110;
                    v103 = v104;
                  }
                  while (v99 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
                  v112 = (void **)(v104 + 24);
                  v113 = (void **)(v164 - 64);
                  v114 = *(char *)(v104 + 23);
                  if (v104 == v164 - 64)
                  {
                    if (v114 < 0)
                      operator delete(*(void **)v104);
                    *(_QWORD *)v104 = v161;
                    *(_QWORD *)(v104 + 8) = *(_QWORD *)v169;
                    *(_QWORD *)(v104 + 15) = *(_QWORD *)&v169[7];
                    *(_BYTE *)(v104 + 23) = v100;
                    if (*(char *)(v104 + 47) < 0)
                      operator delete(*v112);
                    *(_QWORD *)(v104 + 24) = v101;
                    *(_QWORD *)(v104 + 32) = *(_QWORD *)v167;
                    *(_QWORD *)(v104 + 39) = *(_QWORD *)&v167[7];
                    *(_BYTE *)(v104 + 47) = v102;
                    *(_DWORD *)(v104 + 56) = v166;
                    *(_QWORD *)v111 = v165;
                  }
                  else
                  {
                    if (v114 < 0)
                      operator delete(*(void **)v104);
                    v115 = *(_OWORD *)v113;
                    *(_QWORD *)(v104 + 16) = *(_QWORD *)(v164 - 48);
                    *(_OWORD *)v104 = v115;
                    *(_BYTE *)(v164 - 41) = 0;
                    *(_BYTE *)(v164 - 64) = 0;
                    if (*(char *)(v104 + 47) < 0)
                      operator delete(*v112);
                    v116 = *(_OWORD *)(v164 - 40);
                    *(_QWORD *)(v104 + 40) = *(_QWORD *)(v164 - 24);
                    *(_OWORD *)v112 = v116;
                    v117 = *(_QWORD *)(v164 - 16);
                    *(_BYTE *)(v164 - 17) = 0;
                    *(_BYTE *)(v164 - 40) = 0;
                    *(_DWORD *)(v104 + 56) = *(_DWORD *)(v164 - 8);
                    *(_QWORD *)v111 = v117;
                    if (*(char *)(v164 - 41) < 0)
                      operator delete(*v113);
                    *(_QWORD *)(v164 - 64) = v161;
                    *(_QWORD *)(v164 - 49) = *(_QWORD *)&v169[7];
                    *(_QWORD *)(v164 - 56) = *(_QWORD *)v169;
                    *(_BYTE *)(v164 - 41) = v100;
                    if (*(char *)(v164 - 17) < 0)
                      operator delete(*(void **)(v164 - 40));
                    *(_QWORD *)(v164 - 40) = v101;
                    *(_QWORD *)(v164 - 25) = *(_QWORD *)&v167[7];
                    *(_QWORD *)(v164 - 32) = *(_QWORD *)v167;
                    *(_BYTE *)(v164 - 17) = v102;
                    *(_DWORD *)(v164 - 8) = v166;
                    *(_QWORD *)(v164 - 16) = v165;
                    v118 = v104 + 64 - v7;
                    if (v118 >= 65)
                    {
                      v119 = (unint64_t)((v118 >> 6) - 2) >> 1;
                      v120 = *v111;
                      if (*(double *)(v7 + (v119 << 6) + 48) > *v111)
                      {
                        v121 = *(void **)v104;
                        *(_QWORD *)v183 = *(_QWORD *)(v104 + 8);
                        *(_QWORD *)&v183[7] = *(_QWORD *)(v104 + 15);
                        v122 = *(_BYTE *)(v104 + 23);
                        *(_QWORD *)v104 = 0;
                        *(_QWORD *)(v104 + 8) = 0;
                        *(_QWORD *)(v104 + 16) = 0;
                        v123 = *(_QWORD *)(v104 + 24);
                        *(_QWORD *)&v176[7] = *(_QWORD *)(v104 + 39);
                        *(_QWORD *)v176 = *(_QWORD *)(v104 + 32);
                        v162 = *(_BYTE *)(v104 + 47);
                        *v112 = 0;
                        *(_QWORD *)(v104 + 32) = 0;
                        *(_QWORD *)(v104 + 40) = 0;
                        v157 = *(_DWORD *)(v104 + 56);
                        do
                        {
                          if (*(char *)(v104 + 23) < 0)
                            operator delete(*(void **)v104);
                          v124 = v7 + (v119 << 6);
                          v125 = *(_OWORD *)v124;
                          *(_QWORD *)(v104 + 16) = *(_QWORD *)(v124 + 16);
                          *(_OWORD *)v104 = v125;
                          *(_BYTE *)(v124 + 23) = 0;
                          *(_BYTE *)v124 = 0;
                          v126 = (void **)(v104 + 24);
                          if (*(char *)(v104 + 47) < 0)
                            operator delete(*v126);
                          v127 = v7 + (v119 << 6);
                          v128 = *(_OWORD *)(v127 + 24);
                          *(_QWORD *)(v104 + 40) = *(_QWORD *)(v127 + 40);
                          *(_OWORD *)v126 = v128;
                          *(_BYTE *)(v124 + 47) = 0;
                          *(_BYTE *)(v127 + 24) = 0;
                          v130 = *(_QWORD *)(v127 + 48);
                          v129 = v127 + 48;
                          *(_DWORD *)(v104 + 56) = *(_DWORD *)(v127 + 56);
                          *(_QWORD *)(v104 + 48) = v130;
                          if (!v119)
                            break;
                          v119 = (v119 - 1) >> 1;
                          v104 = v124;
                        }
                        while (*(double *)(v7 + (v119 << 6) + 48) > v120);
                        if (*(char *)(v124 + 23) < 0)
                          operator delete(*(void **)v124);
                        v131 = v127 + 24;
                        *(_QWORD *)v124 = v121;
                        *(_QWORD *)(v124 + 15) = *(_QWORD *)&v183[7];
                        *(_QWORD *)(v124 + 8) = *(_QWORD *)v183;
                        *(_BYTE *)(v124 + 23) = v122;
                        if (*(char *)(v124 + 47) < 0)
                          operator delete(*(void **)v131);
                        *(_QWORD *)v131 = v123;
                        *(_QWORD *)(v131 + 15) = *(_QWORD *)&v176[7];
                        *(_QWORD *)(v131 + 8) = *(_QWORD *)v176;
                        *(_BYTE *)(v131 + 23) = v162;
                        *(double *)v129 = v120;
                        *(_DWORD *)(v129 + 8) = v157;
                      }
                    }
                  }
                  v98 = v164;
                }
                v98 -= 64;
              }
              while ((unint64_t)v97-- > 2);
            }
            return;
          }
          v11 = v7 + ((unint64_t)v10 >> 1 << 6);
          v12 = (uint64_t)(a2 - 4);
          if ((unint64_t)v9 <= 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v11, v7, v12);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v7, v11, v12);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v148, v11 - 64, (uint64_t)(a2 - 8));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v147, v11 + 64, (uint64_t)(a2 - 12));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v11 - 64, v11, v11 + 64);
            v13 = *(_QWORD *)v7;
            *(_QWORD *)&v178 = *v153;
            *(_QWORD *)((char *)&v178 + 7) = *(_QWORD *)((char *)v153 + 7);
            v14 = *(_BYTE *)(v7 + 23);
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            v15 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)&v171 = *v151;
            *(_QWORD *)((char *)&v171 + 7) = *(_QWORD *)((char *)v151 + 7);
            v16 = *(_BYTE *)(v7 + 47);
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            v170 = *(_DWORD *)(v150 + 8);
            v168 = *(_QWORD *)v150;
            v17 = *(_OWORD *)v11;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v11 + 16);
            *(_OWORD *)v7 = v17;
            *(_BYTE *)(v11 + 23) = 0;
            *(_BYTE *)v11 = 0;
            v18 = *(_OWORD *)(v11 + 24);
            v19 = *(_QWORD *)(v11 + 48);
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v11 + 40);
            *(_OWORD *)v8 = v18;
            *(_BYTE *)(v11 + 47) = 0;
            *(_BYTE *)(v11 + 24) = 0;
            *(_DWORD *)(v150 + 8) = *(_DWORD *)(v11 + 56);
            *(_QWORD *)v150 = v19;
            *(_QWORD *)v11 = v13;
            *(_QWORD *)(v11 + 15) = *(_QWORD *)((char *)&v178 + 7);
            *(_QWORD *)(v11 + 8) = v178;
            *(_BYTE *)(v11 + 23) = v14;
            *(_QWORD *)(v11 + 24) = v15;
            *(_QWORD *)(v11 + 39) = *(_QWORD *)((char *)&v171 + 7);
            *(_QWORD *)(v11 + 32) = v171;
            *(_BYTE *)(v11 + 47) = v16;
            *(_DWORD *)(v11 + 56) = v170;
            *(_QWORD *)(v11 + 48) = v168;
          }
          v158 = --a3;
          if ((a4 & 1) != 0)
          {
            v20 = *(double *)(v7 + 48);
LABEL_11:
            v21 = *(_QWORD *)v7;
            *(_QWORD *)v179 = *v153;
            *(_QWORD *)&v179[7] = *(_QWORD *)((char *)v153 + 7);
            v22 = *(_BYTE *)(v7 + 23);
            *(_QWORD *)v7 = 0;
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            v155 = *(_QWORD *)(v7 + 24);
            *(_QWORD *)&v172[7] = *(_QWORD *)((char *)v151 + 7);
            *(_QWORD *)v172 = *v151;
            v23 = *(_BYTE *)(v7 + 47);
            *(_QWORD *)(v8 + 8) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)v8 = 0;
            v24 = v7;
            v25 = *(_DWORD *)(v7 + 56);
            do
            {
              v26 = v24;
              v24 += 64;
            }
            while (*(double *)(v26 + 112) > v20);
            v27 = v163;
            if (v26 == v7)
            {
              v30 = v163;
              while (v24 < v30)
              {
                v28 = (__int128 *)(v30 - 64);
                v31 = *(double *)(v30 - 16);
                v30 -= 64;
                if (v31 > v20)
                  goto LABEL_21;
              }
              v28 = (__int128 *)v30;
            }
            else
            {
              do
              {
                v28 = (__int128 *)(v27 - 64);
                v29 = *(double *)(v27 - 16);
                v27 -= 64;
              }
              while (v29 <= v20);
            }
LABEL_21:
            a1 = v24;
            if (v24 < (unint64_t)v28)
            {
              v32 = v28;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, v32);
                do
                {
                  v33 = *(double *)(a1 + 112);
                  a1 += 64;
                }
                while (v33 > v20);
                do
                {
                  v34 = *((double *)v32 - 2);
                  v32 -= 4;
                }
                while (v34 <= v20);
              }
              while (a1 < (unint64_t)v32);
            }
            v35 = (void **)(a1 - 64);
            if (a1 - 64 != v7)
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v36 = *(_OWORD *)v35;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 48);
              *(_OWORD *)v7 = v36;
              *(_BYTE *)(a1 - 41) = 0;
              *(_BYTE *)(a1 - 64) = 0;
              if (*(char *)(v7 + 47) < 0)
                operator delete(*(void **)v8);
              v37 = *(_OWORD *)(a1 - 40);
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(a1 - 24);
              *(_OWORD *)v8 = v37;
              *(_BYTE *)(a1 - 17) = 0;
              *(_BYTE *)(a1 - 40) = 0;
              v38 = *(_QWORD *)(a1 - 16);
              *(_DWORD *)(v150 + 8) = *(_DWORD *)(a1 - 8);
              *(_QWORD *)v150 = v38;
            }
            if (*(char *)(a1 - 41) < 0)
              operator delete(*v35);
            *(_QWORD *)(a1 - 64) = v21;
            *(_QWORD *)(a1 - 49) = *(_QWORD *)&v179[7];
            *(_QWORD *)(a1 - 56) = *(_QWORD *)v179;
            *(_BYTE *)(a1 - 41) = v22;
            if (*(char *)(a1 - 17) < 0)
              operator delete(*(void **)(a1 - 40));
            a3 = v158;
            *(_QWORD *)(a1 - 40) = v155;
            *(_QWORD *)(a1 - 25) = *(_QWORD *)&v172[7];
            *(_QWORD *)(a1 - 32) = *(_QWORD *)v172;
            *(_BYTE *)(a1 - 17) = v23;
            *(double *)(a1 - 16) = v20;
            *(_DWORD *)(a1 - 8) = v25;
            a2 = (__int128 *)v163;
            if (v24 >= (unint64_t)v28)
            {
              v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(v7, a1 - 64);
              if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, v163))
              {
                a2 = (__int128 *)(a1 - 64);
                if (!v39)
                  continue;
                return;
              }
              if (v39)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *,false>(v7, a1 - 64, v158, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v20 = *(double *)(v7 + 48);
          if (*(double *)(v7 - 16) > v20)
            goto LABEL_11;
          v40 = *(_QWORD *)v7;
          *(_QWORD *)v180 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)&v180[7] = *(_QWORD *)(v7 + 15);
          v41 = *(_BYTE *)(v7 + 23);
          *(_QWORD *)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          v42 = (void **)(v7 + 24);
          v43 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)&v173[7] = *(_QWORD *)(v7 + 39);
          *(_QWORD *)v173 = *(_QWORD *)(v7 + 32);
          v44 = *(_BYTE *)(v7 + 47);
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = 0;
          if (v20 <= *((double *)a2 - 2))
          {
            v47 = v7 + 64;
            do
            {
              a1 = v47;
              if (v47 >= (unint64_t)a2)
                break;
              v48 = *(double *)(v47 + 48);
              v47 += 64;
            }
            while (v20 <= v48);
          }
          else
          {
            v45 = v7;
            do
            {
              a1 = v45 + 64;
              v46 = *(double *)(v45 + 112);
              v45 += 64;
            }
            while (v20 <= v46);
          }
          if (a1 < (unint64_t)a2)
          {
            v49 = a2;
            do
            {
              a2 = v49 - 4;
              v50 = *((double *)v49 - 2);
              v49 -= 4;
            }
            while (v20 > v50);
          }
          v51 = *(_DWORD *)(v7 + 56);
          while (a1 < (unint64_t)a2)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, a2);
            do
            {
              v52 = *(double *)(a1 + 112);
              a1 += 64;
            }
            while (v20 <= v52);
            do
            {
              v53 = *((double *)a2 - 2);
              a2 -= 4;
            }
            while (v20 > v53);
          }
          v54 = (void **)(a1 - 64);
          if (a1 - 64 != v7)
          {
            if (*(char *)(v7 + 23) < 0)
              operator delete(*(void **)v7);
            v55 = *(_OWORD *)v54;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 48);
            *(_OWORD *)v7 = v55;
            *(_BYTE *)(a1 - 41) = 0;
            *(_BYTE *)(a1 - 64) = 0;
            if (*(char *)(v7 + 47) < 0)
              operator delete(*v42);
            v56 = *(_OWORD *)(a1 - 40);
            *(_QWORD *)(v7 + 40) = *(_QWORD *)(a1 - 24);
            *(_OWORD *)v42 = v56;
            *(_BYTE *)(a1 - 17) = 0;
            *(_BYTE *)(a1 - 40) = 0;
            v57 = *(_QWORD *)(a1 - 16);
            *(_DWORD *)(v7 + 56) = *(_DWORD *)(a1 - 8);
            *(_QWORD *)(v7 + 48) = v57;
          }
          if (*(char *)(a1 - 41) < 0)
            operator delete(*v54);
          *(_QWORD *)(a1 - 64) = v40;
          *(_QWORD *)(a1 - 49) = *(_QWORD *)&v180[7];
          *(_QWORD *)(a1 - 56) = *(_QWORD *)v180;
          *(_BYTE *)(a1 - 41) = v41;
          if (*(char *)(a1 - 17) < 0)
            operator delete(*(void **)(a1 - 40));
          a4 = 0;
          *(_QWORD *)(a1 - 40) = v43;
          *(_QWORD *)(a1 - 25) = *(_QWORD *)&v173[7];
          *(_QWORD *)(a1 - 32) = *(_QWORD *)v173;
          *(_BYTE *)(a1 - 17) = v44;
          *(double *)(a1 - 16) = v20;
          *(_DWORD *)(a1 - 8) = v51;
          a2 = (__int128 *)v163;
          goto LABEL_1;
        }
        v58 = (__int128 *)(v7 + 64);
        v60 = (__int128 *)v7 == a2 || v58 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v60)
          {
            v61 = 0;
            v62 = v7;
            do
            {
              v63 = v58;
              v64 = *(double *)(v62 + 112);
              if (v64 > *(double *)(v62 + 48))
              {
                v65 = *(_QWORD *)v58;
                *(_QWORD *)&v181[7] = *(_QWORD *)(v62 + 79);
                *(_QWORD *)v181 = *(_QWORD *)(v62 + 72);
                v66 = *(_BYTE *)(v62 + 87);
                *((_QWORD *)v58 + 1) = 0;
                *((_QWORD *)v58 + 2) = 0;
                *(_QWORD *)v58 = 0;
                *(_QWORD *)&v174[7] = *(_QWORD *)(v62 + 103);
                v67 = *(void **)(v62 + 88);
                *(_QWORD *)v174 = *(_QWORD *)(v62 + 96);
                v159 = *(_BYTE *)(v62 + 111);
                *(_QWORD *)(v62 + 88) = 0;
                *(_QWORD *)(v62 + 96) = 0;
                *(_QWORD *)(v62 + 104) = 0;
                v68 = *(_DWORD *)(v62 + 120);
                v69 = v61;
                while (1)
                {
                  v70 = v69;
                  v71 = v7 + v69;
                  v72 = v7 + v69 + 64;
                  if (*(char *)(v7 + v69 + 87) < 0)
                    operator delete(*(void **)v72);
                  *(_OWORD *)v72 = *(_OWORD *)v71;
                  *(_QWORD *)(v72 + 16) = *(_QWORD *)(v71 + 16);
                  *(_BYTE *)(v71 + 23) = 0;
                  *(_BYTE *)v71 = 0;
                  v73 = (void **)(v71 + 88);
                  if (*(char *)(v71 + 111) < 0)
                    operator delete(*v73);
                  v74 = v7 + v70;
                  *(_OWORD *)v73 = *(_OWORD *)(v7 + v70 + 24);
                  v75 = *(_QWORD *)(v7 + v70 + 48);
                  *(_QWORD *)(v71 + 104) = *(_QWORD *)(v7 + v70 + 40);
                  *(_BYTE *)(v74 + 47) = 0;
                  *(_BYTE *)(v74 + 24) = 0;
                  *(_QWORD *)(v74 + 112) = v75;
                  *(_DWORD *)(v74 + 120) = *(_DWORD *)(v7 + v70 + 56);
                  if (!v70)
                    break;
                  v76 = *(double *)(v74 - 16);
                  v69 = v70 - 64;
                  if (v64 <= v76)
                  {
                    v77 = v7 + v70;
                    v78 = v7 + v70;
                    v79 = (double *)(v7 + v70 + 48);
                    v80 = (void **)(v78 + 24);
                    goto LABEL_95;
                  }
                }
                v79 = (double *)(v74 + 48);
                v80 = (void **)(v74 + 24);
                v77 = v7;
LABEL_95:
                if (*(char *)(v77 + 23) < 0)
                  operator delete(*(void **)v77);
                *(_QWORD *)v77 = v65;
                *(_QWORD *)(v77 + 8) = *(_QWORD *)v181;
                *(_QWORD *)(v77 + 15) = *(_QWORD *)&v181[7];
                *(_BYTE *)(v77 + 23) = v66;
                if (*(char *)(v77 + 47) < 0)
                  operator delete(*v80);
                *v80 = v67;
                *(_QWORD *)(v77 + 32) = *(_QWORD *)v174;
                *(_QWORD *)(v77 + 39) = *(_QWORD *)&v174[7];
                *(_BYTE *)(v77 + 47) = v159;
                *v79 = v64;
                *(_DWORD *)(v77 + 56) = v68;
                a2 = (__int128 *)v163;
              }
              v58 = v63 + 4;
              v61 += 64;
              v62 = (uint64_t)v63;
            }
            while (v63 + 4 != a2);
          }
        }
        else if (!v60)
        {
          v133 = v7 + 112;
          do
          {
            v134 = v58;
            v135 = *(double *)(v7 + 112);
            if (v135 > *(double *)(v7 + 48))
            {
              v136 = *(_QWORD *)v58;
              *(_QWORD *)&v184[7] = *(_QWORD *)(v7 + 79);
              *(_QWORD *)v184 = *(_QWORD *)(v7 + 72);
              v137 = *(_BYTE *)(v7 + 87);
              *((_QWORD *)v58 + 1) = 0;
              *((_QWORD *)v58 + 2) = 0;
              *(_QWORD *)v58 = 0;
              *(_QWORD *)&v177[7] = *(_QWORD *)(v7 + 103);
              v138 = *(_QWORD *)(v7 + 88);
              *(_QWORD *)v177 = *(_QWORD *)(v7 + 96);
              v139 = *(_BYTE *)(v7 + 111);
              *(_QWORD *)(v7 + 88) = 0;
              *(_QWORD *)(v7 + 96) = 0;
              *(_QWORD *)(v7 + 104) = 0;
              v140 = *(_DWORD *)(v7 + 120);
              v141 = v133;
              do
              {
                v142 = (void **)(v141 - 48);
                if (*(char *)(v141 - 25) < 0)
                  operator delete(*v142);
                v143 = v141 - 112;
                *(_OWORD *)v142 = *(_OWORD *)(v141 - 112);
                *(_QWORD *)(v141 - 32) = *(_QWORD *)(v141 - 96);
                *(_BYTE *)(v141 - 89) = 0;
                *(_BYTE *)(v141 - 112) = 0;
                v144 = (void **)(v141 - 24);
                if (*(char *)(v141 - 1) < 0)
                  operator delete(*v144);
                *(_OWORD *)v144 = *(_OWORD *)(v141 - 88);
                *(_QWORD *)(v141 - 8) = *(_QWORD *)(v141 - 72);
                *(_BYTE *)(v141 - 65) = 0;
                *(_BYTE *)(v141 - 88) = 0;
                v145 = v141 - 64;
                *(_QWORD *)v141 = *(_QWORD *)(v141 - 64);
                *(_DWORD *)(v141 + 8) = *(_DWORD *)(v141 - 56);
                v146 = *(double *)(v141 - 128);
                v141 -= 64;
              }
              while (v135 > v146);
              if (*(char *)(v143 + 23) < 0)
                operator delete(*(void **)v143);
              *(_QWORD *)v143 = v136;
              *(_QWORD *)(v143 + 15) = *(_QWORD *)&v184[7];
              *(_QWORD *)(v143 + 8) = *(_QWORD *)v184;
              *(_BYTE *)(v143 + 23) = v137;
              if (*(char *)(v143 + 47) < 0)
                operator delete(*(void **)(v145 - 24));
              *(_QWORD *)(v145 - 24) = v138;
              *(_QWORD *)(v143 + 39) = *(_QWORD *)&v177[7];
              *(_QWORD *)(v143 + 32) = *(_QWORD *)v177;
              *(_BYTE *)(v145 - 1) = v139;
              *(double *)v145 = v135;
              *(_DWORD *)(v145 + 8) = v140;
              a2 = (__int128 *)v163;
            }
            v58 = v134 + 4;
            v133 += 64;
            v7 = (uint64_t)v134;
          }
          while (v134 + 4 != a2);
        }
        return;
    }
  }
}

  v7 = a2;
  v8 = a2 - 1;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8);
        if (v67 < (*(float (**)(unsigned int *))(*(_QWORD *)*a1 + 24))(*a1))
        {
          v68 = *a1;
          *a1 = *v8;
          *v8 = v68;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, v8);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, v8);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a1 + 3, v8);
        return;
      default:
        if (v10 <= 191)
        {
          v69 = a1 + 1;
          v71 = a1 == a2 || v69 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v71)
            {
              v72 = a1;
              do
              {
                v73 = v72;
                v72 = v69;
                v74 = (*(float (**)(unsigned int *))(*(_QWORD *)v73[1] + 24))(v73[1]);
                if (v74 < (*(float (**)(unsigned int *))(*(_QWORD *)*v73 + 24))(*v73))
                {
                  v75 = 0;
                  v76 = *v72;
                  *v72 = 0;
                  for (i = v72; ; v75 = *i)
                  {
                    v78 = i;
                    i = v73;
                    v79 = *v73;
                    *v73 = 0;
                    *v78 = v79;
                    if (v75)
                    {
                      v80 = v75 + 2;
                      v81 = atomic_load(v75 + 2);
                      if (v81 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 248))(v75);
                      }
                      else
                      {
                        do
                          v82 = __ldaxr(v80);
                        while (__stlxr(v82 - 1, v80));
                      }
                    }
                    if (v73 == a1)
                      break;
                    v83 = (*(float (**)(unsigned int *))(*(_QWORD *)v76 + 24))(v76);
                    --v73;
                    if (v83 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
                      goto LABEL_89;
                  }
                  i = a1;
LABEL_89:
                  v84 = *i;
                  *i = v76;
                  if (v84)
                  {
                    v85 = v84 + 2;
                    v86 = atomic_load(v84 + 2);
                    if (v86 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 248))(v84);
                    }
                    else
                    {
                      do
                        v87 = __ldaxr(v85);
                      while (__stlxr(v87 - 1, v85));
                    }
                  }
                }
                v69 = v72 + 1;
              }
              while (v72 + 1 != a2);
            }
          }
          else if (!v71)
          {
            do
            {
              v155 = a1;
              a1 = v69;
              v156 = (*(float (**)(unsigned int *))(*(_QWORD *)v155[1] + 24))(v155[1]);
              if (v156 < (*(float (**)(unsigned int *))(*(_QWORD *)*v155 + 24))(*v155))
              {
                v157 = 0;
                v158 = *a1;
                *a1 = 0;
                v159 = a1;
                do
                {
                  v160 = v159;
                  v159 = v155;
                  v161 = *v155;
                  *v155 = 0;
                  *v160 = v161;
                  if (v157)
                  {
                    v162 = v157 + 2;
                    v163 = atomic_load(v157 + 2);
                    if (v163 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 248))(v157);
                    }
                    else
                    {
                      do
                        v164 = __ldaxr(v162);
                      while (__stlxr(v164 - 1, v162));
                    }
                  }
                  v165 = (*(float (**)(unsigned int *))(*(_QWORD *)v158 + 24))(v158);
                  --v155;
                  v166 = (*(float (**)(_QWORD))(*(_QWORD *)*(v159 - 1) + 24))(*(v159 - 1));
                  v157 = *v159;
                }
                while (v165 < v166);
                *v159 = v158;
                if (v157)
                {
                  v167 = v157 + 2;
                  v168 = atomic_load(v157 + 2);
                  if (v168 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 248))(v157);
                  }
                  else
                  {
                    do
                      v169 = __ldaxr(v167);
                    while (__stlxr(v169 - 1, v167));
                  }
                }
              }
              v69 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v88 = (unint64_t)(v11 - 2) >> 1;
          v170 = v88;
          do
          {
            v89 = v88;
            if (v170 >= v88)
            {
              v90 = (2 * v88) | 1;
              v91 = &a1[v90];
              if (2 * v88 + 2 < v11)
              {
                v92 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                if (v92 < (*(float (**)(unsigned int *))(*(_QWORD *)v91[1] + 24))(v91[1]))
                {
                  ++v91;
                  v90 = 2 * v89 + 2;
                }
              }
              v93 = &a1[v89];
              v94 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
              if (v94 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v93 + 24))(*v93))
              {
                v95 = *v93;
                *v93 = 0;
                do
                {
                  v96 = v91;
                  v97 = *v91;
                  *v91 = 0;
                  v98 = *v93;
                  *v93 = v97;
                  if (v98)
                  {
                    v99 = v98 + 2;
                    v100 = atomic_load(v98 + 2);
                    if (v100 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 248))(v98);
                    }
                    else
                    {
                      do
                        v101 = __ldaxr(v99);
                      while (__stlxr(v101 - 1, v99));
                    }
                  }
                  if (v170 < v90)
                    break;
                  v102 = 2 * v90;
                  v90 = (2 * v90) | 1;
                  v91 = &a1[v90];
                  v103 = v102 + 2;
                  if (v102 + 2 < v11)
                  {
                    v104 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                    if (v104 < (*(float (**)(unsigned int *))(*(_QWORD *)v91[1] + 24))(v91[1]))
                    {
                      ++v91;
                      v90 = v103;
                    }
                  }
                  v105 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                  v93 = v96;
                }
                while (v105 >= (*(float (**)(unsigned int *))(*(_QWORD *)v95 + 24))(v95));
                v106 = *v96;
                *v96 = v95;
                if (v106)
                {
                  v107 = v106 + 2;
                  v108 = atomic_load(v106 + 2);
                  if (v108 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 248))(v106);
                  }
                  else
                  {
                    do
                      v109 = __ldaxr(v107);
                    while (__stlxr(v109 - 1, v107));
                  }
                }
              }
            }
            v88 = v89 - 1;
          }
          while (v89);
          v110 = (unint64_t)v10 >> 3;
          while (2)
          {
            v111 = 0;
            v112 = *a1;
            *a1 = 0;
            v113 = v110 - 2;
            if (v110 < 2)
              v113 = v110 - 1;
            v114 = v113 >> 1;
            v115 = a1;
            do
            {
              v116 = v115;
              v115 += v111 + 1;
              v117 = 2 * v111;
              v111 = (2 * v111) | 1;
              v118 = v117 + 2;
              if (v117 + 2 < v110)
              {
                v119 = (*(float (**)(unsigned int *))(*(_QWORD *)*v115 + 24))(*v115);
                if (v119 < (*(float (**)(unsigned int *))(*(_QWORD *)v115[1] + 24))(v115[1]))
                {
                  ++v115;
                  v111 = v118;
                }
              }
              v120 = *v115;
              *v115 = 0;
              v121 = *v116;
              *v116 = v120;
              if (v121)
              {
                v122 = v121 + 2;
                v123 = atomic_load(v121 + 2);
                if (v123 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 248))(v121);
                }
                else
                {
                  do
                    v124 = __ldaxr(v122);
                  while (__stlxr(v124 - 1, v122));
                }
              }
            }
            while (v111 <= v114);
            v125 = a2 - 1;
            if (v115 == a2 - 1)
            {
              v147 = *v115;
              *v115 = v112;
              if (!v147)
                goto LABEL_155;
              v151 = v147 + 2;
              v152 = atomic_load(v147 + 2);
              if (v152 == 1)
                goto LABEL_153;
              do
                v153 = __ldaxr(v151);
              while (__stlxr(v153 - 1, v151));
            }
            else
            {
              v126 = *v125;
              *v125 = 0;
              v127 = *v115;
              *v115 = v126;
              if (v127)
              {
                v128 = v127 + 2;
                v129 = atomic_load(v127 + 2);
                if (v129 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v127 + 248))(v127);
                }
                else
                {
                  do
                    v130 = __ldaxr(v128);
                  while (__stlxr(v130 - 1, v128));
                }
              }
              v131 = *v125;
              *v125 = v112;
              if (v131)
              {
                v132 = v131 + 2;
                v133 = atomic_load(v131 + 2);
                if (v133 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v131 + 248))(v131);
                }
                else
                {
                  do
                    v134 = __ldaxr(v132);
                  while (__stlxr(v134 - 1, v132));
                }
              }
              v135 = (char *)(v115 + 1) - (char *)a1;
              if (v135 >= 9)
              {
                v136 = (unint64_t)((v135 >> 3) - 2) >> 1;
                v137 = &a1[v136];
                v138 = (*(float (**)(unsigned int *))(*(_QWORD *)*v137 + 24))(*v137);
                if (v138 < (*(float (**)(unsigned int *))(*(_QWORD *)*v115 + 24))(*v115))
                {
                  v139 = *v115;
                  *v115 = 0;
                  do
                  {
                    v140 = v137;
                    v141 = *v137;
                    *v137 = 0;
                    v142 = *v115;
                    *v115 = v141;
                    if (v142)
                    {
                      v143 = v142 + 2;
                      v144 = atomic_load(v142 + 2);
                      if (v144 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v142 + 248))(v142);
                      }
                      else
                      {
                        do
                          v145 = __ldaxr(v143);
                        while (__stlxr(v145 - 1, v143));
                      }
                    }
                    if (!v136)
                      break;
                    v136 = (v136 - 1) >> 1;
                    v137 = &a1[v136];
                    v146 = (*(float (**)(unsigned int *))(*(_QWORD *)*v137 + 24))(*v137);
                    v115 = v140;
                  }
                  while (v146 < (*(float (**)(unsigned int *))(*(_QWORD *)v139 + 24))(v139));
                  v147 = *v140;
                  *v140 = v139;
                  if (v147)
                  {
                    v148 = v147 + 2;
                    v149 = atomic_load(v147 + 2);
                    if (v149 != 1)
                    {
                      do
                        v150 = __ldaxr(v148);
                      while (__stlxr(v150 - 1, v148));
                      goto LABEL_155;
                    }
LABEL_153:
                    (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 248))(v147);
                  }
                }
              }
            }
LABEL_155:
            --a2;
            if (v110-- <= 2)
              return;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v13, a1, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v13, v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1 + 2, &a1[v12 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v13 - 1, v13, &a1[v12 + 1]);
          v14 = *a1;
          *a1 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = (*(float (**)(_QWORD))(*(_QWORD *)*(a1 - 1) + 24))(*(a1 - 1));
          if (v15 >= (*(float (**)(unsigned int *))(*(_QWORD *)*a1 + 24))(*a1))
          {
            v43 = *a1;
            *a1 = 0;
            v44 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
            if (v44 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8))
            {
              v47 = a1 + 1;
              do
              {
                v9 = v47;
                if (v47 >= a2)
                  break;
                v48 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                ++v47;
              }
              while (v48 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v9 + 24))(*v9));
            }
            else
            {
              v9 = a1;
              do
              {
                v45 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v46 = v9[1];
                ++v9;
              }
              while (v45 >= (*(float (**)(unsigned int *))(*(_QWORD *)v46 + 24))(v46));
            }
            v49 = a2;
            if (v9 < a2)
            {
              v49 = a2;
              do
              {
                v50 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v51 = (uint64_t)*--v49;
              }
              while (v50 < (*(float (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51));
            }
            while (v9 < v49)
            {
              v52 = *v9;
              *v9 = *v49;
              *v49 = v52;
              do
              {
                v53 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v54 = v9[1];
                ++v9;
              }
              while (v53 >= (*(float (**)(unsigned int *))(*(_QWORD *)v54 + 24))(v54));
              do
              {
                v55 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v56 = (uint64_t)*--v49;
              }
              while (v55 < (*(float (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56));
            }
            v57 = v9 - 1;
            if (v9 - 1 != a1)
            {
              v58 = *v57;
              *v57 = 0;
              v59 = *a1;
              *a1 = v58;
              if (v59)
              {
                v60 = v59 + 2;
                v61 = atomic_load(v59 + 2);
                if (v61 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 248))(v59);
                }
                else
                {
                  do
                    v62 = __ldaxr(v60);
                  while (__stlxr(v62 - 1, v60));
                }
              }
            }
            a4 = 0;
            v63 = *v57;
            *v57 = v43;
            v7 = a2;
            if (v63)
            {
              v64 = v63 + 2;
              v65 = atomic_load(v63 + 2);
              if (v65 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 248))(v63);
              }
              else
              {
                do
                  v66 = __ldaxr(v64);
                while (__stlxr(v66 - 1, v64));
              }
              a4 = 0;
            }
            continue;
          }
        }
        v16 = *a1;
        *a1 = 0;
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = v17[1];
          ++v17;
          v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
        }
        while (v20 < (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        v21 = a2;
        if (v18 == a1)
        {
          v21 = a2;
          do
          {
            if (v17 >= v21)
              break;
            v24 = (uint64_t)*--v21;
            v25 = (*(float (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
          }
          while (v25 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        }
        else
        {
          do
          {
            v22 = (uint64_t)*--v21;
            v23 = (*(float (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
          }
          while (v23 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        }
        if (v17 < v21)
        {
          v26 = v17;
          v27 = v21;
          do
          {
            v28 = *v26;
            *v26 = *v27;
            *v27 = v28;
            do
            {
              v18 = v26;
              v29 = v26[1];
              ++v26;
              v30 = (*(float (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
            }
            while (v30 < (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
            do
            {
              v31 = (uint64_t)*--v27;
              v32 = (*(float (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
            }
            while (v32 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
          }
          while (v26 < v27);
        }
        if (v18 != a1)
        {
          v33 = *v18;
          *v18 = 0;
          v34 = *a1;
          *a1 = v33;
          if (v34)
          {
            v35 = v34 + 2;
            v36 = atomic_load(v34 + 2);
            if (v36 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 248))(v34);
            }
            else
            {
              do
                v37 = __ldaxr(v35);
              while (__stlxr(v37 - 1, v35));
            }
          }
        }
        v38 = *v18;
        *v18 = v16;
        v7 = a2;
        if (v38)
        {
          v39 = v38 + 2;
          v40 = atomic_load(v38 + 2);
          if (v40 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 248))(v38);
          }
          else
          {
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
          }
        }
        if (v17 < v21)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v9 = v18 + 1;
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v18);
        v9 = v18 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v18 + 1, a2))
        {
          if (v42)
            continue;
          goto LABEL_36;
        }
        a2 = v18;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2;
  v8 = a2 - 1;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8);
        if (v67 < (*(float (**)(unsigned int *))(*(_QWORD *)*a1 + 24))(*a1))
        {
          v68 = *a1;
          *a1 = *v8;
          *v8 = v68;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, v8);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, v8);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a1 + 3, v8);
        return;
      default:
        if (v10 <= 191)
        {
          v69 = a1 + 1;
          v71 = a1 == a2 || v69 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v71)
            {
              v72 = a1;
              do
              {
                v73 = v72;
                v72 = v69;
                v74 = (*(float (**)(unsigned int *))(*(_QWORD *)v73[1] + 24))(v73[1]);
                if (v74 < (*(float (**)(unsigned int *))(*(_QWORD *)*v73 + 24))(*v73))
                {
                  v75 = 0;
                  v76 = *v72;
                  *v72 = 0;
                  for (i = v72; ; v75 = *i)
                  {
                    v78 = i;
                    i = v73;
                    v79 = *v73;
                    *v73 = 0;
                    *v78 = v79;
                    if (v75)
                    {
                      v80 = v75 + 2;
                      v81 = atomic_load(v75 + 2);
                      if (v81 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 248))(v75);
                      }
                      else
                      {
                        do
                          v82 = __ldaxr(v80);
                        while (__stlxr(v82 - 1, v80));
                      }
                    }
                    if (v73 == a1)
                      break;
                    v83 = (*(float (**)(unsigned int *))(*(_QWORD *)v76 + 24))(v76);
                    --v73;
                    if (v83 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
                      goto LABEL_89;
                  }
                  i = a1;
LABEL_89:
                  v84 = *i;
                  *i = v76;
                  if (v84)
                  {
                    v85 = v84 + 2;
                    v86 = atomic_load(v84 + 2);
                    if (v86 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 248))(v84);
                    }
                    else
                    {
                      do
                        v87 = __ldaxr(v85);
                      while (__stlxr(v87 - 1, v85));
                    }
                  }
                }
                v69 = v72 + 1;
              }
              while (v72 + 1 != a2);
            }
          }
          else if (!v71)
          {
            do
            {
              v155 = a1;
              a1 = v69;
              v156 = (*(float (**)(unsigned int *))(*(_QWORD *)v155[1] + 24))(v155[1]);
              if (v156 < (*(float (**)(unsigned int *))(*(_QWORD *)*v155 + 24))(*v155))
              {
                v157 = 0;
                v158 = *a1;
                *a1 = 0;
                v159 = a1;
                do
                {
                  v160 = v159;
                  v159 = v155;
                  v161 = *v155;
                  *v155 = 0;
                  *v160 = v161;
                  if (v157)
                  {
                    v162 = v157 + 2;
                    v163 = atomic_load(v157 + 2);
                    if (v163 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 248))(v157);
                    }
                    else
                    {
                      do
                        v164 = __ldaxr(v162);
                      while (__stlxr(v164 - 1, v162));
                    }
                  }
                  v165 = (*(float (**)(unsigned int *))(*(_QWORD *)v158 + 24))(v158);
                  --v155;
                  v166 = (*(float (**)(_QWORD))(*(_QWORD *)*(v159 - 1) + 24))(*(v159 - 1));
                  v157 = *v159;
                }
                while (v165 < v166);
                *v159 = v158;
                if (v157)
                {
                  v167 = v157 + 2;
                  v168 = atomic_load(v157 + 2);
                  if (v168 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v157 + 248))(v157);
                  }
                  else
                  {
                    do
                      v169 = __ldaxr(v167);
                    while (__stlxr(v169 - 1, v167));
                  }
                }
              }
              v69 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v88 = (unint64_t)(v11 - 2) >> 1;
          v170 = v88;
          do
          {
            v89 = v88;
            if (v170 >= v88)
            {
              v90 = (2 * v88) | 1;
              v91 = &a1[v90];
              if (2 * v88 + 2 < v11)
              {
                v92 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                if (v92 < (*(float (**)(unsigned int *))(*(_QWORD *)v91[1] + 24))(v91[1]))
                {
                  ++v91;
                  v90 = 2 * v89 + 2;
                }
              }
              v93 = &a1[v89];
              v94 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
              if (v94 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v93 + 24))(*v93))
              {
                v95 = *v93;
                *v93 = 0;
                do
                {
                  v96 = v91;
                  v97 = *v91;
                  *v91 = 0;
                  v98 = *v93;
                  *v93 = v97;
                  if (v98)
                  {
                    v99 = v98 + 2;
                    v100 = atomic_load(v98 + 2);
                    if (v100 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v98 + 248))(v98);
                    }
                    else
                    {
                      do
                        v101 = __ldaxr(v99);
                      while (__stlxr(v101 - 1, v99));
                    }
                  }
                  if (v170 < v90)
                    break;
                  v102 = 2 * v90;
                  v90 = (2 * v90) | 1;
                  v91 = &a1[v90];
                  v103 = v102 + 2;
                  if (v102 + 2 < v11)
                  {
                    v104 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                    if (v104 < (*(float (**)(unsigned int *))(*(_QWORD *)v91[1] + 24))(v91[1]))
                    {
                      ++v91;
                      v90 = v103;
                    }
                  }
                  v105 = (*(float (**)(unsigned int *))(*(_QWORD *)*v91 + 24))(*v91);
                  v93 = v96;
                }
                while (v105 >= (*(float (**)(unsigned int *))(*(_QWORD *)v95 + 24))(v95));
                v106 = *v96;
                *v96 = v95;
                if (v106)
                {
                  v107 = v106 + 2;
                  v108 = atomic_load(v106 + 2);
                  if (v108 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 248))(v106);
                  }
                  else
                  {
                    do
                      v109 = __ldaxr(v107);
                    while (__stlxr(v109 - 1, v107));
                  }
                }
              }
            }
            v88 = v89 - 1;
          }
          while (v89);
          v110 = (unint64_t)v10 >> 3;
          while (2)
          {
            v111 = 0;
            v112 = *a1;
            *a1 = 0;
            v113 = v110 - 2;
            if (v110 < 2)
              v113 = v110 - 1;
            v114 = v113 >> 1;
            v115 = a1;
            do
            {
              v116 = v115;
              v115 += v111 + 1;
              v117 = 2 * v111;
              v111 = (2 * v111) | 1;
              v118 = v117 + 2;
              if (v117 + 2 < v110)
              {
                v119 = (*(float (**)(unsigned int *))(*(_QWORD *)*v115 + 24))(*v115);
                if (v119 < (*(float (**)(unsigned int *))(*(_QWORD *)v115[1] + 24))(v115[1]))
                {
                  ++v115;
                  v111 = v118;
                }
              }
              v120 = *v115;
              *v115 = 0;
              v121 = *v116;
              *v116 = v120;
              if (v121)
              {
                v122 = v121 + 2;
                v123 = atomic_load(v121 + 2);
                if (v123 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 248))(v121);
                }
                else
                {
                  do
                    v124 = __ldaxr(v122);
                  while (__stlxr(v124 - 1, v122));
                }
              }
            }
            while (v111 <= v114);
            v125 = a2 - 1;
            if (v115 == a2 - 1)
            {
              v147 = *v115;
              *v115 = v112;
              if (!v147)
                goto LABEL_155;
              v151 = v147 + 2;
              v152 = atomic_load(v147 + 2);
              if (v152 == 1)
                goto LABEL_153;
              do
                v153 = __ldaxr(v151);
              while (__stlxr(v153 - 1, v151));
            }
            else
            {
              v126 = *v125;
              *v125 = 0;
              v127 = *v115;
              *v115 = v126;
              if (v127)
              {
                v128 = v127 + 2;
                v129 = atomic_load(v127 + 2);
                if (v129 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v127 + 248))(v127);
                }
                else
                {
                  do
                    v130 = __ldaxr(v128);
                  while (__stlxr(v130 - 1, v128));
                }
              }
              v131 = *v125;
              *v125 = v112;
              if (v131)
              {
                v132 = v131 + 2;
                v133 = atomic_load(v131 + 2);
                if (v133 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v131 + 248))(v131);
                }
                else
                {
                  do
                    v134 = __ldaxr(v132);
                  while (__stlxr(v134 - 1, v132));
                }
              }
              v135 = (char *)(v115 + 1) - (char *)a1;
              if (v135 >= 9)
              {
                v136 = (unint64_t)((v135 >> 3) - 2) >> 1;
                v137 = &a1[v136];
                v138 = (*(float (**)(unsigned int *))(*(_QWORD *)*v137 + 24))(*v137);
                if (v138 < (*(float (**)(unsigned int *))(*(_QWORD *)*v115 + 24))(*v115))
                {
                  v139 = *v115;
                  *v115 = 0;
                  do
                  {
                    v140 = v137;
                    v141 = *v137;
                    *v137 = 0;
                    v142 = *v115;
                    *v115 = v141;
                    if (v142)
                    {
                      v143 = v142 + 2;
                      v144 = atomic_load(v142 + 2);
                      if (v144 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v142 + 248))(v142);
                      }
                      else
                      {
                        do
                          v145 = __ldaxr(v143);
                        while (__stlxr(v145 - 1, v143));
                      }
                    }
                    if (!v136)
                      break;
                    v136 = (v136 - 1) >> 1;
                    v137 = &a1[v136];
                    v146 = (*(float (**)(unsigned int *))(*(_QWORD *)*v137 + 24))(*v137);
                    v115 = v140;
                  }
                  while (v146 < (*(float (**)(unsigned int *))(*(_QWORD *)v139 + 24))(v139));
                  v147 = *v140;
                  *v140 = v139;
                  if (v147)
                  {
                    v148 = v147 + 2;
                    v149 = atomic_load(v147 + 2);
                    if (v149 != 1)
                    {
                      do
                        v150 = __ldaxr(v148);
                      while (__stlxr(v150 - 1, v148));
                      goto LABEL_155;
                    }
LABEL_153:
                    (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 248))(v147);
                  }
                }
              }
            }
LABEL_155:
            --a2;
            if (v110-- <= 2)
              return;
            continue;
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v13, a1, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v13, v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1 + 2, &a1[v12 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v13 - 1, v13, &a1[v12 + 1]);
          v14 = *a1;
          *a1 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = (*(float (**)(_QWORD))(*(_QWORD *)*(a1 - 1) + 24))(*(a1 - 1));
          if (v15 >= (*(float (**)(unsigned int *))(*(_QWORD *)*a1 + 24))(*a1))
          {
            v43 = *a1;
            *a1 = 0;
            v44 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
            if (v44 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8))
            {
              v47 = a1 + 1;
              do
              {
                v9 = v47;
                if (v47 >= a2)
                  break;
                v48 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                ++v47;
              }
              while (v48 >= (*(float (**)(unsigned int *))(*(_QWORD *)*v9 + 24))(*v9));
            }
            else
            {
              v9 = a1;
              do
              {
                v45 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v46 = v9[1];
                ++v9;
              }
              while (v45 >= (*(float (**)(unsigned int *))(*(_QWORD *)v46 + 24))(v46));
            }
            v49 = a2;
            if (v9 < a2)
            {
              v49 = a2;
              do
              {
                v50 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v51 = (uint64_t)*--v49;
              }
              while (v50 < (*(float (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51));
            }
            while (v9 < v49)
            {
              v52 = *v9;
              *v9 = *v49;
              *v49 = v52;
              do
              {
                v53 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v54 = v9[1];
                ++v9;
              }
              while (v53 >= (*(float (**)(unsigned int *))(*(_QWORD *)v54 + 24))(v54));
              do
              {
                v55 = (*(float (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
                v56 = (uint64_t)*--v49;
              }
              while (v55 < (*(float (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56));
            }
            v57 = v9 - 1;
            if (v9 - 1 != a1)
            {
              v58 = *v57;
              *v57 = 0;
              v59 = *a1;
              *a1 = v58;
              if (v59)
              {
                v60 = v59 + 2;
                v61 = atomic_load(v59 + 2);
                if (v61 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 248))(v59);
                }
                else
                {
                  do
                    v62 = __ldaxr(v60);
                  while (__stlxr(v62 - 1, v60));
                }
              }
            }
            a4 = 0;
            v63 = *v57;
            *v57 = v43;
            v7 = a2;
            if (v63)
            {
              v64 = v63 + 2;
              v65 = atomic_load(v63 + 2);
              if (v65 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 248))(v63);
              }
              else
              {
                do
                  v66 = __ldaxr(v64);
                while (__stlxr(v66 - 1, v64));
              }
              a4 = 0;
            }
            continue;
          }
        }
        v16 = *a1;
        *a1 = 0;
        v17 = a1;
        do
        {
          v18 = v17;
          v19 = v17[1];
          ++v17;
          v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
        }
        while (v20 < (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        v21 = a2;
        if (v18 == a1)
        {
          v21 = a2;
          do
          {
            if (v17 >= v21)
              break;
            v24 = (uint64_t)*--v21;
            v25 = (*(float (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
          }
          while (v25 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        }
        else
        {
          do
          {
            v22 = (uint64_t)*--v21;
            v23 = (*(float (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
          }
          while (v23 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
        }
        if (v17 < v21)
        {
          v26 = v17;
          v27 = v21;
          do
          {
            v28 = *v26;
            *v26 = *v27;
            *v27 = v28;
            do
            {
              v18 = v26;
              v29 = v26[1];
              ++v26;
              v30 = (*(float (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
            }
            while (v30 < (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
            do
            {
              v31 = (uint64_t)*--v27;
              v32 = (*(float (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
            }
            while (v32 >= (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16));
          }
          while (v26 < v27);
        }
        if (v18 != a1)
        {
          v33 = *v18;
          *v18 = 0;
          v34 = *a1;
          *a1 = v33;
          if (v34)
          {
            v35 = v34 + 2;
            v36 = atomic_load(v34 + 2);
            if (v36 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 248))(v34);
            }
            else
            {
              do
                v37 = __ldaxr(v35);
              while (__stlxr(v37 - 1, v35));
            }
          }
        }
        v38 = *v18;
        *v18 = v16;
        v7 = a2;
        if (v38)
        {
          v39 = v38 + 2;
          v40 = atomic_load(v38 + 2);
          if (v40 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 248))(v38);
          }
          else
          {
            do
              v41 = __ldaxr(v39);
            while (__stlxr(v41 - 1, v39));
          }
        }
        if (v17 < v21)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(a1, v18, a3, a4 & 1);
          a4 = 0;
          v9 = v18 + 1;
          continue;
        }
        v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, v18);
        v9 = v18 + 1;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageThenGeometryExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(v18 + 1, a2))
        {
          if (v42)
            continue;
          goto LABEL_36;
        }
        a2 = v18;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

void TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score(TI::CP::SearchNodeLanguageExtensions *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;

  if (*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 7);
    if (!v2)
    {
      v7 = -INFINITY;
      goto LABEL_7;
    }
    v3 = *((double *)this + 11);
    v4 = *((_QWORD *)this + 3);
    v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v2 - 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v3 = *((double *)this + 11);
    v4 = *((_QWORD *)this + 3);
    v6 = 1.0
       - (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 64) + 80))(*(_QWORD *)(*((_QWORD *)this + 4) + 64));
  }
  v7 = v3 + *(double *)(v4 + 440) * logf(v6);
LABEL_7:
  *((double *)this + 12) = v7;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;

  v6 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  v7 = (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v8 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  if (v6 >= v7)
  {
    if (v8 < v9)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
      if (v12 < (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1))
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  else
  {
    v10 = *a1;
    if (v8 >= v9)
    {
      *a1 = *a2;
      *a2 = v10;
      v14 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
      if (v14 >= (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
        return;
      v10 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v10;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a2, a3);
  v8 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
  if (v8 < (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
    if (v10 < (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
      if (v12 < (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1))
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  float v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int **i;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int8x16_t *v25;
  uint64_t *v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (*(float (**)(uint64_t))(*(_QWORD *)a2[-1].i64[1] + 24))(a2[-1].i64[1]);
      if (v6 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
      {
        v7 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v25 = a1 + 1;
      v26 = &a1[1].i64[1];
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1]);
      v27 = (*(float (**)(uint64_t))(*(_QWORD *)a2[-1].i64[1] + 24))(a2[-1].i64[1]);
      if (v27 < (*(float (**)(uint64_t))(*(_QWORD *)a1[1].i64[1] + 24))(a1[1].i64[1]))
      {
        v28 = *v26;
        *v26 = a2[-1].i64[1];
        a2[-1].i64[1] = v28;
        v29 = (*(float (**)(uint64_t))(*(_QWORD *)*v26 + 24))(*v26);
        if (v29 < (*(float (**)(uint64_t))(*(_QWORD *)v25->i64[0] + 24))(v25->i64[0]))
        {
          v30 = v25->i64[0];
          v31 = *v26;
          v25->i64[0] = *v26;
          *v26 = v30;
          v32 = (*(float (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
          if (v32 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[1] + 24))(a1->i64[1]))
          {
            v34 = a1->i64[1];
            v33 = a1[1].i64[0];
            a1->i64[1] = v33;
            a1[1].i64[0] = v34;
            v35 = (*(float (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
            if (v35 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v8 = (unsigned int **)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64);
      v9 = (unsigned int **)&a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = (*(float (**)(unsigned int *))(*(_QWORD *)*v9 + 24))(*v9);
    if (v11 < (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8))
    {
      v12 = 0;
      v13 = *v9;
      *v9 = 0;
      for (i = v9; ; v12 = *i)
      {
        v15 = i;
        i = v8;
        v16 = *v8;
        *v8 = 0;
        *v15 = v16;
        if (v12)
        {
          v17 = v12 + 2;
          v18 = atomic_load(v12 + 2);
          if (v18 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 248))(v12);
          }
          else
          {
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
          }
        }
        if (v8 == (unsigned int **)a1)
          break;
        v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
        --v8;
        if (v20 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
          goto LABEL_17;
      }
      i = (unsigned int **)a1;
LABEL_17:
      v21 = *i;
      *i = v13;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 248))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v10 == 8)
        return v9 + 1 == (unsigned int **)a2;
    }
    v8 = v9++;
    if (v9 == (unsigned int **)a2)
      return 1;
  }
}

unsigned int *WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  if (*(_QWORD *)result != a2)
  {
    v4 = *((_QWORD *)result + 1);
    v5 = (unsigned int **)(v4 + 8 * *(_QWORD *)result);
    v6 = (unsigned int **)(v4 + 8 * a2);
    do
    {
      result = *v6;
      if (*v6)
      {
        v7 = result + 2;
        v8 = atomic_load(result + 2);
        if (v8 == 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 248))(result);
        }
        else
        {
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)v3 = a2;
  return result;
}

void WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)a1)
      WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink((unsigned int *)a1, 0);
    v2 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    free(v2);
  }
}

double TI::CP::SearchNode::compute_score(TI::CP::SearchNode *this)
{
  uint64_t v2;
  double result;
  _QWORD v4[5];

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 16) = *(_QWORD *)(v2 + 128);
  *((_OWORD *)this + 7) = *(_OWORD *)(v2 + 112);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2TI2CP10SearchNode13compute_scoreEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_48;
  v4[4] = this;
  (*(void (**)(TI::CP::SearchNode *, _QWORD *))(*(_QWORD *)this + 176))(this, v4);
  *((_BYTE *)this + 80) = (*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)this + 168))(this);
  result = *((double *)this + 15) + *((double *)this + 14) + *((double *)this + 16);
  *((double *)this + 9) = result;
  return result;
}

double ___ZN2TI2CP10SearchNode13compute_scoreEv_block_invoke(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7)
{
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double result;

  if (a2 <= 8)
  {
    v7 = *(double **)(a1 + 32);
    v8 = v7 + 14;
    v9 = v7 + 15;
    v10 = v7 + 16;
    if (((1 << a2) & 0x8E) != 0)
      v10 = v9;
    if (((1 << a2) & 0x71) != 0)
      v10 = v8;
    result = *v10 + a7;
    *v10 = result;
  }
  return result;
}

void TI::CP::SearchNodeKeySubstitution::~SearchNodeKeySubstitution(TI::CP::SearchNodeKeySubstitution *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeKeySubstitution::source_debug_data@<X0>(TI::CP::SearchNodeKeySubstitution *this@<X0>, _QWORD *a2@<X8>)
{
  TI::Favonius::Key *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
  v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v15 = 0x100000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
  v5 = v18;
  if (!v18)
    v5 = &v19;
  if ((_WORD)v15)
    v6 = v5;
  else
    v6 = "";
  v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  if (v18 && v17 == 1)
    free(v18);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11 = v8;
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v14);
}

_QWORD *TI::CP::SearchNodeKeySubstitution::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeySubstitution");
}

_QWORD *TI::CP::SearchNode::node_at_current_bound@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;

  if (*((_BYTE *)this + 80) && *((_BYTE *)this + 81))
  {
    *((_BYTE *)this + 81) = 0;
    this = std::shared_ptr<TIInlineCompletionEventDispatcher>::shared_ptr[abi:nn180100]<TIInlineCompletionEventDispatcher,void>(&v3, this[1], (std::__shared_weak_count *)this[2]);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return this;
}

void TI::CP::SearchNode::branch_at_current_bound(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double TI::CP::SearchNode::decrease_bound_on_score(TI::CP::SearchNode *this)
{
  double result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  if (!*((_QWORD *)this + 8))
  {
    TI::CP::Search::extend_typing(*((_QWORD *)this + 3), *((_QWORD *)this + 4), (uint64_t *)this + 7, *((_DWORD *)this + 12), &v11);
    v3 = v11;
    v11 = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v3;
    if (v4)
    {
      v5 = v4 + 2;
      v6 = atomic_load(v4 + 2);
      if (v6 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 248))(v4);
      }
      else
      {
        do
          v7 = __ldaxr(v5);
        while (__stlxr(v7 - 1, v5));
      }
      if (v11)
      {
        v8 = v11 + 2;
        v9 = atomic_load(v11 + 2);
        if (v9 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v11 + 248))();
        }
        else
        {
          do
            v10 = __ldaxr(v8);
          while (__stlxr(v10 - 1, v8));
        }
      }
      v3 = (unsigned int *)*((_QWORD *)this + 8);
    }
    if (v3)
      return TI::CP::SearchNode::compute_score(this);
    else
      *((_BYTE *)this + 81) = 0;
  }
  return result;
}

double TI::CP::SearchNode::bound_on_score(TI::CP::SearchNode *this)
{
  if (*((_BYTE *)this + 81))
    return *((double *)this + 9);
  else
    return -INFINITY;
}

uint64_t TI::CP::SearchNode::description@<X0>(TI::CP::SearchNode *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  void **v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;
  void **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)"<[", 2);
  (*(void (**)(void ***__return_ptr))(**((_QWORD **)this + 8) + 224))(&v21);
  v4 = v22;
  if (!v22)
    v4 = (const char *)&v23;
  if ((_WORD)v21)
    v5 = v4;
  else
    v5 = "";
  v6 = strlen(v5);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  if (v22 && BYTE6(v21) == 1)
    free(v22);
  if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)this + 72))(this) & 1) == 0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)" n=", 3);
    TI::CP::SearchNode::sample_indices_string(this, &v21);
    v8 = v23 >= 0 ? (void **)&v21 : v21;
    v9 = v23 >= 0 ? (char *)HIBYTE(v23) : v22;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)v8, (uint64_t)v9);
    if (SHIBYTE(v23) < 0)
      operator delete(v21);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v17, (uint64_t)" s=", 3);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)" pd=", 4);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)" kd=", 4);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)" l=", 3);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v18);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17 = v14;
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v20);
}

uint64_t TI::CP::SearchNode::is_root(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_skipped_key_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_overshoot_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_loop_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_key_match_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNodeKeySubstitution::is_key_substitution_hypothesis(TI::CP::SearchNodeKeySubstitution *this)
{
  return 1;
}

uint64_t TI::CP::SearchNode::is_transposition_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_terminal_space_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::is_key_prediction_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::ends_with_punctuation(TI::CP::SearchNode *this)
{
  return 0;
}

uint64_t TI::CP::SearchNode::key_prediction_count(TI::CP::SearchNode *this)
{
  return 0;
}

float TI::CP::SearchNode::ideal_path_length(TI::CP::SearchNode *this)
{
  float v2;
  unsigned int *v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double v11;

  v2 = 0.0;
  if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)this + 72))(this) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4)) & 1) == 0)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 4);
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 56);
    v5 = (double *)(v4 + 48 * v3[12]);
    v6 = *v5;
    v7 = v5[1];
    v8 = (double *)(v4 + 48 * *((unsigned int *)this + 12));
    v9 = *v8;
    v10 = v8[1];
    v11 = (*(float (**)(unsigned int *))(*(_QWORD *)v3 + 160))(v3);
    return hypot(v9 - v6, v10 - v7) + v11;
  }
  return v2;
}

uint64_t TI::CP::SearchNodeKeySubstitution::is_score_final(TI::CP::SearchNodeKeySubstitution *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeKeySubstitution::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  unsigned int *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = *(unsigned int **)(a1 + 32);
  v10 = (double *)MEMORY[0x1E0C9D538];
  if ((v8 & 1) != 0)
  {
    v11 = 0;
    v12 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v11 = v9[12];
    v12 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v11);
  }
  v14 = *v12;
  v13 = v12[1];
  if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9) & 1) == 0)
  {
    v15 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v11, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  }
  v16 = *(_QWORD *)(a1 + 64);
  if (v16)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) + 56);
    v18 = *v10;
    v19 = v10[1];
    v20 = *(_QWORD *)(a1 + 24);
    v21 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    v22 = logf(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v17, v7, v6, v18, v19, *(double *)(v20 + 440) * v22);
  }
  v23 = *v10;
  v24 = v10[1];
  v25 = TI::CP::Search::key_substitution_cost(*(TI::CP::Search **)(a1 + 24), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double, double))(a2 + 16))(a2, 5, v4, 0, v7, v6, v23, v24, v25);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = (_QWORD *)(a1 + 16);
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *v4 = v9;
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *v4 = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  int64_t v15;
  std::locale *v16;
  uint64_t v17;
  _BYTE v19[16];
  std::locale __b;
  char v21;

  MEMORY[0x1DF0A1FC4](v19, a1);
  if (v19[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = a2 + a3;
    if ((*((_DWORD *)v6 + 2) & 0xB0) == 0x20)
      v9 = a2 + a3;
    else
      v9 = a2;
    v10 = *((_DWORD *)v6 + 36);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v10;
      if (!v7)
      {
LABEL_24:
        std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
        goto LABEL_25;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v12 = *((_QWORD *)v6 + 3);
    v13 = v12 <= a3;
    v14 = v12 - a3;
    if (v13)
      v15 = 0;
    else
      v15 = v14;
    if (v9 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v9 - a2) != v9 - a2)
    {
      goto LABEL_24;
    }
    if (v15 >= 1)
    {
      std::string::basic_string[abi:nn180100](&__b, v15, (char)v10);
      v16 = v21 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v17 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v16, v15);
      if (v21 < 0)
        operator delete(__b.__locale_);
      if (v17 != v15)
        goto LABEL_24;
    }
    if (v8 - v9 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v9, v8 - v9) != v8 - v9)
    {
      goto LABEL_24;
    }
    *((_QWORD *)v6 + 3) = 0;
  }
LABEL_25:
  MEMORY[0x1DF0A1FD0](v19);
  return a1;
}

void TI::CP::SearchNode::sample_indices_string(TI::CP::SearchNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  TI::CP::SearchNode *v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  int64x2_t v21;
  char v22;
  unint64_t v23;
  std::string *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *__p[2];
  uint64_t v36;
  void **v37[2];
  uint64_t v38;
  _QWORD v39[8];
  void *v40;
  char v41;
  _BYTE v42[152];
  int64x2_t v43;
  std::string *v44;
  std::__split_buffer<std::string> v45;

  v43 = 0uLL;
  v44 = 0;
  v2 = MEMORY[0x1E0DE4F50];
  if (this)
  {
    v3 = this;
    v4 = (void **)*MEMORY[0x1E0DE4F50];
    v5 = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v7 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 72))(v3) & 1) != 0)
        goto LABEL_43;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v37);
      if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 104))(v3) & 1) == 0
        && !(*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 112))(v3))
      {
        break;
      }
      std::ostream::operator<<();
LABEL_15:
      std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__p, (uint64_t)v39);
      v11 = v43.i64[1];
      if (v43.i64[1] >= (unint64_t)v44)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v43.i64[1] - v43.i64[0]) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (((uint64_t)v44 - v43.i64[0]) >> 3) > v13)
          v13 = 0x5555555555555556 * (((uint64_t)v44 - v43.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v44 - v43.i64[0]) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        v45.__end_cap_.__value_ = (std::allocator<std::string> *)&v44;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v14);
        else
          v15 = 0;
        v16 = v14 + 24 * v12;
        *(_QWORD *)(v16 + 16) = v36;
        *(_OWORD *)v16 = *(_OWORD *)__p;
        __p[1] = 0;
        v36 = 0;
        __p[0] = 0;
        v17 = v43.i64[1];
        v18 = v43.i64[0];
        if (v43.i64[1] == v43.i64[0])
        {
          v22 = 0;
          v21 = vdupq_n_s64(v43.u64[1]);
          v19 = v16;
        }
        else
        {
          v19 = v14 + 24 * v12;
          do
          {
            v20 = *(_OWORD *)(v17 - 24);
            *(_QWORD *)(v19 - 8) = *(_QWORD *)(v17 - 8);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            *(_QWORD *)(v17 - 16) = 0;
            *(_QWORD *)(v17 - 8) = 0;
            *(_QWORD *)(v17 - 24) = 0;
            v17 -= 24;
          }
          while (v17 != v18);
          v21 = v43;
          v22 = HIBYTE(v36);
        }
        v23 = v16 + 24;
        v43.i64[0] = v19;
        v43.i64[1] = v16 + 24;
        *(int64x2_t *)&v45.__begin_ = v21;
        v24 = v44;
        v44 = (std::string *)(v14 + 24 * v15);
        v45.__end_cap_.__value_ = v24;
        v45.__first_ = (std::__split_buffer<std::string>::pointer)v21.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v45);
        v43.i64[1] = v23;
        v2 = MEMORY[0x1E0DE4F50];
        if (v22 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v43.i64[1] = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 16) = v36;
        v43.i64[1] = v11 + 24;
      }
      v3 = (TI::CP::SearchNode *)*((_QWORD *)v3 + 4);
      v37[0] = v4;
      *(void ***)((char *)v37 + (_QWORD)*(v4 - 3)) = v5;
      v38 = v6;
      v39[0] = v7;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0A20F0](v42);
      if (!v3)
        goto LABEL_43;
    }
    if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 96))(v3))
    {
      v8 = (uint64_t *)std::ostream::operator<<();
      v9 = "°";
LABEL_9:
      v10 = 2;
LABEL_14:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      goto LABEL_15;
    }
    if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 80))(v3) & 1) != 0
      || (*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 88))(v3))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"(", 1);
      v8 = (uint64_t *)std::ostream::operator<<();
      v9 = ")";
    }
    else
    {
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 128))(v3))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"(", 1);
        v8 = (uint64_t *)std::ostream::operator<<();
        v9 = "$)";
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 120))(v3))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v38, (uint64_t)"{", 1);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
        v8 = (uint64_t *)std::ostream::operator<<();
        v9 = "}";
      }
      else
      {
        if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 136))(v3))
          goto LABEL_15;
        v8 = &v38;
        v9 = "+";
      }
    }
    v10 = 1;
    goto LABEL_14;
  }
LABEL_43:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v37);
  v26 = v43.i64[1];
  if (v43.i64[1] != v43.i64[0])
  {
    v27 = &v38;
    do
    {
      if (v26 != v43.i64[1])
        v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      v29 = *(_QWORD *)(v26 - 24);
      v26 -= 24;
      v28 = v29;
      v30 = *(char *)(v26 + 23);
      if (v30 >= 0)
        v31 = v26;
      else
        v31 = v28;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(v26 + 23);
      else
        v32 = *(_QWORD *)(v26 + 8);
      v27 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, v31, v32);
    }
    while (v26 != v43.i64[0]);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v39);
  v37[0] = *(void ***)v2;
  v33 = *(_QWORD *)(v2 + 72);
  *(void ***)((char *)v37 + (unint64_t)*(v37[0] - 3)) = *(void ***)(v2 + 64);
  v38 = v33;
  v39[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v41 < 0)
    operator delete(v40);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0A20F0](v42);
  v37[0] = (void **)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v37);
}

_QWORD *std::stringbuf::str[abi:nn180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)a1)
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink((unsigned int *)a1, 0);
  v2 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  free(v2);
  return a1;
}

void TI::CP::SearchNodeSource::~SearchNodeSource(TI::CP::SearchNodeSource *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1EA0FEDD8;
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 32);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *TI::CP::SearchNodeSource::source_debug_data@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "");
}

void TI::CP::SearchNodeSource::branch_at_current_bound(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double TI::CP::SearchNodeSource::bound_on_score(TI::CP::SearchNodeSource *this)
{
  return -INFINITY;
}

_QWORD *TI::CP::SearchNode::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNode");
}

uint64_t TI::CP::SearchNode::is_key_substitution_hypothesis(TI::CP::SearchNode *this)
{
  return 0;
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeySubstitution>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(TI::CP::SearchNodeGeometryExtensions *this)
{
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeGeometryExtensions::source_debug_data@<X0>(TI::CP::SearchNodeGeometryExtensions *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int i;
  unint64_t v5;
  uint64_t v6;
  TI::Favonius::Key *v7;
  const char *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;
  char *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  for (i = *((_DWORD *)this + 13); ; i = v5 + 1)
  {
    v5 = i;
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
    if (v5 >= (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v6) >> 3)
      break;
    v7 = *(TI::Favonius::Key **)(v6 + 8 * v5);
    v18 = 0x100000;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    TI::Favonius::Key::append_debug_data(v7, (KB::String *)&v18);
    v8 = v21;
    if (!v21)
      v8 = &v22;
    if ((_WORD)v18)
      v9 = v8;
    else
      v9 = "";
    v10 = strlen(v9);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v9, v10);
    if (v21 && v20 == 1)
      free(v21);
    if (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                  - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12))) >> 3)
       - 1 > v5)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14 = v11;
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v17);
}

_QWORD *TI::CP::SearchNodeGeometryExtensions::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeGeometryExtensions");
}

void TI::CP::SearchNodeGeometryExtensions::branch_at_current_bound(TI::CP::SearchNodeGeometryExtensions *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int *v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;

  v3 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 3);
  v4 = *((_DWORD *)this + 12);
  v5 = *((unsigned int *)this + 13);
  v6 = *((_QWORD *)v3[9].__on_zero_shared + 3 * v4);
  if (v5 >= (*((_QWORD *)v3[9].__on_zero_shared + 3 * v4 + 1) - v6) >> 3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v8 = *((_QWORD *)this + 5);
    *(_QWORD *)&v22 = *((_QWORD *)this + 4);
    *((_QWORD *)&v22 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v5 = *((unsigned int *)this + 13);
      v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
      v4 = *((_DWORD *)this + 12);
    }
    v11 = *(unsigned int **)(v6 + 8 * v5);
    v21 = v11;
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v20 = 0;
    v24 = v4;
    std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(&v23, v3, &v22, (int *)&v24, (uint64_t *)&v21, (uint64_t *)&v20);
    v19 = v23;
    v23 = 0uLL;
    if (v20)
    {
      v13 = v20 + 2;
      v14 = atomic_load(v20 + 2);
      if (v14 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v20 + 248))();
      }
      else
      {
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
      }
    }
    if (v21)
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v21);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    ++*((_DWORD *)this + 13);
    TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key(this);
    TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score(this);
    *(_OWORD *)a2 = v19;
  }
}

double TI::CP::SearchNodeGeometryExtensions::bound_on_score(TI::CP::SearchNodeGeometryExtensions *this)
{
  return *((double *)this + 8);
}

void std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeKeyMatch,std::allocator<TI::CP::SearchNodeKeyMatch>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,WTF::PassRefPtr<TI::Favonius::TypingHypothesis> &,void>(_QWORD *a1, std::__shared_weak_count_vtbl *a2, __int128 *a3, int *a4, uint64_t *a5, uint64_t *a6)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;

  v12 = (std::__shared_weak_count *)operator new(0xA0uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1057A0;
  v14 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v15 = *a4;
  v16 = *a5;
  *a5 = 0;
  v17 = *a6;
  *a6 = 0;
  v12[1].__shared_owners_ = 0;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = a2;
  *(_OWORD *)&v12[2].__shared_owners_ = v14;
  LODWORD(v12[3].__vftable) = v15;
  v12[3].__shared_owners_ = v16;
  v12[3].__shared_weak_owners_ = v17;
  LOWORD(v12[4].__shared_owners_) = 256;
  BYTE2(v12[4].__shared_owners_) = 0;
  *(_OWORD *)&v12[5].__shared_owners_ = 0u;
  v12[6].std::__shared_count = 0u;
  *(_OWORD *)&v12[4].__shared_weak_owners_ = 0u;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FE758;
  v18 = v12 + 1;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)&v12[1]);
  *a1 = v12 + 1;
  a1[1] = v12;
  shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v12[1].__shared_owners_ = (uint64_t)v18;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v12[1].__shared_owners_ = (uint64_t)v18;
    v12[1].__shared_weak_owners_ = (uint64_t)v12;
  }
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

uint64_t TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key(TI::CP::SearchNodeGeometryExtensions *this)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 104))(*((_QWORD *)this + 4));
  if ((_DWORD)result)
  {
    v3 = *((_DWORD *)this + 13);
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
    v5 = (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v4) >> 3;
    while (v5 > v3 && *(_QWORD *)(v4 + 8 * v3) == *(_QWORD *)(*((_QWORD *)this + 4) + 56))
      *((_DWORD *)this + 13) = ++v3;
  }
  return result;
}

void TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score(TI::CP::SearchNodeGeometryExtensions *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  double v7;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_DWORD *)this + 12);
  v4 = *((unsigned int *)this + 13);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 376) + 24 * v3);
  if (v4 >= (*(_QWORD *)(*(_QWORD *)(v2 + 376) + 24 * v3 + 8) - v5) >> 3)
  {
    v7 = -INFINITY;
  }
  else
  {
    v6 = *((double *)this + 7);
    v7 = v6 + TI::CP::Search::key_deviation_cost(v2, v3, *(CGRect **)(v5 + 8 * v4));
  }
  *((double *)this + 8) = v7;
}

void TI::CP::SearchNodeKeyMatch::~SearchNodeKeyMatch(TI::CP::SearchNodeKeyMatch *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeKeyMatch::source_debug_data@<X0>(TI::CP::SearchNodeKeyMatch *this@<X0>, _QWORD *a2@<X8>)
{
  TI::Favonius::Key *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  if (*((_QWORD *)this + 7))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
    v4 = (TI::Favonius::Key *)*((_QWORD *)this + 7);
    v15 = 0x100000;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
    v5 = v18;
    if (!v18)
      v5 = &v19;
    if ((_WORD)v15)
      v6 = v5;
    else
      v6 = "";
    v7 = strlen(v6);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
    if (v18 && v17 == 1)
      free(v18);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11 = v8;
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v14);
}

_QWORD *TI::CP::SearchNodeKeyMatch::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyMatch");
}

uint64_t TI::CP::SearchNodeKeyMatch::is_key_match_hypothesis(TI::CP::SearchNodeKeyMatch *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeKeyMatch::ends_with_punctuation(TI::CP::SearchNodeKeyMatch *this)
{
  return (*(unsigned __int16 *)(*((_QWORD *)this + 7) + 60) >> 4) & 1;
}

BOOL TI::CP::SearchNodeKeyMatch::is_score_final(TI::CP::SearchNodeKeyMatch *this)
{
  return *((_QWORD *)this + 8) != 0;
}

uint64_t TI::CP::SearchNodeKeyMatch::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  unsigned int *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  float v22;
  CGRect *v23;
  uint64_t v24;
  uint64_t v25;
  double x;
  double y;
  double v28;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = *(unsigned int **)(a1 + 32);
  v10 = (double *)MEMORY[0x1E0C9D538];
  if ((v8 & 1) != 0)
  {
    v11 = 0;
    v12 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v11 = v9[12];
    v12 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v11);
  }
  v14 = *v12;
  v13 = v12[1];
  if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 72))(v9) & 1) == 0)
  {
    v15 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v11, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result) + 56);
    v18 = *v10;
    v19 = v10[1];
    v20 = *(_QWORD *)(a1 + 24);
    v21 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    v22 = logf(v21);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v17, v7, v6, v18, v19, *(double *)(v20 + 440) * v22);
  }
  v23 = *(CGRect **)(a1 + 56);
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 32);
    if (!v24
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24),
          v23 = *(CGRect **)(a1 + 56),
          !(_DWORD)result)
      || (v25 = *(_QWORD *)(a1 + 32), v23 != *(CGRect **)(v25 + 56))
      || *(_DWORD *)(a1 + 48) != *(_DWORD *)(v25 + 48))
    {
      x = v23[3].origin.x;
      y = v23[3].origin.y;
      v28 = TI::CP::Search::key_deviation_cost(*(_QWORD *)(a1 + 24), v4, v23);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, double, double, double, double, double))(a2 + 16))(a2, 0, v4, 0, v7, v6, x, y, v28);
    }
  }
  return result;
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1057A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1057A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeyMatch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::SearchNodeTranspositionExtensions::~SearchNodeTranspositionExtensions(TI::CP::SearchNodeTranspositionExtensions *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1EA0FE560;
  v2 = (unsigned int *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 10);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1EA0FE560;
  v2 = (unsigned int *)*((_QWORD *)this + 11);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 10);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeTranspositionExtensions::source_debug_data@<X0>(TI::CP::SearchNodeTranspositionExtensions *this@<X0>, _QWORD *a2@<X8>)
{
  TI::Favonius::Key *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  TI::Favonius::Key *v10;
  const char *v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  unsigned int i;
  unint64_t v16;
  uint64_t v17;
  TI::Favonius::Key *v18;
  const char *v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;
  char *v32;
  _BYTE v33[16];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v24);
  if (*((_QWORD *)this + 10))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key2=", 6);
    v4 = (TI::Favonius::Key *)*((_QWORD *)this + 10);
    v29 = 0x100000;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33[0] = 0;
    TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v29);
    v5 = v32;
    if (!v32)
      v5 = v33;
    if ((_WORD)v29)
      v6 = v5;
    else
      v6 = "";
    v7 = strlen(v6);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v6, v7);
    if (v32 && v31 == 1)
      free(v32);
    if (*((_BYTE *)this + 96))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key1stack=", 11);
      if (*((_DWORD *)this + 14))
      {
        v8 = *((unsigned int *)this + 14) - 1;
        do
        {
          v9 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v8);
          v10 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
          v29 = 0x100000;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          v33[0] = 0;
          TI::Favonius::Key::append_debug_data(v10, (KB::String *)&v29);
          v11 = v32;
          if (!v32)
            v11 = v33;
          if ((_WORD)v29)
            v12 = v11;
          else
            v12 = "";
          v13 = strlen(v12);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v12, v13);
          if (v32 && v31 == 1)
            free(v32);
          if (!v8)
            break;
          v14 = v8;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
          --v8;
        }
        while (v14);
      }
    }
  }
  else if (*((unsigned int *)this + 13) < (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                              + 376)
                                                                                  + 24 * *((unsigned int *)this + 12)
                                                                                  + 8)
                                                                      - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                                                                                              + 376)
                                                                                  + 24 * *((unsigned int *)this + 12))) >> 3))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" key2stack=", 11);
    for (i = *((_DWORD *)this + 13); ; i = v16 + 1)
    {
      v16 = i;
      v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
      if (v16 >= (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                 - v17) >> 3)
        break;
      v18 = *(TI::Favonius::Key **)(v17 + 8 * v16);
      v29 = 0x100000;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33[0] = 0;
      TI::Favonius::Key::append_debug_data(v18, (KB::String *)&v29);
      v19 = v32;
      if (!v32)
        v19 = v33;
      if ((_WORD)v29)
        v20 = v19;
      else
        v20 = "";
      v21 = strlen(v20);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v20, v21);
      if (v32 && v31 == 1)
        free(v32);
      if (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8)
                    - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12))) >> 3)
         - 1 > v16)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)",", 1);
    }
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v26);
  v24[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25 = v22;
  v26[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v28);
}

_QWORD *TI::CP::SearchNodeTranspositionExtensions::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeTranspositionExtensions");
}

void TI::CP::SearchNodeTranspositionExtensions::branch_at_current_bound(TI::CP::SearchNodeTranspositionExtensions *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v36;
  unint64_t *p_shared_weak_owners;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned int *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  __int128 v68;

  if (*((_QWORD *)this + 10))
  {
    if (*((_QWORD *)this + 11))
    {
      if (*((_BYTE *)this + 96))
      {
        v4 = (unsigned int *)((char *)this + 56);
        v5 = *((_QWORD *)this + 7);
        if (v5)
        {
          v6 = v5 - 1;
          v7 = *(unsigned int **)(*((_QWORD *)this + 8) + 8 * (v5 - 1));
          if (v7)
          {
            v8 = v7 + 2;
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 + 1, v8));
            v6 = *(_QWORD *)v4 - 1;
          }
          WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink(v4, v6);
          TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
          v10 = *((_QWORD *)this + 3);
          v11 = *((_OWORD *)this + 2);
          v59 = v11;
          if (*((_QWORD *)&v11 + 1))
          {
            v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
          }
          v14 = *((_DWORD *)this + 12);
          v15 = (unsigned int *)*((_QWORD *)this + 10);
          if (v15)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          v17 = (unsigned int *)*((_QWORD *)this + 11);
          if (v17)
          {
            v18 = v17 + 2;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
          }
          if (v7)
          {
            v20 = v7 + 2;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 + 1, v20));
          }
          v22 = (std::__shared_weak_count *)operator new(0xB8uLL);
          v22->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          v22->__shared_weak_owners_ = 0;
          v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE60;
          v24 = v22 + 1;
          v68 = v59;
          v66 = v17;
          v67 = v15;
          v65 = v7;
          TI::CP::SearchNodeTransposition::SearchNodeTransposition((TI::CP::SearchNode *)&v22[1], v10, (uint64_t *)&v68, v14, (uint64_t *)&v67, (uint64_t *)&v66, (uint64_t *)&v65);
          if (v65)
          {
            v25 = v65 + 2;
            v26 = atomic_load(v65 + 2);
            if (v26 == 1)
            {
              (*(void (**)(void))(*(_QWORD *)v65 + 248))();
            }
            else
            {
              do
                v27 = __ldaxr(v25);
              while (__stlxr(v27 - 1, v25));
            }
          }
          if (v66)
          {
            v28 = v66 + 2;
            v29 = atomic_load(v66 + 2);
            if (v29 == 1)
            {
              (*(void (**)(void))(*(_QWORD *)v66 + 248))();
            }
            else
            {
              do
                v30 = __ldaxr(v28);
              while (__stlxr(v30 - 1, v28));
            }
          }
          if (v67)
            WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v67);
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          *(_QWORD *)&v34 = v22 + 1;
          *((_QWORD *)&v34 + 1) = v22;
          shared_weak_owners = (std::__shared_weak_count *)v22[1].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            if (shared_weak_owners->__shared_owners_ != -1)
            {
LABEL_48:
              *(_OWORD *)a2 = v34;
              if (v7)
              {
                v43 = v7 + 2;
                v44 = atomic_load(v7 + 2);
                if (v44 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
                }
                else
                {
                  do
                    v45 = __ldaxr(v43);
                  while (__stlxr(v45 - 1, v43));
                }
              }
              return;
            }
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
            v60 = v34;
            p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
            do
              v38 = __ldxr(p_shared_weak_owners);
            while (__stxr(v38 + 1, p_shared_weak_owners));
            v22[1].__shared_owners_ = (uint64_t)v24;
            v22[1].__shared_weak_owners_ = (uint64_t)v22;
            std::__shared_weak_count::__release_weak(shared_weak_owners);
            v34 = v60;
          }
          else
          {
            do
              v39 = __ldxr(p_shared_owners);
            while (__stxr(v39 + 1, p_shared_owners));
            v40 = (unint64_t *)&v22->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            v22[1].__shared_owners_ = (uint64_t)v24;
            v22[1].__shared_weak_owners_ = (uint64_t)v22;
          }
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            v61 = v34;
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
            v34 = v61;
          }
          goto LABEL_48;
        }
      }
    }
LABEL_71:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v46 = *((unsigned int *)this + 13);
  v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12));
  if (v46 >= (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12) + 8) - v47) >> 3)
    goto LABEL_71;
  v48 = *(unsigned int **)(v47 + 8 * v46);
  if (v48)
  {
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
    LODWORD(v46) = *((_DWORD *)this + 13);
  }
  *((_DWORD *)this + 13) = v46 + 1;
  TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
  v50 = *((_QWORD *)this + 3);
  v51 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v63 = *((_QWORD *)this + 4);
  v64 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = *((_DWORD *)this + 12);
  v62 = v48;
  if (v48)
  {
    do
      v55 = __ldaxr(v48);
    while (__stlxr(v55 + 1, v48));
  }
  LODWORD(v67) = v54;
  std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>(&v68, v50, &v63, (int *)&v67, (uint64_t *)&v62);
  *(_OWORD *)a2 = v68;
  v68 = 0uLL;
  if (v62)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v62);
  v56 = v64;
  if (v64)
  {
    v57 = (unint64_t *)&v64->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v48)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v48);
}

void TI::CP::SearchNodeTranspositionExtensions::decrease_bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  v1 = (uint64_t *)((char *)this + 80);
  if (*((_QWORD *)this + 10))
  {
    v3 = *((_QWORD *)this + 11);
    if (v3)
    {
      if (!*((_BYTE *)this + 96))
      {
        (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, (char *)this + 56, v1);
        v5 = *((_QWORD *)this + 7);
        v4 = *((_QWORD *)this + 8);
        v16 = (unsigned int *)&__block_literal_global_4967;
        v6 = 126 - 2 * __clz(v5);
        if (v5)
          v7 = v6;
        else
          v7 = 0;
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v4, (uint64_t *)(v4 + 8 * v5), (uint64_t)&v16, v7, 1);
        *((_BYTE *)this + 96) = 1;
      }
LABEL_18:
      TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
      return;
    }
    TI::CP::Search::extend_typing(*((_QWORD *)this + 3), *((_QWORD *)this + 4), v1, *((_DWORD *)this + 12), &v16);
    v8 = v16;
    v16 = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
    {
      v10 = v9 + 2;
      v11 = atomic_load(v9 + 2);
      if (v11 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 248))(v9);
      }
      else
      {
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
      }
      if (v16)
      {
        v13 = v16 + 2;
        v14 = atomic_load(v16 + 2);
        if (v14 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v16 + 248))();
        }
        else
        {
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
        }
      }
      v8 = (unsigned int *)*((_QWORD *)this + 11);
    }
    if (v8)
      goto LABEL_18;
    *((_QWORD *)this + 13) = 0xFFF0000000000000;
  }
}

double TI::CP::SearchNodeTranspositionExtensions::bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  return *((double *)this + 13);
}

void TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(TI::CP::SearchNodeTranspositionExtensions *this)
{
  uint64_t v2;
  char *v3;
  CGRect *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;

  v3 = (char *)this + 24;
  v2 = *((_QWORD *)this + 3);
  *((double *)this + 13) = *(double *)(*((_QWORD *)v3 + 1) + 72) - *(double *)(v2 + 560) * *(double *)(v2 + 432);
  v4 = (CGRect *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((long double *)this + 13) = TI::CP::Search::key_deviation_cost(v2, *((_DWORD *)this + 12), v4)
                                + *((double *)this + 13);
    v5 = *((_QWORD *)this + 11);
    if (!v5)
      return;
    v6 = *((_QWORD *)this + 3);
    v7 = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *((double *)this + 13) = *(double *)(v6 + 440) * logf(v7) + *((double *)this + 13);
    if (!*((_BYTE *)this + 96))
    {
      v9 = *((_QWORD *)this + 3);
      v11 = 1.0 - (*(float (**)(_QWORD))(**((_QWORD **)this + 11) + 80))(*((_QWORD *)this + 11));
      goto LABEL_10;
    }
    v8 = *((_QWORD *)this + 7);
    if (v8)
    {
      v9 = *((_QWORD *)this + 3);
      v10 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v8 - 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
LABEL_10:
      v15 = *(double *)(v9 + 440) * logf(v11);
      goto LABEL_11;
    }
  }
  else
  {
    v12 = *((_DWORD *)this + 12);
    v13 = *((unsigned int *)this + 13);
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 376) + 24 * v12);
    if (v13 < (*(_QWORD *)(*(_QWORD *)(v2 + 376) + 24 * v12 + 8) - v14) >> 3)
    {
      v15 = TI::CP::Search::key_deviation_cost(v2, v12, *(CGRect **)(v14 + 8 * v13));
LABEL_11:
      v16 = v15 + *((double *)this + 13);
      goto LABEL_12;
    }
  }
  v16 = -INFINITY;
LABEL_12:
  *((double *)this + 13) = v16;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  BOOL v50;
  uint64_t *v51;
  unsigned int **v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int **i;
  unsigned int **v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int **v68;
  unsigned int *v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int **v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unsigned int *v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int **j;
  _QWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;

  v9 = (uint64_t *)result;
LABEL_2:
  v138 = a2;
  v140 = a2 - 1;
  v136 = a2 - 3;
  v137 = a2 - 2;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v47 = *v10;
          *v10 = *v140;
          *v140 = v47;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v140, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v140, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v10 + 3, v140, a3);
      default:
        if (v11 <= 191)
        {
          v48 = v10 + 1;
          v50 = v10 == a2 || v48 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v50)
            {
              v51 = v10;
              do
              {
                v52 = (unsigned int **)v48;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((_DWORD)result)
                {
                  v53 = 0;
                  v54 = *v52;
                  *v52 = 0;
                  v144 = v54;
                  for (i = v52; ; v53 = *i)
                  {
                    v56 = i;
                    i = (unsigned int **)v51;
                    v57 = (unsigned int *)*v51;
                    *v51 = 0;
                    *v56 = v57;
                    if (v53)
                    {
                      v58 = v53 + 2;
                      v59 = atomic_load(v53 + 2);
                      if (v59 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 248))(v53);
                      }
                      else
                      {
                        do
                          v60 = __ldaxr(v58);
                        while (__stlxr(v60 - 1, v58));
                      }
                    }
                    if (v51 == v10)
                      break;
                    --v51;
                    if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                      goto LABEL_89;
                  }
                  i = (unsigned int **)v10;
LABEL_89:
                  result = (uint64_t)*i;
                  *i = v144;
                  a2 = v138;
                  if (result)
                  {
                    v61 = (unsigned int *)(result + 8);
                    v62 = atomic_load((unsigned int *)(result + 8));
                    if (v62 == 1)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                    }
                    else
                    {
                      do
                        v63 = __ldaxr(v61);
                      while (__stlxr(v63 - 1, v61));
                    }
                    result = 0;
                  }
                }
                v48 = (uint64_t *)(v52 + 1);
                v51 = (uint64_t *)v52;
              }
              while (v52 + 1 != (unsigned int **)a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v124 = (unsigned int **)v48;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              if ((_DWORD)result)
              {
                v125 = 0;
                v126 = *v124;
                *v124 = 0;
                v147 = v126;
                for (j = v124; ; v125 = *j)
                {
                  v128 = j;
                  j = (unsigned int **)v9;
                  v129 = *v9;
                  *v9 = 0;
                  *v128 = v129;
                  if (v125)
                  {
                    v130 = v125 + 2;
                    v131 = atomic_load(v125 + 2);
                    if (v131 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 248))(v125);
                    }
                    else
                    {
                      do
                        v132 = __ldaxr(v130);
                      while (__stlxr(v132 - 1, v130));
                    }
                  }
                  --v9;
                  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                    break;
                }
                result = (uint64_t)*j;
                *j = v147;
                if (result)
                {
                  v133 = (unsigned int *)(result + 8);
                  v134 = atomic_load((unsigned int *)(result + 8));
                  if (v134 == 1)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v135 = __ldaxr(v133);
                    while (__stlxr(v135 - 1, v133));
                  }
                  result = 0;
                }
              }
              v48 = (uint64_t *)(v124 + 1);
              v9 = (uint64_t *)v124;
            }
            while (v124 + 1 != (unsigned int **)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v141 = v64;
            do
            {
              v65 = v64;
              if (v141 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = &v9[v66];
                if (2 * v64 + 2 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v67;
                  v66 = 2 * v65 + 2;
                }
                v68 = (unsigned int **)&v9[v65];
                a2 = v138;
                if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                {
                  v69 = *v68;
                  *v68 = 0;
                  v145 = v69;
                  do
                  {
                    v70 = (unsigned int **)v67;
                    v71 = (unsigned int *)*v67;
                    *v67 = 0;
                    v72 = *v68;
                    *v68 = v71;
                    if (v72)
                    {
                      v73 = v72 + 2;
                      v74 = atomic_load(v72 + 2);
                      if (v74 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 248))(v72);
                      }
                      else
                      {
                        do
                          v75 = __ldaxr(v73);
                        while (__stlxr(v75 - 1, v73));
                      }
                    }
                    if (v141 < v66)
                      break;
                    v76 = (2 * v66) | 1;
                    v67 = &v9[v76];
                    v77 = 2 * v66 + 2;
                    if (v77 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                    {
                      ++v67;
                      v76 = v77;
                    }
                    v68 = v70;
                    v66 = v76;
                  }
                  while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
                  v78 = *v70;
                  *v70 = v145;
                  if (v78)
                  {
                    v79 = v78 + 2;
                    v80 = atomic_load(v78 + 2);
                    if (v80 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 248))(v78);
                    }
                    else
                    {
                      do
                        v81 = __ldaxr(v79);
                      while (__stlxr(v81 - 1, v79));
                    }
                  }
                  a2 = v138;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v82 = (unint64_t)v11 >> 3;
            do
            {
              v83 = a2;
              v84 = 0;
              v85 = *v9;
              *v9 = 0;
              v86 = v82 - 2;
              v139 = v85;
              if (v82 < 2)
                v86 = v82 - 1;
              v87 = v86 >> 1;
              v88 = v9;
              do
              {
                v89 = (unsigned int **)v88;
                v88 += v84 + 1;
                v90 = 2 * v84;
                v84 = (2 * v84) | 1;
                v91 = v90 + 2;
                if (v90 + 2 < v82 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v88;
                  v84 = v91;
                }
                v92 = (unsigned int *)*v88;
                *v88 = 0;
                v93 = *v89;
                *v89 = v92;
                if (v93)
                {
                  v94 = v93 + 2;
                  v95 = atomic_load(v93 + 2);
                  if (v95 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 248))(v93);
                  }
                  else
                  {
                    do
                      v96 = __ldaxr(v94);
                    while (__stlxr(v96 - 1, v94));
                  }
                }
              }
              while (v84 <= v87);
              v97 = v83 - 1;
              if (v88 == v97)
              {
                v106 = v97;
                result = *v88;
                *v88 = v139;
                if (result)
                {
                  v120 = (unsigned int *)(result + 8);
                  v121 = atomic_load((unsigned int *)(result + 8));
                  if (v121 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v122 = __ldaxr(v120);
                    while (__stlxr(v122 - 1, v120));
                  }
                }
              }
              else
              {
                v98 = *v97;
                *v97 = 0;
                v99 = (unsigned int *)*v88;
                *v88 = v98;
                if (v99)
                {
                  v100 = v99 + 2;
                  v101 = atomic_load(v99 + 2);
                  if (v101 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 248))(v99);
                  }
                  else
                  {
                    do
                      v102 = __ldaxr(v100);
                    while (__stlxr(v102 - 1, v100));
                  }
                }
                result = *v97;
                *v97 = v139;
                if (result)
                {
                  v103 = (unsigned int *)(result + 8);
                  v104 = atomic_load((unsigned int *)(result + 8));
                  if (v104 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v105 = __ldaxr(v103);
                    while (__stlxr(v105 - 1, v103));
                  }
                }
                v106 = v97;
                v107 = (char *)(v88 + 1) - (char *)v9;
                if (v107 >= 9)
                {
                  v108 = (unint64_t)((v107 >> 3) - 2) >> 1;
                  v109 = &v9[v108];
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v110 = (unsigned int *)*v88;
                    *v88 = 0;
                    v146 = (uint64_t)v110;
                    do
                    {
                      v111 = v109;
                      v112 = *v109;
                      *v109 = 0;
                      v113 = (unsigned int *)*v88;
                      *v88 = v112;
                      if (v113)
                      {
                        v114 = v113 + 2;
                        v115 = atomic_load(v113 + 2);
                        if (v115 == 1)
                        {
                          (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 248))(v113);
                        }
                        else
                        {
                          do
                            v116 = __ldaxr(v114);
                          while (__stlxr(v116 - 1, v114));
                        }
                      }
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = &v9[v108];
                      v88 = v111;
                    }
                    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
                    result = *v111;
                    *v111 = v146;
                    if (result)
                    {
                      v117 = (unsigned int *)(result + 8);
                      v118 = atomic_load((unsigned int *)(result + 8));
                      if (v118 == 1)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                      }
                      else
                      {
                        do
                          v119 = __ldaxr(v117);
                        while (__stlxr(v119 - 1, v117));
                      }
                      result = 0;
                    }
                  }
                }
              }
              v123 = v82-- <= 2;
              a2 = v106;
            }
            while (!v123);
          }
          return result;
        }
        v13 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v10[v12 >> 1], v10, v140, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, &v10[v12 >> 1], v140, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 1, v13 - 1, v137, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 2, &v10[(v12 >> 1) + 1], v136, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v13 - 1, &v10[v12 >> 1], &v10[(v12 >> 1) + 1], a3);
          v14 = *v10;
          *v10 = *v13;
          *v13 = v14;
        }
        --a4;
        a2 = v138;
        if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v32 = *v10;
          *v10 = 0;
          v143 = v32;
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            do
              ++v10;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
          }
          else
          {
            v33 = v10 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v138)
                break;
              v34 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v33 = v10 + 1;
            }
            while (!v34);
          }
          v35 = v138;
          if (v10 < v138)
          {
            v35 = v138;
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          while (v10 < v35)
          {
            v36 = *v10;
            *v10 = *v35;
            *v35 = v36;
            do
              ++v10;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          v37 = (unsigned int **)(v10 - 1);
          if (v10 - 1 != v9)
          {
            v38 = *v37;
            *v37 = 0;
            v39 = (unsigned int *)*v9;
            *v9 = (uint64_t)v38;
            if (v39)
            {
              v40 = v39 + 2;
              v41 = atomic_load(v39 + 2);
              if (v41 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 248))(v39);
              }
              else
              {
                do
                  v42 = __ldaxr(v40);
                while (__stlxr(v42 - 1, v40));
              }
            }
          }
          v43 = *v37;
          *v37 = (unsigned int *)v143;
          if (v43)
          {
            v44 = v43 + 2;
            v45 = atomic_load(v43 + 2);
            if (v45 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 248))(v43);
            }
            else
            {
              do
                v46 = __ldaxr(v44);
              while (__stlxr(v46 - 1, v44));
            }
          }
          result = 0;
          a5 = 0;
          continue;
        }
        v15 = *v10;
        *v10 = 0;
        v142 = v15;
        v16 = v10;
        do
          v17 = v16++;
        while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
        v18 = v138;
        if (v17 == v10)
        {
          v18 = v138;
          do
          {
            if (v16 >= v18)
              break;
            --v18;
          }
          while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
        }
        if (v16 < v18)
        {
          v19 = v16;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              v17 = v19++;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            do
              --v20;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
          }
          while (v19 < v20);
        }
        if (v17 != v9)
        {
          v22 = *v17;
          *v17 = 0;
          v23 = (unsigned int *)*v9;
          *v9 = v22;
          if (v23)
          {
            v24 = v23 + 2;
            v25 = atomic_load(v23 + 2);
            if (v25 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 248))(v23);
            }
            else
            {
              do
                v26 = __ldaxr(v24);
              while (__stlxr(v26 - 1, v24));
            }
          }
        }
        v27 = (unsigned int *)*v17;
        *v17 = v142;
        if (v27)
        {
          v28 = v27 + 2;
          v29 = atomic_load(v27 + 2);
          if (v29 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 248))(v27);
          }
          else
          {
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 - 1, v28));
          }
        }
        if (v16 < v18)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v9, v17, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v17 + 1;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v9, v17, a3);
        v10 = v17 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v17 + 1, v138, a3);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_37;
        }
        a2 = v17;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      *a2 = *a3;
    }
    *a3 = v10;
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a2, a3, a5);
  result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 16))();
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a2, a3, a4, a6);
  result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a6 + 16))();
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int **v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **i;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v13 = 0;
      v14 = *v11;
      *v11 = 0;
      v25 = v14;
      for (i = v11; ; v13 = *i)
      {
        v16 = i;
        i = (unsigned int **)v10;
        v17 = (unsigned int *)*v10;
        *v10 = 0;
        *v16 = v17;
        if (v13)
        {
          v18 = v13 + 2;
          v19 = atomic_load(v13 + 2);
          if (v19 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 248))(v13);
          }
          else
          {
            do
              v20 = __ldaxr(v18);
            while (__stlxr(v20 - 1, v18));
          }
        }
        if (v10 == a1)
          break;
        --v10;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          goto LABEL_16;
      }
      i = (unsigned int **)a1;
LABEL_16:
      v21 = *i;
      *i = v25;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 248))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v12 == 8)
        return v11 + 1 == (unsigned int **)a2;
    }
    v10 = (uint64_t *)v11++;
    if (v11 == (unsigned int **)a2)
      return 1;
  }
}

BOOL ___ZN2TI2CP33SearchNodeTranspositionExtensions23decrease_bound_on_scoreEv_block_invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  float v4;

  v4 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
  return v4 < (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
}

void std::allocate_shared[abi:nn180100]<TI::CP::SearchNodeTranspositionExtensions,std::allocator<TI::CP::SearchNodeTranspositionExtensions>,TI::CP::Search const*&,std::shared_ptr<TI::CP::SearchNode const>,unsigned int &,WTF::PassRefPtr<TI::Favonius::LayoutKey> &,void>(_QWORD *a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;

  v10 = (char *)operator new(0x88uLL);
  v11 = (std::__shared_weak_count *)v10;
  *((_QWORD *)v10 + 1) = 0;
  v12 = (unint64_t *)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1EA105960;
  v13 = v10 + 24;
  v14 = *a3;
  v15 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v16 = *a4;
  v17 = *a5;
  *a5 = 0;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = a2;
  *((_QWORD *)v10 + 7) = v14;
  *((_QWORD *)v10 + 8) = v15;
  *((_DWORD *)v10 + 18) = v16;
  *((_QWORD *)v10 + 3) = &off_1EA0FE560;
  *((_QWORD *)v10 + 4) = 0;
  *(_QWORD *)(v10 + 76) = 0;
  *(_QWORD *)(v10 + 92) = 0;
  *(_QWORD *)(v10 + 84) = 0;
  *((_DWORD *)v10 + 25) = 0;
  *((_QWORD *)v10 + 13) = v17;
  *((_QWORD *)v10 + 14) = 0;
  v10[120] = 0;
  TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score((TI::CP::SearchNodeTranspositionExtensions *)(v10 + 24));
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *a1 = v13;
  a1[1] = v11;
  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v23 = __ldxr(v12);
    while (__stxr(v23 + 1, v12));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v26 = __ldxr(v12);
    while (__stxr(v26 + 1, v12));
    v27 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v11[1].__shared_owners_ = (uint64_t)v13;
    v11[1].__shared_weak_owners_ = (uint64_t)v11;
  }
  do
    v29 = __ldaxr(v12);
  while (__stlxr(v29 - 1, v12));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

TI::CP::SearchNode *TI::CP::SearchNodeTransposition::SearchNodeTransposition(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a3;
  v8 = a3[1];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a5;
  *a5 = 0;
  v13 = *a7;
  *a7 = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = v9;
  *((_QWORD *)this + 5) = v8;
  *((_DWORD *)this + 12) = a4;
  *((_QWORD *)this + 7) = v12;
  *((_QWORD *)this + 8) = v13;
  *((_WORD *)this + 40) = 256;
  *((_BYTE *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_QWORD *)this = &off_1EA0FEB40;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = -1;
  v14 = *a6;
  *a6 = 0;
  *((_QWORD *)this + 19) = v14;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

void TI::CP::SearchNodeTransposition::~SearchNodeTransposition(TI::CP::SearchNodeTransposition *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1EA0FEB40;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 17);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v7 = (unsigned int *)*((_QWORD *)this + 8);
  if (v7)
  {
    v8 = v7 + 2;
    v9 = atomic_load(v7 + 2);
    if (v9 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
    }
    else
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
    }
  }
  v11 = *((_QWORD *)this + 7);
  if (v11)
    WTF::RefCounted<TI::Favonius::Key>::deref(v11);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1EA0FEB40;
  v2 = (unsigned int *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 17);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v7 = (unsigned int *)*((_QWORD *)this + 8);
  if (v7)
  {
    v8 = v7 + 2;
    v9 = atomic_load(v7 + 2);
    if (v9 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
    }
    else
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
    }
  }
  v11 = *((_QWORD *)this + 7);
  if (v11)
    WTF::RefCounted<TI::Favonius::Key>::deref(v11);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeTransposition::source_debug_data@<X0>(TI::CP::SearchNodeTransposition *this@<X0>, _QWORD *a2@<X8>)
{
  TI::Favonius::Key *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  TI::Favonius::Key *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char *v22;
  char v23;
  int v24;
  __int16 v25;
  char v26;
  char *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)" keys=", 6);
  v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 19) + 16))(*((_QWORD *)this + 19));
  v24 = 0x100000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v24);
  v5 = v27;
  if (!v27)
    v5 = &v28;
  if ((_WORD)v24)
    v6 = v5;
  else
    v6 = "";
  v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)v6, v7);
  v8 = *(TI::Favonius::Key **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v19 = 0x100000;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  TI::Favonius::Key::append_debug_data(v8, (KB::String *)&v19);
  v9 = v22;
  if (!v22)
    v9 = &v23;
  if ((_WORD)v19)
    v10 = v9;
  else
    v10 = "";
  v11 = strlen(v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v15, (uint64_t)v10, v11);
  if (v22 && v21 == 1)
    free(v22);
  if (v27 && v26 == 1)
    free(v27);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v16);
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v12;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v18);
}

_QWORD *TI::CP::SearchNodeTransposition::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeTransposition");
}

double TI::CP::SearchNodeTransposition::decrease_bound_on_score(TI::CP::SearchNodeTransposition *this, double result)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  double v10;
  char v11;
  TI::CP::Search *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  if (!*((_QWORD *)this + 17))
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
    TI::Favonius::KeyboardLayout::key_for_char(v3, *(_DWORD *)(*(_QWORD *)v4 + 56), &v16);
    v5 = *((_QWORD *)this + 17);
    v6 = v16;
    *((_QWORD *)this + 17) = v16;
    if (v5)
    {
      WTF::RefCounted<TI::Favonius::Key>::deref(v5);
      v6 = *((_QWORD *)this + 17);
    }
    if (!v6)
    {
      *((_BYTE *)this + 81) = 0;
      return result;
    }
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4)) & 1) != 0)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v8 = *(_DWORD *)(*((_QWORD *)this + 4) + 48) + 1;
      v7 = *((_DWORD *)this + 12) - 1;
      if (v8 > v7)
      {
        v9 = -1;
LABEL_16:
        *((_DWORD *)this + 36) = v9;
        return TI::CP::SearchNode::compute_score(this);
      }
    }
    v9 = -1;
    v10 = -INFINITY;
    do
    {
      v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4));
      v12 = (TI::CP::Search *)*((_QWORD *)this + 3);
      v13 = 0.0;
      if ((v11 & 1) == 0)
        v13 = TI::CP::Search::path_deviation_cost(*((TI::CP::Search **)this + 3), *(_DWORD *)(*((_QWORD *)this + 4) + 48), v8, 0)+ 0.0;
      v14 = v13 + TI::CP::Search::path_deviation_cost(v12, v8, *((_DWORD *)this + 12), 0);
      v15 = v14 + TI::CP::Search::key_deviation_cost((uint64_t)v12, v8, *((CGRect **)this + 17));
      if (v15 > v10)
      {
        v9 = v8;
        v10 = v15;
      }
      ++v8;
    }
    while (v8 <= v7);
    goto LABEL_16;
  }
  return result;
}

uint64_t TI::CP::SearchNodeTransposition::is_transposition_hypothesis(TI::CP::SearchNodeTransposition *this)
{
  return 1;
}

float TI::CP::SearchNodeTransposition::ideal_path_length(TI::CP::SearchNodeTransposition *this)
{
  unsigned int *v1;
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  long double v13;

  v1 = (unsigned int *)*((_QWORD *)this + 4);
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 56);
  v3 = (double *)(v2 + 48 * v1[12]);
  v4 = *v3;
  v5 = v3[1];
  v6 = (double *)(v2 + 48 * *((unsigned int *)this + 36));
  v7 = *v6;
  v8 = v6[1];
  v9 = (double *)(v2 + 48 * *((unsigned int *)this + 12));
  v10 = *v9;
  v11 = v9[1];
  v12 = (*(float (**)(unsigned int *))(*(_QWORD *)v1 + 160))(v1);
  v13 = hypot(v7 - v4, v8 - v5) + v12;
  return v13 + hypot(v10 - v7, v11 - v8);
}

BOOL TI::CP::SearchNodeTransposition::is_score_final(TI::CP::SearchNodeTransposition *this)
{
  return *((_QWORD *)this + 17) != 0;
}

uint64_t TI::CP::SearchNodeTransposition::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  CGRect *v20;
  double x;
  double y;
  long double v23;
  double v24;
  double v25;
  CGRect *v26;
  double v27;
  double v28;
  long double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t result;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  float v42;
  double v43;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
  v6 = (double *)(v5 + 48 * v4);
  if (*(_QWORD *)(a1 + 136))
  {
    v7 = *(unsigned int *)(a1 + 144);
    v8 = (double *)(v5 + 48 * v7);
  }
  else
  {
    v7 = 0;
    v8 = (double *)MEMORY[0x1E0C9D538];
  }
  v9 = *v6;
  v10 = v6[1];
  v12 = *v8;
  v11 = v8[1];
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v14 = *(_QWORD *)(a1 + 24);
  v15 = (double *)MEMORY[0x1E0C9D538];
  if ((v13 & 1) != 0)
  {
    v16 = 0;
    v17 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v16 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    v17 = (double *)(*(_QWORD *)(v14 + 56) + 48 * v16);
  }
  v19 = *v17;
  v18 = v17[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 7, v7, v4, v12, v11, v9, v10, -(*(double *)(v14 + 560) * *(double *)(v14 + 432)));
  v20 = *(CGRect **)(a1 + 56);
  x = v20[3].origin.x;
  y = v20[3].origin.y;
  v23 = TI::CP::Search::key_deviation_cost(*(_QWORD *)(a1 + 24), v4, v20);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, double, double, double, double, long double))(a2 + 16))(a2, 0, v4, 0, v9, v10, x, y, v23);
  if (*(_QWORD *)(a1 + 136))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32)) & 1) == 0)
    {
      v24 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v16, v7, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v16, v7, v19, v18, v12, v11, v24);
    }
    v25 = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v7, v4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v7, v4, v12, v11, v9, v10, v25);
    v26 = *(CGRect **)(a1 + 136);
    v27 = v26[3].origin.x;
    v28 = v26[3].origin.y;
    v29 = TI::CP::Search::key_deviation_cost(*(_QWORD *)(a1 + 24), v7, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, double, double, double, double, long double))(a2 + 16))(a2, 0, v7, 0, v12, v11, v27, v28, v29);
  }
  v30 = *(_QWORD *)(a1 + 152);
  if (v30)
  {
    v31 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30) + 56);
    v32 = *v15;
    v33 = v15[1];
    v34 = *(_QWORD *)(a1 + 24);
    v35 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
    v36 = logf(v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v31, v9, v10, v32, v33, *(double *)(v34 + 440) * v36);
  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    v38 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result) + 56);
    v39 = *v15;
    v40 = v15[1];
    v41 = *(_QWORD *)(a1 + 24);
    v42 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    v43 = *(double *)(v41 + 440) * logf(v42);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v7, v38, v12, v11, v39, v40, v43);
  }
  return result;
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeTransposition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA105960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA105960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeTranspositionExtensions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::SearchNodeKeyPredictionExtensions::~SearchNodeKeyPredictionExtensions(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  *(_QWORD *)this = &off_1EA0FE5F0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  *(_QWORD *)this = &off_1EA0FE5F0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeKeyPredictionExtensions::source_debug_data@<X0>(TI::CP::SearchNodeKeyPredictionExtensions *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  TI::Favonius::Key *v6;
  const char *v7;
  const char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[10];
  char v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;
  char *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)" stack=", 7);
  if (*((_DWORD *)this + 14))
  {
    v4 = *((unsigned int *)this + 14) - 1;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v4);
      v6 = *(TI::Favonius::Key **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v18 = 0x100000;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      TI::Favonius::Key::append_debug_data(v6, (KB::String *)&v18);
      v7 = v21;
      if (!v21)
        v7 = &v22;
      if ((_WORD)v18)
        v8 = v7;
      else
        v8 = "";
      v9 = strlen(v8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)v8, v9);
      if (v21 && v20 == 1)
        free(v21);
      if (!v4)
        break;
      v10 = v4;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v14, (uint64_t)",", 1);
      --v4;
    }
    while (v10);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v15);
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14 = v11;
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v17);
}

_QWORD *TI::CP::SearchNodeKeyPredictionExtensions::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyPredictionExtensions");
}

void TI::CP::SearchNodeKeyPredictionExtensions::branch_at_current_bound(TI::CP::SearchNodeKeyPredictionExtensions *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  std::__shared_weak_count_vtbl *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v14;
  __int128 v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;

  if (*((_BYTE *)this + 80))
  {
    v5 = (unsigned int *)((char *)this + 56);
    v4 = *((_QWORD *)this + 7);
    if (v4)
    {
      v6 = (std::__shared_weak_count_vtbl *)*((_QWORD *)this + 3);
      v24 = *((_OWORD *)this + 2);
      if (*((_QWORD *)&v24 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        v4 = *(_QWORD *)v5;
      }
      v9 = *((_DWORD *)this + 12);
      v10 = *((_QWORD *)this + 8) + 8 * v4;
      v11 = *(_QWORD *)(v10 - 8);
      *(_QWORD *)(v10 - 8) = 0;
      v12 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v12->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      v12->__shared_weak_owners_ = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEC08;
      v14 = v12 + 1;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE98;
      v12[1].__shared_owners_ = 0;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = v6;
      *(_OWORD *)&v12[2].__shared_owners_ = v24;
      LODWORD(v12[3].__vftable) = v9;
      v12[3].__shared_owners_ = 0;
      v12[3].__shared_weak_owners_ = v11;
      LOWORD(v12[4].__shared_owners_) = 256;
      BYTE2(v12[4].__shared_owners_) = 0;
      *(_OWORD *)&v12[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v12[5].__shared_owners_ = 0u;
      v12[6].std::__shared_count = 0u;
      LODWORD(v12[6].__shared_weak_owners_) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24 + 152))(v24);
      TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)&v12[1]);
      *(_QWORD *)&v15 = v12 + 1;
      *((_QWORD *)&v15 + 1) = v12;
      v25 = v15;
      shared_weak_owners = (std::__shared_weak_count *)v12[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1)
        {
LABEL_20:
          WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink(v5, *((_QWORD *)this + 7) - 1);
          TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score(this);
          *(_OWORD *)a2 = v25;
          return;
        }
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v19 = __ldxr(p_shared_weak_owners);
        while (__stxr(v19 + 1, p_shared_weak_owners));
        v12[1].__shared_owners_ = (uint64_t)v14;
        v12[1].__shared_weak_owners_ = (uint64_t)v12;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v12[1].__shared_owners_ = (uint64_t)v14;
        v12[1].__shared_weak_owners_ = (uint64_t)v12;
      }
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_20;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
}

void TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 4);
    if (!*(_BYTE *)(v2 + 82))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 48))(*(_QWORD *)(v2 + 64), v2 + 88);
      *(_BYTE *)(v2 + 82) = 1;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=((unint64_t *)this + 7, (unint64_t *)(v2 + 88));
    v3 = *((_QWORD *)this + 7);
    v4 = 126 - 2 * __clz(v3);
    if (v3)
      v5 = v4;
    else
      v5 = 0;
    std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((int8x16_t **)this + 8), (int8x16_t *)(*((_QWORD *)this + 8) + 8 * v3), v5, 1);
    *((_BYTE *)this + 80) = 1;
    TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score(this);
  }
}

double TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  return *((double *)this + 12);
}

void std::__introsort<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(int8x16_t *a1, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int8x16_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  float v19;
  int8x16_t *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t *v47;
  float v48;
  int8x16_t *v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  uint64_t v68;
  int8x16_t *v69;
  uint64_t *v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int8x16_t *v80;
  BOOL v82;
  uint64_t *v83;
  unsigned int **v84;
  float v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int **i;
  unsigned int **v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  float v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  int64_t v99;
  int64_t v100;
  uint64_t v101;
  unsigned int **v102;
  float v103;
  unsigned int **v104;
  float v105;
  unsigned int *v106;
  unsigned int **v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int **v122;
  unsigned int **v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int **v126;
  unsigned int **v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int **v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int **v148;
  float v149;
  unsigned int *v150;
  unsigned int **v151;
  unsigned int *v152;
  unsigned int *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  float v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t *v166;
  float v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int **v170;
  unsigned int **v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  float v176;
  float v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t *v181;
  int8x16_t *v182;
  unsigned int **v183;
  uint64_t *v184;
  int64_t v185;

void TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;

  if (*((_BYTE *)this + 80))
  {
    v2 = *((_QWORD *)this + 7);
    if (!v2)
    {
      v7 = -INFINITY;
      goto LABEL_7;
    }
    v3 = *((double *)this + 11);
    v4 = *((_QWORD *)this + 3);
    v5 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v2 - 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    v3 = *((double *)this + 11);
    v4 = *((_QWORD *)this + 3);
    v6 = 1.0
       - (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 64) + 80))(*(_QWORD *)(*((_QWORD *)this + 4) + 64));
  }
  v7 = v3 + *(double *)(v4 + 440) * logf(v6);
LABEL_7:
  *((double *)this + 12) = v7;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeKeyPredictionExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  float v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int **i;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int8x16_t *v25;
  uint64_t *v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (*(float (**)(uint64_t))(*(_QWORD *)a2[-1].i64[1] + 24))(a2[-1].i64[1]);
      if (v6 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
      {
        v7 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], &a2[-1].i64[1]);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a2[-1].i64[1]);
      return 1;
    case 5:
      v25 = a1 + 1;
      v26 = &a1[1].i64[1];
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1]);
      v27 = (*(float (**)(uint64_t))(*(_QWORD *)a2[-1].i64[1] + 24))(a2[-1].i64[1]);
      if (v27 < (*(float (**)(uint64_t))(*(_QWORD *)a1[1].i64[1] + 24))(a1[1].i64[1]))
      {
        v28 = *v26;
        *v26 = a2[-1].i64[1];
        a2[-1].i64[1] = v28;
        v29 = (*(float (**)(uint64_t))(*(_QWORD *)*v26 + 24))(*v26);
        if (v29 < (*(float (**)(uint64_t))(*(_QWORD *)v25->i64[0] + 24))(v25->i64[0]))
        {
          v30 = v25->i64[0];
          v31 = *v26;
          v25->i64[0] = *v26;
          *v26 = v30;
          v32 = (*(float (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
          if (v32 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[1] + 24))(a1->i64[1]))
          {
            v34 = a1->i64[1];
            v33 = a1[1].i64[0];
            a1->i64[1] = v33;
            a1[1].i64[0] = v34;
            v35 = (*(float (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
            if (v35 < (*(float (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v8 = (unsigned int **)&a1[1];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, &a1->i64[1], (int8x16_t *)a1[1].i64);
      v9 = (unsigned int **)&a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = (*(float (**)(unsigned int *))(*(_QWORD *)*v9 + 24))(*v9);
    if (v11 < (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8))
    {
      v12 = 0;
      v13 = *v9;
      *v9 = 0;
      for (i = v9; ; v12 = *i)
      {
        v15 = i;
        i = v8;
        v16 = *v8;
        *v8 = 0;
        *v15 = v16;
        if (v12)
        {
          v17 = v12 + 2;
          v18 = atomic_load(v12 + 2);
          if (v18 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 248))(v12);
          }
          else
          {
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
          }
        }
        if (v8 == (unsigned int **)a1)
          break;
        v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
        --v8;
        if (v20 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
          goto LABEL_17;
      }
      i = (unsigned int **)a1;
LABEL_17:
      v21 = *i;
      *i = v13;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 248))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v10 == 8)
        return v9 + 1 == (unsigned int **)a2;
    }
    v8 = v9++;
    if (v9 == (unsigned int **)a2)
      return 1;
  }
}

void TI::CP::SearchNodeKeyPrediction::~SearchNodeKeyPrediction(TI::CP::SearchNodeKeyPrediction *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

uint64_t TI::CP::SearchNodeKeyPrediction::source_debug_data@<X0>(TI::CP::SearchNodeKeyPrediction *this@<X0>, _QWORD *a2@<X8>)
{
  TI::Favonius::Key *v4;
  const char *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)" key=", 5);
  v4 = *(TI::Favonius::Key **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v15 = 0x100000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  TI::Favonius::Key::append_debug_data(v4, (KB::String *)&v15);
  v5 = v18;
  if (!v18)
    v5 = &v19;
  if ((_WORD)v15)
    v6 = v5;
  else
    v6 = "";
  v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v11, (uint64_t)v6, v7);
  if (v18 && v17 == 1)
    free(v18);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v12);
  v10[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11 = v8;
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v14);
}

_QWORD *TI::CP::SearchNodeKeyPrediction::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeKeyPrediction");
}

void TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(TI::CP::SearchNodeKeyPrediction *this)
{
  uint64_t v2;
  unsigned __int16 *v3;
  __n128 v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 7)
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4)) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 136))(*((_QWORD *)this + 4)) & 1) == 0)
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v3 = (unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8))
                            + 40);
    v7[0] = &off_1EA0FEED0;
    v7[1] = this;
    v8 = v7;
    v4.n128_f32[0] = TI::Favonius::KeyboardLayout::enumerate_keys_with_sort_key(v2, v3, (uint64_t)v7);
    v5 = v8;
    if (v8 == v7)
    {
      v6 = 4;
      v5 = v7;
    }
    else
    {
      if (!v8)
        goto LABEL_9;
      v6 = 5;
    }
    (*(void (**)(__n128))(*v5 + 8 * v6))(v4);
LABEL_9:
    if (*((_QWORD *)this + 7))
      TI::CP::SearchNode::compute_score(this);
    else
      *((_BYTE *)this + 81) = 0;
  }
}

uint64_t TI::CP::SearchNodeKeyPrediction::is_key_prediction_hypothesis(TI::CP::SearchNodeKeyPrediction *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeKeyPrediction::key_prediction_count(TI::CP::SearchNodeKeyPrediction *this)
{
  return (*((_DWORD *)this + 34) + 1);
}

uint64_t TI::CP::SearchNodeKeyPrediction::ideal_path_length(TI::CP::SearchNodeKeyPrediction *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
}

uint64_t TI::CP::SearchNodeKeyPrediction::is_score_final(TI::CP::SearchNodeKeyPrediction *this)
{
  if (!*((_QWORD *)this + 8))
    return 0;
  if (*((_QWORD *)this + 7)
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4)) & 1) != 0)
  {
    return 1;
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 136))(*((_QWORD *)this + 4));
}

uint64_t TI::CP::SearchNodeKeyPrediction::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  double *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  float v19;
  float v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  CGPoint v33;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = (double *)MEMORY[0x1E0C9D538];
  if ((v8 & 1) != 0)
  {
    v10 = 0;
    v11 = (unint64_t *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    v11 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v10);
  }
  v13 = *v11;
  v12 = v11[1];
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
  {
    v15 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14) + 56);
    v16 = *v9;
    v17 = v9[1];
    v18 = *(_QWORD *)(a1 + 24);
    v19 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    v20 = logf(v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v15, v7, v6, v16, v17, *(double *)(v18 + 440) * v20);
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32)) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 136))(*(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    v23 = *(_QWORD *)(a1 + 56);
    if (v23)
    {
      v24 = *(double *)(v23 + 96);
      v25 = *(double *)(v23 + 104);
      v33.x = v24;
      v33.y = v25;
      v26.n128_u64[0] = TI::CP::Search::extended_path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v10, v4, v33);
      v27.n128_u64[0] = v13;
      v28.n128_u64[0] = v12;
      v29.n128_f64[0] = v24;
      v30.n128_f64[0] = v25;
    }
    else
    {
      v26.n128_u64[0] = TI::CP::Search::path_deviation_cost(*(TI::CP::Search **)(a1 + 24), v10, v4, 0);
      v27.n128_u64[0] = v13;
      v28.n128_u64[0] = v12;
      v29.n128_f64[0] = v7;
      v30.n128_f64[0] = v6;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a2 + 16))(a2, 1, v10, v4, v27, v28, v29, v30, v26);
  }
  v31 = 584;
  if (!*(_DWORD *)(a1 + 136))
    v31 = 576;
  v21.n128_f64[0] = *v9;
  v22.n128_f64[0] = v9[1];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, double, double, __n128, __n128, double))(a2 + 16))(a2, 6, v4, 0, v7, v6, v21, v22, -(*(double *)(*(_QWORD *)(a1 + 24) + v31) * *(double *)(*(_QWORD *)(a1 + 24) + 432)));
}

void std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA0FEED0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA0FEED0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0,std::allocator<TI::CP::SearchNodeKeyPrediction::decrease_bound_on_score(void)::$_0>,void ()(WTF::RefPtr<TI::Favonius::LayoutKey> const&)>::operator()(uint64_t result, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_QWORD *)(v2 + 56))
  {
    v3 = *a2;
    if (*a2)
    {
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      result = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = v3;
      if (result)
        return WTF::RefCounted<TI::Favonius::Key>::deref(result);
    }
    else
    {
      *(_QWORD *)(v2 + 56) = 0;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::SearchNodeKeyPrediction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::SearchNodeForward::~SearchNodeForward(TI::CP::SearchNodeForward *this)
{
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

_QWORD *TI::CP::SearchNodeForward::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeForward");
}

_QWORD *TI::CP::SearchNodeForward::node_at_current_bound@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = this[4];
  if (v2)
  {
    v3 = this[5];
    *a2 = v2;
    a2[1] = v3;
    this[7] = 0xFFF0000000000000;
    this[4] = 0;
    this[5] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void TI::CP::SearchNodeForward::branch_at_current_bound(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double TI::CP::SearchNodeForward::bound_on_score(TI::CP::SearchNodeForward *this)
{
  if (*((_QWORD *)this + 4))
    return *((double *)this + 7);
  else
    return -INFINITY;
}

void TI::CP::SearchNodeRoot::~SearchNodeRoot(TI::CP::SearchNodeRoot *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

_QWORD *TI::CP::SearchNodeRoot::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeRoot");
}

uint64_t TI::CP::SearchNodeRoot::is_root(TI::CP::SearchNodeRoot *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeRoot::is_score_final(TI::CP::SearchNodeRoot *this)
{
  return 1;
}

void TI::CP::SearchNodeSkippedKey::~SearchNodeSkippedKey(TI::CP::SearchNodeSkippedKey *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

_QWORD *TI::CP::SearchNodeSkippedKey::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeSkippedKey");
}

uint64_t TI::CP::SearchNodeSkippedKey::is_skipped_key_hypothesis(TI::CP::SearchNodeSkippedKey *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeSkippedKey::is_score_final(TI::CP::SearchNodeSkippedKey *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeSkippedKey::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  TI::CP::Search *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = *(TI::CP::Search **)(a1 + 24);
  v10 = (double *)MEMORY[0x1E0C9D538];
  if ((v8 & 1) != 0)
  {
    v11 = 0;
    v12 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    v12 = (double *)(*((_QWORD *)v9 + 7) + 48 * v11);
  }
  v14 = *v12;
  v13 = v12[1];
  v15 = TI::CP::Search::path_deviation_cost(v9, v11, v4, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 1, v11, v4, v14, v13, v7, v6, v15);
  v16 = *v10;
  v17 = v10[1];
  v18 = TI::CP::Search::skipped_key_cost(*(TI::CP::Search **)(a1 + 24), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double, double))(a2 + 16))(a2, 4, v4, 0, v7, v6, v16, v17, v18);
}

void TI::CP::SearchNodeOvershoot::~SearchNodeOvershoot(TI::CP::SearchNodeOvershoot *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

_QWORD *TI::CP::SearchNodeOvershoot::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeOvershoot");
}

uint64_t TI::CP::SearchNodeOvershoot::is_overshoot_hypothesis(TI::CP::SearchNodeOvershoot *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeOvershoot::ideal_path_length(TI::CP::SearchNodeOvershoot *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
}

uint64_t TI::CP::SearchNodeOvershoot::is_score_final(TI::CP::SearchNodeOvershoot *this)
{
  return 1;
}

uint64_t TI::CP::SearchNodeOvershoot::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  TI::CP::Search *v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = *(TI::CP::Search **)(a1 + 24);
  if ((v8 & 1) != 0)
  {
    v10 = 0;
    v11 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    v11 = (double *)(*((_QWORD *)v9 + 7) + 48 * v10);
  }
  v13 = *v11;
  v12 = v11[1];
  v14 = TI::CP::Search::overshoot_cost(v9, v10, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 3, v10, v4, v13, v12, v7, v6, v14);
}

void TI::CP::SearchNodeLoop::~SearchNodeLoop(TI::CP::SearchNodeLoop *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = off_1EA0FECD0;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 88);
  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 248))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
    WTF::RefCounted<TI::Favonius::Key>::deref(v6);
  TI::CP::SearchNodeSource::~SearchNodeSource(this);
  JUMPOUT(0x1DF0A2144);
}

_QWORD *TI::CP::SearchNodeLoop::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeLoop");
}

uint64_t TI::CP::SearchNodeLoop::is_loop_hypothesis(TI::CP::SearchNodeLoop *this)
{
  return 1;
}

BOOL TI::CP::SearchNodeLoop::is_score_final(TI::CP::SearchNodeLoop *this)
{
  return *((_QWORD *)this + 8) != 0;
}

uint64_t TI::CP::SearchNodeLoop::enumerate_local_score_components(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  char v8;
  TI::CP::Search *v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  double v22;

  v4 = *(unsigned int *)(a1 + 48);
  v5 = (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56) + 48 * v4);
  v7 = *v5;
  v6 = v5[1];
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  v9 = *(TI::CP::Search **)(a1 + 24);
  v10 = (double *)MEMORY[0x1E0C9D538];
  if ((v8 & 1) != 0)
  {
    v11 = 0;
    v12 = (double *)MEMORY[0x1E0C9D538];
  }
  else
  {
    v11 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 48);
    v12 = (double *)(*((_QWORD *)v9 + 7) + 48 * v11);
  }
  v14 = *v12;
  v13 = v12[1];
  TI::CP::Search::loop_cost(v9, v11, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 2, v11, v4, v14, v13, v7, v6, v15);
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    v17 = *(unsigned int *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result) + 56);
    v18 = *v10;
    v19 = v10[1];
    v20 = *(_QWORD *)(a1 + 24);
    v21 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    v22 = *(double *)(v20 + 440) * logf(v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double))(a2 + 16))(a2, 8, v4, v17, v7, v6, v18, v19, v22);
  }
  return result;
}

_QWORD *TI::CP::SearchNodeSource::class_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "SearchNodeSource");
}

uint64_t TI::CP::SearchNodeSource::source_description@<X0>(TI::CP::SearchNodeSource *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  void *v18[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)"<", 1);
  (*(void (**)(void **__return_ptr, TI::CP::SearchNodeSource *))(*(_QWORD *)this + 24))(v20, this);
  if ((v21 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v5 = v21;
  else
    v5 = (uint64_t)v20[1];
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v23, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)" bs=", 4);
  (*(void (**)(TI::CP::SearchNodeSource *))(*(_QWORD *)this + 56))(this);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)" p=", 3);
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v8 + 64))(v18);
  else
    std::string::basic_string[abi:nn180100]<0>(v18, "NULL");
  if ((v19 & 0x80u) == 0)
    v9 = v18;
  else
    v9 = (void **)v18[0];
  if ((v19 & 0x80u) == 0)
    v10 = v19;
  else
    v10 = (uint64_t)v18[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  (*(void (**)(void **__return_ptr, TI::CP::SearchNodeSource *))(*(_QWORD *)this + 16))(__p, this);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v18[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v24);
  v22[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v23 = v14;
  v24[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0A20F0](&v26);
}

uint64_t TI::CP::SearchNode::typing_extensions(TI::CP::SearchNode *this)
{
  if (!*((_BYTE *)this + 82))
  {
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8), (char *)this + 88);
    *((_BYTE *)this + 82) = 1;
  }
  return (uint64_t)this + 88;
}

uint64_t TI::CP::SearchNodeSource::nearby_keys(TI::CP::SearchNodeSource *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 376) + 24 * *((unsigned int *)this + 12);
}

uint64_t TI::CP::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(uint64_t a1, TI::CP::SearchNodeLanguageExtensions *this, __int128 *a3, TI::CP::SearchNode *a4)
{
  __int128 v5;

  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = (_DWORD)a4;
  *(_QWORD *)a1 = &off_1EA0FE4C0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(long double *)(a1 + 88) = TI::CP::SearchNodeLanguageExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score((TI::CP::SearchNodeLanguageExtensions *)a1);
  return a1;
}

{
  __int128 v5;

  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = (_DWORD)a4;
  *(_QWORD *)a1 = &off_1EA0FE4C0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(long double *)(a1 + 88) = TI::CP::SearchNodeLanguageExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeLanguageExtensions::compute_bound_on_score((TI::CP::SearchNodeLanguageExtensions *)a1);
  return a1;
}

long double TI::CP::SearchNodeLanguageExtensions::bound_on_score(TI::CP::SearchNodeLanguageExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3;
  double v6;

  v3 = a3;
  v6 = *((double *)a2 + 9);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(_QWORD *)a2 + 72))(a2) & 1) == 0)
    v6 = v6 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  return v6 + TI::CP::Search::key_substitution_cost(this, v3);
}

double TI::CP::SearchNode::score(TI::CP::SearchNode *this)
{
  return *((double *)this + 9);
}

__n128 *TI::CP::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(__n128 *a1, TI::CP::Search *a2, __n128 *a3, unsigned int a4)
{
  __n128 v7;
  unint64_t v8;
  double v9;

  v7 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = (unint64_t)a2;
  a1[2] = v7;
  a1->n128_u64[0] = (unint64_t)&off_1EA0FE510;
  a1->n128_u64[1] = 0;
  a1[3].n128_u32[0] = a4;
  a1[3].n128_u32[1] = 0;
  v8 = v7.n128_u64[0];
  v9 = *(double *)(v7.n128_u64[0] + 72);
  if (((*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v7.n128_u64[0] + 72))(v7.n128_u64[0], v7) & 1) == 0)
    v9 = v9 + TI::CP::Search::path_deviation_cost(a2, *(_DWORD *)(v8 + 48), a4, 0);
  a1[3].n128_f64[1] = v9;
  TI::CP::SearchNodeGeometryExtensions::skip_keys_equal_to_parent_key((TI::CP::SearchNodeGeometryExtensions *)a1);
  TI::CP::SearchNodeGeometryExtensions::compute_bound_on_score((TI::CP::SearchNodeGeometryExtensions *)a1);
  return a1;
}

double TI::CP::SearchNodeGeometryExtensions::bound_on_score(TI::CP::SearchNodeGeometryExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3;
  double v6;

  v3 = a3;
  v6 = *((double *)a2 + 9);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(_QWORD *)a2 + 72))(a2) & 1) == 0)
    return v6 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  return v6;
}

TI::CP::SearchNodeTranspositionExtensions *TI::CP::SearchNodeTranspositionExtensions::SearchNodeTranspositionExtensions(TI::CP::SearchNodeTranspositionExtensions *this, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *a3;
  v6 = a3[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = v6;
  *((_DWORD *)this + 12) = a4;
  *(_QWORD *)this = &off_1EA0FE560;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *((_DWORD *)this + 19) = 0;
  v10 = *a5;
  *a5 = 0;
  *((_QWORD *)this + 10) = v10;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 0;
  TI::CP::SearchNodeTranspositionExtensions::compute_bound_on_score(this);
  return this;
}

uint64_t TI::CP::SearchNodeKeyPredictionExtensions::SearchNodeKeyPredictionExtensions(uint64_t a1, TI::CP::SearchNodeKeyPredictionExtensions *this, __int128 *a3, TI::CP::SearchNode *a4)
{
  __int128 v5;

  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = (_DWORD)a4;
  *(_QWORD *)a1 = &off_1EA0FE5F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(double *)(a1 + 88) = TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score((TI::CP::SearchNodeKeyPredictionExtensions *)a1);
  return a1;
}

{
  __int128 v5;

  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = this;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = (_DWORD)a4;
  *(_QWORD *)a1 = &off_1EA0FE5F0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(double *)(a1 + 88) = TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(this, (const TI::CP::Search *)v5, a4);
  TI::CP::SearchNodeKeyPredictionExtensions::compute_bound_on_score((TI::CP::SearchNodeKeyPredictionExtensions *)a1);
  return a1;
}

double TI::CP::SearchNodeKeyPredictionExtensions::bound_on_score(TI::CP::SearchNodeKeyPredictionExtensions *this, const TI::CP::Search *a2, const TI::CP::SearchNode *a3)
{
  unsigned int v3;
  double v6;
  int v7;
  uint64_t v8;
  double v9;

  v3 = a3;
  v6 = *((double *)a2 + 9);
  v7 = (*(uint64_t (**)(const TI::CP::Search *))(*(_QWORD *)a2 + 152))(a2);
  v8 = 584;
  if (!v7)
    v8 = 576;
  v9 = v6 - *(double *)((char *)this + v8) * *((double *)this + 54);
  if (((*(uint64_t (**)(const TI::CP::Search *))(*(_QWORD *)a2 + 72))(a2) & 1) == 0
    && ((*(uint64_t (**)(const TI::CP::Search *))(*(_QWORD *)a2 + 136))(a2) & 1) == 0)
  {
    return v9 + TI::CP::Search::path_deviation_cost(this, *((_DWORD *)a2 + 12), v3, 0);
  }
  return v9;
}

uint64_t TI::CP::SearchNodeForward::SearchNodeForward(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  TI::CP::SearchNode *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = *(TI::CP::SearchNode **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)a1 = &off_1EA0FE640;
  *(_QWORD *)(a1 + 8) = 0;
  *(double *)(a1 + 56) = TI::CP::SearchNode::score_at_sample_index(v5, a4);
  return a1;
}

double TI::CP::SearchNode::score_at_sample_index(TI::CP::SearchNode *this, unsigned int a2)
{
  double v3;
  unsigned int v4;
  TI::CP::Search *v5;
  int v6;

  v3 = *((double *)this + 9);
  v4 = *((_DWORD *)this + 12);
  if (v4 < a2)
  {
    v5 = (TI::CP::Search *)*((_QWORD *)this + 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 8) - *((_QWORD *)v5 + 7)) >> 4) - 1 <= a2)
    {
      v6 = 1;
    }
    else
    {
      ++a2;
      v6 = 0;
    }
    return v3 + TI::CP::Search::path_deviation_cost(v5, v4, a2, v6);
  }
  return v3;
}

uint64_t TI::CP::SearchNodeRoot::SearchNodeRoot(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = v3;
  *(_WORD *)(result + 81) = 1;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)result = &off_1EA0FE690;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 80) = 1;
  return result;
}

{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = v3;
  *(_WORD *)(result + 81) = 1;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)result = &off_1EA0FE690;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 80) = 1;
  return result;
}

double TI::CP::SearchNode::SearchNode(uint64_t a1, uint64_t a2, __int128 *a3, int a4, uint64_t *a5, uint64_t *a6)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)a1 = off_1EA0FECD0;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a5;
  *a5 = 0;
  v8 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t TI::CP::SearchNodeKeyMatch::SearchNodeKeyMatch(uint64_t a1, uint64_t a2, __int128 *a3, int a4, uint64_t *a5, uint64_t *a6)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v8 = *a5;
  *a5 = 0;
  v9 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1EA0FE758;
  *(_QWORD *)(a1 + 8) = 0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v8 = *a5;
  *a5 = 0;
  v9 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v7;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1EA0FE758;
  *(_QWORD *)(a1 + 8) = 0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

uint64_t TI::CP::SearchNodeKeySubstitution::SearchNodeKeySubstitution(uint64_t a1, uint64_t a2, __int128 *a3, int a4, uint64_t *a5)
{
  __int128 v6;
  uint64_t v7;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1EA0FE820;
  *(_QWORD *)(a1 + 8) = 0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

{
  __int128 v6;
  uint64_t v7;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1EA0FE820;
  *(_QWORD *)(a1 + 8) = 0;
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

TI::CP::SearchNode *TI::CP::SearchNodeSkippedKey::SearchNodeSkippedKey(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v6 = *a3;
  v5 = a3[1];
  v7 = *a3;
  if (v5)
  {
    v8 = (unint64_t *)(v5 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v7 = *a3;
  }
  v10 = *(_QWORD *)(v7 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v10;
  *((_WORD *)this + 40) = 256;
  *((_BYTE *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_QWORD *)this = &off_1EA0FE8E8;
  *((_QWORD *)this + 1) = 0;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

TI::CP::SearchNode *TI::CP::SearchNodeOvershoot::SearchNodeOvershoot(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v6 = *a3;
  v5 = a3[1];
  v7 = *a3;
  if (v5)
  {
    v8 = (unint64_t *)(v5 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v7 = *a3;
  }
  v10 = *(_QWORD *)(v7 + 64);
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v10;
  *((_WORD *)this + 40) = 256;
  *((_BYTE *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_QWORD *)this = &off_1EA0FE9B0;
  *((_QWORD *)this + 1) = 0;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

TI::CP::SearchNode *TI::CP::SearchNodeLoop::SearchNodeLoop(TI::CP::SearchNode *this, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v6 = *a3;
  v5 = a3[1];
  v7 = *a3;
  if (v5)
  {
    v8 = (unint64_t *)(v5 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v7 = *a3;
  }
  v10 = *(unsigned int **)(v7 + 56);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = v6;
  *((_QWORD *)this + 5) = v5;
  *((_DWORD *)this + 12) = a4;
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)this + 8) = 0;
  *((_WORD *)this + 40) = 256;
  *((_BYTE *)this + 82) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_QWORD *)this = &off_1EA0FEA78;
  *((_QWORD *)this + 1) = 0;
  TI::CP::SearchNode::compute_score(this);
  return this;
}

uint64_t TI::CP::SearchNodeKeyPrediction::SearchNodeKeyPrediction(uint64_t a1, uint64_t a2, __n128 *a3, int a4, uint64_t *a5)
{
  __n128 v6;
  uint64_t v7;

  v6 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(__n128 *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_WORD *)(a1 + 80) = 256;
  *(_BYTE *)(a1 + 82) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)a1 = &off_1EA0FEC08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v6.n128_u64[0] + 152))(v6.n128_u64[0], v6);
  TI::CP::SearchNode::compute_score((TI::CP::SearchNode *)a1);
  return a1;
}

void TI::CP::SearchNode::key_description(TI::CP::SearchNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  TI::CP::SearchNode *v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  int64x2_t v34;
  char v35;
  unint64_t v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  const char *v48;
  size_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  void *__p[2];
  uint64_t v59;
  void **v60[2];
  uint64_t v61;
  _QWORD v62[8];
  void *v63;
  char v64;
  _BYTE v65[152];
  int64x2_t v66;
  std::string *v67;
  std::__split_buffer<std::string> v68;

  v66 = 0uLL;
  v67 = 0;
  v2 = MEMORY[0x1E0DE4F50];
  if (this)
  {
    v3 = this;
    v4 = (void **)*MEMORY[0x1E0DE4F50];
    v6 = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
    v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v7 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      if (((*(uint64_t (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 72))(v3) & 1) != 0)
        goto LABEL_67;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v60);
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 104))(v3))
      {
        v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 8) + 16))(*((_QWORD *)v3 + 8));
        v9 = *(_QWORD *)v8;
        if (*(_WORD *)(*(_QWORD *)v8 + 8))
        {
          v10 = *(const char **)(v9 + 16);
          v11 = (const char *)(v9 + 24);
          if (v10)
            v12 = v10;
          else
            v12 = v11;
        }
        else
        {
          v12 = "";
        }
        v22 = strlen(v12);
        v20 = &v61;
        v21 = v12;
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 112))(v3))
        break;
      if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 96))(v3))
      {
        v20 = &v61;
        v21 = "°";
      }
      else
      {
        if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 80))(v3))
        {
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 88))(v3))
          {
            v20 = &v61;
            v21 = "(-)";
LABEL_52:
            v22 = 3;
            goto LABEL_25;
          }
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 128))(v3))
          {
            v20 = &v61;
            v21 = "($)";
            goto LABEL_52;
          }
          if ((*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 120))(v3))
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)"{", 1);
            v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 19) + 16))(*((_QWORD *)v3 + 19));
            v39 = *(_QWORD *)v38;
            if (*(_WORD *)(*(_QWORD *)v38 + 8))
            {
              v40 = *(const char **)(v39 + 16);
              v41 = (const char *)(v39 + 24);
              if (v40)
                v42 = v40;
              else
                v42 = v41;
            }
            else
            {
              v42 = "";
            }
            v43 = strlen(v42);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v42, v43);
            v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 8) + 16))(*((_QWORD *)v3 + 8));
            v45 = *(_QWORD *)v44;
            if (*(_WORD *)(*(_QWORD *)v44 + 8))
            {
              v46 = *(const char **)(v45 + 16);
              v47 = (const char *)(v45 + 24);
              if (v46)
                v48 = v46;
              else
                v48 = v47;
            }
            else
            {
              v48 = "";
            }
            v49 = strlen(v48);
            v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v48, v49);
            v21 = "}";
            goto LABEL_24;
          }
          if (!(*(unsigned int (**)(TI::CP::SearchNode *))(*(_QWORD *)v3 + 136))(v3))
            goto LABEL_26;
          v13 = "(+";
          v14 = 2;
LABEL_11:
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v13, v14);
          v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 8) + 16))(*((_QWORD *)v3 + 8));
          v16 = *(_QWORD *)v15;
          if (*(_WORD *)(*(_QWORD *)v15 + 8))
          {
            v17 = *(const char **)(v16 + 16);
            v18 = (const char *)(v16 + 24);
            if (v17)
              v19 = v17;
            else
              v19 = v18;
          }
          else
          {
            v19 = "";
          }
          v23 = strlen(v19);
          v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v61, (uint64_t)v19, v23);
          v21 = ")";
LABEL_24:
          v22 = 1;
          goto LABEL_25;
        }
        v20 = &v61;
        v21 = "()";
      }
      v22 = 2;
LABEL_25:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
LABEL_26:
      std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__p, (uint64_t)v62);
      v24 = v66.i64[1];
      if (v66.i64[1] >= (unint64_t)v67)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v66.i64[1] - v66.i64[0]) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (((uint64_t)v67 - v66.i64[0]) >> 3) > v26)
          v26 = 0x5555555555555556 * (((uint64_t)v67 - v66.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v67 - v66.i64[0]) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        v68.__end_cap_.__value_ = (std::allocator<std::string> *)&v67;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v27);
        else
          v28 = 0;
        v29 = v27 + 24 * v25;
        *(_QWORD *)(v29 + 16) = v59;
        *(_OWORD *)v29 = *(_OWORD *)__p;
        __p[1] = 0;
        v59 = 0;
        __p[0] = 0;
        v30 = v66.i64[1];
        v31 = v66.i64[0];
        if (v66.i64[1] == v66.i64[0])
        {
          v35 = 0;
          v34 = vdupq_n_s64(v66.u64[1]);
          v32 = v29;
        }
        else
        {
          v32 = v27 + 24 * v25;
          do
          {
            v33 = *(_OWORD *)(v30 - 24);
            *(_QWORD *)(v32 - 8) = *(_QWORD *)(v30 - 8);
            *(_OWORD *)(v32 - 24) = v33;
            v32 -= 24;
            *(_QWORD *)(v30 - 16) = 0;
            *(_QWORD *)(v30 - 8) = 0;
            *(_QWORD *)(v30 - 24) = 0;
            v30 -= 24;
          }
          while (v30 != v31);
          v34 = v66;
          v35 = HIBYTE(v59);
        }
        v36 = v29 + 24;
        v66.i64[0] = v32;
        v66.i64[1] = v29 + 24;
        *(int64x2_t *)&v68.__begin_ = v34;
        v37 = v67;
        v67 = (std::string *)(v27 + 24 * v28);
        v68.__end_cap_.__value_ = v37;
        v68.__first_ = (std::__split_buffer<std::string>::pointer)v34.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v68);
        v66.i64[1] = v36;
        v2 = MEMORY[0x1E0DE4F50];
        if (v35 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v66.i64[1] = *(_OWORD *)__p;
        *(_QWORD *)(v24 + 16) = v59;
        v66.i64[1] = v24 + 24;
      }
      v3 = (TI::CP::SearchNode *)*((_QWORD *)v3 + 4);
      v60[0] = v4;
      *(void ***)((char *)v60 + (_QWORD)*(v4 - 3)) = v6;
      v61 = v5;
      v62[0] = v7;
      if (v64 < 0)
        operator delete(v63);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1DF0A20F0](v65);
      if (!v3)
        goto LABEL_67;
    }
    v13 = "(";
    v14 = 1;
    goto LABEL_11;
  }
LABEL_67:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v60);
  if (v66.i64[1] != v66.i64[0])
  {
    v50 = &v61;
    v51 = v66.i64[1] - 24;
    do
    {
      v52 = *(char *)(v51 + 23);
      if (v52 >= 0)
        v53 = v51;
      else
        v53 = *(_QWORD *)v51;
      if (v52 >= 0)
        v54 = *(unsigned __int8 *)(v51 + 23);
      else
        v54 = *(_QWORD *)(v51 + 8);
      v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, v53, v54);
      v55 = v51 == v66.i64[0];
      v51 -= 24;
    }
    while (!v55);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(a2, (uint64_t)v62);
  v60[0] = *(void ***)v2;
  v56 = *(_QWORD *)(v2 + 72);
  *(void ***)((char *)v60 + (unint64_t)*(v60[0] - 3)) = *(void ***)(v2 + 64);
  v61 = v56;
  v62[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v64 < 0)
    operator delete(v63);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0A20F0](v65);
  v60[0] = (void **)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v60);
}

uint64_t TI::CP::SearchNode::explain_score(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v5[5];

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  if (!(_DWORD)result)
  {
    TI::CP::SearchNode::explain_score(a1[4], a2);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = ___ZNK2TI2CP10SearchNode13explain_scoreERNSt3__16vectorINS0_14ScoreComponentENS2_9allocatorIS4_EEEE_block_invoke;
    v5[3] = &__block_descriptor_tmp_49;
    v5[4] = a2;
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 176))(a1, v5);
  }
  return result;
}

void ___ZNK2TI2CP10SearchNode13explain_scoreERNSt3__16vectorINS0_14ScoreComponentENS2_9allocatorIS4_EEEE_block_invoke(uint64_t a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9)
{
  void **v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v17 = *(void ***)(a1 + 32);
  v18 = (char *)v17[1];
  v19 = (char *)v17[2];
  if (v18 >= v19)
  {
    v21 = 0x6DB6DB6DB6DB6DB7 * ((v18 - (_BYTE *)*v17) >> 3);
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) > 0x492492492492492)
      abort();
    v23 = 0x6DB6DB6DB6DB6DB7 * ((v19 - (_BYTE *)*v17) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x249249249249249)
      v24 = 0x492492492492492;
    else
      v24 = v22;
    v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v24);
    v26 = &v25[56 * v21];
    v28 = &v25[56 * v27];
    *(_DWORD *)v26 = a2;
    *((_DWORD *)v26 + 1) = a3;
    *((_DWORD *)v26 + 2) = a4;
    *((double *)v26 + 2) = a5;
    *((double *)v26 + 3) = a6;
    *((double *)v26 + 4) = a7;
    *((double *)v26 + 5) = a8;
    *((double *)v26 + 6) = a9;
    v20 = v26 + 56;
    v30 = (char *)*v17;
    v29 = (char *)v17[1];
    if (v29 != *v17)
    {
      do
      {
        v31 = *(_OWORD *)(v29 - 56);
        v32 = *(_OWORD *)(v29 - 40);
        v33 = *(_OWORD *)(v29 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v29 - 1);
        *(_OWORD *)(v26 - 24) = v33;
        *(_OWORD *)(v26 - 40) = v32;
        *(_OWORD *)(v26 - 56) = v31;
        v26 -= 56;
        v29 -= 56;
      }
      while (v29 != v30);
      v29 = (char *)*v17;
    }
    *v17 = v26;
    v17[1] = v20;
    v17[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_DWORD *)v18 = a2;
    *((_DWORD *)v18 + 1) = a3;
    *((_DWORD *)v18 + 2) = a4;
    *((double *)v18 + 2) = a5;
    *((double *)v18 + 3) = a6;
    *((double *)v18 + 4) = a7;
    *((double *)v18 + 5) = a8;
    v20 = v18 + 56;
    *((double *)v18 + 6) = a9;
  }
  v17[1] = v20;
}

double TI::CP::SearchNode::shared_from_this@<D0>(TI::CP::SearchNode *this@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  __int128 v7;
  TI::CP::SearchNode *v8;
  _OWORD *v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3 && (v5 = *((_QWORD *)this + 1), (v6 = std::__shared_weak_count::lock(v3)) != 0))
  {
    *(_QWORD *)&v7 = v5;
    *((_QWORD *)&v7 + 1) = v6;
    *a2 = v7;
  }
  else
  {
    v8 = (TI::CP::SearchNode *)std::__throw_bad_weak_ptr[abi:nn180100]();
    *(double *)&v7 = TI::CP::SearchNode::shared_from_this(v8, v9);
  }
  return *(double *)&v7;
}

{
  double result;
  __int128 v4;

  std::shared_ptr<TIInlineCompletionEventDispatcher>::shared_ptr[abi:nn180100]<TIInlineCompletionEventDispatcher,void>(&v4, *((_QWORD *)this + 1), *((std::__shared_weak_count **)this + 2));
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double TI::CP::SearchNode::termination_score(TI::CP::SearchNode *this)
{
  double v1;
  uint64_t v2;
  float v3;

  v1 = *((double *)this + 9);
  v2 = *((_QWORD *)this + 3);
  v3 = (*(float (**)(_QWORD))(**((_QWORD **)this + 8) + 80))(*((_QWORD *)this + 8));
  return v1 + *(double *)(v2 + 440) * logf(v3);
}

uint64_t TI::CP::SearchNode::generate_candidates(double *a1, unsigned int **a2, uint64_t a3, uint64_t *a4, int a5)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFAllocator *v14;
  KB::Candidate *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  double v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float v49;
  uint64_t v50;
  float *v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  float v58;
  float v59;
  float v60;
  float v61;
  __CFDictionary *Mutable;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  uint64_t v68;
  float v69;
  double v70;
  double v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  double v81;
  double v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  float *v88;
  float v89;
  float v90;
  double v91;
  __int128 v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  double v101;
  double v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t result;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  uint64_t v114;
  void *value;
  uint64_t v116;
  double valuePtr;
  double v118;
  char *v119;

  v7 = *a2;
  *a2 = 0;
  v8 = 0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3);
  v112 = v7;
  (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v7 + 16))(v7, *((_QWORD *)a1 + 8));
  if ((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 144))(a1))
    v9 = 2;
  else
    v9 = 0;
  v10 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 88))(a1);
  v11 = v9 | 4;
  if (!v10)
    v11 = v9;
  v114 = v11;
  v12 = *a4;
  if (0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3) > (unint64_t)v8)
  {
    v13 = v8;
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v15 = (KB::Candidate *)(v12 + 1000 * v13);
      *((_QWORD *)v15 + 121) |= v114;
      if ((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 152))(a1))
      {
        *(_BYTE *)(v12 + 1000 * v13 + 960) = 1;
        v16 = *(_QWORD *)v15;
        v17 = *((_QWORD *)v15 + 1);
        *(_DWORD *)(v17 + 240 * v16 - 96) = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 152))(a1);
      }
      v18 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 8) + 88))(*((_QWORD *)a1 + 8));
      v19 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 8) + 80))(*((_QWORD *)a1 + 8));
      v20 = v18 + logf(v19);
      if ((LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        v21 = *((_QWORD *)a1 + 3);
        v22 = *(double *)(v21 + 440);
        v23 = a1[9];
        v24 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 8) + 80))(*((_QWORD *)a1 + 8));
        v25 = logf(v24);
        v26 = *(_QWORD *)v15;
        v27 = 1.0;
        v28 = 1.0;
        if (*(_QWORD *)v15)
        {
          v29 = *((_QWORD *)v15 + 1);
          v30 = (float *)(v29 + 48);
          v31 = 240 * v26;
          do
          {
            v32 = *v30;
            v30 += 60;
            v28 = v28 * v32;
            v31 -= 240;
          }
          while (v31);
          v33 = 240 * v26;
          v34 = *((_QWORD *)v15 + 1);
          while ((*(_BYTE *)(v34 + 105) & 1) == 0)
          {
            v34 += 240;
            v33 -= 240;
            if (!v33)
              goto LABEL_19;
          }
          if (v34 != v29 + 240 * v26)
          {
LABEL_27:
            v28 = v28 * 0.8;
            goto LABEL_28;
          }
LABEL_19:
          if (v26)
          {
            v35 = 240 * v26 - 240;
            v36 = (uint64_t *)(v29 + 224);
            do
            {
              v38 = *v36;
              v36 += 30;
              v37 = v38;
              if (v38)
                v39 = 1;
              else
                v39 = v35 == 0;
              v35 -= 240;
            }
            while (!v39);
            if (v37)
              goto LABEL_27;
          }
        }
LABEL_28:
        v40 = v22;
        v41 = v23 + *(double *)(v21 + 440) * v25 - (float)(v20 * v40);
        v42 = v20 + logf(v28);
        v43 = v12 + 1000 * v13;
        *(float *)(v43 + 748) = v41;
        *(float *)(v43 + 752) = v42;
        *(_DWORD *)(v43 + 756) = 0;
        *(float *)(v43 + 760) = v40;
        *(_DWORD *)(v43 + 764) = -8388608;
        v44 = v41 + (float)(v40 * (float)(v42 + 0.0));
        *(float *)(v43 + 744) = v44;
        v46 = a1[14];
        v45 = a1[15];
        v47 = a1[16];
        v48 = *(double *)(*((_QWORD *)a1 + 3) + 440);
        (*(void (**)(_QWORD))(**((_QWORD **)a1 + 8) + 80))(*((_QWORD *)a1 + 8));
        if (*(_QWORD *)v15)
        {
          v50 = 240 * *(_QWORD *)v15;
          v51 = (float *)(*((_QWORD *)v15 + 1) + 48);
          v27 = 1.0;
          do
          {
            v52 = *v51;
            v51 += 60;
            v27 = v27 * v52;
            v50 -= 240;
          }
          while (v50);
        }
        v53 = logf(v49 * v27);
        v54 = *((_QWORD *)a1 + 3);
        v56 = *(_QWORD *)(v54 + 56);
        v55 = *(_QWORD *)(v54 + 64);
        if (v56 == v55)
          v57 = 0.0;
        else
          v57 = *(double *)(v55 - 16);
        v58 = v46 + v45;
        v59 = v47 / v48 + v53;
        v60 = v57;
        v61 = (*(float (**)(double *))(*(_QWORD *)a1 + 160))(a1);
        *(float *)(v43 + 748) = v58;
        *(float *)(v43 + 752) = v59;
        *(_DWORD *)(v43 + 756) = 0;
        *(float *)(v43 + 760) = v40;
        *(_DWORD *)(v43 + 764) = -8388608;
        *(float *)(v43 + 768) = v60;
        *(float *)(v43 + 772) = v61;
        if (a5 >= 1)
        {
          Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          valuePtr = v58;
          v63 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, CFSTR("geometry_score"), v63);
          if (v63)
            CFRelease(v63);
          valuePtr = v59;
          v64 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, CFSTR("word_score"), v64);
          if (v64)
            CFRelease(v64);
          valuePtr = v40;
          v65 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, CFSTR("language_power"), v65);
          if (v65)
            CFRelease(v65);
          valuePtr = v44;
          v66 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, CFSTR("final_log_score"), v66);
          if (v66)
            CFRelease(v66);
          valuePtr = expf(*(float *)(v43 + 744));
          v67 = CFNumberCreate(v14, kCFNumberDoubleType, &valuePtr);
          CFDictionarySetValue(Mutable, CFSTR("final_score"), v67);
          if (v67)
            CFRelease(v67);
          CFDictionarySetValue(Mutable, CFSTR("source"), CFSTR("favonius"));
          if (a5 != 1)
          {
            valuePtr = 0.0;
            v118 = 0.0;
            v119 = 0;
            TI::CP::SearchNode::explain_score(a1, (uint64_t)&valuePtr);
            v68 = *((_QWORD *)a1 + 3);
            v69 = (*(float (**)(_QWORD))(**((_QWORD **)a1 + 8) + 80))(*((_QWORD *)a1 + 8));
            v70 = *(double *)(v68 + 440) * logf(v69);
            v71 = v118;
            if (*(_QWORD *)&v118 >= (unint64_t)v119)
            {
              v74 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v118 - *(_QWORD *)&valuePtr) >> 3);
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) > 0x492492492492492)
                goto LABEL_88;
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3) > v75)
                v75 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3)) >= 0x249249249249249)
                v76 = 0x492492492492492;
              else
                v76 = v75;
              v77 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v76);
              v79 = &v77[56 * v74];
              *(_QWORD *)v79 = 9;
              *((_DWORD *)v79 + 2) = 0;
              v80 = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v79 + 1) = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v79 + 2) = v80;
              *((double *)v79 + 6) = v70;
              v82 = valuePtr;
              v81 = v118;
              v83 = v79;
              if (*(_QWORD *)&v118 != *(_QWORD *)&valuePtr)
              {
                do
                {
                  v84 = *(_OWORD *)(*(_QWORD *)&v81 - 56);
                  v85 = *(_OWORD *)(*(_QWORD *)&v81 - 40);
                  v86 = *(_OWORD *)(*(_QWORD *)&v81 - 24);
                  *((_QWORD *)v83 - 1) = *(_QWORD *)(*(_QWORD *)&v81 - 8);
                  *(_OWORD *)(v83 - 24) = v86;
                  *(_OWORD *)(v83 - 40) = v85;
                  *(_OWORD *)(v83 - 56) = v84;
                  v83 -= 56;
                  *(_QWORD *)&v81 -= 56;
                }
                while (*(_QWORD *)&v81 != *(_QWORD *)&v82);
                v81 = v82;
              }
              v73 = v79 + 56;
              valuePtr = *(double *)&v83;
              *(_QWORD *)&v118 = v79 + 56;
              v119 = &v77[56 * v78];
              if (v81 != 0.0)
                operator delete(*(void **)&v81);
            }
            else
            {
              **(_QWORD **)&v118 = 9;
              *(_DWORD *)(*(_QWORD *)&v71 + 8) = 0;
              v72 = *MEMORY[0x1E0C9D538];
              *(_OWORD *)(*(_QWORD *)&v71 + 16) = *MEMORY[0x1E0C9D538];
              *(_OWORD *)(*(_QWORD *)&v71 + 32) = v72;
              *(double *)(*(_QWORD *)&v71 + 48) = v70;
              v73 = (_QWORD *)(*(_QWORD *)&v71 + 56);
            }
            v118 = *(double *)&v73;
            if (*(_QWORD *)v15)
            {
              v87 = 240 * *(_QWORD *)v15;
              v88 = (float *)(*((_QWORD *)v15 + 1) + 48);
              v89 = 1.0;
              do
              {
                v90 = *v88;
                v88 += 60;
                v89 = v89 * v90;
                v87 -= 240;
              }
              while (v87);
            }
            else
            {
              v89 = 1.0;
            }
            v91 = *(double *)(*((_QWORD *)a1 + 3) + 440) * logf(v89);
            if (v73 >= (_QWORD *)v119)
            {
              v94 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v73 - *(_QWORD *)&valuePtr) >> 3);
              v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) > 0x492492492492492)
LABEL_88:
                abort();
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3) > v95)
                v95 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v119[-*(_QWORD *)&valuePtr] >> 3)) >= 0x249249249249249)
                v96 = 0x492492492492492;
              else
                v96 = v95;
              v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::LanguageModelLexiconGroup>>(v96);
              v99 = &v97[56 * v94];
              *(_QWORD *)v99 = 10;
              *((_DWORD *)v99 + 2) = 0;
              v100 = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v99 + 1) = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v99 + 2) = v100;
              *((double *)v99 + 6) = v91;
              v102 = valuePtr;
              v101 = v118;
              v103 = v99;
              if (*(_QWORD *)&v118 != *(_QWORD *)&valuePtr)
              {
                do
                {
                  v104 = *(_OWORD *)(*(_QWORD *)&v101 - 56);
                  v105 = *(_OWORD *)(*(_QWORD *)&v101 - 40);
                  v106 = *(_OWORD *)(*(_QWORD *)&v101 - 24);
                  *((_QWORD *)v103 - 1) = *(_QWORD *)(*(_QWORD *)&v101 - 8);
                  *(_OWORD *)(v103 - 24) = v106;
                  *(_OWORD *)(v103 - 40) = v105;
                  *(_OWORD *)(v103 - 56) = v104;
                  v103 -= 56;
                  *(_QWORD *)&v101 -= 56;
                }
                while (*(_QWORD *)&v101 != *(_QWORD *)&v102);
                v101 = v102;
              }
              v93 = v99 + 56;
              valuePtr = *(double *)&v103;
              *(_QWORD *)&v118 = v99 + 56;
              v119 = &v97[56 * v98];
              if (v101 != 0.0)
                operator delete(*(void **)&v101);
            }
            else
            {
              *v73 = 10;
              *((_DWORD *)v73 + 2) = 0;
              v92 = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v73 + 1) = *MEMORY[0x1E0C9D538];
              *((_OWORD *)v73 + 2) = v92;
              *((double *)v73 + 6) = v91;
              v93 = v73 + 7;
            }
            v118 = *(double *)&v93;
            v116 = 0;
            TI::CP::ScoreComponentSerializer::serialize_score_components((uint64_t *)&valuePtr, (double *)&v116, &value);
            v107 = value;
            CFDictionarySetValue(Mutable, CFSTR("components"), value);
            if (v107)
              CFRelease(v107);
            if (valuePtr != 0.0)
            {
              v118 = valuePtr;
              operator delete(*(void **)&valuePtr);
            }
          }
          KB::Candidate::add_sources_info(v15, CFSTR("favonius"), Mutable);
          *(_DWORD *)(v12 + 1000 * v13 + 992) = 2;
          if (Mutable)
            CFRelease(Mutable);
        }
      }
      v12 = *a4;
      LODWORD(v8) = v8 + 1;
      v13 = v8;
    }
    while (0x1CAC083126E978D5 * ((a4[1] - *a4) >> 3) > (unint64_t)v8);
  }
  result = (uint64_t)v112;
  v109 = v112 + 2;
  v110 = atomic_load(v112 + 2);
  if (v110 == 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v112 + 8))();
  do
    v111 = __ldaxr(v109);
  while (__stlxr(v111 - 1, v109));
  return result;
}

uint64_t KB::WordSuggestionPolicy::is_suggestible(KB::WordSuggestionPolicy *this, const KB::Word *a2, KB::String *a3)
{
  const KB::String *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  int v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;

  if ((*((_BYTE *)a2 + 106) & 0x80) != 0)
  {
    v7 = 0;
    if (!a3)
      return v7;
    v8 = "out-of-vocabulary";
LABEL_6:
    KB::String::append((unsigned __int16 *)a3, v8, 0xFFFFuLL);
    return v7;
  }
  if (KB::WordSuggestionPolicy::is_never_suggestible(this, a2, a3))
    return 0;
  v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 0x2040000) == 0x2000000)
  {
    if (!KB::count_letters_if_word(a2, v6))
    {
      v7 = 0;
      if (!a3)
        return v7;
      v8 = "user acquired word is not learnable";
      goto LABEL_6;
    }
    v9 = *((_DWORD *)a2 + 26);
    if ((v9 & 0x2000) == 0)
    {
      v7 = 0;
      if (!a3)
        return v7;
      v8 = "user acquired word that is not sufficiently learned";
      goto LABEL_6;
    }
  }
  if (((*((_DWORD *)this + 1) | 0x200) & v9) != 0)
    return 1;
  v7 = 1;
  if ((v9 & 0x12000) == 0)
  {
    v11 = *(_DWORD *)this & v9;
    if (v11)
    {
      if (v11 == 0x20000000)
      {
        if ((v9 & 0x20000000) != 0)
        {
          v12 = *((_QWORD *)a2 + 14);
          v13 = (v12 & *((_QWORD *)this + 2)) != 0 || v12 == 0;
          v14 = v13;
          v7 = !v14;
          if (a3)
          {
            if (v14)
            {
              v8 = "sensitivity category is prohibited";
              goto LABEL_6;
            }
          }
        }
      }
      else if ((v9 & 0x80020100) == 0 && !*((_QWORD *)a2 + 28))
      {
        v7 = 0;
        if (a3)
        {
          v8 = "suggest_if_learned under policy, but not sufficiently learned";
          goto LABEL_6;
        }
      }
    }
  }
  return v7;
}

BOOL KB::WordSuggestionPolicy::is_never_suggestible(KB::WordSuggestionPolicy *this, const KB::Word *a2, KB::String *a3)
{
  const char *v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;

  if ((*((_BYTE *)a2 + 107) & 0x40) != 0)
  {
    if (a3)
    {
      v6 = "word is blocklisted";
      goto LABEL_7;
    }
    return 1;
  }
  if (KB::Word::is_potentially_private(a2))
  {
    if (a3)
    {
      v6 = "word is not suggestible";
LABEL_7:
      KB::String::append((unsigned __int16 *)a3, v6, 0xFFFFuLL);
      return 1;
    }
    return 1;
  }
  v8 = *((_DWORD *)a2 + 26);
  if ((v8 & 0x10000) != 0)
  {
    v12 = *((_DWORD *)this + 3) & v8;
    if (v12 != 0x20000000)
    {
      result = v12 != 0;
      if (a3 && v12)
      {
        v6 = "user dictionary word is nosuggest under policy";
        goto LABEL_7;
      }
      return result;
    }
    if ((v8 & 0x20000000) != 0)
    {
      v13 = *((_QWORD *)a2 + 14);
      result = (v13 & *((_QWORD *)this + 2)) != 0 || v13 == 0;
      if (a3 && result)
      {
        v6 = "user dictionary word is sensitive only with prohibited category";
        goto LABEL_7;
      }
      return result;
    }
    return 0;
  }
  v9 = *((_DWORD *)this + 2) & v8;
  if (v9 != 0x20000000)
  {
    result = v9 != 0;
    if (a3 && v9)
    {
      v6 = "word is nosuggest under policy";
      goto LABEL_7;
    }
    return result;
  }
  if ((v8 & 0x20000000) == 0)
    return 0;
  v10 = *((_QWORD *)a2 + 14);
  result = (v10 & *((_QWORD *)this + 2)) != 0 || v10 == 0;
  if (a3 && result)
  {
    v6 = "sensitive only with prohibited category";
    goto LABEL_7;
  }
  return result;
}

uint64_t KB::WordSuggestionPolicy::standard_policy@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char *v3;
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;

  if ((a2 & 1) != 0)
  {
    if (result >= 7)
      return result;
    v3 = (char *)&unk_1DA90FA08 + 4 * result;
    v4 = dword_1DA90FA24[result];
    v5 = &unk_1DA90FA60;
  }
  else
  {
    if (result >= 7)
      return result;
    v3 = (char *)&unk_1DA90F9B0 + 4 * result;
    v4 = 402653186;
    v5 = &unk_1DA90F9D0;
  }
  v6 = dword_1DA90FA40[(int)result];
  v7 = v5[(int)result];
  *(_QWORD *)a3 = *(unsigned int *)v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  return result;
}

uint64_t IsNumeric(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "characterIsMember:", a1);

  return v3;
}

uint64_t KB::CandidateFilterParameters::CandidateFilterParameters(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  const __CFString *v8;
  const __CFString *v9;
  int v10;

  *(_OWORD *)a1 = xmmword_1DA911010;
  *(_QWORD *)(a1 + 16) = 0x3DCCCCCD3F3DBAFDLL;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 40) = 0x600000008;
  *(_DWORD *)(a1 + 48) = 4;
  *(_OWORD *)(a1 + 52) = xmmword_1DA911020;
  *(_QWORD *)(a1 + 68) = 0x3F8CCCCD00000003;
  *(_BYTE *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 1047904911;
  *(_QWORD *)(a1 + 84) = 0x7FFFFFFFLL;
  if (a6)
    *(_DWORD *)(a1 + 4) = 1066192077;
  if (a2)
  {
    v8 = (const __CFString *)MEMORY[0x1DF0A08CC](a2);
    if (v8)
    {
      v9 = v8;
      if (CFStringHasPrefix(v8, CFSTR("fr")))
      {
        v10 = 1066611507;
LABEL_7:
        *(_DWORD *)(a1 + 4) = v10;
        goto LABEL_10;
      }
      if (CFStringHasPrefix(v9, CFSTR("it")))
      {
        *(_DWORD *)(a1 + 12) = 1071225242;
        goto LABEL_10;
      }
      if (CFStringHasPrefix(v9, CFSTR("ar")))
      {
        v10 = 1108082688;
        goto LABEL_7;
      }
      if (CFStringHasPrefix(v9, CFSTR("de")))
        *(_BYTE *)(a1 + 76) = 1;
    }
  }
LABEL_10:
  *(_DWORD *)(a1 + 88) = a4;
  return a1;
}

float KB::CandidateFilterParameters::init_for_language_model(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 72);
  *(float *)(a1 + 4) = result;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_FR(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1066611507;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_IT(uint64_t result)
{
  *(_DWORD *)(result + 12) = 1071225242;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_AR(uint64_t result)
{
  *(_DWORD *)(result + 4) = 1108082688;
  return result;
}

uint64_t KB::CandidateFilterParameters::init_locale_DE(uint64_t result)
{
  *(_BYTE *)(result + 76) = 1;
  return result;
}

uint64_t KB::CandidateFilterParameters::min_stem_length_for_predicting_num_letters(KB::CandidateFilterParameters *this, int a2)
{
  char *v2;

  v2 = (char *)this + 48;
  if (a2 == 2)
    v2 = (char *)this + 44;
  if (a2 <= 1)
    v2 = (char *)this + 40;
  return *(unsigned int *)v2;
}

double SetupInputClassifierTable(void)
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  double result;

  memset_pattern16(UkcMap, &unk_1DA911250, 0x84uLL);
  memset_pattern16(&UkcMap[33], &unk_1DA911260, 0x37CuLL);
  v0 = 0;
  qword_1F0284040 = 0;
  xmmword_1F0284020 = 0u;
  unk_1F0284030 = 0u;
  xmmword_1F0284000 = 0u;
  unk_1F0284010 = 0u;
  xmmword_1F0283FE0 = 0u;
  unk_1F0283FF0 = 0u;
  xmmword_1F0283F60 = 0u;
  unk_1F0283F70 = 0u;
  xmmword_1F0283F80 = 0u;
  unk_1F0283F90 = 0u;
  v1 = 192;
  xmmword_1F0283FA0 = 0u;
  unk_1F0283FB0 = 0u;
  qword_1F0283FC0 = 0;
  do
  {
    UkcMap[v1] = 0;
    v1 = *(_DWORD *)((char *)&AscVnLexiList + v0 + 8);
    v0 += 8;
  }
  while (v0 != 256);
  v2 = 0;
  DWORD1(xmmword_1F0284000) = 2;
  DWORD1(xmmword_1F0283F80) = 2;
  dword_1F0283FF4 = 2;
  dword_1F0283F74 = 2;
  dword_1F0284038 = 2;
  dword_1F0283FB8 = 2;
  do
    UkcMap[WordBreakSyms[v2++]] = 1;
  while (v2 != 30);
  memset(IsoVnLexiMap, 255, 0x400uLL);
  v3 = 0;
  v4 = 192;
  do
  {
    IsoVnLexiMap[v4] = *(_DWORD *)((char *)&AscVnLexiList + v3 + 4);
    v4 = *(_DWORD *)((char *)&AscVnLexiList + v3 + 8);
    v3 += 8;
  }
  while (v3 != 256);
  qword_1F0284440 = 0xB9000000ADLL;
  xmmword_1F0284400 = xmmword_1DA90FB20;
  unk_1F0284410 = unk_1DA90FB30;
  xmmword_1F0284420 = xmmword_1DA90FB40;
  unk_1F0284430 = unk_1DA90FB50;
  xmmword_1F02843E0 = AZLexiLower;
  unk_1F02843F0 = unk_1DA90FB10;
  qword_1F02843C0 = 0xB8000000ACLL;
  xmmword_1F0284360 = AZLexiUpper;
  *(_OWORD *)algn_1F0284370 = unk_1DA90FAA8;
  *(_QWORD *)&result = 0x560000004ALL;
  xmmword_1F02843A0 = xmmword_1DA90FAD8;
  unk_1F02843B0 = unk_1DA90FAE8;
  xmmword_1F0284380 = xmmword_1DA90FAB8;
  unk_1F0284390 = unk_1DA90FAC8;
  return result;
}

void UkInputProcessor::init(UkInputProcessor *this)
{
  if (!ClassifierTableInitialized)
  {
    SetupInputClassifierTable();
    ClassifierTableInitialized = 1;
  }
  *(_DWORD *)this = 0;
  UkInputProcessor::useBuiltIn((uint64_t)this, "Z");
}

void UkInputProcessor::useBuiltIn(uint64_t a1, _BYTE *a2)
{
  unsigned int v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  __darwin_ct_rune_t v8;
  uint64_t v9;

  memset_pattern16((void *)(a1 + 4), &unk_1DA911270, 0x400uLL);
  v4 = *a2;
  if (*a2)
  {
    v5 = a2 + 4;
    v6 = MEMORY[0x1E0C80978];
    do
    {
      *(_DWORD *)(a1 + 4 * v4 + 4) = *(_DWORD *)v5;
      if (*(int *)v5 <= 19)
      {
        if ((v4 & 0x80) != 0)
        {
          if (__maskrune(v4, 0x1000uLL))
          {
LABEL_6:
            v7 = *(_DWORD *)v5;
            v8 = __toupper(*(v5 - 4));
            goto LABEL_13;
          }
        }
        else if ((*(_DWORD *)(v6 + 4 * v4 + 60) & 0x1000) != 0)
        {
          goto LABEL_6;
        }
        v9 = *(v5 - 4);
        if (((char)*(v5 - 4) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x8000) == 0)
            goto LABEL_14;
LABEL_12:
          v7 = *(_DWORD *)v5;
          v8 = __tolower(*(v5 - 4));
LABEL_13:
          *(_DWORD *)(a1 + 4 * v8 + 4) = v7;
          goto LABEL_14;
        }
        if (__maskrune(v9, 0x8000uLL))
          goto LABEL_12;
      }
LABEL_14:
      v4 = v5[4];
      v5 += 8;
    }
    while (v4);
  }
}

uint64_t UkInputProcessor::setIM(unsigned int *a1, unsigned int a2)
{
  char *v2;

  *a1 = a2;
  if (a2 >= 4)
  {
    *a1 = 0;
    v2 = "Z";
  }
  else
  {
    v2 = (&off_1EA0FEF08)[a2];
  }
  UkInputProcessor::useBuiltIn((uint64_t)a1, v2);
  return 1;
}

uint64_t UkInputProcessor::setIM(UkInputProcessor *this, int *a2)
{
  uint64_t v2;
  char *v3;

  v2 = 0;
  *(_DWORD *)this = 4;
  v3 = (char *)this + 4;
  do
  {
    *(_DWORD *)&v3[v2 * 4] = a2[v2];
    ++v2;
  }
  while (v2 != 256);
  return 1;
}

void UkResetKeyMap(int *a1)
{
  memset_pattern16(a1, &unk_1DA911270, 0x400uLL);
}

uint64_t UkInputProcessor::keyCodeToEvent(uint64_t result, unsigned int a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  a3[3] = a2;
  if (a2 >= 0x100)
  {
    *a3 = 19;
    if ((int)a2 < 256)
    {
      v5 = IsoVnLexiMap[a2];
      a3[2] = v5;
      if (v5 != -1)
      {
        v6 = 0;
LABEL_9:
        a3[1] = v6;
        return result;
      }
    }
    else
    {
      a3[2] = -1;
    }
    v6 = 2;
    goto LABEL_9;
  }
  v3 = UkcMap[a2];
  v4 = *(_DWORD *)(result + 4 * a2 + 4);
  *a3 = v4;
  a3[1] = v3;
  if ((v4 - 10) > 5)
  {
    v7 = __OFSUB__(v4, 20);
    v8 = v4 - 20;
    if (v8 < 0 == v7)
    {
      a3[2] = v8;
      *(_QWORD *)a3 = 17;
      return result;
    }
  }
  else
  {
    a3[4] = v4 - 10;
  }
  a3[2] = IsoVnLexiMap[a2];
  return result;
}

void UkInputProcessor::keyCodeToSymbol(uint64_t a1, int a2, _DWORD *a3)
{
  int v3;
  int v4;

  a3[3] = a2;
  *a3 = 19;
  if (a2 < 256)
  {
    v4 = IsoVnLexiMap[a2];
    a3[2] = v4;
    if (a2 < 0x100)
    {
      v3 = UkcMap[a2];
      goto LABEL_8;
    }
    if (v4 != -1)
    {
      v3 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    a3[2] = -1;
  }
  v3 = 2;
LABEL_8:
  a3[1] = v3;
}

uint64_t UkInputProcessor::getCharType(UkInputProcessor *this, int a2)
{
  if (a2 < 0x100)
    return UkcMap[a2];
  if (a2 > 255 || IsoVnLexiMap[a2] == -1)
    return 2;
  return 0;
}

uint64_t UkInputProcessor::getKeyMap(uint64_t this, int *a2)
{
  uint64_t i;

  for (i = 0; i != 256; ++i)
    a2[i] = *(_DWORD *)(this + 4 + i * 4);
  return this;
}

KB::ByteString *KB::ByteString::ByteString(KB::ByteString *this, const KB::ByteString *a2, char a3)
{
  size_t v5;
  char *v6;
  char *v7;

  v5 = *(unsigned __int16 *)a2;
  if (v5 <= 0xE)
    v6 = (char *)a2 + 2;
  else
    v6 = (char *)*((_QWORD *)a2 + 1);
  *(_WORD *)this = v5 + 1;
  if ((unsigned __int16)(v5 + 1) < 0xFu)
  {
    v7 = (char *)this + 2;
    if ((_DWORD)v5)
      memmove((char *)this + 2, v6, v5);
  }
  else
  {
    v7 = (char *)operator new[]();
    *((_QWORD *)this + 1) = v7;
    memcpy(v7, v6, v5);
  }
  v7[v5] = a3;
  return this;
}

char *KB::ByteString::initialize(KB::ByteString *this, unsigned __int16 a2, const unsigned __int8 *__src, size_t __len)
{
  char *v7;

  *(_WORD *)this = a2;
  if (a2 < 0xFu)
  {
    v7 = (char *)this + 2;
    if (__len)
      memmove((char *)this + 2, __src, __len);
  }
  else
  {
    v7 = (char *)operator new[]();
    *((_QWORD *)this + 1) = v7;
    memcpy(v7, __src, __len);
  }
  return &v7[__len];
}

KB::ByteString *KB::ByteString::ByteString(KB::ByteString *this, const KB::ByteString *a2, const unsigned __int8 *a3, size_t a4)
{
  size_t v7;
  char *v8;
  char *v9;

  v7 = *(unsigned __int16 *)a2;
  if (v7 <= 0xE)
    v8 = (char *)a2 + 2;
  else
    v8 = (char *)*((_QWORD *)a2 + 1);
  *(_WORD *)this = v7 + a4;
  if ((unsigned __int16)(v7 + a4) < 0xFu)
  {
    v9 = (char *)this + 2;
    if ((_DWORD)v7)
      memmove((char *)this + 2, v8, v7);
  }
  else
  {
    v9 = (char *)operator new[]();
    *((_QWORD *)this + 1) = v9;
    memcpy(v9, v8, v7);
  }
  if (a4)
    memmove(&v9[v7], a3, a4);
  return this;
}

__n128 KB::ByteString::copy(KB::ByteString *this, const void **a2)
{
  unint64_t v4;
  void *v5;
  __n128 result;

  v4 = *(unsigned __int16 *)a2;
  if (v4 < 0xF)
  {
    result = *(__n128 *)a2;
    *(_OWORD *)this = *(_OWORD *)a2;
  }
  else
  {
    *(_WORD *)this = v4;
    v5 = (void *)operator new[]();
    *((_QWORD *)this + 1) = v5;
    memcpy(v5, a2[1], *(unsigned __int16 *)this);
  }
  return result;
}

_OWORD *KB::ByteString::move(_OWORD *result, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2;
  *result = *(_OWORD *)a2;
  if (v2 >= 0xF)
    *a2 = 0;
  return result;
}

unsigned __int16 *KB::ByteString::operator=(unsigned __int16 *a1, const void **a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  if (*a1 >= 0xFu)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      MEMORY[0x1DF0A212C](v4, 0x1000C8077774924);
  }
  v5 = *(unsigned __int16 *)a2;
  if (v5 < 0xF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *a1 = v5;
    v6 = (void *)operator new[]();
    *((_QWORD *)a1 + 1) = v6;
    memcpy(v6, a2[1], *a1);
  }
  return a1;
}

unsigned __int16 *KB::ByteString::operator=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned int v5;

  if (*a1 >= 0xFu)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      MEMORY[0x1DF0A212C](v4, 0x1000C8077774924);
  }
  v5 = *a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (v5 >= 0xF)
    *a2 = 0;
  return a1;
}

BOOL KB::ByteString::starts_with(KB::ByteString *this, const ByteString *a2)
{
  size_t var0;
  unsigned int v3;
  const void *var1;
  char *v6;

  var0 = a2->var0.var0.var0;
  v3 = *(unsigned __int16 *)this;
  if (var0 > v3)
    return 0;
  var1 = a2->var0.var0.var1;
  if (var0 <= 0xE)
    var1 = a2->var0.var1.var1;
  if (v3 < 0xF)
    v6 = (char *)this + 2;
  else
    v6 = (char *)*((_QWORD *)this + 1);
  return memcmp(var1, v6, var0) == 0;
}

uint64_t KB::ByteString::compare(KB::ByteString *this, const KB::ByteString *a2)
{
  if ((KB::operator<((unsigned __int16 *)this, (unsigned __int16 *)a2) & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return !KB::operator==((unsigned __int16 *)this, (unsigned __int16 *)a2);
}

uint64_t KB::operator<(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t i;
  unsigned int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  if (v2 <= 0xE)
    v3 = (unsigned __int8 *)(a1 + 1);
  v4 = *a2;
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (v4 <= 0xE)
    v5 = (unsigned __int8 *)(a2 + 1);
  if (!*a2)
    return 0;
  for (i = v4 - 1; v2; --i)
  {
    v7 = *v3;
    v8 = *v5;
    if (v7 < v8)
      break;
    ++v3;
    ++v5;
    --v2;
    if (v8 < v7 || i == 0)
      return 0;
  }
  return 1;
}

BOOL KB::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  size_t v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  if ((_DWORD)v2 != *a2)
    return 0;
  if (v2 <= 0xE)
    v3 = a1 + 1;
  else
    v3 = (const void *)*((_QWORD *)a1 + 1);
  if (v2 <= 0xE)
    v4 = a2 + 1;
  else
    v4 = (const void *)*((_QWORD *)a2 + 1);
  return memcmp(v3, v4, v2) == 0;
}

id _createBinaryStringForHuffmanCode(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  void *i;
  const __CFString *v4;
  void *v5;

  v1 = objc_msgSend(a1, "unsignedLongLongValue");
  v2 = vcvtpd_u64_f64(log2((double)v1));
  for (i = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", v2); v2; --v2)
  {
    if ((v1 & 1) != 0)
      v4 = CFSTR("1");
    else
      v4 = CFSTR("0");
    objc_msgSend(i, "insertString:atIndex:", v4, 0);
    v1 >>= 1;
  }
  v5 = (void *)objc_msgSend(i, "copy");

  return v5;
}

uint64_t __Block_byref_object_copy__5278(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5279(uint64_t a1)
{

}

void TI::RejectionsDatabase::keyboard_db_file(std::string *a1@<X8>)
{
  uint64_t v3;
  const __CFString *v4;
  CFTypeID TypeID;
  char *CStringPtr;
  CFIndex Length;
  std::string *p_b;
  __int128 v9;
  int v10;
  std::string *p_maxBufLen;
  std::string::size_type size;
  applesauce::CF *exception;
  std::string maxBufLen;
  std::string __b;
  _DWORD v16[2];
  CFRange v17;
  CFRange v18;

  v3 = TI_KB_USER_DIRECTORY();
  if (!v3 || (v4 = (const __CFString *)v3, TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v4)))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(v4, 0x8000100u);
  if (CStringPtr)
  {
    std::string::basic_string[abi:nn180100]<0>(&__b, CStringPtr);
  }
  else
  {
    Length = CFStringGetLength(v4);
    maxBufLen.__r_.__value_.__r.__words[0] = 0;
    v17.location = 0;
    v17.length = Length;
    CFStringGetBytes(v4, v17, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&maxBufLen);
    std::string::basic_string[abi:nn180100](&__b, maxBufLen.__r_.__value_.__r.__words[0], 0);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    v18.location = 0;
    v18.length = Length;
    CFStringGetBytes(v4, v18, 0x8000100u, 0, 0, (UInt8 *)p_b, (CFIndex)maxBufLen.__r_.__value_.__l.__data_, (CFIndex *)&maxBufLen);
  }
  v9 = *(_OWORD *)&__b.__r_.__value_.__l.__data_;
  v16[0] = __b.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v16 + 3) = *(_DWORD *)((char *)&__b.__r_.__value_.__r.__words[2] + 3);
  v10 = SHIBYTE(__b.__r_.__value_.__r.__words[2]);
  memset(&maxBufLen, 0, sizeof(maxBufLen));
  std::string::append[abi:nn180100]<char const*,0>(&maxBufLen, (std::string *)"AutocorrectionRejections.db", (std::string *)"");
  if (v10 < 0)
  {
    std::string::__init_copy_ctor_external(&__b, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
  }
  else
  {
    *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v9;
    LODWORD(__b.__r_.__value_.__r.__words[2]) = v16[0];
    *(_DWORD *)((char *)&__b.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v16 + 3);
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = v10;
  }
  if (std::__fs::filesystem::path::__root_directory((const std::__fs::filesystem::path *)&maxBufLen).__size_)
  {
    std::string::operator=(&__b, &maxBufLen);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&__b).__size_)
      std::string::push_back(&__b, 47);
    if ((maxBufLen.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_maxBufLen = &maxBufLen;
    else
      p_maxBufLen = (std::string *)maxBufLen.__r_.__value_.__r.__words[0];
    if ((maxBufLen.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(maxBufLen.__r_.__value_.__r.__words[2]);
    else
      size = maxBufLen.__r_.__value_.__l.__size_;
    std::string::append(&__b, (const std::string::value_type *)p_maxBufLen, size);
  }
  if (SHIBYTE(maxBufLen.__r_.__value_.__r.__words[2]) < 0)
    operator delete(maxBufLen.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = __b;
    if ((v10 & 0x80000000) == 0)
      return;
    goto LABEL_30;
  }
  std::string::__init_copy_ctor_external(a1, __b.__r_.__value_.__l.__data_, __b.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v10 & 0x80000000) == 0)
      return;
    goto LABEL_30;
  }
  operator delete(__b.__r_.__value_.__l.__data_);
  if (v10 < 0)
LABEL_30:
    operator delete((void *)v9);
}

void sub_1DA7D5004()
{
  void *v0;

}

std::string *std::string::append[abi:nn180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  std::string::value_type *p_p;
  std::string *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string::value_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  void *__p;
  std::string::size_type v24;
  int64_t v25;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v13 = this;
    if ((v6 & 0x80) != 0)
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v14 = (char *)v13 + size;
    do
    {
      v15 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    *v14 = 0;
    v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v7 > 0x16)
    {
      v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v17 = v7 | 7;
      v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      v24 = v7;
      v25 = v18 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      v19 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    *p_p = 0;
    if (v25 >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if (v25 >= 0)
      v21 = HIBYTE(v25);
    else
      v21 = v24;
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
  }
  return this;
}

void applesauce::CF::convert_error(applesauce::CF *this)
{
  JUMPOUT(0x1DF0A1F28);
}

uint64_t TI::get_database_size(TI *this, sqlite3 *a2)
{
  uint64_t v2;
  sqlite3_stmt *ppStmt;

  ppStmt = 0;
  v2 = 0xFFFFFFFFLL;
  if (!sqlite3_prepare_v2(this, "SELECT page_count * page_size AS size FROM pragma_page_count(), pragma_page_size()", -1, &ppStmt, 0))
  {
    if (sqlite3_step(ppStmt) == 100)
      v2 = sqlite3_column_int(ppStmt, 0);
    sqlite3_finalize(ppStmt);
  }
  return v2;
}

uint64_t TI::RejectionsDatabase::initialize(TI::RejectionsDatabase *this, const std::__fs::filesystem::path *__s, int a3, const __CFString *a4)
{
  std::string *v8;
  int v9;
  size_t v10;
  std::string *v11;
  const char *v12;
  uint64_t result;
  CFIndex v14;
  CFURLRef v15;
  std::error_code *v16;
  sqlite3 *v17;
  int v18;
  NSObject *v19;
  const char *v20;
  std::string *p_error;
  uint32_t v22;
  sqlite3 *v23;
  char *file_path_for_bundle_resource;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::ios_base *v29;
  std::string *v30;
  int v31;
  sqlite3 *ppDb;
  char *errmsg;
  std::string error;
  _BYTE ppStmt[418];
  _QWORD v36[21];

  v36[19] = *MEMORY[0x1E0C80C00];
  v8 = (std::string *)((char *)this + 8);
  v9 = *((char *)this + 31);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)this + 31);
  else
    v10 = *((_QWORD *)this + 2);
  if (v10 == strlen((const char *)__s))
  {
    v11 = v9 >= 0 ? v8 : (std::string *)v8->__r_.__value_.__r.__words[0];
    if (!memcmp(v11, __s, v10))
      return 1;
  }
  if ((TI_DEVICE_UNLOCKED_SINCE_BOOT() & 1) == 0)
  {
LABEL_13:
    result = 0;
    *(_QWORD *)this = 0;
    return result;
  }
  ppDb = 0;
  if (sqlite3_open_v2((const char *)__s, &ppDb, 3145734, 0))
  {
    v12 = sqlite3_errmsg(ppDb);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      sqlite3_close(ppDb);
      goto LABEL_13;
    }
    *(_DWORD *)ppStmt = 136315394;
    *(_QWORD *)&ppStmt[4] = __s;
    *(_WORD *)&ppStmt[12] = 2080;
    *(_QWORD *)&ppStmt[14] = v12;
    v19 = MEMORY[0x1E0C81028];
    v20 = "RejectionsDatabase: Error creating/opening database at: %s, %s";
    p_error = (std::string *)ppStmt;
    v22 = 22;
LABEL_25:
    _os_log_error_impl(&dword_1DA6F2000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)p_error, v22);
    goto LABEL_12;
  }
  if ((TI_IS_FILE_CLASS_C((uint64_t)__s) & 1) == 0 && !TI_SET_PROTECTION_CLASS_C((uint64_t)__s))
    goto LABEL_12;
  v14 = strlen((const char *)__s);
  v15 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__s, v14, 0);
  error.__r_.__value_.__r.__words[0] = 0;
  if (!CFURLSetResourcePropertyForKey(v15, (CFStringRef)*MEMORY[0x1E0C9B4E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], (CFErrorRef *)&error))
  {
    remove(__s, v16);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)ppStmt = 136315138;
      *(_QWORD *)&ppStmt[4] = __s;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "RejectionsDatabase: failed to set backup exclusion for database at: %s", ppStmt, 0xCu);
    }
    CFRelease(error.__r_.__value_.__l.__data_);
    CFRelease(v15);
    goto LABEL_12;
  }
  CFRelease(v15);
  v17 = ppDb;
  *(_QWORD *)ppStmt = 0;
  if (sqlite3_prepare_v2(ppDb, "SELECT value FROM properties WHERE key = 'version'", -1, (sqlite3_stmt **)ppStmt, 0))
  {
    v18 = 0;
  }
  else
  {
    if (sqlite3_step(*(sqlite3_stmt **)ppStmt) == 100)
      v18 = sqlite3_column_int(*(sqlite3_stmt **)ppStmt, 0);
    else
      v18 = 0;
    sqlite3_finalize(*(sqlite3_stmt **)ppStmt);
  }
  if (v18 != a3)
  {
    file_path_for_bundle_resource = get_file_path_for_bundle_resource(a4, CFSTR("sql"));
    if (!file_path_for_bundle_resource)
      goto LABEL_12;
    v25 = file_path_for_bundle_resource;
    v26 = MEMORY[0x1E0DE4FA8] + 64;
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
    v28 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
    v36[0] = MEMORY[0x1E0DE4FA8] + 64;
    *(_QWORD *)ppStmt = v27;
    *(_QWORD *)&ppStmt[*(_QWORD *)(v27 - 24)] = v28;
    *(_QWORD *)&ppStmt[8] = 0;
    v29 = (std::ios_base *)&ppStmt[*(_QWORD *)(*(_QWORD *)ppStmt - 24)];
    std::ios_base::init(v29, &ppStmt[16]);
    v29[1].__vftable = 0;
    v29[1].__fmtflags_ = -1;
    *(_QWORD *)ppStmt = MEMORY[0x1E0DE4FA8] + 24;
    v36[0] = v26;
    MEMORY[0x1DF0A1F94](&ppStmt[16]);
    if (!std::filebuf::open())
      std::ios_base::clear((std::ios_base *)&ppStmt[*(_QWORD *)(*(_QWORD *)ppStmt - 24)], *(_DWORD *)&ppStmt[*(_QWORD *)(*(_QWORD *)ppStmt - 24) + 32] | 4);
    std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&error, *(_QWORD **)&ppStmt[*(_QWORD *)(*(_QWORD *)ppStmt - 24) + 40]);
    errmsg = 0;
    v30 = (error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &error
        : (std::string *)error.__r_.__value_.__r.__words[0];
    v31 = sqlite3_exec(v17, (const char *)v30, 0, 0, &errmsg);
    free(v25);
    if (SHIBYTE(error.__r_.__value_.__r.__words[2]) < 0)
      operator delete(error.__r_.__value_.__l.__data_);
    *(_QWORD *)ppStmt = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)&ppStmt[*(_QWORD *)(*(_QWORD *)ppStmt - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1DF0A1FA0](&ppStmt[16]);
    std::istream::~istream();
    MEMORY[0x1DF0A20F0](v36);
    if (v31)
      goto LABEL_12;
    *(_QWORD *)ppStmt = 0;
    if (sqlite3_prepare_v2(v17, "INSERT OR REPLACE INTO properties (key, value) VALUES ('version', ?)", -1, (sqlite3_stmt **)ppStmt, 0))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      LOWORD(error.__r_.__value_.__l.__data_) = 0;
      v19 = MEMORY[0x1E0C81028];
      v20 = "RejectionsDatabase: Unable to update library version.";
      p_error = &error;
      v22 = 2;
      goto LABEL_25;
    }
    sqlite3_bind_int(*(sqlite3_stmt **)ppStmt, 1, a3);
    sqlite3_step(*(sqlite3_stmt **)ppStmt);
    sqlite3_finalize(*(sqlite3_stmt **)ppStmt);
  }
  v23 = ppDb;
  *(_QWORD *)this = ppDb;
  if (v23)
  {
    std::string::__assign_external(v8, (const std::string::value_type *)__s);
    return 1;
  }
  return 0;
}

void std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *this, _QWORD *a2)
{
  std::string::value_type *v4;
  std::string::value_type v5;
  uint64_t v6;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  while (a2 && (a2[3] != a2[4] || (*(unsigned int (**)(_QWORD *))(*a2 + 72))(a2) != -1))
  {
    v4 = (std::string::value_type *)a2[3];
    if (v4 == (std::string::value_type *)a2[4])
      v5 = (*(uint64_t (**)(_QWORD *))(*a2 + 72))(a2);
    else
      v5 = *v4;
    std::string::push_back(this, v5);
    v6 = a2[3];
    if (v6 == a2[4])
      (*(void (**)(_QWORD *))(*a2 + 80))(a2);
    else
      a2[3] = v6 + 1;
  }
}

void TI::RejectionsDatabase::~RejectionsDatabase(TI::RejectionsDatabase *this)
{
  int v2;
  int v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = sqlite3_close(*(sqlite3 **)this);
  if (v2)
  {
    v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v3;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "RejectionsDatabase: Error closing database: %d", (uint8_t *)v4, 8u);
    }
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL TI::RejectionsDatabase::insert_rejection(sqlite3 **a1, sqlite3 *a2, const char *a3, int a4, int a5, double a6)
{
  TI *v11;
  const char *v12;
  _BOOL8 v13;
  BOOL v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  sqlite3_stmt *v19;
  char *v20;
  const char *v21;
  sqlite3_stmt *v22;
  int v23;
  sqlite3_stmt *v24;
  int v25;
  sqlite3_stmt *v26;
  int v27;
  sqlite3_stmt *pStmt[2];
  char v30;
  void *v31;
  uint64_t v32;
  char v33;
  void *__p;
  char v35;
  uint64_t v36;

  v11 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0))
    return 0;
  v14 = a5 == 0;
  if (a5)
    v15 = "inline_completion_rejections";
  else
    v15 = "rejections";
  if (v14)
    v16 = 10;
  else
    v16 = 28;
  TI::insert_default_row(v11, a2, a3, v15, v12);
  if (a4)
    v17 = "hard";
  else
    v17 = "soft";
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"UPDATE ", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" SET ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejections = ", 14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejections + 1,", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" last_", 6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)v17, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)"_rejection = :last_rejection_timestamp ", 39);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v31, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(pStmt, (uint64_t)&v32);
  v31 = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&v31 + *((_QWORD *)v31 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v32 = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](&v36);
  v18 = v30;
  v19 = pStmt[0];
  if (v30 >= 0)
    v20 = (char *)pStmt;
  else
    v20 = (char *)pStmt[0];
  std::string::basic_string[abi:nn180100]<0>(&v31, v20);
  if (v18 < 0)
    operator delete(v19);
  pStmt[0] = 0;
  if (v33 >= 0)
    v21 = (const char *)&v31;
  else
    v21 = (const char *)v31;
  if (sqlite3_prepare_v2(v11, v21, -1, pStmt, 0))
    goto LABEL_24;
  v22 = pStmt[0];
  v23 = sqlite3_bind_parameter_index(pStmt[0], ":typed");
  sqlite3_bind_text(v22, v23, (const char *)a2, -1, 0);
  v24 = pStmt[0];
  v25 = sqlite3_bind_parameter_index(pStmt[0], ":correction");
  sqlite3_bind_text(v24, v25, a3, -1, 0);
  v26 = pStmt[0];
  v27 = sqlite3_bind_parameter_index(pStmt[0], ":last_rejection_timestamp");
  sqlite3_bind_double(v26, v27, a6);
  LODWORD(v26) = sqlite3_step(pStmt[0]);
  sqlite3_finalize(pStmt[0]);
  if ((_DWORD)v26 == 101)
LABEL_24:
    v13 = sqlite3_exec(v11, "COMMIT", 0, 0, 0) == 0;
  else
    v13 = 0;
  if (v33 < 0)
    operator delete(v31);
  return v13;
}

void TI::insert_default_row(TI *this, sqlite3 *a2, const char *a3, const char *a4, const char *a5)
{
  size_t v9;
  size_t v10;
  std::string *v11;
  const void *p_p;
  char *v13;
  std::string *v14;
  void *v15;
  unsigned __int8 v16;
  void **v17;
  sqlite3_stmt *v18;
  int v19;
  sqlite3_stmt *v20;
  int v21;
  std::string v22;
  void *__p;
  _BYTE v24[15];
  unsigned __int8 v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__p, "INSERT OR IGNORE INTO ");
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = *(_QWORD *)v24;
  v10 = strlen(a4);
  v11 = &v22;
  std::string::basic_string[abi:nn180100]((uint64_t)&v22, v9 + v10);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if ((v25 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    memmove(v11, p_p, v9);
  }
  v13 = (char *)v11 + v9;
  if (v10)
    memmove(v13, a4, v10);
  v13[v10] = 0;
  v14 = std::string::append(&v22, " (typed, correction) VALUES (:typed, :correction)", 0x31uLL);
  v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v26[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p);
  __p = v15;
  *(_QWORD *)v24 = v26[0];
  *(_QWORD *)&v24[7] = *(_QWORD *)((char *)v26 + 7);
  v25 = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    v16 = v25;
    v15 = __p;
  }
  v22.__r_.__value_.__r.__words[0] = 0;
  if ((v16 & 0x80u) == 0)
    v17 = &__p;
  else
    v17 = (void **)v15;
  if (!sqlite3_prepare_v2(this, (const char *)v17, -1, (sqlite3_stmt **)&v22, 0))
  {
    v18 = (sqlite3_stmt *)v22.__r_.__value_.__r.__words[0];
    v19 = sqlite3_bind_parameter_index((sqlite3_stmt *)v22.__r_.__value_.__l.__data_, ":typed");
    sqlite3_bind_text(v18, v19, (const char *)a2, -1, 0);
    v20 = (sqlite3_stmt *)v22.__r_.__value_.__r.__words[0];
    v21 = sqlite3_bind_parameter_index((sqlite3_stmt *)v22.__r_.__value_.__l.__data_, ":correction");
    sqlite3_bind_text(v20, v21, a3, -1, 0);
    sqlite3_step((sqlite3_stmt *)v22.__r_.__value_.__l.__data_);
    sqlite3_finalize((sqlite3_stmt *)v22.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0)
    operator delete(__p);
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

BOOL TI::RejectionsDatabase::insert_inline_completion_rejection(sqlite3 **a1, sqlite3 *a2, const char *a3, int a4, double a5)
{
  TI *v9;
  const char *v10;
  _BOOL8 v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  sqlite3_stmt *v20;
  char *v21;
  const char *v22;
  sqlite3_stmt *v23;
  int v24;
  sqlite3_stmt *v25;
  int v26;
  sqlite3_stmt *v27;
  int v28;
  sqlite3_stmt *pStmt[2];
  char v31;
  void *v32;
  uint64_t v33;
  char v34;
  void *__p;
  char v36;
  uint64_t v37;

  v9 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0))
    return 0;
  TI::insert_default_row(v9, a2, a3, "inline_completion_rejections", v10);
  if (a4)
    v12 = "hard";
  else
    v12 = "soft";
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"UPDATE ", 7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"inline_completion_rejections", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)" SET ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v12, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"_rejections = ", 14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)v12, 4);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v32, (uint64_t)"_rejections + ", 14);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" last_", 6);
  v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v12, 4);
  v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"_rejection = :last_rejection_timestamp,", 39);
  v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" typed = :typed ", 16);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)" WHERE correction = :correction", 31);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(pStmt, (uint64_t)&v33);
  v32 = (void *)*MEMORY[0x1E0DE4F60];
  *(void **)((char *)&v32 + *((_QWORD *)v32 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v33 = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](&v37);
  v19 = v31;
  v20 = pStmt[0];
  if (v31 >= 0)
    v21 = (char *)pStmt;
  else
    v21 = (char *)pStmt[0];
  std::string::basic_string[abi:nn180100]<0>(&v32, v21);
  if (v19 < 0)
    operator delete(v20);
  pStmt[0] = 0;
  if (v34 >= 0)
    v22 = (const char *)&v32;
  else
    v22 = (const char *)v32;
  if (sqlite3_prepare_v2(v9, v22, -1, pStmt, 0))
    goto LABEL_18;
  v23 = pStmt[0];
  v24 = sqlite3_bind_parameter_index(pStmt[0], ":typed");
  sqlite3_bind_text(v23, v24, (const char *)a2, -1, 0);
  v25 = pStmt[0];
  v26 = sqlite3_bind_parameter_index(pStmt[0], ":correction");
  sqlite3_bind_text(v25, v26, a3, -1, 0);
  v27 = pStmt[0];
  v28 = sqlite3_bind_parameter_index(pStmt[0], ":last_rejection_timestamp");
  sqlite3_bind_double(v27, v28, a5);
  LODWORD(v27) = sqlite3_step(pStmt[0]);
  sqlite3_finalize(pStmt[0]);
  if ((_DWORD)v27 == 101)
LABEL_18:
    v11 = sqlite3_exec(v9, "COMMIT", 0, 0, 0) == 0;
  else
    v11 = 0;
  if (v34 < 0)
    operator delete(v32);
  return v11;
}

void TI::RejectionsDatabase::get_inline_completion_rejections(sqlite3 **this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  sqlite3 *v5;
  void **v6;
  sqlite3_stmt *v7;
  int v8;
  int v9;
  sqlite3_stmt *v10;
  const unsigned __int8 *v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::string v16;
  void *__dst[2];
  char v18;
  sqlite3_stmt *ppStmt;
  __int128 v20;
  __int128 v21;
  std::string v22;
  void *__p;
  char v24;
  uint64_t v25;

  v5 = *this;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 56) = 0;
  ppStmt = 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v20);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"SELECT typed, performed_count, soft_rejections, hard_rejections, last_soft_rejection, last_hard_rejection ", 106);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"FROM ", 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)"inline_completion_rejections", 28);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v20, (uint64_t)" WHERE correction = :correction", 31);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)&v20 + 8);
  *(_QWORD *)&v20 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v20 + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v20 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](&v25);
  if (v18 >= 0)
    v6 = __dst;
  else
    v6 = (void **)__dst[0];
  if (!sqlite3_prepare_v2(v5, (const char *)v6, -1, &ppStmt, 0))
  {
    v7 = ppStmt;
    v8 = sqlite3_bind_parameter_index(ppStmt, ":correction");
    sqlite3_bind_text(v7, v8, a2, -1, 0);
    v9 = sqlite3_step(ppStmt);
    v10 = ppStmt;
    if (v9 == 100)
    {
      memset(&v16, 0, sizeof(v16));
      v11 = sqlite3_column_text(ppStmt, 0);
      std::string::__assign_external(&v16, (const std::string::value_type *)v11);
      LODWORD(v14) = sqlite3_column_int(ppStmt, 1);
      DWORD1(v14) = sqlite3_column_int(ppStmt, 2);
      DWORD2(v14) = sqlite3_column_int(ppStmt, 3);
      *(_QWORD *)&v15 = sqlite3_column_double(ppStmt, 4);
      *((_QWORD *)&v15 + 1) = sqlite3_column_double(ppStmt, 5);
      v20 = v14;
      v21 = v15;
      v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v22, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v22 = v16;
      }
      v13 = v21;
      *(_OWORD *)a3 = v20;
      *(_OWORD *)(a3 + 16) = v13;
      *(std::string *)(a3 + 32) = v22;
      memset(&v22, 0, sizeof(v22));
      *(_BYTE *)(a3 + 56) = 1;
      if (v12 < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v10 = ppStmt;
    }
    sqlite3_finalize(v10);
  }
  if (v18 < 0)
    operator delete(__dst[0]);
}

uint64_t TI::RejectionsDatabase::insert_acceptance(sqlite3 **a1, const char *a2, const char *a3, int a4, int a5)
{
  sqlite3 *v8;
  _BOOL8 v9;
  const char *v10;
  uint64_t v11;
  void **v12;
  sqlite3_stmt *v13;
  int v14;
  sqlite3_stmt *v15;
  int v16;
  int v17;
  void *v19[2];
  char v20;
  sqlite3_stmt *ppStmt;
  _QWORD v22[10];
  char v23;
  uint64_t v24;

  if (!a4)
    return 1;
  v8 = *a1;
  if (sqlite3_exec(*a1, "BEGIN TRANSACTION", 0, 0, 0))
    return 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&ppStmt);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)"UPDATE ", 7);
  if (a5)
    v10 = "inline_completion_rejections";
  else
    v10 = "rejections";
  if (a5)
    v11 = 28;
  else
    v11 = 10;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" SET performed_count = performed_count + 1, ", 44);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" hard_rejections = 0 ", 21);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&ppStmt, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(v19, (uint64_t)v22);
  ppStmt = (sqlite3_stmt *)*MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v22[-1] + *((_QWORD *)ppStmt - 3)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](&v24);
  ppStmt = 0;
  if (v20 >= 0)
    v12 = v19;
  else
    v12 = (void **)v19[0];
  if (sqlite3_prepare_v2(v8, (const char *)v12, -1, &ppStmt, 0))
    goto LABEL_18;
  v13 = ppStmt;
  v14 = sqlite3_bind_parameter_index(ppStmt, ":typed");
  sqlite3_bind_text(v13, v14, a2, -1, 0);
  v15 = ppStmt;
  v16 = sqlite3_bind_parameter_index(ppStmt, ":correction");
  sqlite3_bind_text(v15, v16, a3, -1, 0);
  v17 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  if (v17 == 101)
LABEL_18:
    v9 = sqlite3_exec(v8, "COMMIT", 0, 0, 0) == 0;
  else
    v9 = 0;
  if (v20 < 0)
    operator delete(v19[0]);
  return v9;
}

void TI::RejectionsDatabase::get_rejections(sqlite3 **a1@<X0>, const char *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sqlite3 *v9;
  const char *v10;
  uint64_t v11;
  void **v12;
  sqlite3_stmt *v13;
  int v14;
  sqlite3_stmt *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  void *__dst[2];
  char v23;
  sqlite3_stmt *ppStmt;
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;

  v9 = *a1;
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 32) = 0;
  ppStmt = 0;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"SELECT performed_count, soft_rejections, hard_rejections, last_soft_rejection, last_hard_rejection ", 99);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)"FROM ", 5);
  if (a4)
    v10 = "inline_completion_rejections";
  else
    v10 = "rejections";
  if (a4)
    v11 = 28;
  else
    v11 = 10;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v25, (uint64_t)" WHERE typed = :typed AND correction = :correction", 50);
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)v26);
  v25 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v26[-1] + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v26[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](&v28);
  if (v23 >= 0)
    v12 = __dst;
  else
    v12 = (void **)__dst[0];
  if (!sqlite3_prepare_v2(v9, (const char *)v12, -1, &ppStmt, 0))
  {
    v13 = ppStmt;
    v14 = sqlite3_bind_parameter_index(ppStmt, ":typed");
    sqlite3_bind_text(v13, v14, a2, -1, 0);
    v15 = ppStmt;
    v16 = sqlite3_bind_parameter_index(ppStmt, ":correction");
    sqlite3_bind_text(v15, v16, a3, -1, 0);
    if (sqlite3_step(ppStmt) == 100)
    {
      v17 = sqlite3_column_int(ppStmt, 0);
      v18 = sqlite3_column_int(ppStmt, 1);
      v19 = sqlite3_column_int(ppStmt, 2);
      v20 = sqlite3_column_double(ppStmt, 3);
      v21 = sqlite3_column_double(ppStmt, 4);
      *(_DWORD *)a5 = v17;
      *(_DWORD *)(a5 + 4) = v18;
      *(_DWORD *)(a5 + 8) = v19;
      *(double *)(a5 + 16) = v20;
      *(double *)(a5 + 24) = v21;
      *(_BYTE *)(a5 + 32) = 1;
    }
    sqlite3_finalize(ppStmt);
  }
  if (v23 < 0)
    operator delete(__dst[0]);
}

uint64_t TI::RejectionsDatabase::prune(TI **this, sqlite3 *a2)
{
  int v2;
  _BOOL4 v3;
  TI *v4;
  unsigned int v5;
  int database_size;
  _BOOL4 v7;
  char v8;
  uint64_t v9;
  char v10;
  const char *v11;
  sqlite3_stmt *ppStmt;
  uint8_t buf[4];
  unsigned int v15;
  _QWORD v16[3];

  v2 = (int)a2;
  v16[2] = *MEMORY[0x1E0C80C00];
  v3 = 1;
  v4 = *this;
  v5 = 1;
  while (1)
  {
    database_size = TI::get_database_size(v4, a2);
    v7 = database_size < v2;
    if (database_size < v2)
      return v7 & v3;
    v8 = 0;
    v9 = 0;
    v16[0] = "DELETE FROM rejections WHERE (soft_rejections + hard_rejections < ?)";
    v16[1] = "DELETE FROM inline_completion_rejections WHERE (soft_rejections + hard_rejections < ?)";
    do
    {
      v10 = v8;
      v11 = (const char *)v16[v9];
      ppStmt = 0;
      if (sqlite3_prepare_v2(v4, v11, -1, &ppStmt, 0))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v15 = v5;
          _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "RejectionsDatabase: Unable to delete rows with counts below %d.", buf, 8u);
        }
        goto LABEL_11;
      }
      v8 = 1;
      sqlite3_bind_int(ppStmt, 1, v5);
      sqlite3_step(ppStmt);
      sqlite3_finalize(ppStmt);
      v9 = 1;
    }
    while ((v10 & 1) == 0);
    if (!sqlite3_exec(v4, "VACUUM", 0, 0, 0))
    {
      v3 = v5++ < 0x63;
      if (v5 != 100)
        continue;
    }
LABEL_11:
    v7 = 0;
    return v7 & v3;
  }
}

BOOL TI::RejectionsDatabase::clear(sqlite3 **this)
{
  sqlite3 *v1;
  int v2;

  v1 = *this;
  v2 = sqlite3_exec(*this, "DELETE FROM rejections", 0, 0, 0);
  return (v2 | sqlite3_exec(v1, "DELETE FROM inline_completion_rejections", 0, 0, 0)) == 0;
}

BOOL TI::RejectionsDatabase::blocked_by_hard_rejections(uint64_t a1, double a2)
{
  double v2;
  int v3;

  v2 = a2 / 60.0 / 60.0 / 24.0;
  return v2 <= 180.0 && (v3 = *(_DWORD *)(a1 + 8)) != 0 && log(v2) / 1.38629436 < (double)(v3 - 1);
}

void TI::RejectionsDatabase::soft_add_accepted(uint64_t a1, const std::string *a2, const std::string *a3, double a4)
{
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  int v10;
  double *v11;
  uint64_t i;
  double v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  TI::memory_for_db_path((unint64_t)&v20, a1 + 8, 0);
  v7 = v20;
  v8 = (std::mutex *)(v20 + 400);
  std::mutex::lock((std::mutex *)(v20 + 400));
  v9 = *(unsigned int *)(v7 + 192);
  if ((int)v9 >= 3)
  {
    v10 = 0;
    v11 = (double *)(v7 + 112);
    for (i = 1; i != v9; ++i)
    {
      v13 = *v11;
      v11 += 8;
      if (v13 < *(double *)(v7 + ((uint64_t)v10 << 6) + 48))
        v10 = i;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 192) = v9 + 1;
    v10 = v9;
  }
  v14 = v7 + ((uint64_t)v10 << 6);
  std::string::operator=((std::string *)v14, a2);
  std::string::operator=((std::string *)(v14 + 24), a3);
  *(_DWORD *)(v14 + 56) = 0;
  *(double *)(v14 + 48) = a4;
  v15 = *(unsigned int *)(v7 + 392);
  if ((int)v15 >= 1)
  {
    v16 = (_DWORD *)(v7 + 256);
    do
    {
      ++*v16;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
  std::mutex::unlock(v8);
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void TI::memory_for_db_path(unint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t i;
  unint64_t v28;
  _QWORD *v29;
  std::string *v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  int8x8_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD **v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  _QWORD *j;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  char v69;

  if ((v6 & 1) == 0
  {
    TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = 0u;
    *(_OWORD *)&qword_1EDAEE110 = 0u;
    dword_1EDAEE120 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::shared_ptr<TI::ShortMemory>>::~unordered_map[abi:nn180100], &TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map, &dword_1DA6F2000);
  }
  if ((v7 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex, &dword_1DA6F2000);
  }
  std::mutex::lock(&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex);
  v8 = *(char *)(a2 + 23);
  v9 = *(const std::string::value_type **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if (v8 >= 0)
    v11 = (uint64_t *)a2;
  else
    v11 = *(uint64_t **)a2;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v11, v12);
  v14 = v13;
  v15 = *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
  if (a3 == 1)
  {
    if (*((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
    {
      v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                           + 8));
      v16.i16[0] = vaddlv_u8(v16);
      v17 = v16.u32[0];
      if (v16.u32[0] > 1uLL)
      {
        v18 = v13;
        if (v13 >= *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
          v18 = v13 % *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
      }
      else
      {
        v18 = (*((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1) & v13;
      }
      v21 = TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
      v22 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v18);
      if (v22)
      {
        v23 = *v22;
        if (*v22)
        {
          v24 = *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1;
          do
          {
            v25 = *(_QWORD *)(v23 + 8);
            if (v25 == v14)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)(v23 + 16), (unsigned __int8 *)a2))
              {
                if (v17 > 1)
                {
                  if (v14 >= v15)
                    v14 %= v15;
                }
                else
                {
                  v14 &= v24;
                }
                v60 = *(uint64_t **)(v21 + 8 * v14);
                do
                {
                  v61 = v60;
                  v60 = (uint64_t *)*v60;
                }
                while (v60 != (uint64_t *)v23);
                if (v61 == &qword_1EDAEE110)
                  goto LABEL_141;
                v62 = v61[1];
                if (v17 > 1)
                {
                  if (v62 >= v15)
                    v62 %= v15;
                }
                else
                {
                  v62 &= v24;
                }
                if (v62 != v14)
                {
LABEL_141:
                  if (!*(_QWORD *)v23)
                    goto LABEL_142;
                  v63 = *(_QWORD *)(*(_QWORD *)v23 + 8);
                  if (v17 > 1)
                  {
                    if (v63 >= v15)
                      v63 %= v15;
                  }
                  else
                  {
                    v63 &= v24;
                  }
                  if (v63 != v14)
LABEL_142:
                    *(_QWORD *)(v21 + 8 * v14) = 0;
                }
                v64 = *(_QWORD *)v23;
                if (*(_QWORD *)v23)
                {
                  v65 = *(_QWORD *)(v64 + 8);
                  if (v17 > 1)
                  {
                    if (v65 >= v15)
                      v65 %= v15;
                  }
                  else
                  {
                    v65 &= v24;
                  }
                  if (v65 != v14)
                  {
                    *(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v65) = v61;
                    v64 = *(_QWORD *)v23;
                  }
                }
                *v61 = v64;
                *(_QWORD *)v23 = 0;
                --qword_1EDAEE118;
                v67 = (uint64_t *)v23;
                v68 = &qword_1EDAEE110;
                v69 = 1;
                std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v67);
                break;
              }
            }
            else
            {
              if (v17 > 1)
              {
                if (v25 >= v15)
                  v25 %= v15;
              }
              else
              {
                v25 &= v24;
              }
              if (v25 != v18)
                break;
            }
            v23 = *(_QWORD *)v23;
          }
          while (v23);
        }
      }
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_152;
  }
  v66 = (_QWORD *)a1;
  if (*((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
  {
    v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                         + 8));
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.u32[0];
    if (v19.u32[0] > 1uLL)
    {
      a1 = v13;
      if (v13 >= *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
        a1 = v13 % *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
    }
    else
    {
      a1 = (*((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) - 1) & v13;
    }
    v26 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1);
    if (v26)
    {
      for (i = *v26; i; i = *(_QWORD *)i)
      {
        v28 = *(_QWORD *)(i + 8);
        if (v28 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)(i + 16), (unsigned __int8 *)a2))
          {
            v58 = v66;
            goto LABEL_104;
          }
        }
        else
        {
          if (v20 > 1)
          {
            if (v28 >= v15)
              v28 %= v15;
          }
          else
          {
            v28 &= v15 - 1;
          }
          if (v28 != a1)
            break;
        }
      }
    }
  }
  v29 = operator new(0x38uLL);
  v67 = v29;
  v68 = &qword_1EDAEE110;
  *v29 = 0;
  v29[1] = v14;
  v30 = (std::string *)(v29 + 2);
  if (v8 < 0)
  {
    std::string::__init_copy_ctor_external(v30, v9, v10);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v29[4] = *(_QWORD *)(a2 + 16);
  }
  v29[5] = 0;
  v29[6] = 0;
  v69 = 1;
  v31 = (float)(unint64_t)(qword_1EDAEE118 + 1);
  if (!v15 || (float)(*(float *)&dword_1EDAEE120 * (float)v15) < v31)
  {
    v32 = 1;
    if (v15 >= 3)
      v32 = (v15 & (v15 - 1)) != 0;
    v33 = v32 | (2 * v15);
    v34 = vcvtps_u32_f32(v31 / *(float *)&dword_1EDAEE120);
    if (v33 <= v34)
      prime = (int8x8_t)v34;
    else
      prime = (int8x8_t)v33;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v15 = *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
      goto LABEL_60;
    if (*(_QWORD *)&prime < *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1))
    {
      v42 = vcvtps_u32_f32((float)(unint64_t)qword_1EDAEE118 / *(float *)&dword_1EDAEE120);
      if (*((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) < 3uLL
        || (v43 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map
                                                 + 8)),
            v43.i16[0] = vaddlv_u8(v43),
            v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (*(_QWORD *)&prime <= v42)
        prime = (int8x8_t)v42;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1);
      }
      else
      {
        if (prime)
        {
LABEL_60:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v36 = operator new(8 * *(_QWORD *)&prime);
          v37 = (void *)TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
          *(_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = v36;
          if (v37)
            operator delete(v37);
          v38 = 0;
          *((int8x8_t *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) = prime;
          do
            *(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v38++) = 0;
          while (*(_QWORD *)&prime != v38);
          v39 = (_QWORD **)qword_1EDAEE110;
          if (qword_1EDAEE110)
          {
            v40 = *(_QWORD *)(qword_1EDAEE110 + 8);
            v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(_QWORD *)&prime)
                v40 %= *(_QWORD *)&prime;
            }
            else
            {
              v40 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v40) = &qword_1EDAEE110;
            for (j = *v39; j; v40 = v46)
            {
              v46 = j[1];
              if (v41.u32[0] > 1uLL)
              {
                if (v46 >= *(_QWORD *)&prime)
                  v46 %= *(_QWORD *)&prime;
              }
              else
              {
                v46 &= *(_QWORD *)&prime - 1;
              }
              if (v46 != v40)
              {
                if (!*(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v46))
                {
                  *(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v46) = v39;
                  goto LABEL_85;
                }
                *v39 = (_QWORD *)*j;
                *j = **(_QWORD **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v46);
                **(_QWORD **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v46) = j;
                j = v39;
              }
              v46 = v40;
LABEL_85:
              v39 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_89;
        }
        v59 = (void *)TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map;
        *(_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map = 0;
        if (v59)
          operator delete(v59);
        v15 = 0;
        *((_QWORD *)&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 1) = 0;
      }
    }
LABEL_89:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        a1 = v14 % v15;
      else
        a1 = v14;
    }
    else
    {
      a1 = (v15 - 1) & v14;
    }
  }
  v47 = *(uint64_t **)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1);
  i = (uint64_t)v67;
  if (v47)
  {
    *v67 = *v47;
    v58 = v66;
  }
  else
  {
    *v67 = qword_1EDAEE110;
    qword_1EDAEE110 = i;
    *(_QWORD *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * a1) = &qword_1EDAEE110;
    v58 = v66;
    if (!*(_QWORD *)i)
      goto LABEL_103;
    v48 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v48 >= v15)
        v48 %= v15;
    }
    else
    {
      v48 &= v15 - 1;
    }
    v47 = (uint64_t *)(TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map + 8 * v48);
  }
  *v47 = i;
LABEL_103:
  v67 = 0;
  ++qword_1EDAEE118;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v67);
LABEL_104:
  v49 = *(_QWORD *)(i + 40);
  if (!v49)
  {
    v50 = (char *)operator new(0x1E8uLL);
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = 0;
    *(_QWORD *)v50 = &off_1EA0FEFB8;
    *(_OWORD *)(v50 + 40) = 0u;
    *(_OWORD *)(v50 + 56) = 0u;
    *(_OWORD *)(v50 + 72) = 0u;
    *(_OWORD *)(v50 + 88) = 0u;
    *(_OWORD *)(v50 + 104) = 0u;
    *(_OWORD *)(v50 + 120) = 0u;
    *(_OWORD *)(v50 + 136) = 0u;
    *(_OWORD *)(v50 + 152) = 0u;
    *(_OWORD *)(v50 + 168) = 0u;
    *(_OWORD *)(v50 + 184) = 0u;
    *(_OWORD *)(v50 + 200) = 0u;
    *(_OWORD *)(v50 + 216) = 0u;
    *(_OWORD *)(v50 + 232) = 0u;
    *(_OWORD *)(v50 + 248) = 0u;
    *(_OWORD *)(v50 + 24) = 0u;
    *(_OWORD *)(v50 + 264) = 0u;
    *(_OWORD *)(v50 + 280) = 0u;
    *(_OWORD *)(v50 + 296) = 0u;
    *(_OWORD *)(v50 + 312) = 0u;
    *(_OWORD *)(v50 + 328) = 0u;
    *(_OWORD *)(v50 + 344) = 0u;
    *(_OWORD *)(v50 + 360) = 0u;
    *(_OWORD *)(v50 + 376) = 0u;
    *(_OWORD *)(v50 + 392) = 0u;
    *(_OWORD *)(v50 + 408) = 0u;
    *((_QWORD *)v50 + 53) = 850045863;
    *((_OWORD *)v50 + 27) = 0u;
    *((_OWORD *)v50 + 28) = 0u;
    *((_OWORD *)v50 + 29) = 0u;
    *((_QWORD *)v50 + 60) = 0;
    *(_QWORD *)&v51 = v50 + 24;
    *((_QWORD *)&v51 + 1) = v50;
    v52 = *(std::__shared_weak_count **)(i + 48);
    *(_OWORD *)(i + 40) = v51;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(p_shared_owners);
      while (__stlxr(v54 - 1, p_shared_owners));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v49 = *(_QWORD *)(i + 40);
  }
  *v58 = v49;
  v55 = *(_QWORD *)(i + 48);
  v58[1] = v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
LABEL_152:
  std::mutex::unlock(&TI::memory_for_db_path(std::string const&,TI::MemoryAccessMode)::map_mutex);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<TI::ShortMemory>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__shared_ptr_emplace<TI::ShortMemory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::ShortMemory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FEFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

void std::__shared_ptr_emplace<TI::ShortMemory>::__on_zero_shared(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;

  std::mutex::~mutex((std::mutex *)(a1 + 424));
  for (i = 0; i != -192; i -= 64)
  {
    v3 = a1 + i;
    if (*(char *)(a1 + i + 399) < 0)
      operator delete(*(void **)(v3 + 376));
    if (*(char *)(v3 + 375) < 0)
      operator delete(*(void **)(v3 + 352));
  }
  for (j = 0; j != -192; j -= 64)
  {
    v5 = a1 + j;
    if (*(char *)(a1 + j + 199) < 0)
      operator delete(*(void **)(v5 + 176));
    if (*(char *)(v5 + 175) < 0)
      operator delete(*(void **)(v5 + 152));
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<TI::ShortMemory>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::shared_ptr<TI::ShortMemory>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void TI::RejectionsDatabase::soft_add_deleted(uint64_t a1, const std::string *a2, double a3)
{
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double *v10;
  uint64_t i;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  std::string::size_type size;
  const std::string *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  const void **v23;
  const std::string *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x1E0C80C00];
  TI::memory_for_db_path((unint64_t)&v43, a1 + 8, 0);
  v5 = v43;
  v6 = (std::mutex *)(v43 + 400);
  std::mutex::lock((std::mutex *)(v43 + 400));
  v7 = v5 + 200;
  v8 = *(unsigned int *)(v5 + 392);
  if ((int)v8 >= 3)
  {
    v9 = 0;
    v10 = (double *)(v5 + 312);
    for (i = 1; i != v8; ++i)
    {
      v12 = *v10;
      v10 += 8;
      if (v12 < *(double *)(v7 + ((uint64_t)v9 << 6) + 48))
        v9 = i;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 392) = v8 + 1;
    v9 = v8;
  }
  v13 = v7 + ((uint64_t)v9 << 6);
  std::string::operator=((std::string *)(v13 + 24), a2);
  *(_DWORD *)(v13 + 56) = 0;
  *(double *)(v13 + 48) = a3;
  v14 = *(unsigned int *)(v5 + 192);
  if ((int)v14 < 1)
  {
LABEL_26:
    std::string::operator=((std::string *)v13, a2);
    goto LABEL_28;
  }
  v15 = 0;
  v16 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if ((v16 & 0x80u) == 0)
    v18 = a2;
  else
    v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  while (1)
  {
    v19 = v5 + (v15 << 6);
    v20 = *(unsigned __int8 *)(v19 + 47);
    v21 = *(_QWORD *)(v19 + 32);
    if ((v20 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v19 + 47);
    else
      v22 = *(_QWORD *)(v19 + 32);
    if (v22 != size)
      goto LABEL_25;
    v23 = (const void **)(v19 + 24);
    if ((v20 & 0x80) != 0)
      break;
    if (!(_DWORD)v20)
      goto LABEL_27;
    v24 = v18;
    while (*(unsigned __int8 *)v23 == v24->__r_.__value_.__s.__data_[0])
    {
      v23 = (const void **)((char *)v23 + 1);
      v24 = (const std::string *)((char *)v24 + 1);
      if (!--v20)
        goto LABEL_27;
    }
LABEL_25:
    if (++v15 == v14)
      goto LABEL_26;
  }
  if (memcmp(*v23, v18, v21))
    goto LABEL_25;
LABEL_27:
  std::string::operator=((std::string *)v13, (const std::string *)(v5 + (v15 << 6)));
  v25 = *(int *)(v5 + 192);
  v26 = (uint64_t *)(v5 + ((uint64_t)(int)v15 << 6));
  v27 = *v26;
  v48[0] = v26[1];
  v28 = v5 + (v25 << 6);
  *(_QWORD *)((char *)v48 + 7) = *(uint64_t *)((char *)v26 + 15);
  v29 = *((_BYTE *)v26 + 23);
  *v26 = 0;
  v26[1] = 0;
  v30 = v26[3];
  v47[0] = v26[4];
  *(_QWORD *)((char *)v47 + 7) = *(uint64_t *)((char *)v26 + 39);
  v31 = *((_BYTE *)v26 + 47);
  v26[4] = 0;
  v26[5] = 0;
  v26[2] = 0;
  v26[3] = 0;
  v32 = v26[6];
  v46 = *((_DWORD *)v26 + 14);
  v45 = v32;
  v33 = *(_OWORD *)(v28 - 64);
  v26[2] = *(_QWORD *)(v28 - 48);
  *(_OWORD *)v26 = v33;
  *(_BYTE *)(v28 - 64) = 0;
  v34 = *(_QWORD *)(v28 - 24);
  v35 = *(_QWORD *)(v28 - 16);
  *(_OWORD *)(v26 + 3) = *(_OWORD *)(v28 - 40);
  v36 = *(_DWORD *)(v28 - 8);
  v26[5] = v34;
  v26[6] = v35;
  *(_BYTE *)(v28 - 17) = 0;
  *(_WORD *)(v28 - 41) = 0;
  *((_DWORD *)v26 + 14) = v36;
  v37 = v48[0];
  *(_QWORD *)(v28 - 49) = *(_QWORD *)((char *)v48 + 7);
  *(_QWORD *)(v28 - 64) = v27;
  *(_QWORD *)(v28 - 56) = v37;
  *(_BYTE *)(v28 - 41) = v29;
  LODWORD(v37) = *(_DWORD *)(v5 + 192) - 1;
  v38 = v47[0];
  *(_QWORD *)(v28 - 25) = *(_QWORD *)((char *)v47 + 7);
  *(_QWORD *)(v28 - 40) = v30;
  *(_QWORD *)(v28 - 32) = v38;
  *(_BYTE *)(v28 - 17) = v31;
  v39 = v45;
  *(_DWORD *)(v28 - 8) = v46;
  *(_QWORD *)(v28 - 16) = v39;
  *(_DWORD *)(v5 + 192) = v37;
LABEL_28:
  std::mutex::unlock(v6);
  v40 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

uint64_t TI::RejectionsDatabase::soft_should_block(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, int a4, double a5)
{
  uint64_t v8;
  std::mutex *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  const void **v28;
  uint64_t v29;
  size_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  size_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unsigned __int8 *__s2;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  std::mutex *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  size_t __n;
  uint64_t v66;
  unsigned __int8 *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  TI::memory_for_db_path((unint64_t)&v69, a1 + 8, 0);
  v8 = v69;
  v9 = (std::mutex *)(v69 + 400);
  std::mutex::lock((std::mutex *)(v69 + 400));
  v10 = *(int *)(v8 + 392);
  v11 = 126 - 2 * __clz(v10);
  if ((_DWORD)v10)
    v12 = v11;
  else
    v12 = 0;
  v66 = v8 + 200;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *,false>(v8 + 200, (__int128 *)(v8 + 200 + (v10 << 6)), v12, 1);
  v13 = *(int *)(v8 + 392);
  v62 = v9;
  if ((_DWORD)v13)
  {
    v14 = v13 - 1;
    v15 = (double *)(v8 + (v13 << 6) + 184);
    v16 = a4;
    v17 = v8 + 200;
    while (a5 - *v15 > 120.0)
    {
      *(_DWORD *)(v8 + 392) = v14--;
      v15 -= 8;
      LODWORD(v13) = v13 - 1;
      if (v14 == -1)
        goto LABEL_78;
    }
    if ((int)v13 >= 1)
    {
      v18 = 0;
      v19 = v13;
      v20 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      v21 = (char)v20 < 0;
      if ((char)v20 < 0)
        v20 = a3[1];
      v68 = v20;
      if (v21)
        v22 = *a3;
      else
        v22 = (unsigned __int8 *)a3;
      __s2 = v22;
      v23 = a2[23];
      v24 = *(unsigned __int8 **)a2;
      if ((v23 & 0x80u) == 0)
        v24 = a2;
      v60 = v24;
      v63 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v64 = (unsigned __int8 *)a2[23];
      if ((v23 & 0x80u) == 0)
        v25 = (unsigned __int8 *)a2[23];
      else
        v25 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v61 = v25;
      LODWORD(v26) = v13;
      while (1)
      {
        v26 = (v26 - 1);
        v27 = (unsigned __int8 *)(v17 + (v26 << 6));
        if (*((_DWORD *)v27 + 14) >= v16)
          goto LABEL_71;
        v28 = (const void **)(v27 + 24);
        v29 = v27[47];
        v30 = *((_QWORD *)v27 + 4);
        if ((v29 & 0x80u) == 0)
          v31 = (unsigned __int8 *)v27[47];
        else
          v31 = (unsigned __int8 *)*((_QWORD *)v27 + 4);
        if (v31 == v68)
        {
          if ((v29 & 0x80) != 0)
          {
            v35 = memcmp(*v28, __s2, *((_QWORD *)v27 + 4));
            v17 = v66;
            v16 = a4;
            if (!v35)
              goto LABEL_72;
          }
          else
          {
            if (!v27[47])
              goto LABEL_72;
            v32 = __s2;
            v33 = v27 + 24;
            v34 = v27[47];
            while (*v33 == *v32)
            {
              ++v33;
              ++v32;
              if (!--v34)
                goto LABEL_72;
            }
          }
        }
        __n = v30;
        v36 = v27[23];
        v37 = *((_QWORD *)v27 + 1);
        if ((v36 & 0x80u) == 0)
          v38 = (unsigned __int8 *)v27[23];
        else
          v38 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
        if (v38 == v31)
        {
          if ((v29 & 0x80u) == 0)
            v39 = v27 + 24;
          else
            v39 = (unsigned __int8 *)*v28;
          if ((v36 & 0x80) != 0)
          {
            v49 = memcmp(*(const void **)v27, v39, *((_QWORD *)v27 + 1));
            v17 = v66;
            v16 = a4;
            if (v49)
              v50 = v38 == v61;
            else
              v50 = 0;
            if (!v50)
              goto LABEL_62;
            goto LABEL_61;
          }
          if (!v27[23])
            goto LABEL_62;
          v40 = v36 - 1;
          v41 = v27;
          do
          {
            v43 = *v41++;
            v42 = v43;
            v45 = *v39++;
            v44 = v45;
          }
          while (v42 == v45 && v40-- != 0);
          if (v42 == v44)
            goto LABEL_62;
        }
        if (v38 != v61)
          goto LABEL_62;
        if ((v36 & 0x80) == 0)
        {
          if (!v27[23])
            goto LABEL_72;
          v47 = v60;
          while (*v27 == *v47)
          {
            ++v27;
            ++v47;
            v48 = 1;
            if (!--v36)
              goto LABEL_75;
          }
          goto LABEL_62;
        }
LABEL_61:
        v51 = memcmp(*(const void **)v27, v60, v37);
        v17 = v66;
        v16 = a4;
        if (!v51)
        {
LABEL_72:
          v48 = 1;
          goto LABEL_75;
        }
LABEL_62:
        v52 = v63;
        if ((char)v64 >= 0)
          v52 = v64;
        if (v31 != v52)
          goto LABEL_71;
        if ((v29 & 0x80) == 0)
        {
          if (!(_DWORD)v29)
            goto LABEL_74;
          v53 = v60;
          while (*(unsigned __int8 *)v28 == *v53)
          {
            v28 = (const void **)((char *)v28 + 1);
            ++v53;
            if (!--v29)
              goto LABEL_74;
          }
LABEL_71:
          v48 = v18;
          goto LABEL_75;
        }
        v54 = memcmp(*v28, v60, __n);
        v17 = v66;
        v16 = a4;
        v48 = v18;
        if (!v54)
LABEL_74:
          v48 = 0;
LABEL_75:
        v18 = v48;
        v21 = v19-- <= 1;
        if (v21)
          goto LABEL_79;
      }
    }
  }
LABEL_78:
  LOBYTE(v48) = 0;
LABEL_79:
  std::mutex::unlock(v62);
  v55 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return v48 & 1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *,false>(unint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  double v29;
  unint64_t v30;
  double v31;
  __int128 *v32;
  double v33;
  double v34;
  void **v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  void **v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  double v48;
  __int128 *v49;
  double v50;
  int v51;
  double v52;
  double v53;
  void **v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 *v58;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  double v64;
  uint64_t v65;
  char v66;
  void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  void **v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  __int128 v91;
  void **v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  void **v108;
  __int128 v109;
  uint64_t v110;
  double *v111;
  void **v112;
  void **v113;
  int v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  double v120;
  void *v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  __int128 v125;
  void **v126;
  unint64_t v127;
  __int128 v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v133;
  __int128 *v134;
  double v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  int v140;
  uint64_t v141;
  void **v142;
  uint64_t v143;
  void **v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v150;
  _QWORD *v151;
  void *v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  _BYTE v167[15];
  uint64_t v168;
  _BYTE v169[15];
  int v170;
  __int128 v171;
  _BYTE v172[15];
  _BYTE v173[15];
  _BYTE v174[15];
  _BYTE v175[15];
  _BYTE v176[15];
  _BYTE v177[15];
  __int128 v178;
  _BYTE v179[15];
  _BYTE v180[15];
  _BYTE v181[15];
  _BYTE v182[15];
  _BYTE v183[15];
  _BYTE v184[15];

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[15];
  _BYTE v15[15];

  v3 = *a1;
  *(_QWORD *)v15 = a1[1];
  *(_QWORD *)&v15[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v6 = a1 + 3;
  v5 = a1[3];
  *(_QWORD *)v14 = a1[4];
  *(_QWORD *)&v14[7] = *(uint64_t *)((char *)a1 + 39);
  v7 = *((_BYTE *)a1 + 47);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  v8 = a1 + 6;
  v13 = *((_DWORD *)a1 + 14);
  v12 = a1[6];
  v9 = *a2;
  a1[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  if (*((char *)a1 + 47) < 0)
    operator delete((void *)*v6);
  v10 = *(__int128 *)((char *)a2 + 24);
  v6[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)v6 = v10;
  v11 = *((_QWORD *)a2 + 6);
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 14);
  *v8 = v11;
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *((_QWORD *)a2 + 1) = *(_QWORD *)v15;
  *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v15[7];
  *((_BYTE *)a2 + 23) = v4;
  if (*((char *)a2 + 47) < 0)
    operator delete(*((void **)a2 + 3));
  *((_QWORD *)a2 + 3) = v5;
  *((_QWORD *)a2 + 4) = *(_QWORD *)v14;
  *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v14[7];
  *((_BYTE *)a2 + 47) = v7;
  *((_QWORD *)a2 + 6) = v12;
  *((_DWORD *)a2 + 14) = v13;
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  __int128 *v8;

  v5 = a1;
  v6 = *(double *)(a2 + 48);
  v7 = *(double *)(a3 + 48);
  if (v6 > *(double *)(a1 + 48))
  {
    if (v7 <= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (__int128 *)a2);
      if (*(double *)(a3 + 48) <= *(double *)(a2 + 48))
        return;
      a1 = a2;
    }
    v8 = (__int128 *)a3;
    goto LABEL_9;
  }
  if (v7 > v6)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (__int128 *)a3);
    if (*(double *)(a2 + 48) > *(double *)(v5 + 48))
    {
      a1 = v5;
      v8 = (__int128 *)a2;
LABEL_9:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, v8);
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a2, a3);
  if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a3, (__int128 *)a4);
    if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (__int128 *)a3);
      if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (__int128 *)a2);
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a2, a3, a4);
  if (*(double *)(a5 + 48) > *(double *)(a4 + 48))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a4, (__int128 *)a5);
    if (*(double *)(a4 + 48) > *(double *)(a3 + 48))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a3, (__int128 *)a4);
      if (*(double *)(a3 + 48) > *(double *)(a2 + 48))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a2, (__int128 *)a3);
        if (*(double *)(a2 + 48) > *(double *)(a1 + 48))
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (__int128 *)a2);
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  void **v24;
  uint64_t v25;
  char v26;
  void *v27;
  _BYTE v28[15];
  _BYTE v29[15];

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 16) > *(double *)(a1 + 48))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TI::ShortMemory::WordRecord *&,TI::ShortMemory::WordRecord *&>((uint64_t *)a1, (__int128 *)(a2 - 64));
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      v6 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,TI::ShortMemory::WordRecord *>(a1, a1 + 64, a1 + 128);
      v7 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(double *)(v7 + 48);
    if (v10 > *(double *)(v6 + 48))
    {
      v25 = *(_QWORD *)v7;
      *(_QWORD *)v29 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v29[7] = *(_QWORD *)(v7 + 15);
      v11 = *(_BYTE *)(v7 + 23);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v27 = *(void **)(v7 + 24);
      *(_QWORD *)v28 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)&v28[7] = *(_QWORD *)(v7 + 39);
      v26 = *(_BYTE *)(v7 + 47);
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v12 = v8;
      v13 = *(_DWORD *)(v7 + 56);
      while (1)
      {
        v14 = v12;
        v15 = a1 + v12;
        v16 = a1 + v12 + 192;
        if (*(char *)(a1 + v12 + 215) < 0)
          operator delete(*(void **)v16);
        *(_OWORD *)v16 = *(_OWORD *)(v15 + 128);
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 144);
        *(_BYTE *)(v15 + 151) = 0;
        *(_BYTE *)(v15 + 128) = 0;
        v17 = (void **)(v15 + 216);
        if (*(char *)(v15 + 239) < 0)
          operator delete(*v17);
        v18 = a1 + v14;
        *(_OWORD *)v17 = *(_OWORD *)(a1 + v14 + 152);
        v19 = *(_QWORD *)(a1 + v14 + 176);
        *(_QWORD *)(v15 + 232) = *(_QWORD *)(a1 + v14 + 168);
        *(_BYTE *)(v18 + 175) = 0;
        *(_BYTE *)(v18 + 152) = 0;
        *(_QWORD *)(v18 + 240) = v19;
        *(_DWORD *)(v18 + 248) = *(_DWORD *)(a1 + v14 + 184);
        if (v14 == -128)
          break;
        v20 = *(double *)(v18 + 112);
        v12 = v14 - 64;
        if (v10 <= v20)
        {
          v21 = a1 + v12 + 192;
          v22 = a1 + v14;
          v23 = (double *)(a1 + v14 + 176);
          v24 = (void **)(v22 + 152);
          goto LABEL_16;
        }
      }
      v23 = (double *)(v18 + 176);
      v24 = (void **)(v18 + 152);
      v21 = a1;
LABEL_16:
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = *(_QWORD *)v29;
      *(_QWORD *)(v21 + 15) = *(_QWORD *)&v29[7];
      *(_BYTE *)(v21 + 23) = v11;
      if (*(char *)(v21 + 47) < 0)
        operator delete(*v24);
      *v24 = v27;
      *(_QWORD *)(v21 + 32) = *(_QWORD *)v28;
      *(_QWORD *)(v21 + 39) = *(_QWORD *)&v28[7];
      *(_BYTE *)(v21 + 47) = v26;
      *v23 = v10;
      *(_DWORD *)(v21 + 56) = v13;
      if (++v9 == 8)
        return v7 + 64 == a2;
    }
    v6 = v7;
    v8 += 64;
    v7 += 64;
    if (v7 == a2)
      return 1;
  }
}

void TI::RejectionsDatabase::soft_clear_memory(TI::RejectionsDatabase *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  TI::memory_for_db_path((unint64_t)&v4, (uint64_t)this + 8, 1);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void KB::FilterLowQualityContinuousPathRetrocorrections::~FilterLowQualityContinuousPathRetrocorrections(KB::FilterLowQualityContinuousPathRetrocorrections *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterLowQualityContinuousPathRetrocorrections::filter_description(KB::FilterLowQualityContinuousPathRetrocorrections *this)
{
  return "FilterLowQualityContinuousPathRetrocorrections";
}

void KB::FilterLowQualityContinuousPathRetrocorrections::filter_candidates(KB::FilterLowQualityContinuousPathRetrocorrections *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  const char *v17;
  __CFString *v18;

  v8 = *((_QWORD *)a4 + 2);
  if (v8)
  {
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  v10 = *(_QWORD *)(v8 + 8);
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)a2;
    v12 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 != v12)
    {
      v13 = v10 + 144;
      while (1)
      {
        v14 = KB::Candidate::num_words_matching_input((_QWORD *)v11, a3, v13);
        v15 = *(_QWORD *)a3;
        if (*(_QWORD *)a3 > (unint64_t)v14)
          break;
        v11 += 1000;
        if (v11 == v12)
        {
          v16 = -INFINITY;
          goto LABEL_10;
        }
      }
      v16 = expf(*(float *)(v11 + 744));
LABEL_10:
      if (v16 < (float)(expf(*(float *)(*(_QWORD *)a2 + 744)) * *((float *)this + 2)))
      {
        v18 = (__CFString *)*((_QWORD *)a4 + 7);
        if (v18)
        {
          KB::append_format(v18, (__CFString *)"removing all retrocorrection candidates: %s\n", v17, "FilterLowQualityContinuousPathRetrocorrections");
          v15 = *(_QWORD *)a3;
        }
        KB::CandidateFilter::remove_candidates_with_input_mismatch((uint64_t)this, (uint64_t)a2, v15, (uint64_t)a3, (uint64_t)a4, (uint64_t)"FilterLowQualityContinuousPathRetrocorrections");
      }
    }
  }
}

void KB::FilterNoPredictContinuousPathAlternates::~FilterNoPredictContinuousPathAlternates(KB::FilterNoPredictContinuousPathAlternates *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterNoPredictContinuousPathAlternates::filter_description(KB::FilterNoPredictContinuousPathAlternates *this)
{
  return "FilterNoPredictContinuousPathAlternates";
}

void KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::FilterNoPredictContinuousPathAlternates *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *i;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  const char *v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[1000];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)) >= 2)
  {
    KB::Candidate::Candidate((KB::Candidate *)v22, a3);
    v18 = *(_OWORD *)((char *)this + 8);
    v19 = *((_QWORD *)this + 3);
    v7 = *((_QWORD *)a4 + 2);
    if (v7)
    {
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
    }
    v9 = *(_QWORD *)(v7 + 8) + 144;
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v7);
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v20, v9);
    v16 = *((_QWORD *)a4 + 7);
    v17 = "FilterNoPredictContinuousPathAlternates";
    v10 = (uint64_t *)*((_QWORD *)a2 + 1);
    v11 = (uint64_t *)(*(_QWORD *)a2 + 1000);
    v15[0] = v22;
    v15[1] = &v18;
    v15[2] = v20;
    v15[3] = &v16;
    v15[4] = &v17;
    if (v11 != v10)
    {
      while ((KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()((uint64_t)v15, v11) & 1) == 0)
      {
        v11 += 125;
        if (v11 == v10)
        {
          v11 = v10;
          goto LABEL_14;
        }
      }
      if (v11 != v10)
      {
        for (i = v11 + 125; i != v10; i += 125)
        {
          if ((KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()((uint64_t)v15, i) & 1) == 0)
          {
            KB::Candidate::operator=(v11, i);
            v11 += 125;
          }
        }
      }
    }
LABEL_14:
    std::vector<KB::Candidate>::erase((uint64_t)a2, v11, *((KB::Candidate **)a2 + 1));
    v13 = v21;
    if (v21 == v20)
    {
      v14 = 4;
      v13 = v20;
    }
    else
    {
      if (!v21)
      {
LABEL_19:
        KB::Candidate::~Candidate((KB::Candidate *)v22);
        return;
      }
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
    goto LABEL_19;
  }
}

uint64_t KB::FilterNoPredictContinuousPathAlternates::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  int is_suggestible_for_input;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __CFString *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  __int16 v16[3];
  char v17;
  void *v18;
  uint64_t v19;
  __int16 v20[3];
  char v21;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  is_suggestible_for_input = KB::CandidateFilter::is_suggestible_for_input(a2, *(_QWORD **)a1, 1, *(KB::WordSuggestionPolicy **)(a1 + 8), *(_QWORD *)(a1 + 16), 0);
  v5 = a2[1];
  v6 = v5 + 240 * *a2;
  if (*a2)
  {
    v7 = 240 * *a2;
    while ((*(_BYTE *)(v5 + 106) & 1) == 0)
    {
      v5 += 240;
      v7 -= 240;
      if (!v7)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v5 == v6)
    v8 = is_suggestible_for_input;
  else
    v8 = 1;
  if ((v8 & 1) == 0)
  {
    v9 = **(__CFString ***)(a1 + 24);
    if (v9)
    {
      KB::Candidate::capitalized_string((KB::Candidate *)a2, (uint64_t)v20);
      v10 = (const char *)v22;
      if (!v22)
        v10 = (const char *)v23;
      if (v20[0])
        v11 = v10;
      else
        v11 = "";
      KB::Candidate::token_ids_as_string((KB::Candidate *)a2, (uint64_t)v16);
      v13 = (const char *)v18;
      if (!v18)
        v13 = (const char *)&v19;
      if (v16[0])
        v14 = v13;
      else
        v14 = "";
      KB::append_format(v9, (__CFString *)"[%s] {%s} removed by %s\n", v12, v11, v14, **(_QWORD **)(a1 + 32));
      if (v18 && v17 == 1)
        free(v18);
      if (v22 && v21 == 1)
        free(v22);
    }
  }
  return v8 ^ 1u;
}

void KB::FilterContinuousPathAlternatesFromOtherLanguage::~FilterContinuousPathAlternatesFromOtherLanguage(KB::FilterContinuousPathAlternatesFromOtherLanguage *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterContinuousPathAlternatesFromOtherLanguage::filter_description(KB::FilterContinuousPathAlternatesFromOtherLanguage *this)
{
  return "FilterContinuousPathAlternatesFromOtherLanguage";
}

void KB::FilterContinuousPathAlternatesFromOtherLanguage::filter_candidates(KB::FilterContinuousPathAlternatesFromOtherLanguage *this, const KB::LanguageModelContext **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const KB::LanguageModelContext *v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const KB::LanguageModelContext *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  KB::Candidate *v27;
  KB::Candidate *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD v31[2];
  void (*v32)(uint64_t, KB::Candidate *);
  void *v33;
  KB::FilterContinuousPathAlternatesFromOtherLanguage *v34;
  const KB::CandidateFilterResources *v35;
  _QWORD v36[5];
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, KB::CandidateFilter *);
  void *v39;
  uint64_t v40;
  char *v41;
  int v42;
  _QWORD *v43;

  v9 = *((_QWORD *)a4 + 3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v9)
  {
    v14 = *a2;
    if ((unint64_t)(0x1CAC083126E978D5 * ((a2[1] - *a2) >> 3)) >= 4)
    {
      v15 = KB::FilterContinuousPathAlternatesFromOtherLanguage::language_id_for_context_and_autoconversion_with_confidence((const KB::CandidateFilterLookupContext *)((char *)a3 + 2032), *a2, a4, *((float *)this + 2), a4);
      if (v15)
      {
        v16 = v15;
        v17 = (char *)v14 + 888;
        if (!*((_WORD *)v14 + 444))
          KB::Candidate::compute_string(v14);
        v18 = *((_QWORD *)a4 + 2);
        if (v18)
        {
          do
            v19 = __ldaxr((unsigned int *)v18);
          while (__stlxr(v19 + 1, (unsigned int *)v18));
        }
        v20 = *(_QWORD *)(v18 + 8) + 144;
        WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v18);
        v21 = MEMORY[0x1E0C809B0];
        v37[0] = MEMORY[0x1E0C809B0];
        v37[1] = 0x40000000;
        v38 = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke;
        v39 = &__block_descriptor_tmp_5633;
        v42 = v16;
        v40 = v20;
        v41 = v17;
        v23 = *a2;
        v22 = (uint64_t *)a2[1];
        v24 = (uint64_t)*a2 + 1000;
        v36[0] = MEMORY[0x1E0C809B0];
        v36[1] = 0x40000000;
        v36[2] = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2;
        v36[3] = &unk_1EA0FF150;
        v36[4] = v37;
        v43 = v36;
        if ((uint64_t)v22 - v24 <= 0)
        {
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v24, v22, (uint64_t *)&v43, 0x1CAC083126E978D5 * (((uint64_t)v22 - v24) >> 3), 0, 0);
        }
        else
        {
          v25 = std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(0x1CAC083126E978D5 * (((uint64_t)v22 - v24) >> 3));
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v24, v22, (uint64_t *)&v43, 0x1CAC083126E978D5 * (((uint64_t)v22 - v24) >> 3), (uint64_t)v25, v26);
          if (v25)
            operator delete(v25);
        }
        v27 = (const KB::LanguageModelContext *)((char *)v23 + 3000);
        v28 = a2[1];
        if ((const KB::LanguageModelContext *)((char *)v23 + 3000) == v28)
        {
          v29 = (uint64_t *)((char *)v23 + 3000);
        }
        else
        {
          while (v38((uint64_t)v37, v27))
          {
            v27 = (KB::Candidate *)((char *)v27 + 1000);
            if (v27 == v28)
            {
              v27 = v28;
              break;
            }
          }
          v29 = (uint64_t *)v27;
          v27 = a2[1];
        }
        if (*((_QWORD *)a4 + 7))
        {
          v31[0] = v21;
          v31[1] = 0x40000000;
          v32 = ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_3;
          v33 = &__block_descriptor_tmp_9;
          v34 = this;
          v35 = a4;
          if (v29 != (uint64_t *)v27)
          {
            v30 = v29;
            do
            {
              v32((uint64_t)v31, (KB::Candidate *)v30);
              v30 += 125;
            }
            while (v30 != (uint64_t *)v27);
            v27 = a2[1];
          }
        }
        std::vector<KB::Candidate>::erase((uint64_t)a2, v29, v27);
      }
    }
  }
}

uint64_t KB::FilterContinuousPathAlternatesFromOtherLanguage::language_id_for_context_and_autoconversion_with_confidence(KB::FilterContinuousPathAlternatesFromOtherLanguage *this, const KB::LanguageModelContext *a2, const KB::Candidate *a3, float a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  TITokenID v11;
  TITokenID v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v19, this);
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v9 = *((_QWORD *)a2 + 1);
    v10 = 240 * v8;
    do
    {
      if ((*(_BYTE *)(v9 + 135) & 4) == 0)
      {
        v11 = *(TITokenID *)(v9 + 136);
        KB::Word::capitalized_string((KB::Word *)v9, (uint64_t)&v26);
        v12 = v11;
        KB::LanguageModelContext::append((KB::LanguageModelContext *)&v19, v12, (const KB::String *)&v26, 0);
        if (v27 && BYTE6(v26) == 1)
          free(v27);
      }
      v9 += 240;
      v10 -= 240;
    }
    while (v10);
  }
  if ((KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)&v19) & 1) != 0)
    v14 = 0;
  else
    v14 = KB::CandidateFilter::language_id_for_context_with_confidence((uint64_t)&v19, (uint64_t)a3, a4);
  v26 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v26);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v24);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

uint64_t ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke(uint64_t a1, KB::CandidateFilter *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)*(unsigned int *)(a1 + 48)) & 1) != 0)return 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!*((_WORD *)this + 444))
    KB::Candidate::compute_string(this);
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
    return (*(unsigned int (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v6 + 48))(v6, (char *)this + 888, *(_QWORD *)(a1 + 40)) != 0;
  std::__throw_bad_function_call[abi:nn180100]();
  return ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2(v7);
}

uint64_t ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))() ^ 1;
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  unint64_t v9;
  KB::Candidate *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[127];

  v26[125] = *MEMORY[0x1E0C80C00];
  if (a4 >= 2)
  {
    v8 = (uint64_t *)a1;
    if (a4 == 2)
    {
      if ((*(unsigned int (**)(void))(*a3 + 16))())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v8, a2 - 125);
    }
    else
    {
      v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        if ((uint64_t *)a1 != a2)
        {
          v15 = a1 + 1000;
          if ((uint64_t *)(a1 + 1000) != a2)
          {
            v16 = 0;
            do
            {
              v17 = v15;
              if ((*(unsigned int (**)(void))(*a3 + 16))())
              {
                KB::Candidate::Candidate((uint64_t)v26, v17);
                v18 = v16;
                while (1)
                {
                  KB::Candidate::operator=((uint64_t *)((char *)v8 + v18 + 1000), (uint64_t *)((char *)v8 + v18));
                  if (!v18)
                    break;
                  v18 -= 1000;
                  if (((*(uint64_t (**)(void))(*a3 + 16))() & 1) == 0)
                  {
                    v19 = (uint64_t *)((char *)v8 + v18 + 1000);
                    goto LABEL_17;
                  }
                }
                v19 = v8;
LABEL_17:
                KB::Candidate::operator=(v19, v26);
                KB::Candidate::~Candidate((KB::Candidate *)v26);
              }
              v15 = v17 + 1000;
              v16 += 1000;
            }
            while ((uint64_t *)(v17 + 1000) != a2);
          }
        }
      }
      else
      {
        v11 = (KB::Candidate *)a5;
        v12 = a4 >> 1;
        v13 = (uint64_t *)(a1 + 1000 * (a4 >> 1));
        v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v13, (uint64_t)a3, v14, a5);
          v20 = (uint64_t)v11 + 1000 * v12;
          std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>((uint64_t)&v8[125 * (v9 >> 1)], a2, (uint64_t)a3, v9 - (v9 >> 1), v20);
          v21 = (uint64_t *)((char *)v11 + 1000 * v9);
          v22 = (uint64_t *)v20;
          v23 = (uint64_t *)v11;
          while (v22 != v21)
          {
            if ((*(unsigned int (**)(void))(*a3 + 16))())
            {
              KB::Candidate::operator=(v8, v22);
              v22 += 125;
            }
            else
            {
              KB::Candidate::operator=(v8, v23);
              v23 += 125;
            }
            v8 += 125;
            if (v23 == (uint64_t *)v20)
            {
              if (v22 != v21)
              {
                v24 = 0;
                do
                {
                  KB::Candidate::operator=(&v8[v24], &v22[v24]);
                  v24 += 125;
                }
                while (&v22[v24] != v21);
              }
              goto LABEL_33;
            }
          }
          if (v23 != (uint64_t *)v20)
          {
            v25 = 0;
            do
            {
              KB::Candidate::operator=(&v8[v25], &v23[v25]);
              v25 += 125;
            }
            while (&v23[v25] != (uint64_t *)v20);
          }
LABEL_33:
          if (v11)
          {
            do
            {
              KB::Candidate::~Candidate(v11);
              v11 = (KB::Candidate *)((char *)v11 + 1000);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(&v8[125 * (v9 >> 1)], a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v8, &v8[125 * (v9 >> 1)], a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void *std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x20C49BA5E353F7)
    v1 = 0x20C49BA5E353F7;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(1000 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void ___ZNK2KB47FilterContinuousPathAlternatesFromOtherLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke_3(uint64_t a1, KB::Candidate *a2)
{
  __CFString *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  _WORD v9[3];
  char v10;
  void *v11;
  uint64_t v12;
  _WORD v13[3];
  char v14;
  void *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v3 = *(__CFString **)(*(_QWORD *)(a1 + 40) + 56);
  KB::Candidate::capitalized_string(a2, (uint64_t)v13);
  v4 = (const char *)v15;
  if (!v15)
    v4 = (const char *)v16;
  if (v13[0])
    v5 = v4;
  else
    v5 = "";
  KB::Candidate::token_ids_as_string(a2, (uint64_t)v9);
  v7 = (const char *)v11;
  if (!v11)
    v7 = (const char *)&v12;
  if (v9[0])
    v8 = v7;
  else
    v8 = "";
  KB::append_format(v3, (__CFString *)"[%s] {%s} removed by %s\n", v6, v5, v8, "FilterContinuousPathAlternatesFromOtherLanguage");
  if (v11 && v10 == 1)
    free(v11);
  if (v15)
  {
    if (v14 == 1)
      free(v15);
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a4)
  {
    v5 = a5;
    v9 = result;
    if (a4 == 2)
    {
      v11 = (uint64_t)(a2 - 125);
      if (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        KB::Candidate::Candidate(v5, v9);
        v10 = v5 + 1000;
        v12 = v11;
        return KB::Candidate::Candidate(v10, v12);
      }
      KB::Candidate::Candidate(v5, v11);
      v10 = v5 + 1000;
LABEL_7:
      v12 = v9;
      return KB::Candidate::Candidate(v10, v12);
    }
    if (a4 == 1)
    {
      v10 = a5;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      v18 = 1000 * (a4 >> 1);
      v19 = result + v18;
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(result, result + v18, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v9 + v18, a2, a3, a4 - (a4 >> 1), v5 + v18, a4 - (a4 >> 1));
      v20 = v9 + v18;
      while ((uint64_t *)v20 != a2)
      {
        if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
        {
          result = KB::Candidate::Candidate(v5, v20);
          v20 += 1000;
        }
        else
        {
          result = KB::Candidate::Candidate(v5, v9);
          v9 += 1000;
        }
        v5 += 1000;
        if (v9 == v19)
        {
          if ((uint64_t *)v20 != a2)
          {
            v21 = 0;
            do
            {
              result = KB::Candidate::Candidate(v5 + v21, v20 + v21);
              v21 += 1000;
            }
            while ((uint64_t *)(v20 + v21) != a2);
          }
          return result;
        }
      }
      if (v9 != v19)
      {
        v22 = 0;
        do
        {
          result = KB::Candidate::Candidate(v5 + v22, v9 + v22);
          v22 += 1000;
        }
        while (v9 + v22 != v19);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      result = KB::Candidate::Candidate(a5, result);
      v13 = (uint64_t *)(v9 + 1000);
      if (v13 != a2)
      {
        v14 = 0;
        v15 = v5;
        do
        {
          if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
          {
            KB::Candidate::Candidate(v15 + 1000, v15);
            v16 = (uint64_t *)v5;
            if (v15 != v5)
            {
              v17 = v14;
              while (1)
              {
                v16 = (uint64_t *)(v5 + v17);
                if (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                  break;
                KB::Candidate::operator=((uint64_t *)(v5 + v17), (uint64_t *)(v5 + v17 - 1000));
                v17 -= 1000;
                if (!v17)
                {
                  v16 = (uint64_t *)v5;
                  break;
                }
              }
            }
            result = (uint64_t)KB::Candidate::operator=(v16, v13);
          }
          else
          {
            result = KB::Candidate::Candidate(v15 + 1000, (uint64_t)v13);
          }
          v13 += 125;
          v14 += 1000;
          v15 += 1000;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, KB::Candidate *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  KB::Candidate *v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  KB::Candidate *v50;
  uint64_t *v51;

  if (a6)
  {
    v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return;
      while (((*(uint64_t (**)(void))(*a4 + 16))() & 1) == 0)
      {
        a1 += 125;
        if (!--a5)
          return;
      }
      v51 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
          return;
        }
        if (a5 >= 0)
          v21 = a5;
        else
          v21 = a5 + 1;
        v20 = v21 >> 1;
        v18 = &a1[125 * (v21 >> 1)];
        if (a3 != a2)
        {
          v47 = v21 >> 1;
          v49 = a8;
          v50 = a7;
          v22 = *a4;
          v23 = 0x1CAC083126E978D5 * (a3 - a2);
          a3 = a2;
          do
          {
            v24 = &a3[125 * (v23 >> 1)];
            v25 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(v22 + 16))(v22, v24, v18);
            if (v25)
              v23 += ~(v23 >> 1);
            else
              v23 >>= 1;
            if (v25)
              a3 = v24 + 125;
          }
          while (v23);
          a8 = v49;
          a7 = v50;
          v20 = v47;
        }
        v17 = 0x1CAC083126E978D5 * (a3 - a2);
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        a3 = &a2[125 * (v16 >> 1)];
        v18 = a2;
        if (a2 != a1)
        {
          v48 = v16 >> 1;
          v19 = 0x1CAC083126E978D5 * (a2 - a1);
          v18 = a1;
          do
          {
            if ((*(unsigned int (**)(void))(*a4 + 16))())
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 125 * (v19 >> 1) + 125;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v17 = v48;
        }
        v20 = 0x1CAC083126E978D5 * (v18 - a1);
      }
      if (v18 == a2)
      {
        v30 = a3;
      }
      else if (a3 == a2)
      {
        v30 = v18;
      }
      else
      {
        v26 = a2;
        v27 = v20;
        v28 = v17;
        v29 = std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v18, v26, a3);
        v17 = v28;
        v20 = v27;
        v30 = v29;
      }
      a5 -= v20;
      v10 -= v17;
      if (v20 + v17 >= a5 + v10)
      {
        v31 = a3;
        v32 = v20;
        v33 = a5;
        v34 = v17;
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(v30, v31, v51, a4, v33, v10, a7, a8);
        a2 = v18;
        v10 = v34;
        a5 = v32;
        a3 = v30;
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),std::__wrap_iter<KB::Candidate*>>(a1, v18, v30, a4, v20, v17, a7, a8);
        a1 = v30;
        a2 = a3;
        a3 = v51;
      }
      if (!v10)
        return;
    }
    if (a5 <= v10)
    {
      if (a1 == a2)
        return;
      v41 = 0;
      v36 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v41 * 8, (uint64_t)&a1[v41]);
        ++v36;
        v41 += 125;
      }
      while (&a1[v41] != a2);
      v42 = (uint64_t *)((char *)a7 + v41 * 8);
      if ((KB::Candidate *)((char *)a7 + v41 * 8) != a7)
      {
        v43 = (uint64_t *)a7;
        while (a2 != a3)
        {
          if ((*(unsigned int (**)(void))(*a4 + 16))())
          {
            KB::Candidate::operator=(a1, a2);
            a2 += 125;
          }
          else
          {
            KB::Candidate::operator=(a1, v43);
            v43 += 125;
          }
          a1 += 125;
          if (v43 == v42)
            goto LABEL_78;
        }
        if (v43 != v42)
        {
          v46 = 0;
          do
          {
            KB::Candidate::operator=(&a1[v46], &v43[v46]);
            v46 += 125;
          }
          while (&v43[v46 - 125] != v42 - 125);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v35 = 0;
      v36 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v35 * 8, (uint64_t)&a2[v35]);
        ++v36;
        v35 += 125;
      }
      while (&a2[v35] != a3);
      v37 = (KB::Candidate *)((char *)a7 + v35 * 8);
      if ((KB::Candidate *)((char *)a7 + v35 * 8) != a7)
      {
        v38 = a3 - 125;
        while (a2 != a1)
        {
          v39 = (*(uint64_t (**)(void))(*a4 + 16))();
          if (v39)
            v40 = a2 - 125;
          else
            v40 = (uint64_t *)((char *)v37 - 1000);
          if (v39)
            a2 -= 125;
          else
            v37 = (KB::Candidate *)((char *)v37 - 1000);
          KB::Candidate::operator=(v38, v40);
          v38 -= 125;
          if (v37 == a7)
            goto LABEL_78;
        }
        v44 = 0;
        do
        {
          v45 = &v38[v44];
          v44 -= 125;
          KB::Candidate::operator=(v45, (uint64_t *)((char *)v37 + v44 * 8));
        }
        while ((KB::Candidate *)((char *)v37 + v44 * 8) != a7);
      }
    }
LABEL_78:
    if (a7 && v36)
    {
      do
      {
        KB::Candidate::~Candidate(a7);
        a7 = (KB::Candidate *)((char *)a7 + 1000);
        --v36;
      }
      while (v36);
    }
  }
}

uint64_t *std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v4 = a2;
  v5 = a1;
  v6 = a1 + 125;
  v7 = a2;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v5, v4);
    v5 += 125;
    v4 += 125;
    if (v4 == a3)
      break;
    if (v5 == v7)
      v7 = v4;
    v6 += 125;
  }
  if (v5 != v7)
  {
    v8 = v7;
    do
    {
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v5, v7);
        v5 += 125;
        v7 += 125;
        if (v7 == a3)
          break;
        if (v5 == v8)
          v8 = v7;
      }
      v7 = v8;
    }
    while (v5 != v8);
  }
  return v6;
}

uint64_t __Block_byref_object_copy__5739(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5740(uint64_t a1)
{

}

id TIGetProactiveQuickTypeSettingValue()
{
  void *v0;
  void *v1;

  if (TIGetProactiveQuickTypeSettingValue_onceToken != -1)
    dispatch_once(&TIGetProactiveQuickTypeSettingValue_onceToken, &__block_literal_global_255);
  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForPreferenceKey:", CFSTR("ProactiveQuickTypeSetting"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t __Block_byref_object_copy__5867(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5868(uint64_t a1)
{

}

Class __getCLGeocoderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    CoreLocationLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreLocationLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CLGeocoder");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getCLGeocoderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__Block_byref_object_copy__6347(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__6348(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__199(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__200(uint64_t a1)
{

}

const __CFString *TIAssetAvailabilityStatusToString(uint64_t a1)
{
  if (a1)
    return CFSTR("Installed");
  else
    return CFSTR("Unavailable");
}

void std::allocate_shared[abi:nn180100]<KB::LanguageModelStr,std::allocator<KB::LanguageModelStr>,KB::LanguageModelConfig,void>(std::__shared_weak_count **a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  const void *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  const void *v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23[2];
  CFTypeRef cf[2];
  __int128 v25;
  __int128 v26;
  int v27;

  v4 = (std::__shared_weak_count *)operator new(0x178uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FF968;
  v6 = *(const void **)a2;
  v20 = v6;
  if (v6)
  {
    CFRetain(v6);
    v20 = v6;
  }
  v7 = v4 + 1;
  v8 = *(const void **)(a2 + 8);
  v21 = v8;
  if (v8)
  {
    CFRetain(v8);
    v21 = v8;
  }
  v9 = *(const void **)(a2 + 16);
  v22 = v9;
  if (v9)
  {
    CFRetain(v9);
    v22 = v9;
  }
  v10 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)v23 = v10;
  v11 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)cf = v11;
  v25 = *(_OWORD *)(a2 + 56);
  v26 = *(_OWORD *)(a2 + 72);
  v27 = *(_DWORD *)(a2 + 88);
  KB::LanguageModelStr::LanguageModelStr((uint64_t)&v4[1], (uint64_t)&v20);
  if (cf[1])
    CFRelease(cf[1]);
  cf[1] = 0;
  if (cf[0])
    CFRelease(cf[0]);
  if (v23[1])
    CFRelease(v23[1]);
  if (v23[0])
    CFRelease(v23[0]);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  *a1 = v7;
  a1[1] = v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[7].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v4[7].__shared_owners_ = (uint64_t)v7;
    v4[7].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v4[7].__shared_owners_ = (uint64_t)v7;
    v4[7].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t std::construct_at[abi:nn180100]<KB::LanguageModelImplStub,KB::LanguageModelConfig,KB::LanguageModelImplStub*>(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13[2];
  CFTypeRef cf[2];
  __int128 v15;
  __int128 v16;
  int v17;

  v4 = *(const void **)a2;
  v10 = v4;
  if (v4)
  {
    CFRetain(v4);
    v10 = v4;
  }
  v5 = *(const void **)(a2 + 8);
  v11 = v5;
  if (v5)
  {
    CFRetain(v5);
    v11 = v5;
  }
  v6 = *(const void **)(a2 + 16);
  v12 = v6;
  if (v6)
  {
    CFRetain(v6);
    v12 = v6;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)v13 = v7;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)cf = v8;
  v15 = *(_OWORD *)(a2 + 56);
  v16 = *(_OWORD *)(a2 + 72);
  v17 = *(_DWORD *)(a2 + 88);
  KB::LanguageModelImplStub::LanguageModelImplStub(a1, (uint64_t)&v10);
  if (cf[1])
    CFRelease(cf[1]);
  if (cf[0])
    CFRelease(cf[0]);
  if (v13[1])
    CFRelease(v13[1]);
  if (v13[0])
    CFRelease(v13[0]);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return a1;
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FF9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KB::LanguageModelImplStub>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FF9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelImplStub>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<KB::LanguageModelStr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FF968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KB::LanguageModelStr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA0FF968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<KB::LanguageModelStr>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __Block_byref_object_copy__6697(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6698(uint64_t a1)
{

}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  v8 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v9 = xmmword_1EA0FFA50;
    v10 = 0;
    v2 = (void *)_sl_dlopen();
    v6[3] = (uint64_t)v2;
    libMemoryResourceExceptionLibraryCore_frameworkLibrary = (uint64_t)v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
  {
    v4 = (void *)abort_report_np();
    free(v4);
  }
  result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__6861(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6862(uint64_t a1)
{

}

void StringBIStream::~StringBIStream(StringBIStream *this)
{
  JUMPOUT(0x1DF0A2144);
}

uint64_t StringBIStream::getNext(StringBIStream *this, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  _BOOL4 v6;

  if (*((_DWORD *)this + 2))
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3 + 1;
  v4 = *v3;
  *a2 = v4;
  if (*((_DWORD *)this + 8) == -1)
  {
    v6 = v4 == 0;
  }
  else
  {
    v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 1;
    v6 = v5 < 2;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

uint64_t StringBIStream::peekNext(StringBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 2))
    return 0;
  *a2 = **((_BYTE **)this + 3);
  return 1;
}

uint64_t StringBIStream::unget(StringBIStream *this, char a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2 != *((_QWORD *)this + 2))
  {
    *((_QWORD *)this + 3) = v2 - 1;
    *(_BYTE *)(v2 - 1) = a2;
    *((_DWORD *)this + 2) = 0;
    if (*((_DWORD *)this + 8) != -1)
      ++*((_DWORD *)this + 9);
  }
  return 1;
}

uint64_t StringBIStream::getNextW(StringBIStream *this, unsigned __int16 *a2)
{
  unsigned __int16 *v3;
  int v4;
  int v5;
  _BOOL4 v6;

  if (*((_DWORD *)this + 2))
    return 0;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 3);
  v4 = *v3;
  *a2 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  if (*((_DWORD *)this + 8) == -1)
  {
    v6 = v4 == 0;
  }
  else
  {
    v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 2;
    v6 = v5 < 3;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

uint64_t StringBIStream::peekNextW(StringBIStream *this, unsigned __int16 *a2)
{
  if (*((_DWORD *)this + 2))
    return 0;
  *a2 = **((_WORD **)this + 3);
  return 1;
}

uint64_t StringBIStream::getNextDW(StringBIStream *this, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  _BOOL4 v6;

  if (*((_DWORD *)this + 2))
    return 0;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  v4 = *v3;
  *a2 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  if (*((_DWORD *)this + 8) == -1)
  {
    v6 = v4 == 0;
  }
  else
  {
    v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = v5 - 4;
    v6 = v5 < 5;
  }
  *((_DWORD *)this + 2) = v6;
  return 1;
}

uint64_t StringBIStream::bookmark(StringBIStream *this)
{
  *((_DWORD *)this + 18) = 1;
  *((_OWORD *)this + 3) = *((_OWORD *)this + 1);
  *((_DWORD *)this + 10) = *((_DWORD *)this + 2);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 4);
  return 1;
}

uint64_t StringBIStream::gotoBookmark(StringBIStream *this)
{
  if (!*((_DWORD *)this + 18))
    return 0;
  *((_OWORD *)this + 1) = *((_OWORD *)this + 3);
  *((_DWORD *)this + 2) = *((_DWORD *)this + 10);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 8);
  return 1;
}

uint64_t StringBIStream::eos(StringBIStream *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t StringBIStream::close(StringBIStream *this)
{
  return 1;
}

void StringBOStream::~StringBOStream(StringBOStream *this)
{
  JUMPOUT(0x1DF0A2144);
}

uint64_t StringBOStream::putB(StringBOStream *this, char a2)
{
  int v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 1;
  if (*((_DWORD *)this + 8))
    return 0;
  if (v2 >= *((_DWORD *)this + 7))
  {
    v3 = 0;
    *((_DWORD *)this + 8) = 1;
  }
  else
  {
    v4 = (_BYTE *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v4 + 1;
    *v4 = a2;
    return 1;
  }
  return v3;
}

uint64_t StringBOStream::putW(StringBOStream *this, __int16 a2)
{
  int v2;
  uint64_t v3;
  _WORD *v4;

  v2 = *((_DWORD *)this + 6) + 2;
  *((_DWORD *)this + 6) = v2;
  if (*((_DWORD *)this + 8))
    return 0;
  if (v2 <= *((_DWORD *)this + 7))
  {
    v4 = (_WORD *)*((_QWORD *)this + 2);
    *v4 = a2;
    *((_QWORD *)this + 2) = v4 + 1;
    return 1;
  }
  else
  {
    v3 = 0;
    *((_DWORD *)this + 8) = 1;
  }
  return v3;
}

BOOL StringBOStream::puts(StringBOStream *this, const char *a2, int a3)
{
  int v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  char v10;
  _BYTE *v11;
  int v13;
  int v14;
  int v15;

  if (a3 == -1)
  {
    if (*a2)
    {
      v7 = a2 + 1;
      do
      {
        v8 = *((_DWORD *)this + 6);
        v9 = *((_DWORD *)this + 7);
        *((_DWORD *)this + 6) = v8 + 1;
        if (v8 < v9)
        {
          v10 = *(v7 - 1);
          v11 = (_BYTE *)*((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v11 + 1;
          *v11 = v10;
        }
      }
      while (*(unsigned __int8 *)v7++);
    }
    v6 = *((_DWORD *)this + 8);
    if (!v6)
    {
      if (*((_DWORD *)this + 6) > *((_DWORD *)this + 7))
      {
LABEL_20:
        v6 = 1;
        *((_DWORD *)this + 8) = 1;
        return v6 == 0;
      }
LABEL_11:
      v6 = 0;
    }
  }
  else
  {
    v5 = *((_DWORD *)this + 6);
    if (*((_DWORD *)this + 8))
    {
      *((_DWORD *)this + 6) = v5 + a3;
      v6 = 1;
      return v6 == 0;
    }
    v13 = *((_DWORD *)this + 7);
    if (v13 < v5)
    {
      v14 = v5 + a3;
      *((_DWORD *)this + 6) = v14;
      goto LABEL_19;
    }
    if (v13 - v5 >= a3)
      v15 = a3;
    else
      v15 = v13 - v5;
    memcpy(*((void **)this + 2), a2, v15);
    *((_QWORD *)this + 2) += v15;
    v6 = *((_DWORD *)this + 8);
    v14 = *((_DWORD *)this + 6) + a3;
    *((_DWORD *)this + 6) = v14;
    if (!v6)
    {
      v13 = *((_DWORD *)this + 7);
LABEL_19:
      if (v14 > v13)
        goto LABEL_20;
      goto LABEL_11;
    }
  }
  return v6 == 0;
}

BOOL StringBOStream::isOK(StringBOStream *this)
{
  return *((_DWORD *)this + 8) == 0;
}

uint64_t StringBOStream::close(StringBOStream *this)
{
  return 1;
}

void FileBIStream::~FileBIStream(FileBIStream *this)
{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFB50;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFB50;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
  JUMPOUT(0x1DF0A2144);
}

{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFB50;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

BOOL FileBIStream::getNext(FileBIStream *this, unsigned __int8 *a2)
{
  _BOOL8 result;

  if (*((_DWORD *)this + 13))
  {
    *((_DWORD *)this + 13) = 0;
    *a2 = *((_BYTE *)this + 48);
    result = 1;
    *((_DWORD *)this + 14) = 1;
  }
  else
  {
    *((_DWORD *)this + 14) = 0;
    *a2 = fgetc(*((FILE **)this + 1));
    return feof(*((FILE **)this + 1)) == 0;
  }
  return result;
}

uint64_t FileBIStream::peekNext(FileBIStream *this, unsigned __int8 *a2)
{
  if (*((_DWORD *)this + 13))
  {
    *a2 = *((_BYTE *)this + 48);
    return 1;
  }
  *a2 = fgetc(*((FILE **)this + 1));
  if (!feof(*((FILE **)this + 1)))
  {
    ungetc(*a2, *((FILE **)this + 1));
    return 1;
  }
  return 0;
}

uint64_t FileBIStream::unget(FileBIStream *this, char a2)
{
  if (*((_DWORD *)this + 14))
  {
    *(_QWORD *)((char *)this + 52) = 1;
    *((_BYTE *)this + 48) = a2;
  }
  else
  {
    ungetc(a2, *((FILE **)this + 1));
  }
  return 1;
}

uint64_t FileBIStream::getNextW(FileBIStream *this, unsigned __int16 *a2)
{
  uint64_t result;
  __int16 v5;

  v5 = 0;
  result = (*(uint64_t (**)(FileBIStream *, char *))(*(_QWORD *)this + 16))(this, (char *)&v5 + 1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(FileBIStream *, __int16 *))(*(_QWORD *)this + 16))(this, &v5);
    if ((_DWORD)result)
    {
      *(_BYTE *)a2 = HIBYTE(v5);
      *((_BYTE *)a2 + 1) = v5;
      return 1;
    }
  }
  return result;
}

double FileBIStream::peekNextW(FileBIStream *this, unsigned __int16 *a2)
{
  double result;
  char v5;
  __int16 v6;

  v6 = 0;
  if ((*(unsigned int (**)(FileBIStream *, __int16 *))(*(_QWORD *)this + 16))(this, &v6))
  {
    if ((*(unsigned int (**)(FileBIStream *, char *))(*(_QWORD *)this + 16))(this, (char *)&v6 + 1))
    {
      (*(void (**)(FileBIStream *, _QWORD))(*(_QWORD *)this + 32))(this, HIBYTE(v6));
      v5 = v6;
      *a2 = v6 | (HIBYTE(v6) << 8);
    }
    else
    {
      v5 = v6;
    }
    *((_BYTE *)this + 48) = v5;
    *(_QWORD *)&result = 1;
    *(_QWORD *)((char *)this + 52) = 1;
  }
  return result;
}

uint64_t FileBIStream::getNextDW(FileBIStream *this, unsigned int *a2)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = (*(uint64_t (**)(FileBIStream *, char *))(*(_QWORD *)this + 40))(this, (char *)&v5 + 2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(FileBIStream *, int *))(*(_QWORD *)this + 40))(this, &v5);
    if ((_DWORD)result)
    {
      *(_WORD *)a2 = HIWORD(v5);
      *((_WORD *)a2 + 1) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t FileBIStream::bookmark(FileBIStream *this)
{
  *((_DWORD *)this + 9) = 1;
  *((_QWORD *)this + 5) = MEMORY[0x1DF0A2504](*((_QWORD *)this + 1));
  return 1;
}

uint64_t FileBIStream::gotoBookmark(FileBIStream *this)
{
  if (!*((_DWORD *)this + 9))
    return 0;
  fseek(*((FILE **)this + 1), *((_QWORD *)this + 5), 0);
  return 1;
}

uint64_t FileBIStream::eos(FILE **this)
{
  if (*((_DWORD *)this + 13))
    return 0;
  else
    return feof(this[1]);
}

uint64_t FileBIStream::close(FileBIStream *this)
{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    fclose(v2);
    *((_QWORD *)this + 1) = 0;
  }
  return 1;
}

void FileBOStream::~FileBOStream(FileBOStream *this)
{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFBC0;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFBC0;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
  JUMPOUT(0x1DF0A2144);
}

{
  FILE *v2;

  *(_QWORD *)this = &off_1EA0FFBC0;
  if (*((_DWORD *)this + 8))
  {
    v2 = (FILE *)*((_QWORD *)this + 1);
    if (v2)
    {
      fclose(v2);
      *((_QWORD *)this + 1) = 0;
    }
  }
}

BOOL FileBOStream::putB(FileBOStream *this, int a2)
{
  _BOOL8 result;
  int v4;
  BOOL v5;
  int v6;

  if (*((_DWORD *)this + 9))
    return 0;
  v4 = fputc(a2, *((FILE **)this + 1));
  v5 = v4 == -1;
  result = v4 != -1;
  v6 = v5;
  *((_DWORD *)this + 9) = v6;
  return result;
}

BOOL FileBOStream::putW(FileBOStream *this, unsigned int a2)
{
  _BOOL8 result;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  if (*((_DWORD *)this + 9))
    return 0;
  v5 = fputc(a2, *((FILE **)this + 1));
  *((_DWORD *)this + 9) = v5 == -1;
  if (v5 == -1)
    return 0;
  v6 = fputc(a2 >> 8, *((FILE **)this + 1));
  v7 = v6 == -1;
  result = v6 != -1;
  v8 = v7;
  *((_DWORD *)this + 9) = v8;
  return result;
}

BOOL FileBOStream::puts(FileBOStream *this, const char *__ptr, int a3)
{
  _BOOL4 v5;

  if (*((_DWORD *)this + 9))
    return 0;
  if (a3 == -1)
    v5 = fputs(__ptr, *((FILE **)this + 1)) == -1;
  else
    v5 = fwrite(__ptr, 1uLL, a3, *((FILE **)this + 1)) != a3;
  *((_DWORD *)this + 9) = v5;
  return !v5;
}

BOOL FileBOStream::isOK(FileBOStream *this)
{
  return *((_DWORD *)this + 9) == 0;
}

uint64_t FileBOStream::close(FileBOStream *this)
{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    fclose(v2);
    *((_QWORD *)this + 1) = 0;
  }
  return 1;
}

void StringBIStream::StringBIStream(StringBIStream *this, unsigned __int8 *a2, int a3, int a4)
{
  _BOOL4 v4;
  int v5;
  BOOL v6;

  *(_QWORD *)this = &off_1EA0FFA98;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a3;
  if (a3 == -1)
  {
    if (a4 == 4)
    {
      v6 = *(_DWORD *)a2 == 4;
    }
    else
    {
      if (a4 == 2)
        v5 = *(unsigned __int16 *)a2;
      else
        v5 = *a2;
      v6 = v5 == 0;
    }
    v4 = v6;
  }
  else
  {
    v4 = a3 < 1;
  }
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 18) = 0;
}

uint64_t StringBIStream::reopen(uint64_t this)
{
  uint64_t v1;
  int v2;
  _BOOL4 v3;

  v1 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 24) = v1;
  v2 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 36) = v2;
  v3 = v1 == 0;
  if (v2 != -1)
    v3 = v2 < 1;
  *(_DWORD *)(this + 8) = v3;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void StringBOStream::StringBOStream(StringBOStream *this, unsigned __int8 *a2, int a3)
{
  *(_QWORD *)this = &off_1EA0FFB08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = 0;
}

{
  *(_QWORD *)this = &off_1EA0FFB08;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 7) = a3;
  *((_DWORD *)this + 8) = 0;
}

uint64_t StringBOStream::reopen(uint64_t this)
{
  *(_QWORD *)(this + 16) = *(_QWORD *)(this + 8);
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void FileBIStream::FileBIStream(FileBIStream *this, int a2, char *a3)
{
  *(_QWORD *)this = &off_1EA0FFB50;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((_QWORD *)this + 4) = 1;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
}

{
  *(_QWORD *)this = &off_1EA0FFB50;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((_QWORD *)this + 4) = 1;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 14) = 0;
}

uint64_t FileBIStream::open(FileBIStream *this, const char *__filename)
{
  uint64_t result;

  result = (uint64_t)fopen(__filename, "rb");
  *((_QWORD *)this + 1) = result;
  if (result)
  {
    setvbuf((FILE *)result, *((char **)this + 3), 0, *((int *)this + 4));
    *((_DWORD *)this + 8) = 0;
    result = 1;
    *((_DWORD *)this + 13) = 0;
    *((_DWORD *)this + 14) = 0;
  }
  return result;
}

uint64_t FileBIStream::attach(uint64_t this, __sFILE *a2)
{
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void FileBOStream::FileBOStream(FileBOStream *this, int a2, char *a3)
{
  *(_QWORD *)this = &off_1EA0FFBC0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((_QWORD *)this + 4) = 0x100000001;
}

{
  *(_QWORD *)this = &off_1EA0FFBC0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 4) = a2;
  *((_QWORD *)this + 4) = 0x100000001;
}

uint64_t FileBOStream::open(FileBOStream *this, const char *__filename)
{
  uint64_t result;

  result = (uint64_t)fopen(__filename, "wb");
  *((_QWORD *)this + 1) = result;
  if (result)
  {
    *((_DWORD *)this + 9) = 0;
    setvbuf((FILE *)result, *((char **)this + 3), 0, *((int *)this + 4));
    result = 1;
    *((_DWORD *)this + 8) = 1;
  }
  return result;
}

uint64_t FileBOStream::attach(uint64_t this, __sFILE *a2)
{
  *(_QWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

KB::String *KB::StaticDictionary::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  KB::String *result;

  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  result = KB::String::String((KB::String *)(v3 + 80), "");
  *(_QWORD *)(v3 + 112) = &off_1EA107520;
  *(_QWORD *)(v3 + 136) = v3 + 112;
  *(_QWORD *)(v3 + 144) = &off_1EA107568;
  *(_QWORD *)(v3 + 168) = v3 + 144;
  *a1 = v3;
  return result;
}

KB::StaticDictionary *KB::StaticDictionary::StaticDictionary(KB::StaticDictionary *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  KB::String::String((KB::StaticDictionary *)((char *)this + 80), "");
  *((_QWORD *)this + 14) = &off_1EA107520;
  *((_QWORD *)this + 17) = (char *)this + 112;
  *((_QWORD *)this + 18) = &off_1EA107568;
  *((_QWORD *)this + 21) = (char *)this + 144;
  return this;
}

{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  KB::String::String((KB::StaticDictionary *)((char *)this + 80), "");
  *((_QWORD *)this + 14) = &off_1EA107520;
  *((_QWORD *)this + 17) = (char *)this + 112;
  *((_QWORD *)this + 18) = &off_1EA107568;
  *((_QWORD *)this + 21) = (char *)this + 144;
  return this;
}

void KB::StaticDictionary::candidates_for_string(KB::StaticDictionary *this@<X0>, const KB::String *a2@<X1>, float *a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t i;
  const void *v10;
  _OWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;

  if (*(_QWORD *)this == *((_QWORD *)this + 1) || *(_WORD *)a2 == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    memset(v11, 0, sizeof(v11));
    v12 = 0;
    KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)v11, this);
    v8 = KB::StaticDictionaryCursor::advance((KB::StaticDictionaryCursor *)v11, a2);
    if (a3)
    {
      *a3 = v8;
      *a3 = KB::StaticDictionaryCursor::termination_probability((KB::StaticDictionaryCursor *)v11) * *a3;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    KB::StaticDictionaryCursor::derive_words((KB::StaticDictionaryCursor *)v11, (uint64_t)a4);
    for (i = 16; i != -8; i -= 8)
    {
      v10 = *(const void **)((char *)v11 + i);
      if (v10)
        CFRelease(v10);
      *(_QWORD *)((char *)v11 + i) = 0;
    }
  }
}

void KB::StaticDictionary::root_cursor(KB::StaticDictionary *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  KB::StaticDictionaryCursor::reset((KB::StaticDictionaryCursor *)a2, this);
}

BOOL KB::StaticDictionary::contains(KB::StaticDictionary *a1, const KB::String *a2, int a3, float a4)
{
  _BOOL8 v5;
  uint64_t v11[3];
  float v12;
  void **v13[31];

  v13[30] = *(void ***)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 == *((_QWORD *)a1 + 1) || *(_WORD *)a2 == 0)
    return 0;
  v12 = 0.0;
  KB::StaticDictionary::candidates_for_string(a1, a2, &v12, v11);
  v5 = 0;
  if (v12 > a4 && v11[1] != v11[0])
  {
    if (a3 == 2)
    {
      v5 = 1;
    }
    else
    {
      KB::word_with_string(a2, v11, a3 == 1, (KB::Word *)v13);
      v5 = LOWORD(v13[0]) != 0;
      KB::Word::~Word((KB::Word *)v13);
    }
  }
  v13[0] = (void **)v11;
  std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](v13);
  return v5;
}

uint64_t KB::StaticDictionary::contains_with_candidates(float a1, float a2, uint64_t a3, KB::String *a4, uint64_t *a5, int a6)
{
  _BOOL8 v7;
  _WORD v9[120];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 <= a2 || a5[1] == *a5)
    return 0;
  if (a6 == 2)
    return 1;
  KB::word_with_string(a4, a5, a6 == 1, (KB::Word *)v9);
  v7 = v9[0] != 0;
  KB::Word::~Word((KB::Word *)v9);
  return v7;
}

uint64_t KB::StaticDictionary::contains_surfaceform_insertion_with_candidates(uint64_t *a1, _BYTE *a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  _BYTE v10[120];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (a3 <= 0.0 || a1[1] == v3)
    return 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    KB::Word::Word((KB::Word *)v10, (const KB::Word *)(v3 + v7));
    if ((v10[106] & 0x40) != 0)
      break;
    KB::Word::~Word((KB::Word *)v10);
    ++v8;
    v3 = *a1;
    v7 += 240;
    if (0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4) <= v8)
      return 0;
  }
  if (a2)
  {
    if (v11)
      *a2 = 1;
  }
  KB::Word::~Word((KB::Word *)v10);
  return 1;
}

uint64_t KB::StaticDictionary::merge_words(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  KB::Word *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  KB::Word *v13;
  _QWORD v14[2];
  BOOL (*v15)(uint64_t, KB::String *);
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (uint64_t *)result;
    v5 = (_QWORD *)(result + 16);
    v6 = *(KB::Word **)(result + 8);
    v7 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v8 = *v4;
      v14[0] = v7;
      v14[1] = 0x40000000;
      v15 = ___ZN2KB16StaticDictionary11merge_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKS6__block_invoke;
      v16 = &__block_descriptor_tmp_7256;
      v17 = v2;
      if ((KB::Word *)v8 == v6)
        goto LABEL_10;
      while (1)
      {
        result = ((uint64_t (*)(_QWORD *, uint64_t))v15)(v14, v8);
        if ((result & 1) != 0)
          break;
        v8 += 240;
        if ((KB::Word *)v8 == v6)
        {
          v8 = (uint64_t)v6;
          break;
        }
      }
      v6 = (KB::Word *)v4[1];
      if ((KB::Word *)v8 == v6)
        break;
      *(float *)(v8 + 48) = *(float *)(v8 + 48) + *(float *)(v2 + 48);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(v2 + 104);
      *(_DWORD *)(v8 + 132) = *(_DWORD *)(v2 + 132);
LABEL_23:
      v2 += 240;
      if (v2 == v3)
        return result;
    }
    v6 = (KB::Word *)v8;
LABEL_10:
    if ((unint64_t)v6 >= *v5)
    {
      v9 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v6 - *v4) >> 4);
      v10 = v9 + 1;
      if (v9 + 1 > 0x111111111111111)
        abort();
      if (0xDDDDDDDDDDDDDDDELL * ((*v5 - *v4) >> 4) > v10)
        v10 = 0xDDDDDDDDDDDDDDDELL * ((*v5 - *v4) >> 4);
      if (0xEEEEEEEEEEEEEEEFLL * ((*v5 - *v4) >> 4) >= 0x88888888888888)
        v11 = 0x111111111111111;
      else
        v11 = v10;
      v18[4] = v5;
      if (v11)
        v11 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v11);
      else
        v12 = 0;
      v13 = (KB::Word *)(v11 + 240 * v9);
      v18[0] = v11;
      v18[1] = v13;
      v18[3] = v11 + 240 * v12;
      KB::Word::Word(v13, (const KB::Word *)v2);
      v18[2] = (char *)v13 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(v4, v18);
      v6 = (KB::Word *)v4[1];
      result = std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      result = (uint64_t)KB::Word::Word(v6, (const KB::Word *)v2);
      v6 = (KB::Word *)((char *)v6 + 240);
    }
    v4[1] = (uint64_t)v6;
    goto LABEL_23;
  }
  return result;
}

BOOL ___ZN2KB16StaticDictionary11merge_wordsERNSt3__16vectorINS_4WordENS1_9allocatorIS3_EEEERKS6__block_invoke(uint64_t a1, KB::String *this)
{
  const KB::String *v2;
  _BOOL8 result;

  v2 = *(const KB::String **)(a1 + 32);
  if (*((_DWORD *)this + 34) != *((_DWORD *)v2 + 34))
    return 0;
  if (v2 == this)
    return *((_DWORD *)this + 30) == *((_DWORD *)v2 + 30);
  result = KB::String::equal(this, v2, 1);
  if ((_DWORD)result)
    return *((_DWORD *)this + 30) == *((_DWORD *)v2 + 30);
  return result;
}

double KB::StaticDictionary::invalid_cursor@<D0>(KB::StaticDictionary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v2;
  *(_DWORD *)(a2 + 48) = 0;
  return result;
}

void KB::StaticDictionary::~StaticDictionary(const void ***this)
{
  KB::StaticDictionary *v2;
  uint64_t v3;
  KB::StaticDictionary *v4;
  uint64_t v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void **v9;
  const void ***v10;

  KB::StaticDictionary::unload(this, -1);
  v2 = (KB::StaticDictionary *)this[21];
  if (v2 == (KB::StaticDictionary *)(this + 18))
  {
    v3 = 4;
    v2 = (KB::StaticDictionary *)(this + 18);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (KB::StaticDictionary *)this[17];
  if (v4 == (KB::StaticDictionary *)(this + 14))
  {
    v5 = 4;
    v4 = (KB::StaticDictionary *)(this + 14);
    goto LABEL_10;
  }
  if (v4)
  {
    v5 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  v6 = this[11];
  if (v6 && *((_BYTE *)this + 86) == 1)
    free(v6);
  v7 = this[9];
  if (v7)
    CFRelease(v7);
  this[9] = 0;
  v8 = this[6];
  if (v8)
  {
    this[7] = v8;
    operator delete(v8);
  }
  v9 = this[3];
  if (v9)
  {
    this[4] = v9;
    operator delete(v9);
  }
  v10 = this;
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v10);
}

void KB::StaticDictionary::unload(const void ***this, int a2)
{
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const char *v23;
  const void **v24;
  const void **v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef cf;
  _BYTE v37[6];
  char v38;
  void *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[8];
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a2 == -1)
    {
      std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this);
      this[4] = this[3];
      v3 = this[6];
    }
    else
    {
      v4 = KB::StaticDictionary::lexicon_index((KB::StaticDictionary *)this, a2);
      if (v4 == -1)
        goto LABEL_21;
      v5 = v4;
      v6 = this[1];
      v7 = (uint64_t)&(*this)[v4];
      v8 = v7 + 8;
      if ((const void **)(v7 + 8) != v6)
      {
        do
        {
          if (*(_QWORD *)v7)
            CFRelease(*(CFTypeRef *)v7);
          v9 = v7 + 8;
          v10 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)v7 = v10;
          v11 = v7 + 16;
          v7 += 8;
        }
        while ((const void **)v11 != v6);
        v8 = (uint64_t)this[1];
        v7 = v9;
      }
      if (v8 != v7)
      {
        v12 = v8;
        do
        {
          v14 = *(const void **)(v12 - 8);
          v12 -= 8;
          v13 = v14;
          if (v14)
            CFRelease(v13);
          *(_QWORD *)(v8 - 8) = 0;
          v8 = v12;
        }
        while (v12 != v7);
      }
      this[1] = (const void **)v7;
      v15 = this[3];
      v16 = this[4];
      v17 = (uint64_t)v15 + 4 * v5;
      v18 = (uint64_t)v16 - v17 - 4;
      if (v16 != (const void **)(v17 + 4))
        memmove((char *)v15 + 4 * v5, (const void *)(v17 + 4), (size_t)v16 - v17 - 4);
      this[4] = (const void **)(v17 + v18);
      v19 = this[7];
      v20 = (uint64_t)this[6] + 4 * v5;
      v21 = (uint64_t)v19 - v20 - 4;
      if (v19 != (const void **)(v20 + 4))
        memmove((void *)v20, (const void *)(v20 + 4), (size_t)v19 - v20 - 4);
      v3 = (const void **)(v20 + v21);
    }
    this[7] = v3;
  }
LABEL_21:
  if (*this != this[1])
  {
    v22 = **this;
    v23 = (const char *)TILocaleIdentifierForLexiconID(*(_DWORD *)this[6]);
    KB::String::String((KB::String *)v44, v23);
    KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&cf, v22, (const KB::String *)v44);
    v24 = this[9];
    if (v24)
      CFRelease(v24);
    v25 = (const void **)cf;
    cf = 0;
    this[9] = v25;
    KB::String::operator=((uint64_t)(this + 10), (KB::String *)v37);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v40);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v42);
    v26 = v43;
    if (v43 == v42)
    {
      v27 = 4;
      v26 = v42;
    }
    else
    {
      if (!v43)
        goto LABEL_34;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_34:
    v33 = v41;
    if (v41 == v40)
    {
      v34 = 4;
      v33 = v40;
    }
    else
    {
      if (!v41)
        goto LABEL_39;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_39:
    if (v39 && v38 == 1)
      free(v39);
    if (cf)
      CFRelease(cf);
    if (v45)
    {
      if (v44[6] == 1)
        free(v45);
    }
    return;
  }
  cf = 0;
  KB::String::String((KB::String *)v37, "");
  v28 = v40;
  v40[0] = &off_1EA107520;
  v29 = v42;
  v41 = v40;
  v42[0] = &off_1EA107568;
  v43 = v42;
  v30 = this[9];
  if (v30)
    CFRelease(v30);
  v31 = (const void **)cf;
  cf = 0;
  this[9] = v31;
  KB::String::operator=((uint64_t)(this + 10), (KB::String *)v37);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v40);
  std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v42);
  if (v43 == v42)
  {
    v32 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_49;
    v32 = 5;
    v29 = v43;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v32))(v29);
LABEL_49:
  if (v41 == v40)
  {
    v35 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_54;
    v35 = 5;
    v28 = v41;
  }
  (*(void (**)(_QWORD *))(*v28 + 8 * v35))(v28);
LABEL_54:
  if (v39 && v38 == 1)
    free(v39);
  if (cf)
    CFRelease(cf);
}

_QWORD *std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

double KB::StaticDictionary::word_with_string@<D0>(KB::StaticDictionary *this@<X0>, const KB::String *a2@<X1>, int a3@<W2>, KB::Word *a4@<X8>)
{
  uint64_t v7;
  double result;
  uint64_t v9;
  _BYTE v10[240];
  char v11;
  _BYTE v12[240];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    *((_OWORD *)a4 + 13) = 0u;
    *((_OWORD *)a4 + 14) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
    return KB::Word::Word(a4);
  }
  v7 = KB::StaticDictionary::lexicon_index(this, a3);
  _os_feature_enabled_impl();
  v12[0] = 0;
  v13 = 0;
  if (v7 == -1)
  {
    if (*((_QWORD *)this + 7) != *((_QWORD *)this + 6))
    {
      v9 = 0;
      do
      {
        KB::word_from_lexicon((KB *)v10, a2, *(const _LXLexicon **)(*(_QWORD *)this + 8 * v9));
        std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>((KB::Word *)v12, (KB::String *)v10);
        if (v11)
          KB::Word::~Word((KB::Word *)v10);
        if (v13)
          goto LABEL_6;
      }
      while (++v9 < (unint64_t)((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2));
    }
LABEL_15:
    *((_OWORD *)a4 + 13) = 0u;
    *((_OWORD *)a4 + 14) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
    return KB::Word::Word(a4);
  }
  KB::word_from_lexicon((KB *)v10, a2, *(const _LXLexicon **)(*(_QWORD *)this + 8 * v7));
  std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>((KB::Word *)v12, (KB::String *)v10);
  if (v11)
    KB::Word::~Word((KB::Word *)v10);
  if (!v13)
    goto LABEL_15;
LABEL_6:
  KB::Word::Word(a4, (const KB::Word *)v12);
  if (v13)
    KB::Word::~Word((KB::Word *)v12);
  return result;
}

void KB::word_from_lexicon(KB *this, const KB::String *a2, const _LXLexicon *a3)
{
  const void *RootCursor;
  uint64_t v5;
  const void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  _BYTE v13[240];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 240) = 0;
    return;
  }
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v5 = LXCursorCreateByAdvancingWithUTF8();
  if (!v5)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 240) = 0;
    if (!RootCursor)
      return;
    goto LABEL_11;
  }
  v6 = (const void *)v5;
  v8 = 0;
  v9 = &v8;
  v10 = 0x12002000000;
  v11 = __Block_byref_object_copy__7263;
  v12 = __Block_byref_object_dispose__7264;
  v13[0] = 0;
  v14 = 0;
  LXCursorEnumerateEntries();
  v7 = v9;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 240) = 0;
  if (*((_BYTE *)v7 + 280))
  {
    KB::Word::Word(this, (const KB::Word *)(v7 + 5));
    *((_BYTE *)this + 240) = 1;
  }
  _Block_object_dispose(&v8, 8);
  if (v14)
    KB::Word::~Word((KB::Word *)v13);
  CFRelease(v6);
  if (RootCursor)
LABEL_11:
    CFRelease(RootCursor);
}

void std::__optional_storage_base<KB::Word,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<KB::Word,false>>(KB::Word *this, KB::String *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  if (*((unsigned __int8 *)this + 240) == *((unsigned __int8 *)a2 + 240))
  {
    if (*((_BYTE *)this + 240))
    {
      KB::String::operator=((uint64_t)this, a2);
      KB::ByteString::operator=((unsigned __int16 *)this + 16, (unsigned __int16 *)a2 + 16);
      v4 = *((_QWORD *)a2 + 6);
      *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
      *((_QWORD *)this + 6) = v4;
      KB::String::operator=((uint64_t)this + 64, (KB::String *)((char *)a2 + 64));
      v5 = *((_OWORD *)a2 + 6);
      v6 = *((_OWORD *)a2 + 7);
      v7 = *((_OWORD *)a2 + 9);
      *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)this + 9) = v7;
      *((_OWORD *)this + 6) = v5;
      *((_OWORD *)this + 7) = v6;
      KB::String::operator=((uint64_t)this + 160, (KB::String *)((char *)a2 + 160));
      *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)this + 200, (uint64_t *)a2 + 25);
    }
  }
  else if (*((_BYTE *)this + 240))
  {
    KB::Word::~Word(this);
    *((_BYTE *)this + 240) = 0;
  }
  else
  {
    KB::Word::Word((uint64_t)this, (uint64_t)a2);
    *((_BYTE *)this + 240) = 1;
  }
}

uint64_t __Block_byref_object_copy__7263(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_BYTE *)(a1 + 40) = 0;
  result = a1 + 40;
  *(_BYTE *)(result + 240) = 0;
  if (*(_BYTE *)(a2 + 280))
  {
    result = KB::Word::Word(result, a2 + 40);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return result;
}

void __Block_byref_object_dispose__7264(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
    KB::Word::~Word((KB::Word *)(a1 + 40));
}

void ___ZN2KBL17word_from_lexiconERKNS_6StringEPK10_LXLexiconj_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v6;
  const KB::String *v7;
  uint64_t v8;
  KB::Word *v9;
  _BYTE v10[8];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = (const __CFString *)LXEntryCopyString();
  KB::utf8_string(v6, (uint64_t)v10);
  v7 = *(const KB::String **)(a1 + 40);
  if (v10 == (_BYTE *)v7 || KB::String::equal((KB::String *)v10, v7, 1))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v9 = (KB::Word *)(v8 + 40);
    if (*(_BYTE *)(v8 + 280))
    {
      KB::Word::~Word(v9);
      *(_BYTE *)(v8 + 280) = 0;
    }
    KB::Word::Word((uint64_t)v9, a2, *(_DWORD *)(a1 + 48));
    *(_BYTE *)(v8 + 280) = 1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 144) |= 0x40000u;
    *a3 = 1;
  }
  if (v11 && v10[6] == 1)
    free(v11);
  if (v6)
    CFRelease(v6);
}

BOOL KB::StaticDictionary::valid(KB::StaticDictionary *this)
{
  return *(_QWORD *)this != *((_QWORD *)this + 1);
}

BOOL KB::StaticDictionary::load(const void ***this, uint64_t a2)
{
  int v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  const void *v7;
  void *v8;
  const void *v9;
  void *v10;
  __CFArray *v11;
  void *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  const void **v18;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void **v26;
  unint64_t v27;
  const void *v28;
  const void **v29;
  const void **v30;
  const void **v31;
  unint64_t v32;
  char *v33;
  const void **v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  char *v46;
  const void **v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  unint64_t v55;
  int v56;
  const void *v57;
  const char *v58;
  const void **v59;
  const void **v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *value;
  const void **v66;
  void *v67;
  unint64_t v68;
  char *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[8];
  void *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 160);
  if (v4 == -1)
  {
    if (*this == this[1])
      goto LABEL_4;
    return 0;
  }
  if ((char *)this[1] - (char *)*this == 24
    || KB::StaticDictionary::lexicon_index((KB::StaticDictionary *)this, v4) != -1)
  {
    return 0;
  }
LABEL_4:
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = (const void *)*MEMORY[0x1E0D437B8];
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)a2);
  v8 = value;
  CFDictionarySetValue(Mutable, v7, value);
  if (v8)
    CFRelease(v8);
  v9 = (const void *)*MEMORY[0x1E0D43798];
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)(a2 + 32));
  v10 = value;
  CFDictionarySetValue(Mutable, v9, value);
  if (v10)
    CFRelease(v10);
  v11 = CFArrayCreateMutable(v5, 1, MEMORY[0x1E0C9B378]);
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)(a2 + 64));
  v12 = value;
  CFArrayAppendValue(v11, value);
  if (v12)
    CFRelease(v12);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D437A0], v11);
  v13 = LXLexiconCreate();
  v14 = v13 != 0;
  if (!v13)
    goto LABEL_82;
  v15 = v13;
  v16 = (unint64_t)this[2];
  v17 = (uint64_t *)this[1];
  if ((unint64_t)v17 >= v16)
  {
    v20 = (uint64_t *)*this;
    v21 = ((char *)v17 - (char *)*this) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      goto LABEL_86;
    v23 = v16 - (_QWORD)v20;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    v69 = (char *)(this + 2);
    if (v24)
    {
      v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v24);
      v20 = (uint64_t *)*this;
      v17 = (uint64_t *)this[1];
    }
    else
    {
      v25 = 0;
    }
    v26 = (const void **)(v24 + 8 * v21);
    v27 = v24 + 8 * v25;
    v68 = v27;
    *v26 = (const void *)v15;
    v67 = v26 + 1;
    if (v17 == v20)
    {
      v18 = v26 + 1;
    }
    else
    {
      do
      {
        v28 = (const void *)*--v17;
        *v17 = 0;
        *--v26 = v28;
      }
      while (v17 != v20);
      v18 = (const void **)v67;
      v27 = v68;
    }
    v29 = *this;
    v30 = this[1];
    *this = v26;
    this[1] = v18;
    v31 = this[2];
    this[2] = (const void **)v27;
    v67 = v30;
    v68 = (unint64_t)v31;
    value = v29;
    v66 = v29;
    std::__split_buffer<KB::retain_ptr<_LXLexicon const*>>::~__split_buffer((uint64_t)&value);
  }
  else
  {
    *v17 = v13;
    v18 = (const void **)(v17 + 1);
  }
  this[1] = v18;
  v33 = (char *)this[4];
  v32 = (unint64_t)this[5];
  if ((unint64_t)v33 >= v32)
  {
    v35 = (char *)this[3];
    v36 = (v33 - v35) >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      goto LABEL_86;
    v38 = v32 - (_QWORD)v35;
    if (v38 >> 1 > v37)
      v37 = v38 >> 1;
    v39 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
    v40 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v39)
      v40 = v37;
    if (v40)
    {
      v40 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v40);
      v35 = (char *)this[3];
      v33 = (char *)this[4];
    }
    else
    {
      v41 = 0;
    }
    v42 = (_DWORD *)(v40 + 4 * v36);
    v43 = v40 + 4 * v41;
    *v42 = *(_DWORD *)(a2 + 168);
    v34 = (const void **)(v42 + 1);
    while (v33 != v35)
    {
      v44 = *((_DWORD *)v33 - 1);
      v33 -= 4;
      *--v42 = v44;
    }
    this[3] = (const void **)v42;
    this[4] = v34;
    this[5] = (const void **)v43;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *(_DWORD *)v33 = *(_DWORD *)(a2 + 168);
    v34 = (const void **)(v33 + 4);
  }
  this[4] = v34;
  v46 = (char *)this[7];
  v45 = (unint64_t)this[8];
  if ((unint64_t)v46 < v45)
  {
    *(_DWORD *)v46 = *(_DWORD *)(a2 + 160);
    v47 = (const void **)(v46 + 4);
    goto LABEL_61;
  }
  v48 = (char *)this[6];
  v49 = (v46 - v48) >> 2;
  v50 = v49 + 1;
  if ((unint64_t)(v49 + 1) >> 62)
LABEL_86:
    abort();
  v51 = v45 - (_QWORD)v48;
  if (v51 >> 1 > v50)
    v50 = v51 >> 1;
  v39 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
  v52 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v39)
    v52 = v50;
  if (v52)
  {
    v52 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v52);
    v48 = (char *)this[6];
    v46 = (char *)this[7];
  }
  else
  {
    v53 = 0;
  }
  v54 = (_DWORD *)(v52 + 4 * v49);
  v55 = v52 + 4 * v53;
  *v54 = *(_DWORD *)(a2 + 160);
  v47 = (const void **)(v54 + 1);
  while (v46 != v48)
  {
    v56 = *((_DWORD *)v46 - 1);
    v46 -= 4;
    *--v54 = v56;
  }
  this[6] = (const void **)v54;
  this[7] = v47;
  this[8] = (const void **)v55;
  if (v48)
    operator delete(v48);
LABEL_61:
  this[7] = v47;
  if (*this != this[1])
  {
    v57 = **this;
    v58 = (const char *)TILocaleIdentifierForLexiconID(*(_DWORD *)this[6]);
    KB::String::String((KB::String *)v74, v58);
    KB::CollatorWrapper::CollatorWrapper((KB::CollatorWrapper *)&value, v57, (const KB::String *)v74);
    v59 = this[9];
    if (v59)
      CFRelease(v59);
    v60 = (const void **)value;
    value = 0;
    this[9] = v60;
    KB::String::operator=((uint64_t)(this + 10), (KB::String *)&v66);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 14, (uint64_t)v70);
    std::__function::__value_func<KB::ByteString ()(KB::String const&)>::operator=[abi:nn180100](this + 18, (uint64_t)v72);
    v61 = v73;
    if (v73 == v72)
    {
      v62 = 4;
      v61 = v72;
    }
    else
    {
      if (!v73)
        goto LABEL_69;
      v62 = 5;
    }
    (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_69:
    v63 = v71;
    if (v71 == v70)
    {
      v64 = 4;
      v63 = v70;
    }
    else
    {
      if (!v71)
        goto LABEL_74;
      v64 = 5;
    }
    (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_74:
    if (v67 && BYTE6(v66) == 1)
      free(v67);
    if (value)
      CFRelease(value);
    if (v75 && v74[6] == 1)
      free(v75);
  }
LABEL_82:
  if (v11)
    CFRelease(v11);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

void KB::StaticDictionary::derive_words_at_cursor(uint64_t a1, uint64_t a2, KB::StaticDictionaryCursor *a3)
{
  KB::StaticDictionaryCursor::derive_words(a3, a2);
}

BOOL KB::StaticDictionary::is_lexicon_loaded(KB::StaticDictionary *this, int a2)
{
  return KB::StaticDictionary::lexicon_index(this, a2) != -1;
}

float KB::StaticDictionary::lexicon_weight(KB::StaticDictionary *this, int a2)
{
  uint64_t v3;

  v3 = KB::StaticDictionary::lexicon_index(this, a2);
  if (v3 == -1)
    return 0.0;
  else
    return *(float *)(*((_QWORD *)this + 3) + 4 * v3);
}

uint64_t KB::StaticDictionary::set_lexicon_weight(KB::StaticDictionary *this, int a2, float a3)
{
  uint64_t result;

  result = KB::StaticDictionary::lexicon_index(this, a2);
  if (result != -1)
    *(float *)(*((_QWORD *)this + 3) + 4 * result) = a3;
  return result;
}

id TISupplementalLexiconControllerConnectionIdentifierToObjectPointerFunctions()
{
  void *v0;

  v0 = (void *)objc_opt_new();
  objc_msgSend(v0, "setHashFunction:", supplementalLexiconControllerIdentifierToObjectHash);
  objc_msgSend(v0, "setIsEqualFunction:", supplementalLexiconControllerAreIdentifiersOrObjectsEqual);
  return v0;
}

uint64_t supplementalLexiconControllerIdentifierToObjectHash(void *a1)
{
  id v1;
  int v2;
  int v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v2 = objc_msgSend(v1, "intValue");
  else
    v2 = objc_msgSend(v1, "connectionIdentifier");
  v3 = v2;

  return v3;
}

BOOL supplementalLexiconControllerAreIdentifiersOrObjectsEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  int v6;
  int v7;
  _BOOL8 v8;

  v3 = a2;
  v4 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v5 = objc_msgSend(v4, "intValue");
  else
    v5 = objc_msgSend(v4, "connectionIdentifier");
  v6 = v5;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v7 = objc_msgSend(v3, "intValue");
  else
    v7 = objc_msgSend(v3, "connectionIdentifier");
  v8 = v6 == v7;

  return v8;
}

uint64_t TI::CP::ShapeRecord::ShapeRecord(uint64_t a1, __int128 *a2, const std::vector<unsigned int> *a3, int a4)
{
  std::string *v7;
  __int128 v8;
  const std::string *v9;
  std::vector<unsigned int>::pointer begin;
  void *v12[3];
  std::vector<unsigned int> v13;
  void *__p;
  uint64_t v15;
  uint64_t v16;

  v7 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 120) = a4;
  std::vector<TI::CP::PathSample>::vector(v12, (uint64_t)a3);
  std::vector<unsigned int>::vector(&v13, a3 + 1);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v9 = (const std::string *)TI::CP::PathEncoder::encode_path((TI::CP::PathEncoder *)v12);
  std::string::operator=((std::string *)(a1 + 80), v9);
  begin = a3->__begin_;
  *(_DWORD *)(a1 + 104) = -1431655765 * ((unint64_t)((char *)a3->__end_ - (char *)a3->__begin_) >> 4);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)begin + 2);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  if (v13.__begin_)
  {
    v13.__end_ = v13.__begin_;
    operator delete(v13.__begin_);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  return a1;
}

_QWORD *std::vector<TI::CP::PathSample>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<TI::CP::PathSample>::__vallocate[abi:nn180100](a1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

BOOL TI::CP::ShapeStore::attempt_database_migration(sqlite3 **this)
{
  sqlite3 *v2;
  int v3;
  _BOOL8 v4;
  sqlite3 *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  std::ios_base *v13;
  std::string *v14;
  sqlite3 *v15;
  char *file_path_for_bundle_resource;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  sqlite3_stmt *v21;
  sqlite3_stmt *v22;
  std::ios_base *v23;
  std::string *p_p;
  int v25;
  sqlite3 *v27;
  int v28;
  std::string __p;
  sqlite3_stmt *ppStmt;
  uint64_t v31;
  _BYTE v32[408];
  _QWORD v33[21];

  v33[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  ppStmt = 0;
  if (!sqlite3_prepare_v2(v2, "SELECT value FROM properties WHERE key = 'version'", -1, &ppStmt, 0))
  {
    if (sqlite3_step(ppStmt) == 100)
    {
      v3 = sqlite3_column_int(ppStmt, 0);
      sqlite3_finalize(ppStmt);
      if (v3)
      {
        v4 = 1;
LABEL_15:
        if (v3 != 2)
        {
          v15 = *this;
          file_path_for_bundle_resource = get_file_path_for_bundle_resource(CFSTR("shape_store_schema_migration"), CFSTR("sql"));
          if (!file_path_for_bundle_resource)
            return 0;
          v17 = file_path_for_bundle_resource;
          v18 = MEMORY[0x1E0DE4FA8];
          v19 = MEMORY[0x1E0DE4FA8] + 64;
          v20 = MEMORY[0x1E0DE4F40];
          v21 = *(sqlite3_stmt **)(MEMORY[0x1E0DE4F40] + 8);
          v22 = *(sqlite3_stmt **)(MEMORY[0x1E0DE4F40] + 16);
          v33[0] = MEMORY[0x1E0DE4FA8] + 64;
          ppStmt = v21;
          *(sqlite3_stmt **)((char *)&ppStmt + *((_QWORD *)v21 - 3)) = v22;
          v31 = 0;
          v23 = (std::ios_base *)((char *)&ppStmt + *((_QWORD *)ppStmt - 3));
          std::ios_base::init(v23, v32);
          v23[1].__vftable = 0;
          v23[1].__fmtflags_ = -1;
          ppStmt = (sqlite3_stmt *)(v18 + 24);
          v33[0] = v19;
          MEMORY[0x1DF0A1F94](v32);
          if (!std::filebuf::open())
            std::ios_base::clear((std::ios_base *)((char *)&ppStmt + *((_QWORD *)ppStmt - 3)), *(_DWORD *)&v32[*((_QWORD *)ppStmt - 3) + 16] | 4);
          std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(_QWORD **)&v32[*((_QWORD *)ppStmt - 3) + 24]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v25 = sqlite3_exec(v15, (const char *)p_p, 0, 0, 0);
          free(v17);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ppStmt = *(sqlite3_stmt **)v20;
          *(sqlite3_stmt **)((char *)&ppStmt + *((_QWORD *)ppStmt - 3)) = *(sqlite3_stmt **)(v20 + 24);
          MEMORY[0x1DF0A1FA0](v32);
          std::istream::~istream();
          MEMORY[0x1DF0A20F0](v33);
          if (v25)
            return 0;
          v27 = *this;
          ppStmt = 0;
          v28 = sqlite3_prepare_v2(v27, "INSERT OR REPLACE INTO properties (key, value) VALUES ('version', ?)", -1, &ppStmt, 0);
          v4 = v28 == 0;
          if (v28)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CPShapeStore: Unable to update library version.", (uint8_t *)&__p, 2u);
            }
          }
          else
          {
            sqlite3_bind_int(ppStmt, 1, 2);
            sqlite3_step(ppStmt);
            sqlite3_finalize(ppStmt);
          }
        }
        return v4;
      }
    }
    else
    {
      sqlite3_finalize(ppStmt);
    }
  }
  v5 = *this;
  v6 = get_file_path_for_bundle_resource(CFSTR("shape_store_schema"), CFSTR("sql"));
  if (!v6)
    return 0;
  v7 = v6;
  v8 = MEMORY[0x1E0DE4FA8];
  v9 = MEMORY[0x1E0DE4FA8] + 64;
  v10 = MEMORY[0x1E0DE4F40];
  v11 = *(sqlite3_stmt **)(MEMORY[0x1E0DE4F40] + 8);
  v12 = *(sqlite3_stmt **)(MEMORY[0x1E0DE4F40] + 16);
  v33[0] = MEMORY[0x1E0DE4FA8] + 64;
  ppStmt = v11;
  *(sqlite3_stmt **)((char *)&ppStmt + *((_QWORD *)v11 - 3)) = v12;
  v31 = 0;
  v13 = (std::ios_base *)((char *)&ppStmt + *((_QWORD *)ppStmt - 3));
  std::ios_base::init(v13, v32);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  ppStmt = (sqlite3_stmt *)(v8 + 24);
  v33[0] = v9;
  MEMORY[0x1DF0A1F94](v32);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)&ppStmt + *((_QWORD *)ppStmt - 3)), *(_DWORD *)&v32[*((_QWORD *)ppStmt - 3) + 16] | 4);
  std::string::__init_with_sentinel[abi:nn180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(_QWORD **)&v32[*((_QWORD *)ppStmt - 3) + 24]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v4 = sqlite3_exec(v5, (const char *)v14, 0, 0, 0) == 0;
  free(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ppStmt = *(sqlite3_stmt **)v10;
  *(sqlite3_stmt **)((char *)&ppStmt + *((_QWORD *)ppStmt - 3)) = *(sqlite3_stmt **)(v10 + 24);
  MEMORY[0x1DF0A1FA0](v32);
  std::istream::~istream();
  MEMORY[0x1DF0A20F0](v33);
  v3 = 0;
  if (v4)
    goto LABEL_15;
  return v4;
}

uint64_t TI::CP::ShapeStore::ShapeStore(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const __CFURL *v6;
  const __CFString *v7;
  CFIndex MaximumSizeOfFileSystemRepresentation;
  char *v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)a2;
  v4 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    CFRetain(v4);
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = *(const void **)(a2 + 16);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    CFRetain(v5);
    *(_QWORD *)(a1 + 48) = v5;
  }
  *(_BYTE *)(a1 + 64) = 0;
  v6 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFURLRef *)(a2 + 8), *(CFStringRef *)(a2 + 16), 0);
  v7 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
  if (v6)
    CFRelease(v6);
  MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(v7);
  v9 = (char *)malloc_type_malloc(MaximumSizeOfFileSystemRepresentation, 0x8BFE11FuLL);
  if (!CFStringGetFileSystemRepresentation(v7, v9, MaximumSizeOfFileSystemRepresentation) && v9)
  {
    MEMORY[0x1DF0A2144](v9, 0x1000C4077774924);
    v9 = 0;
  }
  if (v7)
    CFRelease(v7);
  TI::CP::ShapeStore::create_store_at_path((sqlite3 **)a1, v9);
  if (v9)
    MEMORY[0x1DF0A2144](v9, 0x1000C4077774924);
  return a1;
}

{
  const char *v4;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 32) = 1050253722;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = CFSTR("shapestore.db");
  CFRetain(CFSTR("shapestore.db"));
  *(_QWORD *)(a1 + 48) = CFSTR("shapestore.db");
  *(_BYTE *)(a1 + 64) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  TI::CP::ShapeStore::create_store_at_path((sqlite3 **)a1, v4);
  return a1;
}

uint64_t TI::CP::ShapeStore::create_store_at_path(sqlite3 **this, const char *a2)
{
  uint64_t result;
  sqlite3 *ppDb;
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)TI_DEVICE_UNLOCKED_SINCE_BOOT();
  if ((_DWORD)result)
  {
    ppDb = 0;
    if (sqlite3_open_v2(a2, &ppDb, 3145734, 0))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v7 = a2;
        _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CPShapeStore: Error creating/opening database at: %s", buf, 0xCu);
      }
      return sqlite3_close(ppDb);
    }
    result = TI_IS_FILE_CLASS_C((uint64_t)a2);
    if ((result & 1) == 0)
    {
      result = TI_SET_PROTECTION_CLASS_C((uint64_t)a2);
      if ((result & 1) == 0)
        return sqlite3_close(ppDb);
    }
    if (ppDb)
    {
      *this = ppDb;
      return TI::CP::ShapeStore::attempt_database_migration(this);
    }
  }
  return result;
}

void TI::CP::ShapeStore::~ShapeStore(char **this)
{
  int v2;
  int v3;
  char *v4;
  char *v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  TI::CP::ShapeStore::clear_statement_cache((TI::CP::ShapeStore *)this);
  v2 = sqlite3_close((sqlite3 *)*this);
  if (v2)
  {
    v3 = v2;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CPShapeStore: Error closing database: %d", (uint8_t *)v6, 8u);
    }
  }
  v4 = this[6];
  if (v4)
    CFRelease(v4);
  this[6] = 0;
  v5 = this[5];
  if (v5)
    CFRelease(v5);
  this[5] = 0;
  std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(this[2]);
}

void TI::CP::ShapeStore::clear_statement_cache(TI::CP::ShapeStore *this)
{
  _QWORD *v2;
  char *v3;
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  BOOL v9;
  std::string v10;
  uint8_t buf[4];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (_QWORD *)((char *)this + 16))
  {
    v4 = MEMORY[0x1E0C81028];
    do
    {
      if (*((char *)v2 + 55) < 0)
        std::string::__init_copy_ctor_external(&v10, (const std::string::value_type *)v2[4], v2[5]);
      else
        v10 = *(std::string *)(v2 + 4);
      v5 = sqlite3_finalize((sqlite3_stmt *)v2[7]);
      if (v5)
      {
        v6 = v5;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v12 = v6;
          _os_log_error_impl(&dword_1DA6F2000, v4, OS_LOG_TYPE_ERROR, "CPShapeStore: Error finalizing statement: %d", buf, 8u);
        }
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      v7 = (char *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)v2[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*((char **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v3;
}

void std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,sqlite3_stmt *>,std::__map_value_compare<std::string,std::__value_type<std::string,sqlite3_stmt *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,sqlite3_stmt *>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

sqlite3_stmt *TI::CP::ShapeStore::cached_statement_for_query(uint64_t a1, char *a2)
{
  uint64_t **v4;
  _QWORD *v5;
  uint64_t **v6;
  char v7;
  _QWORD *v8;
  const char *v9;
  int v10;
  sqlite3_stmt *v11;
  uint64_t *v12;
  uint64_t **v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  uint64_t *v19;
  sqlite3_stmt *ppStmt;
  uint8_t buf[4];
  char *v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  ppStmt = 0;
  v4 = (uint64_t **)(a1 + 16);
  v5 = *(_QWORD **)(a1 + 16);
  if (!v5)
    goto LABEL_12;
  v6 = (uint64_t **)(a1 + 16);
  do
  {
    v7 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, a2);
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7 >= 0)
      v6 = (uint64_t **)v5;
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 != v4
    && (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4) & 0x80) == 0)
  {
    return (sqlite3_stmt *)v6[7];
  }
LABEL_12:
  v9 = a2;
  if (a2[23] < 0)
    v9 = *(const char **)a2;
  v10 = sqlite3_prepare_v2(*(sqlite3 **)a1, v9, -1, &ppStmt, 0);
  v11 = ppStmt;
  if (!ppStmt || v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      if (a2[23] < 0)
        a2 = *(char **)a2;
      v17 = sqlite3_errmsg(*(sqlite3 **)a1);
      *(_DWORD *)buf = 136315394;
      v23 = a2;
      v24 = 2080;
      v25 = v17;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CPShapeStore: Error preparing statement: %s. ERROR: %s", buf, 0x16u);
    }
  }
  else
  {
    while (1)
    {
      v12 = *v4;
      v13 = v4;
      if (!*v4)
        break;
      while (1)
      {
        v4 = (uint64_t **)v12;
        v14 = v12 + 4;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v12 + 4) & 0x80) != 0)
          break;
        if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v14, a2) & 0x80) == 0)
        {
          v15 = v4;
          goto LABEL_31;
        }
        v13 = v4 + 1;
        v12 = v4[1];
        if (!v12)
          goto LABEL_20;
      }
    }
LABEL_20:
    v15 = operator new(0x40uLL);
    v16 = (std::string *)(v15 + 4);
    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v15[6] = *((_QWORD *)a2 + 2);
    }
    v15[7] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = v4;
    *v13 = v15;
    v18 = **(_QWORD **)(a1 + 8);
    v19 = v15;
    if (v18)
    {
      *(_QWORD *)(a1 + 8) = v18;
      v19 = *v13;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v19);
    ++*(_QWORD *)(a1 + 24);
LABEL_31:
    v15[7] = v11;
  }
  return ppStmt;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t *a2, const std::vector<unsigned int> *a3)
{
  void **v6;
  _BOOL8 v7;
  void *v9[3];
  std::vector<unsigned int> v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;

  std::vector<TI::CP::PathSample>::vector(v9, (uint64_t)a3);
  std::vector<unsigned int>::vector(&v10, a3 + 1);
  __p = 0;
  v12 = 0;
  v13 = 0;
  v6 = TI::CP::PathEncoder::encode_path((TI::CP::PathEncoder *)v9);
  v7 = TI::CP::ShapeStore::store_shape(a1, a2, (const void **)v6, -1431655765 * ((unint64_t)((char *)a3->__end_ - (char *)a3->__begin_) >> 4), *((double *)a3->__begin_ + 2));
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return v7;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t *a2, const void **a3, int a4, double a5)
{
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t i;
  int v19;
  int v20;
  char v21;
  const void *v22;
  int v23;
  int v24;
  _BOOL8 v25;
  void *__p[2];
  uint64_t v28;
  void *v29[2];
  char v30;

  std::string::basic_string[abi:nn180100]<0>(v29, "INSERT INTO shapes (size, word_id, string_representation, shape_data, timestamp) VALUES (:size, :word_id, :string_representation, :shape_data, :timestamp)");
  v10 = TI::CP::ShapeStore::cached_statement_for_query(a1, (char *)v29);
  v11 = v10;
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (v11)
      goto LABEL_3;
    return 0;
  }
  if (!v10)
    return 0;
LABEL_3:
  v12 = sqlite3_bind_parameter_index(v11, ":size");
  sqlite3_bind_int(v11, v12, a4);
  v13 = sqlite3_bind_parameter_index(v11, ":word_id");
  sqlite3_bind_int(v11, v13, 0);
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = a2;
  else
    v15 = (uint64_t *)*a2;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a2 + 23);
  else
    v16 = a2[1];
  v17 = __p;
  if (v16)
  {
    for (i = 0; i != v16; ++i)
      *((_BYTE *)__p + i) = __tolower(*((char *)v15 + i));
    if (v28 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
  }
  v19 = sqlite3_bind_parameter_index(v11, ":string_representation");
  sqlite3_bind_text(v11, v19, (const char *)v17, -1, 0);
  v20 = sqlite3_bind_parameter_index(v11, ":shape_data");
  v21 = *((_BYTE *)a3 + 23);
  if (v21 >= 0)
    v22 = a3;
  else
    v22 = *a3;
  if (v21 >= 0)
    v23 = *((unsigned __int8 *)a3 + 23);
  else
    v23 = *((_DWORD *)a3 + 2);
  sqlite3_bind_blob(v11, v20, v22, v23, 0);
  v24 = sqlite3_bind_parameter_index(v11, ":timestamp");
  sqlite3_bind_double(v11, v24, a5);
  v25 = sqlite3_step(v11) == 0;
  sqlite3_reset(v11);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  return v25;
}

BOOL TI::CP::ShapeStore::store_shape(uint64_t a1, uint64_t a2)
{
  return TI::CP::ShapeStore::store_shape(a1, (uint64_t *)(a2 + 8), (const void **)(a2 + 80), *(_DWORD *)(a2 + 104), *(double *)(a2 + 112));
}

void TI::CP::ShapeStore::recall_shapes(TI::CP::ShapeStore *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  TI::CP::ShapeStore *v6;
  char *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  int v10;
  char *v11;
  const void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void *v23;
  int64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  const void *v28;
  int64_t v29;
  char *v30;
  uint64_t v31;
  TI::CP::ShapeStore *v32;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  int v43;
  void *v44;
  char *v45;
  char *v46;
  void *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::string v53;
  std::string __dst;
  std::string __str;
  void *v56[2];
  char v57;

  v6 = this;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*((_BYTE *)this + 64))
    v7 = "SELECT ROWID, string_representation, shape_data, ratifications, rejections, origin_type FROM shapes WHERE size "
         ">= ? AND size < ? AND timestamp < ?";
  else
    v7 = "SELECT ROWID, string_representation, shape_data, ratifications, rejections, origin_type FROM shapes WHERE size "
         ">= ? AND size < ?";
  std::string::basic_string[abi:nn180100]<0>(v56, v7);
  v8 = TI::CP::ShapeStore::cached_statement_for_query((uint64_t)v6, (char *)v56);
  v9 = v8;
  if ((v57 & 0x80000000) == 0)
  {
    if (!v8)
      goto LABEL_54;
    goto LABEL_8;
  }
  operator delete(v56[0]);
  if (v9)
  {
LABEL_8:
    sqlite3_bind_int(v9, 1, a2);
    sqlite3_bind_int(v9, 2, a3);
    if (*((_BYTE *)v6 + 64))
      sqlite3_bind_double(v9, 3, *((double *)v6 + 7));
    v32 = v6;
    while (1)
    {
      do
      {
        if (sqlite3_step(v9) != 100)
        {
          sqlite3_reset(v9);
          v6 = v32;
          goto LABEL_54;
        }
        v10 = sqlite3_column_int(v9, 0);
        v11 = (char *)sqlite3_column_text(v9, 1);
        v12 = sqlite3_column_blob(v9, 2);
        v13 = sqlite3_column_bytes(v9, 2);
        v14 = sqlite3_column_int(v9, 3);
        v15 = sqlite3_column_int(v9, 4);
        v16 = sqlite3_column_int(v9, 5);
      }
      while (!*v11 || !v12);
      v17 = v16;
      std::string::basic_string[abi:nn180100]<0>(&__str, v11);
      if (v13 < 0)
        goto LABEL_55;
      v18 = v13;
      if (v13 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
      p_dst = &__dst;
      if (v13)
        goto LABEL_21;
LABEL_22:
      p_dst->__r_.__value_.__s.__data_[v18] = 0;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      v22 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v53, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v53 = __dst;
      TI::CP::PathEncoder::decode_path((TI::CP::PathEncoder *)&v50);
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v23 = (const void *)v50;
      v24 = *((_QWORD *)&v50 + 1) - v50;
      if (*((_QWORD *)&v50 + 1) != (_QWORD)v50)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v24 >> 4) >= 0x555555555555556)
          goto LABEL_55;
        v25 = v22;
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(0xAAAAAAAAAAAAAAABLL * (v24 >> 4));
        v44 = v26;
        v45 = v26;
        v46 = &v26[48 * v27];
        memmove(v26, v23, v24);
        v45 = &v26[16 * (v24 >> 4)];
        v22 = v25;
      }
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v28 = (const void *)*((_QWORD *)&v51 + 1);
      v29 = v52 - *((_QWORD *)&v51 + 1);
      if ((_QWORD)v52 != *((_QWORD *)&v51 + 1))
      {
        if ((uint64_t)(v52 - *((_QWORD *)&v51 + 1)) < 0)
LABEL_55:
          abort();
        v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v29 >> 2);
        v47 = v30;
        v48 = v30;
        v49 = &v30[4 * v31];
        memmove(v30, v28, v29);
        v48 = &v30[v29];
      }
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = v10;
      TI::CP::Path::operator=((char **)&v36 + 1, (const void **)&v44);
      std::string::operator=((std::string *)&v35, &__str);
      v42 = v14;
      v43 = v15;
      v41 = v17;
      std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](a4, (uint64_t)&v34);
      if (SHIBYTE(v40) < 0)
        operator delete(*((void **)&v39 + 1));
      if ((_QWORD)v38)
      {
        *((_QWORD *)&v38 + 1) = v38;
        operator delete((void *)v38);
      }
      if (*((_QWORD *)&v36 + 1))
      {
        *(_QWORD *)&v37 = *((_QWORD *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (SBYTE7(v36) < 0)
        operator delete((void *)v35);
      if (v47)
      {
        v48 = (char *)v47;
        operator delete(v47);
      }
      if (v44)
      {
        v45 = (char *)v44;
        operator delete(v44);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (*((_QWORD *)&v51 + 1))
      {
        *(_QWORD *)&v52 = *((_QWORD *)&v51 + 1);
        operator delete(*((void **)&v51 + 1));
      }
      if ((_QWORD)v50)
      {
        *((_QWORD *)&v50 + 1) = v50;
        operator delete((void *)v50);
      }
      if (v22 < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v20 = v13 | 7;
    v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_21:
    memmove(p_dst, v12, v18);
    goto LABEL_22;
  }
LABEL_54:
  *((_BYTE *)v6 + 64) = 0;
}

char **TI::CP::Path::operator=(char **a1, const void **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;

  if (a1 != (char **)a2)
  {
    v4 = (char *)*a2;
    v5 = (char *)a2[1];
    v6 = v5 - (_BYTE *)*a2;
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    v8 = (uint64_t)a1[2];
    v9 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) >= v7)
    {
      v13 = a1[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 4) < v7)
      {
        v14 = &v4[16 * ((v13 - v9) >> 4)];
        if (v13 != v9)
        {
          memmove(*a1, *a2, v13 - v9);
          v9 = a1[1];
        }
        v6 = v5 - v14;
        if (v5 == v14)
          goto LABEL_20;
        v15 = v9;
        v16 = v14;
        goto LABEL_19;
      }
    }
    else
    {
      if (v9)
      {
        a1[1] = v9;
        operator delete(v9);
        v8 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v7 > 0x555555555555555)
        abort();
      v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
      v11 = 2 * v10;
      if (2 * v10 <= v7)
        v11 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
      if (v10 >= 0x2AAAAAAAAAAAAAALL)
        v12 = 0x555555555555555;
      else
        v12 = v11;
      std::vector<TI::CP::PathSample>::__vallocate[abi:nn180100](a1, v12);
      v9 = a1[1];
    }
    if (v5 == v4)
    {
LABEL_20:
      a1[1] = &v9[v6];
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((char *)a1 + 24, (char *)a2[3], (uint64_t)a2[4], ((_BYTE *)a2[4] - (_BYTE *)a2[3]) >> 2);
      return a1;
    }
    v15 = v9;
    v16 = v4;
LABEL_19:
    memmove(v15, v16, v6);
    goto LABEL_20;
  }
  return a1;
}

void std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  char *v23;

  v4 = a1[1];
  v5 = a1[2];
  if (v4 < v5)
  {
    v6 = std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>(v4, a2)
       + 136;
    goto LABEL_21;
  }
  v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - *a1) >> 3);
  if (v7 + 1 > 0x1E1E1E1E1E1E1E1)
    abort();
  v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0xF0F0F0F0F0F0F0)
    v10 = 0x1E1E1E1E1E1E1E1;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(136 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[136 * v10];
  v13 = std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>((uint64_t)&v11[136 * v7], a2);
  v6 = v13 + 136;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v13;
    a1[1] = v6;
    a1[2] = (uint64_t)v12;
    if (!v15)
      goto LABEL_21;
    goto LABEL_20;
  }
  v16 = 0;
  do
  {
    v17 = &v15[v16];
    v18 = v13 + v16;
    *(_DWORD *)(v18 - 136) = *(_DWORD *)&v15[v16 - 136];
    v19 = *(_OWORD *)&v15[v16 - 128];
    *(_QWORD *)(v18 - 112) = *(_QWORD *)&v15[v16 - 112];
    *(_OWORD *)(v18 - 128) = v19;
    *((_QWORD *)v17 - 15) = 0;
    *((_QWORD *)v17 - 14) = 0;
    *((_QWORD *)v17 - 16) = 0;
    *(_QWORD *)(v18 - 104) = 0;
    *(_QWORD *)(v18 - 96) = 0;
    *(_QWORD *)(v18 - 88) = 0;
    *(_OWORD *)(v18 - 104) = *(_OWORD *)&v15[v16 - 104];
    *(_QWORD *)(v18 - 88) = *(_QWORD *)&v15[v16 - 88];
    *((_QWORD *)v17 - 13) = 0;
    *((_QWORD *)v17 - 12) = 0;
    *((_QWORD *)v17 - 11) = 0;
    *(_QWORD *)(v18 - 80) = 0;
    *(_QWORD *)(v18 - 72) = 0;
    *(_QWORD *)(v18 - 64) = 0;
    *(_OWORD *)(v18 - 80) = *(_OWORD *)&v15[v16 - 80];
    *(_QWORD *)(v18 - 64) = *(_QWORD *)&v15[v16 - 64];
    *((_QWORD *)v17 - 10) = 0;
    *((_QWORD *)v17 - 9) = 0;
    v20 = *(_OWORD *)&v15[v16 - 56];
    v21 = *(_QWORD *)&v15[v16 - 40];
    *((_QWORD *)v17 - 8) = 0;
    *(_QWORD *)(v18 - 40) = v21;
    *(_OWORD *)(v18 - 56) = v20;
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 7) = 0;
    v22 = *(_OWORD *)&v15[v16 - 32];
    *(_OWORD *)(v18 - 20) = *(_OWORD *)&v15[v16 - 20];
    *(_OWORD *)(v18 - 32) = v22;
    v16 -= 136;
  }
  while (&v15[v16] != v14);
  v23 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v13 + v16;
  a1[1] = v6;
  a1[2] = (uint64_t)v12;
  if (v15 != v23)
  {
    do
    {
      v15 -= 136;
      std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>((uint64_t)v15);
    }
    while (v15 != v23);
    v15 = v23;
  }
  if (v15)
LABEL_20:
    operator delete(v15);
LABEL_21:
  a1[1] = v6;
}

uint64_t std::construct_at[abi:nn180100]<TI::CP::ShapeRecord,TI::CP::ShapeRecord const&,TI::CP::ShapeRecord*>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  std::vector<TI::CP::PathSample>::vector((_QWORD *)(a1 + 32), a2 + 32);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 56), (const std::vector<unsigned int> *)(a2 + 56));
  v6 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 116) = *(_OWORD *)(a2 + 116);
  *(_OWORD *)(a1 + 104) = v8;
  return a1;
}

void std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

BOOL TI::CP::ShapeStore::increment_row_with_column_name(uint64_t a1, const char *a2, int a3)
{
  const char *v4;
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  int v11;
  _BOOL8 v12;
  std::string v14;
  std::string __p;
  uint8_t buf[4];
  int v17;
  uint64_t v18;

  v4 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  if (a2[23] < 0)
    v6 = *((_QWORD *)a2 + 1);
  else
    v6 = *((unsigned __int8 *)a2 + 23);
  v7 = 2 * v6 + 45;
  std::string::basic_string[abi:nn180100](&__p, v7, 32);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4[23] < 0)
    v4 = *(const char **)v4;
  snprintf((char *)p_p, v7, "UPDATE shapes SET %s = %s + 1 WHERE ROWID = ?", v4, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v14 = __p;
  v9 = TI::CP::ShapeStore::cached_statement_for_query(a1, (char *)&v14);
  v10 = v9;
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_14;
LABEL_19:
    v12 = 1;
    goto LABEL_20;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (!v10)
    goto LABEL_19;
LABEL_14:
  sqlite3_bind_int(v10, 1, a3);
  v11 = sqlite3_step(v10);
  v12 = v11 != 1;
  if (v11 == 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    v17 = a3;
    _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CPShapeStore: Unable to modify usage count for ROWID = %d", buf, 8u);
  }
  sqlite3_reset(v10);
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void TI::CP::ShapeStore::increment_shape_usage_count(TI::CP::ShapeStore *this, int a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:nn180100]<0>(__p, "ratifications");
  TI::CP::ShapeStore::increment_row_with_column_name((uint64_t)this, (const char *)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void TI::CP::ShapeStore::increment_shape_penalty_count(TI::CP::ShapeStore *this, int a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:nn180100]<0>(__p, "rejections");
  TI::CP::ShapeStore::increment_row_with_column_name((uint64_t)this, (const char *)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

BOOL TI::CP::ShapeStore::reset_database(sqlite3 **this)
{
  return sqlite3_exec(*this, "DELETE FROM shapes;", 0, 0, 0) == 0;
}

uint64_t TI::CP::ShapeStore::num_records(sqlite3 **this)
{
  uint64_t v2;
  NSObject *v3;
  const char *v5;
  sqlite3_stmt *ppStmt;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  ppStmt = 0;
  if (sqlite3_prepare_v2(*this, "SELECT COUNT(*) FROM shapes;", -1, &ppStmt, 0))
    return 0;
  if (sqlite3_step(ppStmt) == 1)
  {
    if (TICanLogMessageAtLevel_onceToken != -1)
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
    v3 = TIOSLogFacility();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v5 = sqlite3_errmsg(*this);
      *(_DWORD *)buf = 136315394;
      v8 = "num_records";
      v9 = 2080;
      v10 = v5;
      _os_log_debug_impl(&dword_1DA6F2000, v3, OS_LOG_TYPE_DEBUG, "%s couldn't read # of records %s", buf, 0x16u);
    }
    v2 = 0;
  }
  else
  {
    v2 = sqlite3_column_int(ppStmt, 0);
  }
  sqlite3_finalize(ppStmt);
  return v2;
}

BOOL TI::CP::ShapeStore::remove_shapes_older_than(sqlite3 **this, double a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  int v7;
  std::string __p;
  std::string v10;

  std::string::basic_string[abi:nn180100]<0>(&v10, "DELETE From shapes WHERE timestamp <= ");
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v10, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v10;
  else
    v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
  v7 = sqlite3_exec(*this, (const char *)v6, 0, 0, 0);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v7 == 0;
}

uint64_t TI::CP::ShapeStore::shape_count_for_word(sqlite3 **a1, uint64_t a2)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v11;
  sqlite3_stmt *pStmt;
  std::string v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v13, "SELECT COUNT(*) FROM shapes WHERE string_representation LIKE '");
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  std::string::append(&v13, v5, v6);
  std::string::append(&v13, "';", 2uLL);
  pStmt = 0;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (sqlite3_prepare_v2(*a1, (const char *)v7, -1, &pStmt, 0))
  {
    v8 = 0;
  }
  else
  {
    if (sqlite3_step(pStmt) == 1)
    {
      if (TICanLogMessageAtLevel_onceToken != -1)
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
      v9 = TIOSLogFacility();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v11 = sqlite3_errmsg(*a1);
        *(_DWORD *)buf = 136315394;
        v15 = "shape_count_for_word";
        v16 = 2080;
        v17 = v11;
        _os_log_debug_impl(&dword_1DA6F2000, v9, OS_LOG_TYPE_DEBUG, "%s couldn't read # of records %s", buf, 0x16u);
      }
      v8 = 0;
    }
    else
    {
      v8 = sqlite3_column_int(pStmt, 0);
    }
    sqlite3_finalize(pStmt);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v8;
}

uint64_t __Block_byref_object_copy__7537(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7538(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy__7664(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7665(uint64_t a1)
{

}

void ___getSystemActiveInputModes_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0DBDBA8], "sharedInputModeController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "enabledInputModeIdentifiers");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void ___getCurrentValueFromPreferenceController_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "valueForPreferenceKey:", *(_QWORD *)(a1 + 32));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id _getPreferenceAnalyzedAtDateForKeyInDomain(uint64_t a1, void *a2)
{
  void *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@_analyzedAt"), a1);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)CFPreferencesCopyAppValue(v5, v4);

  return v6;
}

BOOL _propertyAnalyzedInPastDay(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  _BOOL8 v5;

  _getPreferenceAnalyzedAtDateForKeyInDomain(a2, a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", -86400.0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "earlierDate:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4 != v2;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void _HandleUserNotificationCallBack(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v3;

  if (sNotification == a1)
  {
    if (a2 > 2)
      v2 = 0;
    else
      v2 = qword_1DA90FF18[a2];
    (*(void (**)(uint64_t, uint64_t))(sCompletionHandler + 16))(sCompletionHandler, v2);
    if (sNotification)
    {
      CFUserNotificationCancel((CFUserNotificationRef)sNotification);
      CFRelease((CFTypeRef)sNotification);
      sNotification = 0;
    }
    v3 = (void *)sCompletionHandler;
    sCompletionHandler = 0;

  }
  else
  {
    NSLog(CFSTR("Unexpected notification response received"));
  }
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
  }
  else
  {
    MobileKeyBagLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
    if (!MobileKeyBagLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBGetDeviceLockState");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t KB::String::String(uint64_t this)
{
  *(_DWORD *)this = 0x100000;
  *(_WORD *)(this + 4) = 0;
  *(_BYTE *)(this + 6) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 0x100000;
  *(_WORD *)(this + 4) = 0;
  *(_BYTE *)(this + 6) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t KB::String::String(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  *(_DWORD *)(this + 2) = 16;
  *(_BYTE *)(this + 6) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        v3 = (a2 >> 18) | 0xFFFFFFF0;
        *(_BYTE *)(this + 17) = (a2 >> 12) & 0x3F | 0x80;
        v4 = 2;
      }
      else
      {
        v3 = (a2 >> 12) | 0xFFFFFFE0;
        v4 = 1;
      }
      *(_BYTE *)(this + 16) = v3;
      v2 = v4 + 1;
      *(_BYTE *)(this + 16 + v4) = (a2 >> 6) & 0x3F | 0x80;
    }
    else
    {
      *(_BYTE *)(this + 16) = (a2 >> 6) | 0xC0;
      v2 = 1;
    }
    *(_WORD *)this = v2 + 1;
    *(_BYTE *)(this + 16 + v2) = a2 & 0x3F | 0x80;
    *(_BYTE *)(this + 16 + v2 + 1) = 0;
  }
  else
  {
    *(_BYTE *)(this + 16) = a2;
    *(_WORD *)this = 1;
  }
  return this;
}

_QWORD *KB::String::initialize(_QWORD *this, const char *a2, int a3, unsigned int a4)
{
  _QWORD *v4;
  _QWORD *v8;
  void *v9;

  this[2] = 0;
  this[3] = 0;
  v4 = this + 2;
  if (a2 && a4)
  {
    v8 = this;
    KB::String::ensure_capacity((KB::String *)this, a4);
    if (v8[1])
      v9 = (void *)v8[1];
    else
      v9 = v4;
    this = memcpy(v9, &a2[a3], a4);
    *(_WORD *)v8 = a4;
  }
  return this;
}

KB::String *KB::String::String(KB::String *this, char a2, char *__s, int a4, __int16 a5)
{
  unsigned __int16 v5;
  __int16 v8;
  char *v9;

  v5 = a4;
  *(_WORD *)this = a4;
  *((_WORD *)this + 1) = 16;
  *((_WORD *)this + 2) = a5;
  *((_BYTE *)this + 6) = a2;
  *((_QWORD *)this + 1) = 0;
  if (a2 == 1)
  {
    if (__s && !a4)
    {
      v5 = strlen(__s);
      *(_WORD *)this = v5;
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (__s && v5)
    {
      KB::String::ensure_capacity(this, v5);
      if (*((_QWORD *)this + 1))
        v9 = (char *)*((_QWORD *)this + 1);
      else
        v9 = (char *)this + 16;
      memcpy(v9, __s, v5);
      *(_WORD *)this = v5;
    }
  }
  else if (!a2)
  {
    *((_QWORD *)this + 1) = __s;
    if (!a4)
    {
      if (__s)
        v8 = strlen(__s);
      else
        v8 = 0;
      *(_WORD *)this = v8;
    }
    *((_BYTE *)this + 17) = 0;
  }
  return this;
}

uint64_t KB::String::String(uint64_t a1, KB::String *this)
{
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return KB::String::operator=(a1, this);
}

{
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return KB::String::operator=(a1, this);
}

uint64_t KB::String::operator=(uint64_t a1, KB::String *this)
{
  void *v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;

  v4 = *(void **)(a1 + 8);
  if (v4 && *(_BYTE *)(a1 + 6) == 1)
    free(v4);
  v5 = *(unsigned __int16 *)this;
  *(_WORD *)a1 = v5;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)((char *)this + 2);
  *(_BYTE *)(a1 + 6) = *((_BYTE *)this + 6);
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)(a1 + 8) = v6;
  if (!v6)
  {
    v7 = (_OWORD *)(a1 + 16);
    if (v5)
      *v7 = *((_OWORD *)this + 1);
    else
      *(_BYTE *)v7 = 0;
  }
  *((_QWORD *)this + 1) = 0;
  KB::String::clear(this);
  return a1;
}

void KB::String::~String(KB::String *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 6) == 1)
      free(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_BYTE *)this + 6) == 1)
      free(v2);
  }
}

_QWORD *KB::String::operator=(_QWORD *a1, const char *a2)
{
  __int16 v4;
  unsigned __int16 v5;
  void *v6;

  KB::String::clear((KB::String *)a1);
  if (a2)
  {
    v4 = strlen(a2);
    v5 = v4;
    a1[2] = 0;
    a1[3] = 0;
    if (v4)
    {
      KB::String::ensure_capacity((KB::String *)a1, v4);
      if (a1[1])
        v6 = (void *)a1[1];
      else
        v6 = a1 + 2;
      memcpy(v6, a2, v5);
      *(_WORD *)a1 = v5;
    }
  }
  else
  {
    a1[2] = 0;
    a1[3] = 0;
  }
  return a1;
}

KB::String *KB::String::operator=(KB::String *a1, unsigned int a2)
{
  KB::String::clear(a1);
  if (a2)
    KB::String::append(a1, a2);
  return a1;
}

int *KB::String::empty_string(KB::String *this)
{
  unsigned __int8 v1;

  {
    KB::String::empty_string(void)::empty_string = 0x100000;
    word_1EDAEE594 = 0;
    byte_1EDAEE596 = 0;
    qword_1EDAEE598 = 0;
    byte_1EDAEE5A0 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::String::empty_string(void)::empty_string, &dword_1DA6F2000);
  }
  return &KB::String::empty_string(void)::empty_string;
}

int *KB::String::space(KB::String *this)
{
  unsigned __int8 v1;

  {
    word_1EDAEDD84 = 0;
    byte_1EDAEDD86 = 0;
    qword_1EDAEDD88 = (uint64_t)" ";
    KB::String::space(void)::space = 1048577;
    byte_1EDAEDD91 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::String::space(void)::space, &dword_1DA6F2000);
  }
  return &KB::String::space(void)::space;
}

void KB::String::resize(KB::String *this, unsigned int a2, int a3)
{
  unsigned int v3;
  BOOL v7;
  unsigned int v8;
  char *v9;
  char *v10;

  v3 = *(unsigned __int16 *)this;
  if (v3 != a2)
  {
    if (!*((_BYTE *)this + 6))
    {
      KB::String::internalize_buffer((unsigned __int16 *)this);
      v3 = *(unsigned __int16 *)this;
    }
    v7 = v3 >= a2;
    v8 = v3 - a2;
    if (v8 != 0 && v7)
    {
      v9 = (char *)*((_QWORD *)this + 1);
      if (!v9)
        v9 = (char *)this + 16;
      bzero(&v9[a2], (int)v8);
    }
    else
    {
      KB::String::ensure_capacity(this, a2);
      v10 = (char *)*((_QWORD *)this + 1);
      if (!v10)
        v10 = (char *)this + 16;
      memset(&v10[*(unsigned __int16 *)this], a3, a2 - (unint64_t)*(unsigned __int16 *)this);
    }
    *(_WORD *)this = a2;
    *((_WORD *)this + 2) = 0;
  }
}

uint64_t *KB::String::shorten@<X0>(KB::String *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *v5;
  int v6;
  uint64_t *result;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char *v11;
  int v12;
  int v13;
  unsigned int v14;

  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v5 = (char *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = (char *)this + 16;
  v11 = v5;
  v6 = *(unsigned __int16 *)this;
  v12 = 0;
  v13 = v6;
  v14 = 0;
  result = KB::String::iterator::initialize((uint64_t *)&v11);
  v8 = v14;
  if (v14 && a2)
  {
    v9 = 1;
    do
    {
      KB::String::append((KB::String *)a3, v8);
      result = KB::String::iterator::operator++((uint64_t *)&v11);
      v8 = v14;
      if (v14)
        v10 = v9 >= a2;
      else
        v10 = 1;
      ++v9;
    }
    while (!v10);
  }
  return result;
}

uint64_t *KB::String::iterator::operator++(uint64_t *result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v1 = *((_DWORD *)result + 3);
  v2 = *((int *)result + 2);
  if ((int)v2 >= v1)
  {
    *((_DWORD *)result + 2) = v1 + 1;
    *((_DWORD *)result + 4) = 0;
  }
  else
  {
    v3 = *result;
    v4 = v2 + 1;
    *((_DWORD *)result + 2) = v2 + 1;
    v5 = *(char *)(v3 + v2);
    *((_DWORD *)result + 4) = v5;
    if ((v5 + 64) > 0x34)
      return result;
    v6 = kb_utf8_countTrailBytes[v5];
    v7 = v5 & ~(-1 << (6 - v6));
    *((_DWORD *)result + 4) = v7;
    if (v6 != 1)
    {
      if (v6 != 2)
      {
        if (v6 != 3)
          return result;
        v8 = v2 + 2;
        *((_DWORD *)result + 2) = v8;
        v9 = *(_BYTE *)(v3 + v4) & 0x3F | (v7 << 6);
        *((_DWORD *)result + 4) = v9;
        LODWORD(v4) = v8;
        v7 = v9;
      }
      *((_DWORD *)result + 2) = v4 + 1;
      v10 = *(_BYTE *)(v3 + (int)v4) & 0x3F | (v7 << 6);
      *((_DWORD *)result + 4) = v10;
      LODWORD(v4) = v4 + 1;
      v7 = v10;
    }
    *((_DWORD *)result + 2) = v4 + 1;
    *((_DWORD *)result + 4) = *(_BYTE *)(v3 + (int)v4) & 0x3F | (v7 << 6);
  }
  return result;
}

KB::String::iterator *KB::String::iterator::operator+@<X0>(uint64_t a1@<X0>, int a2@<W1>, KB::String::iterator *a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_QWORD *)a3 + 2) = *(_QWORD *)(a1 + 16);
  return std::__advance[abi:nn180100]<KB::String::iterator>(a3, a2);
}

KB::String::iterator *std::__advance[abi:nn180100]<KB::String::iterator>(KB::String::iterator *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a2;
  if (a2 < 0)
  {
    do
      result = KB::String::iterator::operator--(result);
    while (!__CFADD__(v2++, 1));
  }
  else if (a2)
  {
    v3 = a2 + 1;
    do
    {
      result = (KB::String::iterator *)KB::String::iterator::operator++((uint64_t *)result);
      --v3;
    }
    while (v3 > 1);
  }
  return result;
}

KB::String::iterator *KB::String::iterator::operator-@<X0>(uint64_t a1@<X0>, int a2@<W1>, KB::String::iterator *a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *((_QWORD *)a3 + 2) = *(_QWORD *)(a1 + 16);
  return std::__advance[abi:nn180100]<KB::String::iterator>(a3, -a2);
}

uint64_t *KB::String::find@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  const char *v6;
  char *v7;
  int v8;
  int v9;

  if (*((_QWORD *)this + 1))
    v5 = (char *)*((_QWORD *)this + 1);
  else
    v5 = (char *)this + 16;
  if (*((_QWORD *)a2 + 1))
    v6 = (const char *)*((_QWORD *)a2 + 1);
  else
    v6 = (char *)a2 + 16;
  v7 = strstr(v5, v6);
  if (v7)
    v8 = (_DWORD)v7 - (_DWORD)v5;
  else
    v8 = *(unsigned __int16 *)this;
  v9 = *(unsigned __int16 *)this;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  return KB::String::iterator::initialize((uint64_t *)a3);
}

uint64_t *KB::String::rfind@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  BOOL v10;
  unsigned __int8 *v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;

  v5 = (unsigned __int8 *)this + 16;
  if (*((_QWORD *)this + 1))
    v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v6 = *(unsigned __int16 *)this;
  v7 = &v5[v6];
  v8 = (unsigned __int8 *)a2 + 16;
  if (*((_QWORD *)a2 + 1))
    v8 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v9 = *(unsigned __int16 *)a2;
  if (v6)
    v10 = (_DWORD)v9 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (!*(_WORD *)a2)
    {
LABEL_22:
      *(_QWORD *)a3 = v5;
      *(_DWORD *)(a3 + 8) = (_DWORD)v7 - (_DWORD)v5;
      goto LABEL_23;
    }
  }
  else
  {
    v11 = v5;
    v12 = (char *)&v5[v6];
    do
    {
      if (*v11 == *v8)
      {
        v13 = 1;
        while (v9 != v13)
        {
          if (&v11[v13] == v7)
            goto LABEL_21;
          v14 = v11[v13];
          v15 = v8[v13++];
          if (v14 != v15)
            goto LABEL_13;
        }
        v12 = (char *)v11;
      }
LABEL_13:
      ++v11;
    }
    while (v11 != v7);
LABEL_21:
    v10 = v12 == (char *)v7;
    LODWORD(v7) = (_DWORD)v12;
    if (!v10)
      goto LABEL_22;
  }
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v6;
LABEL_23:
  *(_DWORD *)(a3 + 12) = v6;
  *(_DWORD *)(a3 + 16) = 0;
  return KB::String::iterator::initialize((uint64_t *)a3);
}

double KB::String::find_first_of@<D0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  char *v7;
  int v8;
  int v9;
  double result;
  char *v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  unsigned int v16[4];

  v15 = *(_OWORD *)a3;
  *(_QWORD *)v16 = *((_QWORD *)a3 + 2);
  v6 = *(unsigned __int16 *)this;
  v7 = (char *)*((_QWORD *)this + 1);
  if (!v7)
    v7 = (char *)this + 16;
  v11 = v7;
  v12 = v6;
  v13 = v6;
  v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v8 = DWORD2(v15);
  v9 = v12;
  while (v8 != v9 && !KB::String::contains(a2, v16[0]))
  {
    KB::String::iterator::operator++((uint64_t *)&v15);
    v8 = DWORD2(v15);
  }
  result = *(double *)&v15;
  *(_OWORD *)a4 = v15;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)v16;
  return result;
}

BOOL KB::String::contains(KB::String *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  BOOL v11;
  char *v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  if (a2 > 0x7F)
  {
    *(_QWORD *)&v17 = v3;
    v7 = *(unsigned __int16 *)this;
    DWORD2(v17) = 0;
    HIDWORD(v17) = v7;
    LODWORD(v18) = 0;
    KB::String::iterator::initialize((uint64_t *)&v17);
    v13 = v3;
    v14 = v7;
    v15 = v7;
    v16 = 0;
    KB::String::iterator::initialize((uint64_t *)&v13);
    v19 = v17;
    v20 = v18;
    v8 = v14;
    v9 = DWORD2(v17);
    if (DWORD2(v17) != v14 && (_DWORD)v18 != a2)
    {
      do
      {
        KB::String::iterator::operator++((uint64_t *)&v19);
        v9 = DWORD2(v19);
      }
      while (DWORD2(v19) != v8 && (_DWORD)v20 != a2);
    }
    *(_QWORD *)&v19 = v3;
    DWORD2(v19) = v7;
    HIDWORD(v19) = v7;
    LODWORD(v20) = 0;
    KB::String::iterator::initialize((uint64_t *)&v19);
    v11 = v9 == DWORD2(v19);
  }
  else
  {
    v4 = *(unsigned __int16 *)this;
    if (*(_WORD *)this)
    {
      v5 = *(unsigned __int16 *)this;
      v6 = v3;
      while (*v6 != a2)
      {
        ++v6;
        if (!--v5)
        {
          v6 = &v3[v4];
          break;
        }
      }
    }
    else
    {
      v6 = v3;
    }
    v11 = v6 - v3 == v4;
  }
  return !v11;
}

double KB::String::find_first_not_of@<D0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  char *v7;
  int v8;
  int v9;
  double result;
  char *v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  unsigned int v16[4];

  v15 = *(_OWORD *)a3;
  *(_QWORD *)v16 = *((_QWORD *)a3 + 2);
  v6 = *(unsigned __int16 *)this;
  v7 = (char *)*((_QWORD *)this + 1);
  if (!v7)
    v7 = (char *)this + 16;
  v11 = v7;
  v12 = v6;
  v13 = v6;
  v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v8 = DWORD2(v15);
  v9 = v12;
  while (v8 != v9 && KB::String::contains(a2, v16[0]))
  {
    KB::String::iterator::operator++((uint64_t *)&v15);
    v8 = DWORD2(v15);
  }
  result = *(double *)&v15;
  *(_OWORD *)a4 = v15;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)v16;
  return result;
}

uint64_t *KB::String::find_last_of@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v12;
  unsigned int v13[4];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v16 = *(_OWORD *)a3;
  *(_QWORD *)&v16[16] = *((_QWORD *)a3 + 2);
  v14 = *(_OWORD *)v16;
  v15 = *(_QWORD *)&v16[16];
  if (*((_QWORD *)this + 1))
    v6 = (char *)*((_QWORD *)this + 1);
  else
    v6 = (char *)this + 16;
  *(_QWORD *)&v12 = v6;
  v7 = *(unsigned __int16 *)this;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  v8 = DWORD2(v12);
  v9 = *(_DWORD *)&v16[8];
  if (*(_DWORD *)&v16[8] == DWORD2(v12))
  {
LABEL_7:
    v9 = v8;
  }
  else
  {
    while (1)
    {
      v12 = *(_OWORD *)v16;
      *(_QWORD *)v13 = *(_QWORD *)&v16[16];
      KB::String::iterator::operator--((KB::String::iterator *)&v12);
      if (KB::String::contains(a2, v13[0]))
        break;
      KB::String::iterator::operator--((KB::String::iterator *)v16);
      v9 = *(_DWORD *)&v16[8];
      if (*(_DWORD *)&v16[8] == v8)
        goto LABEL_7;
    }
  }
  v10 = *(_QWORD *)v16;
  *(_QWORD *)&v12 = v6;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  if (v9 == DWORD2(v12))
  {
    *(_QWORD *)a4 = v6;
    *(_DWORD *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 12) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    return KB::String::iterator::initialize((uint64_t *)a4);
  }
  else
  {
    *(_QWORD *)(a4 + 12) = *(_QWORD *)&v16[12];
    *(_DWORD *)(a4 + 20) = *(_DWORD *)&v16[20];
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    return (uint64_t *)KB::String::iterator::operator--((KB::String::iterator *)a4);
  }
}

uint64_t *KB::String::find_last_not_of@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, const KB::String::iterator *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v12;
  unsigned int v13[4];
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v16 = *(_OWORD *)a3;
  *(_QWORD *)&v16[16] = *((_QWORD *)a3 + 2);
  v14 = *(_OWORD *)v16;
  v15 = *(_QWORD *)&v16[16];
  if (*((_QWORD *)this + 1))
    v6 = (char *)*((_QWORD *)this + 1);
  else
    v6 = (char *)this + 16;
  *(_QWORD *)&v12 = v6;
  v7 = *(unsigned __int16 *)this;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  v8 = DWORD2(v12);
  v9 = *(_DWORD *)&v16[8];
  if (*(_DWORD *)&v16[8] == DWORD2(v12))
  {
LABEL_7:
    v9 = v8;
  }
  else
  {
    while (1)
    {
      v12 = *(_OWORD *)v16;
      *(_QWORD *)v13 = *(_QWORD *)&v16[16];
      KB::String::iterator::operator--((KB::String::iterator *)&v12);
      if (!KB::String::contains(a2, v13[0]))
        break;
      KB::String::iterator::operator--((KB::String::iterator *)v16);
      v9 = *(_DWORD *)&v16[8];
      if (*(_DWORD *)&v16[8] == v8)
        goto LABEL_7;
    }
  }
  v10 = *(_QWORD *)v16;
  *(_QWORD *)&v12 = v6;
  DWORD2(v12) = 0;
  HIDWORD(v12) = v7;
  v13[0] = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  if (v9 == DWORD2(v12))
  {
    *(_QWORD *)a4 = v6;
    *(_DWORD *)(a4 + 8) = v7;
    *(_DWORD *)(a4 + 12) = v7;
    *(_DWORD *)(a4 + 16) = 0;
    return KB::String::iterator::initialize((uint64_t *)a4);
  }
  else
  {
    *(_QWORD *)(a4 + 12) = *(_QWORD *)&v16[12];
    *(_DWORD *)(a4 + 20) = *(_DWORD *)&v16[20];
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    return (uint64_t *)KB::String::iterator::operator--((KB::String::iterator *)a4);
  }
}

BOOL KB::String::contains(KB::String *this, const KB::String *a2)
{
  char *v4;
  char *v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD v10[6];
  char *v11;
  int v12;
  int v13;
  int v14;

  v4 = (char *)*((_QWORD *)this + 1);
  v5 = (char *)this + 16;
  if (!v4)
    v4 = (char *)this + 16;
  v11 = v4;
  v6 = *(unsigned __int16 *)this;
  v12 = 0;
  v13 = v6;
  v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  KB::String::find_first_of(this, a2, (const KB::String::iterator *)&v11, (uint64_t)v10);
  v7 = *(unsigned __int16 *)this;
  v8 = *((_QWORD *)this + 1);
  if (!v8)
    v8 = (uint64_t)v5;
  v11 = (char *)v8;
  v12 = v7;
  v13 = v7;
  v14 = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  return v10[2] != v12;
}

uint64_t KB::String::count(KB::String *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char *v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  if (a2 > 0x7F)
  {
    *(_QWORD *)&v14 = v3;
    v7 = *(unsigned __int16 *)this;
    DWORD2(v14) = 0;
    HIDWORD(v14) = v7;
    LODWORD(v15) = 0;
    KB::String::iterator::initialize((uint64_t *)&v14);
    v10 = v3;
    v11 = v7;
    v12 = v7;
    v13 = 0;
    KB::String::iterator::initialize((uint64_t *)&v10);
    v5 = 0;
    v16 = v14;
    v17 = v15;
    v8 = v11;
    if (DWORD2(v14) != v11)
    {
      LODWORD(v5) = 0;
      do
      {
        if ((_DWORD)v17 == a2)
          v5 = (v5 + 1);
        else
          v5 = v5;
        KB::String::iterator::operator++((uint64_t *)&v16);
      }
      while (DWORD2(v16) != v8);
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)this;
    if (*(_WORD *)this)
    {
      LODWORD(v5) = 0;
      do
      {
        v6 = *v3++;
        if (v6 == a2)
          v5 = (v5 + 1);
        else
          v5 = v5;
        --v4;
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t KB::String::compare(KB::String *this, const KB::String *a2)
{
  const char *v2;
  const char *v3;

  if (*((_QWORD *)this + 1))
    v2 = (const char *)*((_QWORD *)this + 1);
  else
    v2 = (char *)this + 16;
  if (*((_QWORD *)a2 + 1))
    v3 = (const char *)*((_QWORD *)a2 + 1);
  else
    v3 = (char *)a2 + 16;
  return strcmp(v2, v3);
}

KB::String *KB::String::trim@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  KB::String *v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE v20[8];
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;

  v4 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this)
    goto LABEL_8;
  v6 = this;
  v7 = *((_QWORD *)this + 1);
  v8 = (char *)this + 16;
  if (!v7)
    v7 = (uint64_t)this + 16;
  v22 = v7;
  v23 = 0;
  v24 = v4;
  v25 = 0;
  KB::String::iterator::initialize(&v22);
  KB::String::find_first_not_of(v6, a2, (const KB::String::iterator *)&v22, (uint64_t)v20);
  v9 = *(unsigned __int16 *)v6;
  v10 = *((_QWORD *)v6 + 1) ? *((_QWORD *)v6 + 1) : (uint64_t)v8;
  v22 = v10;
  v23 = v9;
  v24 = v9;
  v25 = 0;
  this = (KB::String *)KB::String::iterator::initialize(&v22);
  v11 = v21;
  if (v21 != v23)
  {
    v22 = v10;
    v23 = v9;
    v24 = v9;
    v25 = 0;
    KB::String::iterator::initialize(&v22);
    KB::String::find_last_not_of(v6, a2, (const KB::String::iterator *)&v22, (uint64_t)&v18);
    KB::String::iterator::operator++(&v18);
    if (*((_QWORD *)v6 + 1))
      v12 = *((_QWORD *)v6 + 1);
    else
      v12 = (uint64_t)v8;
    v22 = v12;
    v13 = *(unsigned __int16 *)v6;
    v23 = 0;
    v24 = v13;
    v25 = 0;
    KB::String::iterator::initialize(&v22);
    if (v11 == v23 && (v14 = v12, v15 = v13, v16 = v13, v17 = 0, KB::String::iterator::initialize(&v14), v19 == v15))
      return KB::String::String((KB::String *)a3, v6);
    else
      return KB::String::String((KB::String *)a3, (const KB::String::iterator *)v20, (const KB::String::iterator *)&v18);
  }
  else
  {
LABEL_8:
    *(_DWORD *)a3 = 0x100000;
    *(_WORD *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 6) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t *KB::String::remove@<X0>(KB::String *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  int v7;
  uint64_t *result;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  unsigned int v18;

  if (!*(_WORD *)a2)
    return (uint64_t *)KB::String::String((KB::String *)a3, this);
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  KB::String::ensure_capacity((KB::String *)a3, *(_WORD *)this);
  if (*((_QWORD *)this + 1))
    v6 = (char *)*((_QWORD *)this + 1);
  else
    v6 = (char *)this + 16;
  v15 = v6;
  v7 = *(unsigned __int16 *)this;
  v16 = 0;
  v17 = v7;
  v18 = 0;
  KB::String::iterator::initialize((uint64_t *)&v15);
  v11 = v6;
  v12 = v7;
  v13 = v7;
  v14 = 0;
  result = KB::String::iterator::initialize((uint64_t *)&v11);
  v9 = v12;
  while (v16 != v9)
  {
    v10 = v18;
    if (!KB::String::contains(a2, v18))
      KB::String::append((KB::String *)a3, v10);
    result = KB::String::iterator::operator++((uint64_t *)&v15);
  }
  return result;
}

KB::String *KB::String::operator+=(KB::String *a1, unsigned int a2)
{
  KB::String::append(a1, a2);
  return a1;
}

KB::String *KB::String::remove_prefix_bytes@<X0>(KB::String *this@<X0>, uint64_t a2@<X1>, KB::String *a3@<X8>)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 1);
  if (!v3)
    v3 = (char *)this + 16;
  return KB::String::String(a3, &v3[a2], (unsigned __int16)(*(_WORD *)this - a2));
}

unsigned __int16 *KB::String::replace@<X0>(KB::String *this@<X0>, const KB::String::iterator *a2@<X1>, const KB::String::iterator *a3@<X2>, const KB::String *a4@<X3>, uint64_t a5@<X8>)
{
  __int16 v10;
  __int16 v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  char *v17;
  int v18;
  int v19;
  int v20;

  v10 = KB::String::iterator::offset(a3);
  v11 = KB::String::iterator::offset(a2);
  *(_DWORD *)a5 = 0x100000;
  *(_WORD *)(a5 + 4) = 0;
  *(_BYTE *)(a5 + 6) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  KB::String::ensure_capacity((KB::String *)a5, *(_WORD *)this + v11 - v10 + *(_WORD *)a4);
  v12 = (char *)*((_QWORD *)this + 1);
  if (!v12)
    v12 = (char *)this + 16;
  v17 = v12;
  v13 = *(unsigned __int16 *)this;
  v18 = 0;
  v19 = v13;
  v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  KB::String::append((KB::String *)a5, (const KB::String::iterator *)&v17, a2);
  KB::String::append((unsigned __int16 *)a5, a4);
  v14 = *(unsigned __int16 *)this;
  v15 = (char *)*((_QWORD *)this + 1);
  if (!v15)
    v15 = (char *)this + 16;
  v17 = v15;
  v18 = v14;
  v19 = v14;
  v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  return KB::String::append((KB::String *)a5, a3, (const KB::String::iterator *)&v17);
}

unsigned __int16 *KB::String::append(KB::String *this, const KB::String::iterator *a2, const KB::String::iterator *a3)
{
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  size_t v8;

  v5 = *(_QWORD *)a2;
  v6 = KB::String::iterator::offset(a2);
  v7 = (const char *)(v5 + v6);
  v8 = (unsigned __int16)(KB::String::iterator::offset(a3) - v6);
  return KB::String::append((unsigned __int16 *)this, v7, v8);
}

unsigned __int16 *KB::String::append(unsigned __int16 *this, const KB::String *a2)
{
  unsigned __int16 *v3;
  const char *v4;

  if (*(_WORD *)a2)
  {
    v3 = this;
    if (!*((_BYTE *)this + 6))
      KB::String::internalize_buffer(this);
    if (*((_QWORD *)a2 + 1))
      v4 = (const char *)*((_QWORD *)a2 + 1);
    else
      v4 = (char *)a2 + 16;
    return KB::String::append(v3, v4, 0xFFFFuLL);
  }
  return this;
}

unsigned __int16 *KB::String::append(unsigned __int16 *this, const char *__s1, size_t __n)
{
  unsigned __int16 *v4;
  size_t v5;
  __int16 v6;
  unsigned __int16 *v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;

  if (__s1)
  {
    v4 = this;
    this = (unsigned __int16 *)strnlen(__s1, __n);
    v5 = (unsigned __int16)this;
    if ((_WORD)this)
    {
      v6 = (__int16)this;
      if (!*((_BYTE *)v4 + 6))
        KB::String::internalize_buffer(v4);
      KB::String::ensure_capacity((KB::String *)v4, *v4 + v6);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (!v7)
        v7 = v4 + 8;
      this = (unsigned __int16 *)memcpy((char *)v7 + *v4, __s1, v5);
      v8 = *v4 + v6;
      *v4 = v8;
      v9 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (!v9)
        v9 = v4 + 8;
      *((_BYTE *)v9 + v8) = 0;
      v4[2] = 0;
    }
  }
  return this;
}

uint64_t *KB::String::replace_char@<X0>(KB::String *this@<X0>, const KB::String *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  char *v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  unsigned int v21;

  *(_DWORD *)a4 = 0x100000;
  *(_WORD *)(a4 + 4) = 0;
  *(_BYTE *)(a4 + 6) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v8 = (char *)*((_QWORD *)this + 1);
  v9 = (char *)this + 16;
  if (v8)
    v10 = (char *)*((_QWORD *)this + 1);
  else
    v10 = (char *)this + 16;
  v18 = v10;
  v11 = *(unsigned __int16 *)this;
  v19 = 0;
  v20 = v11;
  v21 = 0;
  KB::String::iterator::initialize((uint64_t *)&v18);
  while (1)
  {
    v12 = (uint64_t)(v8 ? v8 : v9);
    v14 = v12;
    v15 = v11;
    v16 = v11;
    v17 = 0;
    result = KB::String::iterator::initialize(&v14);
    if (v19 == v15)
      break;
    if (v21 == a3)
      KB::String::append((unsigned __int16 *)a4, a2);
    else
      KB::String::append((KB::String *)a4, v21);
    KB::String::iterator::operator++((uint64_t *)&v18);
    v11 = *(unsigned __int16 *)this;
    v8 = (char *)*((_QWORD *)this + 1);
  }
  return result;
}

unsigned __int16 *KB::String::append(KB::String *this, const char *a2)
{
  return KB::String::append((unsigned __int16 *)this, a2, 0xFFFFuLL);
}

uint64_t KB::String::append_float(KB::String *this, float a2)
{
  return KB::String::append_format(this, "%.2f", a2);
}

uint64_t KB::String::append_format(KB::String *this, const char *a2, ...)
{
  va_list va;

  va_start(va, a2);
  return KB::String::append_format(this, a2, va);
}

uint64_t KB::String::append_format(KB::String *this, const char *a2, va_list a3)
{
  FILE *v5;

  v5 = funopen(this, 0, (int (__cdecl *)(void *, const char *, int))KB::kbstring_write, 0, 0);
  vfprintf(v5, a2, a3);
  return fclose(v5);
}

const char *KB::kbstring_write(KB *this, const char *a2, const char *a3)
{
  KB::String::append((unsigned __int16 *)this, a2, (unsigned __int16)a3);
  return a3;
}

unsigned __int16 *KB::String::append_byte(KB::String *this, char a2)
{
  char __s1[2];

  __s1[0] = a2;
  __s1[1] = 0;
  return KB::String::append((unsigned __int16 *)this, __s1, 0xFFFFuLL);
}

uint64_t KB::String::pop_last(KB::String *this)
{
  int v1;
  char *v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this)
    return 0;
  v3 = (char *)*((_QWORD *)this + 1);
  if (!v3)
    v3 = (char *)this + 16;
  *(_QWORD *)&v13 = v3;
  DWORD2(v13) = v1;
  HIDWORD(v13) = v1;
  LODWORD(v14) = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  v15 = v13;
  v16 = v14;
  KB::String::iterator::operator--((KB::String::iterator *)&v15);
  v4 = v16;
  if (v16 >= 0x10000)
    v5 = -4;
  else
    v5 = -3;
  if ((v16 - 1114112) >= 0xFFEFE000)
    v6 = v5;
  else
    v6 = 0;
  if (v16 >> 11 >= 0x1B)
    v7 = v6;
  else
    v7 = -3;
  if (v16 >= 0x800)
    v8 = v7;
  else
    v8 = -2;
  if (v16 >= 0x80)
    v9 = v8;
  else
    v9 = -1;
  v10 = v9 + WORD4(v15);
  if (SDWORD2(v15) <= SHIDWORD(v15))
    v11 = v10;
  else
    v11 = WORD6(v15);
  KB::String::resize(this, v11, 0);
  return v4;
}

uint64_t KB::String::format@<X0>(KB::String *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_list va;

  va_start(va, a2);
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return KB::String::append_format((KB::String *)a2, (const char *)this, va);
}

void KB::String::operator+(KB::String *a1@<X0>, unsigned int a2@<W1>, KB::String *a3@<X8>)
{
  KB::String *v4;

  v4 = KB::String::String(a3, a1);
  KB::String::append(v4, a2);
}

unsigned __int16 *KB::String::operator+@<X0>(KB::String *a1@<X0>, const char *a2@<X1>, KB::String *a3@<X8>)
{
  unsigned __int16 *v4;

  v4 = (unsigned __int16 *)KB::String::String(a3, a1);
  return KB::String::append(v4, a2, 0xFFFFuLL);
}

unsigned __int16 *KB::String::operator+@<X0>(KB::String *a1@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  unsigned __int16 *v4;

  v4 = (unsigned __int16 *)KB::String::String(a3, a1);
  return KB::String::append(v4, a2);
}

unsigned __int16 *KB::String::operator+=(unsigned __int16 *a1, const char *a2)
{
  KB::String::append(a1, a2, 0xFFFFuLL);
  return a1;
}

unsigned __int16 *KB::String::operator+=(unsigned __int16 *a1, const KB::String *a2)
{
  KB::String::append(a1, a2);
  return a1;
}

BOOL KB::String::starts_with(unsigned __int16 *a1, unsigned __int16 *a2, int a3)
{
  unsigned int (*v4)(unsigned __int16 *, unsigned __int16 *);
  unsigned __int16 *v5;
  unsigned __int16 *v6;

  if (*a2 > *a1)
    return 0;
  if (a3 == 1)
    v4 = (unsigned int (*)(unsigned __int16 *, unsigned __int16 *))MEMORY[0x1E0C855A8];
  else
    v4 = (unsigned int (*)(unsigned __int16 *, unsigned __int16 *))MEMORY[0x1E0C85590];
  if (*((_QWORD *)a1 + 1))
    v5 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
  else
    v5 = a1 + 8;
  if (*((_QWORD *)a2 + 1))
    v6 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  else
    v6 = a2 + 8;
  return v4(v5, v6) == 0;
}

BOOL KB::String::ends_with(unsigned __int16 *a1, unsigned __int16 *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v7)(char *, unsigned __int16 *);
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;

  v4 = *a2;
  v5 = *a1;
  if (v4 > v5)
    return 0;
  if (a3 == 1)
    v7 = (unsigned int (*)(char *, unsigned __int16 *))MEMORY[0x1E0C855A8];
  else
    v7 = (unsigned int (*)(char *, unsigned __int16 *))MEMORY[0x1E0C85590];
  v8 = v5 - v4;
  v9 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
  if (!v9)
    v9 = a1 + 8;
  if (*((_QWORD *)a2 + 1))
    v10 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  else
    v10 = a2 + 8;
  return v7((char *)v9 + v8, v10) == 0;
}

unsigned __int16 *KB::sbs_string_tokenize@<X0>(unsigned __int16 *this@<X0>, const KB::String *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  KB::String *v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *this;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    v7 = (KB::String *)this;
    if (*(_WORD *)a2)
    {
      v8 = (unsigned __int16 *)*((_QWORD *)this + 1);
      if (!v8)
        v8 = this + 8;
      *(_QWORD *)&v26 = v8;
      DWORD2(v26) = 0;
      HIDWORD(v26) = v5;
      LODWORD(v27) = 0;
      KB::String::iterator::initialize((uint64_t *)&v26);
      KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v26, (uint64_t)&v24);
      KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v24, (uint64_t)&v22);
      while (1)
      {
        v9 = *(unsigned __int16 *)v7;
        v10 = *((_QWORD *)v7 + 1) ? *((_QWORD *)v7 + 1) : (uint64_t)v7 + 16;
        *(_QWORD *)&v26 = v10;
        DWORD2(v26) = v9;
        HIDWORD(v26) = v9;
        LODWORD(v27) = 0;
        KB::String::iterator::initialize((uint64_t *)&v26);
        if (DWORD2(v22) == DWORD2(v26))
        {
          v30 = v10;
          LODWORD(v31) = v9;
          HIDWORD(v31) = v9;
          v32 = 0;
          this = (unsigned __int16 *)KB::String::iterator::initialize(&v30);
          if (DWORD2(v24) == (_DWORD)v31)
            break;
        }
        KB::String::String((KB::String *)&v30, (const KB::String::iterator *)&v24, (const KB::String::iterator *)&v22);
        v11 = a3[1];
        v12 = a3[2];
        if (v11 >= v12)
        {
          v14 = (uint64_t)(v11 - *a3) >> 5;
          if ((unint64_t)(v14 + 1) >> 59)
            abort();
          v15 = v12 - *a3;
          v16 = v15 >> 4;
          if (v15 >> 4 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
            v17 = 0x7FFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          v29 = a3 + 2;
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v17);
          v19 = (uint64_t)&v18[32 * v14];
          *(_QWORD *)&v26 = v18;
          *((_QWORD *)&v26 + 1) = v19;
          v28 = &v18[32 * v20];
          *(_DWORD *)v19 = 0x100000;
          *(_WORD *)(v19 + 4) = 0;
          *(_BYTE *)(v19 + 6) = 0;
          *(_QWORD *)(v19 + 8) = 0;
          KB::String::operator=(v19, (KB::String *)&v30);
          v27 = v19 + 32;
          std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
          v13 = a3[1];
          std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
        }
        else
        {
          *(_DWORD *)v11 = 0x100000;
          *(_WORD *)(v11 + 4) = 0;
          *(_BYTE *)(v11 + 6) = 0;
          *(_QWORD *)(v11 + 8) = 0;
          v13 = KB::String::operator=(v11, (KB::String *)&v30) + 32;
        }
        a3[1] = v13;
        if (v31)
        {
          if (BYTE6(v30) == 1)
            free(v31);
        }
        KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        v24 = v26;
        v25 = v27;
        KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v24, (uint64_t)&v26);
        v22 = v26;
        v23 = v27;
      }
    }
    else
    {
      v29 = a3 + 2;
      *(_QWORD *)&v26 = operator new(0x20uLL);
      *((_QWORD *)&v26 + 1) = v26;
      v28 = (char *)(v26 + 32);
      KB::String::String((KB::String *)v26, v7);
      v27 = v26 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
      v21 = a3[1];
      this = (unsigned __int16 *)std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
      a3[1] = v21;
    }
  }
  return this;
}

unsigned __int16 *KB::string_split_after@<X0>(unsigned __int16 *this@<X0>, const KB::String *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  KB::String *v7;
  _QWORD *v8;
  unsigned __int16 *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _BYTE v30[8];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *this;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v5)
  {
    v7 = (KB::String *)this;
    if (*(_WORD *)a2)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 1);
      if (v8)
        v9 = (unsigned __int16 *)*((_QWORD *)this + 1);
      else
        v9 = this + 8;
      *(_QWORD *)&v24 = v9;
      DWORD2(v24) = 0;
      HIDWORD(v24) = v5;
      LODWORD(v25) = 0;
      KB::String::iterator::initialize((uint64_t *)&v24);
      while (1)
      {
        v10 = v8 ? v8 : (_QWORD *)((char *)v7 + 16);
        *(_QWORD *)&v26 = v10;
        DWORD2(v26) = v5;
        HIDWORD(v26) = v5;
        LODWORD(v27) = 0;
        this = (unsigned __int16 *)KB::String::iterator::initialize((uint64_t *)&v26);
        if (DWORD2(v24) == DWORD2(v26))
          break;
        v22 = v24;
        v23 = v25;
        KB::String::find_first_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        v22 = v26;
        LODWORD(v23) = v27;
        KB::String::find_first_not_of(v7, a2, (const KB::String::iterator *)&v22, (uint64_t)&v26);
        v22 = v26;
        LODWORD(v23) = v27;
        KB::String::String((KB::String *)v30, (const KB::String::iterator *)&v24, (const KB::String::iterator *)&v22);
        v11 = a3[1];
        v12 = a3[2];
        if (v11 >= v12)
        {
          v14 = (uint64_t)(v11 - *a3) >> 5;
          if ((unint64_t)(v14 + 1) >> 59)
            abort();
          v15 = v12 - *a3;
          v16 = v15 >> 4;
          if (v15 >> 4 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
            v17 = 0x7FFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          v29 = a3 + 2;
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v17);
          v19 = (uint64_t)&v18[32 * v14];
          *(_QWORD *)&v26 = v18;
          *((_QWORD *)&v26 + 1) = v19;
          v28 = &v18[32 * v20];
          *(_DWORD *)v19 = 0x100000;
          *(_WORD *)(v19 + 4) = 0;
          *(_BYTE *)(v19 + 6) = 0;
          *(_QWORD *)(v19 + 8) = 0;
          KB::String::operator=(v19, (KB::String *)v30);
          v27 = v19 + 32;
          std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
          v13 = a3[1];
          std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
        }
        else
        {
          *(_DWORD *)v11 = 0x100000;
          *(_WORD *)(v11 + 4) = 0;
          *(_BYTE *)(v11 + 6) = 0;
          *(_QWORD *)(v11 + 8) = 0;
          v13 = KB::String::operator=(v11, (KB::String *)v30) + 32;
        }
        a3[1] = v13;
        if (v31)
        {
          if (v30[6] == 1)
            free(v31);
        }
        v24 = v22;
        LODWORD(v25) = v23;
        v5 = *(unsigned __int16 *)v7;
        v8 = (_QWORD *)*((_QWORD *)v7 + 1);
      }
    }
    else
    {
      v29 = a3 + 2;
      *(_QWORD *)&v26 = operator new(0x20uLL);
      *((_QWORD *)&v26 + 1) = v26;
      v28 = (char *)(v26 + 32);
      KB::String::String((KB::String *)v26, v7);
      v27 = v26 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)a3, &v26);
      v21 = a3[1];
      this = (unsigned __int16 *)std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v26);
      a3[1] = v21;
    }
  }
  return this;
}

void KB::word_ranges(KB *this@<X0>, const KB::String *a2@<X1>, unint64_t **a3@<X8>)
{
  char v3;
  char *v5;
  int v6;
  int v7;
  _BYTE *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  UChar32 v19;
  int v20;
  char v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  UChar32 v26;
  int v27;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t **v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v3 = (char)a2;
  if (*((_QWORD *)this + 1))
    v5 = (char *)*((_QWORD *)this + 1);
  else
    v5 = (char *)this + 16;
  *(_QWORD *)&v48 = v5;
  v6 = *(unsigned __int16 *)this;
  DWORD2(v48) = 0;
  HIDWORD(v48) = v6;
  LODWORD(v49) = 0;
  KB::String::iterator::initialize((uint64_t *)&v48);
  v44 = v5;
  v45 = v6;
  v46 = v6;
  v47 = 0;
  KB::String::iterator::initialize((uint64_t *)&v44);
  v50 = v48;
  v51 = v49;
  v7 = v45;
  if (DWORD2(v48) == v45)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = -1;
    do
    {
      v11 = v10;
      KB::String::iterator::operator++((uint64_t *)&v50);
      v10 = v11 + 1;
    }
    while (DWORD2(v50) != v7);
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
LABEL_68:
      abort();
    v12 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v11 + 2);
    v8 = v12;
    v50 = v48;
    v51 = v49;
    v9 = v12;
    if (DWORD2(v48) != v7)
    {
      v9 = v12;
      do
      {
        *(_DWORD *)v9 = v51;
        v9 += 4;
        KB::String::iterator::operator++((uint64_t *)&v50);
      }
      while (DWORD2(v50) != v7);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = v9 - v8;
  if (v9 - v8 != -4)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v13 >> 2;
    v42 = v13 >> 2;
    v43 = (v13 >> 2) + 1;
    LODWORD(v18) = -1;
    v41 = v3;
    v40 = a3;
    do
    {
      if (v17 == v15
        || (TI::Favonius::KeyClassification::KeyClassification((TI::Favonius::KeyClassification *)&v50, *(_DWORD *)&v8[4 * v15]), (v50 & 0x34E) == 0))
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_47;
        if (v18 < v16)
        {
          v18 = (int)v18;
          while (1)
          {
            v19 = *(_DWORD *)&v8[4 * v18];
            v20 = u_ispunct(v19);
            if (v19 == 38 || v20 == 0)
              break;
            if (v16 <= ++v18)
            {
              LODWORD(v18) = v16;
              break;
            }
          }
        }
        if (v17 == v15)
          v22 = v3;
        else
          v22 = 1;
        if (v17 > v15 || (v23 = v16, (v22 & 1) == 0))
        {
          v24 = v16;
          if (v18 >= v16)
            v23 = v16;
          else
            v23 = v18;
          while (v24 > v18)
          {
            v25 = v24--;
            v26 = *(_DWORD *)&v8[4 * v25 - 4];
            v27 = u_ispunct(v26);
            if (v26 == 38 || v27 == 0)
            {
              v23 = v25;
              break;
            }
          }
          v3 = v41;
          a3 = v40;
          v17 = v42;
        }
        if (v23 <= v18)
        {
LABEL_47:
          LODWORD(v18) = -1;
        }
        else
        {
          v29 = v18 | ((unint64_t)(v23 - v18) << 32);
          v30 = (unint64_t)a3[2];
          if ((unint64_t)v14 >= v30)
          {
            v32 = *a3;
            v33 = v14 - *a3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              goto LABEL_68;
            v35 = v30 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              if (v36 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v37 = (char *)operator new(8 * v36);
            }
            else
            {
              v37 = 0;
            }
            v38 = (unint64_t *)&v37[8 * v33];
            *v38 = v29;
            v31 = v38 + 1;
            if (v14 != v32)
            {
              do
              {
                v39 = *--v14;
                *--v38 = v39;
              }
              while (v14 != v32);
              v14 = *a3;
            }
            *a3 = v38;
            a3[1] = v31;
            a3[2] = (unint64_t *)&v37[8 * v36];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *v14 = v29;
            v31 = v14 + 1;
          }
          a3[1] = v31;
          LODWORD(v18) = -1;
          v14 = v31;
          v17 = v42;
        }
      }
      else if ((_DWORD)v18 == -1)
      {
        LODWORD(v18) = v16;
      }
      v15 = ++v16;
    }
    while (v43 > v16);
  }
  if (v8)
    operator delete(v8);
}

BOOL KB::character_is_stop_input(KB *this)
{
  int v1;
  int v2;

  v1 = (int)this;
  v2 = u_ispunct((UChar32)this);
  return v1 != 38 && v2 != 0;
}

unsigned __int16 *KB::string_join@<X0>(unsigned __int16 **a1@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  return KB::string_join(*a1, a1[1], a2, a3);
}

unsigned __int16 *KB::string_join@<X0>(unsigned __int16 *result@<X0>, unsigned __int16 *a2@<X1>, const KB::String *a3@<X2>, uint64_t a4@<X8>)
{
  const KB::String *v5;
  const KB::String *v6;

  *(_DWORD *)a4 = 0x100000;
  *(_WORD *)(a4 + 4) = 0;
  *(_BYTE *)(a4 + 6) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  if (result != a2)
  {
    v5 = (const KB::String *)result;
    v6 = (const KB::String *)(a2 - 16);
    if (a2 - 16 != result)
    {
      do
      {
        KB::String::append((unsigned __int16 *)a4, v5);
        KB::String::append((unsigned __int16 *)a4, a3);
        v5 = (const KB::String *)((char *)v5 + 32);
      }
      while (v5 != v6);
    }
    return KB::String::append((unsigned __int16 *)a4, v6);
  }
  return result;
}

BOOL KB::string_has_lowercase_characters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!u_islower(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::string_has_only_lowercase_characters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_islower(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 >= v3;
}

BOOL KB::string_has_uppercase_characters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!u_isupper(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::string_has_only_uppercase_characters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_isupper(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 >= v3;
}

BOOL KB::any_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  char *v4;
  int v5;
  _BOOL8 result;
  int v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  unsigned int v16;

  if (*((_QWORD *)this + 1))
    v4 = (char *)*((_QWORD *)this + 1);
  else
    v4 = (char *)this + 16;
  v13 = v4;
  v5 = *(unsigned __int16 *)this;
  v14 = 0;
  v15 = v5;
  v16 = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  v9 = v4;
  v10 = v5;
  v11 = v5;
  v12 = 0;
  KB::String::iterator::initialize((uint64_t *)&v9);
  result = 0;
  v7 = v10;
  if (v14 != v10)
  {
    while (1)
    {
      v8 = MEMORY[0x1DF0A2DEC](a2, v16);
      result = v8 != 0;
      if (v8)
        break;
      KB::String::iterator::operator++((uint64_t *)&v13);
      if (v14 == v7)
        return 0;
    }
  }
  return result;
}

BOOL KB::all_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 result;
  char *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  unsigned int v17;

  if (*((_QWORD *)this + 1))
    v4 = (char *)*((_QWORD *)this + 1);
  else
    v4 = (char *)this + 16;
  v14 = v4;
  v5 = *(unsigned __int16 *)this;
  v15 = 0;
  v16 = v5;
  v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  v10 = v4;
  v11 = v5;
  v12 = v5;
  v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  v6 = v15;
  v7 = v11;
  while (v6 != v7)
  {
    v8 = MEMORY[0x1DF0A2DEC](a2, v17);
    result = v8 != 0;
    if (!v8)
      return result;
    KB::String::iterator::operator++((uint64_t *)&v14);
    v6 = v15;
  }
  return 1;
}

BOOL KB::none_of_string_characters_in_set(KB *this, const KB::String *a2, const USet *a3)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 result;
  char *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  unsigned int v17;

  if (*((_QWORD *)this + 1))
    v4 = (char *)*((_QWORD *)this + 1);
  else
    v4 = (char *)this + 16;
  v14 = v4;
  v5 = *(unsigned __int16 *)this;
  v15 = 0;
  v16 = v5;
  v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  v10 = v4;
  v11 = v5;
  v12 = v5;
  v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  v6 = v15;
  v7 = v11;
  while (v6 != v7)
  {
    v8 = MEMORY[0x1DF0A2DEC](a2, v17);
    result = v8 == 0;
    if (v8)
      return result;
    KB::String::iterator::operator++((uint64_t *)&v14);
    v6 = v15;
  }
  return 1;
}

uint64_t KB::count_uppercase_letters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  UChar32 v5;
  BOOL v6;
  unsigned __int16 v8[2];
  unsigned __int16 v9;
  char v10;
  void *v11;
  int i;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v8, this);
  v2 = 0;
  v3 = 0;
  for (i = 0; ; v2 = HIWORD(i))
  {
    v4 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      v4 = v9;
    }
    if (v2 >= v4)
      break;
    v5 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    if (u_isupper(v5))
      v3 = (v3 + 1);
    else
      v3 = v3;
  }
  if (v11)
    v6 = v10 == 1;
  else
    v6 = 0;
  if (v6)
    free(v11);
  return v3;
}

uint64_t KB::count_characters_UTF8(KB *this, const KB::String *a2, int a3, int a4)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v13;
  unsigned __int16 v15[2];
  unsigned __int16 v16;
  char v17;
  void *v18;
  int v19;
  uint64_t v20;

  v6 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v15, this);
  v7 = 0;
  v8 = 0;
  v19 = 0;
  while (1)
  {
    v9 = v16;
    if (!v16)
    {
      KB::String::compute_length(v15);
      v9 = v16;
    }
    if (v7 >= v9)
      break;
    v10 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v15);
    v11 = v10 == a3 || v10 == a4;
    v7 = HIWORD(v19);
    if (v11 && HIWORD(v19) > v6)
      v8 = (v8 + 1);
    else
      v8 = v8;
  }
  if (v18)
    v13 = v17 == 1;
  else
    v13 = 0;
  if (v13)
    free(v18);
  return v8;
}

uint64_t KB::count_letters_if_word(KB *this, const KB::String *a2)
{
  char *v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  UChar32 v9;
  uint64_t result;
  int8_t v12;
  unsigned int v13;
  __int128 v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  *(_QWORD *)&v21 = v3;
  v4 = *(unsigned __int16 *)this;
  DWORD2(v21) = 0;
  HIDWORD(v21) = v4;
  LODWORD(v22) = 0;
  KB::String::iterator::initialize((uint64_t *)&v21);
  v17 = v3;
  v18 = v4;
  v19 = v4;
  v20 = 0;
  KB::String::iterator::initialize((uint64_t *)&v17);
  v5 = 0;
  v15 = v21;
  v16 = v22;
  v6 = v18;
  v7 = DWORD2(v21);
LABEL_5:
  v8 = DWORD2(v15);
  while (v8 != v6)
  {
    v9 = v16;
    KB::String::iterator::operator++((uint64_t *)&v15);
    if ((v9 - 38) >= 2 && (v9 - 1523) >= 2 && v9 != 8217)
    {
      v12 = u_charType(v9);
      v5 += (0x3Eu >> v12) & 1;
      if (((1 << v12) & 0x40003FE) == 0)
        return 0;
      goto LABEL_5;
    }
    result = 0;
    if (v8 != v7)
    {
      v8 = DWORD2(v15);
      if (DWORD2(v15) != v6)
        continue;
    }
    return result;
  }
  if (!v5)
    return 0;
  v13 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v13 = *((unsigned __int16 *)this + 2);
  }
  if (v13 - v5 >= 4 || (float)((float)v5 / (float)v13) < 0.49)
    return 0;
  else
    return v5;
}

BOOL KB::character_is_word_medial_punctuation(KB *this)
{
  _BOOL4 v1;

  v1 = ((_DWORD)this - 1523) < 2 || (_DWORD)this == 8217;
  return ((_DWORD)this - 38) < 2 || v1;
}

BOOL KB::string_is_learnable_word(KB *this, const KB::String *a2)
{
  return KB::count_letters_if_word(this, a2) != 0;
}

uint64_t KB::strings_have_same_digraphs(KB *this, const KB::String *a2, const KB::String *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  KB *v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  KB *v14;
  unsigned int v16;
  unsigned int v17;
  int is_digraph;
  uint64_t v19;
  BOOL v20;
  unsigned __int16 v22[2];
  unsigned __int16 v23;
  char v24;
  void *v25;
  int v26;
  unsigned __int16 v27[2];
  unsigned __int16 v28;
  char v29;
  void *v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v27, a2);
  v31 = 0;
  KB::String::String((KB::String *)v22, this);
  v26 = 0;
  while (1)
  {
    v4 = HIWORD(v31);
    v5 = v28;
    if (!v28)
    {
      KB::String::compute_length(v27);
      v5 = v28;
    }
    if (v4 >= v5)
      break;
    v6 = HIWORD(v26);
    v7 = v23;
    if (!v23)
    {
      KB::String::compute_length(v22);
      v7 = v23;
    }
    if (v6 >= v7)
      break;
    do
    {
      v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v27);
      v9 = (KB *)v8;
      if ((v8 - 38) >= 2 && (v8 - 1523) >= 2 && (_DWORD)v8 != 8217)
        break;
      v11 = HIWORD(v31);
      v12 = v28;
      if (!v28)
      {
        KB::String::compute_length(v27);
        v12 = v28;
      }
    }
    while (v11 < v12);
    do
    {
      v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v22);
      v14 = (KB *)v13;
      if ((v13 - 38) >= 2 && (v13 - 1523) >= 2 && (_DWORD)v13 != 8217)
        break;
      v16 = HIWORD(v26);
      v17 = v23;
      if (!v23)
      {
        KB::String::compute_length(v22);
        v17 = v23;
      }
    }
    while (v16 < v17);
    is_digraph = KB::character_is_digraph(v9);
    if (is_digraph != KB::character_is_digraph(v14))
    {
      v19 = 0;
      goto LABEL_29;
    }
  }
  v19 = 1;
LABEL_29:
  if (v25)
    v20 = v24 == 1;
  else
    v20 = 0;
  if (v20)
    free(v25);
  if (v30 && v29 == 1)
    free(v30);
  return v19;
}

uint64_t KB::character_is_digraph(KB *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if (v1 <= 337)
  {
    v3 = v1 - 197;
    if (v3 <= 0x21 && ((1 << v3) & 0x304000003) != 0)
      return result;
    return 0;
  }
  if ((v1 - 338) >= 2 && (v1 - 2507) >= 2 && v1 != 3635)
    return 0;
  return result;
}

uint64_t KB::count_precomposed_diacritic_letters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  KB *v5;
  BOOL v6;
  unsigned __int16 v8[2];
  unsigned __int16 v9;
  char v10;
  void *v11;
  int i;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v8, this);
  v2 = 0;
  v3 = 0;
  for (i = 0; ; v2 = HIWORD(i))
  {
    v4 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      v4 = v9;
    }
    if (v2 >= v4)
      break;
    v5 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    v3 = (v3 + KB::character_is_precomposed_diacritic_letter(v5));
  }
  if (v11)
    v6 = v10 == 1;
  else
    v6 = 0;
  if (v6)
    free(v11);
  return v3;
}

BOOL KB::character_is_precomposed_diacritic_letter(KB *this)
{
  UChar32 v1;

  v1 = (int)this;
  return !u_getIntPropertyValue((UChar32)this, UCHAR_LEAD_CANONICAL_COMBINING_CLASS)
      && u_getIntPropertyValue(v1, UCHAR_TRAIL_CANONICAL_COMBINING_CLASS) != 0;
}

BOOL KB::string_has_precomposed_diacritic_letters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  KB *v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!KB::character_is_precomposed_diacritic_letter(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::string_has_separated_diacritics(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (((1 << u_charType(v4)) & 0x4000050) == 0);
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::character_is_separated_diacritic_letter(KB *this)
{
  return ((1 << u_charType((UChar32)this)) & 0x4000050) != 0;
}

BOOL KB::string_has_spaces(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) != 12);
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::strings_have_spaces_in_same_positions(KB *this, const KB::String *a2, const KB::String *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  UChar32 v8;
  UChar32 v9;
  _BOOL4 v10;
  BOOL v11;
  unsigned __int16 v13[2];
  unsigned __int16 v14;
  char v15;
  void *v16;
  int v17;
  unsigned __int16 v18[2];
  unsigned __int16 v19;
  char v20;
  void *v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v18, this);
  v22 = 0;
  KB::String::String((KB::String *)v13, a2);
  v17 = 0;
  do
  {
    v4 = HIWORD(v17);
    v5 = v14;
    if (!v14)
    {
      KB::String::compute_length(v13);
      v5 = v14;
    }
    if (v4 >= v5)
      break;
    v6 = HIWORD(v22);
    v7 = v19;
    if (!v19)
    {
      KB::String::compute_length(v18);
      v7 = v19;
    }
    if (v6 >= v7)
      break;
    v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v18);
    v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v13);
    v10 = u_charType(v8) != 12;
  }
  while (((v10 ^ (u_charType(v9) == 12)) & 1) != 0);
  if (v16)
    v11 = v15 == 1;
  else
    v11 = 0;
  if (v11)
    free(v16);
  if (v21 && v20 == 1)
    free(v21);
  return v4 >= v5;
}

BOOL KB::string_has_letters(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (((1 << u_charType(v4)) & 0x3E) == 0);
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

uint64_t KB::count_letters(KB *this, const KB::String *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  int v5;
  char *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  UChar32 c;

  if (*((_QWORD *)this + 1))
    v2 = (char *)*((_QWORD *)this + 1);
  else
    v2 = (char *)this + 16;
  v11 = v2;
  v3 = *(unsigned __int16 *)this;
  v12 = 0;
  v13 = v3;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v7 = v2;
  v8 = v3;
  v9 = v3;
  v10 = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  v4 = 0;
  v5 = v8;
  if (v12 != v8)
  {
    LODWORD(v4) = 0;
    do
    {
      v4 = ((0x3Eu >> u_charType(c)) & 1) + v4;
      KB::String::iterator::operator++((uint64_t *)&v11);
    }
    while (v12 != v5);
  }
  return v4;
}

BOOL KB::string_has_numbers(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) != 9);
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

uint64_t KB::count_numbers(KB *this, const KB::String *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  int v5;
  char *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  UChar32 c;

  if (*((_QWORD *)this + 1))
    v2 = (char *)*((_QWORD *)this + 1);
  else
    v2 = (char *)this + 16;
  v11 = v2;
  v3 = *(unsigned __int16 *)this;
  v12 = 0;
  v13 = v3;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v7 = v2;
  v8 = v3;
  v9 = v3;
  v10 = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  v4 = 0;
  v5 = v8;
  if (v12 != v8)
  {
    LODWORD(v4) = 0;
    do
    {
      if (u_charType(c) == 9)
        v4 = (v4 + 1);
      else
        v4 = v4;
      KB::String::iterator::operator++((uint64_t *)&v11);
    }
    while (v12 != v5);
  }
  return v4;
}

BOOL KB::string_has_nonnumbers(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (u_charType(v4) == 9);
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::strings_have_diacritics_in_same_positions(KB *this, const KB::String *a2, const KB::String *a3)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  UChar32 v11;
  UChar32 v12;
  UChar32 v13;
  int v14;
  _BYTE v16[8];
  void *v17;
  int v18;
  _BYTE v19[8];
  void *v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    v5 = *((unsigned __int16 *)a2 + 2);
  }
  v6 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v6 = *((unsigned __int16 *)this + 2);
  }
  KB::String::String((KB::String *)v19, this);
  v21 = 0;
  KB::String::String((KB::String *)v16, a2);
  v18 = 0;
  if (v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 - 1;
    while (1)
    {
      v10 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v19);
      v11 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v16);
      if (v8 >= v5 - 1)
        v12 = 0;
      else
        v12 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v16);
      if (v8 >= v9)
        v13 = 0;
      else
        v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v19);
      if (v12 > 710)
      {
        switch(v12)
        {
          case 711:
            v14 = MEMORY[0x1E0DBEB70](v10);
            goto LABEL_26;
          case 730:
            v14 = MEMORY[0x1E0DBEB98](v10);
LABEL_26:
            if (v14 == (_DWORD)v10)
              goto LABEL_36;
            break;
          case 715:
            v14 = MEMORY[0x1E0DBEB88](v10);
            goto LABEL_26;
        }
      }
      else
      {
        switch(v12)
        {
          case 175:
            v14 = MEMORY[0x1E0DBEB90](v10);
            goto LABEL_26;
          case 180:
            v14 = MEMORY[0x1E0DBEB68](v10);
            goto LABEL_26;
          case 710:
            v14 = MEMORY[0x1E0DBEB78](v10);
            goto LABEL_26;
        }
      }
      if (u_charType(v11) != 6 || u_charType(v10) == 6)
      {
        if (((0x4000050u >> u_charType(v12)) & 1) == 0)
          KB::UTF8Iterator::prev((KB::UTF8Iterator *)v16);
        if (((0x4000050u >> u_charType(v13)) & 1) == 0)
          KB::UTF8Iterator::prev((KB::UTF8Iterator *)v19);
        v7 = ++v8 >= v5;
        if (v5 != v8)
          continue;
      }
      goto LABEL_36;
    }
  }
  v7 = 1;
LABEL_36:
  if (v17 && v16[6] == 1)
    free(v17);
  if (v20 && v19[6] == 1)
    free(v20);
  return v7;
}

uint64_t KB::strings_have_same_precomposed_diacritic_letters(KB *a1, KB *a2, uint64_t a3, KB::String *a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  KB *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 is_precomposed_diacritic_letter;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  _BYTE v27[8];
  void *v28;
  _BYTE v29[8];
  void *v30;
  unsigned __int16 v31[2];
  unsigned __int16 v32;
  char v33;
  void *v34;
  int v35;
  unsigned __int16 v36[2];
  unsigned __int16 v37;
  char v38;
  void *v39;
  int v40;
  _BYTE v41[8];
  void *v42;
  _BYTE v43[8];
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  KB::lower_string(a1, a4, (KB::String *)v43);
  KB::lower_string(a2, a4, (KB::String *)v41);
  KB::String::String((KB::String *)v36, (const KB::String *)v41);
  v40 = 0;
  KB::String::String((KB::String *)v31, (const KB::String *)v43);
  v35 = 0;
  while (1)
  {
    v7 = HIWORD(v40);
    v8 = v37;
    if (!v37)
    {
      KB::String::compute_length(v36);
      v8 = v37;
    }
    if (v7 >= v8)
      break;
    v9 = HIWORD(v35);
    v10 = v32;
    if (!v32)
    {
      KB::String::compute_length(v31);
      v10 = v32;
    }
    if (v9 >= v10)
      break;
    do
    {
      v11 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v36);
      v12 = (KB *)v11;
      if ((v11 - 38) >= 2 && (v11 - 1523) >= 2 && (_DWORD)v11 != 8217)
        break;
      v14 = HIWORD(v40);
      v15 = v37;
      if (!v37)
      {
        KB::String::compute_length(v36);
        v15 = v37;
      }
    }
    while (v14 < v15);
    do
    {
      v16 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v31);
      v17 = v16;
      if (v16 - 38 >= 2 && v16 - 1523 >= 2 && v16 != 8217)
        break;
      v19 = HIWORD(v35);
      v20 = v32;
      if (!v32)
      {
        KB::String::compute_length(v31);
        v20 = v32;
      }
    }
    while (v19 < v20);
    is_precomposed_diacritic_letter = KB::character_is_precomposed_diacritic_letter(v12);
    if ((_DWORD)v12 != v17 && is_precomposed_diacritic_letter)
    {
      KB::String::String((uint64_t)v29, v12);
      KB::String::String((uint64_t)v27, v17);
      v22 = *(_QWORD *)(a3 + 24);
      if (!v22)
        std::__throw_bad_function_call[abi:nn180100]();
      v23 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)v22 + 48))(v22, v29, v27);
      if (v28 && v27[6] == 1)
        free(v28);
      if (v30 && v29[6] == 1)
        free(v30);
      if (v23)
      {
        v24 = 0;
        goto LABEL_38;
      }
    }
  }
  v24 = 1;
LABEL_38:
  if (v34)
    v25 = v33 == 1;
  else
    v25 = 0;
  if (v25)
    free(v34);
  if (v39 && v38 == 1)
    free(v39);
  if (v42 && v41[6] == 1)
    free(v42);
  if (v44 && v43[6] == 1)
    free(v44);
  return v24;
}

BOOL KB::string_has_digraphs(KB *this, const KB::String *a2)
{
  unsigned int v2;
  unsigned int v3;
  KB *v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, this);
  v11 = 0;
  do
  {
    v2 = HIWORD(v11);
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v2 >= v3)
      break;
    v4 = (KB *)KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
  }
  while (!KB::character_is_digraph(v4));
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2 < v3;
}

BOOL KB::string_has_word_medial_punctuation(KB *this, const KB::String *a2)
{
  int v2;
  char *v3;
  int v4;
  int v5;
  char *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  int v19;

  v2 = *(unsigned __int16 *)this;
  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  v16 = v3;
  v17 = v2;
  v18 = v2;
  v19 = 0;
  KB::String::iterator::initialize((uint64_t *)&v16);
  v12 = v3;
  v13 = 0;
  v14 = v2;
  v15 = 0;
  KB::String::iterator::initialize((uint64_t *)&v12);
  v8 = v3;
  v9 = v2;
  v10 = v2;
  v11 = 0;
  KB::String::iterator::initialize((uint64_t *)&v8);
  v4 = v13;
  v5 = v9;
  if (v13 != v9)
  {
    while ((v15 - 38) >= 2)
    {
      if ((v15 - 1523) < 2 || v15 == 8217)
        break;
      KB::String::iterator::operator++((uint64_t *)&v12);
      v4 = v13;
      if (v13 == v5)
      {
        v4 = v5;
        return v17 != v4;
      }
    }
  }
  return v17 != v4;
}

uint64_t KB::count_word_medial_punctuation(KB *this, const KB::String *a2)
{
  char *v2;
  int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  char *v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;

  if (*((_QWORD *)this + 1))
    v2 = (char *)*((_QWORD *)this + 1);
  else
    v2 = (char *)this + 16;
  v13 = v2;
  v3 = *(unsigned __int16 *)this;
  v14 = 0;
  v15 = v3;
  v16 = 0;
  KB::String::iterator::initialize((uint64_t *)&v13);
  v9 = v2;
  v10 = v3;
  v11 = v3;
  v12 = 0;
  KB::String::iterator::initialize((uint64_t *)&v9);
  v4 = 0;
  v5 = v10;
  if (v14 != v10)
  {
    LODWORD(v4) = 0;
    do
    {
      v7 = (v16 - 1523) < 2 || v16 == 8217;
      if ((v16 - 38) < 2)
        v7 = 1;
      v4 = (v7 + v4);
      KB::String::iterator::operator++((uint64_t *)&v13);
    }
    while (v14 != v5);
  }
  return v4;
}

uint64_t KB::string_contains_run(KB *this, const KB::String *a2)
{
  int v2;
  char *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;

  v2 = (int)a2;
  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  v14 = v3;
  v4 = *(unsigned __int16 *)this;
  v15 = 0;
  v16 = v4;
  v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  v10 = v3;
  v11 = v4;
  v12 = v4;
  v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  v5 = v11;
  if (v15 == v11)
    return 0;
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = v17;
    if (v17 == v7)
      ++v6;
    else
      v6 = 1;
    if (v6 >= v2)
      break;
    KB::String::iterator::operator++((uint64_t *)&v14);
    v7 = v8;
    if (v15 == v5)
      return 0;
  }
  return 1;
}

uint64_t KB::string_contains_pair_run(KB *this, const KB::String *a2)
{
  int v2;
  char *v3;
  int v4;
  int v5;
  _BOOL8 v6;
  int v7;
  int v8;
  char *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = (int)a2;
  v19[1] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19[0] = 0;
  if (*((_QWORD *)this + 1))
    v3 = (char *)*((_QWORD *)this + 1);
  else
    v3 = (char *)this + 16;
  v14 = v3;
  v4 = *(unsigned __int16 *)this;
  v15 = 0;
  v16 = v4;
  v17 = 0;
  KB::String::iterator::initialize((uint64_t *)&v14);
  v10 = v3;
  v11 = v4;
  v12 = v4;
  v13 = 0;
  KB::String::iterator::initialize((uint64_t *)&v10);
  v5 = v11;
  if (v15 == v11)
    return 0;
  v6 = 0;
  while (1)
  {
    if (v17 == *((_DWORD *)v19 + v6))
    {
      v7 = *((_DWORD *)&v19[-1] + v6) + 1;
    }
    else
    {
      *((_DWORD *)v19 + v6) = v17;
      v7 = 1;
    }
    *((_DWORD *)&v19[-1] + v6) = v7;
    v8 = HIDWORD(v18);
    if (SHIDWORD(v18) >= (int)v18)
      v8 = v18;
    if (v8 >= v2)
      break;
    v6 = !v6;
    KB::String::iterator::operator++((uint64_t *)&v14);
    if (v15 == v5)
      return 0;
  }
  return 1;
}

BOOL KB::string_contains_terminal_run(KB *this, const KB::String *a2)
{
  int v2;
  int v4;
  _BOOL8 result;
  int v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = (int)a2;
  v4 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v4 = *((unsigned __int16 *)this + 2);
  }
  if (v4 < v2)
    return 0;
  v6 = KB::String::last(this);
  v7 = *(unsigned __int16 *)this;
  if (*((_QWORD *)this + 1))
    v8 = (char *)*((_QWORD *)this + 1);
  else
    v8 = (char *)this + 16;
  *(_QWORD *)&v15 = v8;
  DWORD2(v15) = v7;
  HIDWORD(v15) = v7;
  LODWORD(v16) = 0;
  KB::String::iterator::initialize((uint64_t *)&v15);
  v17 = v15;
  v18 = v16;
  std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v17, -v2);
  *(_QWORD *)&v11 = v8;
  DWORD2(v11) = v7;
  HIDWORD(v11) = v7;
  LODWORD(v12) = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v13 = v11;
  v14 = v12;
  KB::String::iterator::operator--((KB::String::iterator *)&v13);
  v9 = DWORD2(v17);
  v10 = DWORD2(v13);
  while (v9 != v10)
  {
    result = (_DWORD)v18 == v6;
    if ((_DWORD)v18 != v6)
      return result;
    KB::String::iterator::operator++((uint64_t *)&v17);
    v9 = DWORD2(v17);
  }
  return 1;
}

BOOL KB::character_is_punctuation(KB *this)
{
  return u_ispunct((UChar32)this) != 0;
}

BOOL KB::string_has_control_characters(KB *this, const KB::String *a2)
{
  unsigned __int8 v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  unsigned __int16 v8[2];
  unsigned __int16 v9;
  char v10;
  void *v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v8, this);
  v12 = 0;
  if ((v2 & 1) == 0
  {
    KB::string_has_control_characters(KB::String const&)::controlCharacters = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetControl);
  }
  while (1)
  {
    v3 = HIWORD(v12);
    v4 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      v4 = v9;
    }
    if (v3 >= v4)
      break;
    v5 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    if (v5 != 8204)
    {
      if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)KB::string_has_control_characters(KB::String const&)::controlCharacters, v5))
      {
        break;
      }
    }
  }
  if (v11)
    v6 = v10 == 1;
  else
    v6 = 0;
  if (v6)
    free(v11);
  return v3 < v4;
}

BOOL KB::character_is_letter(KB *this)
{
  return ((1 << u_charType((UChar32)this)) & 0x2E) != 0;
}

BOOL KB::strings_have_same_uppercase_letters(KB *this, const KB::String *a2, const KB::String *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  UChar32 v8;
  UChar32 v9;
  int v10;
  int v11;
  BOOL v12;
  unsigned __int16 v14[2];
  unsigned __int16 v15;
  char v16;
  void *v17;
  int v18;
  unsigned __int16 v19[2];
  unsigned __int16 v20;
  char v21;
  void *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v19, this);
  v23 = 0;
  KB::String::String((KB::String *)v14, a2);
  v18 = 0;
  do
  {
    v4 = HIWORD(v18);
    v5 = v15;
    if (!v15)
    {
      KB::String::compute_length(v14);
      v5 = v15;
    }
    if (v4 >= v5)
      break;
    v6 = HIWORD(v23);
    v7 = v20;
    if (!v20)
    {
      KB::String::compute_length(v19);
      v7 = v20;
    }
    if (v6 >= v7)
      break;
    v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v19);
    v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v14);
    v10 = u_isupper(v8);
    v11 = u_isupper(v9);
    if ((v10 != 0) != (v11 != 0))
      break;
  }
  while (!v10 || !v11 || v8 == v9);
  if (v17)
    v12 = v16 == 1;
  else
    v12 = 0;
  if (v12)
    free(v17);
  if (v22 && v21 == 1)
    free(v22);
  return v4 >= v5;
}

BOOL KB::string_has_punctuation(KB *this, const KB::String *a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  UChar32 c;

  v3 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)this + 16;
  if (v3)
    v5 = (char *)*((_QWORD *)this + 1);
  else
    v5 = (char *)this + 16;
  v15 = v5;
  v6 = *(unsigned __int16 *)this;
  v16 = 0;
  v17 = v6;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v15);
  while (1)
  {
    v7 = (uint64_t)(v3 ? v3 : v4);
    v11 = v7;
    v12 = v6;
    v13 = v6;
    v14 = 0;
    KB::String::iterator::initialize(&v11);
    v8 = v16;
    v9 = v12;
    if (v16 == v12 || u_ispunct(c))
      break;
    KB::String::iterator::operator++((uint64_t *)&v15);
    v6 = *(unsigned __int16 *)this;
    v3 = (char *)*((_QWORD *)this + 1);
  }
  return v8 != v9;
}

uint64_t KB::string_capitalization(KB *this, const KB::String *a2)
{
  char *v2;
  int v3;
  UChar32 v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  char *v11;
  int v12;
  int v13;
  UChar32 c;

  v2 = (char *)*((_QWORD *)this + 1);
  if (!v2)
    v2 = (char *)this + 16;
  v11 = v2;
  v3 = *(unsigned __int16 *)this;
  v12 = 0;
  v13 = v3;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v11);
  v4 = c;
  if (!c)
    return 0;
  LODWORD(v5) = 0;
  v6 = 0;
  do
  {
    v7 = u_isupper(v4);
    v8 = 1 << v6;
    if (!v7)
      v8 = 0;
    v5 = v8 | v5;
    KB::String::iterator::operator++((uint64_t *)&v11);
    v4 = c;
    if (c)
      v9 = v6 >= 0x1F;
    else
      v9 = 1;
    ++v6;
  }
  while (!v9);
  return v5;
}

uint64_t KB::to_hex_string@<X0>(uint64_t this@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;

  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if ((_DWORD)a2)
  {
    v4 = (unsigned __int8 *)this;
    v5 = a2;
    do
    {
      v6 = *v4++;
      this = KB::String::append_format((KB::String *)a3, "%02x", v6);
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t KB::to_hex_string@<X0>(KB *this@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  const char *v4;
  const char *v5;

  v3 = (const void *)*(unsigned __int16 *)this;
  v4 = (const char *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = (char *)this + 16;
  if (*(_WORD *)this)
    v5 = v4;
  else
    v5 = "";
  return KB::to_hex_string((uint64_t)v5, v3, a2);
}

{
  const void *v3;
  char *v4;

  v3 = (const void *)*(unsigned __int16 *)this;
  if (v3 <= 0xE)
    v4 = (char *)this + 2;
  else
    v4 = (char *)*((_QWORD *)this + 1);
  return KB::to_hex_string((uint64_t)v4, v3, a2);
}

uint64_t KB::suffixes_equal_utf8(KB *this, const KB::String *a2, const KB::String *a3, const KB::String *a4)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v25[2];
  unsigned __int16 v26;
  char v27;
  void *v28;
  int j;
  unsigned __int16 v30[2];
  unsigned __int16 v31;
  char v32;
  void *v33;
  int i;
  uint64_t v35;

  v4 = a4;
  v6 = a2;
  v35 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v30, this);
  v7 = 0;
  for (i = 0; ; v7 = HIWORD(i))
  {
    v8 = v31;
    v9 = v7;
    if (!v31)
    {
      KB::String::compute_length(v30);
      v8 = v31;
      v9 = HIWORD(i);
    }
    if (v7 >= v8 || v9 >= v6)
      break;
    KB::UTF8Iterator::next((KB::UTF8Iterator *)v30);
  }
  KB::String::String((KB::String *)v25, a3);
  v11 = 0;
  for (j = 0; ; v11 = HIWORD(j))
  {
    v12 = v26;
    v13 = v11;
    if (!v26)
    {
      KB::String::compute_length(v25);
      v12 = v26;
      v13 = HIWORD(j);
    }
    if (v11 >= v12 || v13 >= v4)
      break;
    KB::UTF8Iterator::next((KB::UTF8Iterator *)v25);
  }
  while (1)
  {
    v18 = HIWORD(i);
    v19 = v31;
    if (!v31)
    {
      KB::String::compute_length(v30);
      v19 = v31;
    }
    if (v18 >= v19)
      break;
    v15 = HIWORD(j);
    v16 = v26;
    if (!v26)
    {
      KB::String::compute_length(v25);
      v16 = v26;
    }
    if (v15 >= v16)
    {
      v20 = HIWORD(i);
      goto LABEL_27;
    }
    v17 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v30);
    if (v17 != KB::UTF8Iterator::next((KB::UTF8Iterator *)v25))
    {
      v23 = 0;
      goto LABEL_31;
    }
  }
  v20 = HIWORD(i);
  if (!v19)
  {
    KB::String::compute_length(v30);
    v19 = v31;
  }
LABEL_27:
  v21 = HIWORD(j);
  v22 = v26;
  if (!v26)
  {
    KB::String::compute_length(v25);
    v22 = v26;
  }
  v23 = (v20 >= v19) ^ (v21 < v22);
LABEL_31:
  if (v28 && v27 == 1)
    free(v28);
  if (v33 && v32 == 1)
    free(v33);
  return v23;
}

uint64_t KB::prefixes_equal_utf8(KB *this, const KB::String *a2, const KB::String *a3, int a4)
{
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 v21[2];
  unsigned __int16 v22;
  char v23;
  void *v24;
  int v25;
  unsigned __int16 v26[2];
  unsigned __int16 v27;
  char v28;
  void *v29;
  int v30;
  uint64_t v31;

  v5 = a3;
  v31 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v26, this);
  v30 = 0;
  KB::String::String((KB::String *)v21, a2);
  v25 = 0;
  while (1)
  {
    v7 = HIWORD(v30);
    v8 = v27;
    if (!v27)
    {
      KB::String::compute_length(v26);
      v8 = v27;
    }
    if (v7 >= v8)
      break;
    v9 = HIWORD(v25);
    v10 = v22;
    if (!v22)
    {
      KB::String::compute_length(v21);
      v10 = v22;
    }
    v11 = HIWORD(v30);
    if (v9 >= v10 || HIWORD(v30) >= v5)
      goto LABEL_18;
    v13 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v26);
    v14 = v13;
    if (a4)
    {
      v15 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v21);
    }
    else
    {
      v14 = MEMORY[0x1DF0A2D20](v13);
      v16 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v21);
      v15 = MEMORY[0x1DF0A2D20](v16);
    }
    if (v14 != v15)
    {
      v17 = 0;
      goto LABEL_21;
    }
  }
  v11 = HIWORD(v30);
  if (!v8)
  {
    KB::String::compute_length(v26);
    v8 = v27;
  }
LABEL_18:
  v18 = HIWORD(v25);
  v19 = v22;
  if (!v22)
  {
    KB::String::compute_length(v21);
    v19 = v22;
  }
  v17 = (v11 >= v8) ^ (v18 < v19);
LABEL_21:
  if (v24 && v23 == 1)
    free(v24);
  if (v29 && v28 == 1)
    free(v29);
  return v17;
}

void KB::word_with_string(KB::String *this@<X1>, uint64_t *a2@<X0>, int a3@<W2>, KB::Word *a4@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _BYTE v14[8];
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2 == a2[1] || *(_WORD *)this == 0)
  {
    *((_OWORD *)a4 + 13) = 0u;
    *((_OWORD *)a4 + 14) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
    KB::Word::Word(a4);
    return;
  }
  v10 = 0;
  v11 = 1;
  while (!a3)
  {
    if (KB::String::equal(this, (const KB::String *)(v5 + 240 * v10), 0))
      goto LABEL_16;
LABEL_14:
    v10 = v11;
    v5 = *a2;
    if (0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 4) <= v11++)
    {
      *((_OWORD *)a4 + 13) = 0u;
      *((_OWORD *)a4 + 14) = 0u;
      *((_OWORD *)a4 + 11) = 0u;
      *((_OWORD *)a4 + 12) = 0u;
      *((_OWORD *)a4 + 9) = 0u;
      *((_OWORD *)a4 + 10) = 0u;
      *((_OWORD *)a4 + 7) = 0u;
      *((_OWORD *)a4 + 8) = 0u;
      *((_OWORD *)a4 + 5) = 0u;
      *((_OWORD *)a4 + 6) = 0u;
      *((_OWORD *)a4 + 3) = 0u;
      *((_OWORD *)a4 + 4) = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *((_OWORD *)a4 + 2) = 0u;
      *(_OWORD *)a4 = 0u;
      KB::Word::Word(a4);
      return;
    }
  }
  KB::Word::capitalized_string((KB::Word *)(v5 + 240 * v10), (uint64_t)v14);
  v12 = KB::String::equal(this, (const KB::String *)v14, 1);
  if (v15)
  {
    if (v14[6] == 1)
      free(v15);
  }
  if (!v12)
    goto LABEL_14;
LABEL_16:
  KB::Word::Word(a4, (const KB::Word *)(*a2 + 240 * v10));
}

BOOL KB::word_vector_contains_string(uint64_t *a1, KB::String *a2, int a3)
{
  _BOOL8 v3;
  _WORD v5[120];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  KB::word_with_string(a2, a1, a3, (KB::Word *)v5);
  v3 = v5[0] != 0;
  KB::Word::~Word((KB::Word *)v5);
  return v3;
}

BOOL KB::character_has_diacritic(KB *this, int a2)
{
  _BOOL8 result;
  int v4;
  BOOL v5;

  result = 0;
  if (a2 > 710)
  {
    if (a2 > 729)
    {
      if (a2 == 730)
      {
        v4 = MEMORY[0x1E0DBEB98](this);
      }
      else
      {
        if (a2 != 732)
          return result;
        v4 = MEMORY[0x1E0DBEBA0](this);
      }
    }
    else if (a2 == 711)
    {
      v4 = MEMORY[0x1E0DBEB70](this);
    }
    else
    {
      if (a2 != 715)
        return result;
      v4 = MEMORY[0x1E0DBEB88](this);
    }
  }
  else if (a2 > 179)
  {
    if (a2 == 180)
    {
      v4 = MEMORY[0x1E0DBEB68](this);
    }
    else
    {
      if (a2 != 710)
        return result;
      v4 = MEMORY[0x1E0DBEB78](this);
    }
  }
  else if (a2 == 168)
  {
    v4 = MEMORY[0x1E0DBEB80](this);
  }
  else
  {
    if (a2 != 175)
      return result;
    v4 = MEMORY[0x1E0DBEB90](this);
  }
  if (v4)
    v5 = v4 == (_DWORD)this;
  else
    v5 = 1;
  return !v5;
}

BOOL KB::character_is_free_insertion(UChar32 c)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  int v5;

  result = 1;
  if (c > 729)
  {
    if (c == 730 || c == 732 || c == 901)
      return result;
  }
  else if ((c - 168) <= 0xC && ((1 << (c + 88)) & 0x1081) != 0)
  {
    return result;
  }
  if (u_charType(c) == 4)
    return 1;
  result = 1;
  if (c <= 2304)
  {
    if (c > 1599)
    {
      if ((c - 1600) <= 0x30)
      {
        v3 = 1 << (c - 64);
        v4 = 0x1000000FFF801;
LABEL_18:
        if ((v3 & v4) != 0)
          return result;
      }
LABEL_47:
      v5 = u_ispunct(c);
      return c != 38 && v5 != 0;
    }
    if (((c - 710) > 5 || ((1 << (c + 58)) & 0x33) == 0)
      && ((c - 168) > 0xC || ((1 << (c + 88)) & 0x1081) == 0))
    {
      goto LABEL_47;
    }
  }
  else
  {
    if (c > 2636)
    {
      if (c > 2747)
      {
        if (c <= 3020)
        {
          if (c == 2748 || c == 2765 || c == 2946)
            return result;
        }
        else if (c > 3148)
        {
          if (c == 3149 || c == 8204)
            return result;
        }
        else if (c == 3021 || c == 3075)
        {
          return result;
        }
        goto LABEL_47;
      }
      if ((c - 2637) <= 0x36)
      {
        v3 = 1 << (c - 77);
        v4 = 0x70001800000011;
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    if (c <= 2491)
    {
      if ((c - 2305) <= 0x3B && ((1 << (c - 1)) & 0x800000000000007) != 0)
        return result;
      if ((c - 2381) > 0x36)
        goto LABEL_47;
      v3 = 1 << (c - 77);
      v4 = 0x50000000000001;
      goto LABEL_18;
    }
    if (((c - 2561) > 0x3B || ((1 << (c - 1)) & 0x800000000000007) == 0)
      && c != 2492
      && c != 2509)
    {
      goto LABEL_47;
    }
  }
  return result;
}

BOOL KB::string_contains_surface_form_features(KB *this, const KB::String *a2)
{
  char *v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  KB *v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  UChar32 c;

  v3 = (char *)this + 16;
  if (*((_QWORD *)this + 1))
    v4 = (char *)*((_QWORD *)this + 1);
  else
    v4 = (char *)this + 16;
  v20 = v4;
  v5 = *(unsigned __int16 *)this;
  v21 = 0;
  v22 = v5;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v20);
  v16 = v4;
  v17 = v5;
  v18 = v5;
  v19 = 0;
  KB::String::iterator::initialize((uint64_t *)&v16);
  v6 = v21;
  v7 = v17;
  if (v21 != v17)
  {
    while (1)
    {
      v8 = (KB *)c;
      if (KB::character_is_free_insertion(c)
        || KB::character_is_precomposed_diacritic_letter(v8)
        || KB::character_is_digraph(v8))
      {
        break;
      }
      KB::String::iterator::operator++((uint64_t *)&v20);
      if (v21 == v7)
      {
        v6 = v7;
        goto LABEL_11;
      }
    }
    v6 = v21;
  }
LABEL_11:
  v9 = *(unsigned __int16 *)this;
  v10 = *((_QWORD *)this + 1);
  if (!v10)
    v10 = (uint64_t)v3;
  v12 = v10;
  v13 = v9;
  v14 = v9;
  v15 = 0;
  KB::String::iterator::initialize(&v12);
  return v6 != v13;
}

BOOL KB::substitution_allowed(KB *this, uint64_t a2, _BYTE *a3, BOOL *a4)
{
  KB *v6;
  UChar32 v7;
  UChar32 v9;
  _BOOL4 v12;
  BOOL v13;
  int v14;

  if (a3)
    *a3 = 0;
  if ((_DWORD)a2 == (_DWORD)this)
    return 1;
  v6 = (KB *)MEMORY[0x1DF0A2D20](a2);
  v7 = MEMORY[0x1DF0A2D20](this);
  if ((_DWORD)v6 == v7)
    return 1;
  v9 = v7;
  if (a3)
    *a3 = 1;
  if (((1 << u_charType((UChar32)v6)) & 0x2E) != 0
    && ((1 << u_charType(v9)) & 0x2E) != 0
    && !KB::character_is_precomposed_diacritic_letter(v6)
    && !KB::character_is_digraph(v6))
  {
    return 1;
  }
  if (v9 > 368)
  {
    switch(v9)
    {
      case 369:
        v13 = (_DWORD)v6 == 252;
        v14 = 250;
        break;
      case 901:
        v13 = (_DWORD)v6 == 180;
        v14 = 168;
        break;
      case 2305:
        return (_DWORD)v6 == 2306;
      default:
        return 0;
    }
    return v13 || (_DWORD)v6 == v14;
  }
  v12 = (_DWORD)v6 == 246 || (_DWORD)v6 == 243;
  if (v9 != 337)
    v12 = 0;
  if (v9 == 39)
    return (_DWORD)v6 == 8217;
  else
    return v12;
}

uint64_t KB::string_preserves_surface_form_features(KB *this, const KB::String *a2, const KB::String *a3, std::vector<unsigned int> *a4, KB::Alignment *a5)
{
  _QWORD v6[2];

  v6[0] = &off_1EA103EF8;
  v6[1] = 1;
  return KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v6, this, a2, (BOOL *)a3, a4);
}

uint64_t KB::string_preserves_surface_form_features_of_prefix(const KB::String *a1, const KB::String *a2, const ByteString *a3, uint64_t a4)
{
  uint64_t v5;
  size_t v9;
  void *v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  void *__src;
  void (**v18)(KB::DefaultInputSegmentFilter *__hidden);
  void *v19;
  unsigned __int16 v20[2];
  __int16 v21;
  char v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a4 + 24);
  if (!v5)
LABEL_31:
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const KB::String *))(*(_QWORD *)v5 + 48))(&v16, v5, a1);
  if (KB::ByteString::starts_with((KB::ByteString *)&v16, a3))
  {
    KB::String::String((KB::String *)v20, a1);
    v9 = (unsigned __int16)v16;
    if ((unsigned __int16)v16 < 0xFu)
    {
      v10 = __src;
    }
    else
    {
      v10 = (void *)operator new[]();
      memcpy(v10, __src, v9);
    }
    while (v9 > a3->var0.var0.var0)
    {
      v12 = v21;
      if (!v21)
      {
        KB::String::compute_length(v20);
        v12 = v21;
      }
      KB::String::shorten((KB::String *)v20, (unsigned __int16)(v12 - 1), (uint64_t)&v18);
      KB::String::operator=((uint64_t)v20, (KB::String *)&v18);
      if (v19)
        v13 = BYTE6(v18) == 1;
      else
        v13 = 0;
      if (v13)
        free(v19);
      v14 = *(_QWORD *)(a4 + 24);
      if (!v14)
        goto LABEL_31;
      (*(void (**)(void (***__return_ptr)(KB::DefaultInputSegmentFilter *__hidden), uint64_t, unsigned __int16 *))(*(_QWORD *)v14 + 48))(&v18, v14, v20);
      if (v9 >= 0xF && v10)
        MEMORY[0x1DF0A212C](v10, 0x1000C8077774924);
      LODWORD(v9) = (unsigned __int16)v18;
      v10 = v19;
    }
    v18 = &off_1EA103EF8;
    v19 = (void *)1;
    v11 = KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&v18, (const KB::String *)v20, a2, 0, 0);
    if (v9 >= 0xF && v10)
      MEMORY[0x1DF0A212C](v10, 0x1000C8077774924);
    if (v23 && v22 == 1)
      free(v23);
  }
  else
  {
    v11 = 0;
  }
  if ((unsigned __int16)v16 >= 0xFu && __src)
    MEMORY[0x1DF0A212C](__src, 0x1000C8077774924);
  return v11;
}

KB::String *KB::trim_stops@<X0>(KB *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  char *v6;
  char *v7;
  UChar32 v8;
  int v9;
  char *v10;
  KB::String *result;
  UChar32 v12;
  int v13;
  __int128 v15;
  UChar32 v16[4];
  __int128 v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  UChar32 c;

  v5 = *(unsigned __int16 *)this;
  if (!*(_WORD *)this)
    return KB::String::String((KB::String *)a2, this);
  v6 = (char *)*((_QWORD *)this + 1);
  if (v6)
    v7 = (char *)*((_QWORD *)this + 1);
  else
    v7 = (char *)this + 16;
  v19 = v7;
  v20 = 0;
  v21 = v5;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v19);
  v8 = c;
  if (c)
  {
    do
    {
      v9 = u_ispunct(v8);
      if (v8 == 38)
        break;
      if (!v9)
        break;
      KB::String::iterator::operator++((uint64_t *)&v19);
      v8 = c;
    }
    while (c);
    v5 = *(unsigned __int16 *)this;
    v6 = (char *)*((_QWORD *)this + 1);
  }
  if (v6)
    v10 = v6;
  else
    v10 = (char *)this + 16;
  *(_QWORD *)&v17 = v10;
  DWORD2(v17) = v5;
  HIDWORD(v17) = v5;
  LODWORD(v18) = 0;
  result = (KB::String *)KB::String::iterator::initialize((uint64_t *)&v17);
  if (v20 == DWORD2(v17))
  {
    *(_DWORD *)a2 = 0x100000;
    *(_WORD *)(a2 + 4) = 0;
    *(_BYTE *)(a2 + 6) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    do
    {
      v15 = v17;
      *(_QWORD *)v16 = v18;
      KB::String::iterator::operator--((KB::String::iterator *)&v15);
      v12 = v16[0];
      v13 = u_ispunct(v16[0]);
      if (v12 == 38 || v13 == 0)
        break;
      KB::String::iterator::operator--((KB::String::iterator *)&v17);
    }
    while (DWORD2(v17) != v20);
    return KB::String::String((KB::String *)a2, (const KB::String::iterator *)&v19, (const KB::String::iterator *)&v17);
  }
  return result;
}

uint64_t KB::edit_distance(KB *this, const KB::String *a2, const KB::String *a3)
{
  char *v4;
  int v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  size_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  _BYTE v62[128];
  unint64_t v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[128];
  unint64_t v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[128];
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[18];

  v78[16] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 1))
    v4 = (char *)*((_QWORD *)this + 1);
  else
    v4 = (char *)this + 16;
  v55 = v4;
  v5 = *(unsigned __int16 *)this;
  v56 = 0;
  v57 = v5;
  v58 = 0;
  KB::String::iterator::initialize((uint64_t *)&v55);
  v51 = v4;
  v52 = v5;
  v53 = v5;
  v54 = 0;
  KB::String::iterator::initialize((uint64_t *)&v51);
  WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(&v75, (uint64_t)&v55, (uint64_t)&v51);
  if (*((_QWORD *)a2 + 1))
    v6 = (char *)*((_QWORD *)a2 + 1);
  else
    v6 = (char *)a2 + 16;
  v47 = v6;
  v7 = *(unsigned __int16 *)a2;
  v48 = 0;
  v49 = v7;
  v50 = 0;
  KB::String::iterator::initialize((uint64_t *)&v47);
  v43 = v6;
  v44 = v7;
  v45 = v7;
  v46 = 0;
  KB::String::iterator::initialize((uint64_t *)&v43);
  WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(&v71, (uint64_t)&v47, (uint64_t)&v43);
  v8 = v75;
  v9 = v71;
  v10 = (v71 + 1);
  v67 = v10;
  v68 = v70;
  v69 = 32;
  v11 = v10;
  v12 = v70;
  if (v10 >= 0x21)
  {
    v69 = (v71 + 1);
    v13 = 4 * v10;
    v12 = malloc_type_malloc(4 * v10, 0x100004052888210uLL);
    v68 = v12;
    if (!v12)
    {
      v63 = v10;
      v64 = v66;
      goto LABEL_21;
    }
    v11 = v67;
  }
  if (v11)
    bzero(v12, 4 * v11);
  v63 = v10;
  v64 = v66;
  v65 = 32;
  if (v10 < 0x21)
  {
    v14 = v10;
    v15 = v66;
    if (!v10)
      goto LABEL_16;
LABEL_15:
    bzero(v15, 4 * v14);
    goto LABEL_16;
  }
  v13 = 4 * v10;
LABEL_21:
  v65 = v10;
  v15 = malloc_type_malloc(v13, 0x100004052888210uLL);
  v64 = v15;
  if (!v15)
  {
    v59 = v10;
    v60 = (unsigned int *)v62;
    goto LABEL_25;
  }
  v14 = v63;
  if (v63)
    goto LABEL_15;
LABEL_16:
  v59 = v10;
  v60 = (unsigned int *)v62;
  v61 = 32;
  if (v10 < 0x21)
  {
    v16 = v10;
    v17 = v62;
    if (!v10)
      goto LABEL_28;
    goto LABEL_27;
  }
  v13 = 4 * v10;
LABEL_25:
  v61 = v10;
  v17 = malloc_type_malloc(v13, 0x100004052888210uLL);
  v60 = (unsigned int *)v17;
  if (v17)
  {
    v16 = v59;
    if (v59)
LABEL_27:
      bzero(v17, 4 * v16);
  }
LABEL_28:
  v18 = 0;
  do
  {
    *(_DWORD *)&v17[4 * v18] = v18;
    ++v18;
  }
  while (v10 != v18);
  if (v8)
  {
    v19 = (v8 + 1);
    v20 = v10 - 1;
    v21 = 1;
    do
    {
      WTF::Vector<unsigned int,32ul>::operator=(&v67, (uint64_t)&v63);
      WTF::Vector<unsigned int,32ul>::operator=(&v63, (uint64_t)&v59);
      v22 = v64;
      v23 = *(_DWORD *)v64 + 1;
      v17 = v60;
      *v60 = v23;
      if (v9)
      {
        v24 = 0;
        v25 = v21 - 1;
        v26 = v76;
        v27 = v72;
        v28 = v17 + 4;
        v29 = v68;
        do
        {
          v30 = v24 + 1;
          v31 = v22[v24];
          v32 = v22[v24 + 1];
          ++v23;
          if (*((_DWORD *)v26 + v25) != v27[v24])
            ++v31;
          if (v23 >= v32 + 1)
            v23 = v32 + 1;
          if (v31 < v23)
            v23 = v31;
          *(_DWORD *)&v28[4 * v24] = v23;
          if (v21 >= 2 && v30 >= 2)
          {
            v33 = *((_DWORD *)v26 + v25);
            v34 = (v24 - 1);
            if (v33 == v27[v34])
            {
              v35 = v27[v24];
              if (*((_DWORD *)v26 + (v21 - 2)) == v35 && v33 != v35)
              {
                v36 = v29[v34];
                if (v36 + 1 < v23)
                  v23 = v36 + 1;
                *(_DWORD *)&v28[4 * v24] = v23;
              }
            }
          }
          ++v24;
        }
        while (v20 != v30);
      }
      ++v21;
    }
    while (v21 != v19);
  }
  v37 = *(unsigned int *)&v17[4 * v9];
  if (v59)
    v59 = 0;
  if (v62 != v17)
  {
    v60 = 0;
    v61 = 0;
    free(v17);
  }
  if (v63)
    v63 = 0;
  v38 = v64;
  if (v66 != v64)
  {
    v64 = 0;
    v65 = 0;
    free(v38);
  }
  if (v67)
    v67 = 0;
  v39 = v68;
  if (v70 != v68)
  {
    v68 = 0;
    v69 = 0;
    free(v39);
  }
  if (v71)
    v71 = 0;
  v40 = v72;
  if (&v74 != v72)
  {
    v72 = 0;
    v73 = 0;
    free(v40);
  }
  if (v75)
    v75 = 0;
  v41 = v76;
  if (v78 != v76)
  {
    v76 = 0;
    v77 = 0;
    free(v41);
  }
  return v37;
}

unint64_t *WTF::Vector<unsigned int,32ul>::Vector<KB::String::iterator>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int v18;

  *a1 = 0;
  a1[1] = (unint64_t)(a1 + 3);
  a1[2] = 32;
  while (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8))
  {
    v6 = *(_DWORD *)(a2 + 16);
    v18 = v6;
    v7 = *a1;
    if (*a1 == a1[2])
    {
      v8 = v7 + 1;
      v9 = a1[1];
      if (v9 > (unint64_t)&v18 || v9 + 4 * v7 <= (unint64_t)&v18)
      {
        if (v7 >= 0x100)
          v15 = v7 + (v7 >> 1);
        else
          v15 = 2 * v7;
        if (v15 <= v8)
          v16 = v8;
        else
          v16 = v15;
        WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, v16);
        v13 = a1[1];
        v14 = (char *)&v18;
        if (!v13)
          goto LABEL_23;
      }
      else
      {
        v10 = (char *)&v18 - v9;
        if (v7 >= 0x100)
          v11 = v7 + (v7 >> 1);
        else
          v11 = 2 * v7;
        if (v11 <= v8)
          v12 = v8;
        else
          v12 = v11;
        WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, v12);
        v13 = a1[1];
        v14 = &v10[v13];
        if (!v13)
          goto LABEL_23;
      }
      v7 = *a1;
      v6 = *(_DWORD *)v14;
    }
    else
    {
      v13 = a1[1];
    }
    *(_DWORD *)(v13 + 4 * v7) = v6;
    *a1 = v7 + 1;
LABEL_23:
    KB::String::iterator::operator++((uint64_t *)a2);
  }
  return a1;
}

unint64_t *WTF::Vector<unsigned int,32ul>::operator=(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t **v8;
  char *v9;

  if ((unint64_t *)a2 == a1)
    return a1;
  v4 = *a1;
  v5 = *(_QWORD *)a2;
  if (*a1 > *(_QWORD *)a2)
  {
    *a1 = v5;
    v4 = v5;
LABEL_14:
    v9 = (char *)a1[1];
    if (v4)
    {
      memmove(v9, *(const void **)(a2 + 8), 4 * v4);
      v4 = *a1;
      v9 = (char *)a1[1];
    }
    memcpy(&v9[4 * v4], (const void *)(*(_QWORD *)(a2 + 8) + 4 * v4), 4 * *(_QWORD *)a2 - 4 * v4);
    *a1 = *(_QWORD *)a2;
    return a1;
  }
  v6 = a1[2];
  if (v5 <= v6)
    goto LABEL_14;
  if (v6)
  {
    if (v4)
      *a1 = 0;
    v8 = (unint64_t **)(a1 + 1);
    v7 = (unint64_t *)a1[1];
    if (a1 + 3 != v7)
    {
      *v8 = 0;
      a1[2] = 0;
      free(v7);
      v7 = *v8;
    }
    if (!v7)
    {
      a1[1] = (unint64_t)(a1 + 3);
      a1[2] = 32;
    }
  }
  WTF::Vector<unsigned int,32ul>::reserveCapacity(a1, *(_QWORD *)a2);
  if (a1[1])
  {
    v4 = *a1;
    goto LABEL_14;
  }
  return a1;
}

void WTF::Vector<unsigned int,32ul>::reserveCapacity(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  void *v6;

  if (a1[2] >= a2)
    return;
  v4 = (void **)(a1 + 1);
  v3 = (_QWORD *)a1[1];
  v5 = *a1;
  if (a2 <= 0x20)
  {
    v6 = a1 + 3;
    a1[1] = a1 + 3;
    a1[2] = 32;
    goto LABEL_6;
  }
  a1[2] = a2;
  v6 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  a1[1] = v6;
  if (v6)
LABEL_6:
    memcpy(v6, v3, 4 * v5);
  if (a1 + 3 != v3)
  {
    if (*v4 == v3)
    {
      *v4 = 0;
      v4[1] = 0;
    }
    free(v3);
  }
}

void KB::character_to_titlecase(UChar32 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  UBreakIterator *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  const char *v22;
  int32_t v23;
  unsigned int v24;
  _QWORD *v25;
  int32_t v26;
  int32_t pDestLength;
  UChar dest[3];
  UErrorCode pErrorCode;
  UChar32 src;
  UChar v31[6];
  _BYTE v32[32];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  src = a1;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (a1)
  {
    {
      v25 = (_QWORD *)KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators(&KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators);
      v25[2] = 0;
      v25[1] = 0;
      *v25 = v25 + 1;
      _tlv_atexit((void (__cdecl *)(void *))std::map<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>::~map[abi:nn180100], v25);
    }
    v6 = KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators(&KB::thread_local_titlecase_break_iterator(std::string const&)::break_iterators);
    v7 = v6;
    v9 = (_QWORD *)(v6 + 8);
    v8 = *(_QWORD **)(v6 + 8);
    if (!v8)
      goto LABEL_15;
    v10 = v6 + 8;
    do
    {
      v11 = std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, (_QWORD *)a2);
      if (v11 >= 0)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11 >= 0)
        v10 = (uint64_t)v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if ((_QWORD *)v10 == v9
      || (std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, (_QWORD *)(v10 + 32)) & 0x80) != 0)
    {
LABEL_15:
      *(_DWORD *)v31 = 0;
      v13 = (UBreakIterator *)ubrk_open();
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v32, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v32 = *(_OWORD *)a2;
        *(_QWORD *)&v32[16] = *(_QWORD *)(a2 + 16);
      }
      v14 = operator new(0x40uLL);
      v15 = *(_QWORD *)&v32[16];
      *((_OWORD *)v14 + 2) = *(_OWORD *)v32;
      memset(v32, 0, sizeof(v32));
      v14[6] = v15;
      v14[7] = v13;
      v16 = (_QWORD *)*v9;
      v17 = v9;
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v9 = v16;
            v18 = v16 + 4;
            if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, v16 + 4) & 0x80) == 0)
              break;
            v16 = (_QWORD *)*v9;
            v17 = v9;
            if (!*v9)
              goto LABEL_24;
          }
          if ((std::operator<=>[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v18, v14 + 4) & 0x80) == 0)
            break;
          v17 = v9 + 1;
          v16 = (_QWORD *)v9[1];
          if (!v16)
            goto LABEL_24;
        }
        std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>((uint64_t)(v14 + 4));
        operator delete(v14);
      }
      else
      {
LABEL_24:
        *v14 = 0;
        v14[1] = 0;
        v14[2] = v9;
        *v17 = v14;
        v19 = **(_QWORD **)v7;
        if (v19)
        {
          *(_QWORD *)v7 = v19;
          v14 = (_QWORD *)*v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v14);
        ++*(_QWORD *)(v7 + 16);
        if (*(_QWORD *)&v32[24])
          ubrk_close();
      }
      if ((v32[23] & 0x80000000) != 0)
        operator delete(*(void **)v32);
    }
    else
    {
      v13 = *(UBreakIterator **)(v10 + 56);
    }
    v20 = *(unsigned __int8 *)(a2 + 23);
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(a2 + 8);
    if (v20)
      v21 = v13 == 0;
    else
      v21 = 1;
    if (v21)
      goto LABEL_43;
    pErrorCode = U_ZERO_ERROR;
    pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    v22 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v23 = u_strToTitle(v31, 5, dest, pDestLength, v13, v22, &pErrorCode);
    v26 = 0;
    u_strToUTF8(v32, 13, &v26, v31, v23, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
      KB::String::append((unsigned __int16 *)a3, v32, 0xFFFFuLL);
    if (!*(_WORD *)a3)
    {
LABEL_43:
      v24 = MEMORY[0x1DF0A2D2C](src);
      KB::String::append((KB::String *)a3, v24);
    }
  }
}

uint64_t std::map<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    ubrk_close();
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<UBreakIterator,KB::BreakIterDeleter>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void KB::character_to_lowercase(UChar32 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const char *v6;
  int32_t v7;
  unsigned int v8;
  int32_t v9;
  int32_t pDestLength;
  UChar dest[3];
  UErrorCode pErrorCode;
  UChar32 src;
  char __s1[13];
  UChar v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  src = a1;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (a1)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a2 + 8);
    if (!v5)
      goto LABEL_11;
    pErrorCode = U_ZERO_ERROR;
    pDestLength = 0;
    u_strFromUTF32(dest, 3, &pDestLength, &src, 1, &pErrorCode);
    v6 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    v7 = u_strToLower(v15, 5, dest, pDestLength, v6, &pErrorCode);
    v9 = 0;
    u_strToUTF8(__s1, 13, &v9, v15, v7, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
      KB::String::append((unsigned __int16 *)a3, __s1, 0xFFFFuLL);
    if (!*(_WORD *)a3)
    {
LABEL_11:
      v8 = MEMORY[0x1DF0A2D20](src);
      KB::String::append((KB::String *)a3, v8);
    }
  }
}

void KB::string_to_lowercase(KB *this@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  KB *v4;
  unsigned int v7;
  unint64_t v8;
  UChar *v9;
  const char *v10;
  const char *v11;
  UChar *v12;
  UChar *v13;
  int32_t v14;
  UChar *v15;
  const UChar *v16;
  const char *v17;
  int32_t v18;
  int32_t pDestLength;
  UErrorCode pErrorCode;
  _BYTE v21[1024];
  UChar *v22;
  uint64_t v23;
  BOOL v24;
  UChar dest[512];
  UChar *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;

  v4 = this;
  v32 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)this)
  {
    LODWORD(v29) = 0x100000;
    WORD2(v29) = 0;
    BYTE6(v29) = 0;
    v30 = 0;
    v31 = 0;
    pErrorCode = U_ZERO_ERROR;
    v7 = *((unsigned __int16 *)this + 2);
    if (!*((_WORD *)this + 2))
    {
      KB::String::compute_length((unsigned __int16 *)this);
      v7 = *((unsigned __int16 *)v4 + 2);
    }
    v8 = 4 * v7 + 4;
    pDestLength = 0;
    v26 = 0;
    v27 = v8;
    v28 = v7 > 0xFF;
    if (v7 < 0x100)
    {
      v9 = dest;
    }
    else
    {
      v9 = (UChar *)malloc_type_malloc(4 * v7 + 4, 0xBD7CD695uLL);
      v26 = v9;
    }
    v10 = (const char *)*((_QWORD *)v4 + 1);
    if (!v10)
      v10 = (char *)v4 + 16;
    if (*(_WORD *)v4)
      v11 = v10;
    else
      v11 = "";
    u_strFromUTF8(v9, v8 >> 1, &pDestLength, v11, *(unsigned __int16 *)v4, &pErrorCode);
    v22 = 0;
    v23 = 2 * v8;
    v24 = v7 > 0x7F;
    v12 = (UChar *)v21;
    if (v7 >= 0x80)
    {
      v12 = (UChar *)malloc_type_malloc(2 * v8, 0xBD7CD695uLL);
      v22 = v12;
    }
    if (v28)
      v13 = v26;
    else
      v13 = dest;
    v14 = u_strToLower(v12, v8, v13, pDestLength, (const char *)a2, &pErrorCode);
    v18 = 0;
    if (v28)
      v15 = v26;
    else
      v15 = dest;
    if (v24)
      v16 = v22;
    else
      v16 = (const UChar *)v21;
    u_strToUTF8((char *)v15, v8, &v18, v16, v14, &pErrorCode);
    if (pErrorCode <= U_ZERO_ERROR)
    {
      v17 = (const char *)(v28 ? v26 : dest);
      KB::String::operator=(&v29, v17);
      if ((_WORD)v29)
        v4 = (KB *)&v29;
    }
    KB::String::String(a3, v4);
    free(v22);
    free(v26);
    if (v30)
    {
      if (BYTE6(v29) == 1)
        free(v30);
    }
  }
  else
  {
    KB::String::String(a3, this);
  }
}

id KB::preheat_text_checker(KB *this)
{
  return _text_checker((uint64_t)this);
}

id _text_checker(uint64_t a1)
{
  void *v2;
  TITextChecker *v3;
  void *v4;

  v2 = (void *)_text_checker(BOOL)::checker;
  if (!_text_checker(BOOL)::checker)
  {
    v3 = -[TITextChecker initWithAsynchronousLoading:]([TITextChecker alloc], "initWithAsynchronousLoading:", a1);
    v4 = (void *)_text_checker(BOOL)::checker;
    _text_checker(BOOL)::checker = (uint64_t)v3;

    v2 = (void *)_text_checker(BOOL)::checker;
  }
  return v2;
}

void KB::spellcheck_candidates(KB *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  const KB::String *v10;
  void *v11;
  uint64_t v12;
  KB *v13;
  KB *v14;
  char *v15;
  char *v16;
  const KB::String *v17;
  int v18;
  unint64_t v19;
  KB::Candidate *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  KB::Candidate *v29;
  TITokenID v30;
  id v31;
  _QWORD v32[5];
  KB::Candidate *v33[13];
  int v34;
  _BYTE v35[8];
  void *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 100) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  KB::ns_string(a2, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _text_checker(1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8 && objc_msgSend(v8, "doneLoading"))
  {
    KB::Candidate::Candidate((KB::Candidate *)&v37, this, 0);
    if (v37 && (*(_BYTE *)(v38 + 240 * (v37 - 1) + 135) & 4) == 0)
    {
      KB::ns_string((KB *)(v38 + 240 * (v37 - 1)), v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = 0;
      v12 = objc_msgSend(v9, "checkSpellingOfString:startingAt:language:wrap:correction:", v11, 0, v7, 0, &v31);
      v13 = (KB *)v31;
      v14 = v13;
      if (v13)
      {
        KB::utf8_string(v13, (uint64_t)v35);
        v15 = (char *)*((_QWORD *)a2 + 1);
        if (!v15)
          v15 = (char *)a2 + 16;
        if (*(_WORD *)a2)
          v16 = v15;
        else
          v16 = "";
        v30.lexicon_id = TILexiconIDForLocaleIdentifier(v16);
        v30.word_id = 0;
        KB::Word::Word((KB::Word *)v33, (const KB::String *)v35, &v30, 0);
        v34 |= 0x8000u;
        KB::Candidate::pop_last_word((KB::Candidate *)&v37);
        KB::Candidate::append((unsigned __int16 *)&v37, (const KB::Word *)v33);
        v18 = KB::edit_distance(this, (const KB::String *)v35, v17);
        v39 = logf(1.0 / (float)(v18 + 1));
        v19 = *(_QWORD *)(a3 + 16);
        v20 = *(KB::Candidate **)(a3 + 8);
        if ((unint64_t)v20 >= v19)
        {
          v24 = 0x1CAC083126E978D5 * (((uint64_t)v20 - *(_QWORD *)a3) >> 3);
          if ((unint64_t)(v24 + 1) > 0x4189374BC6A7EFLL)
            abort();
          v25 = 0x1CAC083126E978D5 * ((uint64_t)(v19 - *(_QWORD *)a3) >> 3);
          v26 = 2 * v25;
          if (2 * v25 <= v24 + 1)
            v26 = v24 + 1;
          if (v25 >= 0x20C49BA5E353F7)
            v27 = 0x4189374BC6A7EFLL;
          else
            v27 = v26;
          v32[4] = a3 + 16;
          if (v27)
            v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v27);
          else
            v28 = 0;
          v29 = (KB::Candidate *)(v27 + 1000 * v24);
          v32[0] = v27;
          v32[1] = v29;
          v32[3] = v27 + 1000 * v28;
          KB::Candidate::Candidate(v29, (const KB::Candidate *)&v37);
          v32[2] = (char *)v29 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a3, v32);
          v21 = *(char **)(a3 + 8);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v32);
        }
        else
        {
          v21 = (char *)KB::Candidate::Candidate(v20, (const KB::Candidate *)&v37) + 1000;
        }
        *(_QWORD *)(a3 + 8) = v21;
        KB::Word::~Word((KB::Word *)v33);
        if (v36 && v35[6] == 1)
          free(v36);
      }
      else if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v33[4] = (KB::Candidate *)(a3 + 16);
        v33[0] = (KB::Candidate *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(1uLL);
        v33[1] = v33[0];
        v33[3] = (KB::Candidate *)((char *)v33[0] + 1000 * v22);
        v33[2] = (KB::Candidate *)((char *)KB::Candidate::Candidate(v33[0], (const KB::Candidate *)&v37) + 1000);
        std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a3, v33);
        v23 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v33);
        *(_QWORD *)(a3 + 8) = v23;
      }

    }
    KB::Candidate::~Candidate((KB::Candidate *)&v37);
  }

}

const __CFString *KB::std_string@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  CFIndex Length;
  CFIndex v6;
  char *v7;

  if (this)
  {
    v4 = this;
    Length = CFStringGetLength(this);
    v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v7 = (char *)operator new[]();
    if (CFStringGetCString(v4, v7, v6, 0x8000100u))
    {
      std::string::basic_string[abi:nn180100]<0>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    JUMPOUT(0x1DF0A212CLL);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return this;
}

void KB::cf_string(KB *this@<X0>, CFStringRef *a2@<X8>)
{
  KB::cf_string_impl<KB::String>(a2, (unsigned __int16 *)this);
}

{
  BOOL v3;
  unsigned __int16 v4[3];
  char v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  KB::String::String((uint64_t)v4, this);
  KB::cf_string_impl<KB::String>(a2, v4);
  if (v6)
    v3 = v5 == 1;
  else
    v3 = 0;
  if (v3)
    free(v6);
}

void KB::cf_string(const UInt8 *a1@<X0>, CFStringRef *a2@<X8>)
{
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  CFStringRef v7;
  NSObject *v8;
  const UInt8 *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const UInt8 *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(const UInt8 **)a1;
  if (v4 >= 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v6, 0x8000100u, 1u);
  if (!v7)
  {
    if (TICanLogMessageAtLevel_onceToken != -1)
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
    if (TICanLogMessageAtLevel_logLevel)
    {
      v8 = TIOSLogFacility();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a1 + 23) >= 0)
          v9 = a1;
        else
          v9 = *(const UInt8 **)a1;
        v10 = 136315394;
        v11 = "cf_string_impl";
        v12 = 2080;
        v13 = v9;
        _os_log_debug_impl(&dword_1DA6F2000, v8, OS_LOG_TYPE_DEBUG, "%s warning: bytes do not represent UTF8 string: %s", (uint8_t *)&v10, 0x16u);
      }
    }
  }
  *a2 = v7;
}

void KB::cf_string_no_copy(KB *this@<X0>, CFStringRef *a2@<X8>)
{
  const UInt8 *v5;
  const UInt8 *v6;
  CFStringRef v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = (const UInt8 *)*((_QWORD *)this + 1);
  if (!v5)
    v5 = (const UInt8 *)this + 16;
  if (*(_WORD *)this)
    v6 = v5;
  else
    v6 = (const UInt8 *)"";
  v7 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, *(unsigned __int16 *)this, 0x8000100u, 1u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v7)
  {
    if (TICanLogMessageAtLevel_onceToken != -1)
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
    if (TICanLogMessageAtLevel_logLevel)
    {
      v8 = TIOSLogFacility();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = (const char *)*((_QWORD *)this + 1);
        if (!v9)
          v9 = (char *)this + 16;
        if (*(_WORD *)this)
          v10 = v9;
        else
          v10 = "";
        v11 = 136315394;
        v12 = "cf_string_no_copy";
        v13 = 2080;
        v14 = v10;
        _os_log_debug_impl(&dword_1DA6F2000, v8, OS_LOG_TYPE_DEBUG, "%s warning: bytes do not represent UTF8 string: %s", (uint8_t *)&v11, 0x16u);
      }
    }
  }
  *a2 = v7;
}

CFMutableStringRef KB::cf_mutable_string@<X0>(CFMutableStringRef *a1@<X8>)
{
  CFMutableStringRef result;

  result = CFStringCreateMutable(0, 0);
  *a1 = result;
  return result;
}

void KB::append_format(__CFString *this, __CFString *a2, const char *a3, ...)
{
  unsigned __int8 v5;
  char *v6;
  const char *v7;
  va_list va;

  va_start(va, a3);
  if ((v5 & 1) == 0
  {
    KB::append_format(__CFString *,char const*,...)::__buffer = 0x100000;
    word_1EDAEE4B4 = 0;
    byte_1EDAEE4B6 = 0;
    qword_1EDAEE4B8 = 0;
    byte_1EDAEE4C0 = 0;
    __cxa_atexit((void (*)(void *))KB::String::~String, &KB::append_format(__CFString *,char const*,...)::__buffer, &dword_1DA6F2000);
  }
  KB::String::clear((KB::String *)&KB::append_format(__CFString *,char const*,...)::__buffer);
  KB::String::append_format((KB::String *)&KB::append_format(__CFString *,char const*,...)::__buffer, (const char *)a2, va);
  v6 = (char *)qword_1EDAEE4B8;
  if (!qword_1EDAEE4B8)
    v6 = &byte_1EDAEE4C0;
  if ((_WORD)KB::append_format(__CFString *,char const*,...)::__buffer)
    v7 = v6;
  else
    v7 = "";
  CFStringAppendCString(this, v7, 0x8000100u);
}

void KB::cf_mutable_string(KB *this, const KB::String *a2)
{
  __CFString *Mutable;
  const char *v5;
  const char *v6;

  Mutable = CFStringCreateMutable(0, 0);
  *(_QWORD *)this = Mutable;
  v5 = (const char *)*((_QWORD *)a2 + 1);
  if (!v5)
    v5 = (char *)a2 + 16;
  if (*(_WORD *)a2)
    v6 = v5;
  else
    v6 = "";
  CFStringAppendCString(Mutable, v6, 0x8000100u);
}

void KB::upper_string(KB *this@<X0>, const KB::String *a2@<X1>, const __CFLocale *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, KB::String *a6@<X8>)
{
  KB *v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t i;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const __CFString *v19;
  CFMutableStringRef v20[2];

  v7 = this;
  v20[1] = *(CFMutableStringRef *)MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int16 *)this;
  v10 = *((unsigned __int16 *)this + 2);
  if (*((_WORD *)this + 2))
  {
    if (a2)
    {
LABEL_21:
      KB::cf_mutable_string((KB *)v20, v7);
      v19 = v20[0];
      CFStringUppercase(v20[0], a2);
      KB::utf8_string(v19, (uint64_t)a6);
      if (v19)
        CFRelease(v19);
      return;
    }
  }
  else
  {
    this = (KB *)KB::String::compute_length((unsigned __int16 *)this);
    v10 = *((unsigned __int16 *)v7 + 2);
    if (a2)
      goto LABEL_21;
  }
  if (v9 != v10)
    goto LABEL_21;
  v11 = *(unsigned __int16 *)v7;
  MEMORY[0x1E0C80A78](this, a2, a3, a4, a5);
  v13 = (char *)v20 - v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v15 = (const char *)*((_QWORD *)v7 + 1);
      if (!v15)
        v15 = (char *)v7 + 16;
      if (*(_WORD *)v7)
        v16 = v15;
      else
        v16 = "";
      v13[i] = __toupper(v16[i]);
    }
  }
  v13[v11] = 0;
  v17 = (const char *)*((_QWORD *)v7 + 1);
  if (!v17)
    v17 = (char *)v7 + 16;
  if (*(_WORD *)v7)
    v18 = v17;
  else
    v18 = "";
  if (!strcmp(v18, v13))
    KB::String::String(a6, v7);
  else
    KB::String::String(a6, v13);
}

void KB::lower_character(unsigned int this@<W0>, const __CFLocale *a2@<X1>, uint64_t a3@<X8>)
{
  UniChar v5;
  __darwin_ct_rune_t v7;
  CFMutableStringRef Mutable;
  UniChar chars;

  v5 = this;
  if (this > 0x7F || a2)
  {
    Mutable = CFStringCreateMutable(0, 0);
    chars = v5;
    CFStringAppendCharacters(Mutable, &chars, 1);
    CFStringLowercase(Mutable, a2);
    KB::utf8_string(Mutable, a3);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v7 = __tolower(this);
    KB::String::String(a3, v7);
  }
}

void KB::upper_character(unsigned int this@<W0>, const __CFLocale *a2@<X1>, uint64_t a3@<X8>)
{
  UniChar v5;
  __darwin_ct_rune_t v7;
  CFMutableStringRef Mutable;
  UniChar chars;

  v5 = this;
  if (this > 0x7F || a2)
  {
    Mutable = CFStringCreateMutable(0, 0);
    chars = v5;
    CFStringAppendCharacters(Mutable, &chars, 1);
    CFStringUppercase(Mutable, a2);
    KB::utf8_string(Mutable, a3);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v7 = __toupper(this);
    KB::String::String(a3, v7);
  }
}

CFNumberRef KB::cf_number@<X0>(double a1@<D0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef result;
  double valuePtr;

  valuePtr = a1;
  result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  *a2 = result;
  return result;
}

CFMutableDictionaryRef KB::cf_mutable_dictionary@<X0>(CFMutableDictionaryRef *a1@<X8>)
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *a1 = result;
  return result;
}

CFMutableArrayRef KB::cf_mutable_array@<X0>(CFIndex capacity@<X0>, CFMutableArrayRef *a2@<X8>)
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, MEMORY[0x1E0C9B378]);
  *a2 = result;
  return result;
}

void KB::string_from_locale(KB *this@<X0>, const __CFLocale *a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *v4;
  char *v5;
  char *v6;
  BOOL v7;
  _WORD v8[3];
  char v9;
  void *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v4 = (const __CFString *)MEMORY[0x1DF0A08CC](this, a2);
  KB::utf8_string(v4, (uint64_t)v8);
  v5 = (char *)v10;
  if (!v10)
    v5 = (char *)v11;
  if (v8[0])
    v6 = v5;
  else
    v6 = "";
  std::string::basic_string[abi:nn180100]<0>(a3, v6);
  if (v10)
    v7 = v9 == 1;
  else
    v7 = 0;
  if (v7)
    free(v10);
}

void KB::kb_string_from_locale(KB *this@<X0>, const __CFLocale *a2@<X1>, KB::String *a3@<X8>)
{
  const __CFString *v4;
  const char *v5;
  const char *v6;
  BOOL v7;
  _WORD v8[3];
  char v9;
  void *v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v4 = (const __CFString *)MEMORY[0x1DF0A08CC](this, a2);
  KB::utf8_string(v4, (uint64_t)v8);
  v5 = (const char *)v10;
  if (!v10)
    v5 = (const char *)v11;
  if (v8[0])
    v6 = v5;
  else
    v6 = "";
  KB::String::String(a3, v6);
  if (v10)
    v7 = v9 == 1;
  else
    v7 = 0;
  if (v7)
    free(v10);
}

void __getLSApplicationProxyClass_block_invoke_8200(uint64_t a1)
{
  CoreServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("LSApplicationProxy");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLSApplicationProxyClass_softClass_8199 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    CoreServicesLibrary();
  }
}

void CoreServicesLibrary()
{
  void *v0;

  if (!CoreServicesLibraryCore_frameworkLibrary_8214)
  {
    CoreServicesLibraryCore_frameworkLibrary_8214 = _sl_dlopen();
    if (!CoreServicesLibraryCore_frameworkLibrary_8214)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getLSApplicationWorkspaceClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  CoreServicesLibrary();
  result = objc_getClass("LSApplicationWorkspace");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getLSApplicationWorkspaceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__40__TILaunchServicesLookup_lookupAppNames__block_invoke(v3);
  }
  return result;
}

void CoreDuetLibrary()
{
  void *v0;

  if (!CoreDuetLibraryCore_frameworkLibrary)
  {
    CoreDuetLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreDuetLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void CoreDuetContextLibrary()
{
  void *v0;

  if (!CoreDuetContextLibraryCore_frameworkLibrary)
  {
    CoreDuetContextLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!CoreDuetContextLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

uint64_t _createStaticLexiconForLocaleIdentifier(void *a1)
{
  id v1;
  __CFDictionary *Mutable;
  uint64_t v3;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], v1);
  v3 = LXLexiconCreate();
  CFRelease(Mutable);

  return v3;
}

void TI::CP::PathReducer::append_average_previous_point(TI::CP::PathReducer *this)
{
  char *v2;
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  CGPoint v11;
  CGFloat y;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (float64x2_t *)*((_QWORD *)this + 9);
  v4 = 0uLL;
  v5 = 0uLL;
  if (v2 != (char *)v3)
  {
    v6 = (float64x2_t *)*((_QWORD *)this + 8);
    do
    {
      v7 = *v6;
      v8 = v6[1];
      v6 += 2;
      v5 = vaddq_f64(v5, v8);
      v4 = vaddq_f64(v4, v7);
    }
    while (v6 != v3);
  }
  v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(unint64_t)(((char *)v3 - v2) >> 5)), 0);
  v10 = vdivq_f64(v5, v9);
  v11 = (CGPoint)vdivq_f64(v4, v9);
  y = v11.y;
  TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), v11, v10.f64[1], v10.f64[0], -1.0, 0.0);
  v14 = *((_QWORD *)this + 8);
  v13 = *((_QWORD *)this + 9);
  v15 = v13 - (v14 + 32);
  if (v13 != v14 + 32)
    memmove(*((void **)this + 8), (const void *)(v14 + 32), v13 - (v14 + 32));
  *((_QWORD *)this + 9) = v14 + v15;
}

void TI::CP::PathReducer::append(TI::CP::PathReducer *this, CGPoint a2, CGFloat a3, CGFloat a4)
{
  CGPoint v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *p_x;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  CGPoint *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  CGPoint v26;
  CGPoint v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  CGFloat x;
  CGFloat y;
  double v40;
  CGPoint v41;
  __int128 v42;
  CGPoint v43;
  CGPoint v44;

  v6 = a2;
  v7 = *(unint64_t *)&a4;
  v9 = *((_QWORD *)this + 8);
  v8 = *((_QWORD *)this + 9);
  v10 = (uint64_t)(v8 - v9) >> 5;
  if (v8 == v9)
  {
    v15 = *((_QWORD *)this + 10);
    if (v8 >= v15)
    {
      x = a2.x;
      y = a2.y;
      v40 = a4;
      v17 = v15 - v9;
      if (v17 >> 4 <= (unint64_t)(v10 + 1))
        v18 = v10 + 1;
      else
        v18 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v43 = a2;
      v41 = (CGPoint)*(unint64_t *)&a4;
      v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v19);
      v21 = (CGPoint *)&v20[32 * v10];
      v23 = &v20[32 * v22];
      *v21 = v43;
      v21[1] = v41;
      p_x = (_OWORD *)&v21[2].x;
      v25 = (char *)*((_QWORD *)this + 8);
      v24 = (char *)*((_QWORD *)this + 9);
      if (v24 != v25)
      {
        do
        {
          v26 = (CGPoint)*((_OWORD *)v24 - 2);
          v27 = (CGPoint)*((_OWORD *)v24 - 1);
          v24 -= 32;
          v21[-2] = v26;
          v21[-1] = v27;
          v21 -= 2;
        }
        while (v24 != v25);
        v24 = (char *)*((_QWORD *)this + 8);
      }
      *((_QWORD *)this + 8) = v21;
      *((_QWORD *)this + 9) = p_x;
      *((_QWORD *)this + 10) = v23;
      if (v24)
        operator delete(v24);
      a2.y = y;
      a4 = v40;
      a2.x = x;
    }
    else
    {
      *(CGPoint *)v8 = a2;
      *(_OWORD *)(v8 + 16) = *(unint64_t *)&a4;
      p_x = (_OWORD *)(v8 + 32);
    }
    *((_QWORD *)this + 9) = p_x;
    TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), a2, a3, a4, -1.0, 0.0);
  }
  else
  {
    v11 = vsubq_f64(*(float64x2_t *)(v8 - 32), (float64x2_t)a2);
    v12 = vsubq_f64(*(float64x2_t *)(v8 - 16), (float64x2_t)*(unint64_t *)&a4);
    *(float *)v12.f64 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v11, v11), vmulq_f64(v12, v12))));
    if (*(double *)this <= *(float *)v12.f64)
    {
      v13 = *((_QWORD *)this + 10);
      if (v8 >= v13)
      {
        v28 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 59)
          abort();
        v29 = v13 - v9;
        if (v29 >> 4 > v28)
          v28 = v29 >> 4;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
          v30 = 0x7FFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v44 = v6;
          v42 = *(unint64_t *)&a4;
          v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v30);
          v7 = v42;
          v6 = v44;
        }
        else
        {
          v31 = 0;
        }
        v32 = v30 + 32 * v10;
        v33 = v30 + 32 * v31;
        *(CGPoint *)v32 = v6;
        *(_OWORD *)(v32 + 16) = v7;
        v14 = v32 + 32;
        v35 = (char *)*((_QWORD *)this + 8);
        v34 = (char *)*((_QWORD *)this + 9);
        if (v34 != v35)
        {
          do
          {
            v36 = *((_OWORD *)v34 - 2);
            v37 = *((_OWORD *)v34 - 1);
            v34 -= 32;
            *(_OWORD *)(v32 - 32) = v36;
            *(_OWORD *)(v32 - 16) = v37;
            v32 -= 32;
          }
          while (v34 != v35);
          v34 = (char *)*((_QWORD *)this + 8);
        }
        *((_QWORD *)this + 8) = v32;
        *((_QWORD *)this + 9) = v14;
        *((_QWORD *)this + 10) = v33;
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(CGPoint *)v8 = v6;
        *(_OWORD *)(v8 + 16) = *(unint64_t *)&a4;
        v14 = v8 + 32;
      }
      *((_QWORD *)this + 9) = v14;
      v10 = (uint64_t)(v14 - *((_QWORD *)this + 8)) >> 5;
    }
    if (v10 == *((_DWORD *)this + 2))
      TI::CP::PathReducer::append_average_previous_point(this);
  }
}

void TI::CP::PathReducer::finalize(TI::CP::PathReducer *this)
{
  uint64_t v2;
  uint64_t v3;
  CGPoint v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if (*((_DWORD *)this + 2) == (v2 - v3) >> 5)
  {
    TI::CP::PathReducer::append_average_previous_point(this);
    v3 = *((_QWORD *)this + 8);
    v2 = *((_QWORD *)this + 9);
  }
  if (v2 != v3)
  {
    v4 = *(CGPoint *)(v2 - 32);
    v5 = *(_QWORD *)(v2 - 24);
    TI::CP::Path::append((TI::CP::PathReducer *)((char *)this + 16), v4, *(CGFloat *)(v2 - 8), *(CGFloat *)(v2 - 16), -1.0, 0.0);
    v3 = *((_QWORD *)this + 8);
  }
  *((_QWORD *)this + 9) = v3;
}

_QWORD *TI::CP::PathReducer::clear(_QWORD *this)
{
  this[9] = this[8];
  this[3] = this[2];
  this[6] = this[5];
  return this;
}

void TI::CP::PathReducer::reduced_path(TI::CP::PathReducer *this@<X0>, double a2@<D0>, TI::CP::Path *a3@<X8>)
{
  int8x16_t *v5;
  __int128 *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  float v23;
  CGPoint *v24;
  CGPoint *v25;
  CGPoint *v26;
  CGPoint v27;
  CGPoint v28;
  CGFloat y;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  CGPoint *v35;
  CGPoint *v36;

  v5 = (int8x16_t *)*((_QWORD *)this + 2);
  v6 = (__int128 *)*((_QWORD *)this + 3);
  if (v5 == (int8x16_t *)v6)
  {
    v21 = 0;
    v7 = 0;
    v8 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *v5;
      v11 = vextq_s8(v5[1], v5[1], 8uLL);
      if ((unint64_t)v8 >= v9)
      {
        v12 = (v8 - v7) >> 5;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59)
          goto LABEL_36;
        if ((uint64_t)(v9 - (_QWORD)v7) >> 4 > v13)
          v13 = (uint64_t)(v9 - (_QWORD)v7) >> 4;
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
          v14 = 0x7FFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v30 = v11;
          v31 = *v5;
          v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v14);
          v11 = v30;
          v10 = v31;
        }
        else
        {
          v15 = 0;
        }
        v16 = (char *)(v14 + 32 * v12);
        *(int8x16_t *)v16 = v10;
        *((int8x16_t *)v16 + 1) = v11;
        v17 = v16;
        while (v8 != v7)
        {
          v18 = *((_OWORD *)v8 - 2);
          v19 = *((_OWORD *)v8 - 1);
          v8 -= 32;
          *((_OWORD *)v17 - 2) = v18;
          *((_OWORD *)v17 - 1) = v19;
          v17 -= 32;
        }
        v9 = v14 + 32 * v15;
        v8 = v16 + 32;
        if (v7)
          operator delete(v7);
        v7 = v17;
      }
      else
      {
        *(int8x16_t *)v8 = v10;
        *((int8x16_t *)v8 + 1) = v11;
        v8 += 32;
      }
      v5 += 3;
    }
    while (v5 != (int8x16_t *)v6);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v20 = v8 - v7;
    if (v8 == v7)
    {
      v21 = 0;
      v8 = v7;
    }
    else
    {
      if (v8 - v7 < 0)
LABEL_36:
        abort();
      v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v20 >> 5);
      v32 = v21;
      v34 = &v21[32 * v22];
      memmove(v21, v7, v8 - v7);
      v33 = &v21[v20];
    }
  }
  v23 = a2;
  end_point_fit(&v35, &v32, 0, ((v8 - v7) >> 5) - 1, v23);
  if (v21)
    operator delete(v21);
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  v24 = v35;
  v25 = v36;
  if (v35 != v36)
  {
    v26 = v35;
    do
    {
      v27 = *v26;
      v28 = v26[1];
      v26 += 2;
      y = v27.y;
      TI::CP::Path::append(a3, v27, v28.y, v28.x, -1.0, 0.0);
    }
    while (v26 != v25);
  }
  if (v24)
    operator delete(v24);
  if (v7)
    operator delete(v7);
}

void end_point_fit(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4, float a5)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  float64x2_t v17;
  int64x2_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  float64x2_t v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  __int128 *v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75[3];
  char *v76;
  char *v77;
  void *__p[3];
  char *v79;
  uint64_t v80;

  v10 = a3 + 1;
  v11 = 0.0;
  v12 = a3;
  if (a3 + 1 < a4)
  {
    v13 = (float64x2_t *)(*a2 + 32 * a3);
    v14 = *v13;
    v15 = v13[1];
    v16 = (float64x2_t *)(*a2 + 32 * a4);
    v17 = *v16;
    v18 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v14, *v16), (int8x16_t)vceqq_f64(v15, v16[1]));
    v19 = vandq_s8((int8x16_t)v18, (int8x16_t)vdupq_laneq_s64(v18, 1)).u64[0];
    v20 = v17.f64[0] - v14.f64[0];
    v21 = v17.f64[1] - v14.f64[1];
    v22 = sqrt(v21 * v21 + v20 * v20);
    v11 = 0.0;
    v12 = a3;
    do
    {
      v23 = *a2 + 32 * v10;
      v24 = *(float64x2_t *)v23;
      if ((v19 & 0x8000000000000000) != 0)
      {
        v26 = vsubq_f64(*(float64x2_t *)(v23 + 16), v15);
        v27 = vsubq_f64(v24, v14);
        v25 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v27, v27), vmulq_f64(v26, v26))));
      }
      else
      {
        v25 = fabs(v20 * (v14.f64[1] - v24.f64[1]) - (v14.f64[0] - v24.f64[0]) * v21) / v22;
      }
      if (v25 > v11)
      {
        v12 = v10;
        v11 = v25;
      }
      ++v10;
    }
    while (a4 != v10);
  }
  if (v11 <= a5)
  {
    v68 = (__int128 *)(*a2 + 32 * a3);
    v69 = (__int128 *)(*a2 + 32 * a4);
    v73 = *v69;
    v74 = *v68;
    v71 = v69[1];
    v72 = v68[1];
    v70 = operator new(0x40uLL);
    a1[1] = v70 + 4;
    a1[2] = v70 + 4;
    *v70 = v74;
    v70[1] = v72;
    v70[2] = v73;
    v70[3] = v71;
    *a1 = v70;
    return;
  }
  _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(__p, (uint64_t)a2);
  end_point_fit(&v79, __p, a3, v12, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  _ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(v75, (uint64_t)a2);
  end_point_fit(&v76, v75, v12, a4, a5);
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
  v28 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v29 = v79;
  if (v80 - (_QWORD)v79 != 32)
  {
    v28 = 0;
    v30 = 0;
    if ((unint64_t)(((v80 - (uint64_t)v79) >> 5) - 1) <= 1)
      v31 = 1;
    else
      v31 = ((v80 - (uint64_t)v79) >> 5) - 1;
    do
    {
      v32 = a1[2];
      if ((unint64_t)v28 >= v32)
      {
        v35 = (_OWORD *)*a1;
        v36 = ((uint64_t)v28 - *a1) >> 5;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 59)
LABEL_64:
          abort();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 4 > v37)
          v37 = v38 >> 4;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
          v39 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v39);
        else
          v40 = 0;
        v41 = &v29[32 * v30];
        v42 = *(_OWORD *)v41;
        v43 = *((_OWORD *)v41 + 1);
        v44 = (_OWORD *)(v39 + 32 * v36);
        *v44 = v42;
        v44[1] = v43;
        v45 = v44;
        while (v28 != v35)
        {
          v46 = *(v28 - 2);
          v47 = *(v28 - 1);
          v28 -= 2;
          *(v45 - 2) = v46;
          *(v45 - 1) = v47;
          v45 -= 2;
        }
        v28 = v44 + 2;
        *a1 = v45;
        a1[2] = v39 + 32 * v40;
        if (v35)
          operator delete(v35);
      }
      else
      {
        v33 = &v29[32 * v30];
        v34 = *((_OWORD *)v33 + 1);
        *v28 = *(_OWORD *)v33;
        v28[1] = v34;
        v28 += 2;
      }
      a1[1] = v28;
      ++v30;
    }
    while (v30 != v31);
  }
  v48 = v76;
  v49 = v77 - v76;
  if (v77 != v76)
  {
    v50 = 0;
    if ((unint64_t)(v49 >> 5) <= 1)
      v51 = 1;
    else
      v51 = v49 >> 5;
    do
    {
      v52 = a1[2];
      if ((unint64_t)v28 >= v52)
      {
        v55 = (_OWORD *)*a1;
        v56 = ((uint64_t)v28 - *a1) >> 5;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 59)
          goto LABEL_64;
        v58 = v52 - (_QWORD)v55;
        if (v58 >> 4 > v57)
          v57 = v58 >> 4;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFE0)
          v59 = 0x7FFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
          v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v59);
        else
          v60 = 0;
        v61 = &v48[32 * v50];
        v62 = *(_OWORD *)v61;
        v63 = *((_OWORD *)v61 + 1);
        v64 = (_OWORD *)(v59 + 32 * v56);
        *v64 = v62;
        v64[1] = v63;
        v65 = v64;
        while (v28 != v55)
        {
          v66 = *(v28 - 2);
          v67 = *(v28 - 1);
          v28 -= 2;
          *(v65 - 2) = v66;
          *(v65 - 1) = v67;
          v65 -= 2;
        }
        v28 = v64 + 2;
        *a1 = v65;
        a1[2] = v59 + 32 * v60;
        if (v55)
          operator delete(v55);
      }
      else
      {
        v53 = &v48[32 * v50];
        v54 = *((_OWORD *)v53 + 1);
        *v28 = *(_OWORD *)v53;
        v28[1] = v54;
        v28 += 2;
      }
      a1[1] = v28;
      ++v50;
    }
    while (v50 != v51);
    if (!v48)
      goto LABEL_58;
    goto LABEL_57;
  }
  v48 = v77;
  if (v77)
LABEL_57:
    operator delete(v48);
LABEL_58:
  if (v29)
    operator delete(v29);
}

_QWORD *_ZNSt3__16vectorIDv4_dNS_9allocatorIS1_EEEC2ERKS4_(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<KB::String>::__vallocate[abi:nn180100](a1, v5 >> 5);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

KB::String *KB::UTF8Iterator::UTF8Iterator(KB::UTF8Iterator *this, const KB::String *a2)
{
  KB::String *result;

  result = KB::String::String(this, a2);
  *((_DWORD *)result + 8) = 0;
  return result;
}

{
  KB::String *result;

  result = KB::String::String(this, a2);
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t KB::UTF8Iterator::reset(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t KB::UTF8Iterator::prev(KB::UTF8Iterator *this)
{
  uint64_t v1;
  const char *v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v1 = *((unsigned __int16 *)this + 17);
  if (*((_WORD *)this + 17))
  {
    *((_WORD *)this + 17) = v1 - 1;
    if (*(_WORD *)this)
    {
      v2 = (char *)this + 16;
      if (*((_QWORD *)this + 1))
        v2 = (const char *)*((_QWORD *)this + 1);
    }
    else
    {
      v2 = "";
    }
    v3 = *((unsigned __int16 *)this + 16);
    *((_WORD *)this + 16) = v3 - 1;
    v1 = v2[(unsigned __int16)(v3 - 1)];
    if ((v2[(unsigned __int16)(v3 - 1)] & 0xC0) == 0x80)
    {
      v4 = v2[(unsigned __int16)(v3 - 1)] & 0x3F;
      v5 = v3 - 2;
      *((_WORD *)this + 16) = v3 - 2;
      v6 = v2[(unsigned __int16)(v3 - 2)];
      if (v6 <= 0xBF)
      {
        v9 = 1;
        v10 = 6;
        do
        {
          v4 |= (v6 & 0x3F) << v10;
          ++v9;
          v10 += 6;
          *((_WORD *)this + 16) = --v5;
          v6 = v2[(unsigned __int16)v5];
        }
        while (v6 <= 0xBF);
        v8 = 6 - v9;
        v7 = v10;
      }
      else
      {
        v7 = 6;
        v8 = 5;
      }
      return ((v6 & ~(-1 << v8)) << v7) | v4;
    }
  }
  return v1;
}

uint64_t KB::UTF8Iterator::next(KB::UTF8Iterator *this)
{
  unsigned int v2;
  unsigned int v3;
  const char *v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  int v11;

  v2 = *((unsigned __int16 *)this + 17);
  v3 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v3 = *((unsigned __int16 *)this + 2);
  }
  if (v2 >= v3)
    return 0;
  ++*((_WORD *)this + 17);
  if (*(_WORD *)this)
  {
    v4 = (const char *)*((_QWORD *)this + 1);
    if (!v4)
      v4 = (char *)this + 16;
  }
  else
  {
    v4 = "";
  }
  v6 = *((unsigned __int16 *)this + 16);
  v7 = v6 + 1;
  *((_WORD *)this + 16) = v6 + 1;
  result = v4[v6];
  if ((result + 64) <= 0x34)
  {
    v8 = kb_utf8_countTrailBytes[v4[v6]];
    result = result & ~(-1 << (6 - v8));
    if (v8 != 1)
    {
      if (v8 != 2)
      {
        if (v8 != 3)
          return result;
        v9 = v6 + 2;
        *((_WORD *)this + 16) = v9;
        v10 = v4[v7] & 0x3F | ((_DWORD)result << 6);
        v7 = v9;
        LODWORD(result) = v10;
      }
      *((_WORD *)this + 16) = v7 + 1;
      v11 = v4[v7++] & 0x3F | ((_DWORD)result << 6);
      LODWORD(result) = v11;
    }
    *((_WORD *)this + 16) = v7 + 1;
    return v4[v7] & 0x3Fu | ((_DWORD)result << 6);
  }
  return result;
}

void KB::substr_to_pos_UTF8(KB *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  BOOL v10;
  unsigned __int16 v11[2];
  unsigned __int16 v12;
  char v13;
  void *v14;
  int v15;
  uint64_t v16;

  v3 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v11, this);
  v5 = 0;
  v15 = 0;
  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  while (1)
  {
    v6 = v12;
    v7 = v5;
    if (!v12)
    {
      KB::String::compute_length(v11);
      v6 = v12;
      v7 = HIWORD(v15);
    }
    if (v5 >= v6 || v7 >= v3)
      break;
    v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v11);
    KB::String::append((KB::String *)a3, v9);
    v5 = HIWORD(v15);
  }
  if (v14)
    v10 = v13 == 1;
  else
    v10 = 0;
  if (v10)
    free(v14);
}

void KB::utf8_string_tokens_from_string(KB *this@<X0>, KB::String *a2@<X8>)
{
  void *v5;
  size_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __n128 (*v18)(__n128 *, __n128 *);
  void (*v19)(uint64_t);
  const char *v20;
  _QWORD v21[3];
  uint8_t buf[4];
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x4812000000;
  v18 = __Block_byref_object_copy__8703;
  v19 = __Block_byref_object_dispose__8704;
  v20 = "";
  memset(v21, 0, sizeof(v21));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ "), this);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "length"))
  {
    v6 = 4 * objc_msgSend(v5, "length");
    v7 = malloc_type_malloc(v6, 0xA907DC48uLL);
    v14 = 0;
    v13 = xmmword_1DA910F40;
    if (objc_msgSend(v5, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v7, v6, &v14, 4, 0, 0, objc_msgSend(v5, "length"), &v13))
    {
      if (v13 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (TICanLogMessageAtLevel_onceToken != -1)
          dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
        if (TICanLogMessageAtLevel_logLevel >= 2)
        {
          TIOSLogFacility();
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s The range (%lu, %lu) was left over when getting the bytes from the original document text '%@'"), "utf8_string_tokens_from_string", v13, v5);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v23 = v12;
            _os_log_debug_impl(&dword_1DA6F2000, v8, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

          }
        }
      }
      LMStreamTokenizerCreate();
      LMStreamTokenizerPushBytes();
      LMStreamTokenizerRelease();
    }
    else
    {
      if (TICanLogMessageAtLevel_onceToken != -1)
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
      if (TICanLogMessageAtLevel_logLevel >= 2)
      {
        TIOSLogFacility();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s Unable to get the bytes from the candidate text '%@'"), "utf8_string_tokens_from_string", v5);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v23 = v11;
          _os_log_debug_impl(&dword_1DA6F2000, v9, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

        }
      }
    }
    free(v7);
  }
  v10 = v16;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<KB::String>::__init_with_size[abi:nn180100]<KB::String*,KB::String*>(a2, (const KB::String *)v10[6], (const KB::String *)v10[7], (v10[7] - v10[6]) >> 5);

  _Block_object_dispose(&v15, 8);
  *(_QWORD *)&v13 = v21;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v13);
}

__n128 __Block_byref_object_copy__8703(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8704(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZN2KB30utf8_string_tokens_from_stringEP8NSStringPK10__CFLocale_block_invoke(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  KB::String *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  KB::String *v16;
  char *v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE v20[8];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a3 < 0x10000 && (a4 - 500) <= 0xFFFFFE0C)
  {
    KB::String::String((KB::String *)v20, a2, (unsigned __int16)a3);
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v6 = (KB::String *)v5[7];
    v7 = v5[8];
    if ((unint64_t)v6 >= v7)
    {
      v9 = v5[6];
      v10 = ((uint64_t)v6 - v9) >> 5;
      if ((unint64_t)(v10 + 1) >> 59)
        abort();
      v11 = v7 - v9;
      v12 = v11 >> 4;
      if (v11 >> 4 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v19 = v5 + 8;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v13);
      else
        v14 = 0;
      v15 = v13;
      v16 = (KB::String *)(v13 + 32 * v10);
      v18 = v13 + 32 * v14;
      KB::String::String(v16, (const KB::String *)v20);
      v17 = (char *)v16 + 32;
      std::vector<KB::String>::__swap_out_circular_buffer((uint64_t)(v5 + 6), &v15);
      v8 = (char *)v5[7];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v15);
    }
    else
    {
      v8 = (char *)KB::String::String(v6, (const KB::String *)v20) + 32;
    }
    v5[7] = v8;
    if (v21)
    {
      if (v20[6] == 1)
        free(v21);
    }
  }
}

uint64_t __Block_byref_object_copy__8990(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8991(uint64_t a1)
{

}

uint64_t TI::CP::PathResampler::clear(uint64_t this)
{
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 72) = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 96) = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 120) = *(_QWORD *)(this + 112);
  *(_BYTE *)(this + 136) = 0;
  *(_DWORD *)(this + 140) = 0;
  *(_DWORD *)(this + 144) = 0;
  return this;
}

BOOL TI::CP::PathResampler::is_inflection_point(TI::CP::PathResampler *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v12;
  unsigned int v13;
  double *v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  unsigned int i;
  int v19;
  char is_local_max;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v2 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  if (a2 && *((_DWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 11);
    v4 = *(double *)this * 3.0;
    v5 = v3 + 48 * a2;
    v7 = *(double *)(v5 + 32);
    v6 = (double *)(v5 + 32);
    v8 = v7;
    if (v7 < v4)
      return 0;
    v9 = *((_QWORD *)this + 12);
    v10 = v3 == v9 ? 0.0 : *(double *)(v9 - 16);
    if (v4 + v8 > v10)
      return 0;
    if (*((_BYTE *)this + 32))
    {
      v12 = (v9 - v3) >> 4;
      v13 = a2 - 2;
      v14 = (double *)(v3 + 48 * (a2 - 1) + 32);
      v15 = a2 - 1;
      if (a2 != 1)
      {
        while (*v14 > *v6 - v4)
        {
          if (0xAAAAAAAAAAAAAAABLL * v12 > v15
            && *(v14 - 2) - *(double *)(v3 + 48 * v13 + 16) > *((double *)this + 3))
          {
            return 0;
          }
          --v13;
          v14 -= 6;
          if (!(_DWORD)--v15)
            break;
        }
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * v12;
      if (0xAAAAAAAAAAAAAAABLL * v12 > a2
        && *(double *)(v3 + 48 * a2 + 16) - *(double *)(v3 + 48 * (a2 - 1) + 16) > *((double *)this + 3))
      {
        return 1;
      }
      v17 = v8 - v4;
      for (i = a2 + 1; v16 > i && *(double *)(v3 + 48 * i + 32) > v17; ++i)
      {
        if (i && *(double *)(v3 + 48 * i + 16) - *(double *)(v3 + 48 * (i - 1) + 16) > *((double *)this + 3))
          return 0;
      }
    }
    v19 = *((_DWORD *)this + 3);
    if (v19 != 1)
      return !v19
          && (TI::CP::Path::is_curvature_local_max((TI::CP::PathResampler *)((char *)this + 88), a2, v4) & 1) != 0;
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - v3) >> 4) > a2
      && *(double *)(v3 + 48 * a2 + 16) - *(double *)(v3 + 48 * (a2 - 1) + 16) > *((double *)this + 3))
    {
      return 1;
    }
    v23[0] = &off_1EA100200;
    v23[1] = this;
    v24 = v23;
    is_local_max = TI::CP::Path::is_local_max((_QWORD *)this + 11, a2, (uint64_t)v23, v4);
    v21 = v24;
    if (v24 == v23)
    {
      v22 = 4;
      v21 = v23;
    }
    else
    {
      if (!v24)
        return (is_local_max & 1) != 0;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
    return (is_local_max & 1) != 0;
  }
  return v2;
}

BOOL TI::CP::PathResampler::is_absolute_pause(TI::CP::PathResampler *this, unsigned int a2)
{
  uint64_t v2;

  if (a2 && (v2 = *((_QWORD *)this + 11), 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 12) - v2) >> 4) > a2))
    return *(double *)(v2 + 48 * a2 + 16) - *(double *)(v2 + 48 * (a2 - 1) + 16) > *((double *)this + 3);
  else
    return 0;
}

void std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA100200;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA100200;
  a2[1] = v2;
  return result;
}

double std::__function::__func<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0,std::allocator<TI::CP::PathResampler::is_inflection_point(unsigned int)::$_0>,double ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (!(_DWORD)v2)
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  v4 = *(_QWORD *)(v3 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v3 + 96) - v4) >> 4) <= v2)
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  result = 0.0;
  if (*(double *)(v4 + 48 * v2 + 16) - *(double *)(v4 + 48 * (v2 - 1) + 16) <= *(double *)(v3 + 24))
    return -TI::CP::Path::speed((TI::CP::Path *)(v3 + 88), v2);
  return result;
}

uint64_t TI::CP::PathResampler::process_sample(const TI::CP::PathSample **this, unsigned int a2)
{
  _BOOL4 is_inflection_point;
  const TI::CP::PathSample *v5;
  const TI::CP::PathSample *v6;
  _BOOL4 v7;
  const TI::CP::PathSample *v8;
  float64x2_t *v9;
  float64x2_t *v10;
  double v11;
  double v12;
  float64x2_t *v13;
  unsigned int v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float v17;
  double v18;
  float64x2_t v19;
  const TI::CP::PathSample *v20;
  TI::CP::Path *v21;
  const TI::CP::PathSample *v23;
  _OWORD v24[3];

  is_inflection_point = TI::CP::PathResampler::is_inflection_point((TI::CP::PathResampler *)this, a2);
  v5 = this[5];
  v6 = this[6];
  if (!a2)
  {
    v20 = this[11];
    v21 = (TI::CP::Path *)(this + 5);
    goto LABEL_10;
  }
  v7 = is_inflection_point;
  v23 = this[5];
  v8 = this[11];
  v9 = (float64x2_t *)((char *)v8 + 48 * a2);
  v10 = v9 + 2;
  v11 = v9[2].f64[0];
  v12 = *((double *)v6 - 2) + *(double *)this;
  if (v12 < v11)
  {
    v13 = (float64x2_t *)((char *)v8 + 48 * a2 - 48);
    v14 = a2;
    v15 = v13 + 2;
    v16 = (float64x2_t *)((char *)v8 + 48 * v14 + 16);
    do
    {
      v17 = (v12 - v15->f64[0]) / (v11 - v15->f64[0]);
      v18 = v17;
      v19 = vmlaq_n_f64(v13[1], vsubq_f64(*v16, v13[1]), v18);
      v24[0] = vmlaq_n_f64(*v13, vsubq_f64(*v9, *v13), v18);
      v24[1] = v19;
      v24[2] = vmlaq_n_f64(*v15, vsubq_f64(*v10, *v15), v18);
      TI::CP::Path::append((TI::CP::Path *)(this + 5), (const TI::CP::PathSample *)v24);
      v12 = *((double *)this[6] - 2) + *(double *)this;
      v11 = v10->f64[0];
    }
    while (v12 < v10->f64[0]);
  }
  if (!v7)
  {
    v5 = v23;
    if (*((_BYTE *)this + 16))
      return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
    v21 = (TI::CP::Path *)(this + 5);
    v20 = (const TI::CP::PathSample *)v9;
LABEL_10:
    TI::CP::Path::append(v21, v20);
    return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
  }
  TI::CP::Path::append((TI::CP::Path *)(this + 5), (const TI::CP::PathSample *)v9);
  TI::CP::Path::set_sample_is_inflection_point((TI::CP::Path *)(this + 5), -1431655765 * ((unint64_t)(this[6] - this[5]) >> 4) - 1);
  v5 = v23;
  return -1431655765 * ((unint64_t)(v6 - v5) >> 4);
}

uint64_t TI::CP::PathResampler::retroactively_process_sample(TI::CP::PathResampler *this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v2 = a2;
  if (TI::CP::PathResampler::is_inflection_point(this, a2))
  {
    v4 = *((_QWORD *)this + 5);
    v5 = *((_QWORD *)this + 6);
    if (v5 != v4)
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
      v5 = *((_QWORD *)this + 5);
      do
      {
        v7 = v6 >> 1;
        v8 = v5 + 48 * (v6 >> 1);
        v9 = *(double *)(v8 + 32);
        v10 = v8 + 48;
        v6 += ~(v6 >> 1);
        if (v9 < *(double *)(*((_QWORD *)this + 11) + 48 * v2 + 32))
          v5 = v10;
        else
          v6 = v7;
      }
      while (v6);
    }
    TI::CP::Path::resize((TI::CP::PathResampler *)((char *)this + 40), -1431655765 * ((unint64_t)(v5 - v4) >> 4));
    v11 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
    v12 = *((_DWORD *)this + 35);
    for (*((_DWORD *)this + 35) = v2; v2 < v12; *((_DWORD *)this + 35) = v2)
    {
      TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v2);
      v2 = *((_DWORD *)this + 35) + 1;
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  }
  return -1431655765 * (v11 >> 4);
}

uint64_t TI::CP::PathResampler::process_new_samples(TI::CP::PathResampler *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  unint64_t v13;
  double v14;
  unsigned int v15;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  if (v2 == v3)
    return -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
  v6 = *((_BYTE *)this + 32)
    && (v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4), v5 = v4 - 1, (_DWORD)v4 != 1)
    && v4 > v5
    && *(double *)(v2 + 48 * v5 + 16) - *(double *)(v2 + 48 * (v4 - 2) + 16) > *((double *)this + 3);
  v7 = *((_DWORD *)this + 2);
  v8 = *(double *)(v3 - 16);
  if (v7 == 1 && !v6)
    v8 = v8 + *(double *)this * -3.0;
  v9 = -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
  v10 = *((unsigned int *)this + 35);
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v10 && *(double *)(v2 + 48 * v10 + 32) <= v8)
  {
    do
    {
      v11 = TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v10);
      if (v11 >= v9)
        v9 = v9;
      else
        v9 = v11;
      v10 = (*((_DWORD *)this + 35) + 1);
      *((_DWORD *)this + 35) = v10;
      v2 = *((_QWORD *)this + 11);
      v3 = *((_QWORD *)this + 12);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v10 && *(double *)(v2 + 48 * v10 + 32) <= v8);
    v7 = *((_DWORD *)this + 2);
  }
  if (v7 == 2)
  {
    v12 = v2 == v3 ? 0.0 : *(double *)(v3 - 16);
    v13 = *((unsigned int *)this + 36);
    if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 4) > v13)
    {
      v14 = v12 + *(double *)this * -3.0;
      do
      {
        if (*(double *)(v2 + 48 * v13 + 32) >= v14)
          break;
        v15 = TI::CP::PathResampler::retroactively_process_sample(this, v13);
        v9 = v15 >= v9 ? v9 : v15;
        v13 = (*((_DWORD *)this + 36) + 1);
        *((_DWORD *)this + 36) = v13;
        v2 = *((_QWORD *)this + 11);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 12) - v2) >> 4) > v13);
    }
  }
  return v9;
}

uint64_t TI::CP::PathResampler::append_and_resample(TI::CP::PathResampler *this, CGPoint a2, double a3, double a4, double a5)
{
  CGFloat y;
  CGFloat x;
  uint64_t v11;
  TI::CP::Path *v12;
  double v13;
  double v14;
  _QWORD v16[6];

  y = a2.y;
  x = a2.x;
  v11 = *((_QWORD *)this + 12);
  v12 = (TI::CP::PathResampler *)((char *)this + 88);
  if (*((_QWORD *)this + 11) == v11)
  {
    v14 = 0.0;
  }
  else
  {
    v13 = *(double *)(v11 - 16);
    v14 = v13 + hypot(a2.x - *(double *)(v11 - 48), a2.y - *(double *)(v11 - 40));
  }
  *(CGFloat *)v16 = x;
  *(CGFloat *)&v16[1] = y;
  *(double *)&v16[2] = a3;
  *(double *)&v16[3] = a4;
  *(double *)&v16[4] = v14;
  *(double *)&v16[5] = a5;
  TI::CP::Path::append(v12, (const TI::CP::PathSample *)v16);
  return TI::CP::PathResampler::process_new_samples(this);
}

uint64_t TI::CP::PathResampler::finalize(TI::CP::PathResampler *this)
{
  TI::CP::Path *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const TI::CP::PathSample *v12;
  double v13;
  double v14;
  unsigned int v15;

  v1 = (TI::CP::PathResampler *)((char *)this + 40);
  v2 = -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
  if (!*((_BYTE *)this + 136))
  {
    v4 = *((unsigned int *)this + 35);
    v5 = *((_QWORD *)this + 11);
    for (i = *((_QWORD *)this + 12); 0xAAAAAAAAAAAAAAABLL * ((i - v5) >> 4) > v4; i = *((_QWORD *)this + 12))
    {
      v7 = TI::CP::PathResampler::process_sample((const TI::CP::PathSample **)this, v4);
      if (v7 >= v2)
        v2 = v2;
      else
        v2 = v7;
      v4 = (*((_DWORD *)this + 35) + 1);
      *((_DWORD *)this + 35) = v4;
      v5 = *((_QWORD *)this + 11);
    }
    if (*((_DWORD *)this + 2) == 2)
    {
      v8 = *((unsigned int *)this + 36);
      if (0xAAAAAAAAAAAAAAABLL * ((i - v5) >> 4) > v8)
      {
        do
        {
          v9 = TI::CP::PathResampler::retroactively_process_sample(this, v8);
          if (v9 >= v2)
            v2 = v2;
          else
            v2 = v9;
          v8 = (*((_DWORD *)this + 36) + 1);
          *((_DWORD *)this + 36) = v8;
          i = *((_QWORD *)this + 12);
        }
        while (0xAAAAAAAAAAAAAAABLL * ((i - *((_QWORD *)this + 11)) >> 4) > v8);
      }
    }
    v10 = *((_QWORD *)this + 5);
    v11 = *((_QWORD *)this + 6);
    if (v10 != v11)
    {
      v13 = *(double *)(i - 48);
      v14 = *(double *)(i - 40);
      v12 = (const TI::CP::PathSample *)(i - 48);
      if (hypot(v13 - *(double *)(v11 - 48), v14 - *(double *)(v11 - 40)) > 1.0e-10)
      {
        v15 = -1431655765 * ((unint64_t)(v11 - v10) >> 4);
        if (v2 >= v15)
          v2 = v15;
        else
          v2 = v2;
        TI::CP::Path::append(v1, v12);
      }
    }
    *((_BYTE *)this + 136) = 1;
  }
  return v2;
}

void KB::FilterSortkeyMatchFromDifferentLanguage::~FilterSortkeyMatchFromDifferentLanguage(KB::FilterSortkeyMatchFromDifferentLanguage *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterSortkeyMatchFromDifferentLanguage::filter_description(KB::FilterSortkeyMatchFromDifferentLanguage *this)
{
  return "FilterSortkeyMatchFromDifferentLanguage";
}

void KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::FilterSortkeyMatchFromDifferentLanguage *this, const KB::LanguageModelContext **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  const KB::LanguageModelContext *v12;
  const KB::CandidateFilterResources *v13;
  unint64_t v14;
  const KB::LanguageModelContext *v15;
  const KB::LanguageModelContext *v16;
  unsigned int v17;
  char *v18;
  KB::String *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  int8x8_t prime;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD **v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  _QWORD *i;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  KB::Candidate *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void **v57;
  void *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unsigned __int16 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  KB::CandidateCollection *v70;
  unsigned int v71;
  char *v74[2];
  void *__p[2];
  __int128 v76;
  float v77;
  char v78[8];
  std::__shared_weak_count *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85[5];
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a4 + 3);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  if (!v7)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    if (!v6)
      return;
  }
  v12 = *a2;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v78, (const KB::CandidateFilterLookupContext *)((char *)a3 + 2032));
  v14 = KB::CandidateFilter::language_id_for_context_and_candidate_with_confidence((KB::CandidateFilter *)v78, v12, a4, *((float *)this + 2), v13);
  if ((_DWORD)v14
    || KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)v78)
    && (v14 = *((unsigned int *)a4 + 2), (_DWORD)v14))
  {
    *(_OWORD *)__p = 0u;
    v76 = 0u;
    v77 = 1.0;
    v15 = *a2;
    v16 = a2[1];
    v70 = (KB::CandidateCollection *)a2;
    if (*a2 != v16)
    {
      v71 = v14;
      while (!KB::CandidateFilter::candidate_static_words_from_same_language(v15, (const Candidate *)v14))
      {
LABEL_110:
        v15 = (const KB::LanguageModelContext *)((char *)v15 + 1000);
        if (v15 == v16)
          goto LABEL_121;
      }
      if (!*((_WORD *)v15 + 444))
        KB::Candidate::compute_string(v15);
      KB::CandidateFilter::_sortkey_for_string((_LXLexicon *)((char *)v15 + 888), a4, v74);
      v17 = LOWORD(v74[0]);
      v18 = v74[1];
      if (LOWORD(v74[0]) <= 0xEu)
        v19 = (KB::String *)((char *)v74 + 2);
      else
        v19 = (KB::String *)v74[1];
      v20 = KB::String::hash(v19, (const char *)LOWORD(v74[0]));
      v21 = v20;
      v22 = (unint64_t)__p[1];
      if (__p[1])
      {
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v23.i16[0] = vaddlv_u8(v23);
        v24 = v23.u32[0];
        if (v23.u32[0] > 1uLL)
        {
          v6 = v20;
          if (__p[1] <= (void *)v20)
            v6 = v20 % (unint64_t)__p[1];
        }
        else
        {
          v6 = (LODWORD(__p[1]) - 1) & v20;
        }
        v25 = (_QWORD *)*((_QWORD *)__p[0] + v6);
        if (v25)
        {
          v26 = (_QWORD *)*v25;
          if (*v25)
          {
            while (1)
            {
              v27 = v26[1];
              if (v27 == v21)
              {
                if (KB::operator==((unsigned __int16 *)v26 + 8, (unsigned __int16 *)v74))
                {
                  v14 = v71;
                  goto LABEL_95;
                }
              }
              else
              {
                if (v24 > 1)
                {
                  if (v27 >= v22)
                    v27 %= v22;
                }
                else
                {
                  v27 &= v22 - 1;
                }
                if (v27 != v6)
                {
LABEL_35:
                  v14 = v71;
                  break;
                }
              }
              v26 = (_QWORD *)*v26;
              if (!v26)
                goto LABEL_35;
            }
          }
        }
      }
      v28 = operator new(0x38uLL);
      v26 = v28;
      *v28 = 0;
      v28[1] = v21;
      if (v17 < 0xF)
      {
        *((_OWORD *)v28 + 1) = *(_OWORD *)v74;
      }
      else
      {
        *((_WORD *)v28 + 8) = v17;
        v29 = (void *)operator new[]();
        v26[3] = v29;
        memcpy(v29, v18, *((unsigned __int16 *)v26 + 8));
      }
      v26[4] = 0;
      v26[5] = 0;
      v26[6] = 0;
      v30 = (float)(unint64_t)(*((_QWORD *)&v76 + 1) + 1);
      if (v22 && (float)(v77 * (float)v22) >= v30)
      {
LABEL_85:
        v46 = __p[0];
        v47 = (_QWORD *)*((_QWORD *)__p[0] + v6);
        if (v47)
        {
          *v26 = *v47;
        }
        else
        {
          *v26 = v76;
          *(_QWORD *)&v76 = v26;
          v46[v6] = &v76;
          if (!*v26)
            goto LABEL_94;
          v48 = *(_QWORD *)(*v26 + 8);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v48 >= v22)
              v48 %= v22;
          }
          else
          {
            v48 &= v22 - 1;
          }
          v47 = (char *)__p[0] + 8 * v48;
        }
        *v47 = v26;
LABEL_94:
        ++*((_QWORD *)&v76 + 1);
LABEL_95:
        v49 = v26[6];
        v50 = (KB::Candidate *)v26[5];
        if ((unint64_t)v50 >= v49)
        {
          v51 = v26[4];
          v52 = 0x1CAC083126E978D5 * (((uint64_t)v50 - v51) >> 3);
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) > 0x4189374BC6A7EFLL)
            abort();
          v54 = 0x1CAC083126E978D5 * ((uint64_t)(v49 - v51) >> 3);
          if (2 * v54 > v53)
            v53 = 2 * v54;
          if (v54 >= 0x20C49BA5E353F7)
            v55 = 0x4189374BC6A7EFLL;
          else
            v55 = v53;
          v85[4] = (void **)(v26 + 6);
          if (v55)
            v55 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v55);
          else
            v56 = 0;
          v57 = (void **)(v55 + 1000 * v52);
          v85[0] = (void **)v55;
          v85[1] = v57;
          v85[3] = (void **)(v55 + 1000 * v56);
          KB::Candidate::Candidate((KB::Candidate *)v57, v15);
          v85[2] = v57 + 125;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(v26 + 4, v85);
          v6 = v26[5];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v85);
        }
        else
        {
          v6 = (unint64_t)KB::Candidate::Candidate(v50, v15) + 1000;
        }
        v26[5] = v6;
        if (LOWORD(v74[0]) >= 0xFu && v74[1])
          MEMORY[0x1DF0A212C](v74[1], 0x1000C8077774924);
        goto LABEL_110;
      }
      v31 = (v22 & (v22 - 1)) != 0;
      if (v22 < 3)
        v31 = 1;
      v32 = v31 | (2 * v22);
      v33 = vcvtps_u32_f32(v30 / v77);
      if (v32 <= v33)
        prime = (int8x8_t)v33;
      else
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v22 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_51;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v41 = vcvtps_u32_f32((float)*((unint64_t *)&v76 + 1) / v77);
        if (__p[1] < (void *)3
          || (v42 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
        {
          v41 = std::__next_prime(v41);
        }
        else
        {
          v43 = 1 << -(char)__clz(v41 - 1);
          if (v41 >= 2)
            v41 = v43;
        }
        if (*(_QWORD *)&prime <= v41)
          prime = (int8x8_t)v41;
        if (*(_QWORD *)&prime >= v22)
        {
          v22 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_51:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v35 = operator new(8 * *(_QWORD *)&prime);
            v36 = __p[0];
            __p[0] = v35;
            if (v36)
              operator delete(v36);
            v37 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v37++) = 0;
            while (*(_QWORD *)&prime != v37);
            v38 = (_QWORD **)v76;
            if ((_QWORD)v76)
            {
              v39 = *(_QWORD *)(v76 + 8);
              v40 = (uint8x8_t)vcnt_s8(prime);
              v40.i16[0] = vaddlv_u8(v40);
              if (v40.u32[0] > 1uLL)
              {
                if (v39 >= *(_QWORD *)&prime)
                  v39 %= *(_QWORD *)&prime;
              }
              else
              {
                v39 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v39) = &v76;
              for (i = *v38; i; v39 = v45)
              {
                v45 = i[1];
                if (v40.u32[0] > 1uLL)
                {
                  if (v45 >= *(_QWORD *)&prime)
                    v45 %= *(_QWORD *)&prime;
                }
                else
                {
                  v45 &= *(_QWORD *)&prime - 1;
                }
                if (v45 != v39)
                {
                  if (!*((_QWORD *)__p[0] + v45))
                  {
                    *((_QWORD *)__p[0] + v45) = v38;
                    goto LABEL_76;
                  }
                  *v38 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v45);
                  **((_QWORD **)__p[0] + v45) = i;
                  i = v38;
                }
                v45 = v39;
LABEL_76:
                v38 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v22 = (unint64_t)prime;
            goto LABEL_80;
          }
          v58 = __p[0];
          __p[0] = 0;
          if (v58)
            operator delete(v58);
          v22 = 0;
          __p[1] = 0;
        }
      }
LABEL_80:
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v22 <= v21)
          v6 = v21 % v22;
        else
          v6 = v21;
      }
      else
      {
        v6 = ((_DWORD)v22 - 1) & v21;
      }
      goto LABEL_85;
    }
LABEL_121:
    v59 = *((_DWORD *)this + 3);
    v60 = *((_QWORD *)a4 + 7);
    v61 = operator new(0x20uLL);
    *(_QWORD *)v61 = &off_1EA1002A8;
    v61[2] = v14;
    v61[3] = v59;
    *((_QWORD *)v61 + 2) = __p;
    *((_QWORD *)v61 + 3) = a4;
    v87 = v61;
    KB::CandidateFilter::remove_candidates_satisfying_predicate((uint64_t)v70, v60, (uint64_t)"FilterSortkeyMatchFromDifferentLanguage", v86);
    v62 = v87;
    if (v87 == v86)
    {
      v63 = 4;
      v62 = v86;
    }
    else
    {
      if (!v87)
      {
LABEL_128:
        v64 = (unsigned __int16 *)v76;
        if ((_QWORD)v76)
        {
          do
          {
            v65 = *(unsigned __int16 **)v64;
            std::__destroy_at[abi:nn180100]<std::pair<KB::ByteString const,std::vector<KB::Candidate>>,0>(v64 + 8);
            operator delete(v64);
            v64 = v65;
          }
          while (v65);
        }
        v66 = __p[0];
        __p[0] = 0;
        if (v66)
          operator delete(v66);
        goto LABEL_132;
      }
      v63 = 5;
    }
    (*(void (**)(void))(*v62 + 8 * v63))();
    goto LABEL_128;
  }
LABEL_132:
  v85[0] = (void **)&v84;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v85);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v83);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v82);
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  v67 = v79;
  if (v79)
  {
    v68 = (unint64_t *)&v79->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<KB::ByteString const,std::vector<KB::Candidate>>,0>(unsigned __int16 *a1)
{
  void **v2;

  v2 = (void **)(a1 + 8);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*a1 >= 0xFu)
  {
    if (*((_QWORD *)a1 + 1))
      JUMPOUT(0x1DF0A212CLL);
  }
}

void std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

__n128 std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1EA1002A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA1002A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0,std::allocator<KB::FilterSortkeyMatchFromDifferentLanguage::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_0>,BOOL ()(KB::Candidate const&,KB::String *)>::operator()(uint64_t a1, KB::CandidateFilter *this, KB::String **a3)
{
  KB::String *v5;
  _QWORD *v6;
  unsigned int v7;
  KB::String *v8;
  KB::String *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int16 **v16;
  unsigned __int16 *v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  float v24;
  float v25;
  uint64_t v26;
  float *v27;
  float v28;
  float v29;
  uint64_t v30;
  float *v31;
  float v32;
  const char *v33;
  const char *v34;
  KB::String *v35;
  _QWORD v36[2];
  BOOL (*v37)(uint64_t, uint64_t *);
  void *v38;
  KB::CandidateFilter *v39;
  unsigned __int16 v40;
  char *v41;
  KB::String *v42;
  __int16 v43[3];
  char v44;
  void *v45;
  _QWORD v46[3];

  v46[2] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if ((KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)*(unsigned int *)(a1 + 8)) & 1) != 0)return 0;
  if (!*((_WORD *)this + 444))
    KB::Candidate::compute_string(this);
  KB::CandidateFilter::_sortkey_for_string((_LXLexicon *)((char *)this + 888), *(const KB::String **)(a1 + 24), &v40);
  v6 = *(_QWORD **)(a1 + 16);
  v7 = v40;
  v8 = v42;
  if (v40 >= 0xFu)
    v9 = v42;
  else
    v9 = (KB::String *)&v41;
  v10 = KB::String::hash(v9, (const char *)v40);
  v11 = v6[1];
  if (!v11)
    goto LABEL_23;
  v35 = v5;
  v12 = v10;
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = v10;
    if (v11 <= v10)
      v15 = v10 % v11;
  }
  else
  {
    v15 = ((_DWORD)v11 - 1) & v10;
  }
  v16 = *(unsigned __int16 ***)(*v6 + 8 * v15);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_23:
    v19 = 1;
    goto LABEL_24;
  }
  while (1)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18 == v12)
      break;
    if (v14 > 1)
    {
      if (v18 >= v11)
        v18 %= v11;
    }
    else
    {
      v18 &= v11 - 1;
    }
    if (v18 != v15)
      goto LABEL_23;
LABEL_22:
    v17 = *(unsigned __int16 **)v17;
    if (!v17)
      goto LABEL_23;
  }
  if (!KB::operator==(v17 + 8, &v40))
    goto LABEL_22;
  v22 = *((_QWORD *)v17 + 4);
  v21 = *((_QWORD *)v17 + 5);
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v37 = ___ZZNK2KB39FilterSortkeyMatchFromDifferentLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesEENK3__0clERKNS_9CandidateEPNS_6StringE_block_invoke;
  v38 = &__block_descriptor_tmp_9025;
  v39 = this;
  if (v22 == v21)
    goto LABEL_23;
  v19 = 1;
  while ((((uint64_t (*)(_QWORD *, uint64_t))v37)(v36, v22) & 1) != 0)
  {
    v22 += 1000;
    if (v22 == v21)
      goto LABEL_24;
  }
  v23 = (_QWORD *)*((_QWORD *)v17 + 4);
  v24 = 1.0;
  v25 = 1.0;
  if (*v23)
  {
    v26 = 240 * *v23;
    v27 = (float *)(v23[1] + 52);
    do
    {
      v28 = *v27;
      v27 += 60;
      v25 = v25 * v28;
      v26 -= 240;
    }
    while (v26);
  }
  v29 = v25 * *(float *)(a1 + 12);
  if (*(_QWORD *)this)
  {
    v30 = 240 * *(_QWORD *)this;
    v31 = (float *)(*((_QWORD *)this + 1) + 52);
    v24 = 1.0;
    do
    {
      v32 = *v31;
      v31 += 60;
      v24 = v24 * v32;
      v30 -= 240;
    }
    while (v30);
  }
  if (v29 <= v24)
    goto LABEL_23;
  if (v35)
  {
    KB::Candidate::capitalized_string(this, (uint64_t)v43);
    v33 = (const char *)v45;
    if (!v45)
      v33 = (const char *)v46;
    if (v43[0])
      v34 = v33;
    else
      v34 = "";
    KB::String::append_format(v35, "Candidate '%s' is from a different language and less likely than other candidates in the collection set", v34);
    if (v45 && v44 == 1)
      free(v45);
  }
  v19 = 0;
LABEL_24:
  if (v7 >= 0xF)
  {
    if (v8)
      MEMORY[0x1DF0A212C](v8, 0x1000C8077774924);
  }
  return !v19;
}

BOOL ___ZZNK2KB39FilterSortkeyMatchFromDifferentLanguage17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesEENK3__0clERKNS_9CandidateEPNS_6StringE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  KB::Word *v5;
  KB::Word *v6;
  KB::Word *v7;
  uint64_t v8;
  _BOOL4 v9;
  KB::Word *v10;
  uint64_t v11;
  _BYTE v13[8];
  void *v14;
  _BYTE v15[8];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 32);
  if (*a2 != *v3)
    return 0;
  v5 = (KB::Word *)a2[1];
  if (v2)
  {
    v6 = (KB::Word *)((char *)v5 + 240 * v2);
    v7 = (KB::Word *)v3[1];
    v8 = 240 * v2;
    while (1)
    {
      if ((*((_BYTE *)v5 + 106) & 4) == 0 && (v5 == v7 || KB::String::equal(v5, v7, 1)))
      {
        KB::Word::capitalized_string(v5, (uint64_t)v15);
        KB::Word::capitalized_string(v7, (uint64_t)v13);
        v9 = KB::String::equal((KB::String *)v15, (const KB::String *)v13, 1);
        if (v14 && v13[6] == 1)
          free(v14);
        if (v16)
        {
          if (v15[6] == 1)
            free(v16);
        }
        if (!v9)
          break;
      }
      v5 = (KB::Word *)((char *)v5 + 240);
      v7 = (KB::Word *)((char *)v7 + 240);
      v8 -= 240;
      if (!v8)
      {
        v5 = v6;
        break;
      }
    }
    v10 = v5;
    v11 = *a2;
    v5 = (KB::Word *)a2[1];
  }
  else
  {
    v11 = 0;
    v10 = (KB::Word *)a2[1];
  }
  return (KB::Word *)((char *)v5 + 240 * v11) != v10;
}

void KB::FilterDifferentLanguageThanContext::~FilterDifferentLanguageThanContext(KB::FilterDifferentLanguageThanContext *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::FilterDifferentLanguageThanContext::filter_description(KB::FilterDifferentLanguageThanContext *this)
{
  return "FilterDifferentLanguageThanContext";
}

void KB::FilterDifferentLanguageThanContext::filter_candidates(KB::FilterDifferentLanguageThanContext *this, const KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const KB::CandidateFilterResources *v17;
  const Candidate *v18;
  KB::CandidateFilter *v19;
  KB::CandidateFilter *v20;
  uint64_t v21;
  const KB::Candidate *v22;
  KB::CandidateFilter *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  const KB::Candidate *v27;
  KB::Candidate *v28;
  const Candidate *v29;
  char *v30;
  unsigned __int16 *v31;
  _BYTE *v32;
  uint64_t v33;
  const KB::Candidate *v34;
  KB::Candidate *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  BOOL v46;
  __CFString *v47;
  Candidate *v48;
  unsigned __int16 *v49;
  _BYTE *v50;
  char v51[8];
  std::__shared_weak_count *v52;
  void *__p;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  _BYTE *v59;
  unsigned __int16 v60[2];
  unsigned __int16 v61;
  char v62;
  void *v63;
  _BYTE v64[1000];
  __int16 v65[3];
  char v66;
  char *v67;
  uint64_t v68;
  Candidate **v69;
  char *v70;
  _QWORD v71[4];

  v71[2] = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a4 + 3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a4 + 4);
  if (!v8)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      return;
  }
  else
  {
LABEL_7:
    if (!v9)
      return;
  }
  if (*a2 != a2[1])
  {
    KB::Candidate::Candidate((KB::Candidate *)v64, *a2);
    KB::Candidate::capitalized_string(a3, (uint64_t)v60);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v51, (const KB::CandidateFilterLookupContext *)((char *)a3 + 2032));
    v14 = *((_QWORD *)a4 + 2);
    if (v14)
    {
      do
        v15 = __ldaxr((unsigned int *)v14);
      while (__stlxr(v15 + 1, (unsigned int *)v14));
    }
    v16 = *(_QWORD *)(v14 + 8) + 144;
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v14);
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v58, v16);
    v47 = (__CFString *)*((_QWORD *)a4 + 7);
    v18 = (const Candidate *)KB::CandidateFilter::language_id_for_context_and_candidate_with_confidence((KB::CandidateFilter *)v51, (const KB::LanguageModelContext *)v64, a4, *((float *)this + 2), v17);
    if ((_DWORD)v18)
      goto LABEL_15;
    if (KB::LanguageModelContext::is_linguistically_void((KB::LanguageModelContext *)v51))
    {
      v26 = v61;
      if (!v61)
      {
        KB::String::compute_length(v60);
        v26 = v61;
      }
      if (v26 <= 1)
      {
        v18 = (const Candidate *)*((unsigned int *)a4 + 2);
        if ((_DWORD)v18)
        {
LABEL_15:
          v19 = *a2;
          v20 = a2[1];
          if (*a2 != v20)
          {
            v21 = 0;
            do
            {
              v21 += KB::CandidateFilter::candidate_static_words_from_same_language(v19, v18);
              v19 = (KB::CandidateFilter *)((char *)v19 + 1000);
            }
            while (v19 != v20);
            if (v21)
            {
              LODWORD(v48) = (_DWORD)v18;
              v49 = v60;
              v50 = v58;
              v22 = *a2;
              v23 = a2[1];
              v69 = &v48;
              if (v23 - v22 <= 0)
              {
                std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v22, v23, (unsigned int **)&v69, 0x1CAC083126E978D5 * ((v23 - v22) >> 3), 0, 0);
              }
              else
              {
                v24 = std::get_temporary_buffer[abi:nn180100]<KB::Candidate>(0x1CAC083126E978D5 * ((v23 - v22) >> 3));
                std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v22, v23, (unsigned int **)&v69, 0x1CAC083126E978D5 * ((v23 - v22) >> 3), (uint64_t)v24, v25);
                if (v24)
                  operator delete(v24);
              }
              v28 = *a2;
              v27 = a2[1];
              if (*a2 == v27)
              {
                v27 = *a2;
              }
              else
              {
                v29 = (const Candidate *)v48;
                v30 = (char *)v28 + 888;
                v31 = v49;
                v32 = v50;
                while (1)
                {
                  if ((KB::CandidateFilter::candidate_static_words_from_same_language((KB::CandidateFilter *)(v30 - 888), v29) & 1) == 0)
                  {
                    if (!*(_WORD *)v30)
                      KB::Candidate::compute_string((KB::Candidate *)(v30 - 888));
                    v33 = *((_QWORD *)v32 + 3);
                    if (!v33)
                      std::__throw_bad_function_call[abi:nn180100]();
                    if (!(*(unsigned int (**)(uint64_t, char *, unsigned __int16 *))(*(_QWORD *)v33 + 48))(v33, v30, v31)&& !v30[76])
                    {
                      break;
                    }
                  }
                  v34 = (const KB::Candidate *)(v30 + 112);
                  v30 += 1000;
                  if (v34 == v27)
                    goto LABEL_37;
                }
                v27 = (const KB::Candidate *)(v30 - 888);
LABEL_37:
                v28 = a2[1];
                if (v47 && v27 != v28)
                {
                  v35 = v27;
                  do
                  {
                    KB::Candidate::capitalized_string(v35, (uint64_t)&v69);
                    v36 = v70;
                    if (!v70)
                      v36 = (const char *)v71;
                    if ((_WORD)v69)
                      v37 = v36;
                    else
                      v37 = "";
                    KB::Candidate::token_ids_as_string(v35, (uint64_t)v65);
                    v39 = v67;
                    if (!v67)
                      v39 = (const char *)&v68;
                    if (v65[0])
                      v40 = v39;
                    else
                      v40 = "";
                    KB::append_format(v47, (__CFString *)"[%s] {%s} removed by %s\n", v38, v37, v40, "FilterDifferentLanguageThanContext");
                    if (v67 && v66 == 1)
                      free(v67);
                    if (v70 && BYTE6(v69) == 1)
                      free(v70);
                    v35 = (KB::Candidate *)((char *)v35 + 1000);
                  }
                  while (v35 != v28);
                  v28 = a2[1];
                }
              }
              std::vector<KB::Candidate>::erase((uint64_t)a2, (uint64_t *)v27, v28);
            }
          }
        }
      }
    }
    v41 = v59;
    if (v59 == v58)
    {
      v42 = 4;
      v41 = v58;
    }
    else
    {
      if (!v59)
      {
LABEL_65:
        v69 = (Candidate **)&v57;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v69);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v56);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v55);
        if (__p)
        {
          v54 = __p;
          operator delete(__p);
        }
        v43 = v52;
        if (v52)
        {
          v44 = (unint64_t *)&v52->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (v63)
          v46 = v62 == 1;
        else
          v46 = 0;
        if (v46)
          free(v63);
        KB::Candidate::~Candidate((KB::Candidate *)v64);
        return;
      }
      v42 = 5;
    }
    (*(void (**)(void))(*v41 + 8 * v42))();
    goto LABEL_65;
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, KB::CandidateFilter *a2, unsigned int **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  KB::Candidate *v11;
  unint64_t v12;
  KB::CandidateFilter *v13;
  unint64_t v14;
  KB::CandidateFilter *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28[127];

  v28[125] = *MEMORY[0x1E0C80C00];
  if (a4 >= 2)
  {
    v8 = a1;
    if (a4 == 2)
    {
      if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)((char *)a2 - 1000), (uint64_t)a1))std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v8, (uint64_t *)a2 - 125);
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != (uint64_t *)a2)
      {
        v15 = (KB::CandidateFilter *)(a1 + 125);
        if (a1 + 125 != (uint64_t *)a2)
        {
          v16 = 0;
          v17 = (uint64_t)a1;
          do
          {
            v18 = v17;
            v17 = (uint64_t)v15;
            if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v15, v18))
            {
              KB::Candidate::Candidate((uint64_t)v28, v17);
              v19 = v16;
              while (1)
              {
                KB::Candidate::operator=((uint64_t *)((char *)v8 + v19 + 1000), (uint64_t *)((char *)v8 + v19));
                if (!v19)
                  break;
                v19 -= 1000;
                if ((KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)v28, (uint64_t)v8 + v19) & 1) == 0)
                {
                  v20 = (uint64_t *)((char *)v8 + v19 + 1000);
                  goto LABEL_17;
                }
              }
              v20 = v8;
LABEL_17:
              KB::Candidate::operator=(v20, v28);
              KB::Candidate::~Candidate((KB::Candidate *)v28);
            }
            v15 = (KB::CandidateFilter *)(v17 + 1000);
            v16 += 1000;
          }
          while ((KB::CandidateFilter *)(v17 + 1000) != a2);
        }
      }
    }
    else
    {
      v11 = (KB::Candidate *)a5;
      v12 = a4 >> 1;
      v13 = (KB::CandidateFilter *)&a1[125 * (a4 >> 1)];
      v14 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v13, a3, v14, a5);
        v21 = (uint64_t)v11 + 1000 * v12;
        std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(&v8[125 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v21);
        v22 = (uint64_t *)((char *)v11 + 1000 * a4);
        v23 = (uint64_t *)v21;
        v24 = (uint64_t *)v11;
        while (v23 != v22)
        {
          if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)v23, (uint64_t)v24))
          {
            KB::Candidate::operator=(v8, v23);
            v23 += 125;
          }
          else
          {
            KB::Candidate::operator=(v8, v24);
            v24 += 125;
          }
          v8 += 125;
          if (v24 == (uint64_t *)v21)
          {
            if (v23 != v22)
            {
              v25 = 0;
              do
              {
                KB::Candidate::operator=(&v8[v25], &v23[v25]);
                v25 += 125;
              }
              while (&v23[v25] != v22);
            }
            goto LABEL_33;
          }
        }
        if (v24 != (uint64_t *)v21)
        {
          v26 = 0;
          do
          {
            KB::Candidate::operator=(&v8[v26], &v24[v26]);
            v26 += 125;
          }
          while (&v24[v26] != (uint64_t *)v21);
        }
LABEL_33:
        if (v11)
        {
          v27 = a4;
          do
          {
            KB::Candidate::~Candidate(v11);
            v11 = (KB::Candidate *)((char *)v11 + 1000);
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v13, a3, v14, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(&v8[125 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v11, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v8, (KB::CandidateFilter *)&v8[125 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), v11, a6);
      }
    }
  }
}

uint64_t KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(unsigned int **a1, KB::CandidateFilter *this, uint64_t a3)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  int v16;

  v6 = *a1;
  if ((KB::CandidateFilter::candidate_static_words_from_same_language(this, (const Candidate *)**a1) & 1) == 0)
  {
    v7 = *((_QWORD *)v6 + 2);
    if (!*((_WORD *)this + 444))
      KB::Candidate::compute_string(this);
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
    {
LABEL_16:
      std::__throw_bad_function_call[abi:nn180100]();
      return std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v14, v15, v16);
    }
    if ((*(unsigned int (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v8 + 48))(v8, (char *)this + 888, *((_QWORD *)v6 + 1)))
    {
      v9 = 0;
    }
    else
    {
      v9 = *((_BYTE *)this + 964) == 0;
    }
    if (v9)
      return 0;
  }
  v10 = *a1;
  if ((KB::CandidateFilter::candidate_static_words_from_same_language((KB::CandidateFilter *)a3, (const Candidate *)*v10) & 1) != 0)return 0;
  v11 = *((_QWORD *)v10 + 2);
  if (!*(_WORD *)(a3 + 888))
    KB::Candidate::compute_string((KB::Candidate *)a3);
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12)
    goto LABEL_16;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 48))(v12, a3 + 888, *((_QWORD *)v10 + 1)))
  {
    return 0;
  }
  return *(_BYTE *)(a3 + 964) == 0;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *result, KB::CandidateFilter *a2, unsigned int **a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  KB::CandidateFilter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  KB::CandidateFilter *v20;
  uint64_t v21;
  uint64_t v22;

  if (a4)
  {
    v5 = a5;
    v9 = (uint64_t)result;
    if (a4 == 2)
    {
      v11 = (uint64_t)a2 - 1000;
      if (!KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, (KB::CandidateFilter *)((char *)a2 - 1000), (uint64_t)result))
      {
        KB::Candidate::Candidate(v5, v9);
        v10 = v5 + 1000;
        v12 = v11;
        return (uint64_t *)KB::Candidate::Candidate(v10, v12);
      }
      KB::Candidate::Candidate(v5, v11);
      v10 = v5 + 1000;
LABEL_7:
      v12 = v9;
      return (uint64_t *)KB::Candidate::Candidate(v10, v12);
    }
    if (a4 == 1)
    {
      v10 = a5;
      goto LABEL_7;
    }
    if ((uint64_t)a4 > 8)
    {
      v18 = 1000 * (a4 >> 1);
      v19 = &result[(unint64_t)v18 / 8];
      std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(result, &result[(unint64_t)v18 / 8], a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v9 + v18, a2, a3, a4 - (a4 >> 1), v5 + v18, a4 - (a4 >> 1));
      v20 = (KB::CandidateFilter *)(v9 + v18);
      while (v20 != a2)
      {
        if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v20, v9))
        {
          result = (uint64_t *)KB::Candidate::Candidate(v5, (uint64_t)v20);
          v20 = (KB::CandidateFilter *)((char *)v20 + 1000);
        }
        else
        {
          result = (uint64_t *)KB::Candidate::Candidate(v5, v9);
          v9 += 1000;
        }
        v5 += 1000;
        if ((uint64_t *)v9 == v19)
        {
          if (v20 != a2)
          {
            v21 = 0;
            do
            {
              result = (uint64_t *)KB::Candidate::Candidate(v5 + v21, (uint64_t)v20 + v21);
              v21 += 1000;
            }
            while ((KB::CandidateFilter *)((char *)v20 + v21) != a2);
          }
          return result;
        }
      }
      if ((uint64_t *)v9 != v19)
      {
        v22 = 0;
        do
        {
          result = (uint64_t *)KB::Candidate::Candidate(v5 + v22, v9 + v22);
          v22 += 1000;
        }
        while ((uint64_t *)(v9 + v22) != v19);
      }
    }
    else if (result != (uint64_t *)a2)
    {
      result = (uint64_t *)KB::Candidate::Candidate(a5, (uint64_t)result);
      v13 = (KB::CandidateFilter *)(v9 + 1000);
      if (v13 != a2)
      {
        v14 = 0;
        v15 = v5;
        do
        {
          if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v13, v15))
          {
            KB::Candidate::Candidate(v15 + 1000, v15);
            v16 = (uint64_t *)v5;
            if (v15 != v5)
            {
              v17 = v14;
              while (1)
              {
                v16 = (uint64_t *)(v5 + v17);
                if (!KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a3, v13, v5 + v17 - 1000))break;
                KB::Candidate::operator=((uint64_t *)(v5 + v17), (uint64_t *)(v5 + v17 - 1000));
                v17 -= 1000;
                if (!v17)
                {
                  v16 = (uint64_t *)v5;
                  break;
                }
              }
            }
            result = KB::Candidate::operator=(v16, (uint64_t *)v13);
          }
          else
          {
            result = (uint64_t *)KB::Candidate::Candidate(v15 + 1000, (uint64_t)v13);
          }
          v13 = (KB::CandidateFilter *)((char *)v13 + 1000);
          v14 += 1000;
          v15 += 1000;
        }
        while (v13 != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(uint64_t *a1, KB::CandidateFilter *a2, KB::CandidateFilter *a3, unsigned int **a4, uint64_t a5, uint64_t a6, KB::Candidate *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  KB::CandidateFilter *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  KB::CandidateFilter *v29;
  KB::CandidateFilter *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  KB::Candidate *v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  KB::CandidateFilter *v49;
  unsigned int *v50;

  if (a6)
  {
    v10 = a6;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return;
      while ((KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a2, (uint64_t)a1) & 1) == 0)
      {
        a1 += 125;
        if (!--a5)
          return;
      }
      v49 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, (uint64_t *)a2);
          return;
        }
        if (a5 >= 0)
          v21 = a5;
        else
          v21 = a5 + 1;
        v20 = v21 >> 1;
        v18 = &a1[125 * (v21 >> 1)];
        v50 = *a4;
        if (a3 != a2)
        {
          v46 = v21 >> 1;
          v48 = a8;
          v22 = 0x1CAC083126E978D5 * ((a3 - a2) >> 3);
          a3 = a2;
          do
          {
            v23 = (KB::CandidateFilter *)((char *)a3 + 1000 * (v22 >> 1));
            v24 = KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(&v50, v23, (uint64_t)v18);
            if (v24)
              v22 += ~(v22 >> 1);
            else
              v22 >>= 1;
            if (v24)
              a3 = (KB::CandidateFilter *)((char *)v23 + 1000);
          }
          while (v22);
          a8 = v48;
          v20 = v46;
        }
        v17 = 0x1CAC083126E978D5 * ((a3 - a2) >> 3);
      }
      else
      {
        if (v10 >= 0)
          v16 = v10;
        else
          v16 = v10 + 1;
        v17 = v16 >> 1;
        a3 = (KB::CandidateFilter *)((char *)a2 + 1000 * (v16 >> 1));
        v18 = (uint64_t *)a2;
        if (a2 != (KB::CandidateFilter *)a1)
        {
          v47 = v16 >> 1;
          v19 = 0x1CAC083126E978D5 * ((a2 - (KB::CandidateFilter *)a1) >> 3);
          v18 = a1;
          do
          {
            if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a3, (uint64_t)&v18[125 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 125 * (v19 >> 1) + 125;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
          v17 = v47;
        }
        v20 = 0x1CAC083126E978D5 * (v18 - a1);
      }
      if (v18 == (uint64_t *)a2)
      {
        v29 = a3;
      }
      else if (a3 == a2)
      {
        v29 = (KB::CandidateFilter *)v18;
      }
      else
      {
        v25 = (uint64_t *)a2;
        v26 = v20;
        v27 = v17;
        v28 = std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v18, v25, (uint64_t *)a3);
        v17 = v27;
        v20 = v26;
        v29 = (KB::CandidateFilter *)v28;
      }
      a5 -= v20;
      v10 -= v17;
      if (v20 + v17 >= a5 + v10)
      {
        v30 = a3;
        v31 = v20;
        v32 = a5;
        v33 = v17;
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(v29, v30, v49, a4, v32, v10, a7, a8);
        a2 = (KB::CandidateFilter *)v18;
        v10 = v33;
        a5 = v31;
        a3 = v29;
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)::$_3 &,std::__wrap_iter<KB::Candidate *>>(a1, v18, v29, a4, v20, v17, a7, a8);
        a1 = (uint64_t *)v29;
        a2 = a3;
        a3 = v49;
      }
      if (!v10)
        return;
    }
    if (a5 <= v10)
    {
      if (a1 == (uint64_t *)a2)
        return;
      v40 = 0;
      v35 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v40 * 8, (uint64_t)&a1[v40]);
        ++v35;
        v40 += 125;
      }
      while (&a1[v40] != (uint64_t *)a2);
      v41 = (uint64_t *)((char *)a7 + v40 * 8);
      if ((KB::Candidate *)((char *)a7 + v40 * 8) != a7)
      {
        v42 = (uint64_t *)a7;
        while (a2 != a3)
        {
          if (KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, a2, (uint64_t)v42))
          {
            KB::Candidate::operator=(a1, (uint64_t *)a2);
            a2 = (KB::CandidateFilter *)((char *)a2 + 1000);
          }
          else
          {
            KB::Candidate::operator=(a1, v42);
            v42 += 125;
          }
          a1 += 125;
          if (v42 == v41)
            goto LABEL_78;
        }
        if (v42 != v41)
        {
          v45 = 0;
          do
          {
            KB::Candidate::operator=(&a1[v45], &v42[v45]);
            v45 += 125;
          }
          while (&v42[v45 - 125] != v41 - 125);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v34 = 0;
      v35 = 0;
      do
      {
        KB::Candidate::Candidate((uint64_t)a7 + v34, (uint64_t)a2 + v34);
        ++v35;
        v34 += 1000;
      }
      while ((KB::CandidateFilter *)((char *)a2 + v34) != a3);
      v36 = (KB::Candidate *)((char *)a7 + v34);
      if ((KB::Candidate *)((char *)a7 + v34) != a7)
      {
        v37 = (uint64_t *)((char *)a3 - 1000);
        while (a2 != (KB::CandidateFilter *)a1)
        {
          v38 = KB::FilterDifferentLanguageThanContext::filter_candidates(KB::CandidateCollection &,KB::CandidateFilterLookupContext const&,KB::CandidateFilterResources const&)const::$_3::operator()(a4, (KB::Candidate *)((char *)v36 - 1000), (uint64_t)a2 - 1000);
          if (v38)
            v39 = (uint64_t *)((char *)a2 - 1000);
          else
            v39 = (uint64_t *)((char *)v36 - 1000);
          if (v38)
            a2 = (KB::CandidateFilter *)((char *)a2 - 1000);
          else
            v36 = (KB::Candidate *)((char *)v36 - 1000);
          KB::Candidate::operator=(v37, v39);
          v37 -= 125;
          if (v36 == a7)
            goto LABEL_78;
        }
        v43 = 0;
        do
        {
          v44 = &v37[v43];
          v43 -= 125;
          KB::Candidate::operator=(v44, (uint64_t *)((char *)v36 + v43 * 8));
        }
        while ((KB::Candidate *)((char *)v36 + v43 * 8) != a7);
      }
    }
LABEL_78:
    if (a7 && v35)
    {
      do
      {
        KB::Candidate::~Candidate(a7);
        a7 = (KB::Candidate *)((char *)a7 + 1000);
        --v35;
      }
      while (v35);
    }
  }
}

KB::Word *KB::Word::Word(KB::Word *this, const KB::String *a2, const TITokenID *a3, const void **a4)
{
  _OWORD *v7;
  unint64_t v8;
  void *v9;

  v7 = (_OWORD *)((char *)KB::String::String(this, a2) + 32);
  if (a4)
  {
    v8 = *(unsigned __int16 *)a4;
    if (v8 < 0xF)
    {
      *v7 = *(_OWORD *)a4;
    }
    else
    {
      *((_WORD *)this + 16) = v8;
      v9 = (void *)operator new[]();
      *((_QWORD *)this + 5) = v9;
      memcpy(v9, a4[1], *((unsigned __int16 *)this + 16));
    }
  }
  else
  {
    *(_WORD *)v7 = 0;
  }
  *((_QWORD *)this + 6) = 0x3F80000000000000;
  *((_DWORD *)this + 14) = 1065353216;
  *((_DWORD *)this + 16) = 0x100000;
  *((_WORD *)this + 34) = 0;
  *((_BYTE *)this + 70) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 12) = _D0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((TITokenID *)this + 17) = *a3;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0x100000;
  *((_WORD *)this + 82) = 0;
  *((_BYTE *)this + 166) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 192) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 1065353216;
  return this;
}

uint64_t KB::Word::should_suggest(KB::Word *this)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *((_DWORD *)this + 26);
  if ((v1 & 0x800012) != 0)
    return 0;
  v2 = v1 & 0x2040000;
  v3 = (v1 >> 13) & 1;
  if (v2 != 0x2000000)
    v3 = 1;
  if ((*((_DWORD *)this + 26) & 0x2080) == 0x80)
    return 0;
  else
    return v3;
}

uint64_t KB::Word::Word(uint64_t a1, uint64_t a2, int a3)
{
  double v6;
  unsigned int MetaFlags;
  int TokenID;
  int v14;
  const __CFString *v15;
  _BYTE v17[8];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  LXEntryGetPartialProbability();
  *(float *)&v6 = v6;
  *(float *)(a1 + 48) = __exp10f(*(float *)&v6);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 52) = _D0;
  *(_DWORD *)(a1 + 64) = 0x100000;
  *(_WORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 70) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = _D0;
  MetaFlags = LXEntryGetMetaFlags();
  *(_DWORD *)(a1 + 104) = MetaFlags & 0x4000EF | (((MetaFlags >> 23) & 7) << 27);
  *(_QWORD *)(a1 + 112) = ((unint64_t)LXEntryGetCategoryFlags() >> 8) & 0x3FF;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = LXEntryGetUsageCount();
  *(_DWORD *)(a1 + 128) = LXEntryGetPenaltyCount();
  *(_DWORD *)(a1 + 132) = LXEntryGetAffixData();
  if (a2)
  {
    TokenID = LXEntryGetTokenID();
    if (TokenID)
      v14 = TokenID;
    else
      v14 = 500;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 136) = a3;
  *(_DWORD *)(a1 + 140) = v14;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0x100000;
  *(_WORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 166) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  v15 = (const __CFString *)LXEntryCopyStoredString();
  KB::utf8_string(v15, (uint64_t)v17);
  KB::String::operator=((KB::String *)a1, (KB::String *)v17);
  if (v18 && v17[6] == 1)
    free(v18);
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 104) &= ~1u;
  if (v15)
    CFRelease(v15);
  return a1;
}

uint64_t KB::handle_missing_token_id(uint64_t result)
{
  if (result)
  {
    LODWORD(result) = LXEntryGetTokenID();
    if ((_DWORD)result)
      return result;
    else
      return 500;
  }
  return result;
}

uint64_t KB::Word::set_custom_capitalization(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  *(_DWORD *)(this + 104) = *(_DWORD *)(this + 104) & 0xFFFFFFFE | (a2 == 1);
  return this;
}

void KB::Word::append_suffix(KB::Word *this, const KB::Word *a2, int a3, TITokenID a4)
{
  char *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  _BYTE v11[8];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = (char *)*((_QWORD *)a2 + 1);
  if (!v7)
    v7 = (char *)a2 + 16;
  KB::String::String((KB::String *)v11, &v7[a3], (unsigned __int16)(*(_WORD *)a2 - a3));
  KB::String::append((unsigned __int16 *)this, (const KB::String *)v11);
  if (v12)
    v8 = v11[6] == 1;
  else
    v8 = 0;
  if (v8)
    free(v12);
  *((TITokenID *)this + 17) = a4;
  *((_DWORD *)this + 33) &= ~0x20000000u;
  v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 2) == 0)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_11;
LABEL_18:
    *((_DWORD *)this + 26) |= 0x80u;
    if ((*((_DWORD *)a2 + 26) & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  *((_DWORD *)this + 26) |= 2u;
  v9 = *((_DWORD *)a2 + 26);
  if ((v9 & 0x80) != 0)
    goto LABEL_18;
LABEL_11:
  if ((v9 & 4) != 0)
LABEL_12:
    *((_DWORD *)this + 26) |= 4u;
LABEL_13:
  if (*((unsigned __int16 *)this + 16) >= 0xFu)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
      MEMORY[0x1DF0A212C](v10, 0x1000C8077774924);
  }
  *((_WORD *)this + 16) = 0;
}

void KB::Word::dictionary_sort_key(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  KB::Word *v6;
  uint64_t v7;
  __int128 v8;

  v2 = (_OWORD *)(a1 + 32);
  if (!*(_WORD *)(a1 + 32))
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v8, v4, a1);
      if (*(unsigned __int16 *)(a1 + 32) >= 0xFu)
      {
        v5 = *(_QWORD *)(a1 + 40);
        if (v5)
          MEMORY[0x1DF0A212C](v5, 0x1000C8077774924);
      }
      *v2 = v8;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      KB::Word::capitalized_string(v6, v7);
    }
  }
}

void KB::Word::capitalized_string(KB::Word *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v9;
  UChar32 v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  UChar32 c;
  void *__p[2];
  char v20;
  _BYTE v21[8];
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 30))
  {
    v4 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
    if (v4)
      v5 = (char *)v4;
    else
      v5 = "";
    std::string::basic_string[abi:nn180100]<0>(__p, v5);
    *(_DWORD *)a2 = 0x100000;
    *(_WORD *)(a2 + 4) = 0;
    *(_BYTE *)(a2 + 6) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    if (*((_QWORD *)this + 1))
      v6 = (char *)*((_QWORD *)this + 1);
    else
      v6 = (char *)this + 16;
    v15 = v6;
    v7 = *(unsigned __int16 *)this;
    v16 = 0;
    v17 = v7;
    c = 0;
    KB::String::iterator::initialize((uint64_t *)&v15);
    v11 = v6;
    v12 = v7;
    v13 = v7;
    v14 = 0;
    KB::String::iterator::initialize((uint64_t *)&v11);
    v8 = v12;
    if (v16 != v12)
    {
      v9 = 0;
      do
      {
        v10 = c;
        if (v9 <= 0x1F && ((*((_DWORD *)this + 30) >> v9) & 1) != 0 && !u_istitle(c))
        {
          KB::character_to_titlecase(v10, (uint64_t)__p, (uint64_t)v21);
          KB::String::append((unsigned __int16 *)a2, (const KB::String *)v21);
          if (v22 && v21[6] == 1)
            free(v22);
        }
        else
        {
          KB::String::append((KB::String *)a2, v10);
        }
        ++v9;
        KB::String::iterator::operator++((uint64_t *)&v15);
      }
      while (v16 != v8);
    }
    if (v20 < 0)
      operator delete(__p[0]);
  }
  else
  {
    KB::String::String((KB::String *)a2, this);
  }
}

unint64_t KB::Word::locale_identifier(KB::Word *this)
{
  return TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
}

void KB::Word::lowercased_string(KB::Word *this@<X0>, KB::String *a2@<X8>)
{
  unint64_t v4;
  char *v5;
  void **v6;
  void *__p[2];
  char v8;

  v4 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
  if (v4)
    v5 = (char *)v4;
  else
    v5 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v5);
  if (v8 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  KB::string_to_lowercase(this, (const KB::String *)v6, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

BOOL KB::Word::capitalized_string_equal(KB::Word *this, const KB::Word *a2)
{
  _BOOL8 result;

  if (this == a2)
    return *((_DWORD *)this + 30) == *((_DWORD *)a2 + 30);
  result = KB::String::equal(this, a2, 1);
  if ((_DWORD)result)
    return *((_DWORD *)this + 30) == *((_DWORD *)a2 + 30);
  return result;
}

BOOL KB::Word::is_capitalized_string_all_caps(KB::Word *this)
{
  __int16 v2;

  v2 = *((_WORD *)this + 2);
  if (!v2)
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v2 = *((_WORD *)this + 2);
  }
  return ((-1 << v2) | *((_DWORD *)this + 30)) == -1;
}

void KB::Word::set_custom_capitalization(KB::Word *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  UChar32 v6;
  BOOL v7;
  unsigned __int16 v8[2];
  unsigned __int16 v9;
  char v10;
  void *v11;
  int i;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v8, this);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  for (i = 0; ; v2 = HIWORD(i))
  {
    v5 = v9;
    if (!v9)
    {
      KB::String::compute_length(v8);
      v5 = v9;
    }
    if (v2 >= v5 || v4 >= 0x20)
      break;
    v6 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v8);
    if (u_isupper(v6) || u_istitle(v6))
      v3 |= 1 << v4;
    ++v4;
  }
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = *((_DWORD *)this + 26) & 0xFFFFFFFE | (v3 == 1);
  if (v11)
    v7 = v10 == 1;
  else
    v7 = 0;
  if (v7)
    free(v11);
}

uint64_t KB::Word::capitalize_first_letter(KB::Word *this, int a2)
{
  char *v4;
  int v5;
  uint64_t result;
  char *v7;
  int v8;
  int v9;
  UChar32 c;

  v4 = (char *)*((_QWORD *)this + 1);
  if (!v4)
    v4 = (char *)this + 16;
  v7 = v4;
  v5 = *(unsigned __int16 *)this;
  v8 = 0;
  v9 = v5;
  c = 0;
  KB::String::iterator::initialize((uint64_t *)&v7);
  result = u_isalnum(c);
  *((_DWORD *)this + 30) |= 1 << ((_DWORD)result == 0);
  if (a2)
    *((_DWORD *)this + 26) |= 0x100000u;
  return result;
}

void KB::Word::move_capitalization_to_bits(KB::Word *this)
{
  unint64_t v2;
  char *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  unsigned int v14;
  void *__p[2];
  char v16;
  _BYTE v17[8];
  void *v18;
  uint64_t *v19;
  void *v20;
  UChar32 v21;
  unsigned __int16 v22[2];
  unsigned __int16 v23;
  char v24;
  void *v25;
  uint64_t v26;
  unsigned __int16 v27[2];
  unsigned __int16 v28;
  char v29;
  void *v30;
  int i;
  int v32;
  __int16 v33;
  char v34;
  void *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = TILocaleIdentifierForLexiconID(*((_DWORD *)this + 34));
  if (v2)
    v3 = (char *)v2;
  else
    v3 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v3);
  v32 = 0x100000;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  KB::String::String((KB::String *)v27, this);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  for (i = 0; ; v4 = HIWORD(i))
  {
    v7 = v28;
    if (!v28)
    {
      KB::String::compute_length(v27);
      v7 = v28;
    }
    if (v4 >= v7 || v6 >= 0x20)
      break;
    v8 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v27);
    if (u_isupper(v8))
    {
      KB::character_to_lowercase(v8, (uint64_t)__p, (uint64_t)v22);
      v9 = (uint64_t *)v25;
      if (!v25)
        v9 = &v26;
      v19 = v9;
      LODWORD(v20) = 0;
      HIDWORD(v20) = v22[0];
      v21 = 0;
      KB::String::iterator::initialize((uint64_t *)&v19);
      KB::character_to_titlecase(v21, (uint64_t)__p, (uint64_t)&v19);
      v10 = v23;
      if (!v23)
      {
        KB::String::compute_length(v22);
        v10 = v23;
      }
      if (v10 != 1)
        goto LABEL_20;
      KB::String::String((uint64_t)v17, v8);
      v11 = KB::String::equal((KB::String *)&v19, (const KB::String *)v17, 1);
      if (v18 && v17[6] == 1)
        free(v18);
      if (v11)
        KB::String::append((unsigned __int16 *)&v32, (const KB::String *)v22);
      else
LABEL_20:
        KB::String::append((KB::String *)&v32, v8);
      if (v20 && BYTE6(v19) == 1)
        free(v20);
      if (v25)
      {
        if (v24 == 1)
          free(v25);
      }
      v5 |= 1 << v6;
    }
    else
    {
      KB::String::append((KB::String *)&v32, v8);
    }
    ++v6;
  }
  v12 = *((_DWORD *)this + 30) | v5;
  *((_DWORD *)this + 30) = v12;
  v13 = *((_DWORD *)this + 26);
  if (v12 == 1)
  {
    *((_DWORD *)this + 26) = v13 | 1;
    v14 = HIWORD(i);
    if (!v7)
    {
      KB::String::compute_length(v27);
      v7 = v28;
    }
    if (v14 >= v7)
      KB::String::operator=(this, (KB::String *)&v32);
  }
  else
  {
    *((_DWORD *)this + 26) = v13 & 0xFFFFFFFE;
  }
  if (v30 && v29 == 1)
    free(v30);
  if (v35 && v34 == 1)
    free(v35);
  if (v16 < 0)
    operator delete(__p[0]);
}

uint64_t KB::Word::matches_input(KB::String *a1, const KB::String *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  KB::String *v9;
  KB::String *v10;
  uint64_t v11;
  _QWORD v12[2];

  if (a1 == a2)
    return 1;
  v6 = 1;
  if (KB::String::equal(a1, a2, 1))
    return v6;
  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
  {
    if (!(*(unsigned int (**)(uint64_t, KB::String *, const KB::String *))(*(_QWORD *)v7 + 48))(v7, a1, a2))
      return 0;
    v12[0] = &off_1EA103EF8;
    v12[1] = 1;
    return KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v12, a1, a2, 0, 0);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return KB::Word::preserves_input(v9, v10, v11);
}

uint64_t KB::Word::preserves_input(KB::String *this, KB::String *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (**v8)(KB::DefaultInputSegmentFilter *__hidden);
  int v9;
  UChar32 v10;
  KB::Word *v12;
  const KB::String *v13;
  BOOL v14;
  void (**v15)(KB::DefaultInputSegmentFilter *__hidden);
  uint64_t v16;
  UChar32 c;

  if ((*((_BYTE *)this + 135) & 4) != 0)
  {
    if ((*((_BYTE *)a2 + 135) & 4) == 0)
      return 0;
    if (this != a2)
      return KB::String::equal(this, a2, 1);
    return 1;
  }
  if (!*((_DWORD *)this + 30))
  {
    if (this == a2)
      return 1;
    v7 = 1;
    if (KB::String::equal(this, a2, 1))
      return v7;
  }
  v6 = *(_QWORD *)(a3 + 24);
  if (v6)
  {
    if (!(*(unsigned int (**)(uint64_t, KB::String *, KB::String *))(*(_QWORD *)v6 + 48))(v6, this, a2))
      return 0;
    v14 = 0;
    v15 = &off_1EA103EF8;
    v16 = 1;
    v7 = 0;
    if (!KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&v15, this, a2, &v14, 0)|| v14)
    {
      return v7;
    }
    if ((*((_BYTE *)this + 120) & 1) != 0)
    {
      v8 = (void (**)(KB::DefaultInputSegmentFilter *__hidden))*((_QWORD *)a2 + 1);
      if (!v8)
        v8 = (void (**)(KB::DefaultInputSegmentFilter *__hidden))((char *)a2 + 16);
      v15 = v8;
      v9 = *(unsigned __int16 *)a2;
      LODWORD(v16) = 0;
      HIDWORD(v16) = v9;
      c = 0;
      KB::String::iterator::initialize((uint64_t *)&v15);
      v10 = c;
      if (!u_isupper(c) && !u_istitle(v10))
        return 0;
    }
    return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return KB::Word::is_acceptable_for_input(v12, v13);
}

uint64_t KB::Word::is_acceptable_for_input(KB::Word *this, const KB::String *a2)
{
  const KB::String *v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  _QWORD v9[2];

  if (KB::string_contains_surface_form_features(a2, a2))
  {
    v8 = 0;
    v9[0] = &off_1EA103EF8;
    v9[1] = 1;
    v5 = KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)v9, this, a2, &v8, 0);
    result = 0;
    if (!v5)
      return result;
    if (*((float *)this + 12) <= 0.0)
      return 0;
    v7 = *((_DWORD *)this + 26) & 0xFFDFFFFF | (v8 << 21);
    goto LABEL_7;
  }
  if (KB::string_contains_surface_form_features(this, v4))
  {
    v7 = *((_DWORD *)this + 26) | 0x200000;
LABEL_7:
    *((_DWORD *)this + 26) = v7;
  }
  return 1;
}

BOOL KB::Word::is_potentially_private(KB::Word *this)
{
  unsigned int v2;
  BOOL v3;
  _BOOL8 v4;
  CFMutableStringRef Mutable;
  const char *v7;
  const char *v8;
  _QWORD *v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  char v20;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  int v27;
  int v28;
  int v29;
  unsigned __int16 v30[2];
  unsigned __int16 v31;
  char v32;
  void *v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 106) & 4) != 0)
    return 0;
  KB::Word::capitalized_string(this, (uint64_t)v30);
  v2 = v30[0];
  if (v33)
    v3 = v32 == 1;
  else
    v3 = 0;
  if (v3)
    free(v33);
  if (v2 < 6)
    return 0;
  Mutable = CFStringCreateMutable(0, 0);
  KB::Word::capitalized_string(this, (uint64_t)v30);
  v8 = (const char *)v33;
  v9 = v34;
  if (!v33)
    v8 = (const char *)v34;
  if (v30[0])
    v10 = v8;
  else
    v10 = "";
  KB::append_format(Mutable, (__CFString *)"%s", v7, v10);
  if (v33 && v32 == 1)
    free(v33);
  CFStringTransform(Mutable, 0, (CFStringRef)*MEMORY[0x1E0C9B358], 0);
  KB::utf8_string(Mutable, (uint64_t)v30);
  if (v33)
    v9 = v33;
  v26 = v9;
  v11 = v30[0];
  v27 = 0;
  v28 = v30[0];
  v29 = 0;
  KB::String::iterator::initialize((uint64_t *)&v26);
  v22 = v9;
  v23 = v11;
  v24 = v11;
  v25 = 0;
  KB::String::iterator::initialize((uint64_t *)&v22);
  v12 = v23;
  if (v27 == v23)
  {
    v13 = 0;
    v14 = 0;
    if (!v11)
      goto LABEL_33;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v15 = MEMORY[0x1E0C80978];
    do
    {
      if ((v29 & 0x80) != 0)
      {
        v16 = __maskrune((char)v29, 0x8000uLL);
      }
      else
      {
        v13 += (*(_DWORD *)(v15 + 4 * (char)v29 + 60) >> 10) & 1;
        v16 = *(_DWORD *)(v15 + 4 * (char)v29 + 60) & 0x8000;
      }
      if (v16)
        ++v14;
      KB::String::iterator::operator++((uint64_t *)&v26);
    }
    while (v27 != v12);
    if (!v30[0])
      goto LABEL_33;
  }
  v17 = KB::String::last((KB::String *)v30);
  if (v17 <= 0xFF)
  {
    v18 = (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v17 + 60) >> 10) & 1;
    goto LABEL_35;
  }
LABEL_33:
  LOBYTE(v18) = 0;
LABEL_35:
  v19 = v31;
  if (!v31)
  {
    KB::String::compute_length(v30);
    v19 = v31;
  }
  if (v13 < v19)
    v20 = v18;
  else
    v20 = 0;
  v4 = (v20 & 1) != 0 || v13 > 0 && v14 > 1;
  if (v33 && v32 == 1)
    free(v33);
  if (Mutable)
    CFRelease(Mutable);
  return v4;
}

void KB::Word::append_debug_data(KB::Word *this, __CFString *a2, const KB::String *a3)
{
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  KB::String *v21;
  KB::String *v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  KB::String *v35;
  KB::String *v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  KB::String *v49;
  KB::String *v50;
  uint64_t v51;
  uint64_t v52;
  int64x2_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  KB::String *v63;
  KB::String *v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  KB::String *v77;
  KB::String *v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  KB::String *v91;
  KB::String *v92;
  uint64_t v93;
  uint64_t v94;
  int64x2_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  KB::String *v105;
  KB::String *v106;
  uint64_t v107;
  uint64_t v108;
  int64x2_t v109;
  void **v110;
  const char *v111;
  const char *v112;
  int v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  KB::String *v117;
  KB::String *v118;
  uint64_t v119;
  uint64_t v120;
  int64x2_t v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  void **v128;
  uint64_t v129;
  uint64_t v130;
  KB::String *v131;
  KB::String *v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  KB::String *v145;
  KB::String *v146;
  uint64_t v147;
  uint64_t v148;
  int64x2_t v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  void **v156;
  uint64_t v157;
  uint64_t v158;
  KB::String *v159;
  KB::String *v160;
  uint64_t v161;
  uint64_t v162;
  int64x2_t v163;
  void **v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  KB::String *v174;
  KB::String *v175;
  uint64_t v176;
  uint64_t v177;
  int64x2_t v178;
  void **v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  KB::String *v188;
  KB::String *v189;
  uint64_t v190;
  uint64_t v191;
  int64x2_t v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  void **v199;
  uint64_t v200;
  uint64_t v201;
  KB::String *v202;
  KB::String *v203;
  uint64_t v204;
  uint64_t v205;
  int64x2_t v206;
  void **v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  KB::String *v216;
  KB::String *v217;
  uint64_t v218;
  uint64_t v219;
  int64x2_t v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  void **v227;
  uint64_t v228;
  uint64_t v229;
  KB::String *v230;
  KB::String *v231;
  uint64_t v232;
  uint64_t v233;
  int64x2_t v234;
  void **v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  void **v241;
  uint64_t v242;
  uint64_t v243;
  KB::String *v244;
  KB::String *v245;
  uint64_t v246;
  uint64_t v247;
  int64x2_t v248;
  void **v249;
  const char *v250;
  const char *v251;
  char *v252;
  char *v253;
  double v254;
  uint64_t v255;
  uint64_t v256;
  int64x2_t v257;
  _QWORD v258[2];
  int64x2_t v259;
  _QWORD v260[2];
  int v261;
  __int16 v262;
  char v263;
  void *v264;
  char v265;
  int v266;
  __int16 v267;
  char v268;
  void *v269;
  char v270;
  int64x2_t *v271;
  int64x2_t v272;
  void **v273;
  _QWORD *v274;
  uint64_t v275;

  v275 = *MEMORY[0x1E0C80C00];
  v266 = 0x100000;
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v5 = (const char *)*((_QWORD *)a3 + 1);
  if (!v5)
    v5 = (char *)a3 + 16;
  if (*(_WORD *)a3)
    v6 = v5;
  else
    v6 = "";
  KB::Word::capitalized_string(this, (uint64_t)&v271);
  v7 = (const char *)v272.i64[0];
  if (!v272.i64[0])
    v7 = &v272.i8[8];
  if ((_WORD)v271)
    v8 = v7;
  else
    v8 = "";
  KB::String::append_format((KB::String *)&v266, "%s[%s]", v6, v8);
  if (v272.i64[0] && BYTE6(v271) == 1)
    free((void *)v272.i64[0]);
  v9 = (const char *)v269;
  if (!v269)
    v9 = &v270;
  if ((_WORD)v266)
    v10 = v9;
  else
    v10 = "";
  CFStringAppendCString(a2, v10, 0x8000100u);
  v11 = *((_QWORD *)this + 17);
  if (HIDWORD(v11))
  {
    v12 = TILocaleIdentifierForLexiconID(v11);
    if (v12)
      v13 = (const char *)v12;
    else
      v13 = "";
    v14 = *((unsigned int *)this + 35);
    v15 = logf(*((float *)this + 13));
    v16 = logf(*((float *)this + 24));
    CFStringAppendFormat(a2, 0, CFSTR(" word_id [%s]%d, ln P(word|ctx,lex) %.3f, ln P(lex|ctx) %.3f"), v13, v14, (float)(v15 - v16), v16);
  }
  else
  {
    v254 = logf(*((float *)this + 13));
    CFStringAppendFormat(a2, 0, CFSTR(" ln P(word) %.3f"), *(_QWORD *)&v254, v256);
  }
  v259 = 0uLL;
  v260[0] = 0;
  v17 = *((_DWORD *)this + 26);
  if ((v17 & 0x40000000) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "blocklist";
    v261 = 1048585;
    v265 = 0;
    v274 = v260;
    v18 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(1uLL);
    v271 = (int64x2_t *)v18;
    v272.i64[0] = (uint64_t)v18;
    v273 = &v18[4 * v19];
    *(_DWORD *)v18 = 0x100000;
    *((_WORD *)v18 + 2) = 0;
    *((_BYTE *)v18 + 6) = 0;
    v18[1] = 0;
    v20 = KB::String::operator=((uint64_t)v18, (KB::String *)&v261) + 32;
    v272.i64[1] = v20;
    v21 = (KB::String *)v259.i64[1];
    v22 = (KB::String *)v259.i64[0];
    v23 = v272.i64[0];
    if (v259.i64[1] == v259.i64[0])
    {
      v25 = vdupq_n_s64(v259.u64[1]);
    }
    else
    {
      v24 = v272.i64[0] - 32;
      do
      {
        *(_DWORD *)v24 = 0x100000;
        v21 = (KB::String *)((char *)v21 - 32);
        *(_WORD *)(v24 + 4) = 0;
        *(_BYTE *)(v24 + 6) = 0;
        *(_QWORD *)(v24 + 8) = 0;
        v23 = KB::String::operator=(v24, v21);
        v24 = v23 - 32;
      }
      while (v21 != v22);
      v25 = v259;
      v20 = v272.i64[1];
    }
    v259.i64[0] = v23;
    v272 = v25;
    v26 = (void **)v260[0];
    v260[0] = v273;
    v273 = v26;
    v271 = (int64x2_t *)v25.i64[0];
    std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    v259.i64[1] = v20;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 2) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "no-suggest";
    v261 = 1048586;
    v265 = 0;
    v27 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v29 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v29 + 1) >> 59)
        goto LABEL_362;
      v30 = (v260[0] - v259.i64[0]) >> 4;
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v31 = 0x7FFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v274 = v260;
      v32 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v31);
      v33 = (uint64_t)&v32[4 * v29];
      v271 = (int64x2_t *)v32;
      v272.i64[0] = v33;
      v273 = &v32[4 * v34];
      *(_DWORD *)v33 = 0x100000;
      *(_WORD *)(v33 + 4) = 0;
      *(_BYTE *)(v33 + 6) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      KB::String::operator=(v33, (KB::String *)&v261);
      v28 = v33 + 32;
      v272.i64[1] = v33 + 32;
      v35 = (KB::String *)v259.i64[1];
      v36 = (KB::String *)v259.i64[0];
      v37 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v39 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v38 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v38 = 0x100000;
          v35 = (KB::String *)((char *)v35 - 32);
          *(_WORD *)(v38 + 4) = 0;
          *(_BYTE *)(v38 + 6) = 0;
          *(_QWORD *)(v38 + 8) = 0;
          v37 = KB::String::operator=(v38, v35);
          v38 = v37 - 32;
        }
        while (v35 != v36);
        v39 = v259;
        v28 = v272.i64[1];
      }
      v259.i64[0] = v37;
      v259.i64[1] = v28;
      v272 = v39;
      v40 = (void **)v260[0];
      v260[0] = v273;
      v273 = v40;
      v271 = (int64x2_t *)v39.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v27 + 4) = 0;
      *(_BYTE *)(v27 + 6) = 0;
      *(_QWORD *)(v27 + 8) = 0;
      v28 = KB::String::operator=(v27, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v28;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x80) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "no-suggest-until-learned";
    v261 = 1048600;
    v265 = 0;
    v41 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v43 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v43 + 1) >> 59)
        goto LABEL_362;
      v44 = (v260[0] - v259.i64[0]) >> 4;
      if (v44 <= v43 + 1)
        v44 = v43 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v45 = 0x7FFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      v274 = v260;
      v46 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v45);
      v47 = (uint64_t)&v46[4 * v43];
      v271 = (int64x2_t *)v46;
      v272.i64[0] = v47;
      v273 = &v46[4 * v48];
      *(_DWORD *)v47 = 0x100000;
      *(_WORD *)(v47 + 4) = 0;
      *(_BYTE *)(v47 + 6) = 0;
      *(_QWORD *)(v47 + 8) = 0;
      KB::String::operator=(v47, (KB::String *)&v261);
      v42 = v47 + 32;
      v272.i64[1] = v47 + 32;
      v49 = (KB::String *)v259.i64[1];
      v50 = (KB::String *)v259.i64[0];
      v51 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v53 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v52 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v52 = 0x100000;
          v49 = (KB::String *)((char *)v49 - 32);
          *(_WORD *)(v52 + 4) = 0;
          *(_BYTE *)(v52 + 6) = 0;
          *(_QWORD *)(v52 + 8) = 0;
          v51 = KB::String::operator=(v52, v49);
          v52 = v51 - 32;
        }
        while (v49 != v50);
        v53 = v259;
        v42 = v272.i64[1];
      }
      v259.i64[0] = v51;
      v259.i64[1] = v42;
      v272 = v53;
      v54 = (void **)v260[0];
      v260[0] = v273;
      v273 = v54;
      v271 = (int64x2_t *)v53.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v41 + 4) = 0;
      *(_BYTE *)(v41 + 6) = 0;
      *(_QWORD *)(v41 + 8) = 0;
      v42 = KB::String::operator=(v41, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v42;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 4) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "no-predict-until-learned";
    v261 = 1048600;
    v265 = 0;
    v55 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v57 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v57 + 1) >> 59)
        goto LABEL_362;
      v58 = (v260[0] - v259.i64[0]) >> 4;
      if (v58 <= v57 + 1)
        v58 = v57 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v59 = 0x7FFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      v274 = v260;
      v60 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v59);
      v61 = (uint64_t)&v60[4 * v57];
      v271 = (int64x2_t *)v60;
      v272.i64[0] = v61;
      v273 = &v60[4 * v62];
      *(_DWORD *)v61 = 0x100000;
      *(_WORD *)(v61 + 4) = 0;
      *(_BYTE *)(v61 + 6) = 0;
      *(_QWORD *)(v61 + 8) = 0;
      KB::String::operator=(v61, (KB::String *)&v261);
      v56 = v61 + 32;
      v272.i64[1] = v61 + 32;
      v63 = (KB::String *)v259.i64[1];
      v64 = (KB::String *)v259.i64[0];
      v65 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v67 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v66 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v66 = 0x100000;
          v63 = (KB::String *)((char *)v63 - 32);
          *(_WORD *)(v66 + 4) = 0;
          *(_BYTE *)(v66 + 6) = 0;
          *(_QWORD *)(v66 + 8) = 0;
          v65 = KB::String::operator=(v66, v63);
          v66 = v65 - 32;
        }
        while (v63 != v64);
        v67 = v259;
        v56 = v272.i64[1];
      }
      v259.i64[0] = v65;
      v259.i64[1] = v56;
      v272 = v67;
      v68 = (void **)v260[0];
      v260[0] = v273;
      v273 = v68;
      v271 = (int64x2_t *)v67.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v55 + 4) = 0;
      *(_BYTE *)(v55 + 6) = 0;
      *(_QWORD *)(v55 + 8) = 0;
      v56 = KB::String::operator=(v55, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v56;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x10000000) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "offensive";
    v261 = 1048585;
    v265 = 0;
    v69 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v71 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v71 + 1) >> 59)
        goto LABEL_362;
      v72 = (v260[0] - v259.i64[0]) >> 4;
      if (v72 <= v71 + 1)
        v72 = v71 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v73 = 0x7FFFFFFFFFFFFFFLL;
      else
        v73 = v72;
      v274 = v260;
      v74 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v73);
      v75 = (uint64_t)&v74[4 * v71];
      v271 = (int64x2_t *)v74;
      v272.i64[0] = v75;
      v273 = &v74[4 * v76];
      *(_DWORD *)v75 = 0x100000;
      *(_WORD *)(v75 + 4) = 0;
      *(_BYTE *)(v75 + 6) = 0;
      *(_QWORD *)(v75 + 8) = 0;
      KB::String::operator=(v75, (KB::String *)&v261);
      v70 = v75 + 32;
      v272.i64[1] = v75 + 32;
      v77 = (KB::String *)v259.i64[1];
      v78 = (KB::String *)v259.i64[0];
      v79 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v81 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v80 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v80 = 0x100000;
          v77 = (KB::String *)((char *)v77 - 32);
          *(_WORD *)(v80 + 4) = 0;
          *(_BYTE *)(v80 + 6) = 0;
          *(_QWORD *)(v80 + 8) = 0;
          v79 = KB::String::operator=(v80, v77);
          v80 = v79 - 32;
        }
        while (v77 != v78);
        v81 = v259;
        v70 = v272.i64[1];
      }
      v259.i64[0] = v79;
      v259.i64[1] = v70;
      v272 = v81;
      v82 = (void **)v260[0];
      v260[0] = v273;
      v273 = v82;
      v271 = (int64x2_t *)v81.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v69 + 4) = 0;
      *(_BYTE *)(v69 + 6) = 0;
      *(_QWORD *)(v69 + 8) = 0;
      v70 = KB::String::operator=(v69, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v70;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x8000000) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "vulgar";
    v261 = 1048582;
    v265 = 0;
    v83 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v85 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v85 + 1) >> 59)
        goto LABEL_362;
      v86 = (v260[0] - v259.i64[0]) >> 4;
      if (v86 <= v85 + 1)
        v86 = v85 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v87 = 0x7FFFFFFFFFFFFFFLL;
      else
        v87 = v86;
      v274 = v260;
      v88 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v87);
      v89 = (uint64_t)&v88[4 * v85];
      v271 = (int64x2_t *)v88;
      v272.i64[0] = v89;
      v273 = &v88[4 * v90];
      *(_DWORD *)v89 = 0x100000;
      *(_WORD *)(v89 + 4) = 0;
      *(_BYTE *)(v89 + 6) = 0;
      *(_QWORD *)(v89 + 8) = 0;
      KB::String::operator=(v89, (KB::String *)&v261);
      v84 = v89 + 32;
      v272.i64[1] = v89 + 32;
      v91 = (KB::String *)v259.i64[1];
      v92 = (KB::String *)v259.i64[0];
      v93 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v95 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v94 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v94 = 0x100000;
          v91 = (KB::String *)((char *)v91 - 32);
          *(_WORD *)(v94 + 4) = 0;
          *(_BYTE *)(v94 + 6) = 0;
          *(_QWORD *)(v94 + 8) = 0;
          v93 = KB::String::operator=(v94, v91);
          v94 = v93 - 32;
        }
        while (v91 != v92);
        v95 = v259;
        v84 = v272.i64[1];
      }
      v259.i64[0] = v93;
      v259.i64[1] = v84;
      v272 = v95;
      v96 = (void **)v260[0];
      v260[0] = v273;
      v273 = v96;
      v271 = (int64x2_t *)v95.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v83 + 4) = 0;
      *(_BYTE *)(v83 + 6) = 0;
      *(_QWORD *)(v83 + 8) = 0;
      v84 = KB::String::operator=(v83, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v84;
    if (v264 && v263 == 1)
      free(v264);
    v17 = *((_DWORD *)this + 26);
  }
  if ((v17 & 0x20000000) != 0)
  {
    v262 = 0;
    v263 = 0;
    v264 = "sensitive";
    v261 = 1048585;
    v265 = 0;
    v97 = v259.i64[1];
    if (v259.i64[1] >= v260[0])
    {
      v99 = (v259.i64[1] - v259.i64[0]) >> 5;
      if ((unint64_t)(v99 + 1) >> 59)
        goto LABEL_362;
      v100 = (v260[0] - v259.i64[0]) >> 4;
      if (v100 <= v99 + 1)
        v100 = v99 + 1;
      if (v260[0] - v259.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v101 = 0x7FFFFFFFFFFFFFFLL;
      else
        v101 = v100;
      v274 = v260;
      v102 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v101);
      v103 = (uint64_t)&v102[4 * v99];
      v271 = (int64x2_t *)v102;
      v272.i64[0] = v103;
      v273 = &v102[4 * v104];
      *(_DWORD *)v103 = 0x100000;
      *(_WORD *)(v103 + 4) = 0;
      *(_BYTE *)(v103 + 6) = 0;
      *(_QWORD *)(v103 + 8) = 0;
      KB::String::operator=(v103, (KB::String *)&v261);
      v98 = v103 + 32;
      v272.i64[1] = v103 + 32;
      v105 = (KB::String *)v259.i64[1];
      v106 = (KB::String *)v259.i64[0];
      v107 = v272.i64[0];
      if (v259.i64[1] == v259.i64[0])
      {
        v109 = vdupq_n_s64(v259.u64[1]);
      }
      else
      {
        v108 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v108 = 0x100000;
          v105 = (KB::String *)((char *)v105 - 32);
          *(_WORD *)(v108 + 4) = 0;
          *(_BYTE *)(v108 + 6) = 0;
          *(_QWORD *)(v108 + 8) = 0;
          v107 = KB::String::operator=(v108, v105);
          v108 = v107 - 32;
        }
        while (v105 != v106);
        v109 = v259;
        v98 = v272.i64[1];
      }
      v259.i64[0] = v107;
      v259.i64[1] = v98;
      v272 = v109;
      v110 = (void **)v260[0];
      v260[0] = v273;
      v273 = v110;
      v271 = (int64x2_t *)v109.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v259.i64[1] = 0x100000;
      *(_WORD *)(v97 + 4) = 0;
      *(_BYTE *)(v97 + 6) = 0;
      *(_QWORD *)(v97 + 8) = 0;
      v98 = KB::String::operator=(v97, (KB::String *)&v261) + 32;
    }
    v259.i64[1] = v98;
    if (v264 && v263 == 1)
      free(v264);
  }
  v262 = 0;
  v263 = 0;
  v264 = ", ";
  v261 = 1048578;
  v265 = 0;
  KB::string_join((unsigned __int16 *)v259.i64[0], (unsigned __int16 *)v259.i64[1], (const KB::String *)&v261, (uint64_t)&v271);
  v111 = (const char *)v272.i64[0];
  if (!v272.i64[0])
    v111 = &v272.i8[8];
  if ((_WORD)v271)
    v112 = v111;
  else
    v112 = "";
  CFStringAppendFormat(a2, 0, CFSTR(" flags=(%s)"), v112);
  if (v272.i64[0] && BYTE6(v271) == 1)
    free((void *)v272.i64[0]);
  if (v264 && v263 == 1)
    free(v264);
  v113 = *((_DWORD *)this + 26);
  if ((v113 & 0x80032000) != 0 || *((_DWORD *)this + 31))
  {
    v257 = 0uLL;
    v258[0] = 0;
    if ((v113 & 0x40000) != 0)
    {
      v262 = 0;
      v263 = 0;
      v264 = "static";
      v261 = 1048582;
      v265 = 0;
      v274 = v258;
      v114 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(1uLL);
      v271 = (int64x2_t *)v114;
      v272.i64[0] = (uint64_t)v114;
      v273 = &v114[4 * v115];
      *(_DWORD *)v114 = 0x100000;
      *((_WORD *)v114 + 2) = 0;
      *((_BYTE *)v114 + 6) = 0;
      v114[1] = 0;
      v116 = KB::String::operator=((uint64_t)v114, (KB::String *)&v261) + 32;
      v272.i64[1] = v116;
      v117 = (KB::String *)v257.i64[1];
      v118 = (KB::String *)v257.i64[0];
      v119 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        v121 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        v120 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v120 = 0x100000;
          v117 = (KB::String *)((char *)v117 - 32);
          *(_WORD *)(v120 + 4) = 0;
          *(_BYTE *)(v120 + 6) = 0;
          *(_QWORD *)(v120 + 8) = 0;
          v119 = KB::String::operator=(v120, v117);
          v120 = v119 - 32;
        }
        while (v117 != v118);
        v121 = v257;
        v116 = v272.i64[1];
      }
      v257.i64[0] = v119;
      v272 = v121;
      v122 = (void **)v258[0];
      v258[0] = v273;
      v273 = v122;
      v271 = (int64x2_t *)v121.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      v257.i64[1] = v116;
      if (v264 && v263 == 1)
        free(v264);
      v113 = *((_DWORD *)this + 26);
    }
    if ((v113 & 0x2000) != 0)
    {
      v262 = 0;
      v263 = 0;
      v264 = "learned";
      v261 = 1048583;
      v265 = 0;
      v123 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v125 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v125 + 1) >> 59)
          goto LABEL_362;
        v126 = (v258[0] - v257.i64[0]) >> 4;
        if (v126 <= v125 + 1)
          v126 = v125 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v127 = 0x7FFFFFFFFFFFFFFLL;
        else
          v127 = v126;
        v274 = v258;
        v128 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v127);
        v129 = (uint64_t)&v128[4 * v125];
        v271 = (int64x2_t *)v128;
        v272.i64[0] = v129;
        v273 = &v128[4 * v130];
        *(_DWORD *)v129 = 0x100000;
        *(_WORD *)(v129 + 4) = 0;
        *(_BYTE *)(v129 + 6) = 0;
        *(_QWORD *)(v129 + 8) = 0;
        KB::String::operator=(v129, (KB::String *)&v261);
        v124 = v129 + 32;
        v272.i64[1] = v129 + 32;
        v131 = (KB::String *)v257.i64[1];
        v132 = (KB::String *)v257.i64[0];
        v133 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v135 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v134 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v134 = 0x100000;
            v131 = (KB::String *)((char *)v131 - 32);
            *(_WORD *)(v134 + 4) = 0;
            *(_BYTE *)(v134 + 6) = 0;
            *(_QWORD *)(v134 + 8) = 0;
            v133 = KB::String::operator=(v134, v131);
            v134 = v133 - 32;
          }
          while (v131 != v132);
          v135 = v257;
          v124 = v272.i64[1];
        }
        v257.i64[0] = v133;
        v257.i64[1] = v124;
        v272 = v135;
        v136 = (void **)v258[0];
        v258[0] = v273;
        v273 = v136;
        v271 = (int64x2_t *)v135.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v123 + 4) = 0;
        *(_BYTE *)(v123 + 6) = 0;
        *(_QWORD *)(v123 + 8) = 0;
        v124 = KB::String::operator=(v123, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v124;
      if (v264 && v263 == 1)
        free(v264);
    }
    if (*((_DWORD *)this + 31))
    {
      KB::String::format((KB::String *)"f=%d", (uint64_t)&v261, *((unsigned int *)this + 31));
      v137 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v139 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v139 + 1) >> 59)
          goto LABEL_362;
        v140 = (v258[0] - v257.i64[0]) >> 4;
        if (v140 <= v139 + 1)
          v140 = v139 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v141 = 0x7FFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        v274 = v258;
        v142 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v141);
        v143 = (uint64_t)&v142[4 * v139];
        v271 = (int64x2_t *)v142;
        v272.i64[0] = v143;
        v273 = &v142[4 * v144];
        *(_DWORD *)v143 = 0x100000;
        *(_WORD *)(v143 + 4) = 0;
        *(_BYTE *)(v143 + 6) = 0;
        *(_QWORD *)(v143 + 8) = 0;
        KB::String::operator=(v143, (KB::String *)&v261);
        v138 = v143 + 32;
        v272.i64[1] = v143 + 32;
        v145 = (KB::String *)v257.i64[1];
        v146 = (KB::String *)v257.i64[0];
        v147 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v149 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v148 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v148 = 0x100000;
            v145 = (KB::String *)((char *)v145 - 32);
            *(_WORD *)(v148 + 4) = 0;
            *(_BYTE *)(v148 + 6) = 0;
            *(_QWORD *)(v148 + 8) = 0;
            v147 = KB::String::operator=(v148, v145);
            v148 = v147 - 32;
          }
          while (v145 != v146);
          v149 = v257;
          v138 = v272.i64[1];
        }
        v257.i64[0] = v147;
        v257.i64[1] = v138;
        v272 = v149;
        v150 = (void **)v258[0];
        v258[0] = v273;
        v273 = v150;
        v271 = (int64x2_t *)v149.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v137 + 4) = 0;
        *(_BYTE *)(v137 + 6) = 0;
        *(_QWORD *)(v137 + 8) = 0;
        v138 = KB::String::operator=(v137, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v138;
      if (v264 && v263 == 1)
        free(v264);
    }
    if (*((_DWORD *)this + 32))
    {
      KB::String::format((KB::String *)"p=%d", (uint64_t)&v261, *((unsigned int *)this + 32));
      v151 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v153 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v153 + 1) >> 59)
          goto LABEL_362;
        v154 = (v258[0] - v257.i64[0]) >> 4;
        if (v154 <= v153 + 1)
          v154 = v153 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v155 = 0x7FFFFFFFFFFFFFFLL;
        else
          v155 = v154;
        v274 = v258;
        v156 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v155);
        v157 = (uint64_t)&v156[4 * v153];
        v271 = (int64x2_t *)v156;
        v272.i64[0] = v157;
        v273 = &v156[4 * v158];
        *(_DWORD *)v157 = 0x100000;
        *(_WORD *)(v157 + 4) = 0;
        *(_BYTE *)(v157 + 6) = 0;
        *(_QWORD *)(v157 + 8) = 0;
        KB::String::operator=(v157, (KB::String *)&v261);
        v152 = v157 + 32;
        v272.i64[1] = v157 + 32;
        v159 = (KB::String *)v257.i64[1];
        v160 = (KB::String *)v257.i64[0];
        v161 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v163 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v162 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v162 = 0x100000;
            v159 = (KB::String *)((char *)v159 - 32);
            *(_WORD *)(v162 + 4) = 0;
            *(_BYTE *)(v162 + 6) = 0;
            *(_QWORD *)(v162 + 8) = 0;
            v161 = KB::String::operator=(v162, v159);
            v162 = v161 - 32;
          }
          while (v159 != v160);
          v163 = v257;
          v152 = v272.i64[1];
        }
        v257.i64[0] = v161;
        v257.i64[1] = v152;
        v272 = v163;
        v164 = (void **)v258[0];
        v258[0] = v273;
        v273 = v164;
        v271 = (int64x2_t *)v163.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v151 + 4) = 0;
        *(_BYTE *)(v151 + 6) = 0;
        *(_QWORD *)(v151 + 8) = 0;
        v152 = KB::String::operator=(v151, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v152;
      if (v264 && v263 == 1)
        free(v264);
    }
    v165 = *((_DWORD *)this + 26);
    if ((v165 & 0x10000) != 0)
    {
      v262 = 0;
      v263 = 0;
      v264 = "user dictionary";
      v261 = 1048591;
      v265 = 0;
      v166 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v168 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v168 + 1) >> 59)
          goto LABEL_362;
        v169 = (v258[0] - v257.i64[0]) >> 4;
        if (v169 <= v168 + 1)
          v169 = v168 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v170 = 0x7FFFFFFFFFFFFFFLL;
        else
          v170 = v169;
        v274 = v258;
        v171 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v170);
        v172 = (uint64_t)&v171[4 * v168];
        v271 = (int64x2_t *)v171;
        v272.i64[0] = v172;
        v273 = &v171[4 * v173];
        *(_DWORD *)v172 = 0x100000;
        *(_WORD *)(v172 + 4) = 0;
        *(_BYTE *)(v172 + 6) = 0;
        *(_QWORD *)(v172 + 8) = 0;
        KB::String::operator=(v172, (KB::String *)&v261);
        v167 = v172 + 32;
        v272.i64[1] = v172 + 32;
        v174 = (KB::String *)v257.i64[1];
        v175 = (KB::String *)v257.i64[0];
        v176 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v178 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v177 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v177 = 0x100000;
            v174 = (KB::String *)((char *)v174 - 32);
            *(_WORD *)(v177 + 4) = 0;
            *(_BYTE *)(v177 + 6) = 0;
            *(_QWORD *)(v177 + 8) = 0;
            v176 = KB::String::operator=(v177, v174);
            v177 = v176 - 32;
          }
          while (v174 != v175);
          v178 = v257;
          v167 = v272.i64[1];
        }
        v257.i64[0] = v176;
        v257.i64[1] = v167;
        v272 = v178;
        v179 = (void **)v258[0];
        v258[0] = v273;
        v273 = v179;
        v271 = (int64x2_t *)v178.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v166 + 4) = 0;
        *(_BYTE *)(v166 + 6) = 0;
        *(_QWORD *)(v166 + 8) = 0;
        v167 = KB::String::operator=(v166, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v167;
      if (v264 && v263 == 1)
        free(v264);
      v165 = *((_DWORD *)this + 26);
    }
    if ((v165 & 0x20000) != 0)
    {
      v262 = 0;
      v263 = 0;
      v264 = "address book";
      v261 = 1048588;
      v265 = 0;
      v180 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v182 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v182 + 1) >> 59)
          goto LABEL_362;
        v183 = (v258[0] - v257.i64[0]) >> 4;
        if (v183 <= v182 + 1)
          v183 = v182 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v184 = 0x7FFFFFFFFFFFFFFLL;
        else
          v184 = v183;
        v274 = v258;
        v185 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v184);
        v186 = (uint64_t)&v185[4 * v182];
        v271 = (int64x2_t *)v185;
        v272.i64[0] = v186;
        v273 = &v185[4 * v187];
        *(_DWORD *)v186 = 0x100000;
        *(_WORD *)(v186 + 4) = 0;
        *(_BYTE *)(v186 + 6) = 0;
        *(_QWORD *)(v186 + 8) = 0;
        KB::String::operator=(v186, (KB::String *)&v261);
        v181 = v186 + 32;
        v272.i64[1] = v186 + 32;
        v188 = (KB::String *)v257.i64[1];
        v189 = (KB::String *)v257.i64[0];
        v190 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v192 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v191 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v191 = 0x100000;
            v188 = (KB::String *)((char *)v188 - 32);
            *(_WORD *)(v191 + 4) = 0;
            *(_BYTE *)(v191 + 6) = 0;
            *(_QWORD *)(v191 + 8) = 0;
            v190 = KB::String::operator=(v191, v188);
            v191 = v190 - 32;
          }
          while (v188 != v189);
          v192 = v257;
          v181 = v272.i64[1];
        }
        v257.i64[0] = v190;
        v257.i64[1] = v181;
        v272 = v192;
        v193 = (void **)v258[0];
        v258[0] = v273;
        v273 = v193;
        v271 = (int64x2_t *)v192.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v180 + 4) = 0;
        *(_BYTE *)(v180 + 6) = 0;
        *(_QWORD *)(v180 + 8) = 0;
        v181 = KB::String::operator=(v180, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v181;
      if (v264 && v263 == 1)
        free(v264);
      v165 = *((_DWORD *)this + 26);
    }
    if (v165 < 0)
    {
      v262 = 0;
      v263 = 0;
      v264 = "app names";
      v261 = 1048585;
      v265 = 0;
      v194 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v196 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v196 + 1) >> 59)
          goto LABEL_362;
        v197 = (v258[0] - v257.i64[0]) >> 4;
        if (v197 <= v196 + 1)
          v197 = v196 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v198 = 0x7FFFFFFFFFFFFFFLL;
        else
          v198 = v197;
        v274 = v258;
        v199 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v198);
        v200 = (uint64_t)&v199[4 * v196];
        v271 = (int64x2_t *)v199;
        v272.i64[0] = v200;
        v273 = &v199[4 * v201];
        *(_DWORD *)v200 = 0x100000;
        *(_WORD *)(v200 + 4) = 0;
        *(_BYTE *)(v200 + 6) = 0;
        *(_QWORD *)(v200 + 8) = 0;
        KB::String::operator=(v200, (KB::String *)&v261);
        v195 = v200 + 32;
        v272.i64[1] = v200 + 32;
        v202 = (KB::String *)v257.i64[1];
        v203 = (KB::String *)v257.i64[0];
        v204 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v206 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v205 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v205 = 0x100000;
            v202 = (KB::String *)((char *)v202 - 32);
            *(_WORD *)(v205 + 4) = 0;
            *(_BYTE *)(v205 + 6) = 0;
            *(_QWORD *)(v205 + 8) = 0;
            v204 = KB::String::operator=(v205, v202);
            v205 = v204 - 32;
          }
          while (v202 != v203);
          v206 = v257;
          v195 = v272.i64[1];
        }
        v257.i64[0] = v204;
        v257.i64[1] = v195;
        v272 = v206;
        v207 = (void **)v258[0];
        v258[0] = v273;
        v273 = v207;
        v271 = (int64x2_t *)v206.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v194 + 4) = 0;
        *(_BYTE *)(v194 + 6) = 0;
        *(_QWORD *)(v194 + 8) = 0;
        v195 = KB::String::operator=(v194, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v195;
      if (v264 && v263 == 1)
        free(v264);
      if ((*((_DWORD *)this + 26) & 0x100) == 0)
        goto LABEL_301;
    }
    else if ((v165 & 0x100) == 0)
    {
      goto LABEL_301;
    }
    v262 = 0;
    v263 = 0;
    v264 = "named entities";
    v261 = 1048590;
    v265 = 0;
    v208 = v257.i64[1];
    if (v257.i64[1] >= v258[0])
    {
      v210 = (v257.i64[1] - v257.i64[0]) >> 5;
      if ((unint64_t)(v210 + 1) >> 59)
        goto LABEL_362;
      v211 = (v258[0] - v257.i64[0]) >> 4;
      if (v211 <= v210 + 1)
        v211 = v210 + 1;
      if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v212 = 0x7FFFFFFFFFFFFFFLL;
      else
        v212 = v211;
      v274 = v258;
      v213 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v212);
      v214 = (uint64_t)&v213[4 * v210];
      v271 = (int64x2_t *)v213;
      v272.i64[0] = v214;
      v273 = &v213[4 * v215];
      *(_DWORD *)v214 = 0x100000;
      *(_WORD *)(v214 + 4) = 0;
      *(_BYTE *)(v214 + 6) = 0;
      *(_QWORD *)(v214 + 8) = 0;
      KB::String::operator=(v214, (KB::String *)&v261);
      v209 = v214 + 32;
      v272.i64[1] = v214 + 32;
      v216 = (KB::String *)v257.i64[1];
      v217 = (KB::String *)v257.i64[0];
      v218 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        v220 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        v219 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v219 = 0x100000;
          v216 = (KB::String *)((char *)v216 - 32);
          *(_WORD *)(v219 + 4) = 0;
          *(_BYTE *)(v219 + 6) = 0;
          *(_QWORD *)(v219 + 8) = 0;
          v218 = KB::String::operator=(v219, v216);
          v219 = v218 - 32;
        }
        while (v216 != v217);
        v220 = v257;
        v209 = v272.i64[1];
      }
      v257.i64[0] = v218;
      v257.i64[1] = v209;
      v272 = v220;
      v221 = (void **)v258[0];
      v258[0] = v273;
      v273 = v221;
      v271 = (int64x2_t *)v220.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
    }
    else
    {
      *(_DWORD *)v257.i64[1] = 0x100000;
      *(_WORD *)(v208 + 4) = 0;
      *(_BYTE *)(v208 + 6) = 0;
      *(_QWORD *)(v208 + 8) = 0;
      v209 = KB::String::operator=(v208, (KB::String *)&v261) + 32;
    }
    v257.i64[1] = v209;
    if (v264 && v263 == 1)
      free(v264);
LABEL_301:
    if (*((_QWORD *)this + 28))
    {
      v262 = 0;
      v263 = 0;
      v264 = "supplemental lexicon item";
      v261 = 1048601;
      v265 = 0;
      v222 = v257.i64[1];
      if (v257.i64[1] >= v258[0])
      {
        v224 = (v257.i64[1] - v257.i64[0]) >> 5;
        if ((unint64_t)(v224 + 1) >> 59)
          goto LABEL_362;
        v225 = (v258[0] - v257.i64[0]) >> 4;
        if (v225 <= v224 + 1)
          v225 = v224 + 1;
        if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v226 = 0x7FFFFFFFFFFFFFFLL;
        else
          v226 = v225;
        v274 = v258;
        v227 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v226);
        v228 = (uint64_t)&v227[4 * v224];
        v271 = (int64x2_t *)v227;
        v272.i64[0] = v228;
        v273 = &v227[4 * v229];
        *(_DWORD *)v228 = 0x100000;
        *(_WORD *)(v228 + 4) = 0;
        *(_BYTE *)(v228 + 6) = 0;
        *(_QWORD *)(v228 + 8) = 0;
        KB::String::operator=(v228, (KB::String *)&v261);
        v223 = v228 + 32;
        v272.i64[1] = v228 + 32;
        v230 = (KB::String *)v257.i64[1];
        v231 = (KB::String *)v257.i64[0];
        v232 = v272.i64[0];
        if (v257.i64[1] == v257.i64[0])
        {
          v234 = vdupq_n_s64(v257.u64[1]);
        }
        else
        {
          v233 = v272.i64[0] - 32;
          do
          {
            *(_DWORD *)v233 = 0x100000;
            v230 = (KB::String *)((char *)v230 - 32);
            *(_WORD *)(v233 + 4) = 0;
            *(_BYTE *)(v233 + 6) = 0;
            *(_QWORD *)(v233 + 8) = 0;
            v232 = KB::String::operator=(v233, v230);
            v233 = v232 - 32;
          }
          while (v230 != v231);
          v234 = v257;
          v223 = v272.i64[1];
        }
        v257.i64[0] = v232;
        v257.i64[1] = v223;
        v272 = v234;
        v235 = (void **)v258[0];
        v258[0] = v273;
        v273 = v235;
        v271 = (int64x2_t *)v234.i64[0];
        std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      }
      else
      {
        *(_DWORD *)v257.i64[1] = 0x100000;
        *(_WORD *)(v222 + 4) = 0;
        *(_BYTE *)(v222 + 6) = 0;
        *(_QWORD *)(v222 + 8) = 0;
        v223 = KB::String::operator=(v222, (KB::String *)&v261) + 32;
      }
      v257.i64[1] = v223;
      if (v264 && v263 == 1)
        free(v264);
    }
    if ((*((_BYTE *)this + 107) & 4) == 0)
    {
LABEL_337:
      v262 = 0;
      v263 = 0;
      v264 = ", ";
      v261 = 1048578;
      v265 = 0;
      KB::string_join((unsigned __int16 *)v257.i64[0], (unsigned __int16 *)v257.i64[1], (const KB::String *)&v261, (uint64_t)&v271);
      v250 = (const char *)v272.i64[0];
      if (!v272.i64[0])
        v250 = &v272.i8[8];
      if ((_WORD)v271)
        v251 = v250;
      else
        v251 = "";
      CFStringAppendFormat(a2, 0, CFSTR(" sources=(%s)"), v251);
      if (v272.i64[0] && BYTE6(v271) == 1)
        free((void *)v272.i64[0]);
      if (v264 && v263 == 1)
        free(v264);
      v271 = &v257;
      std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v271);
      goto LABEL_349;
    }
    v262 = 0;
    v263 = 0;
    v264 = "conversation history";
    v261 = 1048596;
    v265 = 0;
    v236 = v257.i64[1];
    if (v257.i64[1] < v258[0])
    {
      *(_DWORD *)v257.i64[1] = 0x100000;
      *(_WORD *)(v236 + 4) = 0;
      *(_BYTE *)(v236 + 6) = 0;
      *(_QWORD *)(v236 + 8) = 0;
      v237 = KB::String::operator=(v236, (KB::String *)&v261) + 32;
LABEL_334:
      v257.i64[1] = v237;
      if (v264 && v263 == 1)
        free(v264);
      goto LABEL_337;
    }
    v238 = (v257.i64[1] - v257.i64[0]) >> 5;
    if (!((unint64_t)(v238 + 1) >> 59))
    {
      v239 = (v258[0] - v257.i64[0]) >> 4;
      if (v239 <= v238 + 1)
        v239 = v238 + 1;
      if (v258[0] - v257.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v240 = 0x7FFFFFFFFFFFFFFLL;
      else
        v240 = v239;
      v274 = v258;
      v241 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v240);
      v242 = (uint64_t)&v241[4 * v238];
      v271 = (int64x2_t *)v241;
      v272.i64[0] = v242;
      v273 = &v241[4 * v243];
      *(_DWORD *)v242 = 0x100000;
      *(_WORD *)(v242 + 4) = 0;
      *(_BYTE *)(v242 + 6) = 0;
      *(_QWORD *)(v242 + 8) = 0;
      KB::String::operator=(v242, (KB::String *)&v261);
      v237 = v242 + 32;
      v272.i64[1] = v242 + 32;
      v244 = (KB::String *)v257.i64[1];
      v245 = (KB::String *)v257.i64[0];
      v246 = v272.i64[0];
      if (v257.i64[1] == v257.i64[0])
      {
        v248 = vdupq_n_s64(v257.u64[1]);
      }
      else
      {
        v247 = v272.i64[0] - 32;
        do
        {
          *(_DWORD *)v247 = 0x100000;
          v244 = (KB::String *)((char *)v244 - 32);
          *(_WORD *)(v247 + 4) = 0;
          *(_BYTE *)(v247 + 6) = 0;
          *(_QWORD *)(v247 + 8) = 0;
          v246 = KB::String::operator=(v247, v244);
          v247 = v246 - 32;
        }
        while (v244 != v245);
        v248 = v257;
        v237 = v272.i64[1];
      }
      v257.i64[0] = v246;
      v257.i64[1] = v237;
      v272 = v248;
      v249 = (void **)v258[0];
      v258[0] = v273;
      v273 = v249;
      v271 = (int64x2_t *)v248.i64[0];
      std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v271);
      goto LABEL_334;
    }
LABEL_362:
    abort();
  }
LABEL_349:
  if (*((_WORD *)this + 32))
  {
    v252 = (char *)*((_QWORD *)this + 9);
    if (!v252)
      v252 = (char *)this + 80;
    CFStringAppendFormat(a2, 0, CFSTR(" log10 P(word|ctx,lm) details=(%s)"), v252);
  }
  if (*((_WORD *)this + 80))
  {
    v253 = (char *)*((_QWORD *)this + 21);
    if (!v253)
      v253 = (char *)this + 176;
    CFStringAppendFormat(a2, 0, CFSTR("\n%s"), v253);
  }
  else
  {
    CFStringAppendFormat(a2, 0, CFSTR("\n"), v255);
  }
  v271 = &v259;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100]((void ***)&v271);
  if (v269)
  {
    if (v268 == 1)
      free(v269);
  }
}

uint64_t TI::Favonius::StrokeBuildManager::engineType(TI::Favonius::StrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_down_or_drag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v5;

  v3 = a3;
  if ((_DWORD)a3 == -1)
  {
    TI::Favonius::KeyboardLayout::find_nearest_key(*(unsigned int **)(*(_QWORD *)a2 + 56), *(CGPoint *)(*(_QWORD *)a2 + 8), &v5);
    v3 = *((__int16 *)v5 + 31);
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v5);
  }
  return v3;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_up(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v5;

  v3 = a3;
  if ((_DWORD)a3 == -1)
  {
    TI::Favonius::KeyboardLayout::find_nearest_key(*(unsigned int **)(*(_QWORD *)a2 + 56), *(CGPoint *)(*(_QWORD *)a2 + 8), &v5);
    v3 = *((__int16 *)v5 + 31);
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v5);
  }
  return v3;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::add_touch_cancel(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

void TI::Favonius::BasicStrokeBuildManager::lookup_suggestions_for_UI(int a1@<W5>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t i;
  uint64_t j;
  BOOL v8;
  uint64_t v9;
  int *v10[3];
  void *__p[3];
  _QWORD v12[3];
  void **v13;
  _BYTE v14[8];
  void *v15;
  _BYTE v16[8];
  void *v17;
  _BYTE v18[8];
  void *v19;
  _BYTE v20[1000];
  uint64_t v21;
  _QWORD v22[126];

  v22[125] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 100) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  if ((a1 & 0xFFFFFFFD) == 1)
  {
    KB::String::String((KB::String *)v18, "one");
    KB::Candidate::Candidate((KB::Candidate *)v20, (const KB::String *)v18, 0);
    KB::String::String((KB::String *)v16, "two");
    KB::Candidate::Candidate((KB::Candidate *)&v21, (const KB::String *)v16, 0);
    KB::String::String((KB::String *)v14, "three");
    KB::Candidate::Candidate((KB::Candidate *)v22, (const KB::String *)v14, 0);
    v5 = (char *)operator new(0xBB8uLL);
    for (i = 0; i != 3000; i += 1000)
      KB::Candidate::Candidate((KB::Candidate *)&v5[i], (const KB::Candidate *)&v20[i]);
    std::vector<KB::Candidate>::__vdeallocate((void **)a3);
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v5 + 3000;
    *(_QWORD *)(a3 + 16) = v5 + 3000;
    memset(v12, 0, sizeof(v12));
    v13 = (void **)v12;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v13);
    for (j = 2000; j != -1000; j -= 1000)
      KB::Candidate::~Candidate((KB::Candidate *)&v20[j]);
    if (v15)
      v8 = v14[6] == 1;
    else
      v8 = 0;
    if (v8)
      free(v15);
    if (v17 && v16[6] == 1)
      free(v17);
    if (v19 && v18[6] == 1)
      free(v19);
  }
  memset(v10, 0, sizeof(v10));
  KB::CandidateFilterFlags::CandidateFilterFlags(__p, v10);
  v20[0] = 1;
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t, uint64_t, void **, _BYTE *))(*(_QWORD *)v9 + 48))(v9, a3, __p, v20);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void TI::Favonius::BasicStrokeBuildManager::lookup_inline_completions_for_UI(uint64_t a1@<X8>)
{
  KB::Candidate *v2;
  uint64_t v3;
  _QWORD v4[3];
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  void **v10;
  _BYTE v11[8];
  void *v12;
  void **v13[126];

  v13[125] = *(void ***)MEMORY[0x1E0C80C00];
  HIDWORD(v9) = 0;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  KB::String::String((KB::String *)v11, "one");
  KB::Candidate::Candidate((KB::Candidate *)v13, (const KB::String *)v11, 0);
  v2 = (KB::Candidate *)operator new(0x3E8uLL);
  KB::Candidate::Candidate(v2, (const KB::Candidate *)v13);
  std::vector<KB::Candidate>::__vdeallocate((void **)&v5);
  *(_QWORD *)&v5 = v2;
  *((_QWORD *)&v5 + 1) = (char *)v2 + 1000;
  memset(v4, 0, sizeof(v4));
  v10 = (void **)v4;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v10);
  KB::Candidate::~Candidate((KB::Candidate *)v13);
  if (v12 && v11[6] == 1)
    free(v12);
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = (char *)v2 + 1000;
  v5 = 0uLL;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v6 + 8);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)&v6[1] + 1);
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)&v8[0];
  v7 = 0uLL;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)v8 + 8);
  memset(v8, 0, sizeof(v8));
  v3 = v9;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v8[1] + 1);
  *(_QWORD *)(a1 + 96) = v3;
  *(_BYTE *)(a1 + 104) = 1;
  v13[0] = (void **)v8 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)&v7;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)v6 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
  v13[0] = (void **)&v5;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v13);
}

void TI::Favonius::BasicStrokeBuildManager::text_accepted_from_UI(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::language_model_uses_input_context(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::has_input_from_touch(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

void TI::Favonius::BasicStrokeBuildManager::typing_model(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::BasicStrokeBuildManager::search_algorithm(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::touch_count(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::keys_for_input(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::is_hit_test_correction(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_continuous_path(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_ml_tap_typing(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::enabled_continuous_path_algorithms(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_continuous_path_retrocorrection(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

uint64_t TI::Favonius::BasicStrokeBuildManager::uses_stem_suffix_correction_factor(TI::Favonius::BasicStrokeBuildManager *this)
{
  return 0;
}

void TI::Favonius::BasicStrokeBuildManager::get_it_recognizer_state(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t __Block_byref_object_copy__9287(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9288(uint64_t a1)
{

}

std::vector<unsigned int> *KB::LanguageModelImplBase::lexicon_id_vector@<X0>(KB::LanguageModelImplBase *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  return std::vector<unsigned int>::vector(a2, (const std::vector<unsigned int> *)((char *)this + 104));
}

unint64_t KB::LanguageModelImplBase::does_support_english(KB::LanguageModelImplBase *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  BOOL v5;

  v1 = *((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 14);
  if (v1 == v2)
    return 0;
  v3 = v1 + 4;
  do
  {
    result = TIIsLexiconIDEnglish(*(_DWORD *)(v3 - 4));
    if ((result & 1) != 0)
      break;
    v5 = v3 == v2;
    v3 += 4;
  }
  while (!v5);
  return result;
}

void KB::LanguageModelImplBase::update_lexicon_id_vector(KB::LanguageModelImplBase *this, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *v8;
  char *v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  char v23[32];
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        v8 = (const __CFString *)MEMORY[0x1DF0A08CC](ValueAtIndex);
        if (v8)
        {
          v24 = 0;
          v25 = 32;
          v26 = 0;
          if (CFStringGetCString(v8, v23, 32, 0x8000100u))
          {
            if (v26)
              v9 = (char *)v24;
            else
              v9 = v23;
            v10 = TILexiconIDForLocaleIdentifier(v9);
            v11 = v10;
            v13 = (char *)*((_QWORD *)this + 14);
            v12 = *((_QWORD *)this + 15);
            if ((unint64_t)v13 >= v12)
            {
              v15 = (char *)*((_QWORD *)this + 13);
              v16 = (v13 - v15) >> 2;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 62)
                abort();
              v18 = v12 - (_QWORD)v15;
              if (v18 >> 1 > v17)
                v17 = v18 >> 1;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
                v19 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v19);
                v15 = (char *)*((_QWORD *)this + 13);
                v13 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v20 = 0;
              }
              v21 = (_DWORD *)(v19 + 4 * v16);
              *v21 = v11;
              v14 = v21 + 1;
              while (v13 != v15)
              {
                v22 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *--v21 = v22;
              }
              *((_QWORD *)this + 13) = v21;
              *((_QWORD *)this + 14) = v14;
              *((_QWORD *)this + 15) = v19 + 4 * v20;
              if (v15)
                operator delete(v15);
            }
            else
            {
              *(_DWORD *)v13 = v10;
              v14 = v13 + 4;
            }
            *((_QWORD *)this + 14) = v14;
          }
          free(v24);
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  }
}

void KB::LanguageModelImplBase::set_app_context(KB::LanguageModelImplBase *this, const __CFString *a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)*((_QWORD *)this + 17);
  std::mutex::lock(v4);
  KB::retain_ptr<__CFDictionary const*>::operator=((const void **)this + 6, a2);
  std::mutex::unlock(v4);
}

uint64_t KB::LanguageModelImplBase::id_for_separator(KB::LanguageModelImplBase *this)
{
  return (*(unsigned int (**)(KB::LanguageModelImplBase *))(*(_QWORD *)this + 40))(this);
}

void KB::LanguageModelImplBase::static_words_for_string(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, KB::DictionaryContainer **a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17[4];
  char v18;
  _QWORD v19[6];
  char v20;

  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  KB::DictionaryContainer::derive_static_words(*a3, (uint64_t *)a7, a2);
  v14 = *(_QWORD *)a7;
  v13 = *(_QWORD *)(a7 + 8);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK2KB21LanguageModelImplBase23static_words_for_stringERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEERKNS_20LanguageModelContextEbb_block_invoke;
  v19[3] = &__block_descriptor_tmp_9589;
  v20 = a6;
  v19[4] = a1;
  v19[5] = a2;
  v15 = std::remove_if[abi:nn180100]<std::__wrap_iter<KB::Word *>,BOOL({block_pointer})(KB::Word const&)>(v14, v13, (uint64_t)v19);
  std::vector<KB::Word>::erase(a7, v15, *(KB::Word **)(a7 + 8));
  if ((a5 & 1) == 0)
  {
    while (v14 != v15)
    {
      v16 = *(_QWORD *)(v14 + 136);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, float))(*(_QWORD *)a1 + 400))(v17, a1, v14, &v16, a4, 0, *(float *)(v14 + 52));
      *(_DWORD *)(v14 + 48) = v17[0];
      if (v18 < 0)
        operator delete(v17[2]);
      v14 += 240;
    }
  }
}

BOOL KB::LanguageModelImplBase::can_reason_about(KB::LanguageModelImplBase *this, const KB::String *a2, const TITokenID *a3)
{
  return a3->word_id != 0;
}

BOOL KB::LanguageModelImplBase::is_text_blocklisted(KB::LanguageModel *a1, int a2, int a3, const KB::LanguageModelContext *a4, uint64_t a5)
{
  _BOOL8 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v13[5];
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  void **v25;

  KB::LanguageModel::lexicon_id_active(a1, a3);
  if (!(*(unsigned int (**)(KB::LanguageModel *))(*(_QWORD *)a1 + 16))(a1)
    || !*(_QWORD *)a5
    || **(_QWORD **)(*(_QWORD *)a5 + 8) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 8) + 8))
  {
    return 1;
  }
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x9002000000;
  v13[3] = __Block_byref_object_copy__9586;
  v13[4] = __Block_byref_object_dispose__9587;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v14, a4);
  KB::LanguageModelImplBase::tokenize_text((uint64_t)a1);
  v8 = *((_BYTE *)v22 + 24) != 0;
  _Block_object_dispose(v13, 8);
  v25 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v19);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Block_object_dispose(&v21, 8);
  return v8;
}

uint64_t KB::LanguageModelImplBase::should_not_suggest_or_predict_text(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1)
    || !*(_QWORD *)a3
    || **(_QWORD **)(*(_QWORD *)a3 + 8) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 8))
  {
    return 1;
  }
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  KB::LanguageModelImplBase::tokenize_text(a1);
  v5 = *((_BYTE *)v8 + 24) != 0;
  _Block_object_dispose(&v7, 8);
  return v5;
}

uint64_t KB::LanguageModelImplBase::predictions()
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::completions()
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::tokenize_text(uint64_t a1)
{
  LMStreamTokenizerCreate();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  LMStreamTokenizerPushBytes();
  return LMStreamTokenizerRelease();
}

void KB::LanguageModelImplBase::set_string_converter(uint64_t a1, void *aBlock)
{
  const void *v3;
  void *v4;

  v3 = *(const void **)(a1 + 128);
  if (v3 != aBlock)
  {
    if (aBlock)
    {
      v4 = _Block_copy(aBlock);
      v3 = *(const void **)(a1 + 128);
      if (!v3)
      {
LABEL_5:
        *(_QWORD *)(a1 + 128) = v4;
        return;
      }
    }
    else
    {
      v4 = 0;
      if (!v3)
        goto LABEL_5;
    }
    _Block_release(v3);
    goto LABEL_5;
  }
}

_QWORD *KB::LanguageModelImplBase::engine_string_to_surface_form@<X0>(KB::LanguageModelImplBase *this@<X0>, CFTypeRef cf@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)*((_QWORD *)this + 16);
  if (result)
    return ((_QWORD *(*)(_QWORD *__return_ptr))result[2])(a3);
  *a3 = cf;
  if (cf)
  {
    result = CFRetain(cf);
    *a3 = cf;
  }
  return result;
}

uint64_t KB::LanguageModelImplBase::last_set_supplemental_word_lexicon(KB::LanguageModelImplBase *this)
{
  return 0;
}

uint64_t KB::LanguageModelImplBase::last_set_supplemental_phrase_lexicon(KB::LanguageModelImplBase *this)
{
  return 0;
}

void ___ZNK2KB21LanguageModelImplBase13tokenize_textERKNS_6StringEU13block_pointerFvS3_RK9TITokenIDE_block_invoke(uint64_t a1, const char *a2, unsigned __int16 a3)
{
  BOOL v4;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v5, a2, a3);
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  if (v6)
    v4 = v5[6] == 1;
  else
    v4 = 0;
  if (v4)
    free(v6);
}

void ___ZNK2KB21LanguageModelImplBase34should_not_suggest_or_predict_textERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEE_block_invoke(_QWORD *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;
  KB::DictionaryContainer **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  __int128 v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) && (*(_DWORD *)(a3 + 4) - 500) <= 0xFFFFFE0C)
  {
    v5 = a1[5];
    v6 = (KB::DictionaryContainer **)a1[6];
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    *(_OWORD *)__p = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v18);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v18 + 8));
    v19 = 0uLL;
    v20 = 0;
    KB::LanguageModelImplBase::static_words_for_string(v5, a2, v6, (uint64_t)&v14, 1, 0, (uint64_t)&v21);
    v23 = (void **)&v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v23);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v18 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v18);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v21;
    if (v21 != v22)
    {
      while (1)
      {
        v11 = *(_DWORD *)(v10 + 104);
        if ((v11 & 0x800012) == 0)
        {
          v12 = (*(_DWORD *)(v10 + 104) & 0x2080) == 0x80 || (v11 & 0x2042000) == 0x2000000;
          if (!v12 && (v11 & 0x800000) == 0 && (*(_DWORD *)(v10 + 104) & 0x2004) != 4)
            break;
        }
        v10 += 240;
        if (v10 == v22)
        {
          v13 = 1;
          goto LABEL_21;
        }
      }
    }
    v13 = 0;
LABEL_21:
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v13;
    *(_QWORD *)&v14 = &v21;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)&v14);
  }
}

uint64_t __Block_byref_object_copy__9586(uint64_t a1, uint64_t a2)
{
  return KB::LanguageModelContext::LanguageModelContext(a1 + 40, a2 + 40);
}

uint64_t __Block_byref_object_dispose__9587(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 112));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 104));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1 + 40);
}

void ___ZNK2KB21LanguageModelImplBase19is_text_blocklistedERKNS_6StringEjRKNS_20LanguageModelContextERKN3WTF6RefPtrINS_19DictionaryContainerEEE27TIBlocklistSensitivityLevel_block_invoke(uint64_t a1, unsigned __int16 *a2, TITokenID *a3)
{
  uint64_t v5;
  TITokenID v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  uint64_t i;
  uint64_t v15;
  char v16;
  TITokenID v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *a3;
    v7 = HIDWORD(*(unint64_t *)a3);
    if ((v7 - 500) > 0xFFFFFE0C)
      goto LABEL_22;
    KB::LanguageModelImplBase::static_words_for_string(*(_QWORD *)(a1 + 48), a2, *(KB::DictionaryContainer ***)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, 1, 1, (uint64_t)&v18);
    v8 = v18;
    v9 = v19;
    if (v18 == v19)
    {
      LOBYTE(v12) = 0;
    }
    else
    {
      v10 = v18 + 240;
      do
      {
        v11 = *(_DWORD *)(v10 - 136);
        v12 = (v11 >> 1) & 1;
        if ((v11 & 2) == 0)
          break;
        v13 = v10 == v19;
        v10 += 240;
      }
      while (!v13);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12;
    if (!v7)
    {
      if (v8 != v9)
      {
        for (i = v8 + 240; i != v9; i += 240)
        {
          if (*(float *)(v8 + 48) < *(float *)(i + 48))
            v8 = i;
        }
      }
      if (v8 == v9)
        v6 = 0;
      else
        v6 = *(TITokenID *)(v8 + 136);
    }
    v20 = (void **)&v18;
    std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100](&v20);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_BYTE *)(v15 + 24))
    {
      v16 = 1;
    }
    else
    {
LABEL_22:
      v16 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, TITokenID, uint64_t, _QWORD))(*(_QWORD *)v5 + 464))(v5, a2, v6, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, *(unsigned int *)(a1 + 64));
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    }
    *(_BYTE *)(v15 + 24) = v16;
    v17 = v6;
    KB::LanguageModelContext::append((KB::LanguageModelContext *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v17, (const KB::String *)a2, 0);
  }
}

BOOL ___ZNK2KB21LanguageModelImplBase23static_words_for_stringERKNS_6StringERKN3WTF6RefPtrINS_19DictionaryContainerEEERKNS_20LanguageModelContextEbb_block_invoke(uint64_t a1, const KB::String *a2)
{
  unint64_t v3;
  BOOL v4;

  v3 = *((_QWORD *)a2 + 17);
  if (*(_BYTE *)(a1 + 48))
    v4 = HIDWORD(v3) == 0;
  else
    v4 = 0;
  return v4
      || !KB::LanguageModel::lexicon_id_active(*(KB::LanguageModel **)(a1 + 32), v3)
      || !KB::String::equal(*(KB::String **)(a1 + 40), a2, 0);
}

uint64_t std::remove_if[abi:nn180100]<std::__wrap_iter<KB::Word *>,BOOL({block_pointer})(KB::Word const&)>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 == a2)
    return a2;
  v5 = a1;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v5) & 1) == 0)
  {
    v5 += 240;
    if (v5 == a2)
      return a2;
  }
  if (v5 == a2)
    return a2;
  for (i = v5 + 240; i != a2; i += 240)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, i) & 1) == 0)
    {
      KB::String::operator=(v5, (KB::String *)i);
      KB::ByteString::operator=((unsigned __int16 *)(v5 + 32), (unsigned __int16 *)(i + 32));
      v7 = *(_QWORD *)(i + 48);
      *(_DWORD *)(v5 + 56) = *(_DWORD *)(i + 56);
      *(_QWORD *)(v5 + 48) = v7;
      KB::String::operator=(v5 + 64, (KB::String *)(i + 64));
      v8 = *(_OWORD *)(i + 96);
      v9 = *(_OWORD *)(i + 112);
      v10 = *(_OWORD *)(i + 144);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(i + 128);
      *(_OWORD *)(v5 + 144) = v10;
      *(_OWORD *)(v5 + 96) = v8;
      *(_OWORD *)(v5 + 112) = v9;
      KB::String::operator=(v5 + 160, (KB::String *)(i + 160));
      *(_BYTE *)(v5 + 192) = *(_BYTE *)(i + 192);
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign(v5 + 200, (uint64_t *)(i + 200));
      v5 += 240;
    }
  }
  return v5;
}

uint64_t KB::LanguageModelImplBase::LanguageModelImplBase(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char *v12;
  _OWORD *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  char *v17;
  char *v18;
  unint64_t v19;
  CFIndex v20;
  const void *ValueAtIndex;
  const __CFString *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v34;
  char buffer[32];
  void *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1EA103830;
  v4 = *(const void **)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a2;
  if (v4)
  {
    CFRetain(v4);
    *(_QWORD *)(a1 + 8) = v4;
  }
  v5 = *(const void **)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    CFRetain(v5);
    *(_QWORD *)(a1 + 16) = v5;
  }
  v6 = *(const void **)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    CFRetain(v6);
    *(_QWORD *)(a1 + 24) = v6;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a1 + 48) = v8;
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  v11 = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  v12 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 120) = 0u;
  v13 = operator new(0x58uLL);
  *(_OWORD *)((char *)v13 + 8) = 0u;
  *(_QWORD *)v13 = &off_1EA100818;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  *((_QWORD *)v13 + 10) = 0;
  *(_QWORD *)(a1 + 144) = v13;
  *((_QWORD *)v13 + 3) = 850045863;
  *(_QWORD *)(a1 + 136) = (char *)v13 + 24;
  v14 = *(const __CFArray **)(a2 + 8);
  v34 = a1;
  if (v14)
  {
    Count = CFArrayGetCount(v14);
    if (Count >= 1)
    {
      v16 = Count;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v14, v20);
        v22 = (const __CFString *)MEMORY[0x1DF0A08CC](ValueAtIndex);
        if (v22)
          break;
LABEL_34:
        if (++v20 == v16)
          goto LABEL_37;
      }
      v36 = 0;
      v37 = 32;
      v38 = 0;
      if (CFStringGetCString(v22, buffer, 32, 0x8000100u))
      {
        if (v38)
          v23 = (char *)v36;
        else
          v23 = buffer;
        v24 = TILexiconIDForLocaleIdentifier(v23);
        v25 = v24;
        if ((unint64_t)v18 >= v19)
        {
          v27 = (v18 - v17) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            abort();
          if ((uint64_t)(v19 - (_QWORD)v17) >> 1 > v28)
            v28 = (uint64_t)(v19 - (_QWORD)v17) >> 1;
          if (v19 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v29);
          else
            v30 = 0;
          v31 = (char *)(v29 + 4 * v27);
          *(_DWORD *)v31 = v25;
          v26 = v31 + 4;
          while (v18 != v17)
          {
            v32 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          v19 = v29 + 4 * v30;
          if (v17)
            operator delete(v17);
          v17 = v31;
          goto LABEL_33;
        }
        *(_DWORD *)v18 = v24;
        v18 += 4;
      }
      v26 = v18;
LABEL_33:
      free(v36);
      v18 = v26;
      goto LABEL_34;
    }
  }
  v17 = 0;
  v18 = 0;
LABEL_37:
  std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(v12, v17, (uint64_t)v18, (v18 - v17) >> 2);
  if (v17)
    operator delete(v17);
  return v34;
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA100818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA100818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

void std::__shared_ptr_emplace<std::mutex>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void KB::LanguageModelImplBase::dynamic_resource_locale_identifier(CFArrayRef *this)
{
  CFArrayGetValueAtIndex(this[2], 0);
  JUMPOUT(0x1DF0A08CCLL);
}

void KB::LanguageModelImplBase::trial_parameters(KB::LanguageModelImplBase *this@<X0>, const __CFDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  KB::LanguageModelConfig::trial_parameters((KB::LanguageModelImplBase *)((char *)this + 8), a2, a3);
}

const void **KB::LanguageModelImplBase::_set_app_context_under_mutex(const void **this, const __CFString *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 6, a2);
}

const void **KB::LanguageModelImplBase::_set_recipient_context_under_mutex(const void **this, const __CFDictionary *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 7, a2);
}

uint64_t KB::LanguageModelImplBase::_is_multilingual_mode_enabled(KB::LanguageModelImplBase *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t __Block_byref_object_copy__9662(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9663(uint64_t a1)
{

}

uint64_t KB::CandidateFilterFlags::get_filter_flag_index(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = -1;
  if (a2)
    return v2;
  else
    return 0;
}

_QWORD *KB::CandidateFilterFlags::CandidateFilterFlags(_QWORD *a1, int **a2)
{
  char *v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)operator new(0x10uLL);
  a1[1] = v4 + 16;
  a1[2] = v4 + 16;
  *(_DWORD *)v4 = 0;
  v4[4] = 0;
  *((_DWORD *)v4 + 2) = 1;
  v4[12] = 0;
  *a1 = v4;
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    v8 = *v5++;
    v7 = v8;
    if (v8 == 1)
      v9 = 1;
    else
      v9 = -1;
    if (v7)
      v10 = v9;
    else
      v10 = 0;
    v4[8 * v10 + 4] = 1;
  }
  return a1;
}

_QWORD *KB::CandidateFilterFlags::enable_flag(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = -1;
  if (!a2)
    v2 = 0;
  *(_BYTE *)(*result + 8 * v2 + 4) = 1;
  return result;
}

_QWORD *KB::CandidateFilterFlags::disable_flag(_QWORD *result, int a2)
{
  uint64_t v2;

  v2 = 1;
  if (a2 != 1)
    v2 = -1;
  if (!a2)
    v2 = 0;
  *(_BYTE *)(*result + 8 * v2 + 4) = 0;
  return result;
}

std::string *KB::CandidateFilterFlags::serialize_flag_val@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v2;
  std::string::size_type size;
  const std::string::value_type *v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = this->__r_.__value_.__r.__words[0];
  size = this->__r_.__value_.__l.__size_;
  if (this->__r_.__value_.__r.__words[0] != size)
  {
    do
    {
      if (*(_BYTE *)(v2 + 4))
        v5 = "1";
      else
        v5 = "0";
      this = std::string::append(a2, v5, 1uLL);
      v2 += 8;
    }
    while (v2 != size);
  }
  return this;
}

uint64_t KB::CandidateFilterFlags::candidate_filter_flag_type(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  BOOL v5;
  unsigned int *v6;
  uint64_t result;

  v1 = *this;
  v2 = this[1];
  if (*this == v2)
    return 2;
  v3 = v1 + 2;
  do
  {
    v4 = *((unsigned __int8 *)v3 - 4);
    if (*((_BYTE *)v3 - 4))
      v5 = 1;
    else
      v5 = v3 == v2;
    v3 += 2;
  }
  while (!v5);
  v6 = *this;
  while (*((_BYTE *)v6 + 4))
  {
    v6 += 2;
    if (v6 == v2)
      return 2;
  }
  if (!v4)
    return 2;
  while (1)
  {
    if (*((_BYTE *)v1 + 4))
    {
      result = *v1;
      if (result < 2)
        break;
    }
    v1 += 2;
    if (v1 == v2)
      return 2;
  }
  return result;
}

KB::String *KB::CandidateFilterFlags::candidate_filter_flag_desc@<X0>(unsigned int **this@<X0>, KB::String *a2@<X8>)
{
  int v3;
  const KB::String *v4;
  const KB::String *v5;

  v3 = KB::CandidateFilterFlags::candidate_filter_flag_type(this);
  v4 = (const KB::String *)&kGenericFlagDesc;
  if (v3 == 1)
    v4 = (const KB::String *)&kPostLMFlagDesc;
  if (v3)
    v5 = v4;
  else
    v5 = (const KB::String *)&kPreLMFlagDesc;
  return KB::String::String(a2, v5);
}

TI::CP::PathEncoder *TI::CP::PathEncoder::decode_path(TI::CP::PathEncoder *this)
{
  uint64_t v2;
  CGPoint *v3;
  char *v4;

  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v2 = *((unsigned __int8 *)this + 71);
    v3 = (CGPoint *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v3 = (CGPoint *)*((_QWORD *)this + 6);
    while (1)
    {
      v4 = (char *)this + 48;
      if ((v2 & 0x80) != 0)
      {
        v4 = (char *)*((_QWORD *)this + 6);
        v2 = *((_QWORD *)this + 7);
      }
      if (v3 >= (CGPoint *)&v4[v2])
        break;
      TI::CP::Path::append(this, *v3, v3[1].y, v3[1].x, -1.0, 0.0);
      v3 += 2;
      v2 = *((unsigned __int8 *)this + 71);
    }
  }
  return this;
}

void **TI::CP::PathEncoder::encode_path(TI::CP::PathEncoder *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD v11[10];
  char v12;
  _BYTE v13[168];
  int8x16_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 71) < 0)
    v2 = *((_QWORD *)this + 7);
  else
    v2 = *((unsigned __int8 *)this + 71);
  v3 = (void **)((char *)this + 48);
  if (!v2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v10);
    v4 = *(_QWORD *)this;
    v5 = *((_QWORD *)this + 1);
    if (*(_QWORD *)this != v5)
    {
      do
      {
        *(_OWORD *)&v13[152] = *(_OWORD *)v4;
        v14 = vextq_s8(*(int8x16_t *)(v4 + 16), *(int8x16_t *)(v4 + 16), 8uLL);
        std::ostream::write();
        v4 += 48;
      }
      while (v4 != v5);
    }
    std::stringbuf::str[abi:nn180100]<std::allocator<char>>(&v8, (uint64_t)v11);
    if (*((char *)this + 71) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = v8;
    *((_QWORD *)this + 8) = v9;
    v10[0] = *MEMORY[0x1E0DE4F50];
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v10[2] = v6;
    v11[0] = MEMORY[0x1E0DE4FB8] + 16;
    if (v12 < 0)
      operator delete((void *)v11[8]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1DF0A20F0](v13);
  }
  return v3;
}

uint64_t PatternState::reset(uint64_t this)
{
  *(_QWORD *)(this + 208) = 0;
  return this;
}

size_t PatternState::init(PatternState *this, const char *a2)
{
  size_t result;
  int v4;
  uint64_t v5;
  unsigned int v6;

  *((_QWORD *)this + 26) = 0;
  result = strlcpy((char *)this, a2, 0x29uLL);
  *((_DWORD *)this + 11) = -1;
  v4 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v5 = 0;
    v6 = -1;
    do
    {
      for (; (v6 & 0x80000000) == 0; v6 = *((_DWORD *)this + v6 + 11))
      {
        if (v4 == *((unsigned __int8 *)this + v6))
          break;
      }
      *((_DWORD *)this + ++v5 + 11) = ++v6;
      v4 = *((unsigned __int8 *)this + v5);
    }
    while (*((_BYTE *)this + v5));
  }
  return result;
}

uint64_t PatternState::foundAtNextChar(PatternState *this, unsigned __int8 a2)
{
  unsigned int i;
  uint64_t v3;

  for (i = *((_DWORD *)this + 52); (i & 0x80000000) == 0; *((_DWORD *)this + 52) = i)
  {
    if (*((unsigned __int8 *)this + i) == a2)
      break;
    i = *((_DWORD *)this + i + 11);
  }
  v3 = (int)i + 1;
  *((_DWORD *)this + 52) = v3;
  if (*((_BYTE *)this + v3))
    return 0;
  ++*((_DWORD *)this + 53);
  *((_DWORD *)this + 52) = *((_DWORD *)this + v3 + 11);
  return 1;
}

uint64_t PatternList::init(PatternList *this, const char **a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  *((_DWORD *)this + 2) = a3;
  v6 = *(_QWORD *)this;
  if (v6)
    MEMORY[0x1DF0A212C](v6, 0x1000C809243D869);
  is_mul_ok(a3, 0xD8uLL);
  result = operator new[]();
  *(_QWORD *)this = result;
  if (a3 >= 1)
  {
    v8 = 0;
    v9 = 216 * a3;
    do
    {
      v10 = *a2++;
      result = PatternState::init((PatternState *)(*(_QWORD *)this + v8), v10);
      v8 += 216;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t PatternList::foundAtNextChar(PatternList *this, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*((int *)this + 2) < 1)
    return 0xFFFFFFFFLL;
  v4 = 0;
  v5 = 0;
  LODWORD(v6) = -1;
  do
  {
    if (PatternState::foundAtNextChar((PatternState *)(*(_QWORD *)this + v4), a2))
      v6 = v5;
    else
      v6 = v6;
    ++v5;
    v4 += 216;
  }
  while (v5 < *((int *)this + 2));
  return v6;
}

unsigned int *PatternList::reset(unsigned int *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = this[2];
  if ((int)v1 >= 1)
  {
    v2 = (_QWORD *)(*(_QWORD *)this + 208);
    do
    {
      *v2 = 0;
      v2 += 27;
      --v1;
    }
    while (v1);
  }
  return this;
}

void KB::CandidateFilter_Indic::~CandidateFilter_Indic(KB::CandidateFilter_Indic *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::CandidateFilter_Indic::filter_description(KB::CandidateFilter_Indic *this)
{
  return "CandidateFilter_Indic";
}

uint64_t KB::CandidateFilter_Indic::filter_candidates(KB::CandidateFilter_Indic *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  const KB::String *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __CFString *v10;
  const KB::String *v11;
  unsigned int v12;
  KB::Candidate *v13;
  uint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  const KB::String *v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  BOOL v26;
  KB::Candidate *v27;
  _BOOL8 v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __CFString *v37;
  _BOOL8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  _WORD v41[3];
  char v42;
  void *v43;
  uint64_t v44;
  _WORD v45[3];
  char v46;
  void *v47;
  _QWORD v48[4];

  v48[2] = *MEMORY[0x1E0C80C00];
  v6 = (KB::Candidate *)((char *)*a2 + 888);
  if (!*(_WORD *)v6)
    KB::Candidate::compute_string(*a2);
  result = string_has_diacritics(v6);
  if ((_DWORD)result)
  {
    v8 = *((_QWORD *)a4 + 2);
    if (v8)
    {
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v39, *(_QWORD *)(v8 + 8) + 112);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v8);
    v10 = (__CFString *)*((_QWORD *)a4 + 7);
    v11 = (KB::Candidate *)((char *)*a2 + 888);
    if (!*(_WORD *)v11)
      KB::Candidate::compute_string(*a2);
    v12 = count_diacritics(v11);
    v38 = KB::Candidate::sort_key(*a2, (uint64_t)v39);
    v13 = *a2;
    v14 = (uint64_t *)a2[1];
    v15 = 0x1CAC083126E978D5 * (((char *)v14 - (char *)*a2) >> 3);
    if (v15 >= 2)
    {
      v37 = v10;
      v16 = 0;
      v17 = 1;
      do
      {
        v18 = (_QWORD *)((char *)v13 + 1000 * v17);
        if (!*((_WORD *)v18 + 444))
          KB::Candidate::compute_string((KB::Candidate *)((char *)v13 + 1000 * v17));
        v19 = count_diacritics((const KB::String *)(v18 + 111));
        if (v19 < v12)
        {
          v20 = v19;
          if (KB::Candidate::should_suggest((KB::Candidate *)v18))
          {
            if (!*v18)
              goto LABEL_22;
            v22 = 240 * *v18 - 240;
            v23 = (int *)(v18[1] + 120);
            do
            {
              v25 = *v23;
              v23 += 60;
              v24 = v25;
              if (v25)
                v26 = 1;
              else
                v26 = v22 == 0;
              v22 -= 240;
            }
            while (!v26);
            if (!v24)
            {
LABEL_22:
              v27 = *a2;
              if (!*((_WORD *)*a2 + 444))
                KB::Candidate::compute_string(*a2);
              if (!*((_WORD *)v18 + 444))
                KB::Candidate::compute_string((KB::Candidate *)v18);
              if (KB::strings_have_spaces_in_same_positions((KB::Candidate *)((char *)v27 + 888), (const KB::String *)(v18 + 111), v21))
              {
                v28 = KB::Candidate::sort_key((KB::Candidate *)v18, (uint64_t)v39);
                if (KB::operator==((unsigned __int16 *)v28, (unsigned __int16 *)v38))
                {
                  v16 = v17;
                  v12 = v20;
                }
              }
            }
          }
        }
        v17 = (v17 + 1);
        v13 = *a2;
        v14 = (uint64_t *)a2[1];
        v15 = 0x1CAC083126E978D5 * (((char *)v14 - (char *)*a2) >> 3);
      }
      while (v15 > v17);
      if (v16)
      {
        *((_DWORD *)v13 + 250 * v16 + 186) = 0;
        if (v37)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)((char *)v13 + 1000 * v16), (uint64_t)v45);
          v29 = (const char *)v47;
          if (!v47)
            v29 = (const char *)v48;
          if (v45[0])
            v30 = v29;
          else
            v30 = "";
          KB::Candidate::capitalized_string(*a2, (uint64_t)v41);
          v32 = (const char *)v43;
          if (!v43)
            v32 = (const char *)&v44;
          if (v41[0])
            v33 = v32;
          else
            v33 = "";
          KB::append_format(v37, (__CFString *)"[%s] boosted over [%s] by %s\n", v31, v30, v33, "boost_word_with_minimum_diacritics");
          if (v43 && v42 == 1)
            free(v43);
          if (v47 && v46 == 1)
            free(v47);
          v13 = *a2;
          v14 = (uint64_t *)a2[1];
          v15 = 0x1CAC083126E978D5 * (((char *)v14 - (char *)*a2) >> 3);
        }
      }
    }
    v34 = 126 - 2 * __clz(v15);
    if (v14 == (uint64_t *)v13)
      v35 = 0;
    else
      v35 = v34;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KB::Candidate *,false>((unint64_t)v13, v14, v35, 1);
    result = (uint64_t)v40;
    if (v40 == v39)
    {
      v36 = 4;
      result = (uint64_t)v39;
    }
    else
    {
      if (!v40)
        return result;
      v36 = 5;
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v36))();
  }
  return result;
}

BOOL string_has_diacritics(const KB::String *a1)
{
  unsigned int v1;
  unsigned int v2;
  UChar32 v3;
  BOOL v4;
  unsigned __int16 v6[2];
  unsigned __int16 v7;
  char v8;
  void *v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v6, a1);
  v10 = 0;
  do
  {
    v1 = HIWORD(v10);
    v2 = v7;
    if (!v7)
    {
      KB::String::compute_length(v6);
      v2 = v7;
    }
    if (v1 >= v2)
      break;
    v3 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v6);
  }
  while (!character_is_diacritic_or_has_diacritics(v3));
  if (v9)
    v4 = v8 == 1;
  else
    v4 = 0;
  if (v4)
    free(v9);
  return v1 < v2;
}

uint64_t count_diacritics(const KB::String *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  UChar32 v4;
  BOOL v5;
  unsigned __int16 v7[2];
  unsigned __int16 v8;
  char v9;
  void *v10;
  int i;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, a1);
  v1 = 0;
  v2 = 0;
  for (i = 0; ; v1 = HIWORD(i))
  {
    v3 = v8;
    if (!v8)
    {
      KB::String::compute_length(v7);
      v3 = v8;
    }
    if (v1 >= v3)
      break;
    v4 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v7);
    v2 = (v2 + character_is_diacritic_or_has_diacritics(v4));
  }
  if (v10)
    v5 = v9 == 1;
  else
    v5 = 0;
  if (v5)
    free(v10);
  return v2;
}

BOOL character_is_diacritic_or_has_diacritics(UChar32 a1)
{
  uint64_t v2;

  v2 = 1;
  if (!u_getIntPropertyValue(a1, UCHAR_TRAIL_CANONICAL_COMBINING_CLASS))
    return ((1 << u_charType(a1)) & 0x4000050) != 0;
  return v2;
}

BOOL search_result_preserves_diacritics_of_input_string(const KB::String *a1, const KB::String *this)
{
  unsigned int v4;
  BOOL v5;
  unsigned int i;
  UChar32 v7;
  int v8;
  UChar32 v9;
  int v10;
  _BYTE v12[8];
  void *v13;
  int v14;
  _BYTE v15[8];
  void *v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)this + 2);
  if (!*((_WORD *)this + 2))
  {
    KB::String::compute_length((unsigned __int16 *)this);
    v4 = *((unsigned __int16 *)this + 2);
  }
  KB::String::String((KB::String *)v15, a1);
  v17 = 0;
  KB::String::String((KB::String *)v12, this);
  v14 = 0;
  if (v4)
  {
    v5 = 0;
    for (i = 0; i != v4; v5 = i >= v4)
    {
      v7 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v12);
      v8 = u_charType(v7);
      do
      {
        v9 = KB::UTF8Iterator::next((KB::UTF8Iterator *)v15);
        v10 = u_charType(v9);
      }
      while (v8 != 6 && v10 == 6);
      if (v8 == 6 && v7 != v9 && (v7 != 2306 || v9 != 2305))
        break;
      ++i;
    }
  }
  else
  {
    v5 = 1;
  }
  if (v13 && v12[6] == 1)
    free(v13);
  if (v16 && v15[6] == 1)
    free(v16);
  return v5;
}

void TI::CP::ContextualShapeRecognizer::~ContextualShapeRecognizer(TI::CP::ContextualShapeRecognizer *this)
{
  TI::CP::ContextualShapeRecognizer::~ContextualShapeRecognizer(this);
  JUMPOUT(0x1DF0A2144);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1EA102548;
  v2 = (_QWORD *)*((_QWORD *)this + 38);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v4)
    operator delete(v4);
  TI::CP::ShapeStore::~ShapeStore((char **)this + 26);
  v5 = (void *)*((_QWORD *)this + 23);
  if (v5)
  {
    *((_QWORD *)this + 24) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 20);
  if (v6)
  {
    *((_QWORD *)this + 21) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 17);
  if (v7)
  {
    *((_QWORD *)this + 18) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 9) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 6) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 3) = v11;
    operator delete(v11);
  }
  *(_QWORD *)this = off_1EA1056B8;
  v12 = *((_QWORD *)this + 1);
  if (v12)
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v12);
}

uint64_t TI::CP::ContextualShapeRecognizer::get_recognizer_type(TI::CP::ContextualShapeRecognizer *this)
{
  return 2;
}

uint64_t TI::CP::ContextualShapeRecognizer::recognitionSources(TI::CP::ContextualShapeRecognizer *this)
{
  return 4;
}

void TI::CP::ContextualShapeRecognizer::add_touch(uint64_t a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v12;
  void *v13[3];
  void *__p;
  void *v15;
  CGPoint v16;
  CGPoint v17;

  if (!a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v16.x = a3;
  v16.y = a4;
  TI::CP::PathReducer::append((TI::CP::PathReducer *)(a1 + 120), v16, a5, a6);
  v17.x = a3;
  v17.y = a4;
  TI::CP::Path::append((TI::CP::Path *)(a1 + 16), v17, a5, a6, -1.0, 0.0);
  if (a2 == 2)
  {
    TI::CP::PathReducer::finalize((TI::CP::PathReducer *)(a1 + 120));
    v12 = *(_QWORD *)(a1 + 144);
    if (*(_QWORD *)(a1 + 136) != v12 && *(double *)(v12 - 16) > 20.0)
    {
      TI::CP::PathReducer::reduced_path((TI::CP::PathReducer *)(a1 + 120), 13.0, (TI::CP::Path *)v13);
      TI::CP::Path::operator=((char **)(a1 + 64), (const void **)v13);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      if (v13[0])
      {
        v13[1] = v13[0];
        operator delete(v13[0]);
      }
    }
  }
  *(_DWORD *)(a1 + 112) = a2;
}

uint64_t TI::CP::ContextualShapeRecognizer::touch_stage(TI::CP::ContextualShapeRecognizer *this)
{
  return *((unsigned int *)this + 28);
}

double TI::CP::ContextualShapeRecognizer::last_touch(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) == v1)
    v2 = MEMORY[0x1E0C9D538];
  else
    v2 = v1 - 48;
  return *(double *)v2;
}

uint64_t TI::CP::ContextualShapeRecognizer::reset_path(uint64_t this)
{
  *(_QWORD *)(this + 192) = *(_QWORD *)(this + 184);
  *(_QWORD *)(this + 144) = *(_QWORD *)(this + 136);
  *(_QWORD *)(this + 168) = *(_QWORD *)(this + 160);
  *(_QWORD *)(this + 24) = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 48) = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 72) = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 96) = *(_QWORD *)(this + 88);
  *(_DWORD *)(this + 112) = 7;
  return this;
}

double TI::CP::ContextualShapeRecognizer::path_length(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 2) == v1)
    return 0.0;
  else
    return *(double *)(v1 - 16);
}

void TI::CP::ContextualShapeRecognizer::generate_candidates(uint64_t a1, uint64_t *a2, int a3, double a4, __n128 a5)
{
  int *v7;
  int *v8;
  const __CFAllocator *v9;
  double v10;
  double v11;
  float v12;
  KB::Candidate *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  __CFDictionary *Mutable;
  CFNumberRef v23;
  CFNumberRef v24;
  int *v25;
  void *v26;
  void *v27;
  void *__p;
  int *v29;
  _BYTE v30[744];
  float v31;
  _BYTE v32[8];
  void *v33;
  double v34;
  int v35;
  double valuePtr;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 328))
  {
    a4 = *(double *)(*(_QWORD *)(a1 + 16) + 16);
    *(_BYTE *)(a1 + 272) = 1;
    *(double *)(a1 + 264) = a4;
  }
  TI::CP::ContextualShapeRecognizer::hypotheses_for_path((TI::CP::ContextualShapeRecognizer *)a1, (__n128 **)(a1 + 64), (unint64_t *)&__p, a4, a5);
  v7 = (int *)__p;
  v8 = v29;
  if (v29 != __p)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      KB::String::String((KB::String *)v32, (const KB::String *)v7);
      v10 = *((double *)v7 + 4);
      v35 = v7[10];
      v34 = v10;
      v11 = v10;
      KB::String::String((KB::String *)&valuePtr, (const KB::String *)v32);
      KB::Candidate::Candidate((KB::Candidate *)v30, (const KB::String *)&valuePtr, 0);
      if (v37 && BYTE6(valuePtr) == 1)
        free(v37);
      v12 = fmin(1.0 / (v11 / 100.0), 1.0);
      v31 = logf(v12);
      v13 = (KB::Candidate *)a2[1];
      v14 = a2[2];
      if ((unint64_t)v13 >= v14)
      {
        v16 = 0x1CAC083126E978D5 * (((uint64_t)v13 - *a2) >> 3);
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) > 0x4189374BC6A7EFLL)
          abort();
        v18 = 0x1CAC083126E978D5 * ((uint64_t)(v14 - *a2) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x20C49BA5E353F7)
          *(double *)&v19 = 1.95094476e-307;
        else
          v19 = v17;
        v40 = a2 + 2;
        if (*(double *)&v19 == 0.0)
          v20 = 0;
        else
          *(double *)&v19 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v19));
        v21 = (char *)(v19 + 1000 * v16);
        valuePtr = *(double *)&v19;
        v37 = v21;
        v39 = v19 + 1000 * v20;
        KB::Candidate::Candidate((KB::Candidate *)v21, (const KB::Candidate *)v30);
        v38 = v21 + 1000;
        std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &valuePtr);
        v15 = (char *)a2[1];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
      }
      else
      {
        v15 = (char *)KB::Candidate::Candidate(v13, (const KB::Candidate *)v30) + 1000;
      }
      a2[1] = (uint64_t)v15;
      if (a3 >= 1)
      {
        Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        valuePtr = (double)v35;
        v23 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
        CFDictionarySetValue(Mutable, CFSTR("num_records"), v23);
        if (v23)
          CFRelease(v23);
        valuePtr = v12;
        v24 = CFNumberCreate(v9, kCFNumberDoubleType, &valuePtr);
        CFDictionarySetValue(Mutable, CFSTR("final_score"), v24);
        if (v24)
          CFRelease(v24);
        CFDictionarySetValue(Mutable, CFSTR("source"), CFSTR("shapematching"));
        KB::Candidate::add_sources_info((KB::Candidate *)v30, CFSTR("shapematching"), Mutable);
        if (Mutable)
          CFRelease(Mutable);
      }
      KB::Candidate::~Candidate((KB::Candidate *)v30);
      if (v33 && v32[6] == 1)
        free(v33);
      v7 += 12;
    }
    while (v7 != v8);
    v8 = (int *)__p;
  }
  if (v8)
  {
    v25 = v29;
    v26 = v8;
    if (v29 != v8)
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 5);
        if (v27)
        {
          if (*((_BYTE *)v25 - 42) == 1)
            free(v27);
        }
        v25 -= 12;
      }
      while (v25 != v8);
      v26 = __p;
    }
    v29 = v8;
    operator delete(v26);
  }
}

void TI::CP::ContextualShapeRecognizer::text_accepted_from_UI(TI::CP::ContextualShapeRecognizer *this, const KB::String *a2, const KB::String *a3, unsigned int a4, int a5)
{
  BOOL v9;
  int v10;
  _QWORD *v11;
  int v12;
  const char *v13;
  const char *v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  int v25;
  unsigned __int16 v26[3];
  char v27;
  _QWORD *v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 9))
  {
    KB::String::String((KB::String *)&v23, " \t\n");
    KB::String::trim(a2, (const KB::String *)&v23, (uint64_t)v26);
    if (v24)
      v9 = BYTE6(v23) == 1;
    else
      v9 = 0;
    if (v9)
      free(v24);
    KB::String::String((KB::String *)&v23, " ");
    KB::String::find_last_of((KB::String *)&v19, (const KB::String *)v26, (const KB::String *)&v23);
    if (v24 && BYTE6(v23) == 1)
      free(v24);
    v10 = v26[0];
    if (v28)
      v11 = v28;
    else
      v11 = v29;
    v23 = v11;
    LODWORD(v24) = v26[0];
    HIDWORD(v24) = v26[0];
    v25 = 0;
    KB::String::iterator::initialize((uint64_t *)&v23);
    if (DWORD2(v19) != (_DWORD)v24)
    {
      *(_OWORD *)v21 = v19;
      v22 = v20;
      KB::String::iterator::operator++((uint64_t *)v21);
      v15 = v11;
      v16 = v10;
      v17 = v10;
      v18 = 0;
      KB::String::iterator::initialize((uint64_t *)&v15);
      KB::String::String((KB::String *)&v23, (const KB::String::iterator *)v21, (const KB::String::iterator *)&v15);
      KB::String::operator=((uint64_t)v26, (KB::String *)&v23);
      if (v24)
      {
        if (BYTE6(v23) == 1)
          free(v24);
      }
    }
    KB::String::String((KB::String *)v21, " \t\n");
    KB::String::trim(a3, (const KB::String *)v21, (uint64_t)&v23);
    if (v21[1] && BYTE6(v21[0]) == 1)
      free(v21[1]);
    if (a5)
      v12 = 8;
    else
      v12 = 2;
    if ((_WORD)v23)
    {
      v13 = (const char *)(v28 ? v28 : v29);
      v14 = *((_QWORD *)a3 + 1) ? (const char *)*((_QWORD *)a3 + 1) : (char *)a3 + 16;
      if (strcmp(v13, v14))
      {
        (*(void (**)(TI::CP::ContextualShapeRecognizer *, _QWORD **))(*(_QWORD *)this + 96))(this, &v23);
        v12 = 1;
      }
    }
    if (*((int *)this + 70) <= 9999)
      TI::CP::ContextualShapeRecognizer::store_path_with_correct_word((uint64_t)this, v26, v12);
    *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
    *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
    if (v24 && BYTE6(v23) == 1)
      free(v24);
    if (v28)
    {
      if (v27 == 1)
        free(v28);
    }
  }
}

void TI::CP::ContextualShapeRecognizer::remove_text_usage(int8x8_t *this, const KB::String *a2)
{
  char *v4;
  char *v5;
  int8x8_t *v6;
  unsigned __int8 *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unsigned __int8 *v11;
  int8x8_t *v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  _BYTE v19[8];
  void *v20;
  unsigned __int8 *v21;
  void *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v19, " \t\n");
  KB::String::trim(a2, (const KB::String *)v19, (uint64_t)&v21);
  v4 = (char *)v22;
  if (!v22)
    v4 = &v23;
  if ((_WORD)v21)
    v5 = v4;
  else
    v5 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v5);
  if (v22 && BYTE6(v21) == 1)
    free(v22);
  if (v20 && v19[6] == 1)
    free(v20);
  v6 = this + 36;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::find<std::string>(&this[36], (uint64_t)__p);
  if (v7)
  {
    v8 = this[37];
    v9 = *((_QWORD *)v7 + 1);
    v10 = (uint8x8_t)vcnt_s8(v8);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v8)
        v9 %= *(_QWORD *)&v8;
    }
    else
    {
      v9 &= *(_QWORD *)&v8 - 1;
    }
    v11 = *(unsigned __int8 **)(*(_QWORD *)v6 + 8 * v9);
    do
    {
      v12 = (int8x8_t *)v11;
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11 != v7);
    if (v12 == &this[38])
      goto LABEL_30;
    v13 = (unint64_t)v12[1];
    if (v10.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v8)
        v13 %= *(_QWORD *)&v8;
    }
    else
    {
      v13 &= *(_QWORD *)&v8 - 1;
    }
    if (v13 != v9)
    {
LABEL_30:
      if (!*(_QWORD *)v7)
        goto LABEL_31;
      v14 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v14 >= *(_QWORD *)&v8)
          v14 %= *(_QWORD *)&v8;
      }
      else
      {
        v14 &= *(_QWORD *)&v8 - 1;
      }
      if (v14 != v9)
LABEL_31:
        *(_QWORD *)(*(_QWORD *)v6 + 8 * v9) = 0;
    }
    v15 = *(int8x8_t *)v7;
    if (*(_QWORD *)v7)
    {
      v16 = *(_QWORD *)(*(_QWORD *)&v15 + 8);
      if (v10.u32[0] > 1uLL)
      {
        if (v16 >= *(_QWORD *)&v8)
          v16 %= *(_QWORD *)&v8;
      }
      else
      {
        v16 &= *(_QWORD *)&v8 - 1;
      }
      if (v16 != v9)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8 * v16) = v12;
        v15 = *(int8x8_t *)v7;
      }
    }
    *v12 = v15;
    *(_QWORD *)v7 = 0;
    --*(_QWORD *)&this[39];
    v21 = v7;
    v22 = &this[38];
    v23 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100]((uint64_t)&v21);
  }
  if (v18 < 0)
    operator delete(__p[0]);
}

void TI::CP::ContextualShapeRecognizer::store_shapes(TI::CP::ContextualShapeRecognizer *this)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void ***v22;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v2 = (uint64_t **)*((_QWORD *)this + 38);
  if (v2)
  {
    do
    {
      if (((_DWORD)v2[20] & 9) != 0)
        v3 = (uint64_t *)&v16;
      else
        v3 = &v19;
      std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100](v3, (uint64_t)(v2 + 5));
      v2 = (uint64_t **)*v2;
    }
    while (v2);
    v4 = v19;
    v5 = v16;
    v6 = v17;
    v7 = 0xF0F0F0F0F0F0F0F1 * ((v20 - v19) >> 3);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    LODWORD(v7) = 0;
  }
  if ((int)v7 >= 1)
  {
    v8 = (int)(float)(*((float *)this + 60) * (float)(int)v7);
    if (0xF0F0F0F0F0F0F0F1 * (v6 - v5) < v8)
    {
      v9 = v7;
      do
      {
        v10 = v4 + 136 * (int)arc4random_uniform(v9);
        std::vector<TI::CP::ShapeRecord>::push_back[abi:nn180100]((uint64_t *)&v16, v10);
        v11 = v4 + 136 * (v9 - 1);
        *(_DWORD *)v10 = *(_DWORD *)v11;
        std::string::operator=((std::string *)(v10 + 8), (const std::string *)(v11 + 8));
        TI::CP::Path::operator=((char **)(v10 + 32), (const void **)(v11 + 32));
        std::string::operator=((std::string *)(v10 + 80), (const std::string *)(v11 + 80));
        v12 = *(_OWORD *)(v11 + 116);
        *(_OWORD *)(v10 + 104) = *(_OWORD *)(v11 + 104);
        *(_OWORD *)(v10 + 116) = v12;
        v5 = v16;
        v6 = v17;
        if (v9 < 2)
          break;
        --v9;
      }
      while (0xF0F0F0F0F0F0F0F1 * (v17 - v16) < v8);
    }
  }
  if (v5 != v6)
  {
    v13 = *((_DWORD *)this + 70);
    v14 = v5 + 10;
    do
    {
      if (v13 <= 9999)
      {
        TI::CP::ShapeStore::store_shape((uint64_t)this + 208, (uint64_t *)v14 - 9, (const void **)v14, *((_DWORD *)v14 + 6), *((double *)v14 + 4));
        v13 = *((_DWORD *)this + 70) + 1;
        *((_DWORD *)this + 70) = v13;
      }
      v15 = v14 + 7;
      v14 += 17;
    }
    while (v15 != v6);
  }
  v22 = &v16;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100]((void ***)&v22);
  v16 = (void **)&v19;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](&v16);
}

uint64_t TI::CP::TIPathRecognizerInterface::usage_count(TI::CP::TIPathRecognizerInterface *this)
{
  return 0;
}

BOOL TI::CP::ContextualShapeRecognizer::remove_shapes_older_than(sqlite3 **this, double a2)
{
  return TI::CP::ShapeStore::remove_shapes_older_than(this + 26, a2);
}

void std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:nn180100]<TI::CP::ShapeRecord,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,TI::CP::ShapeRecord>,0>(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void TI::CP::ContextualShapeRecognizer::store_path_with_correct_word(uint64_t a1, unsigned __int16 *a2, int a3)
{
  unint64_t v3;
  const std::vector<unsigned int> *v5;
  char *v7;
  int v8;
  const std::string::value_type *v9;
  void *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *i;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  std::string *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  int8x8_t prime;
  void *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  void *v44;
  int v45;
  std::string v46;
  void *v47[3];
  void *v48;
  void *v49;
  std::string __p;
  _OWORD v51[2];
  void *v52[2];
  uint64_t v53;
  _QWORD v54[2];
  char v55;

  if (*a2 < 2u)
    return;
  v5 = (const std::vector<unsigned int> *)(a1 + 64);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 4) < 2)
    return;
  if (*((_QWORD *)a2 + 1))
    v7 = (char *)*((_QWORD *)a2 + 1);
  else
    v7 = (char *)(a2 + 8);
  std::string::basic_string[abi:nn180100]<0>(v52, v7);
  TI::CP::ShapeRecord::ShapeRecord((uint64_t)&v45, (__int128 *)v52, v5, a3);
  v8 = SHIBYTE(v53);
  v9 = (const std::string::value_type *)v52[0];
  v10 = v52[1];
  if (v53 >= 0)
    v11 = (uint64_t *)v52;
  else
    v11 = (uint64_t *)v52[0];
  if (v53 >= 0)
    v12 = HIBYTE(v53);
  else
    v12 = (unint64_t)v52[1];
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v11, v12);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 296);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      v3 = v13;
      if (v13 >= v15)
        v3 = v13 % v15;
    }
    else
    {
      v3 = (v15 - 1) & v13;
    }
    v18 = *(uint64_t ***)(*(_QWORD *)(a1 + 288) + 8 * v3);
    if (v18)
    {
      for (i = *v18; i; i = (uint64_t *)*i)
      {
        v20 = i[1];
        if (v20 == v14)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)v52))
            goto LABEL_88;
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15)
              v20 %= v15;
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v3)
            break;
        }
      }
    }
  }
  v21 = (_QWORD *)(a1 + 304);
  v22 = (char *)operator new(0xB0uLL);
  v54[0] = v22;
  v54[1] = a1 + 304;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v14;
  v23 = (std::string *)(v22 + 16);
  if (v8 < 0)
  {
    std::string::__init_copy_ctor_external(v23, v9, (std::string::size_type)v10);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)v52;
    *((_QWORD *)v22 + 4) = v53;
  }
  *((_QWORD *)v22 + 21) = 0;
  *(_OWORD *)(v22 + 152) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 104) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  v55 = 1;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 312) + 1);
  v25 = *(float *)(a1 + 320);
  if (!v15 || (float)(v25 * (float)v15) < v24)
  {
    v26 = 1;
    if (v15 >= 3)
      v26 = (v15 & (v15 - 1)) != 0;
    v27 = v26 | (2 * v15);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = (int8x8_t)v28;
    else
      prime = (int8x8_t)v27;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v15 = *(_QWORD *)(a1 + 296);
    if (*(_QWORD *)&prime > v15)
      goto LABEL_44;
    if (*(_QWORD *)&prime < v15)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 312) / *(float *)(a1 + 320));
      if (v15 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (*(_QWORD *)&prime <= v36)
        prime = (int8x8_t)v36;
      if (*(_QWORD *)&prime >= v15)
      {
        v15 = *(_QWORD *)(a1 + 296);
      }
      else
      {
        if (prime)
        {
LABEL_44:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v30 = operator new(8 * *(_QWORD *)&prime);
          v31 = *(void **)(a1 + 288);
          *(_QWORD *)(a1 + 288) = v30;
          if (v31)
            operator delete(v31);
          v32 = 0;
          *(int8x8_t *)(a1 + 296) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v32++) = 0;
          while (*(_QWORD *)&prime != v32);
          v33 = (_QWORD *)*v21;
          if (*v21)
          {
            v34 = v33[1];
            v35 = (uint8x8_t)vcnt_s8(prime);
            v35.i16[0] = vaddlv_u8(v35);
            if (v35.u32[0] > 1uLL)
            {
              if (v34 >= *(_QWORD *)&prime)
                v34 %= *(_QWORD *)&prime;
            }
            else
            {
              v34 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v34) = v21;
            v39 = (_QWORD *)*v33;
            if (*v33)
            {
              do
              {
                v40 = v39[1];
                if (v35.u32[0] > 1uLL)
                {
                  if (v40 >= *(_QWORD *)&prime)
                    v40 %= *(_QWORD *)&prime;
                }
                else
                {
                  v40 &= *(_QWORD *)&prime - 1;
                }
                if (v40 != v34)
                {
                  v41 = *(_QWORD *)(a1 + 288);
                  if (!*(_QWORD *)(v41 + 8 * v40))
                  {
                    *(_QWORD *)(v41 + 8 * v40) = v33;
                    goto LABEL_69;
                  }
                  *v33 = *v39;
                  *v39 = **(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v40);
                  **(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v40) = v39;
                  v39 = v33;
                }
                v40 = v34;
LABEL_69:
                v33 = v39;
                v39 = (_QWORD *)*v39;
                v34 = v40;
              }
              while (v39);
            }
          }
          v15 = (unint64_t)prime;
          goto LABEL_73;
        }
        v44 = *(void **)(a1 + 288);
        *(_QWORD *)(a1 + 288) = 0;
        if (v44)
          operator delete(v44);
        v15 = 0;
        *(_QWORD *)(a1 + 296) = 0;
      }
    }
LABEL_73:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v3 = v14 % v15;
      else
        v3 = v14;
    }
    else
    {
      v3 = (v15 - 1) & v14;
    }
  }
  v42 = *(_QWORD **)(*(_QWORD *)(a1 + 288) + 8 * v3);
  i = (uint64_t *)v54[0];
  if (v42)
  {
    *(_QWORD *)v54[0] = *v42;
  }
  else
  {
    *(_QWORD *)v54[0] = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 304) = i;
    *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v3) = v21;
    if (!*i)
      goto LABEL_87;
    v43 = *(_QWORD *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v43 >= v15)
        v43 %= v15;
    }
    else
    {
      v43 &= v15 - 1;
    }
    v42 = (_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v43);
  }
  *v42 = i;
LABEL_87:
  v54[0] = 0;
  ++*(_QWORD *)(a1 + 312);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,TI::CP::ShapeRecord>,void *>>>>::reset[abi:nn180100]((uint64_t)v54);
LABEL_88:
  *((_DWORD *)i + 10) = v45;
  std::string::operator=((std::string *)i + 2, &v46);
  TI::CP::Path::operator=((char **)i + 9, (const void **)v47);
  std::string::operator=((std::string *)i + 5, &__p);
  *((_OWORD *)i + 9) = v51[0];
  *(_OWORD *)((char *)i + 156) = *(_OWORD *)((char *)v51 + 12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
}

void TI::CP::ContextualShapeRecognizer::hypotheses_for_path(TI::CP::ContextualShapeRecognizer *this@<X0>, __n128 **a2@<X1>, unint64_t *a3@<X8>, double a4@<D0>, __n128 a5@<Q1>)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  float64x2_t *v17;
  float64x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  unsigned int v37;
  float64x2_t v38;
  double v39;
  char *v40;
  void *v41;
  void *v42;
  std::string *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v57;
  KB::String *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  double v66;
  KB::String *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  char *v82;
  char *v83;
  KB::String *v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void *__src;
  void *__p;
  _BYTE *v107;
  void **v108;
  std::string v109;
  void *v110;
  __n128 *v111;
  std::vector<unsigned int> v112;
  std::string v113;
  _OWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  void *v117;
  _BYTE *v118;
  char *v119;
  __int128 v120;
  char *v121;
  unint64_t *v122;
  char *v123;
  int64x2_t v124;
  char *v125;
  unint64_t *v126;
  _BYTE v127[8];
  void *v128;
  _BYTE v129[8];
  void *v130;
  double v131;
  int v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  shape_as_simd_double3((const TI::CP::Path *)&v117, *a2, a2[1], a4, a5);
  v8 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v9 = ((double)v8 * 1.4);
  if (v8 <= v9)
    v10 = 0;
  else
    v10 = v8 - v9;
  TI::CP::ShapeStore::recall_shapes((TI::CP::ContextualShapeRecognizer *)((char *)this + 208), v10, v9 - 1431655765 * (a2[1] - *a2), &v115);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v11 = v115;
  v12 = v116;
  if (v115 != v116)
  {
    v101 = a3 + 2;
    v99 = a3;
    v100 = v116;
    do
    {
      LODWORD(v108) = *(_DWORD *)v11;
      if (*(char *)(v11 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
      }
      else
      {
        v13 = *(_OWORD *)(v11 + 8);
        v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 24);
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v13;
      }
      std::vector<TI::CP::PathSample>::vector(&v110, v11 + 32);
      std::vector<unsigned int>::vector(&v112, (const std::vector<unsigned int> *)(v11 + 56));
      if (*(char *)(v11 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)(v11 + 80), *(_QWORD *)(v11 + 88));
      }
      else
      {
        v14 = *(_OWORD *)(v11 + 80);
        v113.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 96);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v14;
      }
      v15 = *(_OWORD *)(v11 + 104);
      *(_OWORD *)((char *)v114 + 12) = *(_OWORD *)(v11 + 116);
      v16 = *(__n128 *)((char *)v114 + 12);
      v114[0] = v15;
      shape_as_simd_double3((const TI::CP::Path *)&__p, (__n128 *)v110, v111, *(double *)&v15, v16);
      v17 = (float64x2_t *)v117;
      v18 = (float64x2_t *)__p;
      v19 = v118 - (_BYTE *)v117;
      if (v118 != v117 && v107 != __p)
      {
        v20 = v107 - (_BYTE *)__p;
        if (v107 - (_BYTE *)__p < 0)
          goto LABEL_125;
        v102 = v19 >> 5;
        v103 = v20 >> 5;
        __src = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v20 >> 5);
        memset_pattern16(__src, &unk_1DA911280, 8 * (v20 >> 5));
        if ((unint64_t)v19 >= 0x20)
        {
          if (v19 < 0)
            goto LABEL_125;
          v21 = (char *)operator new(24 * v102);
          v23 = 0;
          v24 = 8 * v103;
          v104 = (uint64_t)(8 * v103) >> 3;
          do
          {
            v25 = &v21[v23];
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = 0;
            if ((unint64_t)v20 >= 0x20)
            {
              if ((v24 & 0x8000000000000000) != 0)
                goto LABEL_125;
              v26 = v20;
              v27 = &v21[v23];
              v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v104);
              *(_QWORD *)v27 = v28;
              *((_QWORD *)v27 + 1) = v28;
              *((_QWORD *)v27 + 2) = &v28[8 * v29];
              memmove(v28, __src, v24);
              *((_QWORD *)v27 + 1) = &v28[8 * v104];
              v20 = v26;
            }
            v23 += 24;
          }
          while (24 * v102 != v23);
          a3 = v99;
          v12 = v100;
          v22 = &v21[24 * v102];
        }
        else
        {
          v21 = 0;
          v22 = 0;
        }
        if (__src)
          operator delete(__src);
        v30 = 0;
        v32 = v102;
        v31 = v103;
        if (v103 <= 1)
          v31 = 1;
        if (v102 <= 1)
          v32 = 1;
        do
        {
          v33 = 0;
          v34 = &v21[24 * (v30 - 1)];
          v35 = *(_QWORD *)&v21[24 * v30];
          do
          {
            if (v30)
            {
              v36 = *(double *)(*(_QWORD *)v34 + 8 * v33);
              if (v33)
              {
                v37 = v33 - 1;
                if (*(double *)(v35 + 8 * (v33 - 1)) < v36)
                  v36 = *(double *)(v35 + 8 * v37);
                if (*(double *)(*(_QWORD *)v34 + 8 * v37) < v36)
                  v36 = *(double *)(*(_QWORD *)v34 + 8 * v37);
              }
            }
            else if (v33)
            {
              v36 = fmin(*(double *)(v35 + 8 * (v33 - 1)), 0.0);
            }
            else
            {
              v36 = 0.0;
            }
            v38 = vsubq_f64(v17[2 * v30], v18[2 * v33]);
            *(double *)(v35 + 8 * v33++) = sqrt(vaddvq_f64(vmulq_f64(v38, v38))) + v36;
          }
          while (v31 != v33);
          ++v30;
        }
        while (v30 != v32);
        v39 = *(double *)(*(_QWORD *)&v21[24 * v102 - 24] + 8 * v103 - 8);
        if (v22 != v21)
        {
          v40 = v22;
          do
          {
            v42 = (void *)*((_QWORD *)v40 - 3);
            v40 -= 24;
            v41 = v42;
            if (v42)
            {
              *((_QWORD *)v22 - 2) = v41;
              operator delete(v41);
            }
            v22 = v40;
          }
          while (v40 != v21);
        }
        operator delete(v21);
        if (v39 < 440.0)
        {
          if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v109;
          else
            v43 = (std::string *)v109.__r_.__value_.__r.__words[0];
          KB::String::String((KB::String *)v127, (const char *)v43);
          KB::String::String((KB::String *)v129, (const KB::String *)v127);
          v131 = v39;
          if (v128 && v127[6] == 1)
            free(v128);
          v132 = -252645135 * ((unint64_t)(v116 - v115) >> 3);
          v44 = *a3;
          v45 = a3[1];
          if (*a3 == v45)
          {
            v46 = *a3;
          }
          else
          {
            v46 = *a3;
            while (*(double *)(v46 + 32) <= v131)
            {
              v46 += 48;
              if (v46 == v45)
              {
                v46 = a3[1];
                break;
              }
            }
          }
          v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v44) >> 4);
          if (v45 >= *v101)
          {
            v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 4) + 1;
            if (v61 > 0x555555555555555)
LABEL_125:
              abort();
            if (0x5555555555555556 * ((uint64_t)(*v101 - v44) >> 4) > v61)
              v61 = 0x5555555555555556 * ((uint64_t)(*v101 - v44) >> 4);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v101 - v44) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v62 = 0x555555555555555;
            else
              v62 = v61;
            v122 = v101;
            if (v62)
            {
              v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(v62);
            }
            else
            {
              v64 = 0;
              v63 = 0;
            }
            v67 = (KB::String *)&v64[16 * ((uint64_t)(v46 - v44) >> 4)];
            v119 = v64;
            *(_QWORD *)&v120 = v67;
            *((_QWORD *)&v120 + 1) = v67;
            v121 = &v64[48 * v63];
            if (v47 == v63)
            {
              if ((uint64_t)(v46 - v44) < 1)
              {
                v69 = v11;
                if (v46 == v44)
                  v70 = 1;
                else
                  v70 = 0x5555555555555556 * ((uint64_t)(v46 - v44) >> 4);
                v71 = v70 >> 2;
                v126 = v122;
                v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<TI::CP::PathSample>>(v70);
                v74 = v73;
                v75 = &v72[48 * v71];
                v76 = v120;
                if (*((_QWORD *)&v120 + 1) == (_QWORD)v120)
                {
                  v81 = vdupq_n_s64(v120);
                  v77 = v75;
                }
                else
                {
                  v77 = &v75[*((_QWORD *)&v120 + 1) - v120];
                  v78 = (uint64_t)v75;
                  do
                  {
                    *(_DWORD *)v78 = 0x100000;
                    *(_WORD *)(v78 + 4) = 0;
                    *(_BYTE *)(v78 + 6) = 0;
                    *(_QWORD *)(v78 + 8) = 0;
                    v79 = KB::String::operator=(v78, (KB::String *)v76);
                    v80 = *(_QWORD *)(v76 + 32);
                    *(_DWORD *)(v79 + 40) = *(_DWORD *)(v76 + 40);
                    *(_QWORD *)(v79 + 32) = v80;
                    v76 += 48;
                    v78 = v79 + 48;
                  }
                  while ((char *)v78 != v77);
                  v81 = (int64x2_t)v120;
                }
                v82 = v119;
                v83 = v121;
                v119 = v72;
                *(_QWORD *)&v120 = v75;
                v124 = v81;
                *((_QWORD *)&v120 + 1) = v77;
                v121 = &v72[48 * v74];
                v123 = v82;
                v125 = v83;
                std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer((uint64_t)&v123);
                v67 = (KB::String *)*((_QWORD *)&v120 + 1);
                v11 = v69;
                v12 = v100;
              }
              else
              {
                v68 = v47 + 2;
                if (v47 >= -1)
                  v68 = v47 + 1;
                v67 = (KB::String *)((char *)v67 - 48 * (v68 >> 1));
                *(_QWORD *)&v120 = v67;
                *((_QWORD *)&v120 + 1) = v67;
              }
            }
            v84 = KB::String::String(v67, (const KB::String *)v129);
            v85 = v131;
            *((_DWORD *)v84 + 10) = v132;
            *((double *)v84 + 4) = v85;
            v86 = v120;
            v87 = *((_QWORD *)&v120 + 1) + 48;
            *((_QWORD *)&v120 + 1) += 48;
            v88 = *a3;
            if (*a3 != v46)
            {
              v89 = v11;
              v90 = 0;
              do
              {
                *(_DWORD *)(v86 + v90 - 48) = 0x100000;
                v91 = v86 + v90 - 48;
                *(_WORD *)(v91 + 4) = 0;
                *(_BYTE *)(v91 + 6) = 0;
                *(_QWORD *)(v91 + 8) = 0;
                v92 = KB::String::operator=(v91, (KB::String *)(v46 + v90 - 48));
                v93 = *(_QWORD *)(v46 + v90 - 16);
                *(_DWORD *)(v92 + 40) = *(_DWORD *)(v46 + v90 - 8);
                *(_QWORD *)(v92 + 32) = v93;
                v90 -= 48;
              }
              while (v46 + v90 != v88);
              v86 += v90;
              v87 = *((_QWORD *)&v120 + 1);
              v11 = v89;
            }
            *(_QWORD *)&v120 = v86;
            v94 = a3[1];
            if (v94 != v46)
            {
              do
              {
                *(_DWORD *)v87 = 0x100000;
                *(_WORD *)(v87 + 4) = 0;
                *(_BYTE *)(v87 + 6) = 0;
                *(_QWORD *)(v87 + 8) = 0;
                v95 = KB::String::operator=(v87, (KB::String *)v46);
                v96 = *(_QWORD *)(v46 + 32);
                *(_DWORD *)(v95 + 40) = *(_DWORD *)(v46 + 40);
                *(_QWORD *)(v95 + 32) = v96;
                v46 += 48;
                v87 = v95 + 48;
              }
              while (v46 != v94);
              v86 = v120;
              v46 = a3[1];
            }
            v97 = *a3;
            *a3 = v86;
            a3[1] = v87;
            v98 = (char *)a3[2];
            a3[2] = (unint64_t)v121;
            *((_QWORD *)&v120 + 1) = v46;
            v121 = v98;
            v119 = (char *)v97;
            *(_QWORD *)&v120 = v97;
            std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer((uint64_t)&v119);
          }
          else if (v46 == v45)
          {
            KB::String::String((KB::String *)a3[1], (const KB::String *)v129);
            v65 = v44 + 16 * ((uint64_t)(v46 - v44) >> 4);
            v66 = v131;
            *(_DWORD *)(v65 + 40) = v132;
            *(double *)(v65 + 32) = v66;
            a3[1] = v45 + 48;
          }
          else
          {
            v48 = v11;
            v49 = v45 - 48;
            v50 = a3[1];
            v51 = v45 - 48;
            if (v45 >= 0x30)
            {
              do
              {
                *(_DWORD *)v50 = 0x100000;
                *(_WORD *)(v50 + 4) = 0;
                *(_BYTE *)(v50 + 6) = 0;
                *(_QWORD *)(v50 + 8) = 0;
                v52 = KB::String::operator=(v50, (KB::String *)v51);
                v53 = *(_QWORD *)(v51 + 32);
                *(_DWORD *)(v52 + 40) = *(_DWORD *)(v51 + 40);
                *(_QWORD *)(v52 + 32) = v53;
                v51 += 48;
                v50 = v52 + 48;
              }
              while (v51 < v45);
            }
            a3[1] = v50;
            if (v45 != v46 + 48)
            {
              v54 = 16 * ((uint64_t)(v45 - (v46 + 48)) >> 4);
              do
              {
                KB::String::operator=(v49, (KB::String *)(v46 + v54 - 48));
                v55 = *(_QWORD *)(v46 + v54 - 16);
                *(_DWORD *)(v49 + 40) = *(_DWORD *)(v46 + v54 - 8);
                *(_QWORD *)(v49 + 32) = v55;
                v49 -= 48;
                v54 -= 48;
              }
              while (v54);
            }
            v57 = v46 <= (unint64_t)v129 && a3[1] > (unint64_t)v129;
            v58 = (KB::String *)&v129[48 * v57];
            KB::String::operator=((KB::String *)v46, v58);
            v59 = *((_QWORD *)v58 + 4);
            v60 = v44 + 16 * ((uint64_t)(v46 - v44) >> 4);
            *(_DWORD *)(v60 + 40) = *((_DWORD *)v58 + 10);
            *(_QWORD *)(v60 + 32) = v59;
            v11 = v48;
            v12 = v100;
          }
          if (v130 && v129[6] == 1)
            free(v130);
          v18 = (float64x2_t *)__p;
        }
      }
      if (v18)
        operator delete(v18);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (v112.__begin_)
      {
        v112.__end_ = v112.__begin_;
        operator delete(v112.__begin_);
      }
      if (v110)
      {
        v111 = (__n128 *)v110;
        operator delete(v110);
      }
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v11 += 136;
    }
    while (v11 != v12);
  }
  v108 = (void **)&v115;
  std::vector<TI::CP::ShapeRecord>::__destroy_vector::operator()[abi:nn180100](&v108);
  if (v117)
    operator delete(v117);
}

void shape_as_simd_double3(const TI::CP::Path *a1, __n128 *a2, __n128 *a3, double a4, __n128 a5)
{
  __n128 *v6;
  __n128 *v8;
  __n128 v9;
  unint64_t v10;
  __n128 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v8 = 0;
    do
    {
      v9 = *v6;
      a5.n128_u64[0] = v6[1].n128_u64[1];
      v10 = *((_QWORD *)a1 + 2);
      if ((unint64_t)v8 >= v10)
      {
        v11 = *(__n128 **)a1;
        v12 = ((uint64_t)v8 - *(_QWORD *)a1) >> 5;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 59)
          abort();
        v14 = v10 - (_QWORD)v11;
        if (v14 >> 4 > v13)
          v13 = v14 >> 4;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v20 = a5;
          v21 = *v6;
          if (v15 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v16 = (char *)operator new(32 * v15);
          a5 = v20;
          v9 = v21;
        }
        else
        {
          v16 = 0;
        }
        v17 = (__n128 *)&v16[32 * v12];
        *v17 = v9;
        v17[1] = a5;
        v18 = v17;
        while (v8 != v11)
        {
          v19 = v8[-2];
          a5 = v8[-1];
          v8 -= 2;
          v18[-2] = v19;
          v18[-1] = a5;
          v18 -= 2;
        }
        v8 = v17 + 2;
        *(_QWORD *)a1 = v18;
        *((_QWORD *)a1 + 2) = &v16[32 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v8 = v9;
        v8[1] = a5;
        v8 += 2;
      }
      *((_QWORD *)a1 + 1) = v8;
      v6 += 3;
    }
    while (v6 != a3);
  }
}

uint64_t std::__split_buffer<TI::CP::ContextualShapeRecognizer::recognition_hypothesis>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      v5 = *(void **)(v2 - 40);
      if (v5 && *(_BYTE *)(v2 - 42) == 1)
      {
        free(v5);
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t TI::CP::TIPathRecognizerInterface::remove_shapes_older_than(TI::CP::TIPathRecognizerInterface *this, double a2)
{
  return 1;
}

uint64_t TI::Favonius::SearchNodeResultQueue::SearchNodeResultQueue(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)a1, v4++);
  return a1;
}

{
  uint64_t *v4;
  uint64_t *v5;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)a1, v4++);
  return a1;
}

unsigned int *TI::Favonius::SearchNodeResultQueue::visit(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  int64x2_t v34;
  unsigned int *v35;
  _QWORD *v36;

  v2 = *a2;
  if (!*a2)
    return result;
  v4 = result;
  if ((*(_DWORD *)(v2 + 160) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 = *((_QWORD *)result + 3);
    v6 = (_QWORD *)*((_QWORD *)result + 2);
    if ((unint64_t)v6 < v5)
    {
      *v6 = v2;
      v7 = (unsigned int *)(v2 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v9 = (uint64_t)(v6 + 1);
LABEL_25:
      *((_QWORD *)v4 + 2) = v9;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(*((unsigned int **)v4 + 1), v9, (v9 - *((_QWORD *)v4 + 1)) >> 3);
      goto LABEL_26;
    }
    v10 = *((_QWORD *)result + 1);
    v11 = ((uint64_t)v6 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v5 - v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v36 = v4 + 6;
    if (v14)
    {
      v15 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v14);
      v2 = *a2;
      v16 = &v15[2 * v11];
      v33 = v15;
      v34.i64[0] = (uint64_t)v16;
      v34.i64[1] = (uint64_t)v16;
      v35 = &v15[2 * v17];
      *(_QWORD *)v16 = v2;
      if (!v2)
      {
        v18 = &v15[2 * v11];
LABEL_20:
        v9 = (uint64_t)(v18 + 2);
        v34.i64[1] = (uint64_t)(v18 + 2);
        v22 = (_QWORD *)*((_QWORD *)v4 + 1);
        v21 = (_QWORD *)*((_QWORD *)v4 + 2);
        if (v21 == v22)
        {
          v24 = vdupq_n_s64((unint64_t)v21);
        }
        else
        {
          do
          {
            v23 = *--v21;
            *v21 = 0;
            *((_QWORD *)v16 - 1) = v23;
            v16 -= 2;
          }
          while (v21 != v22);
          v24 = *(int64x2_t *)(v4 + 2);
          v9 = v34.i64[1];
        }
        *((_QWORD *)v4 + 1) = v16;
        *((_QWORD *)v4 + 2) = v9;
        v34 = v24;
        v25 = (unsigned int *)*((_QWORD *)v4 + 3);
        *((_QWORD *)v4 + 3) = v35;
        v35 = v25;
        v33 = (unsigned int *)v24.i64[0];
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v33);
        goto LABEL_25;
      }
    }
    else
    {
      v33 = 0;
      v34.i64[0] = 8 * v11;
      v34.i64[1] = 8 * v11;
      v35 = 0;
      *(_QWORD *)(8 * v11) = v2;
    }
    v19 = (unsigned int *)(v2 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v18 = (unsigned int *)v34.i64[1];
    v16 = (unsigned int *)v34.i64[0];
    goto LABEL_20;
  }
LABEL_26:
  result = (unsigned int *)(*(_QWORD *(**)(unsigned int **__return_ptr))(*(_QWORD *)v4 + 16))(&v33);
  if (v33)
  {
    v32 = v33;
    v33 = 0;
    TI::Favonius::SearchNodeSourceQueue::insert((TI::Favonius::SearchNodeSourceQueue *)(v4 + 10), (uint64_t *)&v32);
    if (v32)
    {
      v26 = v32 + 2;
      v27 = atomic_load(v32 + 2);
      if (v27 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v32 + 8))();
      }
      else
      {
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
      }
    }
    result = v33;
    if (v33)
    {
      v29 = v33 + 2;
      v30 = atomic_load(v33 + 2);
      if (v30 == 1)
      {
        return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 8))();
      }
      else
      {
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
      }
    }
  }
  return result;
}

unsigned int *std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int **v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = result;
    v5 = v3 >> 1;
    v6 = (unsigned int **)&result[2 * (v3 >> 1)];
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (unsigned int **)(a2 - 8);
    v8 = v9;
    if ((float)(*((float *)*v6 + 36) + (float)(*((float *)*v6 + 35) * 0.35)) < (float)(*(float *)(v9 + 144)
                                                                                      + (float)(*(float *)(v9 + 140)
                                                                                              * 0.35)))
    {
      *v7 = 0;
      v10 = *v6;
      do
      {
        v11 = v6;
        *v6 = 0;
        v12 = *v7;
        *v7 = v10;
        if (v12)
        {
          v13 = v12 + 2;
          v14 = atomic_load(v12 + 2);
          if (v14 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          }
          else
          {
            do
              v15 = __ldaxr(v13);
            while (__stlxr(v15 - 1, v13));
          }
        }
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (unsigned int **)&v4[2 * v5];
        v10 = *v6;
        v7 = v11;
      }
      while ((float)(*((float *)*v6 + 36) + (float)(*((float *)*v6 + 35) * 0.35)) < (float)(*(float *)(v8 + 144)
                                                                                           + (float)(*(float *)(v8 + 140) * 0.35)));
      result = *v11;
      *v11 = (unsigned int *)v8;
      if (result)
      {
        v16 = result + 2;
        v17 = atomic_load(result + 2);
        if (v17 == 1)
        {
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
        else
        {
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
        }
      }
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::insert(TI::Favonius::SearchNodeSourceQueue *this, uint64_t *a2)
{
  char *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  char *v28;

  v4 = (char *)this + 40;
  v5 = *((_QWORD *)this + 5);
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    v9 = v6 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v28 = v4;
    if (v12)
    {
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v12);
      v8 = (_QWORD *)*((_QWORD *)this + 3);
      v6 = (_QWORD *)*((_QWORD *)this + 4);
    }
    else
    {
      v13 = 0;
    }
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v27 = v15;
    *v14 = 0;
    *((_QWORD *)&v26 + 1) = v14 + 1;
    if (v6 == v8)
    {
      v7 = v14 + 1;
    }
    else
    {
      do
      {
        v16 = *--v6;
        *v6 = 0;
        *--v14 = v16;
      }
      while (v6 != v8);
      v7 = (_QWORD *)*((_QWORD *)&v26 + 1);
      v15 = v27;
    }
    v17 = *(_OWORD *)((char *)this + 24);
    *((_QWORD *)this + 3) = v14;
    *((_QWORD *)this + 4) = v7;
    v26 = v17;
    v18 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v15;
    v27 = v18;
    v25 = v17;
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    *v6 = 0;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 4) = v7;
  v19 = (unsigned int *)*(v7 - 1);
  v20 = *a2;
  *a2 = 0;
  *(v7 - 1) = v20;
  if (v19)
  {
    v21 = v19 + 2;
    v22 = atomic_load(v19 + 2);
    if (v22 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
    else
    {
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
    }
  }
  return TI::Favonius::SearchNodeSourceQueue::push_heap(this, (TI::Favonius::SearchNodeSource *)*(v7 - 1));
}

uint64_t std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(unsigned int **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    if (v4)
    {
      v5 = v4 + 2;
      v6 = atomic_load(v4 + 2);
      if (v6 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      else
      {
        do
          v7 = __ldaxr(v5);
        while (__stlxr(v7 - 1, v5));
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t TI::Favonius::SearchNodeResultQueue::next_word_node@<X0>(unsigned int **this@<X0>, unsigned int **a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  TI::Favonius::SearchNodeSource *v50;
  unsigned int *v51;

  v4 = this + 5;
  while (1)
  {
    result = TI::Favonius::SearchNodeResultQueue::is_search_queue_bounded_by_top_word((TI::Favonius::SearchNodeResultQueue *)this);
    if ((result & 1) != 0)
      break;
    TI::Favonius::SearchNodeSourceQueue::next_search_node(v4, -INFINITY, &v50);
    v51 = (unsigned int *)v50;
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)this, (uint64_t *)&v51);
    if (v51)
    {
      v6 = v51 + 2;
      v7 = atomic_load(v51 + 2);
      if (v7 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v51 + 8))();
      }
      else
      {
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
      }
    }
  }
  v9 = this[1];
  v10 = this[2];
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = *(unsigned int **)v9;
    if (*(_QWORD *)v9)
    {
      v12 = v11 + 2;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      v9 = this[1];
      v10 = this[2];
    }
    v14 = (char *)v10 - (char *)v9;
    if ((char *)v10 - (char *)v9 >= 9)
    {
      v15 = 0;
      v16 = v14 >> 3;
      v17 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      v18 = __OFSUB__(v14 >> 3, 2);
      v19 = (v14 >> 3) - 2;
      if (v19 < 0 != v18)
        v19 = v16 - 1;
      v20 = v19 >> 1;
      v21 = v9;
      do
      {
        v22 = (unsigned int **)v21;
        v21 += 2 * v15 + 2;
        v23 = 2 * v15;
        v15 = (2 * v15) | 1;
        v24 = v23 + 2;
        if (v24 < v16
          && (float)(*(float *)(*(_QWORD *)v21 + 144) + (float)(*(float *)(*(_QWORD *)v21 + 140) * 0.35)) < (float)(*(float *)(*((_QWORD *)v21 + 1) + 144) + (float)(*(float *)(*((_QWORD *)v21 + 1) + 140) * 0.35)))
        {
          v21 += 2;
          v15 = v24;
        }
        v25 = *(unsigned int **)v21;
        *(_QWORD *)v21 = 0;
        v26 = *v22;
        *v22 = v25;
        if (v26)
        {
          v27 = v26 + 2;
          v28 = atomic_load(v26 + 2);
          if (v28 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
          }
          else
          {
            do
              v29 = __ldaxr(v27);
            while (__stlxr(v29 - 1, v27));
          }
        }
      }
      while (v15 <= v20);
      v30 = (unsigned int **)(v10 - 2);
      if (v10 - 2 == v21)
      {
        v40 = *(unsigned int **)v21;
        *(_QWORD *)v21 = v17;
        if (v40)
        {
          v41 = v40 + 2;
          v42 = atomic_load(v40 + 2);
          if (v42 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
          }
          else
          {
            do
              v43 = __ldaxr(v41);
            while (__stlxr(v43 - 1, v41));
          }
        }
      }
      else
      {
        v31 = *v30;
        *v30 = 0;
        v32 = *(unsigned int **)v21;
        *(_QWORD *)v21 = v31;
        if (v32)
        {
          v33 = v32 + 2;
          v34 = atomic_load(v32 + 2);
          if (v34 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
          }
          else
          {
            do
              v35 = __ldaxr(v33);
            while (__stlxr(v35 - 1, v33));
          }
        }
        v36 = *v30;
        *v30 = v17;
        if (v36)
        {
          v37 = v36 + 2;
          v38 = atomic_load(v36 + 2);
          if (v38 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
          }
          else
          {
            do
              v39 = __ldaxr(v37);
            while (__stlxr(v39 - 1, v37));
          }
        }
        std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeResultQueue::LessThanWordScore &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> *>>(v9, (uint64_t)(v21 + 2), ((char *)(v21 + 2) - (char *)v9) >> 3);
      }
    }
    v44 = this[2];
    v46 = *((_QWORD *)v44 - 1);
    v45 = v44 - 2;
    result = v46;
    if (v46)
    {
      v47 = (unsigned int *)(result + 8);
      v48 = atomic_load((unsigned int *)(result + 8));
      if (v48 == 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
      }
    }
    this[2] = v45;
  }
  *a2 = v11;
  return result;
}

BOOL TI::Favonius::SearchNodeResultQueue::is_search_queue_bounded_by_top_word(TI::Favonius::SearchNodeResultQueue *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;

  v1 = *((_QWORD *)this + 1);
  if (v1 == *((_QWORD *)this + 2))
    v2 = -INFINITY;
  else
    v2 = *(float *)(*(_QWORD *)v1 + 144) + (float)(*(float *)(*(_QWORD *)v1 + 140) * 0.35);
  v3 = *((_QWORD *)this + 5);
  if (v3 == *((_QWORD *)this + 6))
    return 1;
  v4 = *(float *)(*(_QWORD *)v3 + 24);
  return v4 < v2 || (LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF;
}

id UIKeyboardUserDirectory()
{
  void *v0;
  void *v1;
  int v2;
  char v3;
  BOOL v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  char v9;
  id v10;
  NSObject *v11;
  void *v12;
  id v14;
  id v15;
  char v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  TI_KB_USER_DIRECTORY();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0;
  v2 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v0, &v16);
  v3 = v2;
  if (v2)
    v4 = v16 == 0;
  else
    v4 = 0;
  if (v4)
  {
    v15 = 0;
    v7 = objc_msgSend(v1, "removeItemAtPath:error:", v0, &v15);
    v8 = v15;
    v6 = v8;
    if ((v7 & 1) == 0)
    {
      if (TICanLogMessageAtLevel_onceToken != -1)
        dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
      TIOSLogFacility();
      v11 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        goto LABEL_18;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s %@"), "UIKeyboardUserDirectory", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v18 = v12;
      goto LABEL_21;
    }
    v5 = v8;
    if ((v3 & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v14 = v5;
    v9 = objc_msgSend(v1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v0, 1, 0, &v14);
    v6 = v14;

    if ((v9 & 1) != 0)
      goto LABEL_10;
    if (TICanLogMessageAtLevel_onceToken != -1)
      dispatch_once(&TICanLogMessageAtLevel_onceToken, &__block_literal_global_21185);
    TIOSLogFacility();
    v11 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
LABEL_18:

      v10 = 0;
      goto LABEL_19;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s %@"), "UIKeyboardUserDirectory", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v18 = v12;
LABEL_21:
    _os_log_debug_impl(&dword_1DA6F2000, v11, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

    goto LABEL_18;
  }
  v5 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v6 = v5;
LABEL_10:
  v10 = v0;
LABEL_19:

  return v10;
}

id languageIdentifierForInputMode(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "normalizedIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((TIInputModeIsTransliteration() & 1) != 0)
    objc_msgSend(v1, "normalizedIdentifier");
  else
    objc_msgSend(v1, "languageWithRegion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id UIAssetPathForInputMode(void *a1)
{
  void *v1;
  void *v2;
  void *PathForMatchingFile;

  languageIdentifierForInputMode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  PathForMatchingFile = (void *)KB::TIAssetPathRegistry::createPathForMatchingFile();

  return PathForMatchingFile;
}

CFMutableArrayRef UIAssetLMBundlePathForInputMode(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  CFMutableArrayRef PathsForMatchingBundles;
  CFMutableArrayRef v5;

  v1 = (void *)MEMORY[0x1E0C99DC8];
  objc_msgSend(a1, "preferredModelLocaleIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localeWithLocaleIdentifier:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  PathsForMatchingBundles = KB::TIAssetPathRegistry::createPathsForMatchingBundles();
  if (PathsForMatchingBundles)
    v5 = PathsForMatchingBundles;
  else
    v5 = (CFMutableArrayRef)MEMORY[0x1E0C9AA60];

  return v5;
}

id UIKeyboardTransliterationLexiconPathForInputMode(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "locale");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "scriptCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("Latn"));

  if (v4)
  {
    objc_msgSend(v1, "locale");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "languageCode");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[TIInputMode inputModeWithIdentifier:isSiriMode:](TIInputMode, "inputModeWithIdentifier:isSiriMode:", v6, objc_msgSend(v1, "isSiriMode"));
    v7 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v7;
  }
  v12[0] = &off_1EA1049C0;
  v13 = v12;
  UIAssetPathForInputMode(v1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_7;
  }
  if (v13)
  {
    v10 = 5;
LABEL_7:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }

  return v8;
}

id UIKeyboardUnigramLexiconPathForInputMode(void *a1)
{
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isSiriMode") & 1) == 0)
  {
    UIKeyboardTransliterationLexiconPathForInputMode(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v5)
    {
      v2 = v5;
LABEL_14:

      goto LABEL_15;
    }
    v10[0] = &off_1EA104978;
    v11 = v10;
    UIAssetPathForInputMode(v1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    v7 = v11;
    if (v11 == v10)
    {
      v8 = 4;
      v7 = v10;
    }
    else
    {
      if (!v11)
        goto LABEL_14;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_14;
  }
  v10[0] = &off_1EA104A08;
  v11 = v10;
  UIAssetPathForInputMode(v1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
    goto LABEL_8;
  }
  if (v11)
  {
    v4 = 5;
LABEL_8:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_15:

  return v2;
}

id UIKeyboardPhraseLexiconPathForInputMode(void *a1)
{
  id v1;
  uint64_t (**v2)();
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isSiriMode") & 1) != 0)
    v2 = &off_1EA104A98;
  else
    v2 = &off_1EA104A50;
  v7[0] = v2;
  v8 = v7;
  UIAssetPathForInputMode(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_8;
  }
  if (v8)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

id UIKeyboardDeltaLexiconPathForInputMode(void *a1)
{
  id v1;
  uint64_t (**v2)();
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isSiriMode") & 1) != 0)
    v2 = &off_1EA104B28;
  else
    v2 = &off_1EA104AE0;
  v7[0] = v2;
  v8 = v7;
  UIAssetPathForInputMode(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_8;
  }
  if (v8)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

id UIKeyboardMorphemeLexiconPathForInputMode(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v7[0] = &off_1EA104B70;
  v8 = v7;
  UIAssetPathForInputMode(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (!v2)
    return 0;
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("morpheme.dat"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id UIKeyboardOTALanguageModelPathsForInputMode(void *a1)
{
  id v1;
  uint64_t (**v2)();
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isSiriMode") & 1) != 0)
    v2 = &off_1EA104C90;
  else
    v2 = &off_1EA104C48;
  v7[0] = v2;
  v8 = v7;
  UIAssetLMBundlePathForInputMode(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_8;
  }
  if (v8)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

id UIKeyboardSystemLanguageModelPathsForInputMode(void *a1)
{
  id v1;
  uint64_t (**v2)();
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((objc_msgSend(v1, "isSiriMode") & 1) != 0)
    v2 = &off_1EA104C00;
  else
    v2 = &off_1EA104BB8;
  v7[0] = v2;
  v8 = v7;
  UIAssetLMBundlePathForInputMode(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_8;
  }
  if (v8)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

id UIKeyboardOTADictionaryPathForContentType(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  NSObject *v21;
  void *v22;
  void *v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[128];
  uint8_t buf[4];
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  +[TIAssetManager sharedAssetManager](TIAssetManager, "sharedAssetManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "ddsAssetContentItemsWithContentType:inputMode:filteredWithRegion:", v5, v6, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  TIAssetsOSLogFacility();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s Content items for type %@: %@"), "UIKeyboardOTADictionaryPathForContentType", v5, v9);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v33 = v24;
    _os_log_debug_impl(&dword_1DA6F2000, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);

  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v11 = v9;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v12)
  {
    v13 = v12;
    v25 = v6;
    v26 = v5;
    v14 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v28 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * i), "path");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "path");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v17, "lastPathComponent");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (!objc_msgSend(v7, "length") || objc_msgSend(v18, "hasPrefix:", v7))
        {
          if (objc_msgSend(v18, "hasSuffix:", CFSTR(".dat")))
          {
            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = objc_msgSend(v19, "fileExistsAtPath:", v17);

            if (v20)
            {

              goto LABEL_16;
            }
          }
        }

      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      if (v13)
        continue;
      break;
    }
    v17 = 0;
LABEL_16:
    v6 = v25;
    v5 = v26;
  }
  else
  {
    v17 = 0;
  }

  TIAssetsOSLogFacility();
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s dictionaryPathForContentType ddsResult: %@"), "UIKeyboardOTADictionaryPathForContentType", v17);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v33 = v22;
    _os_log_impl(&dword_1DA6F2000, v21, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);

  }
  return v17;
}

id UIKeyboardStaticUnigramsFile(void *a1)
{
  id v1;
  int v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = TIInputModeUseMorphemeLevelLexicon();
  +[TIInputMode inputModeWithIdentifier:](TIInputMode, "inputModeWithIdentifier:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    UIKeyboardMorphemeLexiconPathForInputMode(v3);
  else
    UIKeyboardUnigramLexiconPathForInputMode(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id UIKeyboardDynamicDictionaryFileWithSiriMode(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  char v8;
  __CFString *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;

  v5 = a1;
  v6 = a2;
  if (!objc_msgSend(v5, "length"))
  {
    v10 = 0;
    goto LABEL_12;
  }
  TIInputModeGetLanguageWithRegion();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("en_US"));

  if ((v8 & 1) != 0)
  {
    v9 = CFSTR("dynamic-text.dat");
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  TIInputModeGetLanguageWithRegion();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingString:", CFSTR("-dynamic-text.dat"));
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (a3)
  {
LABEL_7:
    objc_msgSend(CFSTR("siri-"), "stringByAppendingString:", v9);
    v12 = objc_claimAutoreleasedReturnValue();

    v9 = (__CFString *)v12;
  }
LABEL_8:
  if (v6)
  {
    v13 = v6;
  }
  else
  {
    UIKeyboardUserDirectory();
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  v14 = v13;
  objc_msgSend(v13, "stringByAppendingPathComponent:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_12:
  return v10;
}

id UIKeyboardDynamicDictionaryFile(void *a1, void *a2)
{
  return UIKeyboardDynamicDictionaryFileWithSiriMode(a1, a2, 0);
}

__CFString *UIKeyboardLanguageFromDynamicDictionaryPath(void *a1)
{
  void *v1;
  __CFString *v2;

  objc_msgSend(a1, "lastPathComponent");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dynamic-text.dat")) & 1) != 0)
  {
    v2 = CFSTR("en_US");
  }
  else if (objc_msgSend(v1, "hasSuffix:", CFSTR("-dynamic-text.dat")))
  {
    objc_msgSend(v1, "substringToIndex:", objc_msgSend(v1, "length") - objc_msgSend(CFSTR("-dynamic-text.dat"), "length"));
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = CFSTR("intl");
  }

  return v2;
}

id UIKeyboardSimulatedImplicitInputModeDetectionForPrimaryInputMode(void *a1)
{
  id v1;
  TILanguageSelectionController *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(TILanguageSelectionController);
  v3 = (void *)objc_opt_new();
  +[TIInputMode inputModeWithIdentifier:](TIInputMode, "inputModeWithIdentifier:", v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[TILanguageSelectionController simulateImplicitInputModeDetectionForPrimaryInputMode:](v2, "simulateImplicitInputModeDetectionForPrimaryInputMode:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v10), "normalizedIdentifier", (_QWORD)v13);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObject:", v11);

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }

  return v3;
}

TI::RejectionsDatabase *std::unique_ptr<TI::RejectionsDatabase>::reset[abi:nn180100](TI::RejectionsDatabase **a1, TI::RejectionsDatabase *a2)
{
  TI::RejectionsDatabase *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    TI::RejectionsDatabase::~RejectionsDatabase(result);
    JUMPOUT(0x1DF0A2144);
  }
  return result;
}

void std::__destroy_at[abi:nn180100]<RecentMessage,0>(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    std::default_delete<KB::LanguageModelContext>::operator()[abi:nn180100](v2);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 6) == 1)
      free(v3);
  }
}

void std::default_delete<KB::LanguageModelContext>::operator()[abi:nn180100](uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 72));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 64));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1);
  JUMPOUT(0x1DF0A2144);
}

void std::__shared_ptr_emplace<KB::TypologyLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA101258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KB::TypologyLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA101258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<KB::TypologyLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __Block_byref_object_copy__10337(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10338(uint64_t a1)
{

}

void std::shared_ptr<KB::LanguageModel>::reset[abi:nn180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __copy_helper_block_a8_40c46_ZTSNSt3__110shared_ptrIN2KB13LanguageModelEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_a8_40c46_ZTSNSt3__110shared_ptrIN2KB13LanguageModelEEE(uint64_t a1)
{
  return std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1 + 40);
}

id KB::createNSArray<std::unordered_set<unsigned long long> const&>(uint64_t a1)
{
  void *v2;
  _QWORD *i;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(_QWORD *)(a1 + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", i[2]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      objc_msgSend(v2, "addObject:", v4);

  }
  return v2;
}

void populateAutocorrectionAccuracyFields(void *a1, float *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a1;
  objc_msgSend(v11, "setGeometryScore:", a2[187]);
  objc_msgSend(v11, "setWordScore:", a2[188]);
  v3 = *((_QWORD *)a2 + 1);
  v4 = *(_QWORD *)a2 - 1;
  v5 = TILocaleIdentifierForLexiconID(*(_DWORD *)(v3 + 240 * v4 + 136));
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setLexiconLocale:", v7);

  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == 1)
  {
    v9 = v3 + 240 * v4;
    objc_msgSend(v11, "setDynamicUsageCount:", *(unsigned int *)(v9 + 124));
    objc_msgSend(v11, "setDynamicPenaltyCount:", *(unsigned int *)(v9 + 128));
    v8 = *(_QWORD *)a2;
  }
  LODWORD(v6) = *(_DWORD *)(*((_QWORD *)a2 + 1) + 240 * v8 - 184);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setStaticLinguisticLikelihood:", v10);

}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1011B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1011B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

void std::__shared_ptr_emplace<std::vector<KB::LanguageModelContext>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<KB::LanguageModelContext>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__246(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__247(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__242(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(a1 + 48) = 0x100000;
  v2 = a1 + 48;
  *(_WORD *)(v2 + 4) = 0;
  *(_BYTE *)(v2 + 6) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  return KB::String::operator=(v2, (KB::String *)(a2 + 48));
}

void __Block_byref_object_dispose__243(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 54) == 1)
      free(v2);
  }
}

__n128 __Block_byref_object_copy__237(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<KB::CandidateCollection,KB::String>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 136))
  {
    v2 = *(void **)(a1 + 112);
    if (v2 && *(_BYTE *)(a1 + 110) == 1)
      free(v2);
    v4 = (void **)(a1 + 72);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    v4 = (void **)(a1 + 48);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    v4 = (void **)(a1 + 24);
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
    v4 = (void **)a1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

KB::String *__copy_helper_block_a8_72c16_ZTSN2KB6StringE(uint64_t a1, uint64_t a2)
{
  return KB::String::String((KB::String *)(a1 + 72), (const KB::String *)(a2 + 72));
}

void __destroy_helper_block_a8_72c16_ZTSN2KB6StringE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 78) == 1)
      free(v2);
  }
}

std::string *std::optional<std::string>::operator=[abi:nn180100]<char const*,void>(std::string *a1, std::string::value_type *a2)
{
  std::string *result;

  if (a1[1].__r_.__value_.__s.__data_[0])
    return std::string::__assign_external(a1, a2);
  result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void ___ZL38TIGetSkipStickersSuggestionGatingValuev_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_configureKey:domain:defaultValue:", CFSTR("SkipStickersSuggestionGating"), CFSTR("com.apple.keyboard"), MEMORY[0x1E0C9AAA0]);

}

void ___ZL35TIGetKeyboardDisableHitTestingValuev_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0DBDCA8], "sharedPreferencesController");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_configureKey:domain:defaultValue:", CFSTR("KeyboardDisableHitTesting"), CFSTR("com.apple.keyboard"), MEMORY[0x1E0C9AAA0]);

}

__n128 __Block_byref_object_copy__1128(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t std::tuple<KB::CandidateCollection,KB::String>::~tuple(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 112);
  if (v2 && *(_BYTE *)(a1 + 110) == 1)
    free(v2);
  v4 = (void **)(a1 + 72);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)(a1 + 48);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)(a1 + 24);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)a1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  return a1;
}

uint64_t std::optional<KB::String>::operator=[abi:nn180100]<KB::String,void>(uint64_t a1, KB::String *a2)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 32))
    return KB::String::operator=(a1, a2);
  *(_DWORD *)a1 = 0x100000;
  *(_WORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = KB::String::operator=(a1, a2);
  *(_BYTE *)(result + 32) = 1;
  return result;
}

const char *linguisticResourceStatusToString(unint64_t a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1EA101280[a1];
}

uint64_t TI::Favonius::KeyboardLayout::create@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = TI::Favonius::KeyboardLayout::KeyboardLayout(v4, a1);
  *a2 = result;
  return result;
}

uint64_t TI::Favonius::KeyboardLayout::KeyboardLayout(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  CGRect **v4;
  uint64_t v5;

  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(a1 + 120) = *MEMORY[0x1E0C9D628];
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0x100000;
  *(_WORD *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 214) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*a2)
  {
    v4 = (CGRect **)a2[1];
    v5 = 8 * *a2;
    do
    {
      TI::Favonius::KeyboardLayout::add_key(a1, v4++);
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

uint64_t **TI::Favonius::KeyboardLayout::add_key(uint64_t a1, CGRect **a2)
{
  unint64_t v2;
  unsigned int **v3;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *i;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  size_t v41;
  unsigned __int16 *v42;
  void *v43;
  unsigned int v44;
  const char *v45;
  KB::String *v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  size_t v60;
  uint8x8_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  uint8x8_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned __int16 *v76;
  unsigned int **v77;
  unsigned __int16 *v78;
  unsigned __int16 *v79;
  int v80;
  unsigned __int16 *v81;
  unint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  CGRect **v85;
  uint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  float Width;
  uint64_t **v90;
  float Height;
  uint64_t **result;
  void *v93;
  unsigned int **v94;
  unsigned __int16 *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;

  v3 = (unsigned int **)a2;
  *(CGRect *)(a1 + 120) = CGRectUnion(*(CGRect *)(a1 + 120), (*a2)[2]);
  std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100]((unsigned int ***)(a1 + 8), *v3);
  v5 = *v3;
  v6 = *((unsigned __int16 *)*v3 + 6);
  if (!*((_WORD *)*v3 + 6))
  {
    KB::String::compute_length((unsigned __int16 *)v5 + 4);
    v6 = *((unsigned __int16 *)v5 + 6);
    v5 = *v3;
  }
  if (v6 == 1)
  {
    v7 = *((_QWORD *)v5 + 2);
    if (!v7)
      v7 = (uint64_t)(v5 + 6);
    v101 = v7;
    v8 = *((unsigned __int16 *)v5 + 4);
    v102 = 0;
    v103 = v8;
    v104 = 0;
    KB::String::iterator::initialize(&v101);
    v9 = v104;
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
    {
      v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        v2 = v104;
        if (v10 <= v104)
          v2 = v104 % v10;
      }
      else
      {
        v2 = ((_DWORD)v10 - 1) & v104;
      }
      v12 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v2);
      if (v12)
      {
        for (i = *v12; i; i = (uint64_t *)*i)
        {
          v14 = i[1];
          if (v14 == v104)
          {
            if (*((_DWORD *)i + 4) == v104)
              goto LABEL_81;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v2)
              break;
          }
        }
      }
    }
    v15 = (_QWORD *)(a1 + 48);
    v16 = operator new(0x20uLL);
    *v16 = 0;
    v16[1] = v9;
    *((_DWORD *)v16 + 4) = v9;
    v16[3] = v5;
    if (v5)
    {
      do
        v17 = __ldaxr(v5);
      while (__stlxr(v17 + 1, v5));
    }
    v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 56) + 1);
    v19 = *(float *)(a1 + 64);
    if (v10 && (float)(v19 * (float)v10) >= v18)
    {
LABEL_71:
      v36 = *(_QWORD *)(a1 + 32);
      v37 = *(_QWORD **)(v36 + 8 * v2);
      if (v37)
      {
        *v16 = *v37;
      }
      else
      {
        *v16 = *v15;
        *v15 = v16;
        *(_QWORD *)(v36 + 8 * v2) = v15;
        if (!*v16)
        {
LABEL_80:
          ++*(_QWORD *)(a1 + 56);
          v5 = *v3;
          goto LABEL_81;
        }
        v38 = *(_QWORD *)(*v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v38 >= v10)
            v38 %= v10;
        }
        else
        {
          v38 &= v10 - 1;
        }
        v37 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38);
      }
      *v37 = v16;
      goto LABEL_80;
    }
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_37;
    if (*(_QWORD *)&prime < v10)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 56) / *(float *)(a1 + 64));
      if (v10 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(_QWORD *)&prime >> 61)
            goto LABEL_197;
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(int8x8_t *)(a1 + 40) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v15;
          if (*v15)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v28) = v15;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  v35 = *(_QWORD *)(a1 + 32);
                  if (!*(_QWORD *)(v35 + 8 * v34))
                  {
                    *(_QWORD *)(v35 + 8 * v34) = v27;
                    goto LABEL_62;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v34);
                  **(_QWORD **)(*(_QWORD *)(a1 + 32) + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_62:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_66;
        }
        v93 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        if (v93)
          operator delete(v93);
        v10 = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
LABEL_66:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v2 = v9 % v10;
      else
        v2 = v9;
    }
    else
    {
      v2 = ((_DWORD)v10 - 1) & v9;
    }
    goto LABEL_71;
  }
LABEL_81:
  v39 = (char *)operator new(0x28uLL);
  v40 = v39;
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  v41 = *((unsigned __int16 *)v5 + 20);
  v98 = (uint64_t **)(a1 + 88);
  v42 = (unsigned __int16 *)(v39 + 16);
  if (v41 <= 0xE)
  {
    *(_OWORD *)v42 = *(_OWORD *)(v5 + 10);
    *((_QWORD *)v39 + 4) = v5;
    do
LABEL_85:
      v44 = __ldaxr(v5);
    while (__stlxr(v44 + 1, v5));
    goto LABEL_86;
  }
  *((_WORD *)v39 + 8) = v41;
  v43 = (void *)operator new[]();
  *((_QWORD *)v40 + 3) = v43;
  memcpy(v43, *((const void **)v5 + 6), v41);
  v5 = *v3;
  *((_QWORD *)v40 + 4) = *v3;
  if (v5)
    goto LABEL_85;
LABEL_86:
  v45 = (const char *)*((unsigned __int16 *)v40 + 8);
  if (v45 <= 0xE)
    v46 = (KB::String *)(v40 + 18);
  else
    v46 = (KB::String *)*((_QWORD *)v40 + 3);
  *((_QWORD *)v40 + 1) = KB::String::hash(v46, (const char *)*((unsigned __int16 *)v40 + 8));
  v47 = KB::String::hash(v46, v45);
  *((_QWORD *)v40 + 1) = v47;
  v48 = *(_QWORD *)(a1 + 80);
  v49 = (float)(unint64_t)(*(_QWORD *)(a1 + 96) + 1);
  v50 = *(float *)(a1 + 104);
  v99 = (uint64_t *)v40;
  v100 = v47;
  if (v48 && (float)(v50 * (float)v48) >= v49)
    goto LABEL_148;
  v51 = 1;
  if (v48 >= 3)
    v51 = (v48 & (v48 - 1)) != 0;
  v52 = v51 | (2 * v48);
  v53 = vcvtps_u32_f32(v49 / v50);
  if (v52 <= v53)
    v54 = v53;
  else
    v54 = v52;
  if (v54 == 1)
  {
    v54 = 2;
  }
  else if ((v54 & (v54 - 1)) != 0)
  {
    v55 = std::__next_prime(v54);
    v47 = v100;
    v54 = v55;
    v48 = *(_QWORD *)(a1 + 80);
  }
  if (v54 <= v48)
  {
    if (v54 >= v48)
      goto LABEL_148;
    v63 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
    if (v48 < 3 || (v64 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
    {
      v63 = std::__next_prime(v63);
      v47 = v100;
    }
    else
    {
      v65 = 1 << -(char)__clz(v63 - 1);
      if (v63 >= 2)
        v63 = v65;
    }
    if (v54 <= v63)
      v54 = v63;
    if (v54 >= v48)
    {
      v48 = *(_QWORD *)(a1 + 80);
      goto LABEL_148;
    }
    if (!v54)
    {
      v72 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (v72)
      {
        operator delete(v72);
        v47 = v100;
      }
      v48 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      goto LABEL_148;
    }
  }
  if (v54 >> 61)
LABEL_197:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v56 = operator new(8 * v54);
  v57 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v56;
  if (v57)
    operator delete(v57);
  v95 = v42;
  v58 = 0;
  *(_QWORD *)(a1 + 80) = v54;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v58++) = 0;
  while (v54 != v58);
  v59 = *v98;
  v47 = v100;
  if (!*v98)
    goto LABEL_138;
  v60 = v59[1];
  v61 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
  v61.i16[0] = vaddlv_u8(v61);
  v62 = v61.u32[0];
  if (v61.u32[0] > 1uLL)
  {
    if (v60 >= v54)
      v60 %= v54;
  }
  else
  {
    v60 &= v54 - 1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v60) = v98;
  v66 = *v59;
  if (*v59)
  {
    v94 = v3;
    v96 = v61.u32[0];
    do
    {
      v67 = *(_QWORD *)(v66 + 8);
      if (v62 > 1)
      {
        if (v67 >= v54)
          v67 %= v54;
      }
      else
      {
        v67 &= v54 - 1;
      }
      if (v67 == v60)
      {
        v59 = (uint64_t *)v66;
      }
      else
      {
        v68 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)(v68 + 8 * v67))
        {
          v69 = *(_QWORD **)v66;
          if (*(_QWORD *)v66)
          {
            v70 = (_QWORD *)v66;
            while (1)
            {
              v71 = v69;
              if (!KB::operator==((unsigned __int16 *)(v66 + 16), (unsigned __int16 *)v69 + 8))
                break;
              v69 = (_QWORD *)*v71;
              v70 = v71;
              if (!*v71)
                goto LABEL_134;
            }
            v69 = v71;
            v71 = v70;
LABEL_134:
            v47 = v100;
            v62 = v96;
          }
          else
          {
            v71 = (_QWORD *)v66;
          }
          *v59 = (uint64_t)v69;
          *v71 = **(_QWORD **)(*(_QWORD *)(a1 + 72) + 8 * v67);
          **(_QWORD **)(*(_QWORD *)(a1 + 72) + 8 * v67) = v66;
        }
        else
        {
          *(_QWORD *)(v68 + 8 * v67) = v59;
          v59 = (uint64_t *)v66;
          v60 = v67;
        }
      }
      v66 = *v59;
    }
    while (*v59);
    v48 = v54;
    v3 = v94;
    v42 = v95;
  }
  else
  {
LABEL_138:
    v48 = v54;
    v42 = v95;
  }
LABEL_148:
  v73 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
  v73.i16[0] = vaddlv_u8(v73);
  v74 = v73.u32[0];
  if (v73.u32[0] > 1uLL)
  {
    v75 = v47;
    if (v48 <= v47)
      v75 = v47 % v48;
  }
  else
  {
    v75 = ((_DWORD)v48 - 1) & v47;
  }
  v76 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 72) + 8 * v75);
  v97 = *(_QWORD *)(a1 + 72);
  if (v76)
  {
    v77 = v3;
    v78 = *(unsigned __int16 **)v76;
    if (*(_QWORD *)v76)
    {
      v79 = v42;
      v80 = 0;
      do
      {
        v81 = v78;
        v82 = *((_QWORD *)v78 + 1);
        if (v74 > 1)
        {
          v83 = v82;
          if (v82 >= v48)
            v83 = v82 % v48;
        }
        else
        {
          v83 = v82 & (v48 - 1);
        }
        if (v83 != v75)
          break;
        if (v82 == v47)
        {
          v84 = KB::operator==(v81 + 8, v79);
          v47 = v100;
        }
        else
        {
          v84 = 0;
        }
        if ((v80 & !v84 & 1) != 0)
          break;
        v80 |= v84;
        v78 = *(unsigned __int16 **)v81;
        v76 = v81;
      }
      while (*(_QWORD *)v81);
    }
  }
  else
  {
    v77 = v3;
  }
  if (v74 > 1)
  {
    v85 = (CGRect **)v77;
    v86 = v99;
    if (v48 <= v47)
      v47 %= v48;
  }
  else
  {
    v47 = ((_DWORD)v48 - 1) & v47;
    v85 = (CGRect **)v77;
    v86 = v99;
  }
  if (!v76)
  {
    v88 = *v98;
    *v86 = (uint64_t)*v98;
    *v98 = v86;
    *(_QWORD *)(v97 + 8 * v47) = v98;
    if (!v88)
      goto LABEL_185;
    v87 = v88[1];
    if (v74 > 1)
    {
      if (v87 >= v48)
        v87 %= v48;
    }
    else
    {
      v87 &= v48 - 1;
    }
    goto LABEL_184;
  }
  *v86 = *(_QWORD *)v76;
  *(_QWORD *)v76 = v86;
  if (*v86)
  {
    v87 = *(_QWORD *)(*v86 + 8);
    if (v74 > 1)
    {
      if (v87 >= v48)
        v87 %= v48;
    }
    else
    {
      v87 &= v48 - 1;
    }
    if (v87 != v47)
LABEL_184:
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v87) = v86;
  }
LABEL_185:
  ++*(_QWORD *)(a1 + 96);
  Width = CGRectGetWidth((*v85)[2]);
  *(float *)&v101 = Width * 0.5;
  v90 = std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>((uint64_t **)(a1 + 152), &v101, Width * 0.5);
  ++*((_DWORD *)v90 + 8);
  Height = CGRectGetHeight((*v85)[2]);
  *(float *)&v101 = Height * 0.5;
  result = std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>((uint64_t **)(a1 + 176), &v101, Height * 0.5);
  ++*((_DWORD *)result + 8);
  if ((WORD2((*v85)[1].size.height) & 2) != 0)
    ++*(_DWORD *)(a1 + 200);
  return result;
}

void std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100](unsigned int ***a1, unsigned int *a2)
{
  unint64_t v4;
  unsigned int **v5;
  unsigned int v6;
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int **v14;
  unsigned int v15;
  char *v16;
  unsigned int *v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = v5 - *a1;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (unsigned int **)&v13[8 * v9];
    *v14 = a2;
    if (a2)
    {
      do
        v15 = __ldaxr(a2);
      while (__stlxr(v15 + 1, a2));
      v8 = *a1;
      v5 = a1[1];
    }
    v16 = &v13[8 * v12];
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v18 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      do
      {
        v17 = *--v5;
        *v5 = 0;
        *--v14 = v17;
      }
      while (v5 != v8);
      v18 = *(int64x2_t *)a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = (unsigned int **)v16;
    v20 = (char *)v18.i64[1];
    v19 = (char *)v18.i64[0];
    while (v20 != v19)
    {
      v22 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      v21 = v22;
      if (v22)
        WTF::RefCounted<TI::Favonius::Key>::deref(v21);
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v5 = a2;
    if (a2)
    {
      do
        v6 = __ldaxr(a2);
      while (__stlxr(v6 + 1, a2));
    }
    v7 = v5 + 1;
  }
  a1[1] = v7;
}

uint64_t **std::__tree<std::__value_type<float,int>,std::__map_value_compare<float,std::__value_type<float,int>,std::less<float>,true>,std::allocator<std::__value_type<float,int>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float &&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, float a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((float *)v5 + 7);
        if (v8 <= a3)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a3)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a2;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unsigned int *TI::Favonius::KeyboardLayout::find_nearest_key@<X0>(unsigned int *this@<X0>, CGPoint a2@<0:D0, 8:D1>, unsigned int **a3@<X8>)
{
  unsigned int **v4;
  unsigned int **v5;
  double y;
  double x;
  float v8;
  unsigned int *v9;
  float v10;
  unsigned int v11;

  v4 = (unsigned int **)*((_QWORD *)this + 1);
  v5 = (unsigned int **)*((_QWORD *)this + 2);
  if (v4 == v5)
  {
    v9 = 0;
  }
  else
  {
    y = a2.y;
    x = a2.x;
    this = 0;
    v8 = INFINITY;
    do
    {
      v9 = *v4;
      v10 = sqrt((*((double *)*v4 + 13) - y) * (*((double *)*v4 + 13) - y)+ (*((double *)*v4 + 12) - x) * (*((double *)*v4 + 12) - x));
      if (v8 <= v10)
      {
        v9 = this;
        v10 = v8;
      }
      else
      {
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 + 1, v9));
        if (this)
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)this);
      }
      ++v4;
      v8 = v10;
      this = v9;
    }
    while (v4 != v5);
  }
  *a3 = v9;
  return this;
}

uint64_t TI::Favonius::KeyboardLayout::find_key_for_touch@<X0>(uint64_t this@<X0>, CGPoint a2@<0:D0, 8:D1>, CGRect **a3@<X8>)
{
  CGRect **v4;
  CGRect **v5;
  double y;
  double x;
  uint64_t v8;
  float v9;
  CGRect *v10;
  float v11;
  unsigned int v12;
  unsigned int v13;
  CGPoint v14;

  v4 = *(CGRect ***)(this + 8);
  v5 = *(CGRect ***)(this + 16);
  if (v4 == v5)
  {
    v10 = 0;
LABEL_12:
    *a3 = v10;
  }
  else
  {
    y = a2.y;
    x = a2.x;
    v8 = 0;
    v9 = INFINITY;
    while (1)
    {
      v14.x = x;
      v14.y = y;
      this = CGRectContainsPoint((*v4)[2], v14);
      v10 = *v4;
      if ((_DWORD)this)
        break;
      v11 = sqrt((v10[3].origin.y - y) * (v10[3].origin.y - y) + (v10[3].origin.x - x) * (v10[3].origin.x - x));
      if (v9 <= v11)
      {
        v10 = (CGRect *)v8;
        v11 = v9;
      }
      else
      {
        do
          v12 = __ldaxr((unsigned int *)v10);
        while (__stlxr(v12 + 1, (unsigned int *)v10));
        if (v8)
          this = WTF::RefCounted<TI::Favonius::Key>::deref(v8);
      }
      ++v4;
      v9 = v11;
      v8 = (uint64_t)v10;
      if (v4 == v5)
        goto LABEL_12;
    }
    *a3 = v10;
    if (v10)
    {
      do
        v13 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v13 + 1, (unsigned int *)v10));
    }
    if (v8)
      return WTF::RefCounted<TI::Favonius::Key>::deref(v8);
  }
  return this;
}

uint64_t TI::Favonius::KeyboardLayout::enumerate_keys(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); v2 != i; v2 += 8)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

void TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(uint64_t a1, uint64_t a2, double a3, double a4)
{
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v7;
  unsigned int **v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31[3];
  unsigned int **v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  *(double *)&v35 = a3;
  *((double *)&v35 + 1) = a4;
  v4 = *(unsigned int ***)(a1 + 8);
  v5 = *(unsigned int ***)(a1 + 16);
  if (v4 != v5)
  {
    do
    {
      v7 = *v4++;
      std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::push_back[abi:nn180100](&v32, v7);
      v8 = v32;
      v9 = v33;
      *(_OWORD *)v31 = v35;
      v36 = v35;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>((uint64_t)v32, v33, (double *)&v36, (v33 - (uint64_t)v32) >> 3);
    }
    while (v4 != v5);
    for (; v8 != (unsigned int **)v9; v33 = v9)
    {
      (*(void (**)(uint64_t, unsigned int **))(a2 + 16))(a2, v8);
      v10 = v31[0];
      v36 = *(_OWORD *)v31;
      v11 = v9 - (_QWORD)v8;
      if (v9 - (uint64_t)v8 >= 9)
      {
        v12 = 0;
        v13 = v11 >> 3;
        v14 = *v8;
        *v8 = 0;
        v15 = (unint64_t)((v11 >> 3) - 2) >> 1;
        v16 = (uint64_t *)v8;
        do
        {
          v17 = &v16[v12 + 1];
          v18 = 2 * v12;
          v12 = (2 * v12) | 1;
          v19 = v18 + 2;
          if (v19 < v13)
          {
            v20 = sqrt((*(double *)(*v17 + 104) - v31[1]) * (*(double *)(*v17 + 104) - v31[1])+ (*(double *)(*v17 + 96) - v10) * (*(double *)(*v17 + 96) - v10));
            v21 = sqrt((*(double *)(v17[1] + 104) - v31[1]) * (*(double *)(v17[1] + 104) - v31[1])+ (*(double *)(v17[1] + 96) - v10) * (*(double *)(v17[1] + 96) - v10));
            if (v20 > v21)
            {
              ++v17;
              v12 = v19;
            }
          }
          v22 = *v17;
          *v17 = 0;
          v23 = *v16;
          *v16 = v22;
          if (v23)
          {
            WTF::RefCounted<TI::Favonius::Key>::deref(v23);
            v10 = v31[0];
          }
          v16 = v17;
        }
        while (v12 <= v15);
        v24 = (uint64_t *)(v9 - 8);
        if (v17 == (uint64_t *)(v9 - 8))
        {
          v28 = *v17;
          *v17 = (uint64_t)v14;
          if (v28)
            WTF::RefCounted<TI::Favonius::Key>::deref(v28);
        }
        else
        {
          v25 = *v24;
          *v24 = 0;
          v26 = *v17;
          *v17 = v25;
          if (v26)
            WTF::RefCounted<TI::Favonius::Key>::deref(v26);
          v27 = *v24;
          *v24 = (uint64_t)v14;
          if (v27)
            WTF::RefCounted<TI::Favonius::Key>::deref(v27);
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>((uint64_t)v8, (uint64_t)(v17 + 1), (double *)&v36, ((char *)(v17 + 1) - (char *)v8) >> 3);
        }
      }
      v30 = *(_QWORD *)(v9 - 8);
      v9 -= 8;
      v29 = v30;
      if (v30)
        WTF::RefCounted<TI::Favonius::Key>::deref(v29);
    }
  }
  *(_QWORD *)&v36 = &v32;
  std::vector<WTF::RefPtr<TI::Favonius::LayoutKey>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::KeyboardLayout::enumerate_keys_in_centroid_distance_order(CGPoint,void({block_pointer})(WTF::RefPtr<TI::Favonius::LayoutKey> const&))::$_0 &,std::__wrap_iter<WTF::RefPtr<TI::Favonius::LayoutKey>*>>(uint64_t result, uint64_t a2, double *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v11 = *(_QWORD *)(a2 - 8);
    v9 = (uint64_t *)(a2 - 8);
    v10 = v11;
    v12 = a3[1];
    v13 = *(double *)(*v8 + 96) - *a3;
    *(float *)&v13 = sqrt((*(double *)(*v8 + 104) - v12) * (*(double *)(*v8 + 104) - v12) + v13 * v13);
    v14 = sqrt((*(double *)(v11 + 104) - v12) * (*(double *)(v11 + 104) - v12)+ (*(double *)(v11 + 96) - *a3) * (*(double *)(v11 + 96) - *a3));
    if (*(float *)&v13 > v14)
    {
      *v9 = 0;
      v15 = *v8;
      do
      {
        v16 = v8;
        *v8 = 0;
        v17 = *v9;
        *v9 = v15;
        if (v17)
          WTF::RefCounted<TI::Favonius::Key>::deref(v17);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        v18 = a3[1];
        v15 = *v8;
        v19 = *(double *)(*v8 + 96) - *a3;
        *(float *)&v19 = sqrt((*(double *)(*v8 + 104) - v18) * (*(double *)(*v8 + 104) - v18) + v19 * v19);
        v20 = sqrt((*(double *)(v10 + 104) - v18) * (*(double *)(v10 + 104) - v18)+ (*(double *)(v10 + 96) - *a3) * (*(double *)(v10 + 96) - *a3));
        v9 = v16;
      }
      while (*(float *)&v19 > v20);
      result = *v16;
      *v16 = v10;
      if (result)
        return WTF::RefCounted<TI::Favonius::Key>::deref(result);
    }
  }
  return result;
}

uint64_t TI::Favonius::KeyboardLayout::key_for_char@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(this + 40);
  if (!v3)
    goto LABEL_17;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*(_QWORD *)(this + 32) + 8 * v5);
  if (!v6)
    goto LABEL_17;
  v7 = *v6;
  if (!v7)
    goto LABEL_17;
  while (1)
  {
    v8 = v7[1];
    if (v8 == a2)
      break;
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= v3)
        v8 %= v3;
    }
    else
    {
      v8 &= v3 - 1;
    }
    if (v8 != v5)
      goto LABEL_17;
LABEL_16:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_17;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_16;
  this = v7[3];
  if (!this)
  {
LABEL_17:
    *a3 = 0;
    return this;
  }
  do
    v9 = __ldaxr((unsigned int *)this);
  while (__stlxr(v9 + 1, (unsigned int *)this));
  *a3 = this;
  do
    v10 = __ldaxr((unsigned int *)this);
  while (__stlxr(v10 + 1, (unsigned int *)this));
  return WTF::RefCounted<TI::Favonius::Key>::deref(this);
}

float TI::Favonius::KeyboardLayout::enumerate_keys_with_sort_key(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  const char *v6;
  KB::String *v7;
  unsigned int v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int16 **v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  TI::Favonius::KeyboardLayout *v19;

  v6 = (const char *)*a2;
  if (v6 <= 0xE)
    v7 = (KB::String *)(a2 + 1);
  else
    v7 = (KB::String *)*((_QWORD *)a2 + 1);
  v8 = KB::String::hash(v7, v6);
  v10 = *(_QWORD *)(a1 + 80);
  if (!v10)
    return *(float *)v9.i32;
  v11 = v8;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v9.i16[0] = vaddlv_u8(v9);
  v12 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v13 = v8;
    if (v10 <= v8)
      v13 = v8 % v10;
  }
  else
  {
    v13 = ((_DWORD)v10 - 1) & v8;
  }
  v14 = *(unsigned __int16 ***)(*(_QWORD *)(a1 + 72) + 8 * v13);
  if (!v14)
    return *(float *)v9.i32;
  v15 = *v14;
  if (!*v14)
    return *(float *)v9.i32;
  while (1)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (v16 == v11)
      break;
    if (v12 > 1)
    {
      if (v16 >= v10)
        v16 %= v10;
    }
    else
    {
      v16 &= v10 - 1;
    }
    if (v16 != v13)
      return *(float *)v9.i32;
LABEL_19:
    v15 = *(unsigned __int16 **)v15;
    if (!v15)
      return *(float *)v9.i32;
  }
  if (!KB::operator==(v15 + 8, a2))
    goto LABEL_19;
  v17 = v15;
  do
    v17 = *(unsigned __int16 **)v17;
  while (v17 && KB::operator==(v17 + 8, a2));
  while (v15 != v17)
  {
    v18 = *(_QWORD *)(a3 + 24);
    if (!v18)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      *(float *)v9.i32 = TI::Favonius::KeyboardLayout::median_key_half_width(v19);
      return *(float *)v9.i32;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 48))(v18, (uint64_t *)v15 + 4);
    v15 = *(unsigned __int16 **)v15;
  }
  return *(float *)v9.i32;
}

float TI::Favonius::KeyboardLayout::median_key_half_width(TI::Favonius::KeyboardLayout *this)
{
  float *v1;
  char *v2;
  int64_t v3;
  int64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  BOOL v8;

  v1 = (float *)*((_QWORD *)this + 19);
  v2 = (char *)this + 160;
  if (v1 != (float *)((char *)this + 160))
  {
    v3 = (unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) >> 1;
    while (1)
    {
      v4 = *((int *)v1 + 8);
      v5 = v3 < v4;
      v3 -= v4;
      if (v5)
        break;
      v6 = (char *)*((_QWORD *)v1 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v1 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v1;
          v1 = (float *)v7;
        }
        while (!v8);
      }
      v1 = (float *)v7;
      if (v7 == v2)
        return 15.0;
    }
  }
  if (v1 == (float *)v2)
    return 15.0;
  else
    return v1[7];
}

float TI::Favonius::KeyboardLayout::median_key_half_height(TI::Favonius::KeyboardLayout *this)
{
  float *v1;
  char *v2;
  int64_t v3;
  int64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  BOOL v8;

  v1 = (float *)*((_QWORD *)this + 22);
  v2 = (char *)this + 184;
  if (v1 != (float *)((char *)this + 184))
  {
    v3 = (unint64_t)((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) >> 1;
    while (1)
    {
      v4 = *((int *)v1 + 8);
      v5 = v3 < v4;
      v3 -= v4;
      if (v5)
        break;
      v6 = (char *)*((_QWORD *)v1 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v1 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v1;
          v1 = (float *)v7;
        }
        while (!v8);
      }
      v1 = (float *)v7;
      if (v7 == v2)
        return 22.0;
    }
  }
  if (v1 == (float *)v2)
    return 22.0;
  else
    return v1[7];
}

float TI::Favonius::KeyboardLayout::get_horizontal_center(TI::Favonius::KeyboardLayout *this)
{
  BOOL IsNull;
  float result;

  IsNull = CGRectIsNull(*(CGRect *)((char *)this + 120));
  result = 0.0;
  if (!IsNull)
    return CGRectGetMidX(*(CGRect *)((char *)this + 120));
  return result;
}

BOOL TI::Favonius::KeyboardLayout::is_far_away_point(CGFloat *this, CGPoint a2)
{
  double y;
  double x;
  float v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  double v10;
  double v11;
  CGFloat MaxY;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  y = a2.y;
  x = a2.x;
  v5 = TI::Favonius::KeyboardLayout::median_key_half_height((TI::Favonius::KeyboardLayout *)this);
  v7 = this[15];
  v6 = this[16];
  v9 = this[17];
  v8 = this[18];
  v14.origin.x = v7;
  v14.origin.y = v6;
  v14.size.width = v9;
  v14.size.height = v8;
  if (x >= CGRectGetMinX(v14))
  {
    v16.origin.x = v7;
    v16.origin.y = v6;
    v16.size.width = v9;
    v16.size.height = v8;
    v10 = 0.0;
    if (CGRectGetMaxX(v16) < x)
    {
      v17.origin.x = v7;
      v17.origin.y = v6;
      v17.size.width = v9;
      v17.size.height = v8;
      v10 = x - CGRectGetMaxX(v17);
    }
  }
  else
  {
    v15.origin.x = v7;
    v15.origin.y = v6;
    v15.size.width = v9;
    v15.size.height = v8;
    v10 = CGRectGetMinX(v15) - x;
  }
  v18.origin.x = v7;
  v18.origin.y = v6;
  v18.size.width = v9;
  v18.size.height = v8;
  if (y >= CGRectGetMinY(v18))
  {
    v20.origin.x = v7;
    v20.origin.y = v6;
    v20.size.width = v9;
    v20.size.height = v8;
    MaxY = CGRectGetMaxY(v20);
    v11 = 0.0;
    if (MaxY < y)
    {
      v21.origin.x = v7;
      v21.origin.y = v6;
      v21.size.width = v9;
      v21.size.height = v8;
      v11 = y - CGRectGetMaxY(v21);
    }
  }
  else
  {
    v19.origin.x = v7;
    v19.origin.y = v6;
    v19.size.width = v9;
    v19.size.height = v8;
    v11 = CGRectGetMinY(v19) - y;
  }
  return hypot(v10, v11) > (float)(v5 * 4.0);
}

void KB::BoostPreferedFormForSortkey::~BoostPreferedFormForSortkey(KB::BoostPreferedFormForSortkey *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::BoostPreferedFormForSortkey::filter_description(KB::BoostPreferedFormForSortkey *this)
{
  return "BoostPreferedFormForSortkey";
}

void KB::BoostPreferedFormForSortkey::filter_candidates(KB::BoostPreferedFormForSortkey *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  uint64_t v4;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  const KB::String *v16;
  const KB::String *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  KB::Candidate *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  KB::Candidate *v39;
  __CFString *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const KB::CandidateFilterResources *v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  _WORD v48[3];
  char v49;
  void *v50;
  _QWORD v51[3];

  v51[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)) >= 2)
  {
    v9 = *((_QWORD *)a4 + 2);
    if (v9)
    {
      do
        v10 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v10 + 1, (unsigned int *)v9));
    }
    v47 = *(_QWORD *)(v9 + 8);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v9);
    v11 = KB::Candidate::num_words_preserving_input((_QWORD *)v4, a3, v47 + 144);
    if (v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 240 * v11;
      v15 = 1;
      do
      {
        KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)a3 + 1) + v12), (uint64_t)v48);
        if (KB::string_has_uppercase_characters((KB *)v48, v16)
          || KB::string_contains_surface_form_features((KB *)v48, v17))
        {
          v13 = v15;
        }
        if (v50 && v49 == 1)
          free(v50);
        v12 += 240;
        ++v15;
      }
      while (v14 != v12);
    }
    else
    {
      v13 = 0;
    }
    v18 = *(_QWORD *)a2;
    v19 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
    if (v19)
    {
      v44 = a4;
      v45 = 0;
      v20 = 0;
      v46 = 0x1CAC083126E978D5 * (v19 >> 3);
      do
      {
        v21 = (KB::Candidate *)(v18 + 1000 * v20);
        if (*(_QWORD *)v21 == *(_QWORD *)v4)
        {
          v22 = v18 + 1000 * v20;
          if (!*(_WORD *)(v22 + 888))
            KB::Candidate::compute_string(v21);
          if (!*(_WORD *)(v4 + 888))
            KB::Candidate::compute_string((KB::Candidate *)v4);
          v23 = *(_QWORD *)(v47 + 168);
          if (!v23)
            std::__throw_bad_function_call[abi:nn180100]();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 48))(v23, v22 + 888, v4 + 888))
          {
            if (*(_QWORD *)v21)
            {
              v24 = (int *)(*(_QWORD *)(v4 + 8) + 136);
              v25 = (int *)(*((_QWORD *)v21 + 1) + 136);
              v26 = 240 * *(_QWORD *)v21;
              while (1)
              {
                v28 = *v25;
                v25 += 60;
                v27 = v28;
                v29 = *v24;
                v24 += 60;
                if (v27 != v29)
                  break;
                v26 -= 240;
                if (!v26)
                  goto LABEL_28;
              }
            }
            else
            {
LABEL_28:
              if (KB::Candidate::num_words_preserving_input(v21, a3, v47 + 144) >= v13)
              {
                if (*(_QWORD *)v21 == v13)
                {
                  v30 = 0;
                }
                else
                {
                  v30 = 0;
                  v31 = -240 * v13 + 240 * *(_QWORD *)v21;
                  v32 = (unsigned int *)(*((_QWORD *)v21 + 1) + 240 * v13 + 104);
                  do
                  {
                    v33 = *v32;
                    v32 += 60;
                    v30 += (v33 >> 3) & 1;
                    v31 -= 240;
                  }
                  while (v31);
                }
                v34 = v45;
                v35 = v46;
                if (v45 < v30)
                  v35 = v20;
                v46 = v35;
                if (v45 <= v30)
                  v34 = v30;
                v45 = v34;
              }
            }
          }
        }
        ++v20;
        v18 = *(_QWORD *)a2;
        v36 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
      }
      while (v20 < v36);
      if (v46)
      {
        if (v46 < v36)
        {
          v37 = *(float *)(v18 + 744);
          v38 = v37 + logf(*((float *)this + 2) * 1.1);
          std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>((uint64_t *)v18, (uint64_t *)(v18 + 1000 * v46), (uint64_t *)(v18 + 1000 * v46 + 1000));
          v39 = *(KB::Candidate **)a2;
          *(float *)(*(_QWORD *)a2 + 744) = v38;
          v40 = (__CFString *)*((_QWORD *)v44 + 7);
          if (v40)
          {
            KB::Candidate::capitalized_string(v39, (uint64_t)v48);
            v42 = (const char *)v50;
            if (!v50)
              v42 = (const char *)v51;
            if (v48[0])
              v43 = v42;
            else
              v43 = "";
            KB::append_format(v40, (__CFString *)"[%s] %s\n", v41, v43, "filter_candidates");
            if (v50)
            {
              if (v49 == 1)
                free(v50);
            }
          }
        }
      }
    }
  }
}

void KB::BoostMinimumVariation::~BoostMinimumVariation(KB::BoostMinimumVariation *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::BoostMinimumVariation::filter_description(KB::BoostMinimumVariation *this)
{
  return "BoostMinimumVariation";
}

void KB::BoostMinimumVariation::filter_candidates(KB::BoostMinimumVariation *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  float *v4;
  const KB::String *v8;
  float v9;
  const KB::String *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  KB::Candidate *v16;
  uint64_t *v17;
  unsigned int v18;
  unint64_t v19;
  float *v20;
  const KB::String *v21;
  char *v22;
  KB *v23;
  const KB::String *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  float *v35;
  float v36;
  __CFString *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __int16 v49[3];
  char v50;
  void *v51;
  uint64_t v52;
  __int16 v53[3];
  char v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[8];
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = (float *)*a2;
  if (*a2 != a2[1])
  {
    if (!*((_WORD *)v4 + 444))
      KB::Candidate::compute_string(*a2);
    KB::String::String((KB::String *)v57, (const KB::String *)(v4 + 222));
    v9 = expf(v4[186]);
    if (!*((_WORD *)v4 + 444))
      KB::Candidate::compute_string((KB::Candidate *)v4);
    v11 = KB::count_word_medial_punctuation((KB *)(v4 + 222), v8);
    if (!*((_WORD *)v4 + 444))
      KB::Candidate::compute_string((KB::Candidate *)v4);
    v12 = KB::count_precomposed_diacritic_letters((KB *)(v4 + 222), v10);
    v13 = *((_QWORD *)a4 + 2);
    if (v13)
    {
      do
        v14 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v14 + 1, (unsigned int *)v13));
    }
    v15 = *(_QWORD *)(v13 + 8);
    WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v13);
    v16 = *a2;
    v17 = (uint64_t *)a2[1];
    if ((unint64_t)(0x1CAC083126E978D5 * (((char *)v17 - (char *)*a2) >> 3)) >= 2)
    {
      v45 = v15;
      v46 = 0;
      v47 = v15 + 144;
      v18 = v12 + v11;
      v19 = 1;
      do
      {
        v20 = (float *)((char *)v16 + 1000 * v19);
        if ((float)(expf(v20[186]) * *((float *)this + 2)) < v9)
          break;
        v22 = (char *)v16 + 1000 * v19;
        if (!*((_WORD *)v22 + 444))
          KB::Candidate::compute_string((KB::Candidate *)((char *)v16 + 1000 * v19));
        v23 = (KB *)(v22 + 888);
        v25 = KB::count_word_medial_punctuation((KB *)(v22 + 888), v21);
        if (!*(_WORD *)v23)
          KB::Candidate::compute_string((KB::Candidate *)v20);
        v26 = KB::count_precomposed_diacritic_letters(v23, v24) + v25;
        if (v26 < v18
          && KB::CandidateFilter::is_suggestible_for_input((uint64_t *)v20, a3, 1, (KB::BoostMinimumVariation *)((char *)this + 16), v47, 0))
        {
          if (!*(_QWORD *)v20)
            goto LABEL_67;
          v27 = 240 * *(_QWORD *)v20 - 240;
          v28 = (int *)(*((_QWORD *)v20 + 1) + 120);
          do
          {
            v30 = *v28;
            v28 += 60;
            v29 = v30;
            if (v30)
              v31 = 1;
            else
              v31 = v27 == 0;
            v27 -= 240;
          }
          while (!v31);
          if (!v29)
          {
LABEL_67:
            if (!*(_WORD *)v23)
              KB::Candidate::compute_string((KB::Candidate *)v20);
            v32 = *(_QWORD *)(v45 + 168);
            if (!v32)
            {
              std::__throw_bad_function_call[abi:nn180100]();
              JUMPOUT(0x1DA83CA6CLL);
            }
            v33 = (*(uint64_t (**)(uint64_t, KB *, _BYTE *))(*(_QWORD *)v32 + 48))(v32, v23, v57);
            if (v33)
              v18 = v26;
            v34 = v46;
            if (v33)
              v34 = v19;
            v46 = v34;
          }
        }
        v19 = (v19 + 1);
        v16 = *a2;
        v17 = (uint64_t *)a2[1];
      }
      while (0x1CAC083126E978D5 * (((char *)v17 - (char *)*a2) >> 3) > v19);
      if (v46)
      {
        v35 = (float *)((char *)v16 + 1000 * v46);
        v36 = expf(v35[186]);
        v35[186] = logf(v36 * *((float *)this + 2));
        v37 = (__CFString *)*((_QWORD *)a4 + 7);
        if (v37)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)((char *)v16 + 1000 * v46), (uint64_t)v53);
          v38 = (const char *)v55;
          if (!v55)
            v38 = (const char *)&v56;
          if (v53[0])
            v39 = v38;
          else
            v39 = "";
          KB::Candidate::capitalized_string((KB::Candidate *)v4, (uint64_t)v49);
          v41 = (const char *)v51;
          if (!v51)
            v41 = (const char *)&v52;
          if (v49[0])
            v42 = v41;
          else
            v42 = "";
          KB::append_format(v37, (__CFString *)"[%s] boosted over [%s] by %s\n", v40, v39, v42, "filter_candidates");
          if (v51 && v50 == 1)
            free(v51);
          if (v55 && v54 == 1)
            free(v55);
          v16 = *a2;
          v17 = (uint64_t *)a2[1];
        }
        v43 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((char *)v17 - (char *)v16) >> 3));
        if (v17 == (uint64_t *)v16)
          v44 = 0;
        else
          v44 = v43;
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,KB::Candidate *,false>((unint64_t)v16, v17, v44, 1);
      }
    }
    if (v58)
    {
      if (v57[6] == 1)
        free(v58);
    }
  }
}

void KB::BoostCaseVariantsOfTopCandidate::~BoostCaseVariantsOfTopCandidate(KB::BoostCaseVariantsOfTopCandidate *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::BoostCaseVariantsOfTopCandidate::filter_description(KB::BoostCaseVariantsOfTopCandidate *this)
{
  return "BoostCaseVariantsOfTopCandidate";
}

void KB::BoostCaseVariantsOfTopCandidate::filter_candidates(KB::BoostCaseVariantsOfTopCandidate *this, float **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  float *v4;
  float *v5;
  int v8;
  unsigned int v9;
  uint64_t v10;
  __CFString *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  __CFString *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  _WORD v29[3];
  char v30;
  void *v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5 && (unint64_t)(0x1CAC083126E978D5 * (((char *)v5 - (char *)v4) >> 3)) >= 2)
  {
    v8 = 0;
    v9 = 2;
    v10 = 1;
    do
    {
      if (KB::BoostCaseVariantsOfTopCandidate::is_last_word_case_variant((KB::BoostCaseVariantsOfTopCandidate *)v4, (const KB::Candidate *)&v4[250 * v10], a3))
      {
        v11 = (__CFString *)*((_QWORD *)a4 + 7);
        if (v11)
        {
          KB::Candidate::capitalized_string((KB::Candidate *)&(*a2)[250 * v10], (uint64_t)v29);
          v13 = (const char *)v31;
          if (!v31)
            v13 = (const char *)v32;
          v14 = "";
          if (v29[0])
            v14 = v13;
          KB::append_format(v11, (__CFString *)"[%s] boosted capital case variant to the next spot that isn't a capital case variant\n", v12, v14);
          if (v31 && v30 == 1)
            free(v31);
        }
        v15 = (uint64_t *)&(*a2)[250 * v8 + 250];
        v16 = (uint64_t *)&(*a2)[250 * v10];
        if (v15 != v16)
          std::__rotate_forward[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<KB::Candidate *>>(v15, v16, v16 + 125);
        ++v8;
      }
      v10 = v9;
      v4 = *a2;
      v17 = 0x1CAC083126E978D5 * (((char *)a2[1] - (char *)*a2) >> 3);
    }
    while (v17 > v9++);
    if (v8)
    {
      v19 = (v8 + 1);
      if (v17 > v19 && v19 >= 2)
      {
        v20 = v4[186];
        v21 = (float)(v4[250 * v19 + 186] - v20) / (float)v19;
        v22 = 1;
        v23 = 250;
        do
        {
          v24 = &(*a2)[v23];
          v24[186] = v20 + (float)((float)v22 * v21);
          v25 = (__CFString *)*((_QWORD *)a4 + 7);
          if (v25)
          {
            KB::Candidate::capitalized_string((KB::Candidate *)v24, (uint64_t)v29);
            v27 = (const char *)v31;
            if (!v31)
              v27 = (const char *)v32;
            v28 = "";
            if (v29[0])
              v28 = v27;
            KB::append_format(v25, (__CFString *)"[%s] updated omega after boost so order will be preserved after sort\n", v26, v28);
            if (v31)
            {
              if (v30 == 1)
                free(v31);
            }
          }
          ++v22;
          v23 += 250;
        }
        while (v19 != v22);
      }
    }
  }
}

BOOL KB::BoostCaseVariantsOfTopCandidate::is_last_word_case_variant(KB::BoostCaseVariantsOfTopCandidate *this, const KB::Candidate *a2, const KB::Candidate *a3)
{
  BOOL v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 v9;
  _BYTE v11[6];
  char v12;
  void *v13;
  _BYTE v14[6];
  char v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)this)
    v3 = *(_DWORD *)this == *(_DWORD *)a2;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v6 = 0;
  v7 = 0;
  while (++v7 < (unint64_t)*(_QWORD *)this)
  {
    KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)this + 1) + v6), (uint64_t)v14);
    KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)a2 + 1) + v6), (uint64_t)v11);
    v8 = KB::String::equal((KB::String *)v14, (const KB::String *)v11, 1);
    if (v13 && v12 == 1)
      free(v13);
    if (v16 && v15 == 1)
      free(v16);
    v6 += 240;
    if (!v8)
      return 0;
  }
  KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)this + 1) + 240 * *(_QWORD *)this - 240), (uint64_t)v14);
  KB::Word::capitalized_string((KB::Word *)(*((_QWORD *)a2 + 1) + 240 * *(_QWORD *)a2 - 240), (uint64_t)v11);
  v9 = KB::String::equal((KB::String *)v14, (const KB::String *)v11, 0);
  if (v13 && v12 == 1)
    free(v13);
  if (v16 && v15 == 1)
    free(v16);
  return v9;
}

void KB::ExemptHighFrequencyWordsFromNoSuggest::~ExemptHighFrequencyWordsFromNoSuggest(KB::ExemptHighFrequencyWordsFromNoSuggest *this)
{
  JUMPOUT(0x1DF0A2144);
}

const char *KB::ExemptHighFrequencyWordsFromNoSuggest::filter_description(KB::ExemptHighFrequencyWordsFromNoSuggest *this)
{
  return "ExemptHighFrequencyWordsFromNoSuggest";
}

void KB::ExemptHighFrequencyWordsFromNoSuggest::filter_candidates(KB::ExemptHighFrequencyWordsFromNoSuggest *this, KB::CandidateCollection *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __CFString *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;
  _QWORD *v15;
  KB::Word *v16;
  uint64_t v17;
  int v18;
  __CFString *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  _QWORD *v24;
  _WORD v25[3];
  char v26;
  void *v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v24 = (_QWORD *)*((_QWORD *)a2 + 1);
  if (*(_QWORD **)a2 == v24)
    return;
  v6 = 0;
  do
  {
    if (*v4)
    {
      v7 = v4[1];
      v8 = 240 * *v4;
      while (1)
      {
        v9 = *(_DWORD *)(v7 + 104);
        if ((v9 & 0x86) == 0)
          goto LABEL_15;
        if (*(float *)(v7 + 56) > 0.00001)
          break;
LABEL_16:
        v7 += 240;
        v8 -= 240;
        if (!v8)
          goto LABEL_17;
      }
      *(_DWORD *)(v7 + 104) = v9 & 0xFFFFFF79;
      v10 = (__CFString *)*((_QWORD *)a4 + 7);
      if (v10)
      {
        KB::Word::capitalized_string((KB::Word *)v7, (uint64_t)v25);
        v12 = (const char *)v27;
        if (!v27)
          v12 = (const char *)v28;
        v13 = "";
        if (v25[0])
          v13 = v12;
        KB::append_format(v10, (__CFString *)"[%s] updated no-suggest/no-predict flags for high frequency words\n", v11, v13);
        if (v27 && v26 == 1)
          free(v27);
      }
LABEL_15:
      ++v6;
      goto LABEL_16;
    }
LABEL_17:
    v4 += 125;
  }
  while (v4 != v24);
  if (!v6)
  {
    v14 = *(_QWORD **)a2;
    v15 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (*(_QWORD **)a2 != v15)
    {
      do
      {
        if (*v14)
        {
          v16 = (KB::Word *)v14[1];
          v17 = 240 * *v14;
          do
          {
            v18 = *((_DWORD *)v16 + 26);
            if ((v18 & 0x86) != 0)
            {
              *((_DWORD *)v16 + 26) = v18 & 0xFFFFFF79;
              v19 = (__CFString *)*((_QWORD *)a4 + 7);
              if (v19)
              {
                KB::Word::capitalized_string(v16, (uint64_t)v25);
                v21 = (const char *)v27;
                if (!v27)
                  v21 = (const char *)v28;
                v22 = "";
                if (v25[0])
                  v22 = v21;
                KB::append_format(v19, (__CFString *)"[%s] updated no-suggest/no-predict flags as there are no other suggestable candidates\n", v20, v22);
                if (v27)
                {
                  if (v26 == 1)
                    free(v27);
                }
              }
            }
            v16 = (KB::Word *)((char *)v16 + 240);
            v17 -= 240;
          }
          while (v17);
        }
        v14 += 125;
      }
      while (v14 != v15);
    }
  }
}

void KB::RescoreShortWords::~RescoreShortWords(KB::RescoreShortWords *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA101388;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA101388;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1DF0A2144);
}

const char *KB::RescoreShortWords::filter_description(KB::RescoreShortWords *this)
{
  return "RescoreShortWords";
}

void KB::RescoreShortWords::filter_candidates(KB::RescoreShortWords *this, KB::Candidate **a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4)
{
  KB::Candidate *v4;
  KB::Candidate *v5;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v17;
  KB::Candidate *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t);
  void *v24;
  KB::RescoreShortWords *v25;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)v4;
      v11 = *((_QWORD *)v4 + 1);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 0x40000000;
      v23 = ___ZNK2KB17RescoreShortWords17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke;
      v24 = &__block_descriptor_tmp_10780;
      v25 = this;
      if (v10)
      {
        v12 = 0;
        v13 = 240 * v10;
        do
        {
          v12 += ((uint64_t (*)(_QWORD *, uint64_t))v23)(v22, v11);
          v11 += 240;
          v13 -= 240;
        }
        while (v13);
        v14 = v12 == 0;
        v15 = 1 << v12;
        if (!v14 && v15 >= 2)
        {
          v17 = 1;
          do
            v9 |= KB::RescoreShortWords::update_candidate_probability_by_replacing_short_words_using_mask(this, v4, a3, a4, v17++);
          while (v15 != v17);
        }
      }
      v4 = (KB::Candidate *)((char *)v4 + 1000);
    }
    while (v4 != v5);
    if ((v9 & 1) != 0)
    {
      v18 = a2[1];
      v19 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((v18 - *a2) >> 3));
      if (v18 == *a2)
        v20 = 0;
      else
        v20 = v19;
      std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>((uint64_t *)*a2, v18, v20, 1);
    }
  }
}

uint64_t KB::RescoreShortWords::update_candidate_probability(KB::RescoreShortWords *this, KB::Word **a2, KB::Candidate *a3, const KB::CandidateFilterLookupContext *a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 4);
  if (v5)
    return (*(uint64_t (**)(uint64_t, KB::Word **, KB::Candidate *, const KB::CandidateFilterLookupContext *, const KB::CandidateFilterResources *))(*(_QWORD *)v5 + 48))(v5, a2, a3, a4, a5);
  else
    return KB::RescoreShortWords::update_candidate_probability_if_better(0, a2, a3, a4, a5);
}

BOOL KB::RescoreShortWords::is_word_replaceable(KB::RescoreShortWords *this, const KB::Word *a2)
{
  char *v3;
  char *v4;
  _BOOL8 v5;
  void *__p[2];
  char v8;

  if (!TIIsLexiconIDEnglish(*((_DWORD *)a2 + 34)))
    return 0;
  v3 = (char *)*((_QWORD *)a2 + 1);
  if (!v3)
    v3 = (char *)a2 + 16;
  if (*(_WORD *)a2)
    v4 = v3;
  else
    v4 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v4);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((uint64_t)__p) != 0;
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

uint64_t KB::RescoreShortWords::update_candidate_probability_if_better(KB::RescoreShortWords *this, KB::Word **a2, KB::Candidate *a3, const KB::CandidateFilterLookupContext *a4, const KB::CandidateFilterResources *a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  KB::Word *v26;
  KB::Word *v27;
  _BOOL4 is_linguistically_void;
  _BOOL4 v29;
  __int16 v30;
  __int16 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int16 v39;
  __int16 v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  KB::Candidate *v45;
  KB::Candidate *v46;
  char *v47;
  int64_t v48;
  char *v49;
  char *v50;
  void **v51;
  void **v52;
  uint64_t v53;
  void **v54;
  char *v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  float *v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  char *v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  uint64_t v78;
  const char *v79;
  BOOL v80;
  const KB::CandidateFilterLookupContext *v82;
  KB::Candidate *v83;
  KB::Candidate *v84;
  const KB::CandidateFilterResources *v85;
  int v86;
  void **v87[3];
  _QWORD v88[3];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  void ***v93;
  void **v94;
  void *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a5 + 3);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a5 + 4);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9)
  {
    v13 = *((_QWORD *)a5 + 3);
    v14 = (std::__shared_weak_count *)*((_QWORD *)a5 + 4);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) ^ 1;
    if (v14)
    {
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v17 = 1;
  }
  if (v10)
  {
    v20 = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((v17 & 1) != 0)
        return 0;
LABEL_21:
      v82 = a4;
      v83 = (KB::Candidate *)a2;
      v84 = a3;
      v85 = a5;
      if (*a2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = a2[1];
        v27 = (KB::Word *)((char *)v26 + 240 * (_QWORD)*a2);
        do
        {
          is_linguistically_void = KB::Word::is_linguistically_void(v26);
          v29 = is_linguistically_void;
          v30 = !is_linguistically_void;
          if ((unint64_t)v24 >= v23)
          {
            v33 = v24 - v25;
            if (v24 - v25 <= -3)
              goto LABEL_96;
            v34 = v33 >> 1;
            if (v23 - (unint64_t)v25 <= (v33 >> 1) + 1)
              v35 = v34 + 1;
            else
              v35 = v23 - (_QWORD)v25;
            if (v23 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFELL)
              v36 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v36 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v36);
            else
              v37 = 0;
            v38 = (char *)(v36 + 2 * v34);
            if (v29)
              v39 = 256;
            else
              v39 = 0;
            *(_WORD *)v38 = v39 | v30;
            v32 = v38 + 2;
            if (v24 != v25)
            {
              do
              {
                v40 = *((_WORD *)v24 - 1);
                v24 -= 2;
                *((_WORD *)v38 - 1) = v40;
                v38 -= 2;
              }
              while (v24 != v25);
              v24 = v25;
            }
            v25 = v38;
            v23 = v36 + 2 * v37;
            if (v24)
              operator delete(v24);
          }
          else
          {
            if (is_linguistically_void)
              v31 = 256;
            else
              v31 = 0;
            *(_WORD *)v24 = v31 | v30;
            v32 = v24 + 2;
          }
          v26 = (KB::Word *)((char *)v26 + 240);
          v24 = v32;
        }
        while (v26 != v27);
      }
      else
      {
        v32 = 0;
        v25 = 0;
      }
      v91 = 0uLL;
      v92 = 0;
      v42 = *((_QWORD *)v85 + 3);
      v41 = (std::__shared_weak_count *)*((_QWORD *)v85 + 4);
      if (v41)
      {
        v43 = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = v84;
      KB::Candidate::Candidate((KB::Candidate *)&v94, v84);
      v46 = (KB::Candidate *)operator new(0x3E8uLL);
      v47 = (char *)v46 + 1000;
      v88[0] = v46;
      v88[2] = (char *)v46 + 1000;
      KB::Candidate::Candidate(v46, (const KB::Candidate *)&v94);
      v88[1] = v47;
      v48 = v32 - v25;
      if (v32 == v25)
      {
        v49 = 0;
        v50 = 0;
      }
      else
      {
        if (v32 - v25 < 0)
LABEL_96:
          abort();
        v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::TokenMetadata>>(v48 >> 1);
        memmove(v49, v25, v48);
        v50 = &v49[v48];
      }
      v51 = (void **)operator new(0x18uLL);
      v52 = v51 + 3;
      v87[0] = v51;
      v87[2] = v51 + 3;
      v51[1] = 0;
      v51[2] = 0;
      *v51 = 0;
      v53 = v50 - v49;
      if (v50 != v49)
      {
        v54 = v51;
        std::vector<language_modeling::v1::TokenMetadata>::__vallocate[abi:nn180100](v51, v53 >> 1);
        v55 = (char *)v54[1];
        memmove(v55, v49, v50 - v49);
        v56 = &v55[v53];
        v45 = v84;
        v54[1] = v56;
      }
      v87[1] = v52;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *, void ***, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v42 + 408))(&v89, v42, v88, v87, (uint64_t)v82 + 2032, *((_QWORD *)v85 + 7), 0);
      v91 = v89;
      v92 = v90;
      v90 = 0;
      v89 = 0uLL;
      v93 = (void ***)&v89;
      std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
      v93 = v87;
      std::vector<std::vector<language_modeling::v1::TokenMetadata>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v93);
      if (v49)
        operator delete(v49);
      v87[0] = (void **)v88;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v87);
      KB::Candidate::~Candidate((KB::Candidate *)&v94);
      if (v41)
      {
        v57 = (unint64_t *)&v41->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v59 = (uint64_t *)v91;
      if (*((_QWORD *)&v91 + 1) != (_QWORD)v91)
      {
        v60 = *(float **)v91;
        v61 = *(_QWORD *)(v91 + 8) - *(_QWORD *)v91;
        if (v61)
        {
          v62 = v61 / 40;
          if (v62 <= 1)
            v62 = 1;
          v63 = 1.0;
          v64 = v25;
          do
          {
            v65 = *v64;
            v64 += 2;
            if (v65)
              v63 = v63 * *v60;
            v60 += 10;
            --v62;
          }
          while (v62);
          if (!*((_WORD *)v45 + 444))
            KB::Candidate::compute_string(v45);
          v66 = logf(v63);
          if (v66 <= *((float *)v83 + 188))
          {
            v22 = 0;
          }
          else
          {
            v67 = *((float *)v45 + 187);
            v68 = *((float *)v45 + 189);
            v69 = *((float *)v45 + 190);
            v86 = *((_DWORD *)v45 + 193);
            v70 = *(_QWORD *)((char *)v45 + 764);
            *((float *)v83 + 186) = v67 + (float)(v69 * (float)(v66 + v68));
            *((float *)v83 + 187) = v67;
            *((float *)v83 + 188) = v66;
            *((float *)v83 + 189) = v68;
            *((float *)v83 + 190) = v69;
            *(_QWORD *)((char *)v83 + 764) = v70;
            *((_DWORD *)v83 + 193) = v86;
            v71 = *v59;
            if (v59[1] != *v59)
            {
              v72 = 0;
              v73 = 0;
              v74 = 0;
              v75 = *((_QWORD *)v83 + 1);
              do
              {
                v76 = (int *)(v71 + v72);
                v77 = *v76;
                v78 = v75 + v73;
                *(_DWORD *)(v75 + v73 + 56) = v76[1];
                v79 = (const char *)(v76 + 4);
                if (*((char *)v76 + 39) < 0)
                  v79 = *(const char **)v79;
                KB::String::String((KB::String *)&v94, v79);
                KB::String::operator=((KB::String *)(v78 + 64), (KB::String *)&v94);
                if (v95)
                  v80 = BYTE6(v94) == 1;
                else
                  v80 = 0;
                if (v80)
                  free(v95);
                v75 = *((_QWORD *)v83 + 1);
                *(_DWORD *)(v75 + v73 + 52) = v77;
                ++v74;
                v71 = *v59;
                v73 += 240;
                v72 += 40;
              }
              while (v74 < 0xCCCCCCCCCCCCCCCDLL * ((v59[1] - *v59) >> 3));
              v22 = 1;
LABEL_89:
              v94 = (void **)&v91;
              std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100](&v94);
              if (!v25)
                return v22;
              goto LABEL_94;
            }
            v22 = 1;
          }
          v94 = (void **)&v91;
          std::vector<std::vector<KB::LikelihoodInfo>>::__destroy_vector::operator()[abi:nn180100](&v94);
LABEL_94:
          operator delete(v25);
          return v22;
        }
      }
      v22 = 0;
      goto LABEL_89;
    }
  }
  if ((v17 & 1) == 0)
    goto LABEL_21;
  return 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(uint64_t a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v1 = (unsigned __int8 *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v3 = v2;
  }
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v3);
  v5 = *((_QWORD *)&KB::RescoreShortWords::short_word_map + 1);
  if (!*((_QWORD *)&KB::RescoreShortWords::short_word_map + 1))
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&KB::RescoreShortWords::short_word_map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *((_QWORD *)&KB::RescoreShortWords::short_word_map + 1))
      v9 = v4 % *((_QWORD *)&KB::RescoreShortWords::short_word_map + 1);
  }
  else
  {
    v9 = (*((_QWORD *)&KB::RescoreShortWords::short_word_map + 1) - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(KB::RescoreShortWords::short_word_map + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v1))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= v5)
          v12 %= v5;
      }
      else
      {
        v12 &= v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t ___ZNK2KB17RescoreShortWords17filter_candidatesERNS_19CandidateCollectionERKNS_28CandidateFilterLookupContextERKNS_24CandidateFilterResourcesE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
}

uint64_t KB::RescoreShortWords::update_candidate_probability_by_replacing_short_words_using_mask(KB::RescoreShortWords *this, KB::Candidate *a2, const KB::CandidateFilterLookupContext *a3, const KB::CandidateFilterResources *a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  const char *v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t updated;
  void *__p[2];
  char v24;
  _BYTE v25[8];
  void *v26;
  _BYTE v27[240];
  _BYTE v28[8];
  void *v29;
  unsigned __int16 v30[444];
  _WORD v31[56];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  KB::Candidate::Candidate((KB::Candidate *)v30, a2);
  KB::Candidate::clear((KB::Candidate *)v30);
  if (*(_QWORD *)a2)
  {
    v9 = 0;
    v10 = *((_QWORD *)a2 + 1);
    v11 = v10 + 240 * *(_QWORD *)a2;
    while (TIIsLexiconIDEnglish(*(_DWORD *)(v10 + 136)))
    {
      if (*(_WORD *)v10)
      {
        if (*(_QWORD *)(v10 + 8))
          v12 = *(char **)(v10 + 8);
        else
          v12 = (char *)(v10 + 16);
      }
      else
      {
        v12 = "";
      }
      std::string::basic_string[abi:nn180100]<0>(__p, v12);
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((uint64_t)__p);
      if (v14)
      {
        v13 = (v9 + 1);
        if (((a5 >> v9) & 1) != 0)
        {
          v15 = (const char *)(v14 + 40);
          if ((char)v14[63] < 0)
            v15 = *(const char **)v15;
          KB::String::String((KB::String *)v28, v15);
          v16 = (unsigned int *)*((_QWORD *)a4 + 2);
          if (v16)
          {
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
          }
          KB::String::String((KB::String *)v25, (const KB::String *)v28);
          KB::DictionaryContainer::word_with_string((KB::StaticDictionary **)v16, (const KB::String *)v25, *(_DWORD *)(v10 + 136), (KB::Word *)v27);
          if (v26)
            v18 = v25[6] == 1;
          else
            v18 = 0;
          if (v18)
            free(v26);
          if (v16)
            WTF::RefCounted<KB::DictionaryContainer>::deref(v16);
          KB::Candidate::append(v30, (const KB::Word *)v27);
          KB::Word::~Word((KB::Word *)v27);
          if (v29 && v28[6] == 1)
            free(v29);
          v19 = 0;
        }
        else
        {
          v19 = 1;
        }
      }
      else
      {
        v19 = 1;
        v13 = v9;
      }
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (!v19)
          goto LABEL_33;
        goto LABEL_32;
      }
      if (v19)
        goto LABEL_32;
LABEL_33:
      v10 += 240;
      v9 = v13;
      if (v10 == v11)
        goto LABEL_37;
    }
    v13 = v9;
LABEL_32:
    KB::Candidate::append(v30, (const KB::Word *)v10);
    goto LABEL_33;
  }
LABEL_37:
  if (!*((_WORD *)a2 + 444))
    KB::Candidate::compute_string(a2);
  if (!v31[0])
    KB::Candidate::compute_string((KB::Candidate *)v30);
  if (v30 == (unsigned __int16 *)a2
    || KB::String::equal((KB::Candidate *)((char *)a2 + 888), (const KB::String *)v31, 1))
  {
    updated = 0;
  }
  else
  {
    updated = KB::RescoreShortWords::update_candidate_probability(this, (KB::Word **)a2, (KB::Candidate *)v30, a3, a4);
  }
  KB::Candidate::~Candidate((KB::Candidate *)v30);
  return updated;
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void TI::TIInputRecognizer::~TIInputRecognizer(TI::TIInputRecognizer *this)
{
  TI::TIInputRecognizer::~TIInputRecognizer(this);
  JUMPOUT(0x1DF0A2144);
}

{
  void *v2;
  const void *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void **v10;

  *(_QWORD *)this = &off_1EA1013D0;
  if (*((_BYTE *)this + 232) && *((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  v10 = (void **)((char *)this + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v10);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::TIInputRecognizer *)((char *)this + 176));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::TIInputRecognizer *)((char *)this + 168));
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 104);
  if (*((_QWORD *)this + 10))
  {
    std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
    operator delete(*((void **)this + 10));
  }
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 9) = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 8) = 0;
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  v5 = (unsigned int *)*((_QWORD *)this + 5);
  if (v5)
  {
    v6 = v5 + 2;
    v7 = atomic_load(v5 + 2);
    if (v7 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 40))(v5);
    }
    else
    {
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
    }
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  *(_QWORD *)this = off_1EA1056B8;
  v9 = *((_QWORD *)this + 1);
  if (v9)
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v9);
}

uint64_t TI::TIInputRecognizer::get_recognizer_type(TI::TIInputRecognizer *this)
{
  return 1;
}

uint64_t TI::TIInputRecognizer::recognitionSources(TI::TIInputRecognizer *this)
{
  return 2;
}

void TI::TIInputRecognizer::add_touch(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)(a1 + 80));
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(v8 + 200);
  v10 = (unint64_t)((uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3) >> 1;
  if (v9 > 0xB || v10 < v9)
  {
    *(double *)(a1 + 248) = a3;
    *(double *)(a1 + 256) = a4;
    *(_DWORD *)(a1 + 264) = a2;
    if (*(_QWORD *)(a1 + 240) != 1)
    {
      if (*(_QWORD *)(a1 + 72))
        ITTouchTranscoderSessionAddEventWithTouchKeyInfo();
    }
  }
}

uint64_t TI::TIInputRecognizer::touch_stage(TI::TIInputRecognizer *this)
{
  return *((unsigned int *)this + 66);
}

double TI::TIInputRecognizer::last_touch(TI::TIInputRecognizer *this)
{
  return *((double *)this + 31);
}

double TI::TIInputRecognizer::path_length(TI::TIInputRecognizer *this)
{
  return 0.0;
}

void TI::TIInputRecognizer::generate_candidates(_QWORD *a1, uint64_t *a2, int a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
  {
    CFRetain(Mutable);
    TI::TIInputRecognizer::generate_candidates((uint64_t)a1);
    CFRelease(v7);
  }
  else
  {
    TI::TIInputRecognizer::generate_candidates((uint64_t)a1);
  }
  v8 = (uint64_t *)a1[10];
  v9 = (uint64_t *)a1[11];
  while (v8 != v9)
  {
    v10 = *v8++;
    TI::TIInputRecognizer::addCandidatesForITCandidate(a1, a2, v10, a3);
  }
  if (v7)
    CFRelease(v7);
}

uint64_t TI::TIInputRecognizer::text_accepted_from_UI(TI::TIInputRecognizer *this, const KB::String *a2, const KB::String *a3)
{
  uint64_t result;
  const KB::DynamicDictionary *v5;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    v5 = *(const KB::DynamicDictionary **)(*(_QWORD *)(*(uint64_t (**)(uint64_t, const KB::String *, const KB::String *))(*(_QWORD *)result + 48))(result, a2, a3)+ 24);
    return TI::TIInputRecognizer::load_lexicons_if_needed((uint64_t)this, v5);
  }
  return result;
}

_QWORD *TI::TIInputRecognizer::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<KB::LanguageModel>::operator=[abi:nn180100]((_QWORD *)(a1 + 48), *a2, a2[1]);
}

uint64_t TI::TIInputRecognizer::set_context(TI::TIInputRecognizer *this, const KB::LanguageModelContext *a2)
{
  return KB::LanguageModelContext::operator=((uint64_t)this + 104, (uint64_t *)a2);
}

void TI::TIInputRecognizer::update_transcoder(TI::TIInputRecognizer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  void (*v8)(uint64_t, uint64_t);
  void *v9;
  _QWORD *v10;
  void ***v11;
  void **v12[5];
  void *__p;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[3];

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x4002000000;
  v16[3] = __Block_byref_object_copy__10789;
  v16[4] = __Block_byref_object_dispose__10790;
  memset(v17, 0, sizeof(v17));
  v12[0] = 0;
  v12[1] = (void **)v12;
  v12[2] = (void **)0x4002000000;
  v12[3] = (void **)__Block_byref_object_copy__1;
  v12[4] = (void **)__Block_byref_object_dispose__2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  v2 = *((_QWORD *)this + 1);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v8 = ___ZN2TI17TIInputRecognizer17update_transcoderEv_block_invoke;
  v9 = &unk_1EA101478;
  v10 = v16;
  v11 = v12;
  v3 = *(_QWORD *)(v2 + 8);
  for (i = *(_QWORD *)(v2 + 16); v3 != i; v3 += 8)
    v8((uint64_t)v7, v3);
  if (*((_QWORD *)this + 8))
  {
    ITTouchTranscoderUpdateKeyboardLayout();
  }
  else
  {
    TI::TIInputRecognizer::create_transcoder((uint64_t)this);
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      TI::TIInputRecognizer::load_lexicons_if_needed((uint64_t)this, *(const KB::DynamicDictionary **)(*(_QWORD *)v6 + 24));
    }
    TI::TIInputRecognizer::create_transcoder_session(this);
  }
  _Block_object_dispose(v12, 8);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v16, 8);
  v12[0] = (void **)v17;
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](v12);
}

__n128 __Block_byref_object_copy__10789(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__10790(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

__n128 __Block_byref_object_copy__1(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN2TI17TIInputRecognizer17update_transcoderEv_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  CFTypeRef *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  CFTypeRef v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  char *v20;
  const void *v21;
  const void *v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  CFTypeRef cf;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  KB::cf_string_impl<KB::String>((CFStringRef *)&cf, (unsigned __int16 *)(*(_QWORD *)a2 + 8));
  v6 = (CFTypeRef *)v4[6];
  v5 = v4[7];
  if ((unint64_t)v6 >= v5)
  {
    v7 = (_QWORD *)v4[5];
    v8 = v6 - (CFTypeRef *)v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      goto LABEL_43;
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        goto LABEL_44;
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = cf;
    cf = 0;
    *(_QWORD *)v13 = v14;
    v15 = v13 + 8;
    while (v6 != v7)
    {
      v16 = (uint64_t)*--v6;
      *v6 = 0;
      *((_QWORD *)v13 - 1) = v16;
      v13 -= 8;
    }
    v17 = *(_OWORD *)(v4 + 5);
    v4[5] = v13;
    v4[6] = v15;
    v4[7] = &v12[8 * v11];
    v18 = (char *)*((_QWORD *)&v17 + 1);
    v19 = (char *)v17;
    if (*((_QWORD *)&v17 + 1) != (_QWORD)v17)
    {
      v20 = (char *)*((_QWORD *)&v17 + 1);
      do
      {
        v22 = (const void *)*((_QWORD *)v20 - 1);
        v20 -= 8;
        v21 = v22;
        if (v22)
          CFRelease(v21);
        *((_QWORD *)v18 - 1) = 0;
        v18 = v20;
      }
      while (v20 != v19);
    }
    if (v19)
      operator delete(v19);
    v23 = cf;
    v4[6] = v15;
    if (v23)
      CFRelease(v23);
  }
  else
  {
    *v6 = cf;
    v4[6] = v6 + 1;
  }
  v25 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v24 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v27 = *(_QWORD *)(*(_QWORD *)a2 + 64);
  v26 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  v29 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v28 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48) - 8);
  v31 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v33 = (_QWORD *)v31[6];
  v32 = v31[7];
  if ((unint64_t)v33 < v32)
  {
    *v33 = v25;
    v33[1] = v24;
    v33[2] = v27;
    v33[3] = v26;
    v33[4] = v29;
    v33[5] = v28;
    v34 = v33 + 7;
    v33[6] = v30;
    goto LABEL_42;
  }
  v35 = (_QWORD *)v31[5];
  v36 = 0x6DB6DB6DB6DB6DB7 * (v33 - v35) + 1;
  if (v36 > 0x492492492492492)
LABEL_43:
    abort();
  v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - (_QWORD)v35) >> 3);
  if (2 * v37 > v36)
    v36 = 2 * v37;
  if (v37 >= 0x249249249249249)
    v38 = 0x492492492492492;
  else
    v38 = v36;
  if (!v38)
  {
    v39 = 0;
    goto LABEL_37;
  }
  if (v38 > 0x492492492492492)
LABEL_44:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v39 = (char *)operator new(56 * v38);
LABEL_37:
  v40 = &v39[8 * (v33 - v35)];
  *(_QWORD *)v40 = v25;
  *((_QWORD *)v40 + 1) = v24;
  *((_QWORD *)v40 + 2) = v27;
  *((_QWORD *)v40 + 3) = v26;
  *((_QWORD *)v40 + 4) = v29;
  *((_QWORD *)v40 + 5) = v28;
  *((_QWORD *)v40 + 6) = v30;
  v34 = v40 + 56;
  if (v33 != v35)
  {
    do
    {
      v41 = *(_OWORD *)(v33 - 7);
      v42 = *(_OWORD *)(v33 - 5);
      v43 = *(_OWORD *)(v33 - 3);
      *((_QWORD *)v40 - 1) = *(v33 - 1);
      *(_OWORD *)(v40 - 24) = v43;
      *(_OWORD *)(v40 - 40) = v42;
      *(_OWORD *)(v40 - 56) = v41;
      v40 -= 56;
      v33 -= 7;
    }
    while (v33 != v35);
    v33 = (_QWORD *)v31[5];
  }
  v31[5] = v40;
  v31[6] = v34;
  v31[7] = &v39[56 * v38];
  if (v33)
    operator delete(v33);
LABEL_42:
  v31[6] = v34;
}

void TI::TIInputRecognizer::create_transcoder(uint64_t a1)
{
  const char *v2;
  BOOL v3;
  __CFDictionary *Mutable;
  void *v5;
  const void **v6;
  char **v7;
  const __CFAllocator *Default;
  char *v9;
  CFStringRef v10;
  CFURLRef v11;
  uint64_t v12;
  const void *v13;
  CFStringRef v14;
  uint64_t v15;
  const char *v16;
  CFStringRef URLString;
  void *value;
  _BYTE __p[22];
  __int16 v20;
  CFStringRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v2 = *(const char **)v2;
  KB::String::String((KB::String *)__p, v2);
  KB::cf_string_impl<KB::String>((CFStringRef *)&value, (unsigned __int16 *)__p);
  if (*(_QWORD *)&__p[8])
    v3 = __p[6] == 1;
  else
    v3 = 0;
  if (v3)
    free(*(void **)&__p[8]);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = value;
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC58], value);
  if (*(_QWORD *)(a1 + 240))
    v6 = (const void **)MEMORY[0x1E0D3AC48];
  else
    v6 = (const void **)MEMORY[0x1E0D3AC40];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC38], *v6);
  if (*(_BYTE *)(a1 + 232))
  {
    if (*(char *)(a1 + 231) < 0)
    {
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_26;
    }
    else if (!*(_BYTE *)(a1 + 231))
    {
      goto LABEL_26;
    }
    v7 = (char **)(a1 + 208);
    Default = CFAllocatorGetDefault();
    v9 = (char *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
      v9 = *v7;
    std::string::basic_string[abi:nn180100]<0>(__p, v9);
    KB::cf_string(__p, &URLString);
    v10 = URLString;
    v11 = CFURLCreateWithString(Default, URLString, 0);
    if (v10)
      CFRelease(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(*(void **)__p);
      if (v11)
        goto LABEL_23;
    }
    else if (v11)
    {
LABEL_23:
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC30], v11);
      CFRelease(v11);
      goto LABEL_26;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 231) < 0)
        v7 = (char **)*v7;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = "create_transcoder";
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v7;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s  Failed to create CFURL from url string: %s, will be using the default bundle.", __p, 0x16u);
    }
  }
LABEL_26:
  URLString = 0;
  v12 = ITTouchTranscoderCreateWithKeyboardLayout();
  v13 = *(const void **)(a1 + 64);
  if (v13)
    CFRelease(v13);
  *(_QWORD *)(a1 + 64) = v12;
  v14 = URLString;
  if (URLString)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 240);
      *(_QWORD *)&__p[4] = "create_transcoder";
      *(_DWORD *)__p = 136315650;
      if (v15 == 1)
        v16 = "TapTyping";
      else
        v16 = "ContinuousPath";
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v16;
      v20 = 2112;
      v21 = v14;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s  failed to create touch transcoder for %s Error: %@", __p, 0x20u);
      v14 = URLString;
    }
    CFRelease(v14);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
}

uint64_t TI::TIInputRecognizer::load_lexicons_if_needed(uint64_t this, const KB::DynamicDictionary *a2)
{
  uint64_t v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t ActiveSupplementalLexiconWords;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(this + 64))
  {
    v3 = this;
    if (KB::DynamicDictionary::named_entity_lexicon(a2) && !*(_BYTE *)(v3 + 275))
    {
      KB::DynamicDictionary::named_entity_lexicon(a2);
      ITTouchTranscoderAddLexicon();
      *(_BYTE *)(v3 + 275) = 1;
    }
    v4 = (_QWORD **)*((_QWORD *)a2 + 3);
    if (v4)
    {
      v5 = *v4;
      if (v5)
      {
        if (*v5 && !*(_BYTE *)(v3 + 272))
        {
          ITTouchTranscoderAddLexicon();
          *(_BYTE *)(v3 + 272) = 1;
        }
      }
    }
    if (*((_QWORD *)a2 + 1) && !*(_BYTE *)(v3 + 273))
    {
      ITTouchTranscoderAddLexicon();
      *(_BYTE *)(v3 + 273) = 1;
    }
    if (*((_QWORD *)a2 + 2) && *(_BYTE *)(v3 + 274))
    {
      ITTouchTranscoderAddLexicon();
      *(_BYTE *)(v3 + 274) = 1;
    }
    ActiveSupplementalLexiconWords = TITransientLexiconManagerGetActiveSupplementalLexiconWords();
    v7 = *(_QWORD *)(v3 + 280);
    if (ActiveSupplementalLexiconWords != v7)
    {
      v8 = ActiveSupplementalLexiconWords;
      if (v7)
        ITTouchTranscoderRemoveLexicon();
      if (v8)
        ITTouchTranscoderAddLexicon();
      *(_QWORD *)(v3 + 280) = v8;
    }
    this = (*(uint64_t (**)(const KB::DynamicDictionary *))(*(_QWORD *)a2 + 80))(a2);
    if (this && !*(_BYTE *)(v3 + 276))
    {
      this = (*(uint64_t (**)(const KB::DynamicDictionary *, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
      if (this)
      {
        (*(void (**)(const KB::DynamicDictionary *, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
        this = ITTouchTranscoderAddLexicon();
        *(_BYTE *)(v3 + 276) = 1;
      }
    }
  }
  return this;
}

void TI::TIInputRecognizer::create_transcoder_session(TI::TIInputRecognizer *this)
{
  uint64_t Session;
  const void *v3;
  const char *v4;
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) && !*((_QWORD *)this + 9))
  {
    Session = ITTouchTranscoderCreateSession();
    v3 = (const void *)*((_QWORD *)this + 9);
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 9) = Session;
    if (!Session && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v4 = "ContinuousPath";
      if (*((_QWORD *)this + 30) == 1)
        v4 = "TapTyping";
      v5 = 136315394;
      v6 = "create_transcoder_session";
      v7 = 2080;
      v8 = v4;
      _os_log_error_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s  Failed to create touch transcoder session for %s", (uint8_t *)&v5, 0x16u);
    }
  }
}

void std::vector<KB::retain_ptr<__CFString const*>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  const void *v7;
  const void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (const void *)*((_QWORD *)v6 - 1);
        v6 -= 8;
        v7 = v8;
        if (v8)
          CFRelease(v7);
        *((_QWORD *)v4 - 1) = 0;
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t TI::TIInputRecognizer::generate_candidates(uint64_t this)
{
  if (*(_QWORD *)(this + 64) && *(_QWORD *)(this + 80) == *(_QWORD *)(this + 88) && *(_QWORD *)(this + 72))
  {
    this = TI::CP::TIPathRecognizerInterface::should_generate_candidates((TI::CP::TIPathRecognizerInterface *)this);
    if ((_DWORD)this)
      return ITTouchTranscoderSessionEnumerateCandidatesWithOptions();
  }
  return this;
}

void TI::TIInputRecognizer::addCandidatesForITCandidate(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  const __CFString *String;
  int *v11;
  const KB::Candidate *v12;
  const KB::Candidate *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  KB::Candidate *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  const KB::Candidate *v34;
  const KB::Candidate *i;
  KB::String *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  KB::Candidate *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  __int128 v52;
  _QWORD *v53;
  KB::Candidate *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  const __CFString *v60;
  float v61;
  float v62;
  float v63;
  const __CFAllocator *v64;
  __CFDictionary *Mutable;
  CFNumberRef v66;
  const void *StrokedPath;
  unint64_t v68;
  KB::Candidate *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  const __CFString *v76;
  char *v77;
  char *v78;
  unsigned int *v79;
  unsigned int v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int HasEntries;
  BOOL v87;
  uint64_t v88;
  uint64_t j;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  KB::Candidate *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  KB::Candidate *v106;
  KB::Candidate *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  void **v111;
  _QWORD *v112;
  uint64_t *v113;
  int *v114;
  int *v115;
  uint64_t *v116;
  uint64_t v117;
  const KB::Candidate *v119;
  const KB::Candidate *v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[3];
  _OWORD v124[3];
  int v125;
  unsigned int *v126;
  _OWORD v127[3];
  _OWORD v128[3];
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  void *v137[4];
  __int128 v138;
  _OWORD v139[3];
  int v140;
  void *__p;
  int *v142;
  unsigned int *v143;
  unint64_t v144;
  int64x2_t v145;
  unint64_t v146;
  _OWORD *v147;
  double valuePtr;
  int64x2_t v149;
  unint64_t v150;
  _OWORD *v151;
  int v152;
  _BYTE v153[8];
  void *v154;
  _WORD v155[3];
  char v156;
  void *v157;
  uint64_t v158;
  void *v159[2];
  _QWORD v160[91];
  float v161;
  float v162;
  __int128 v163;
  int UnshiftMask;
  char IsCompletion;
  char v166;
  uint64_t v167;

  v6 = a1;
  v167 = *MEMORY[0x1E0C80C00];
  if (a1[5] && ITCandidateIsValidWord())
  {
    v7 = v6[5];
    v116 = v6 + 13;
    v113 = a2;
    v117 = a3;
    if (ITCandidateIsMultiWord())
    {
      v8 = *(unsigned int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v143 = v8;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      String = (const __CFString *)ITCandidateGetString();
      KB::utf8_string(String, (uint64_t)v155);
      KB::word_ranges((KB *)v155, 0, (unint64_t **)&__p);
      v140 = 0;
      memset(v137, 0, sizeof(v137));
      v138 = 0u;
      memset(v139, 0, sizeof(v139));
      v11 = (int *)__p;
      v114 = v142;
      if (__p != v142)
      {
        v12 = 0;
        v13 = 0;
        v112 = v6;
        do
        {
          v119 = v12;
          v14 = (uint64_t *)v157;
          if (!v157)
            v14 = &v158;
          v159[0] = v14;
          LODWORD(v159[1]) = 0;
          HIDWORD(v159[1]) = v155[0];
          LODWORD(v160[0]) = 0;
          KB::String::iterator::initialize((uint64_t *)v159);
          v15 = *v11;
          v135 = *(_OWORD *)v159;
          v136 = v160[0];
          std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v135, v15);
          v115 = v11;
          v16 = v11[1];
          v133 = v135;
          v134 = v136;
          std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v133, v16);
          KB::String::String((KB::String *)v153, (const KB::String::iterator *)&v135, (const KB::String::iterator *)&v133);
          v130 = 0;
          v131 = 0;
          v132 = 0;
          v17 = (unsigned int *)operator new();
          v18 = TI::Favonius::DictionaryHypothesis::DictionaryHypothesis((uint64_t)v17, &v143, (const KB::String *)v153);
          TI::Favonius::DictionaryHypothesis::_words(v18, &v130, 1, 1, 1);
          v129 = 0;
          memset(v127, 0, sizeof(v127));
          memset(v128, 0, sizeof(v128));
          v20 = v130;
          v19 = v131;
          if (v130 != v131)
          {
            do
            {
              if (!*(_BYTE *)(v20 + 192))
              {
                v126 = v17;
                do
                  v21 = __ldaxr(v17);
                while (__stlxr(v21 + 1, v17));
                v22 = (uint64_t)v126;
                TI::create_kb_candidate((KB::Candidate *)v159, (float *)v20, a3, (uint64_t *)&v126, v116, a4);
                if (v22)
                  WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v22);
                if (*((_QWORD *)&v127[0] + 1) >= *(_QWORD *)&v127[1])
                {
                  v24 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)&v127[0] + 1) - *(_QWORD *)&v127[0]) >> 3);
                  v25 = v24 + 1;
                  if ((unint64_t)(v24 + 1) > 0x4189374BC6A7EFLL)
                    goto LABEL_179;
                  if (0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v127[1] - *(_QWORD *)&v127[0]) >> 3) > v25)
                    v25 = 0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v127[1] - *(_QWORD *)&v127[0]) >> 3);
                  if ((unint64_t)(0x1CAC083126E978D5
                                        * ((uint64_t)(*(_QWORD *)&v127[1] - *(_QWORD *)&v127[0]) >> 3)) >= 0x20C49BA5E353F7)
                    *(double *)&v26 = 1.95094476e-307;
                  else
                    v26 = v25;
                  v151 = &v127[1];
                  if (*(double *)&v26 == 0.0)
                    v27 = 0;
                  else
                    *(double *)&v26 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v26));
                  v28 = (KB::Candidate *)(v26 + 1000 * v24);
                  valuePtr = *(double *)&v26;
                  v149.i64[0] = (uint64_t)v28;
                  v150 = v26 + 1000 * v27;
                  KB::Candidate::Candidate(v28, (const KB::Candidate *)v159);
                  v23 = (char *)v28 + 1000;
                  v149.i64[1] = (uint64_t)v23;
                  v30 = *((_QWORD *)&v127[0] + 1);
                  v29 = *(_QWORD *)&v127[0];
                  v31 = v149.i64[0];
                  if (*((_QWORD *)&v127[0] + 1) == *(_QWORD *)&v127[0])
                  {
                    v32 = vdupq_n_s64(*((unint64_t *)&v127[0] + 1));
                  }
                  else
                  {
                    do
                    {
                      v30 -= 1000;
                      v31 = KB::Candidate::Candidate(v31 - 1000, v30);
                    }
                    while (v30 != v29);
                    v32 = (int64x2_t)v127[0];
                    v23 = (char *)v149.i64[1];
                  }
                  *(_QWORD *)&v127[0] = v31;
                  *((_QWORD *)&v127[0] + 1) = v23;
                  v149 = v32;
                  v33 = *(_QWORD *)&v127[1];
                  *(_QWORD *)&v127[1] = v150;
                  v150 = v33;
                  valuePtr = *(double *)v32.i64;
                  std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
                }
                else
                {
                  v23 = (char *)KB::Candidate::Candidate(*((KB::Candidate **)&v127[0] + 1), (const KB::Candidate *)v159)
                      + 1000;
                }
                *((_QWORD *)&v127[0] + 1) = v23;
                KB::Candidate::~Candidate((KB::Candidate *)v159);
              }
              v20 += 240;
            }
            while (v20 != v19);
            v13 = (const KB::Candidate *)v137[0];
            v119 = (const KB::Candidate *)v137[1];
          }
          if (v13 == v119)
          {
            v13 = *(const KB::Candidate **)&v127[0];
            v137[0] = *(void **)&v127[0];
            v51 = v137[2];
            v52 = *(_OWORD *)((char *)v127 + 8);
            *(_QWORD *)&v127[0] = v119;
            *((_QWORD *)&v127[0] + 1) = v119;
            v120 = (const KB::Candidate *)v52;
            *(_OWORD *)&v137[1] = v52;
            *(_QWORD *)&v127[1] = v51;
          }
          else
          {
            v125 = 0;
            memset(v123, 0, sizeof(v123));
            memset(v124, 0, sizeof(v124));
            do
            {
              v34 = (const KB::Candidate *)*((_QWORD *)&v127[0] + 1);
              for (i = *(const KB::Candidate **)&v127[0]; i != v34; i = (const KB::Candidate *)((char *)i + 1000))
              {
                v36 = KB::Candidate::Candidate((KB::Candidate *)v159, v13);
                KB::String::space(v36);
                KB::Word::Word((KB::Word *)&valuePtr, (const KB::String *)&KB::String::space(void)::space, &kTITokenIDUNK, 0);
                v152 |= 0x4000000u;
                KB::Candidate::append((unsigned __int16 *)v159, (const KB::Word *)&valuePtr);
                KB::Candidate::append((KB::Candidate *)v159, i);
                *((_DWORD *)v159[1] + 60 * (uint64_t)v159[0] - 47) = *(_DWORD *)(*((_QWORD *)i + 1)
                                                                              + 240 * *(_QWORD *)i
                                                                              - 188);
                if (*((_QWORD *)&v123[0] + 1) >= *(_QWORD *)&v123[1])
                {
                  v38 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)&v123[0] + 1) - *(_QWORD *)&v123[0]) >> 3);
                  v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) > 0x4189374BC6A7EFLL)
                    goto LABEL_179;
                  if (0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v123[1] - *(_QWORD *)&v123[0]) >> 3) > v39)
                    v39 = 0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v123[1] - *(_QWORD *)&v123[0]) >> 3);
                  if ((unint64_t)(0x1CAC083126E978D5
                                        * ((uint64_t)(*(_QWORD *)&v123[1] - *(_QWORD *)&v123[0]) >> 3)) >= 0x20C49BA5E353F7)
                    v40 = 0x4189374BC6A7EFLL;
                  else
                    v40 = v39;
                  v147 = &v123[1];
                  if (v40)
                    v40 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v40);
                  else
                    v41 = 0;
                  v42 = (KB::Candidate *)(v40 + 1000 * v38);
                  v144 = v40;
                  v145.i64[0] = (uint64_t)v42;
                  v146 = v40 + 1000 * v41;
                  KB::Candidate::Candidate(v42, (const KB::Candidate *)v159);
                  v37 = (char *)v42 + 1000;
                  v145.i64[1] = (uint64_t)v42 + 1000;
                  v43 = *((_QWORD *)&v123[0] + 1);
                  v44 = *(_QWORD *)&v123[0];
                  v45 = v145.i64[0];
                  if (*((_QWORD *)&v123[0] + 1) == *(_QWORD *)&v123[0])
                  {
                    v46 = vdupq_n_s64(*((unint64_t *)&v123[0] + 1));
                  }
                  else
                  {
                    do
                    {
                      v43 -= 1000;
                      v45 = KB::Candidate::Candidate(v45 - 1000, v43);
                    }
                    while (v43 != v44);
                    v46 = (int64x2_t)v123[0];
                    v37 = (char *)v145.i64[1];
                  }
                  *(_QWORD *)&v123[0] = v45;
                  *((_QWORD *)&v123[0] + 1) = v37;
                  v145 = v46;
                  v47 = *(_QWORD *)&v123[1];
                  *(_QWORD *)&v123[1] = v146;
                  v146 = v47;
                  v144 = v46.i64[0];
                  std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v144);
                }
                else
                {
                  v37 = (char *)KB::Candidate::Candidate(*((KB::Candidate **)&v123[0] + 1), (const KB::Candidate *)v159)
                      + 1000;
                }
                *((_QWORD *)&v123[0] + 1) = v37;
                KB::Word::~Word((KB::Word *)&valuePtr);
                KB::Candidate::~Candidate((KB::Candidate *)v159);
              }
              v13 = (const KB::Candidate *)((char *)v13 + 1000);
            }
            while (v13 != v119);
            v13 = *(const KB::Candidate **)&v123[0];
            v48 = v137[2];
            v49 = *(_OWORD *)((char *)v123 + 8);
            v50 = *(_OWORD *)v137;
            v137[0] = *(void **)&v123[0];
            v123[0] = v50;
            v120 = (const KB::Candidate *)v49;
            *(_OWORD *)&v137[1] = v49;
            *(_QWORD *)&v123[1] = v48;
            v159[0] = (char *)&v124[1] + 8;
            std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
            v159[0] = v124;
            std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
            v159[0] = (char *)&v123[1] + 8;
            std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
            v159[0] = v123;
            std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          }
          v159[0] = (char *)&v128[1] + 8;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          v159[0] = v128;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          v159[0] = (char *)&v127[1] + 8;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          v159[0] = v127;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v17);
          v159[0] = &v130;
          std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
          if (v154 && v153[6] == 1)
            free(v154);
          v12 = v120;
          v11 = v115 + 2;
        }
        while (v115 + 2 != v114);
        a2 = v113;
        v6 = v112;
        if (v13 != v120)
        {
          v53 = v113 + 2;
          v54 = (KB::Candidate *)v113[1];
          do
          {
            if ((unint64_t)v54 >= *v53)
            {
              v55 = 0x1CAC083126E978D5 * (((uint64_t)v54 - *v113) >> 3);
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) > 0x4189374BC6A7EFLL)
                goto LABEL_179;
              if (0x395810624DD2F1AALL * ((*v53 - *v113) >> 3) > v56)
                v56 = 0x395810624DD2F1AALL * ((*v53 - *v113) >> 3);
              if ((unint64_t)(0x1CAC083126E978D5 * ((*v53 - *v113) >> 3)) >= 0x20C49BA5E353F7)
                v57 = 0x4189374BC6A7EFLL;
              else
                v57 = v56;
              v160[2] = v113 + 2;
              if (v57)
                v57 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v57);
              else
                v58 = 0;
              v59 = (char *)(v57 + 1000 * v55);
              v159[0] = (void *)v57;
              v159[1] = v59;
              v160[1] = v57 + 1000 * v58;
              KB::Candidate::Candidate((KB::Candidate *)v59, v13);
              v160[0] = v59 + 1000;
              std::vector<KB::Candidate>::__swap_out_circular_buffer(v113, v159);
              v54 = (KB::Candidate *)v113[1];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v159);
            }
            else
            {
              KB::Candidate::Candidate(v54, v13);
              v54 = (KB::Candidate *)((char *)v54 + 1000);
            }
            v113[1] = (uint64_t)v54;
            v13 = (const KB::Candidate *)((char *)v13 + 1000);
          }
          while (v13 != v120);
        }
      }
      v159[0] = (char *)&v139[1] + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
      v159[0] = v139;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
      v159[0] = &v137[3];
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
      v159[0] = v137;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
      if (__p)
        operator delete(__p);
      if (v157 && v156 == 1)
        free(v157);
      if (v143)
        WTF::RefCounted<KB::DictionaryContainer>::deref(v143);
    }
    else
    {
      v76 = (const __CFString *)ITCandidateGetString();
      KB::utf8_string(v76, (uint64_t)v159);
      v77 = (char *)v159[1];
      if (!v159[1])
        v77 = (char *)v160;
      if (LOWORD(v159[0]))
        v78 = v77;
      else
        v78 = "";
      std::string::basic_string[abi:nn180100]<0>(v137, v78);
      if (v159[1] && BYTE6(v159[0]) == 1)
        free(v159[1]);
      v79 = *(unsigned int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      *(_QWORD *)&v123[0] = v79;
      if (v79)
      {
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 + 1, v79));
      }
      if (SHIBYTE(v137[2]) >= 0)
        v81 = v137;
      else
        v81 = (void **)v137[0];
      KB::String::String((KB::String *)v159, (const char *)v81);
      v82 = operator new();
      TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(v82, (unsigned int **)v123, (const KB::String *)v159);
      if (v159[1] && BYTE6(v159[0]) == 1)
        free(v159[1]);
      memset(v127, 0, 24);
      v83 = *(_QWORD *)(v82 + 56);
      if (v83)
      {
        v84 = 8 * v83 - 8;
        v85 = v82 + 16;
        do
        {
          v85 += 8;
          HasEntries = LXCursorHasEntries();
          if (HasEntries)
            v87 = 1;
          else
            v87 = v84 == 0;
          v84 -= 8;
        }
        while (!v87);
        if (HasEntries)
          goto LABEL_128;
      }
      if (KB::DynamicDictionaryCursor::has_entries(*(KB::DynamicDictionaryCursor **)(v82 + 72)))
      {
LABEL_128:
        TI::Favonius::DictionaryHypothesis::_words(v82, (uint64_t *)v127, 1, 1, 1);
      }
      else
      {
        if (SHIBYTE(v137[2]) >= 0)
          v111 = v137;
        else
          v111 = (void **)v137[0];
        KB::String::String((KB::String *)v159, (const char *)v111);
        KB::DictionaryContainer::derive_static_words(*(KB::DictionaryContainer **)&v123[0], (uint64_t *)v127, (unsigned __int16 *)v159);
        if (v159[1] && BYTE6(v159[0]) == 1)
          free(v159[1]);
      }
      v88 = *((_QWORD *)&v127[0] + 1);
      for (j = *(_QWORD *)&v127[0]; j != v88; j += 240)
      {
        if (!*(_BYTE *)(j + 192))
        {
          KB::Candidate::Candidate((KB::Candidate *)v159);
          v90 = *(_QWORD *)(v82 + 56);
          if (v90)
          {
            v91 = 8 * v90 - 8;
            v92 = v82 + 16;
            do
            {
              v92 += 8;
              v93 = LXCursorHasEntries();
              if (v93)
                v94 = 1;
              else
                v94 = v91 == 0;
              v91 -= 8;
            }
            while (!v94);
            if (v93)
              goto LABEL_140;
          }
          if (KB::DynamicDictionaryCursor::has_entries(*(KB::DynamicDictionaryCursor **)(v82 + 72)))
          {
LABEL_140:
            v122 = v82;
            do
              v95 = __ldaxr((unsigned int *)v82);
            while (__stlxr(v95 + 1, (unsigned int *)v82));
            v96 = v122;
            TI::create_kb_candidate((KB::Candidate *)&valuePtr, (float *)j, v117, &v122, v116, a4);
            KB::Candidate::operator=((uint64_t *)v159, (uint64_t *)&valuePtr);
            KB::Candidate::~Candidate((KB::Candidate *)&valuePtr);
            if (v96)
              WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v96);
          }
          else
          {
            v121 = 0;
            TI::create_kb_candidate((KB::Candidate *)&valuePtr, (float *)j, v117, &v121, v116, a4);
            KB::Candidate::operator=((uint64_t *)v159, (uint64_t *)&valuePtr);
            KB::Candidate::~Candidate((KB::Candidate *)&valuePtr);
          }
          v97 = v113;
          v98 = (KB::Candidate *)v113[1];
          v99 = v113[2];
          if ((unint64_t)v98 >= v99)
          {
            v101 = 0x1CAC083126E978D5 * (((uint64_t)v98 - *v113) >> 3);
            v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) > 0x4189374BC6A7EFLL)
              goto LABEL_179;
            v103 = 0x1CAC083126E978D5 * ((uint64_t)(v99 - *v113) >> 3);
            if (2 * v103 > v102)
              v102 = 2 * v103;
            if (v103 >= 0x20C49BA5E353F7)
              *(double *)&v104 = 1.95094476e-307;
            else
              v104 = v102;
            v151 = v113 + 2;
            if (*(double *)&v104 == 0.0)
              v105 = 0;
            else
              *(double *)&v104 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v104));
            v106 = (KB::Candidate *)(v104 + 1000 * v101);
            valuePtr = *(double *)&v104;
            v149.i64[0] = (uint64_t)v106;
            v150 = v104 + 1000 * v105;
            KB::Candidate::Candidate(v106, (const KB::Candidate *)v159);
            v149.i64[1] = (uint64_t)v106 + 1000;
            v97 = v113;
            std::vector<KB::Candidate>::__swap_out_circular_buffer(v113, &valuePtr);
            v100 = (char *)v113[1];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
          }
          else
          {
            v100 = (char *)KB::Candidate::Candidate(v98, (const KB::Candidate *)v159) + 1000;
          }
          v97[1] = (uint64_t)v100;
          KB::Candidate::~Candidate((KB::Candidate *)v159);
        }
      }
      v159[0] = v127;
      std::vector<KB::Word>::__destroy_vector::operator()[abi:nn180100]((void ***)v159);
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v82);
      if (*(_QWORD *)&v123[0])
        WTF::RefCounted<KB::DictionaryContainer>::deref(*(unsigned int **)&v123[0]);
      a2 = v113;
      if (SHIBYTE(v137[2]) < 0)
        operator delete(v137[0]);
    }
  }
  else
  {
    v60 = (const __CFString *)ITCandidateGetString();
    KB::utf8_string(v60, (uint64_t)&valuePtr);
    KB::Candidate::Candidate((KB::Candidate *)v159, (const KB::String *)&valuePtr, 0);
    if (v149.i64[0] && BYTE6(valuePtr) == 1)
      free((void *)v149.i64[0]);
    IsCompletion = ITCandidateIsCompletion();
    v166 = ITCandidateIsValidWord() ^ 1;
    UnshiftMask = ITCandidateGetUnshiftMask();
    ITCandidateGetScore();
    v62 = v61;
    v63 = logf(v61);
    v161 = v63;
    if (a4 >= 1)
    {
      v64 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr = v62;
      v66 = CFNumberCreate(v64, kCFNumberDoubleType, &valuePtr);
      CFDictionarySetValue(Mutable, CFSTR("lstm_prob"), v66);
      if (v66)
        CFRelease(v66);
      CFDictionarySetValue(Mutable, CFSTR("source"), CFSTR("ml"));
      CFDictionarySetValue(Mutable, CFSTR("sort_key_expanded"), CFSTR("no"));
      StrokedPath = (const void *)ITCandidateGetStrokedPath();
      CFDictionarySetValue(Mutable, CFSTR("stroked_path"), StrokedPath);
      KB::Candidate::add_sources_info((KB::Candidate *)v159, CFSTR("ml"), Mutable);
      if (Mutable)
        CFRelease(Mutable);
    }
    v162 = v63;
    v163 = xmmword_1DA911060;
    v68 = a2[2];
    v69 = (KB::Candidate *)a2[1];
    if ((unint64_t)v69 >= v68)
    {
      v71 = 0x1CAC083126E978D5 * (((uint64_t)v69 - *a2) >> 3);
      if ((unint64_t)(v71 + 1) > 0x4189374BC6A7EFLL)
LABEL_179:
        abort();
      v72 = 0x1CAC083126E978D5 * ((uint64_t)(v68 - *a2) >> 3);
      v73 = 2 * v72;
      if (2 * v72 <= v71 + 1)
        v73 = v71 + 1;
      if (v72 >= 0x20C49BA5E353F7)
        *(double *)&v74 = 1.95094476e-307;
      else
        v74 = v73;
      v151 = a2 + 2;
      if (*(double *)&v74 == 0.0)
        v75 = 0;
      else
        *(double *)&v74 = COERCE_DOUBLE(std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v74));
      v107 = (KB::Candidate *)(v74 + 1000 * v71);
      valuePtr = *(double *)&v74;
      v149.i64[0] = (uint64_t)v107;
      v150 = v74 + 1000 * v75;
      KB::Candidate::Candidate(v107, (const KB::Candidate *)v159);
      v149.i64[1] = (uint64_t)v107 + 1000;
      std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &valuePtr);
      v70 = (char *)a2[1];
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&valuePtr);
    }
    else
    {
      v70 = (char *)KB::Candidate::Candidate(v69, (const KB::Candidate *)v159) + 1000;
    }
    a2[1] = (uint64_t)v70;
    KB::Candidate::~Candidate((KB::Candidate *)v159);
  }
  if (v6[30])
    v108 = 4;
  else
    v108 = 3;
  v109 = *a2;
  v110 = a2[1];
  while (v109 != v110)
  {
    *(_DWORD *)(v109 + 992) = v108;
    v109 += 1000;
  }
}

void TI::create_kb_candidate(KB::Candidate *a1, float *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  const __CFString *String;
  char *v30;
  char *v31;
  uint64_t v32;
  const __CFAllocator *v33;
  __CFDictionary *Mutable;
  char *v35;
  int v36;
  double v37;
  size_t v38;
  void **v39;
  void *v40;
  double *p_valuePtr;
  size_t v42;
  _BOOL4 v43;
  _BOOL4 v44;
  const __CFString *v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const void *StrokedPath;
  void *__p[2];
  unsigned __int8 v50;
  double valuePtr;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  KB::Candidate::Candidate(a1, (const KB::Word *)a2);
  v11 = *a4;
  if (*a4)
  {
    v12 = *(float *)(v11 + 100);
    v13 = (float)(v12
                * KB::DictionaryCursors::termination_probability((KB::DictionaryCursors *)(v11 + 16), *(const KB::DictionaryContainer **)(v11 + 8)))* a2[12];
  }
  else
  {
    v13 = a2[13];
  }
  v15 = *(_QWORD *)a1;
  v14 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1)
  {
    v16 = 240 * v15;
    v17 = *((_QWORD *)a1 + 1);
    while ((*(_BYTE *)(v17 + 105) & 1) == 0)
    {
      v17 += 240;
      v16 -= 240;
      if (!v16)
        goto LABEL_11;
    }
  }
  else
  {
    v17 = *((_QWORD *)a1 + 1);
  }
  if (v17 != v14 + 240 * v15)
    goto LABEL_19;
LABEL_11:
  if (v15)
  {
    v18 = 240 * v15 - 240;
    v19 = (uint64_t *)(v14 + 224);
    do
    {
      v21 = *v19;
      v19 += 30;
      v20 = v21;
      if (v21)
        v22 = 1;
      else
        v22 = v18 == 0;
      v18 -= 240;
    }
    while (!v22);
    if (v20)
LABEL_19:
      v13 = v13 * 0.8;
  }
  KB::LanguageModelContext::operator=((uint64_t)a1 + 784, a5);
  *(float *)(*((_QWORD *)a1 + 1) + 240 * *(_QWORD *)a1 - 188) = v13;
  ITCandidateGetScore();
  v24 = logf(v23);
  *((float *)a1 + 186) = v24;
  *((float *)a1 + 187) = v24;
  *((_OWORD *)a1 + 47) = xmmword_1DA911060;
  *((_BYTE *)a1 + 960) = ITCandidateIsCompletion();
  *((_BYTE *)a1 + 961) = ITCandidateIsValidWord() ^ 1;
  *((_DWORD *)a1 + 195) = ITCandidateGetUnshiftMask();
  v25 = *(_QWORD *)a1;
  v26 = *((_QWORD *)a1 + 1);
  ITCandidateGetScore();
  v28 = v27;
  String = (const __CFString *)ITCandidateGetString();
  KB::utf8_string(String, (uint64_t)&valuePtr);
  v30 = (char *)v52;
  if (!v52)
    v30 = (char *)&v53;
  if (LOWORD(valuePtr))
    v31 = v30;
  else
    v31 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v31);
  if (v52 && BYTE6(valuePtr) == 1)
    free(v52);
  if (a6 >= 1)
  {
    v32 = v26 + 240 * v25 - 240;
    v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (*(_WORD *)v32)
    {
      if (*(_QWORD *)(v32 + 8))
        v35 = *(char **)(v32 + 8);
      else
        v35 = (char *)(v32 + 16);
    }
    else
    {
      v35 = "";
    }
    std::string::basic_string[abi:nn180100]<0>(&valuePtr, v35);
    v36 = SHIBYTE(v53);
    v37 = valuePtr;
    if ((v50 & 0x80u) == 0)
      v38 = v50;
    else
      v38 = (size_t)__p[1];
    if ((v50 & 0x80u) == 0)
      v39 = __p;
    else
      v39 = (void **)__p[0];
    if (v53 >= 0)
      v40 = (void *)HIBYTE(v53);
    else
      v40 = v52;
    if (v53 >= 0)
      p_valuePtr = &valuePtr;
    else
      p_valuePtr = *(double **)&valuePtr;
    if ((unint64_t)v40 >= v38)
      v42 = v38;
    else
      v42 = (size_t)v40;
    v43 = memcmp(v39, p_valuePtr, v42) == 0;
    v44 = v40 == (void *)v38 && v43;
    if (v36 < 0)
      operator delete(*(void **)&v37);
    if (v44)
      v45 = CFSTR("no");
    else
      v45 = CFSTR("yes");
    CFDictionarySetValue(Mutable, CFSTR("sort_key_expanded"), v45);
    valuePtr = v28;
    v46 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("lstm_prob"), v46);
    if (v46)
      CFRelease(v46);
    valuePtr = v13;
    v47 = CFNumberCreate(v33, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("uni_prob"), v47);
    if (v47)
      CFRelease(v47);
    StrokedPath = (const void *)ITCandidateGetStrokedPath();
    CFDictionarySetValue(Mutable, CFSTR("stroked_path"), StrokedPath);
    CFDictionarySetValue(Mutable, CFSTR("source"), CFSTR("ml"));
    KB::Candidate::add_sources_info(a1, CFSTR("ml"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
  }
  if ((char)v50 < 0)
    operator delete(__p[0]);
}

uint64_t WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = result;
  v2 = atomic_load((unsigned int *)result);
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(result + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v4 = 32;
    while (1)
    {
      v5 = *(const void **)(v1 + v4);
      if (v5)
        CFRelease(v5);
      *(_QWORD *)(v1 + v4) = 0;
      v4 -= 8;
      if (v4 == 8)
      {
        v6 = *(unsigned int **)(v1 + 8);
        if (v6)
          WTF::RefCounted<KB::DictionaryContainer>::deref(v6);
        JUMPOUT(0x1DF0A2144);
      }
    }
  }
  do
    v7 = __ldaxr((unsigned int *)result);
  while (__stlxr(v7 - 1, (unsigned int *)result));
  return result;
}

BOOL TI::CP::TIPathRecognizerInterface::should_generate_candidates(TI::CP::TIPathRecognizerInterface *this)
{
  CGFloat *v2;
  CGPoint v4;

  if ((*(unsigned int (**)(TI::CP::TIPathRecognizerInterface *))(*(_QWORD *)this + 40))(this) == 7)
    return 0;
  v2 = (CGFloat *)*((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v4.x = (*(double (**)(TI::CP::TIPathRecognizerInterface *))(*(_QWORD *)this + 48))(this);
  return !TI::Favonius::KeyboardLayout::is_far_away_point(v2, v4);
}

void ___ZN2TI17TIInputRecognizer19generate_candidatesEN2KB10retain_ptrIP14__CFDictionaryEEU13block_pointerFbP11__CandidateE_block_invoke(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  const __CFString *String;
  char *v6;
  char *v7;
  unint64_t v8;
  void **v9;
  int v11;
  int v12;
  BOOL v13;
  char v14;
  void **v15;
  void *__p[2];
  unsigned __int8 v17;
  _WORD v18[3];
  char v19;
  void *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 40);
  String = (const __CFString *)ITCandidateGetString();
  KB::utf8_string(String, (uint64_t)v18);
  v6 = (char *)v20;
  if (!v20)
    v6 = (char *)v21;
  if (v18[0])
    v7 = v6;
  else
    v7 = "";
  std::string::basic_string[abi:nn180100]<0>(__p, v7);
  if (v20 && v19 == 1)
    free(v20);
  v8 = v17;
  if ((v17 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  switch(v8)
  {
    case 0uLL:
      goto LABEL_23;
    case 1uLL:
      v15 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v15 = __p;
      v13 = *(_BYTE *)v15 == 95;
LABEL_28:
      v14 = v13;
      if (((char)v17 & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_32;
    case 3uLL:
      v9 = (void **)__p[0];
      if ((v17 & 0x80u) == 0)
        v9 = __p;
      if (*(_WORD *)v9 != 20053 || *((_BYTE *)v9 + 2) != 75)
      {
        v11 = *(unsigned __int16 *)v9;
        v12 = *((unsigned __int8 *)v9 + 2);
        v13 = v11 == 28277 && v12 == 107;
        goto LABEL_28;
      }
LABEL_23:
      v14 = 1;
      if (((char)v17 & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_32;
  }
  v14 = 0;
  if ((char)v17 < 0)
LABEL_32:
    operator delete(__p[0]);
LABEL_33:
  if ((v14 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))() & 1) == 0)
    TI::TIInputRecognizer::add_candidate_to_cache(v4, a2);
}

void TI::TIInputRecognizer::add_candidate_to_cache(_QWORD *a1, CFTypeRef cf)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  const void *v19;
  const void *v20;

  if (cf)
    CFRetain(cf);
  v5 = (_QWORD *)a1[11];
  v4 = a1[12];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[10];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = cf;
    v6 = v13 + 8;
    while (v5 != v7)
    {
      v14 = *--v5;
      *v5 = 0;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    v15 = *((_OWORD *)a1 + 5);
    a1[10] = v13;
    a1[11] = v6;
    a1[12] = &v12[8 * v11];
    v16 = (char *)*((_QWORD *)&v15 + 1);
    v17 = (char *)v15;
    if (*((_QWORD *)&v15 + 1) != (_QWORD)v15)
    {
      v18 = (char *)*((_QWORD *)&v15 + 1);
      do
      {
        v20 = (const void *)*((_QWORD *)v18 - 1);
        v18 -= 8;
        v19 = v20;
        if (v20)
          CFRelease(v19);
        *((_QWORD *)v16 - 1) = 0;
        v16 = v18;
      }
      while (v18 != v17);
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v5 = cf;
    v6 = v5 + 1;
  }
  a1[11] = v6;
}

uint64_t ___ZN2TI17TIInputRecognizer19generate_candidatesERN2KB19CandidateCollectionENS_2CP21ScoreExplanationLevelE_block_invoke()
{
  return 0;
}

void TI::TIInputRecognizer::reset_session(TI::TIInputRecognizer *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 9) = 0;
  TI::TIInputRecognizer::create_transcoder_session(this);
  *((_DWORD *)this + 66) = 7;
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
}

uint64_t TI::TIInputRecognizer::TIInputRecognizer(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5)
{
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  __int128 v13;

  v9 = (std::string *)(a1 + 16);
  *(_QWORD *)a1 = &off_1EA1013D0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    v9->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 168));
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 176));
  *(_BYTE *)(a1 + 208) = 0;
  v12 = (std::string *)(a1 + 208);
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  if (*((_BYTE *)a5 + 24))
  {
    if (*((char *)a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
    }
    else
    {
      v13 = *a5;
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a5 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *(_BYTE *)(a1 + 232) = 1;
  }
  *(_QWORD *)(a1 + 240) = a2;
  *(_DWORD *)(a1 + 264) = 7;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  return a1;
}

void TI::TIInputRecognizer::recreate_transcoder(TI::TIInputRecognizer *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 8) = 0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 9) = 0;
  TI::TIInputRecognizer::update_transcoder(this);
}

BOOL TI::TIInputRecognizer::is_ready(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 64);
  if (v1)
  {
    CFRetain(*(CFTypeRef *)(a1 + 64));
    CFRelease(v1);
  }
  return v1 != 0;
}

uint64_t TI::TIInputRecognizer::touch_transcoder_provides_completion_candidates(TI::TIInputRecognizer *this)
{
  return ITTouchTranscoderProvidesCompletionCandidates();
}

BOOL TI::TIInputRecognizer::is_candidates_cache_empty(TI::TIInputRecognizer *this)
{
  return *((_QWORD *)this + 10) == *((_QWORD *)this + 11);
}

void TI::TIInputRecognizer::process_candidates_from_cache(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;

  v3 = (uint64_t *)a1[10];
  v4 = (uint64_t *)a1[11];
  while (v3 != v4)
  {
    v8 = *v3++;
    TI::TIInputRecognizer::addCandidatesForITCandidate(a1, a2, v8, a3);
  }
}

void TI::TIInputRecognizer::generate_mltt_autocorrection_candidates(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  __CFDictionary *Mutable;
  void *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  _QWORD *v15;
  const __CFString *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t *v34;
  char *v35;
  void *v36[2];
  _OWORD v37[2];
  _OWORD v38[3];
  int v39;
  __CFDictionary *v40;
  void *value;
  const KB::Candidate **v42;
  void *v43;
  void *v44;
  const KB::Candidate *v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[8];
  void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 240) == 1)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    KB::cf_string_impl<KB::String>((CFStringRef *)&value, a2);
    v8 = value;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC68], value);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC60], (const void *)*MEMORY[0x1E0C9AE50]);
    if (*(_BYTE *)(a3 + 64))
    {
      KB::cf_string_impl<KB::String>((CFStringRef *)&v43, (unsigned __int16 *)a3);
      KB::cf_string_impl<KB::String>((CFStringRef *)v36, (unsigned __int16 *)(a3 + 32));
      v9 = v43;
      CFDictionaryAddValue(Mutable, CFSTR("previousTypedString"), v43);
      v10 = v36[0];
      CFDictionaryAddValue(Mutable, CFSTR("previousCandidateString"), v36[0]);
      if (v10)
        CFRelease(v10);
      if (v9)
        CFRelease(v9);
    }
    v40 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      v40 = Mutable;
      v11 = a1;
      TI::TIInputRecognizer::generate_candidates(a1);
      CFRelease(Mutable);
    }
    else
    {
      v11 = a1;
      TI::TIInputRecognizer::generate_candidates(a1);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v13 = *(uint64_t **)(v11 + 80);
    v12 = *(uint64_t **)(v11 + 88);
    if (v13 != v12)
    {
      v14 = 0;
      v15 = (_QWORD *)a1;
      v34 = v12;
      while (1)
      {
        v39 = 0;
        *(_OWORD *)v36 = 0u;
        memset(v37, 0, sizeof(v37));
        memset(v38, 0, sizeof(v38));
        TI::TIInputRecognizer::addCandidatesForITCandidate(v15, (uint64_t *)v36, *v13, 0);
        v16 = (const __CFString *)ITCandidateCopyPrefix();
        KB::utf8_string(v16, (uint64_t)v49);
        KB::String::String((KB::String *)&v43, (const KB::String *)v49);
        KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)v45, (const KB::Candidate **)v36);
        v17 = (char *)a4[2];
        if (v14 < v17)
        {
          KB::String::String((KB::String *)v14, (const KB::String *)&v43);
          KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)(v14 + 32), v45);
          v14 += 136;
          goto LABEL_38;
        }
        v18 = 0xF0F0F0F0F0F0F0F1 * ((v14 - (_BYTE *)*a4) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0x1E1E1E1E1E1E1E1)
          abort();
        v20 = 0xF0F0F0F0F0F0F0F1 * ((v17 - (_BYTE *)*a4) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0xF0F0F0F0F0F0F0)
          v21 = 0x1E1E1E1E1E1E1E1;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 > 0x1E1E1E1E1E1E1E1)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v22 = (char *)operator new(136 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[136 * v18];
        v24 = &v22[136 * v21];
        KB::String::String((KB::String *)v23, (const KB::String *)&v43);
        KB::CandidateCollection::CandidateCollection((KB::CandidateCollection *)(v23 + 32), v45);
        v14 = v23 + 136;
        v26 = (char *)*a4;
        v25 = (char *)a4[1];
        if (v25 == *a4)
        {
          *a4 = v23;
          a4[1] = v14;
          a4[2] = v24;
        }
        else
        {
          v35 = v24;
          v27 = 0;
          do
          {
            *(_DWORD *)&v23[v27 - 136] = 0x100000;
            v28 = (uint64_t)&v23[v27 - 136];
            v29 = &v25[v27];
            *(_WORD *)(v28 + 4) = 0;
            *(_BYTE *)(v28 + 6) = 0;
            *(_QWORD *)(v28 + 8) = 0;
            v30 = (_QWORD *)KB::String::operator=(v28, (KB::String *)&v25[v27 - 136]);
            v30[4] = 0;
            v30[5] = 0;
            v30[6] = 0;
            *((_OWORD *)v30 + 2) = *(_OWORD *)&v25[v27 - 104];
            v30[6] = *(_QWORD *)&v25[v27 - 88];
            *((_QWORD *)v29 - 13) = 0;
            *((_QWORD *)v29 - 12) = 0;
            *((_QWORD *)v29 - 11) = 0;
            v30[7] = 0;
            v30[8] = 0;
            v30[9] = 0;
            *(_OWORD *)(v30 + 7) = *(_OWORD *)&v25[v27 - 80];
            v30[9] = *(_QWORD *)&v25[v27 - 64];
            *((_QWORD *)v29 - 10) = 0;
            *((_QWORD *)v29 - 9) = 0;
            *((_QWORD *)v29 - 8) = 0;
            v30[10] = 0;
            v30[11] = 0;
            v30[12] = 0;
            *((_OWORD *)v30 + 5) = *(_OWORD *)&v25[v27 - 56];
            v30[12] = *(_QWORD *)&v25[v27 - 40];
            *((_QWORD *)v29 - 7) = 0;
            *((_QWORD *)v29 - 6) = 0;
            *((_QWORD *)v29 - 5) = 0;
            v30[13] = 0;
            v30[14] = 0;
            v30[15] = 0;
            *(_OWORD *)(v30 + 13) = *(_OWORD *)&v25[v27 - 32];
            v30[15] = *(_QWORD *)&v25[v27 - 16];
            *((_QWORD *)v29 - 4) = 0;
            *((_QWORD *)v29 - 3) = 0;
            *((_QWORD *)v29 - 2) = 0;
            v30[16] = *(_QWORD *)&v25[v27 - 8];
            v27 -= 136;
          }
          while (&v25[v27] != v26);
          v31 = &v23[v27];
          v32 = (char *)*a4;
          v25 = (char *)a4[1];
          *a4 = v31;
          a4[1] = v14;
          a4[2] = v35;
          if (v25 != v32)
          {
            v15 = (_QWORD *)a1;
            do
            {
              v25 -= 136;
              std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>((uint64_t)v25);
            }
            while (v25 != v32);
            v25 = v32;
            if (!v32)
              goto LABEL_37;
LABEL_36:
            operator delete(v25);
            goto LABEL_37;
          }
          v15 = (_QWORD *)a1;
        }
        if (v25)
          goto LABEL_36;
LABEL_37:
        v12 = v34;
LABEL_38:
        a4[1] = v14;
        v42 = (const KB::Candidate **)&v48;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        v42 = (const KB::Candidate **)&v47;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        v42 = (const KB::Candidate **)&v46;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        v42 = v45;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v42);
        if (v44 && BYTE6(v43) == 1)
          free(v44);
        if (v50 && v49[6] == 1)
          free(v50);
        if (v16)
          CFRelease(v16);
        v43 = (char *)&v38[1] + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        v43 = v38;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        v43 = (char *)v37 + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        v43 = v36;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        if (++v13 == v12)
        {
          v8 = value;
          break;
        }
      }
    }
    if (v8)
      CFRelease(v8);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)(a1 + 32);
  v4 = (void **)(a1 + 104);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)(a1 + 80);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)(a1 + 56);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = v2;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v4);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 6) == 1)
      free(v3);
  }
}

uint64_t ___ZN2TI17TIInputRecognizer39generate_mltt_autocorrection_candidatesERKN2KB6StringERKNSt3__18optionalINS5_4pairIS2_S2_EEEE_block_invoke()
{
  if (ITCandidateIsValidWord())
    return ITCandidateIsCompletion();
  else
    return 1;
}

uint64_t TI::TIInputRecognizer::is_language_and_layout_supported(uint64_t a1, const KB::String *a2)
{
  const char *v3;
  BOOL v4;
  CFLocaleIdentifier v5;
  CFLocaleRef v6;
  CFStringRef v7;
  uint64_t v8;
  CFStringRef v10;
  CFLocaleIdentifier localeIdentifier;
  unsigned __int16 v12[3];
  char v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  KB::String::String((KB::String *)v12, v3);
  KB::cf_string_impl<KB::String>(&localeIdentifier, v12);
  if (v14)
    v4 = v13 == 1;
  else
    v4 = 0;
  if (v4)
    free(v14);
  v5 = localeIdentifier;
  if (!localeIdentifier)
    return 0;
  v6 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], localeIdentifier);
  KB::String::String((KB::String *)v12, a2);
  KB::cf_string_impl<KB::String>(&v10, v12);
  v7 = v10;
  v8 = ITTouchTranscoderSupportsLocaleAndLayout();
  if (v7)
    CFRelease(v7);
  if (v14 && v13 == 1)
    free(v14);
  if (v6)
    CFRelease(v6);
  CFRelease(v5);
  return v8;
}

uint64_t TI::TIInputRecognizer::is_ml_based_typing_mode_supported(const UInt8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *v7;
  CFLocaleIdentifier v8;
  CFLocaleRef v9;
  __CFDictionary *Mutable;
  const __CFAllocator *Default;
  CFLocaleIdentifier v12;
  CFURLRef v13;
  uint64_t v14;
  const void *v15;
  CFLocaleIdentifier v16;
  const void **v17;
  uint64_t v18;
  CFLocaleIdentifier localeIdentifier;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  KB::cf_string(a1, &localeIdentifier);
  v8 = localeIdentifier;
  v9 = CFLocaleCreate(v7, localeIdentifier);
  if (v8)
    CFRelease(v8);
  if (!v9)
    return 0;
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC58], v9);
  if (*(_BYTE *)(a3 + 24))
  {
    Default = CFAllocatorGetDefault();
    KB::cf_string((const UInt8 *)a3, &localeIdentifier);
    v12 = localeIdentifier;
    v13 = CFURLCreateWithString(Default, localeIdentifier, 0);
    if (v12)
      CFRelease(v12);
    if (v13)
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC30], v13);
      CFRelease(v13);
    }
  }
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = (const void *)*MEMORY[0x1E0D3AC50];
    KB::cf_string((const UInt8 *)a2, &localeIdentifier);
    v16 = localeIdentifier;
    CFDictionaryAddValue(Mutable, v15, localeIdentifier);
    if (v16)
      CFRelease(v16);
  }
  v17 = (const void **)MEMORY[0x1E0D3AC40];
  if (a4)
    v17 = (const void **)MEMORY[0x1E0D3AC48];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D3AC38], *v17);
  v18 = ITTouchTranscoderSupportsConfiguration();
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(v9);
  return v18;
}

uint64_t TI::TIInputRecognizer::ml_based_tap_typing_enabled(unsigned __int16 *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned int *v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  const char *v14;
  size_t v15;
  const char *v16;
  size_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t is_ml_based_typing_mode_supported;
  uint64_t **v30;
  uint64_t *i;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _BOOL8 v35;
  void *v36;
  const char *v37;
  const char *v38;
  int AppBooleanValue;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v46[2];
  char v47;
  void *__dst[2];
  unsigned __int8 v49;
  size_t __n;
  void *v51;
  _BYTE v52[56];
  void *__p;
  char v54;
  _QWORD v55[21];

  v55[19] = *MEMORY[0x1E0C80C00];
  if ((v8 & 1) == 0
  {
    TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = 0u;
    *(_OWORD *)&qword_1EDAEDD28 = 0u;
    dword_1EDAEDD38 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,BOOL>::~unordered_map[abi:nn180100], &TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table, &dword_1DA6F2000);
  }
  if ((v9 & 1) == 0
  {
    TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::ml_based_tap_typing_feature_flag = _os_feature_enabled_impl();
  }
  if (!(s_ml_based_tap_typing | TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::ml_based_tap_typing_feature_flag))
    return 0;
  v10 = *a3;
  if (*a3)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&__n);
  v12 = (const char *)*((_QWORD *)a1 + 1);
  if (!v12)
    v12 = (const char *)(a1 + 8);
  v13 = "";
  if (*a1)
    v14 = v12;
  else
    v14 = "";
  v15 = strlen(v14);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
  v16 = *(const char **)(a2 + 8);
  if (!v16)
    v16 = (const char *)(a2 + 16);
  if (*(_WORD *)a2)
    v13 = v16;
  v17 = strlen(v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)v13, v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
  std::ostream::operator<<();
  if (*(_BYTE *)(a4 + 24))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, (uint64_t)"_", 1);
    v18 = *(char *)(a4 + 23);
    if (v18 >= 0)
      v19 = a4;
    else
      v19 = *(_QWORD *)a4;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a4 + 23);
    else
      v20 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&__n, v19, v20);
  }
  std::stringbuf::str[abi:nn180100]<std::allocator<char>>(__dst, (uint64_t)&v51);
  __n = *MEMORY[0x1E0DE4F60];
  *(size_t *)((char *)&__n + *(_QWORD *)(__n - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v51 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1DF0A20F0](v55);
  if (v10)
    WTF::RefCounted<KB::DictionaryContainer>::deref(v10);
  if ((v49 & 0x80u) == 0)
    v21 = (uint64_t *)__dst;
  else
    v21 = (uint64_t *)__dst[0];
  if ((v49 & 0x80u) == 0)
    v22 = v49;
  else
    v22 = (unint64_t)__dst[1];
  v23 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v21, v22);
  v24 = *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
        + 1);
  if (*((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1))
  {
    v25 = v23;
    v26 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                         + 8));
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.u32[0];
    if (v26.u32[0] > 1uLL)
    {
      v28 = v23;
      if (v23 >= *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                  + 1))
        v28 = v23
            % *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
              + 1);
    }
    else
    {
      v28 = (*((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1)
           - 1) & v23;
    }
    v30 = *(uint64_t ***)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                       + 8 * v28);
    if (v30)
    {
      for (i = *v30; i; i = (uint64_t *)*i)
      {
        v32 = i[1];
        if (v32 == v25)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__dst))
          {
            is_ml_based_typing_mode_supported = *((_BYTE *)i + 40) != 0;
            goto LABEL_94;
          }
        }
        else
        {
          if (v27 > 1)
          {
            if (v32 >= v24)
              v32 %= v24;
          }
          else
          {
            v32 &= v24 - 1;
          }
          if (v32 != v28)
            break;
        }
      }
    }
  }
  v33 = *a3;
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  KB::String::String((KB::String *)&__n, "en");
  if ((unsigned __int16)__n <= *a1)
  {
    if (*((_QWORD *)a1 + 1))
      v37 = (const char *)*((_QWORD *)a1 + 1);
    else
      v37 = (const char *)(a1 + 8);
    v36 = v51;
    if (v51)
      v38 = (const char *)v51;
    else
      v38 = v52;
    v35 = strncmp(v37, v38, (unsigned __int16)__n) == 0;
    if (!v36)
      goto LABEL_64;
  }
  else
  {
    v35 = 0;
    v36 = v51;
    if (!v51)
      goto LABEL_64;
  }
  if (BYTE6(__n) == 1)
    free(v36);
LABEL_64:
  if (v35)
  {
    LOBYTE(__n) = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("EnableMLTapTyping"), CFSTR("com.apple.keyboard"), (Boolean *)&__n);
    if (!(_BYTE)__n || !AppBooleanValue)
    {
      if (!v33)
      {
        v35 = 0;
        goto LABEL_69;
      }
      v43 = *((_QWORD *)v33 + 6);
      v44 = v43 - *((_QWORD *)v33 + 5);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v44 >> 4)) <= 2)
        v35 = v44 != 352 || *(_DWORD *)(v43 - 16) == -2;
      else
        v35 = 0;
      goto LABEL_68;
    }
  }
  if (v33)
LABEL_68:
    WTF::RefCounted<KB::DictionaryContainer>::deref(v33);
LABEL_69:
  if (s_ml_based_tap_typing)
  {
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__dst, (uint64_t)__dst)[40] = v35;
    is_ml_based_typing_mode_supported = v35;
  }
  else
  {
    is_ml_based_typing_mode_supported = 0;
    if (*(_WORD *)a2 && *a1)
    {
      if (v35)
      {
        if (*((_QWORD *)a1 + 1))
          v40 = (char *)*((_QWORD *)a1 + 1);
        else
          v40 = (char *)(a1 + 8);
        std::string::basic_string[abi:nn180100]<0>(&__n, v40);
        v41 = *(char **)(a2 + 8);
        if (!v41)
          v41 = (char *)(a2 + 16);
        if (*(_WORD *)a2)
          v42 = v41;
        else
          v42 = "";
        std::string::basic_string[abi:nn180100]<0>(v46, v42);
        is_ml_based_typing_mode_supported = TI::TIInputRecognizer::is_ml_based_typing_mode_supported((const UInt8 *)&__n, (uint64_t)v46, a4, 1);
        if (v47 < 0)
          operator delete(v46[0]);
        if ((v52[7] & 0x80000000) != 0)
          operator delete((void *)__n);
      }
      else
      {
        is_ml_based_typing_mode_supported = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__dst, (uint64_t)__dst)[40] = is_ml_based_typing_mode_supported;
    }
  }
LABEL_94:
  if ((char)v49 < 0)
    operator delete(__dst[0]);
  return is_ml_based_typing_mode_supported;
}

uint64_t std::unordered_map<std::string,BOOL>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD **v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *i;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;

  v4 = (unsigned __int8 *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v6 = v5;
  }
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v6);
  v8 = v7;
  v9 = *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1);
  if (*((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
       + 1))
  {
    v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                         + 8));
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                 + 1))
        v2 = v7
           % *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1);
    }
    else
    {
      v2 = (*((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
            + 1)
          - 1) & v7;
    }
    v12 = *(void ***)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                    + 8 * v2);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v13 + 16, v4))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v2)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v13 + 4) = *(_QWORD *)(a2 + 16);
  }
  v13[40] = 0;
  v16 = (float)(unint64_t)(qword_1EDAEDD30 + 1);
  if (!v9 || (float)(*(float *)&dword_1EDAEDD38 * (float)v9) < v16)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDAEDD38);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
         + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                             + 1))
      goto LABEL_36;
    if (*(_QWORD *)&prime < *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                             + 1))
    {
      v27 = vcvtps_u32_f32((float)(unint64_t)qword_1EDAEDD30 / *(float *)&dword_1EDAEDD38);
      if (*((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
           + 1) < 3uLL
        || (v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                                 + 8)),
            v28.i16[0] = vaddlv_u8(v28),
            v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
             + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = (void *)TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
          *(_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
          + 1) = prime;
          do
            *(_QWORD *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                      + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD **)qword_1EDAEDD28;
          if (qword_1EDAEDD28)
          {
            v25 = *(_QWORD *)(qword_1EDAEDD28 + 8);
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                      + 8 * v25) = &qword_1EDAEDD28;
            for (i = *v24; i; v25 = v31)
            {
              v31 = i[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(_QWORD *)&prime)
                  v31 %= *(_QWORD *)&prime;
              }
              else
              {
                v31 &= *(_QWORD *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*(_QWORD *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                + 8 * v31))
                {
                  *(_QWORD *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                            + 8 * v31) = v24;
                  goto LABEL_61;
                }
                *v24 = (_QWORD *)*i;
                *i = **(_QWORD **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                                 + 8 * v31);
                **(_QWORD **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                            + 8 * v31) = i;
                i = v24;
              }
              v31 = v25;
LABEL_61:
              v24 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        v36 = (void *)TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
        *(_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)&TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
        + 1) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v32 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table;
  v33 = *(_QWORD **)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                   + 8 * v2);
  if (v33)
  {
    *(_QWORD *)v13 = *v33;
LABEL_78:
    *v33 = v13;
    goto LABEL_79;
  }
  *(_QWORD *)v13 = qword_1EDAEDD28;
  qword_1EDAEDD28 = (uint64_t)v13;
  *(_QWORD *)(v32 + 8 * v2) = &qword_1EDAEDD28;
  if (*(_QWORD *)v13)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(TI::TIInputRecognizer::ml_based_tap_typing_enabled(KB::String const&,KB::String const&,WTF::RefPtr<KB::DictionaryContainer>,std::optional<std::string> const&)::is_supported_lookup_table
                   + 8 * v34);
    goto LABEL_78;
  }
LABEL_79:
  ++qword_1EDAEDD30;
  return v13;
}

void TI::TIInputRecognizer::sync_with_input_from_UI(TI::TIInputRecognizer *this, const KB::String *a2, const KB::LanguageModelContext *a3)
{
  if (*((_QWORD *)this + 30) == 1)
  {
    if (*((_QWORD *)this + 9))
    {
      KB::LanguageModelContext::operator=((uint64_t)this + 104, (uint64_t *)a3);
      std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
    }
  }
}

void TI::TIInputRecognizer::drop_input_prefix(TI::TIInputRecognizer *this, const KB::LanguageModelContext *a2)
{
  const KB::String *v4;
  BOOL v5;
  _BYTE v6[8];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v6, "");
  TI::TIInputRecognizer::sync_with_input_from_UI(this, v4, a2);
  if (v7)
    v5 = v6[6] == 1;
  else
    v5 = 0;
  if (v5)
    free(v7);
  std::vector<KB::retain_ptr<_LXLexicon const*>>::__clear[abi:nn180100]((uint64_t *)this + 10);
}

void TI::TIInputRecognizer::state_for_typology_logging(uint64_t a1@<X0>, int a2@<W1>, CFMutableStringRef *a3@<X8>)
{
  CFMutableStringRef Mutable;
  const char *v7;
  __CFString *v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  const __CFString *String;
  const char *v14;
  const char *v15;
  float v16;
  double v17;
  const __CFString *StrokedPath;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int IsCompletion;
  int v26;
  const __CFString *v27;
  const char *v28;
  const char *v29;
  float v30;
  double v31;
  const char *v32;
  const __CFString *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  __CFString **v37;
  _WORD v38[3];
  char v39;
  void *v40;
  _BYTE v41[16];
  _WORD v42[3];
  char v43;
  void *v44;
  _QWORD v45[3];

  v45[2] = *MEMORY[0x1E0C80C00];
  Mutable = CFStringCreateMutable(0, 0);
  v8 = Mutable;
  if (*(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
  {
    *a3 = Mutable;
    if (Mutable)
    {
      CFRetain(Mutable);
      *a3 = v8;
      CFRelease(v8);
    }
    return;
  }
  KB::append_format(Mutable, (__CFString *)"IT Recognizer State\n", v7);
  if (*(_BYTE *)(a1 + 232))
  {
    v10 = (_QWORD *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0)
    {
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_11;
      v10 = (_QWORD *)*v10;
    }
    else if (!*(_BYTE *)(a1 + 231))
    {
      goto LABEL_11;
    }
    KB::append_format(v8, (__CFString *)"BundleURL: \"%s\"\n", v9, v10);
  }
LABEL_11:
  v37 = a3;
  if (a2 == 1)
  {
    KB::append_format(v8, (__CFString *)"\nIT Prefixes:\n", v9);
    v11 = *(_QWORD *)(a1 + 80);
    for (i = *(_QWORD *)(a1 + 88); v11 != i; v11 += 8)
    {
      if ((ITCandidateIsValidWord() & 1) == 0)
      {
        String = (const __CFString *)ITCandidateGetString();
        KB::utf8_string(String, (uint64_t)v42);
        v14 = (const char *)v44;
        if (!v44)
          v14 = (const char *)v45;
        if (v42[0])
          v15 = v14;
        else
          v15 = "";
        ITCandidateGetScore();
        v17 = v16;
        StrokedPath = (const __CFString *)ITCandidateGetStrokedPath();
        KB::utf8_string(StrokedPath, (uint64_t)v38);
        v20 = (const char *)v40;
        if (!v40)
          v20 = v41;
        if (v38[0])
          v21 = v20;
        else
          v21 = "";
        KB::append_format(v8, (__CFString *)"[%s] G %.6f StrokedPath=%s\n", v19, v15, *(_QWORD *)&v17, v21);
        if (v40 && v39 == 1)
          free(v40);
        if (v44 && v43 == 1)
          free(v44);
      }
    }
  }
  KB::append_format(v8, (__CFString *)"\nIT Candidates:\n", v9);
  v22 = *(_QWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 88);
  if (v22 != v23)
  {
    v24 = 0;
    do
    {
      IsCompletion = ITCandidateIsCompletion();
      if (a2 != 5)
      {
        if (a2)
        {
          if (a2 == 1)
            v26 = IsCompletion;
          else
            v26 = 0;
          if (v26 != 1)
            goto LABEL_61;
        }
        else if ((IsCompletion & 1) != 0)
        {
          goto LABEL_61;
        }
      }
      v27 = (const __CFString *)ITCandidateGetString();
      KB::utf8_string(v27, (uint64_t)v42);
      v28 = (const char *)v44;
      if (!v44)
        v28 = (const char *)v45;
      if (v42[0])
        v29 = v28;
      else
        v29 = "";
      ITCandidateGetScore();
      v31 = v30;
      if (ITCandidateIsCompletion())
        v32 = "Yes";
      else
        v32 = "No";
      v33 = (const __CFString *)ITCandidateGetStrokedPath();
      KB::utf8_string(v33, (uint64_t)v38);
      v35 = (const char *)v40;
      if (!v40)
        v35 = v41;
      if (v38[0])
        v36 = v35;
      else
        v36 = "";
      KB::append_format(v8, (__CFString *)"[%s] G %.6f Completion=%s StrokedPath=%s\n", v34, v29, *(_QWORD *)&v31, v32, v36);
      if (v40 && v39 == 1)
        free(v40);
      if (v44)
      {
        if (v43 == 1)
          free(v44);
      }
      if (++v24 == 10)
        break;
LABEL_61:
      v22 += 8;
    }
    while (v22 != v23);
  }
  *v37 = v8;
}

uint64_t TI::Favonius::Touch::create@<X0>(int a1@<W0>, int a2@<W1>, unsigned int **a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, float a9@<S2>, double a10@<D3>)
{
  uint64_t result;
  unsigned int *v21;
  unsigned int v22;

  result = operator new();
  *(_DWORD *)result = 1;
  *(double *)(result + 8) = a7;
  *(double *)(result + 16) = a8;
  *(float *)(result + 24) = a9;
  *(double *)(result + 32) = a10;
  *(_DWORD *)(result + 40) = a4;
  *(_DWORD *)(result + 44) = a5;
  *(_DWORD *)(result + 48) = a1;
  *(_DWORD *)(result + 52) = a2;
  v21 = *a3;
  *(_QWORD *)(result + 56) = *a3;
  if (v21)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *a6 = result;
  return result;
}

uint64_t TI::Favonius::Touch::Touch(uint64_t result, int a2, int a3, unsigned int **a4, int a5, int a6, double a7, double a8, float a9, double a10)
{
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)result = 1;
  *(double *)(result + 8) = a7;
  *(double *)(result + 16) = a8;
  *(float *)(result + 24) = a9;
  *(double *)(result + 32) = a10;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(_DWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  v10 = *a4;
  *(_QWORD *)(result + 56) = *a4;
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

{
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)result = 1;
  *(double *)(result + 8) = a7;
  *(double *)(result + 16) = a8;
  *(float *)(result + 24) = a9;
  *(double *)(result + 32) = a10;
  *(_DWORD *)(result + 40) = a5;
  *(_DWORD *)(result + 44) = a6;
  *(_DWORD *)(result + 48) = a2;
  *(_DWORD *)(result + 52) = a3;
  v10 = *a4;
  *(_QWORD *)(result + 56) = *a4;
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

void TIInlineCompletionGeneratorImpl::TIInlineCompletionGeneratorImpl(TIInlineCompletionGeneratorImpl *this, const __CFLocale *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  CFNumberRef v11;
  CFNumberRef v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  __int128 v16;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *((_QWORD *)this + 6) = Mutable;
  *((_QWORD *)this + 7) = a2;
  if (a2)
  {
    CFRetain(a2);
    *((_QWORD *)this + 7) = a2;
    Mutable = (__CFDictionary *)*((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 8) = a3;
  *((_QWORD *)this + 9) = a4;
  *((_QWORD *)this + 10) = a5;
  *((_QWORD *)this + 11) = a4;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 280) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 728) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_BYTE *)this + 320) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_BYTE *)this + 752) = 0;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D430D0], (const void *)*MEMORY[0x1E0D43110]);
  v11 = CFNumberCreate(0, kCFNumberSInt64Type, (char *)this + 64);
  v12 = CFNumberCreate(0, kCFNumberSInt64Type, (char *)this + 72);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E0D430A0], v11);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E0D43098], v12);
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 6), (const void *)*MEMORY[0x1E0D43118], (const void *)*MEMORY[0x1E0C9AE40]);
  *((_QWORD *)this + 44) = +[TIKeyboardFeatureSpecialization createAcceptableCharacterSetForKeyboardLocale:](TIKeyboardFeatureSpecialization, "createAcceptableCharacterSetForKeyboardLocale:", *((_QWORD *)this + 7));
  MEMORY[0x1DF0A2E10]();
  v13 = (std::__shared_weak_count *)operator new(0x1F8uLL);
  v14 = v13;
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA101670;
  LOBYTE(v13[3].__vftable) = 0;
  LOBYTE(v13[3].__shared_owners_) = 0;
  LOBYTE(v13[4].__shared_weak_owners_) = 0;
  LOBYTE(v13[5].__vftable) = 0;
  LOBYTE(v13[6].__shared_owners_) = 0;
  LOBYTE(v13[6].__shared_weak_owners_) = 0;
  BYTE4(v13[6].__shared_weak_owners_) = 0;
  LOBYTE(v13[7].__vftable) = 0;
  LOBYTE(v13[20].__shared_weak_owners_) = 0;
  v13[1].__shared_owners_ = 0;
  LOBYTE(v13[1].__shared_weak_owners_) = 0;
  v13[1].__vftable = 0;
  *(_QWORD *)&v16 = v13 + 1;
  *((_QWORD *)&v16 + 1) = v13;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&v13[1];
  v13[1].__shared_owners_ = (uint64_t)v13;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    v24 = v16;
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
    v16 = v24;
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  *((_OWORD *)this + 46) = v16;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  TIInlineCompletionEventDispatcher::did_update_metadata(*((_QWORD *)this + 92), (_BYTE *)this + 400);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA101670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA101670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

void std::__shared_ptr_emplace<TIInlineCompletionEventDispatcher>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  std::__optional_destruct_base<TIInlineCompletionAnalyticsMetadata,false>::~__optional_destruct_base[abi:nn180100](a1 + 168);
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      if (*(_BYTE *)(a1 + 126) == 1)
        free(v2);
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v3 = *(void **)(a1 + 88);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 86) == 1)
        free(v3);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(void **)(a1 + 48);
    if (v4)
    {
      if (*(_BYTE *)(a1 + 46) == 1)
        free(v4);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void TIInlineCompletionGeneratorImpl::~TIInlineCompletionGeneratorImpl(TIInlineCompletionGeneratorImpl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  const void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  void **v9;

  if (*((_QWORD *)this + 44))
    uset_close();
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 93);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__optional_destruct_base<TIInlineCompletionAnalyticsMetadata,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)this + 400);
  v5 = (unsigned int *)*((_QWORD *)this + 49);
  if (v5)
    WTF::RefCounted<KB::DictionaryContainer>::deref(v5);
  if (*((_BYTE *)this + 384))
  {
    v9 = (void **)((char *)this + 360);
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v9);
  }
  if (*((_BYTE *)this + 344))
  {
    v9 = (void **)((char *)this + 320);
    std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v9);
  }
  std::unique_ptr<TI::RejectionsDatabase>::reset[abi:nn180100]((TI::RejectionsDatabase **)this + 38, 0);
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 288);
  if (*((_BYTE *)this + 280))
    std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)this + 96);
  v6 = (const void *)*((_QWORD *)this + 7);
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 7) = 0;
  v7 = (const void *)*((_QWORD *)this + 6);
  if (v7)
    CFRelease(v7);
  *((_QWORD *)this + 6) = 0;
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 32);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair(uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 176))
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)(a1 + 168));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v4 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 72));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 64));
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1);
}

void TIInlineCompletionGeneratorImpl::initialize(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v6;
  *(_QWORD *)(a1 + 296) = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::mutex **)(a1 + 288);
  std::mutex::lock(v12);
  v13 = *a3;
  v14 = a3[1];
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    v13 = *(_QWORD *)(a1 + 32);
  }
  if (v13)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 16));
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v20 = 136315138;
    v21 = "initialize";
    _os_log_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s  TIInlineCompletionGeneratorImpl: Failed to initialize language model session", (uint8_t *)&v20, 0xCu);
  }
  std::mutex::unlock(v12);
}

uint64_t TIInlineCompletionGeneratorImpl::isValid(TIInlineCompletionGeneratorImpl *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 16);
  return v1 & 1;
}

void validFirstNames(_QWORD *a1@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  int64x2_t v3;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  KB::String *v24;
  KB::String *v25;
  uint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  void **v29;
  void **v30;
  int64x2_t *v31;
  _QWORD v32[6];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  int64x2_t v37;
  void **v38;
  void **v39;
  int64x2_t v40;
  void **v41;
  void ***v42;
  _BYTE v43[8];
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v3 = 0uLL;
  v37 = 0u;
  if (a1[1] == *a1)
  {
    v30 = 0;
  }
  else
  {
    v31 = a3;
    v6 = 0;
    do
    {
      v7 = (void *)objc_opt_new();
      if (*(_WORD *)(*a1 + 32 * v6))
      {
        v8 = *a1 + 32 * v6;
        v9 = *(const char **)(v8 + 8);
        v10 = (const char *)(v8 + 16);
        if (v9)
          v11 = v9;
        else
          v11 = v10;
      }
      else
      {
        v11 = "";
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11, v31);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "personNameComponentsFromString:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "givenName");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v14, "length"))
      {
        v33 = 0;
        v34 = &v33;
        v35 = 0x2020000000;
        v36 = 1;
        v15 = objc_msgSend(v14, "length");
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 3221225472;
        v32[2] = ___Z15validFirstNamesRKNSt3__16vectorIN2KB6StringENS_9allocatorIS2_EEEEPK4USet_block_invoke;
        v32[3] = &unk_1EA101548;
        v32[4] = &v33;
        v32[5] = a2;
        objc_msgSend(v14, "_enumerateLongCharactersInRange:usingBlock:", 0, v15, v32);
        if (*((_BYTE *)v34 + 24))
        {
          KB::utf8_string((KB *)v14, (uint64_t)v43);
          v16 = v37.i64[1];
          if (v37.i64[1] >= (unint64_t)v38)
          {
            v18 = (v37.i64[1] - v37.i64[0]) >> 5;
            if ((unint64_t)(v18 + 1) >> 59)
              abort();
            v19 = ((uint64_t)v38 - v37.i64[0]) >> 4;
            if (v19 <= v18 + 1)
              v19 = v18 + 1;
            if ((unint64_t)v38 - v37.i64[0] >= 0x7FFFFFFFFFFFFFE0)
              v20 = 0x7FFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            v42 = &v38;
            v21 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<language_modeling::v1::Token>>(v20);
            v22 = (uint64_t)&v21[4 * v18];
            v39 = v21;
            v40.i64[0] = v22;
            v41 = &v21[4 * v23];
            *(_DWORD *)v22 = 0x100000;
            *(_WORD *)(v22 + 4) = 0;
            *(_BYTE *)(v22 + 6) = 0;
            *(_QWORD *)(v22 + 8) = 0;
            KB::String::operator=(v22, (KB::String *)v43);
            v17 = v22 + 32;
            v40.i64[1] = v22 + 32;
            v24 = (KB::String *)v37.i64[1];
            v25 = (KB::String *)v37.i64[0];
            v26 = v40.i64[0];
            if (v37.i64[1] == v37.i64[0])
            {
              v28 = vdupq_n_s64(v37.u64[1]);
            }
            else
            {
              v27 = v40.i64[0] - 32;
              do
              {
                *(_DWORD *)v27 = 0x100000;
                v24 = (KB::String *)((char *)v24 - 32);
                *(_WORD *)(v27 + 4) = 0;
                *(_BYTE *)(v27 + 6) = 0;
                *(_QWORD *)(v27 + 8) = 0;
                v26 = KB::String::operator=(v27, v24);
                v27 = v26 - 32;
              }
              while (v24 != v25);
              v28 = v37;
              v17 = v40.i64[1];
            }
            v37.i64[0] = v26;
            v37.i64[1] = v17;
            v40 = v28;
            v29 = v38;
            v38 = v41;
            v41 = v29;
            v39 = (void **)v28.i64[0];
            std::__split_buffer<KB::String>::~__split_buffer((uint64_t)&v39);
          }
          else
          {
            *(_DWORD *)v37.i64[1] = 0x100000;
            *(_WORD *)(v16 + 4) = 0;
            *(_BYTE *)(v16 + 6) = 0;
            *(_QWORD *)(v16 + 8) = 0;
            v17 = KB::String::operator=(v16, (KB::String *)v43) + 32;
          }
          v37.i64[1] = v17;
          if (v44 && v43[6] == 1)
            free(v44);
        }
        _Block_object_dispose(&v33, 8);
      }

      ++v6;
    }
    while (v6 < (uint64_t)(a1[1] - *a1) >> 5);
    v3 = v37;
    v30 = v38;
    a3 = v31;
  }
  *a3 = v3;
  a3[1].i64[0] = (uint64_t)v30;
  v38 = 0;
  v37 = 0uLL;
  a3[1].i8[8] = 1;
  v39 = (void **)&v37;
  std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v39);
}

uint64_t ___Z15validFirstNamesRKNSt3__16vectorIN2KB6StringENS_9allocatorIS2_EEEEPK4USet_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = MEMORY[0x1DF0A2D20](a2);
  result = MEMORY[0x1DF0A2DEC](v5, v6);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
  return result;
}

void std::vector<KB::String>::__assign_with_size[abi:nn180100]<KB::String*,KB::String*>(uint64_t a1, KB::String *a2, KB::String *a3, unint64_t a4)
{
  KB::String *v6;
  KB::String *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  KB::String *v12;
  KB::String *v13;
  KB::String *v14;
  unint64_t v15;
  const KB::String *v16;
  uint64_t v17;
  KB::String *v18;
  KB::String *v19;
  void *v20;

  v6 = a2;
  v8 = *(KB::String **)a1;
  if (a4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    v14 = *(KB::String **)(a1 + 8);
    v15 = (v14 - v8) >> 5;
    if (v15 >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          KB::String::operator=(v8, v6);
          v6 = (KB::String *)((char *)v6 + 32);
          v8 = (KB::String *)((char *)v8 + 32);
        }
        while (v6 != a3);
        v14 = *(KB::String **)(a1 + 8);
      }
      while (v14 != v8)
      {
        v20 = (void *)*((_QWORD *)v14 - 3);
        if (v20 && *((_BYTE *)v14 - 26) == 1)
          free(v20);
        v14 = (KB::String *)((char *)v14 - 32);
      }
      *(_QWORD *)(a1 + 8) = v8;
    }
    else
    {
      v16 = (KB::String *)((char *)a2 + 32 * v15);
      if (v14 != v8)
      {
        v17 = 32 * v15;
        do
        {
          KB::String::operator=(v8, v6);
          v6 = (KB::String *)((char *)v6 + 32);
          v8 = (KB::String *)((char *)v8 + 32);
          v17 -= 32;
        }
        while (v17);
        v8 = *(KB::String **)(a1 + 8);
      }
      v18 = v8;
      if (v16 != a3)
      {
        v18 = v8;
        do
        {
          v19 = KB::String::String(v18, v16);
          v16 = (const KB::String *)((char *)v16 + 32);
          v18 = (KB::String *)((char *)v19 + 32);
        }
        while (v16 != a3);
      }
      *(_QWORD *)(a1 + 8) = v18;
    }
  }
  else
  {
    std::vector<KB::String>::__vdeallocate((void **)a1);
    if (a4 >> 59)
      abort();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 4;
    if (v9 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<KB::String>::__vallocate[abi:nn180100]((_QWORD *)a1, v11);
    v12 = *(KB::String **)(a1 + 8);
    while (v6 != a3)
    {
      v13 = KB::String::String(v12, v6);
      v6 = (KB::String *)((char *)v6 + 32);
      v12 = (KB::String *)((char *)v13 + 32);
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

void std::vector<KB::String>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          if (*(v3 - 26) == 1)
            free(v5);
        }
        v3 -= 32;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void tokenize(const __CFLocale *a1@<X1>, KB::LanguageModelContext *a2@<X8>)
{
  const __CFString *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t (*v16)(uint64_t);
  const char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  LMStreamTokenizerCreate();
  v12 = 0;
  v13 = &v12;
  v14 = 0x9812000000;
  v15 = __Block_byref_object_copy__10874;
  v16 = __Block_byref_object_dispose__10875;
  v17 = "";
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
  memset(v24, 0, sizeof(v24));
  v5 = (const __CFString *)MEMORY[0x1DF0A08CC](a1);
  KB::std_string(v5, __p);
  if (v11 >= 0)
    v6 = (char *)__p;
  else
    v6 = (char *)__p[0];
  TILexiconIDForLocaleIdentifier(v6);
  if (v11 < 0)
    operator delete(__p[0]);
  LMStreamTokenizerPushBytes();
  LMStreamTokenizerRelease();
  KB::LanguageModelContext::LanguageModelContext(a2, (const KB::LanguageModelContext *)(v13 + 6));
  _Block_object_dispose(&v12, 8);
  __p[0] = v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v23);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  if ((_QWORD)v19)
  {
    *((_QWORD *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t __Block_byref_object_copy__10874(uint64_t a1, uint64_t a2)
{
  return KB::LanguageModelContext::LanguageModelContext(a1 + 48, a2 + 48);
}

uint64_t __Block_byref_object_dispose__10875(uint64_t a1)
{
  void *v2;
  void **v4;

  v4 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v4);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 120));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 112));
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1 + 48);
}

void ___Z8tokenizeRKN2KB6StringEPK10__CFLocale_block_invoke(uint64_t a1, const char *a2, unsigned __int16 a3, unsigned int a4)
{
  BOOL v6;
  _BYTE v7[8];
  void *v8;
  uint64_t v9;
  TITokenID v10;

  v9 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v7, a2, a3);
  if (a4 != 2)
  {
    v10.lexicon_id = *(_DWORD *)(a1 + 40);
    v10.word_id = a4;
    KB::LanguageModelContext::append((KB::LanguageModelContext *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), v10, (const KB::String *)v7, 0);
  }
  if (v8)
    v6 = v7[6] == 1;
  else
    v6 = 0;
  if (v6)
    free(v8);
}

uint64_t fullCompletionFromCacheElement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  uint64_t result;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v4 = (std::string *)(a2 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  }
  *(_BYTE *)(a2 + 64) = 0;
  result = a2 + 64;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    result = MEMORY[0x1DF0A1C10]();
    *(_BYTE *)(a2 + 72) = 1;
  }
  return result;
}

void completionFromCacheElement(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::string __p;
  std::string __str;
  std::string v8;
  char v9;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  std::string::basic_string(&v8, &__str, *(_QWORD *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    __p = v8;
  if (*(_BYTE *)(a1 + 72))
    v4 = language_modeling::v1::InlineCompletion::probability((language_modeling::v1::InlineCompletion *)(a1 + 64));
  else
    v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_DWORD *)(a1 + 56);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 0;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)a2 = __p;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 56) = v5;
    *(_BYTE *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

uint64_t phraseBlockedByNegativeLearning(sqlite3 **a1, int a2, std::string *this)
{
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  int64x2_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  int64x2_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  unint64_t v45;
  std::string v46;
  _BYTE v47[42];
  uint64_t v48;

  v6 = 0;
  v48 = *MEMORY[0x1E0C80C00];
  v44 = 0uLL;
  v45 = 0;
  while (1)
  {
    v7 = std::string::find(this, 32, v6);
    if (v7 == -1)
      break;
    v8 = v7;
    std::string::basic_string(&v46, this, v6, v7 - v6, (std::allocator<char> *)v47);
    v9 = (_OWORD *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1) >= v45)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_58;
      if (0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3) > v12)
        v12 = 0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 3) >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      *(_QWORD *)&v47[32] = &v45;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v13);
      else
        v14 = 0;
      v15 = v13 + 8 * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3);
      v16 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
      *(_OWORD *)v15 = v16;
      memset(&v46, 0, sizeof(v46));
      v17 = *((_QWORD *)&v44 + 1);
      v18 = v44;
      if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      {
        v21 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
        v19 = v13 + 24 * v11;
      }
      else
      {
        v19 = v13 + 24 * v11;
        do
        {
          v20 = *(_OWORD *)(v17 - 24);
          *(_QWORD *)(v19 - 8) = *(_QWORD *)(v17 - 8);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          *(_QWORD *)(v17 - 16) = 0;
          *(_QWORD *)(v17 - 8) = 0;
          *(_QWORD *)(v17 - 24) = 0;
          v17 -= 24;
        }
        while (v17 != v18);
        v21 = (int64x2_t)v44;
      }
      v22 = v15 + 24;
      *(_QWORD *)&v44 = v19;
      *(int64x2_t *)&v47[8] = v21;
      v23 = v45;
      v45 = v13 + 24 * v14;
      *(_QWORD *)&v47[24] = v23;
      *(_QWORD *)v47 = v21.i64[0];
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v47);
      *((_QWORD *)&v44 + 1) = v22;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
    }
    else
    {
      v10 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
      *(_QWORD *)(*((_QWORD *)&v44 + 1) + 16) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
      *v9 = v10;
      *((_QWORD *)&v44 + 1) = (char *)v9 + 24;
    }
    v6 = v8 + 1;
  }
  std::string::basic_string(&v46, this, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v47);
  v24 = (_OWORD *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) >= v45)
  {
    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3);
    v28 = v27 + 1;
    if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
      abort();
    if (0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3) > v28)
      v28 = 0x5555555555555556 * ((uint64_t)(v45 - v44) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 3) >= 0x555555555555555)
      v29 = 0xAAAAAAAAAAAAAAALL;
    else
      v29 = v28;
    *(_QWORD *)&v47[32] = &v45;
    if (v29)
      v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v29);
    else
      v30 = 0;
    v31 = v29 + 8 * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3);
    v32 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(_QWORD *)(v31 + 16) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
    *(_OWORD *)v31 = v32;
    memset(&v46, 0, sizeof(v46));
    v33 = *((_QWORD *)&v44 + 1);
    v34 = v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
    {
      v37 = vdupq_n_s64(*((unint64_t *)&v44 + 1));
      v35 = v29 + 24 * v27;
    }
    else
    {
      v35 = v29 + 24 * v27;
      do
      {
        v36 = *(_OWORD *)(v33 - 24);
        *(_QWORD *)(v35 - 8) = *(_QWORD *)(v33 - 8);
        *(_OWORD *)(v35 - 24) = v36;
        v35 -= 24;
        *(_QWORD *)(v33 - 16) = 0;
        *(_QWORD *)(v33 - 8) = 0;
        *(_QWORD *)(v33 - 24) = 0;
        v33 -= 24;
      }
      while (v33 != v34);
      v37 = (int64x2_t)v44;
    }
    v26 = (char *)(v31 + 24);
    *(_QWORD *)&v44 = v35;
    *(int64x2_t *)&v47[8] = v37;
    v38 = v45;
    v45 = v29 + 24 * v30;
    *(_QWORD *)&v47[24] = v38;
    *(_QWORD *)v47 = v37.i64[0];
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v47);
    *((_QWORD *)&v44 + 1) = v26;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v46.__r_.__value_.__l.__data_);
      v26 = (char *)*((_QWORD *)&v44 + 1);
    }
  }
  else
  {
    v25 = *(_OWORD *)&v46.__r_.__value_.__l.__data_;
    *(_QWORD *)(*((_QWORD *)&v44 + 1) + 16) = *((_QWORD *)&v46.__r_.__value_.__l + 2);
    *v24 = v25;
    v26 = (char *)v24 + 24;
    *((_QWORD *)&v44 + 1) = (char *)v24 + 24;
  }
  v39 = v44;
  if ((char *)v44 == v26)
  {
LABEL_44:
    *(_QWORD *)v47 = &v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
    return 0;
  }
  else
  {
    v40 = a2;
    while (!((unint64_t)TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(a1, v40, v39, 0) >> 32))
    {
      v40 = 0;
      v39 += 24;
      if ((char *)v39 == v26)
        goto LABEL_44;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      std::string::basic_string(&v46, this, 0, a2, (std::allocator<char> *)v47);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v46;
      else
        v42 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = this;
      else
        v43 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (*(char *)(v39 + 23) < 0)
        v39 = *(_QWORD *)v39;
      *(_DWORD *)v47 = 136315906;
      *(_QWORD *)&v47[4] = "phraseBlockedByNegativeLearning";
      *(_WORD *)&v47[12] = 2080;
      *(_QWORD *)&v47[14] = v42;
      *(_WORD *)&v47[22] = 2080;
      *(_QWORD *)&v47[24] = v43;
      *(_WORD *)&v47[32] = 2080;
      *(_QWORD *)&v47[34] = v39;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
    }
    *(_QWORD *)v47 = &v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v47);
    return 1;
  }
}

uint64_t TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(sqlite3 **a1, int a2, uint64_t a3, unsigned int a4)
{
  double v8;
  unsigned int should_block;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  double v14;
  void *__p;
  unsigned int v17;
  char v18;
  double v19;
  void *v20;
  unint64_t v21;
  unsigned __int8 v22;
  char v23;

  if (!TIAdaptationAutocorrectionRejectionV2Enabled())
  {
    v11 = 0;
    LOBYTE(v10) = 0;
    return v10 | ((*(_QWORD *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
  }
  v8 = (double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0;
  if ((a4 & 1) == 0)
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, "");
    should_block = TI::RejectionsDatabase::soft_should_block((uint64_t)a1, (unsigned __int8 *)&__p, (unsigned __int8 **)a3, 20, v8);
    a4 = should_block;
    if (v18 < 0)
    {
      operator delete(__p);
      if (a4)
        goto LABEL_5;
    }
    else if (should_block)
    {
LABEL_5:
      if (*(char *)(a3 + 23) >= 0)
        LODWORD(v10) = *(unsigned __int8 *)(a3 + 23);
      else
        LODWORD(v10) = *(_DWORD *)(a3 + 8);
      a4 = v10 >> 8;
      v11 = 1;
      return v10 | ((*(_QWORD *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
    }
  }
  if (*(char *)(a3 + 23) >= 0)
    v12 = (unsigned __int8 *)a3;
  else
    v12 = *(unsigned __int8 **)a3;
  TI::RejectionsDatabase::get_inline_completion_rejections(a1, (const char *)v12, (uint64_t)&__p);
  if (!v23)
  {
    LOBYTE(v10) = 0;
    v11 = 0;
    return v10 | ((*(_QWORD *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
  }
  v13 = (char)v22;
  if ((v22 & 0x80u) == 0)
    v10 = v22;
  else
    v10 = v21;
  if (v10 < a2 || (v14 = (v8 - v19) / 60.0 / 60.0 / 24.0, v14 > 180.0))
  {
LABEL_23:
    v11 = 0;
    goto LABEL_24;
  }
  v11 = v17;
  if (v17)
  {
    if (log(v14) / 1.38629436 < (double)((int)v11 - 1))
    {
      a4 = v10 >> 8;
      v11 = 1;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
LABEL_24:
  LOBYTE(v10) = 0;
LABEL_25:
  if (v13 < 0)
    operator delete(v20);
  return v10 | ((*(_QWORD *)&a4 & 0xFFFFFFLL) << 8) | (v11 << 32);
}

uint64_t TIInlineCompletionGeneratorImpl::_shouldSuppress(TIInlineCompletionGeneratorImpl *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  sqlite3 **v7;
  uint64_t *v8;
  std::string *v10;
  std::string v11;
  std::string buf;
  void *__p;
  char v14;
  _BYTE v15[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 72)
    && language_modeling::v1::InlineCompletion::wordBoundaryAt((language_modeling::v1::InlineCompletion *)(a2 + 64)))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v11 = *(std::string *)a2;
      v10 = &v11;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t **)*a3;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"_shouldSuppress";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      __p = a3;
      _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Completion --> %s was found but was suppressed for prefix %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  else
  {
    completionFromCacheElement(a2, (uint64_t)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v11, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    else
      v11 = buf;
    if (v15[8])
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v15);
    if (v14 < 0)
      operator delete(__p);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v7 = (sqlite3 **)TIInlineCompletionGeneratorImpl::rejectionsDatabase(a1);
    if (*((char *)a3 + 23) < 0)
      v8 = a3[1];
    else
      LODWORD(v8) = *((unsigned __int8 *)a3 + 23);
    if (phraseBlockedByNegativeLearning(v7, (int)v8, &v11))
      v6 = 2;
    else
      v6 = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

TI::RejectionsDatabase *TIInlineCompletionGeneratorImpl::rejectionsDatabase(TIInlineCompletionGeneratorImpl *this)
{
  TI::RejectionsDatabase *result;
  TI::RejectionsDatabase **v3;
  TI::RejectionsDatabase *v4;
  TI::RejectionsDatabase *v5;
  const std::__fs::filesystem::path *p_p;
  std::string __p;

  result = (TI::RejectionsDatabase *)*((_QWORD *)this + 38);
  if (!result)
  {
    v3 = (TI::RejectionsDatabase **)((char *)this + 304);
    v4 = (TI::RejectionsDatabase *)operator new();
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    std::unique_ptr<TI::RejectionsDatabase>::reset[abi:nn180100](v3, v4);
    v5 = *v3;
    TI::RejectionsDatabase::keyboard_db_file(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (const std::__fs::filesystem::path *)&__p;
    else
      p_p = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
    TI::RejectionsDatabase::initialize(v5, p_p, 2, CFSTR("rejections_database_migration_schema"));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return *v3;
  }
  return result;
}

void supportedGreetingForLanguage(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  std::string *v4;
  int v5;
  const std::string::value_type *v6;
  std::string::size_type size;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  std::string *v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *j;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  void *v39;
  unint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8x8_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 *v58;
  __int128 *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  __int128 *v69;
  __int128 *v72[3];
  void *v73[2];
  char v74;
  __int128 *v75[3];
  void *v76[2];
  char v77;
  __int128 *v78[3];
  void *v79[2];
  char v80;
  void *__p[2];
  __int128 v82;
  float v83;
  std::string *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87[3];
  uint64_t v88[3];
  uint64_t v89[3];
  uint64_t v90[3];
  uint64_t v91[3];
  uint64_t v92[3];
  uint64_t v93[3];
  uint64_t v94[3];
  _QWORD v95[3];
  __int128 v96;
  uint64_t v97[3];
  uint64_t v98[3];
  uint64_t v99[3];
  uint64_t v100[3];
  _QWORD v101[3];
  __int128 v102;
  uint64_t v103[3];
  uint64_t v104[3];
  uint64_t v105[3];
  uint64_t v106[3];
  uint64_t v107[3];
  uint64_t v108[3];
  _QWORD v109[3];
  std::string v110[2];
  std::string v111[2];
  std::string v112[2];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v79, "en");
  std::string::basic_string[abi:nn180100]<0>(&v102, "Hi");
  std::string::basic_string[abi:nn180100]<0>(v103, "Hey");
  std::string::basic_string[abi:nn180100]<0>(v104, "Hello");
  std::string::basic_string[abi:nn180100]<0>(v105, "Dear");
  std::string::basic_string[abi:nn180100]<0>(v106, "hi");
  std::string::basic_string[abi:nn180100]<0>(v107, "hey");
  std::string::basic_string[abi:nn180100]<0>(v108, "hello");
  std::string::basic_string[abi:nn180100]<0>(v109, "dear");
  v78[0] = (__int128 *)operator new(0xC0uLL);
  v78[2] = v78[0] + 12;
  v78[1] = (__int128 *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v102, (__int128 *)v110, (std::string *)v78[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v110, (__int128 *)v79, v78);
  std::string::basic_string[abi:nn180100]<0>(v76, "fr");
  std::string::basic_string[abi:nn180100]<0>(&v96, "Bonjour");
  std::string::basic_string[abi:nn180100]<0>(v97, "Salut");
  std::string::basic_string[abi:nn180100]<0>(v98, "Coucou");
  std::string::basic_string[abi:nn180100]<0>(v99, "bonjour");
  std::string::basic_string[abi:nn180100]<0>(v100, "salut");
  std::string::basic_string[abi:nn180100]<0>(v101, "coucou");
  v75[0] = (__int128 *)operator new(0x90uLL);
  v75[2] = v75[0] + 9;
  v75[1] = (__int128 *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v96, &v102, (std::string *)v75[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v111, (__int128 *)v76, v75);
  v2 = (unint64_t)v112;
  std::string::basic_string[abi:nn180100]<0>(v73, "es");
  std::string::basic_string[abi:nn180100]<0>(&v85, "Hola");
  std::string::basic_string[abi:nn180100]<0>(v87, "Querido");
  std::string::basic_string[abi:nn180100]<0>(v88, "Querida");
  std::string::basic_string[abi:nn180100]<0>(v89, "Estimado");
  std::string::basic_string[abi:nn180100]<0>(v90, "Estimada");
  std::string::basic_string[abi:nn180100]<0>(v91, "hola");
  std::string::basic_string[abi:nn180100]<0>(v92, "querido");
  std::string::basic_string[abi:nn180100]<0>(v93, "querida");
  std::string::basic_string[abi:nn180100]<0>(v94, "estimado");
  std::string::basic_string[abi:nn180100]<0>(v95, "estimada");
  v72[0] = (__int128 *)operator new(0xF0uLL);
  v72[2] = v72[0] + 15;
  v72[1] = (__int128 *)std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(&v85, &v96, (std::string *)v72[0]);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(v112, (__int128 *)v73, v72);
  v3 = 0;
  *(_OWORD *)__p = 0u;
  v82 = 0u;
  v83 = 1.0;
  do
  {
    v4 = &v110[2 * v3];
    v5 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v6 = (const std::string::value_type *)v4->__r_.__value_.__r.__words[0];
    size = v4->__r_.__value_.__l.__size_;
    if (v5 >= 0)
      v8 = &v110[2 * v3];
    else
      v8 = (std::string *)v4->__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      v9 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    else
      v9 = v4->__r_.__value_.__l.__size_;
    v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v8, v9);
    v11 = v10;
    v12 = (unint64_t)__p[1];
    if (__p[1])
    {
      v13 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = v13.u32[0];
      if (v13.u32[0] > 1uLL)
      {
        v2 = v10;
        if ((void *)v10 >= __p[1])
          v2 = v10 % (unint64_t)__p[1];
      }
      else
      {
        v2 = ((unint64_t)__p[1] - 1) & v10;
      }
      v15 = (unsigned __int8 **)*((_QWORD *)__p[0] + v2);
      if (v15)
      {
        for (i = *v15; i; i = *(unsigned __int8 **)i)
        {
          v17 = *((_QWORD *)i + 1);
          if (v17 == v11)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)&v110[2 * v3]))
              goto LABEL_83;
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v2)
              break;
          }
        }
      }
    }
    v18 = (char *)operator new(0x40uLL);
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = v11;
    v19 = (std::string *)(v18 + 16);
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(v19, v6, size);
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *((_QWORD *)v18 + 4) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    }
    *((_QWORD *)v18 + 5) = 0;
    *((_QWORD *)v18 + 6) = 0;
    *((_QWORD *)v18 + 7) = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(v18 + 40), (__int128 *)v110[2 * v3 + 1].__r_.__value_.__l.__data_, (__int128 *)v110[2 * v3 + 1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v110[2 * v3 + 1].__r_.__value_.__l.__size_ - v110[2 * v3 + 1].__r_.__value_.__r.__words[0]) >> 3));
    v20 = (float)(unint64_t)(*((_QWORD *)&v82 + 1) + 1);
    if (!v12 || (float)(v83 * (float)v12) < v20)
    {
      v21 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3)
        v21 = 1;
      v22 = v21 | (2 * v12);
      v23 = vcvtps_u32_f32(v20 / v83);
      if (v22 <= v23)
        prime = (int8x8_t)v23;
      else
        prime = (int8x8_t)v22;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v12 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_39;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v31 = vcvtps_u32_f32((float)*((unint64_t *)&v82 + 1) / v83);
        if (__p[1] < (void *)3
          || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
        {
          v31 = std::__next_prime(v31);
        }
        else
        {
          v33 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2)
            v31 = v33;
        }
        if (*(_QWORD *)&prime <= v31)
          prime = (int8x8_t)v31;
        if (*(_QWORD *)&prime >= v12)
        {
          v12 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_39:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v25 = operator new(8 * *(_QWORD *)&prime);
            v26 = __p[0];
            __p[0] = v25;
            if (v26)
              operator delete(v26);
            v27 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v27++) = 0;
            while (*(_QWORD *)&prime != v27);
            v28 = (_QWORD **)v82;
            if ((_QWORD)v82)
            {
              v29 = *(_QWORD *)(v82 + 8);
              v30 = (uint8x8_t)vcnt_s8(prime);
              v30.i16[0] = vaddlv_u8(v30);
              if (v30.u32[0] > 1uLL)
              {
                if (v29 >= *(_QWORD *)&prime)
                  v29 %= *(_QWORD *)&prime;
              }
              else
              {
                v29 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v29) = &v82;
              for (j = *v28; j; v29 = v35)
              {
                v35 = j[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*((_QWORD *)__p[0] + v35))
                  {
                    *((_QWORD *)__p[0] + v35) = v28;
                    goto LABEL_64;
                  }
                  *v28 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v35);
                  **((_QWORD **)__p[0] + v35) = j;
                  j = v28;
                }
                v35 = v29;
LABEL_64:
                v28 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v12 = (unint64_t)prime;
            goto LABEL_68;
          }
          v39 = __p[0];
          __p[0] = 0;
          if (v39)
            operator delete(v39);
          v12 = 0;
          __p[1] = 0;
        }
      }
LABEL_68:
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v11 >= v12)
          v2 = v11 % v12;
        else
          v2 = v11;
      }
      else
      {
        v2 = (v12 - 1) & v11;
      }
    }
    v36 = __p[0];
    v37 = (_QWORD *)*((_QWORD *)__p[0] + v2);
    if (v37)
    {
      *(_QWORD *)v18 = *v37;
LABEL_81:
      *v37 = v18;
      goto LABEL_82;
    }
    *(_QWORD *)v18 = v82;
    *(_QWORD *)&v82 = v18;
    v36[v2] = &v82;
    if (*(_QWORD *)v18)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      v37 = (char *)__p[0] + 8 * v38;
      goto LABEL_81;
    }
LABEL_82:
    ++*((_QWORD *)&v82 + 1);
LABEL_83:
    ++v3;
  }
  while (v3 != 3);
  for (k = 0; k != 0x1FFFFFFFFFFFFFEELL; k -= 6)
  {
    v84 = &v112[k / 3 + 1];
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
    if (SHIBYTE(v112[0].__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(v112[k / 3].__r_.__value_.__l.__data_);
  }
  v84 = (std::string *)v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v84);
  for (m = 0; m != -30; m -= 3)
  {
    if (SHIBYTE(v95[m + 2]) < 0)
      operator delete((void *)v95[m]);
  }
  if (v74 < 0)
    operator delete(v73[0]);
  *(_QWORD *)&v85 = v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
  for (n = 0; n != -18; n -= 3)
  {
    if (SHIBYTE(v101[n + 2]) < 0)
      operator delete((void *)v101[n]);
  }
  if (v77 < 0)
    operator delete(v76[0]);
  *(_QWORD *)&v85 = v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
  for (ii = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v109[ii + 2]) < 0)
      operator delete((void *)v109[ii]);
  }
  if (v80 < 0)
    operator delete(v79[0]);
  v85 = 0uLL;
  v86 = 0;
  v44 = *(char *)(a1 + 23);
  if (v44 >= 0)
    v45 = (uint64_t *)a1;
  else
    v45 = *(uint64_t **)a1;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a1 + 23);
  else
    v46 = *(_QWORD *)(a1 + 8);
  v47 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v45, v46);
  v48 = (unint64_t)__p[1];
  if (!__p[1])
    goto LABEL_138;
  v49 = v47;
  v50 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v50.i16[0] = vaddlv_u8(v50);
  v51 = v50.u32[0];
  if (v50.u32[0] > 1uLL)
  {
    v52 = v47;
    if ((void *)v47 >= __p[1])
      v52 = v47 % (unint64_t)__p[1];
  }
  else
  {
    v52 = ((unint64_t)__p[1] - 1) & v47;
  }
  v53 = __p[0];
  v54 = (unsigned __int8 **)*((_QWORD *)__p[0] + v52);
  if (!v54 || (v55 = *v54) == 0)
  {
LABEL_138:
    v58 = 0;
    v59 = &v85;
    goto LABEL_139;
  }
  v56 = (unint64_t)__p[1] - 1;
  while (2)
  {
    v57 = *((_QWORD *)v55 + 1);
    if (v49 != v57)
    {
      if (v51 > 1)
      {
        if (v57 >= v48)
          v57 %= v48;
      }
      else
      {
        v57 &= v56;
      }
      if (v57 != v52)
        goto LABEL_138;
      goto LABEL_137;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v55 + 16, (unsigned __int8 *)a1))
    {
LABEL_137:
      v55 = *(unsigned __int8 **)v55;
      if (!v55)
        goto LABEL_138;
      continue;
    }
    break;
  }
  v63 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v45, v46);
  v64 = v63;
  if (v51 > 1)
  {
    v65 = v63;
    if (v63 >= v48)
      v65 = v63 % v48;
  }
  else
  {
    v65 = v56 & v63;
  }
  v66 = (uint64_t **)v53[v65];
  if (!v66 || (v67 = *v66) == 0)
LABEL_159:
    abort();
  while (2)
  {
    v68 = v67[1];
    if (v68 != v64)
    {
      if (v51 > 1)
      {
        if (v68 >= v48)
          v68 %= v48;
      }
      else
      {
        v68 &= v56;
      }
      if (v68 != v65)
        goto LABEL_159;
      goto LABEL_158;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v67 + 16, (unsigned __int8 *)a1))
    {
LABEL_158:
      v67 = (uint64_t *)*v67;
      if (!v67)
        goto LABEL_159;
      continue;
    }
    break;
  }
  v69 = (__int128 *)v67[5];
  v59 = (__int128 *)(v67 + 5);
  v58 = v69;
LABEL_139:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(a2, v58, *((__int128 **)v59 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v59 + 1) - (_QWORD)v58) >> 3));
  *(_QWORD *)&v102 = &v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v102);
  v60 = (_QWORD *)v82;
  if ((_QWORD)v82)
  {
    do
    {
      v61 = (_QWORD *)*v60;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v60 + 2));
      operator delete(v60);
      v60 = v61;
    }
    while (v61);
  }
  v62 = __p[0];
  __p[0] = 0;
  if (v62)
    operator delete(v62);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:nn180100]<true,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL isGreeting(_BYTE *a1, CFLocaleRef locale)
{
  const __CFString *Value;
  std::string::size_type v4;
  std::string::size_type size;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  void *__p[2];
  char v14;
  std::string v15;
  std::string *v16;

  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  if (!Value)
    return 0;
  KB::std_string(Value, __p);
  supportedGreetingForLanguage((uint64_t)__p, &v15);
  if (v14 < 0)
    operator delete(__p[0]);
  size = v15.__r_.__value_.__l.__size_;
  v4 = v15.__r_.__value_.__r.__words[0];
  if (v15.__r_.__value_.__r.__words[0] != v15.__r_.__value_.__l.__size_)
  {
    v6 = a1[23];
    if (v6 >= 0)
      v7 = a1[23];
    else
      v7 = *((_QWORD *)a1 + 1);
    if (v6 < 0)
      a1 = *(_BYTE **)a1;
    do
    {
      v8 = *(unsigned __int8 *)(v4 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v4 + 23);
      else
        v9 = *(_QWORD *)(v4 + 8);
      if (v9 == v7)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, a1, *(_QWORD *)(v4 + 8)))
            goto LABEL_23;
        }
        else
        {
          if (!*(_BYTE *)(v4 + 23))
            goto LABEL_23;
          v10 = 0;
          while (*(unsigned __int8 *)(v4 + v10) == a1[v10])
          {
            if (v8 == ++v10)
              goto LABEL_23;
          }
        }
      }
      v4 += 24;
    }
    while (v4 != size);
    v4 = size;
  }
LABEL_23:
  v11 = v4 != size;
  v16 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v16);
  return v11;
}

void prefixMatchesCaseInsensitive(uint64_t a1@<X0>, const KB::String **a2@<X1>, unint64_t *a3@<X8>)
{
  const KB::String *v4;
  const KB::String *v5;
  const char *v7;
  std::__split_buffer<std::string>::pointer begin;
  _BOOL4 v9;
  const char *v10;
  const char *p_end;
  BOOL v12;
  void *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int64x2_t v30;
  unint64_t v31;
  std::string *v32;
  int v33;
  void *__p[2];
  uint64_t v35;
  unsigned __int16 v36[3];
  char v37;
  void *v38;
  _BYTE v39[16];
  std::__split_buffer<std::string> v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      KB::String::String((KB::String *)v36, v4);
      if (*(char *)(a1 + 23) >= 0)
        v7 = (const char *)a1;
      else
        v7 = *(const char **)a1;
      KB::String::String((KB::String *)&v40, v7);
      begin = v40.__begin_;
      if (LOWORD(v40.__first_) <= v36[0])
      {
        if (v38)
          v10 = (const char *)v38;
        else
          v10 = v39;
        if (v40.__begin_)
          p_end = (const char *)v40.__begin_;
        else
          p_end = (const char *)&v40.__end_;
        v9 = strncasecmp(v10, p_end, LOWORD(v40.__first_)) == 0;
      }
      else
      {
        v9 = 0;
      }
      if (begin)
        v12 = BYTE6(v40.__first_) == 1;
      else
        v12 = 0;
      if (v12)
        free(begin);
      v13 = v38;
      if (v9)
      {
        if (v38)
          v14 = (char *)v38;
        else
          v14 = v39;
        if (v36[0])
          v15 = v14;
        else
          v15 = "";
        std::string::basic_string[abi:nn180100]<0>(__p, v15);
        v17 = a3[1];
        v16 = a3[2];
        if (v17 >= v16)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a3) >> 3);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v20;
          v40.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 2);
          if (v22)
            v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v22);
          else
            v23 = 0;
          v24 = v22 + 24 * v19;
          v25 = *(_OWORD *)__p;
          *(_QWORD *)(v24 + 16) = v35;
          *(_OWORD *)v24 = v25;
          __p[1] = 0;
          v35 = 0;
          __p[0] = 0;
          v27 = *a3;
          v26 = a3[1];
          if (v26 == *a3)
          {
            v30 = vdupq_n_s64(v26);
            v28 = v22 + 24 * v19;
          }
          else
          {
            v28 = v22 + 24 * v19;
            do
            {
              v29 = *(_OWORD *)(v26 - 24);
              *(_QWORD *)(v28 - 8) = *(_QWORD *)(v26 - 8);
              *(_OWORD *)(v28 - 24) = v29;
              v28 -= 24;
              *(_QWORD *)(v26 - 16) = 0;
              *(_QWORD *)(v26 - 8) = 0;
              *(_QWORD *)(v26 - 24) = 0;
              v26 -= 24;
            }
            while (v26 != v27);
            v30 = *(int64x2_t *)a3;
          }
          v31 = v24 + 24;
          *a3 = v28;
          a3[1] = v24 + 24;
          *(int64x2_t *)&v40.__begin_ = v30;
          v32 = (std::string *)a3[2];
          a3[2] = v22 + 24 * v23;
          v40.__end_cap_.__value_ = v32;
          v40.__first_ = (std::__split_buffer<std::string>::pointer)v30.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v40);
          v33 = SHIBYTE(v35);
          a3[1] = v31;
          if (v33 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v18 = *(_OWORD *)__p;
          *(_QWORD *)(v17 + 16) = v35;
          *(_OWORD *)v17 = v18;
          a3[1] = v17 + 24;
        }
        v13 = v38;
      }
      if (v13)
      {
        if (v37 == 1)
          free(v13);
      }
      v4 = (const KB::String *)((char *)v4 + 32);
    }
    while (v4 != v5);
  }
}

void greetingCompletion(language_modeling::v1::CompletionStem *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, KB::StaticDictionary ***a4@<X3>, const __CFLocale *a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  unint64_t v15;
  KB::StaticDictionary **v16;
  const char *p_p;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  TIInlineCompletionGeneratorImpl *v23;
  const KB::LanguageModelContext *v24;
  const language_modeling::v1::CompletionStem *v25;
  void *__p;
  unint64_t v27;
  unsigned __int8 v28;
  std::string v29;
  _OWORD buf[2];
  unint64_t v31[15];
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 88) - v7;
  if (!v8 || !*(_BYTE *)(a3 + 24))
  {
    a6->__r_.__value_.__s.__data_[0] = 0;
    a6[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v14 = v7 + 8 * (v8 >> 3);
  if (*(char *)(v14 - 1) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v14 - 24), *(_QWORD *)(v14 - 16));
  else
    v29 = *(std::string *)(v14 - 24);
  language_modeling::v1::CompletionStem::prefix(this);
  if (*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80) == 48)
  {
    v15 = v28;
    if ((v28 & 0x80u) != 0)
      v15 = v27;
    if (v15 && isGreeting(&v29, a5))
    {
      v16 = *a4;
      if ((v28 & 0x80u) == 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      KB::String::String((KB::String *)buf, p_p);
      KB::DictionaryContainer::word_with_string(v16, (const KB::String *)buf, 0, (KB::Word *)v31);
      v18 = v32;
      KB::Word::~Word((KB::Word *)v31);
      if (*((_QWORD *)&buf[0] + 1) && BYTE6(buf[0]) == 1)
        free(*((void **)&buf[0] + 1));
      if (v18 < 3)
      {
        if (!*(_BYTE *)(a3 + 24))
        {
          v23 = (TIInlineCompletionGeneratorImpl *)std::__throw_bad_optional_access[abi:nn180100]();
          TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem(v23, v24, v25);
          return;
        }
        prefixMatchesCaseInsensitive((uint64_t)&__p, (const KB::String **)a3, v31);
        v19 = v31[0];
        if (v31[1] - v31[0] == 24)
        {
          v20 = *(char *)(v31[0] + 23);
          if (v20 < 0)
            v21 = *(_QWORD *)(v31[0] + 8);
          else
            v21 = *(unsigned __int8 *)(v31[0] + 23);
          v22 = v28;
          if ((v28 & 0x80u) != 0)
            v22 = v27;
          if (v21 > v22)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf[0]) = 136315138;
              *(_QWORD *)((char *)buf + 4) = "greetingCompletion";
              _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Constructing a greeting completion", (uint8_t *)buf, 0xCu);
              v19 = v31[0];
              if ((*(_BYTE *)(v31[0] + 23) & 0x80) == 0)
                goto LABEL_29;
            }
            else if ((v20 & 0x80) == 0)
            {
LABEL_29:
              *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
              a6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
LABEL_39:
              a6[1].__r_.__value_.__s.__data_[0] = 1;
              *(_QWORD *)&buf[0] = v31;
              std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              goto LABEL_32;
            }
            std::string::__init_copy_ctor_external(a6, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
            goto LABEL_39;
          }
        }
        *(_QWORD *)&buf[0] = v31;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
      }
    }
  }
  a6->__r_.__value_.__s.__data_[0] = 0;
  a6[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_32:
  if ((char)v28 < 0)
    operator delete(__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem(TIInlineCompletionGeneratorImpl *this@<X0>, const KB::LanguageModelContext *a2@<X1>, const language_modeling::v1::CompletionStem *a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  char *v9;
  KB::StaticDictionary **v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  int v14;
  char v15;
  std::string::size_type size;
  std::string::size_type v17;
  int v18;
  std::string *v19;
  uint64_t v20;
  std::string *p_s1;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  BOOL v28;
  _BOOL4 v29;
  int shouldSuppress;
  _BOOL4 v31;
  uint64_t v32;
  std::string *v33;
  std::string *v34;
  const char *v35;
  NSObject *v36;
  id v37;
  std::string *v38;
  std::string::value_type *v39;
  void *v40;
  std::string *v41;
  std::string::value_type *v42;
  std::string *v43;
  std::string *p_s;
  void *v45;
  char v46;
  std::string v47;
  std::string v48;
  uint64_t v49;
  int v50;
  char v51[8];
  char v52;
  uint64_t v53;
  std::string v54;
  KB::StaticDictionary **v55;
  void *v56;
  char v57;
  std::string v58;
  std::string v59;
  void *__p;
  char v61;
  std::string v62;
  std::string v63;
  uint64_t v64;
  int v65;
  char v66[8];
  char v67;
  uint64_t v68;
  std::string v69;
  std::string v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  std::string __s1;
  std::string v78;
  uint64_t v79;
  int v80;
  char v81[8];
  char v82;
  std::string *v83;
  void *v84;
  std::string v85;
  std::string __s;
  std::string v87;
  uint64_t v88;
  int v89;
  char v90[8];
  char v91;
  std::string v92;
  __int128 v93;
  __int128 v94;
  int v95;
  char v96[8];
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v8 = (char *)this + 88;
  language_modeling::v1::CompletionStem::prefix(a3);
  TIInlineCompletionsCache::cached_candidate(a2, (uint64_t)v8, (const void **)&v92.__r_.__value_.__l.__data_, *((_QWORD *)this + 10), &v69);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (!v76)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
      _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: No cached completion was found, cache emptied", (uint8_t *)&v92, 0xCu);
    }
    if (*((_BYTE *)this + 280))
    {
      std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)this + 96);
      *((_BYTE *)this + 280) = 0;
    }
    v9 = (char *)this + 360;
    v10 = (KB::StaticDictionary **)*((_QWORD *)this + 49);
    v55 = v10;
    if (v10)
    {
      do
        v11 = __ldaxr((unsigned int *)v10);
      while (__stlxr(v11 + 1, (unsigned int *)v10));
      v12 = (unsigned int *)v55;
      greetingCompletion(a3, (uint64_t)a2, (uint64_t)v9, &v55, *((const __CFLocale **)this + 7), &__s1);
      if (v12)
        WTF::RefCounted<KB::DictionaryContainer>::deref(v12);
    }
    else
    {
      greetingCompletion(a3, (uint64_t)a2, (uint64_t)v9, &v55, *((const __CFLocale **)this + 7), &__s1);
    }
    if (!v78.__r_.__value_.__s.__data_[0])
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      goto LABEL_174;
    }
    v13 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v54, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    else
      v54 = __s1;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
      v94 = 0u;
      v93 = 0u;
      v95 = 3;
      v96[0] = 0;
      v97 = 0;
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    else
    {
      v92 = v54;
      v93 = 0u;
      v94 = 0u;
      v95 = 3;
      v96[0] = 0;
      v97 = 0;
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v47, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
    else
      v47 = v92;
    if (SBYTE7(v94) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, (const std::string::value_type *)v93, *((std::string::size_type *)&v93 + 1));
    }
    else
    {
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v93;
      v48.__r_.__value_.__r.__words[2] = v94;
    }
    v49 = *((_QWORD *)&v94 + 1);
    v50 = v95;
    v51[0] = 0;
    v52 = 0;
    if (v97)
    {
      MEMORY[0x1DF0A1C10](v51, v96);
      v52 = 1;
    }
    v53 = 0;
    language_modeling::v1::CompletionStem::prefix(a3);
    shouldSuppress = TIInlineCompletionGeneratorImpl::_shouldSuppress(this, (uint64_t)&v47, (uint64_t **)&v45);
    if (v46 < 0)
      operator delete(v45);
    if (v52)
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v51);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    TIInlineCompletionEventDispatcher::did_generate_cached_completion(*((_QWORD *)this + 92), (uint64_t)&v92, (uint64_t)&v92, a3, shouldSuppress);
    if (shouldSuppress)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__s, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
        else
          __s = v92;
        p_s = &__s;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        LODWORD(v85.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
        WORD2(v85.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_s;
        _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Greeting completion --> %s was found but was suppressed", (uint8_t *)&v85, 0x16u);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
      }
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      memset(&__s, 0, sizeof(__s));
      *(_BYTE *)(a4 + 24) = 1;
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
    }
    else
    {
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__s, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
      else
        __s = v92;
      if (SBYTE7(v94) < 0)
      {
        std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v93, *((std::string::size_type *)&v93 + 1));
      }
      else
      {
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v93;
        v87.__r_.__value_.__r.__words[2] = v94;
      }
      v88 = *((_QWORD *)&v94 + 1);
      v89 = v95;
      v90[0] = 0;
      v91 = 0;
      if (v97)
      {
        MEMORY[0x1DF0A1C10](v90, v96);
        v91 = 1;
      }
      v41 = (std::string *)operator new(0x50uLL);
      v42 = &v41[3].__r_.__value_.__s.__data_[8];
      *(_QWORD *)a4 = std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v41, (__int128 *)&__s);
      *(_QWORD *)(a4 + 8) = v42;
      *(_QWORD *)(a4 + 16) = v42;
      memset(&v85, 0, sizeof(v85));
      *(_BYTE *)(a4 + 24) = 1;
      v83 = &v85;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v83);
      if (v91)
        language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v90);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v97)
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v96);
    if (SBYTE7(v94) < 0)
      operator delete((void *)v93);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v92.__r_.__value_.__l.__data_);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_174;
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_174;
    }
    v40 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_173;
  }
  fullCompletionFromCacheElement((uint64_t)&v69, (uint64_t)&v92);
  if (!v76)
    goto LABEL_198;
  completionFromCacheElement((uint64_t)&v69, (uint64_t)&__s);
  if (!v76)
    goto LABEL_198;
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v62, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
  else
    v62 = v69;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v63, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
  else
    v63 = v70;
  v64 = v71;
  v65 = v72;
  v66[0] = 0;
  v67 = 0;
  if (v74)
  {
    MEMORY[0x1DF0A1C10](v66, &v73);
    v67 = 1;
  }
  v68 = v75;
  language_modeling::v1::CompletionStem::prefix(a3);
  v14 = TIInlineCompletionGeneratorImpl::_shouldSuppress(this, (uint64_t)&v62, (uint64_t **)&__p);
  if (v61 < 0)
    operator delete(__p);
  if (v67)
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v66);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  TIInlineCompletionEventDispatcher::did_generate_cached_completion(*((_QWORD *)this + 92), (uint64_t)&__s, (uint64_t)&v92, a3, v14);
  language_modeling::v1::CompletionStem::prefix(a3);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v85 = __s;
  v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v17 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  v18 = SHIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = v85.__r_.__value_.__l.__size_;
  if (size == v17)
  {
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v85;
    else
      v19 = (std::string *)v85.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v29 = memcmp(__s1.__r_.__value_.__l.__data_, v19, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v23 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v22 = v23;
        v25 = v19->__r_.__value_.__s.__data_[0];
        v19 = (std::string *)((char *)v19 + 1);
        v24 = v25;
        v27 = v20-- != 0;
        v28 = v22 == v24;
        v29 = v22 == v24;
      }
      while (v28 && v27);
    }
    else
    {
      v29 = 1;
    }
  }
  else
  {
    v29 = 0;
  }
  v31 = v14 != 2 && v29;
  if (v18 < 0)
  {
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_89:
      if (!v31)
        goto LABEL_122;
      goto LABEL_93;
    }
  }
  else if ((v15 & 0x80) == 0)
  {
    goto LABEL_89;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v31)
    goto LABEL_122;
LABEL_93:
  v32 = *((_QWORD *)this + 92);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v59, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v59 = __s;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v59;
  else
    v33 = (std::string *)v59.__r_.__value_.__r.__words[0];
  KB::String::String((KB::String *)&__s1, (const char *)v33);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v58, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
  else
    v58 = v92;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v58;
  else
    v34 = (std::string *)v58.__r_.__value_.__r.__words[0];
  KB::String::String((KB::String *)&v85, (const char *)v34);
  language_modeling::v1::CompletionStem::prefix(a3);
  if (v57 >= 0)
    v35 = (const char *)&v56;
  else
    v35 = (const char *)v56;
  KB::String::String((KB::String *)&v83, v35);
  TIInlineCompletionEventDispatcher::did_register_completion_acceptance(v32, (const KB::String *)&__s1, (const KB::String *)&v85, (const KB::String *)&v83, 2);
  if (v84 && BYTE6(v83) == 1)
    free(v84);
  if (v57 < 0)
    operator delete(v56);
  if (v85.__r_.__value_.__l.__size_ && v85.__r_.__value_.__s.__data_[6] == 1)
    free((void *)v85.__r_.__value_.__l.__size_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (__s1.__r_.__value_.__l.__size_ && __s1.__r_.__value_.__s.__data_[6] == 1)
    free((void *)__s1.__r_.__value_.__l.__size_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_123;
    goto LABEL_126;
  }
LABEL_122:
  if (v14)
  {
LABEL_123:
    v36 = MEMORY[0x1E0C81028];
    v37 = MEMORY[0x1E0C81028];
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
LABEL_124:

      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      memset(&__s1, 0, sizeof(__s1));
      *(_BYTE *)(a4 + 24) = 1;
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s1;
      std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
      goto LABEL_140;
    }
    if (v76)
    {
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__s1, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
      else
        __s1 = v69;
      v43 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      LODWORD(v85.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)"cachedCompletionsForContextAndStem";
      WORD2(v85.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v85.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v43;
      _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Cached completion --> %s was found but was suppressed or blocked by negative learning", (uint8_t *)&v85, 0x16u);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      goto LABEL_124;
    }
LABEL_198:
    std::__throw_bad_optional_access[abi:nn180100]();
  }
LABEL_126:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__s1, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    __s1 = __s;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v78, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  else
    v78 = v87;
  v79 = v88;
  v80 = v89;
  v81[0] = 0;
  v82 = 0;
  if (v91)
  {
    MEMORY[0x1DF0A1C10](v81, v90);
    v82 = 1;
  }
  v38 = (std::string *)operator new(0x50uLL);
  v39 = &v38[3].__r_.__value_.__s.__data_[8];
  *(_QWORD *)a4 = std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v38, (__int128 *)&__s1);
  *(_QWORD *)(a4 + 8) = v39;
  *(_QWORD *)(a4 + 16) = v39;
  memset(&v85, 0, sizeof(v85));
  *(_BYTE *)(a4 + 24) = 1;
  v83 = &v85;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v83);
  if (v82)
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v81);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_140:
  if (v91)
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v90);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v97)
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v96);
  if (SBYTE7(v94) < 0)
    operator delete((void *)v93);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
  {
    v40 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_173:
    operator delete(v40);
  }
LABEL_174:
  if (v76)
  {
    if (v74)
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)&v73);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
}

std::string *std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string::size_type v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 14);
  this[2].__r_.__value_.__s.__data_[16] = 0;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = v8;
  this[2].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 72))
  {
    MEMORY[0x1DF0A1C10]();
    this[3].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t TIInlineCompletionGeneratorImpl::_updateCache(uint64_t a1, const KB::LanguageModelContext *a2, uint64_t a3)
{
  std::string *v6;
  _BYTE v7[184];
  std::string v8;
  _BYTE v9[104];
  std::string v10;
  std::string v11;
  uint64_t v12;
  int v13;
  _BYTE v14[8];
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  std::string *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v9, a2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v10 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v11 = *(std::string *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 48);
  v13 = *(_DWORD *)(a3 + 56);
  v14[0] = 0;
  v15 = 0;
  if (*(_BYTE *)(a3 + 72))
  {
    MEMORY[0x1DF0A1C10](v14, a3 + 64);
    v15 = 1;
  }
  if (*(_BYTE *)(a1 + 280))
  {
    std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair(a1 + 96);
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v8 = *(std::string *)a3;
    v6 = &v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v8.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v17 = "_updateCache";
    v18 = 2080;
    v19 = v6;
    _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  TIInlineCompletionGeneratorImpl: Updating cache with new completion: %s", buf, 0x16u);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  std::pair<KB::LanguageModelContext,TIInlineCompletion>::pair[abi:nn180100]((uint64_t)v7, (uint64_t)v9);
  TIInlineCompletionsCache::update(a1 + 88, (uint64_t)v7);
  std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)v7);
  return std::pair<KB::LanguageModelContext,TIInlineCompletion>::~pair((uint64_t)v9);
}

uint64_t std::pair<KB::LanguageModelContext,TIInlineCompletion>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = (std::string *)((char *)KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)a1, (const KB::LanguageModelContext *)a2)+ 104);
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 104);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 120);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = *(_QWORD *)(a2 + 152);
  v9 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 160) = v9;
  *(_QWORD *)(a1 + 152) = v8;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    MEMORY[0x1DF0A1C10]();
    *(_BYTE *)(a1 + 176) = 1;
  }
  return a1;
}

void TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(uint64_t a1@<X0>, language_modeling::v1::CompletionStem **a2@<X2>, _QWORD *a3@<X8>)
{
  unsigned __int8 v4;
  unint64_t v6;
  NSObject *v7;
  const void *v8;
  os_signpost_id_t v9;
  os_signpost_id_t v10;
  std::mutex *v11;
  NSObject *v12;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint8_t v19[16];
  _QWORD v20[3];
  _QWORD *v21;
  __int128 buf;
  unsigned __int8 v23;
  __int128 *p_buf;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = atomic_load((unsigned __int8 *)(a1 + 16));
  if ((v4 & 1) != 0)
  {
    language_modeling::v1::CompletionStem::prefix(*a2);
    if ((char)v23 < 0)
    {
      v6 = *(_QWORD *)(a1 + 80);
      operator delete((void *)buf);
      if (*((_QWORD *)&buf + 1) < v6)
        return;
    }
    else if (*(_QWORD *)(a1 + 80) > (unint64_t)v23)
    {
      return;
    }
    kdebug_trace();
    kac_get_log();
    v7 = (id)objc_claimAutoreleasedReturnValue();
    v8 = (const void *)(a1 ^ 0xC8);
    v9 = os_signpost_id_make_with_pointer(v7, (const void *)(a1 ^ 0xC8));
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = v9;
      if (os_signpost_enabled(v7))
      {
        LOWORD(buf) = 0;
        _os_signpost_emit_with_name_impl(&dword_1DA6F2000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v10, "kbdManager.languageModel.generateInlineCompletions", "", (uint8_t *)&buf, 2u);
      }
    }

    v11 = *(std::mutex **)(a1 + 288);
    std::mutex::lock(v11);
    *(_QWORD *)&buf = &off_1EA1016A8;
    *((_QWORD *)&buf + 1) = a3;
    p_buf = &buf;
    v20[0] = &off_1EA1016F0;
    v20[1] = a1;
    v21 = v20;
    language_modeling::v1::LanguageModelSession::enumerateInlineCompletions();
    kdebug_trace();
    kac_get_log();
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v13 = os_signpost_id_make_with_pointer(v12, v8);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v14 = v13;
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)v19 = 0;
        _os_signpost_emit_with_name_impl(&dword_1DA6F2000, v12, OS_SIGNPOST_INTERVAL_END, v14, "kbdManager.languageModel.generateInlineCompletions", "", v19, 2u);
      }
    }

    v15 = v21;
    if (v21 == v20)
    {
      v16 = 4;
      v15 = v20;
    }
    else
    {
      if (!v21)
        goto LABEL_19;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_19:
    v17 = p_buf;
    if (p_buf == &buf)
    {
      v18 = 4;
      v17 = &buf;
    }
    else
    {
      if (!p_buf)
      {
LABEL_24:
        std::mutex::unlock(v11);
        return;
      }
      v18 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
    goto LABEL_24;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "_inlineCompletionsWithLM";
    _os_log_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s  TIInlineCompletionGeneratorImpl: langugage model is not loaded, cannot compute inline completions", (uint8_t *)&buf, 0xCu);
  }
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA1016F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA1016F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_1>,BOOL ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 752));
  return v1 & 1;
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA1016A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA1016A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&)::$_0>,BOOL ()(language_modeling::v1::InlineCompletion const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  language_modeling::v1::InlineCompletion *v14;
  language_modeling::v1::InlineCompletion *v15;
  uint64_t v16;
  language_modeling::v1::InlineCompletion *v17;

  v3 = *(uint64_t **)(a1 + 8);
  v4 = v3[1];
  v5 = v3[2];
  if (v4 < v5)
  {
    v6 = MEMORY[0x1DF0A1C10]() + 8;
    goto LABEL_20;
  }
  v7 = (uint64_t)(v4 - *v3) >> 3;
  if ((unint64_t)(v7 + 1) >> 61)
    abort();
  v8 = v5 - *v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= (unint64_t)(v7 + 1))
    v9 = v7 + 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v10];
  v13 = MEMORY[0x1DF0A1C10](&v11[8 * v7], a2);
  v6 = v13 + 8;
  v15 = (language_modeling::v1::InlineCompletion *)*v3;
  v14 = (language_modeling::v1::InlineCompletion *)v3[1];
  if (v14 == (language_modeling::v1::InlineCompletion *)*v3)
  {
    *v3 = v13;
    v3[1] = v6;
    v3[2] = (uint64_t)v12;
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    v14 = (language_modeling::v1::InlineCompletion *)((char *)v14 - 8);
    v16 = language_modeling::v1::InlineCompletion::InlineCompletion();
  }
  while (v14 != v15);
  v17 = (language_modeling::v1::InlineCompletion *)*v3;
  v14 = (language_modeling::v1::InlineCompletion *)v3[1];
  *v3 = v16;
  v3[1] = v6;
  v3[2] = (uint64_t)v12;
  if (v14 != v17)
  {
    do
    {
      v14 = (language_modeling::v1::InlineCompletion *)((char *)v14 - 8);
      language_modeling::v1::InlineCompletion::~InlineCompletion(v14);
    }
    while (v14 != v17);
    v14 = v17;
  }
  if (v14)
LABEL_19:
    operator delete(v14);
LABEL_20:
  v3[1] = v6;
  return 1;
}

void TIInlineCompletionGeneratorImpl::_computeInlineCompletions(void ***a1, const KB::LanguageModelContext *a2, language_modeling::v1::CompletionStem **a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  std::__shared_weak_count *v17;
  id v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void ***v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  void **v35;
  std::__shared_weak_count *v36;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  char *v43;
  void **v44[6];
  std::__shared_weak_count *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *__p;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _QWORD v56[4];
  void **v57[3];
  void ***v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const language_modeling::v1::CompletionStem *v66;
  const language_modeling::v1::CompletionStem *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void ***v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)a1[1];
  v35 = *a1;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v36 = v6;
  TIInlineCompletionGeneratorImpl::_inlineCompletionsWithLM((uint64_t)a1, a3, &v42);
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v9 = (char *)v42;
  v10 = v43;
  if (v42 != v43)
  {
    v11 = 0;
    do
    {
      if (v11 >= v41)
      {
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v39) >> 4);
        v13 = v12 + 1;
        if (v12 + 1 > 0x333333333333333)
          abort();
        if (0x999999999999999ALL * ((uint64_t)(v41 - v39) >> 4) > v13)
          v13 = 0x999999999999999ALL * ((uint64_t)(v41 - v39) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - v39) >> 4) >= 0x199999999999999)
          v14 = 0x333333333333333;
        else
          v14 = v13;
        v59 = &v41;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v14);
        else
          v15 = 0;
        v16 = (void **)(v14 + 80 * v12);
        v57[0] = (void **)v14;
        v57[1] = v16;
        v58 = (void ***)(v14 + 80 * v15);
        std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>((uint64_t)v16);
        v57[2] = v16 + 10;
        std::vector<TIInlineCompletion>::__swap_out_circular_buffer(&v39, v57);
        v11 = v40;
        std::__split_buffer<TIInlineCompletion>::~__split_buffer((uint64_t)v57);
      }
      else
      {
        std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>(v11);
        v11 += 80;
      }
      v40 = v11;
      v9 += 8;
    }
    while (v9 != v10);
  }
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v57, a4);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v59, a2);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)&v66, *a3, a3[1], (a3[1] - *a3) >> 3);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(&v69, v39, v40, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - v39) >> 4));
  v72 = a1;
  if ((objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread") & 1) != 0)
  {
    TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()((uint64_t)v57);
    v17 = v36;
    goto LABEL_43;
  }
  v18 = MEMORY[0x1E0C80D38];
  v44[1] = (void **)MEMORY[0x1E0C809B0];
  v44[2] = (void **)3321888768;
  v44[3] = (void **)___ZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke;
  v44[4] = (void **)&__block_descriptor_240_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0_e5_v8__0l;
  v17 = v36;
  v44[5] = v35;
  v45 = v36;
  if (v36)
  {
    v19 = (unint64_t *)&v36->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = v46;
  if (v58)
  {
    if (v58 == v57)
    {
      v47 = v46;
      (*((void (**)(void ***, _BYTE *))v57[0] + 3))(v57, v46);
    }
    else
    {
      v47 = (_BYTE *)((uint64_t (*)(void))(*v58)[2])();
    }
  }
  else
  {
    v47 = 0;
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v48, (const KB::LanguageModelContext *)&v59);
  memset(v55, 0, sizeof(v55));
  std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)v55, v66, v67, (v67 - v66) >> 3);
  memset(v56, 0, 24);
  std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(v56, v69, v70, 0xCCCCCCCCCCCCCCCDLL * ((v70 - v69) >> 4));
  v56[3] = v72;
  v22 = (void *)MEMORY[0x1E0C80D38];
  TIDispatchAsync();

  v44[0] = (void **)v56;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)v55;
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v44);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v53);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v52);
  if (__p)
  {
    v51 = __p;
    operator delete(__p);
  }
  v23 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v47 == v46)
  {
    v26 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_41;
    v26 = 5;
    v21 = v47;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
LABEL_41:
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
LABEL_43:
  v44[0] = (void **)&v69;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)&v66;
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](v44);
  v44[0] = (void **)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v44);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v64);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v63);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  v27 = v60;
  if (v60)
  {
    v28 = (unint64_t *)&v60->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v58;
  if (v58 == v57)
  {
    v31 = 4;
    v30 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_55;
    v31 = 5;
  }
  ((void (*)(void))(*v30)[v31])();
LABEL_55:
  v57[0] = (void **)&v39;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](v57);
  v32 = (char *)v42;
  if (v42)
  {
    v33 = v43;
    v34 = v42;
    if (v43 != v42)
    {
      do
        language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)(v33 - 8));
      while (v33 != v32);
      v34 = v42;
    }
    v43 = v32;
    operator delete(v34);
  }
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

language_modeling::v1::CompletionStem *std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>(language_modeling::v1::CompletionStem *result, const language_modeling::v1::CompletionStem *a2, const language_modeling::v1::CompletionStem *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v6 = result;
    result = (language_modeling::v1::CompletionStem *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = (char *)result + 8 * v7;
    while (a2 != a3)
    {
      v8 = language_modeling::v1::CompletionStem::CompletionStem(result, a2);
      a2 = (const language_modeling::v1::CompletionStem *)((char *)a2 + 8);
      result = (language_modeling::v1::CompletionStem *)(v8 + 8);
    }
    v6[1] = result;
  }
  return result;
}

_QWORD *std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  const std::string::value_type **v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;

  if (a4)
  {
    if (a4 >= 0x333333333333334)
      abort();
    v6 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[10 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (__int128 *)(a2 + v9);
        v11 = (std::string *)&v7[v9 / 8];
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v12 = *v10;
          v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
        }
        v13 = (std::string *)&v7[v9 / 8 + 3];
        v14 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(_QWORD *)(a2 + v9 + 32));
        }
        else
        {
          v15 = *(_OWORD *)v14;
          v7[v9 / 8 + 5] = *(_QWORD *)(a2 + v9 + 40);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
        }
        v16 = &v7[v9 / 8];
        v17 = *(_QWORD *)(a2 + v9 + 48);
        *((_DWORD *)v16 + 14) = *(_DWORD *)(a2 + v9 + 56);
        v16[6] = v17;
        LOBYTE(v7[v9 / 8 + 8]) = 0;
        result = &v7[v9 / 8 + 8];
        *((_BYTE *)v16 + 72) = 0;
        if (*(_BYTE *)(a2 + v9 + 72))
        {
          result = (_QWORD *)MEMORY[0x1DF0A1C10](result, a2 + v9 + 64);
          *((_BYTE *)v16 + 72) = 1;
        }
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void ___ZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (*(_QWORD *)(a1 + 32))
        TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()(a1 + 48);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void TIInlineCompletionGeneratorImpl::_computeInlineCompletions(KB::LanguageModelContext const&,std::vector<language_modeling::v1::CompletionStem> const&,std::function<void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>)::$_0::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  unsigned __int8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int shouldSuppress;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35[3];
  void *v36;
  char v37;
  std::string v38;
  std::string v39;
  uint64_t v40;
  int v41;
  _BYTE v42[8];
  char v43;
  uint64_t v44;
  std::string v45;
  std::string v46;
  uint64_t v47;
  int v48;
  _BYTE v49[8];
  char v50;
  _BYTE v51[8];
  std::__shared_weak_count *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;

  v2 = (uint64_t *)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 184);
  if (*(_QWORD *)(a1 + 168) != *(_QWORD *)(a1 + 160))
  {
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v51, (const KB::LanguageModelContext *)(a1 + 32));
    v4 = *(__int128 **)(a1 + 160);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v45.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v5;
    }
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *((const std::string::value_type **)v4 + 3), *((_QWORD *)v4 + 4));
    }
    else
    {
      v11 = *(__int128 *)((char *)v4 + 24);
      v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 5);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    }
    v12 = *((_QWORD *)v4 + 6);
    v48 = *((_DWORD *)v4 + 14);
    v47 = v12;
    v49[0] = 0;
    v50 = 0;
    if (*((_BYTE *)v4 + 72))
    {
      MEMORY[0x1DF0A1C10](v49, v4 + 4);
      v50 = 1;
    }
    TIInlineCompletionGeneratorImpl::_updateCache(v3, (const KB::LanguageModelContext *)v51, (uint64_t)&v45);
    if (v50)
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v49);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    *(_QWORD *)&v26 = &v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v26);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v56);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v55);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    v13 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = *v2;
    if (*(char *)(*v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
    }
    else
    {
      v17 = *(_OWORD *)v16;
      v38.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
    }
    if (*(char *)(v16 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v16 + 24), *(_QWORD *)(v16 + 32));
    }
    else
    {
      v18 = *(_OWORD *)(v16 + 24);
      v39.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 40);
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
    }
    v19 = *(_QWORD *)(v16 + 48);
    v41 = *(_DWORD *)(v16 + 56);
    v40 = v19;
    v42[0] = 0;
    v43 = 0;
    if (*(_BYTE *)(v16 + 72))
    {
      MEMORY[0x1DF0A1C10](v42, v16 + 64);
      v43 = 1;
    }
    v44 = 0;
    language_modeling::v1::CompletionStem::prefix(*(language_modeling::v1::CompletionStem **)(a1 + 136));
    shouldSuppress = TIInlineCompletionGeneratorImpl::_shouldSuppress((TIInlineCompletionGeneratorImpl *)v3, (uint64_t)&v38, (uint64_t **)&v36);
    if (v37 < 0)
      operator delete(v36);
    if (v43)
      language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v42);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    TIInlineCompletionEventDispatcher::did_generate_new_completion(*(_QWORD *)(v3 + 736), v16, *(const language_modeling::v1::CompletionStem **)(a1 + 136), shouldSuppress);
    if (shouldSuppress)
    {
      memset(v35, 0, sizeof(v35));
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      *(_OWORD *)__p = 0u;
      language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v30);
      language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v31);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v21 = *(_QWORD *)(a1 + 24);
      if (v21)
      {
        (*(void (**)(uint64_t, void ***, __int128 *))(*(_QWORD *)v21 + 48))(v21, v35, &v26);
        v58 = (void **)&v32;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v58);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v31);
        language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v30);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
        if (*((_QWORD *)&v26 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        *(_QWORD *)&v26 = v35;
        std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v26);
        return;
      }
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 24);
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v25 + 48))(v25, v2, a1 + 32);
        return;
      }
    }
LABEL_62:
    std::__throw_bad_function_call[abi:nn180100]();
    __copy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0();
    return;
  }
  v6 = atomic_load((unsigned __int8 *)(v3 + 16));
  if ((v6 & 1) != 0)
    TIInlineCompletionEventDispatcher::did_generate_no_completion(*(TIInlineCompletionEventDispatcher **)(v3 + 736));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  *(_OWORD *)__p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v30);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v31);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    goto LABEL_62;
  (*(void (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v7 + 48))(v7, v2, &v26);
  v35[0] = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v35);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v31);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v30);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *__copy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v4 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(a1 + 6), a2 + 48);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 10), (const KB::LanguageModelContext *)(a2 + 80));
  a1[24] = 0;
  a1[25] = 0;
  a1[23] = 0;
  std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)(a1 + 23), *(const language_modeling::v1::CompletionStem **)(a2 + 184), *(const language_modeling::v1::CompletionStem **)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 3);
  a1[26] = 0;
  a1[27] = 0;
  v7 = a1 + 26;
  v7[2] = 0;
  result = std::vector<TIInlineCompletion>::__init_with_size[abi:nn180100]<TIInlineCompletion*,TIInlineCompletion*>(v7, *(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 216), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 4));
  v7[3] = *(_QWORD *)(a2 + 232);
  return result;
}

void __destroy_helper_block_a8_32c56_ZTSNSt3__18weak_ptrI31TIInlineCompletionGeneratorImplEE48c241_ZTSZN31TIInlineCompletionGeneratorImpl25_computeInlineCompletionsERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEENS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void **v7;

  v2 = (_QWORD *)(a1 + 48);
  v7 = (void **)(a1 + 208);
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)(a1 + 184);
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)(a1 + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v7);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 152));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 144));
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1 + 80);
  v4 = *(_QWORD **)(a1 + 72);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_8:
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

uint64_t std::construct_at[abi:nn180100]<TIInlineCompletion,language_modeling::v1::InlineCompletion const&,TIInlineCompletion*>(uint64_t a1)
{
  _BYTE v3[8];

  MEMORY[0x1DF0A1C10](v3);
  TIInlineCompletion::TIInlineCompletion(a1, (language_modeling::v1::InlineCompletion *)v3);
  language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)v3);
  return a1;
}

uint64_t *std::vector<TIInlineCompletion>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v4 + v7;
      v10 = *(_OWORD *)(v4 + v7 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(v4 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      v11 = *(_OWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(v4 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v11;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      v12 = *(_QWORD *)(v4 + v7 - 32);
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(v4 + v7 - 24);
      *(_QWORD *)(v8 - 32) = v12;
      *(_BYTE *)(v6 + v7 - 16) = 0;
      result = (uint64_t *)(v6 + v7 - 16);
      *(_BYTE *)(v8 - 8) = 0;
      if (*(_BYTE *)(v4 + v7 - 8))
      {
        result = (uint64_t *)language_modeling::v1::InlineCompletion::InlineCompletion();
        *(_BYTE *)(v8 - 8) = 1;
      }
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v13 = *v3;
  *v3 = v6;
  a2[1] = v13;
  v14 = v3[1];
  v3[1] = a2[2];
  a2[2] = v14;
  v15 = v3[2];
  v3[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TIInlineCompletion>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:nn180100]<TIInlineCompletion,0>(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void TIInlineCompletionGeneratorImpl::enumerateInlineCompletionsWithLM(uint64_t a1, const KB::LanguageModelContext *a2, const language_modeling::v1::CompletionStem **a3, char a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void **v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  const language_modeling::v1::CompletionStem **v36;
  _BYTE v37[24];
  _BYTE *v38;
  void **v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *__p;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const language_modeling::v1::CompletionStem *v51;
  const language_modeling::v1::CompletionStem *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  void *v57;
  void **v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[4];

  v70[3] = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0)
  {
    ++*(_QWORD *)(a1 + 24);
    v11 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v11 || (v12 = *(void ***)a1, (v13 = std::__shared_weak_count::lock(v11)) == 0))
      std::__throw_bad_weak_ptr[abi:nn180100]();
    v14 = v13;
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "thermalState");
    if ((objc_msgSend(v19, "isLowPowerModeEnabled") & 1) != 0 || v20 >= 2)
    {
      if (inlineCompletionsQueueLP(void)::onceToken != -1)
        dispatch_once(&inlineCompletionsQueueLP(void)::onceToken, &__block_literal_global_10925);
      v21 = &inlineCompletionsQueueLP(void)::queue;
    }
    else
    {
      if (inlineCompletionsQueueHP(void)::onceToken != -1)
        dispatch_once(&inlineCompletionsQueueHP(void)::onceToken, &__block_literal_global_43);
      v21 = &inlineCompletionsQueueHP(void)::queue;
    }
    v22 = (id)*v21;

    v54 = MEMORY[0x1E0C809B0];
    v55 = 3321888768;
    v56 = ___ZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke;
    v57 = &__block_descriptor_216_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0_e5_v8__0l;
    v39 = v12;
    v40 = v14;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v41 = *(_QWORD *)(a1 + 24);
    v24 = v42;
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v42, a5);
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v44, a2);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)&v51, *a3, a3[1], (a3[1] - *a3) >> 3);
    v58 = v39;
    v59 = v40;
    v25 = &v40->__shared_weak_owners_;
    do
      v26 = __ldxr((unint64_t *)v25);
    while (__stxr(v26 + 1, (unint64_t *)v25));
    v60 = v41;
    v27 = v61;
    if (v43)
    {
      if (v43 == v42)
      {
        v62 = v61;
        (*(void (**)(_QWORD *, _BYTE *))(v42[0] + 24))(v42, v61);
      }
      else
      {
        v62 = (_BYTE *)(*(uint64_t (**)(void))(*v43 + 16))();
      }
    }
    else
    {
      v62 = 0;
    }
    KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v63, (const KB::LanguageModelContext *)&v44);
    memset(v70, 0, 24);
    std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>((language_modeling::v1::CompletionStem *)v70, v51, v52, (v52 - v51) >> 3);
    TIDispatchAsync();
    v36 = &v51;
    std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
    v36 = (const language_modeling::v1::CompletionStem **)&v50;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v36);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v49);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v48);
    if (__p)
    {
      v47 = __p;
      operator delete(__p);
    }
    v28 = v45;
    if (v45)
    {
      v29 = (unint64_t *)&v45->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v43 == v42)
    {
      v31 = 4;
    }
    else
    {
      if (!v43)
        goto LABEL_44;
      v31 = 5;
      v24 = v43;
    }
    (*(void (**)(_QWORD *))(*v24 + 8 * v31))(v24);
LABEL_44:
    if (v40)
      std::__shared_weak_count::__release_weak(v40);

    v39 = (void **)v70;
    std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v39);
    v39 = (void **)&v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v39);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v68);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v67);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    v32 = v64;
    if (v64)
    {
      v33 = (unint64_t *)&v64->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v62 == v61)
    {
      v35 = 4;
    }
    else
    {
      if (!v62)
      {
LABEL_58:
        if (v59)
          std::__shared_weak_count::__release_weak(v59);
        std::__shared_weak_count::__release_weak(v14);
        return;
      }
      v35 = 5;
      v27 = v62;
    }
    (*(void (**)(_QWORD *))(*v27 + 8 * v35))(v27);
    goto LABEL_58;
  }
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v37, a5);
  TIInlineCompletionGeneratorImpl::_computeInlineCompletions((void ***)a1, a2, a3, (uint64_t)v37);
  v9 = v38;
  if (v38 == v37)
  {
    v10 = 4;
    v9 = v37;
    goto LABEL_29;
  }
  if (v38)
  {
    v10 = 5;
LABEL_29:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
}

void ___ZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_9;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 32)) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(v4 + 24))
  {
LABEL_9:
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3321888768;
    v11[2] = ___ZZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEENK3__0clEv_block_invoke;
    v12 = &__block_descriptor_64_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE_e5_v8__0l;
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v13, a1 + 56);
    TIDispatchAsync();
    v7 = v14;
    if (v14 == v13)
    {
      v8 = 4;
      v7 = v13;
    }
    else
    {
      if (!v14)
        goto LABEL_14;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
    if (!v3)
      return;
    goto LABEL_15;
  }
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v11, a1 + 56);
  TIInlineCompletionGeneratorImpl::_computeInlineCompletions((void ***)v4, (const KB::LanguageModelContext *)(a1 + 88), (language_modeling::v1::CompletionStem **)(a1 + 192), (uint64_t)v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

language_modeling::v1::CompletionStem *__copy_helper_block_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  language_modeling::v1::CompletionStem *v7;

  v4 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(a1 + 7), a2 + 56);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 11), (const KB::LanguageModelContext *)(a2 + 88));
  a1[24] = 0;
  a1[25] = 0;
  v7 = (language_modeling::v1::CompletionStem *)(a1 + 24);
  *((_QWORD *)v7 + 2) = 0;
  return std::vector<language_modeling::v1::CompletionStem>::__init_with_size[abi:nn180100]<language_modeling::v1::CompletionStem*,language_modeling::v1::CompletionStem*>(v7, *(const language_modeling::v1::CompletionStem **)(a2 + 192), *(const language_modeling::v1::CompletionStem **)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
}

void __destroy_helper_block_a8_32c250_ZTSKZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEE3__0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  void **v6;

  v6 = (void **)(a1 + 192);
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)(a1 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 160));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 152));
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100](a1 + 88);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == (_QWORD *)(a1 + 56))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 56);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZZN31TIInlineCompletionGeneratorImpl32enumerateInlineCompletionsWithLMERKN2KB20LanguageModelContextERKNSt3__16vectorIN17language_modeling2v114CompletionStemENS4_9allocatorIS8_EEEEbNS4_8functionIFvRKNS5_I18TIInlineCompletionNS9_ISF_EEEES3_EEEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  void **v14;

  memset(v13, 0, sizeof(v13));
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  *(_OWORD *)__p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v10);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v10 + 8));
  v11 = 0uLL;
  v12 = 0;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v2 + 48))(v2, v13, &v6);
    v14 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v14);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v10 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v10);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    *(_QWORD *)&v6 = v13;
    std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v6);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __copy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE();
  }
}

uint64_t __copy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_a8_32c109_ZTSNSt3__18functionIFvRKNS_6vectorI18TIInlineCompletionNS_9allocatorIS2_EEEERKN2KB20LanguageModelContextEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void ___ZL24inlineCompletionsQueueHPv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.TextInput.InlineCompletionsHP", v2);
  v1 = (void *)inlineCompletionsQueueHP(void)::queue;
  inlineCompletionsQueueHP(void)::queue = (uint64_t)v0;

}

void ___ZL24inlineCompletionsQueueLPv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.TextInput.InlineCompletionsLP", v2);
  v1 = (void *)inlineCompletionsQueueLP(void)::queue;
  inlineCompletionsQueueLP(void)::queue = (uint64_t)v0;

}

void TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(const __CFLocale **this@<X0>, const KB::String *a2@<X2>, uint64_t a3@<X8>)
{
  char *v7;
  char *v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  std::string::size_type size;
  int v13;
  std::string *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  __int128 v30;
  std::string *p_p;
  __int128 *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::string __p;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  language_modeling::v1::CompletionStem *v41[2];
  unint64_t v42;
  char v43[8];
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::string v50;
  unint64_t v51;
  unint64_t *v52;
  std::string v53;
  _QWORD v54[3];
  _QWORD *v55;
  __int128 v56;
  std::string::size_type v57;
  __int128 *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  tokenize(this[7], (KB::LanguageModelContext *)v43);
  v7 = (char *)*((_QWORD *)a2 + 1);
  if (!v7)
    v7 = (char *)a2 + 16;
  if (*(_WORD *)a2)
    v8 = v7;
  else
    v8 = "";
  std::string::basic_string[abi:nn180100]<0>(&v56, v8);
  v58 = 0;
  v9 = (std::string *)operator new(0x20uLL);
  v10 = v9;
  if (SHIBYTE(v57) < 0)
  {
    std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v56, *((std::string::size_type *)&v56 + 1));
    v11 = v58;
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v56;
    v9->__r_.__value_.__r.__words[2] = v57;
    v11 = 0;
  }
  v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  v41[1] = 0;
  v42 = 0;
  v41[0] = 0;
  language_modeling::v1::CompletionStem::CompletionStem((language_modeling::v1::CompletionStem *)&v53);
  size = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v13 = (char)size;
  if ((size & 0x80u) != 0)
    size = v10->__r_.__value_.__l.__size_;
  if (size == 6)
  {
    if (v13 >= 0)
      v14 = v10;
    else
      v14 = (std::string *)v10->__r_.__value_.__r.__words[0];
    v15 = 2018788690;
    v16 = bswap32(v14->__r_.__value_.__l.__data_);
    if (v16 == 2018788690 && (v16 = bswap32(WORD2(v14->__r_.__value_.__r.__words[0])) >> 16, v15 = 19832, v16 == 19832))
    {
      v17 = 0;
    }
    else if (v16 < v15)
    {
      v17 = -1;
    }
    else
    {
      v17 = 1;
    }
    if (v17)
      v18 = 0;
    else
      v18 = 3;
    if (v13 < 0)
      goto LABEL_27;
LABEL_19:
    v50 = *v10;
    goto LABEL_28;
  }
  v18 = 0;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_27:
  std::string::__init_copy_ctor_external(&v50, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
LABEL_28:
  LODWORD(v51) = v18;
  language_modeling::v1::CompletionStem::try_push_back();
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  language_modeling::v1::CompletionStem::set_score((language_modeling::v1::CompletionStem *)&v53, *(double *)&v10[1].__r_.__value_.__l.__data_);
  language_modeling::v1::CompletionStem::set_unique_id((language_modeling::v1::CompletionStem *)&v53);
  v19 = (v41[1] - v41[0]) >> 3;
  if ((unint64_t)(v19 + 1) >> 61)
    abort();
  v20 = (uint64_t)(v42 - (unint64_t)v41[0]) >> 2;
  if (v20 <= v19 + 1)
    v20 = v19 + 1;
  if (v42 - (unint64_t)v41[0] >= 0x7FFFFFFFFFFFFFF8)
    v21 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  v52 = &v42;
  if (v21)
    v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v21);
  else
    v22 = 0;
  v23 = v21 + 8 * v19;
  v50.__r_.__value_.__r.__words[0] = v21;
  v50.__r_.__value_.__l.__size_ = v23;
  v51 = v21 + 8 * v22;
  language_modeling::v1::CompletionStem::CompletionStem((language_modeling::v1::CompletionStem *)v23, (const language_modeling::v1::CompletionStem *)&v53);
  v41[0] = (language_modeling::v1::CompletionStem *)v50.__r_.__value_.__l.__size_;
  *(int64x2_t *)&v50.__r_.__value_.__r.__words[1] = vdupq_n_s64((unint64_t)v41[1]);
  v24 = v42;
  v42 = v51;
  v51 = v24;
  v50.__r_.__value_.__r.__words[0] = v50.__r_.__value_.__l.__size_;
  std::__split_buffer<language_modeling::v1::CompletionStem>::~__split_buffer((uint64_t)&v50);
  v41[1] = (language_modeling::v1::CompletionStem *)(v23 + 8);
  language_modeling::v1::CompletionStem::~CompletionStem((language_modeling::v1::CompletionStem *)&v53);
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10->__r_.__value_.__l.__data_);
  operator delete(v10);
  if (SHIBYTE(v57) < 0)
    operator delete((void *)v56);
  TIInlineCompletionGeneratorImpl::cachedCompletionsForContextAndStem((TIInlineCompletionGeneratorImpl *)this, (const KB::LanguageModelContext *)v43, v41[0], (uint64_t)&v50);
  if (!(_BYTE)v51)
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)&v56 = &off_1EA101738;
    *((_QWORD *)&v56 + 1) = &v38;
    v58 = &v56;
    v55 = v54;
    v54[0] = &off_1EA101738;
    v54[1] = &v38;
    TIInlineCompletionGeneratorImpl::enumerateInlineCompletionsWithLM((uint64_t)this, (const KB::LanguageModelContext *)v43, v41, 1, (uint64_t)v54);
    v26 = v55;
    if (v55 == v54)
    {
      v27 = 4;
      v26 = v54;
    }
    else
    {
      if (!v55)
        goto LABEL_63;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_63:
    if (v38 == v39)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
    }
    else
    {
      if (*((char *)v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v38, *((_QWORD *)v38 + 1));
      }
      else
      {
        v30 = *v38;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v38 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v30;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      KB::String::String((KB::String *)&v53, (const char *)p_p);
      *(_DWORD *)a3 = 0x100000;
      *(_WORD *)(a3 + 4) = 0;
      *(_BYTE *)(a3 + 6) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      KB::String::operator=(a3, (KB::String *)&v53);
      *(_BYTE *)(a3 + 32) = 1;
      if (v53.__r_.__value_.__l.__size_ && v53.__r_.__value_.__s.__data_[6] == 1)
        free((void *)v53.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v32 = v58;
    if (v58 == &v56)
    {
      v33 = 4;
      v32 = &v56;
    }
    else
    {
      if (!v58)
      {
LABEL_81:
        v29 = (std::string *)&v38;
        goto LABEL_82;
      }
      v33 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
    goto LABEL_81;
  }
  if (v50.__r_.__value_.__r.__words[0] == v50.__r_.__value_.__l.__size_)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    if (*(char *)(v50.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)v50.__r_.__value_.__l.__data_, *(_QWORD *)(v50.__r_.__value_.__r.__words[0] + 8));
    }
    else
    {
      v25 = *(_OWORD *)v50.__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(v50.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v25;
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v53;
    else
      v28 = (std::string *)v53.__r_.__value_.__r.__words[0];
    KB::String::String((KB::String *)&v56, (const char *)v28);
    *(_DWORD *)a3 = 0x100000;
    *(_WORD *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 6) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    KB::String::operator=(a3, (KB::String *)&v56);
    *(_BYTE *)(a3 + 32) = 1;
    if (*((_QWORD *)&v56 + 1) && BYTE6(v56) == 1)
      free(*((void **)&v56 + 1));
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  v29 = &v50;
LABEL_82:
  *(_QWORD *)&v56 = v29;
  std::vector<TIInlineCompletion>::__destroy_vector::operator()[abi:nn180100]((void ***)&v56);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  std::vector<language_modeling::v1::CompletionStem>::__destroy_vector::operator()[abi:nn180100]((void ***)&v50);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v50);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v48);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v47);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v34 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA101738;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA101738;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0,std::allocator<TIInlineCompletionGeneratorImpl::inlineCompletionForContextAndPrefix(KB::String const&,KB::String const&)::$_0>,void ()(std::vector<TIInlineCompletion> const&,KB::LanguageModelContext const&)>::operator()(uint64_t result, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t *v5;
  std::string *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::string *v14;
  _QWORD v15[5];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      v5 = *(uint64_t **)(v4 + 8);
      v6 = (std::string *)v5[1];
      v7 = v5[2];
      if ((unint64_t)v6 >= v7)
      {
        v9 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *v5) >> 4);
        v10 = v9 + 1;
        if (v9 + 1 > 0x333333333333333)
          abort();
        v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *v5) >> 4);
        if (2 * v11 > v10)
          v10 = 2 * v11;
        if (v11 >= 0x199999999999999)
          v12 = 0x333333333333333;
        else
          v12 = v10;
        v15[4] = v5 + 2;
        if (v12)
          v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::DictionaryCursors>>(v12);
        else
          v13 = 0;
        v14 = (std::string *)(v12 + 80 * v9);
        v15[0] = v12;
        v15[1] = v14;
        v15[3] = v12 + 80 * v13;
        std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v14, v2);
        v15[2] = (char *)v14 + 80;
        std::vector<TIInlineCompletion>::__swap_out_circular_buffer(v5, v15);
        v8 = v5[1];
        result = std::__split_buffer<TIInlineCompletion>::~__split_buffer((uint64_t)v15);
      }
      else
      {
        result = (uint64_t)std::construct_at[abi:nn180100]<TIInlineCompletion,TIInlineCompletion const&,TIInlineCompletion*>(v6, v2);
        v8 = result + 80;
      }
      v5[1] = v8;
      v2 += 5;
    }
    while (v2 != v3);
  }
  return result;
}

void TIInlineCompletionGeneratorImpl::registerLearning(TIInlineCompletionGeneratorImpl *a1, const std::string *a2, uint64_t a3, std::string::size_type a4, int a5)
{
  sqlite3 **v8;
  uint64_t v9;

  v8 = (sqlite3 **)TIInlineCompletionGeneratorImpl::rejectionsDatabase(a1);
  TIInlineCompletionsNegativeLearning::registerLearning(v8, a2, v9, a4, a5);
}

void TIInlineCompletionsNegativeLearning::registerLearning(sqlite3 **a1, const std::string *a2, uint64_t a3, std::string::size_type a4, int a5)
{
  double v9;
  std::string::size_type v10;
  std::string::size_type size;
  int v12;
  const std::string *v13;
  int v14;
  void *v15;
  std::string *p_p;
  unint64_t v17;
  unint64_t v18;
  sqlite3 *v19;
  std::string *v20;
  sqlite3 **v21;
  double v22;
  int v23;
  std::string *v24;
  std::string::size_type v25;
  unint64_t v26;
  std::string __p;
  std::string v28;
  std::string *v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (TIAdaptationAutocorrectionRejectionV2Enabled())
  {
    v9 = (double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0;
    if (a5)
    {
      v10 = std::string::find(a2, 32, 0);
      if (v10 == -1)
      {
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
        else
          __p = *a2;
      }
      else
      {
        std::string::basic_string(&__p, a2, 0, v10, (std::allocator<char> *)&v28);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:nn180100]<0>(&v28, (char *)p_p);
      v17 = TIInlineCompletionsNegativeLearning::wordBlockedByNegativeLearning(a1, 0, (uint64_t)&v28, 1u);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v18 = *(unsigned __int8 *)(a4 + 23);
      if (!HIDWORD(v17))
      {
        if ((v18 & 0x80u) == 0)
          v19 = (sqlite3 *)a4;
        else
          v19 = *(sqlite3 **)a4;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &__p;
        else
          v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v21 = a1;
        v22 = v9;
        v23 = a5;
LABEL_45:
        TI::RejectionsDatabase::insert_inline_completion_rejection(v21, v19, (const char *)v20, v23, v22);
LABEL_47:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v15 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_49;
      }
      if ((v18 & 0x80) != 0)
      {
        if (*(_QWORD *)(a4 + 8) <= (unint64_t)(int)v17)
          goto LABEL_46;
        a4 = *(_QWORD *)a4;
      }
      else if (v18 <= (int)v17)
      {
LABEL_46:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
        {
          v24 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v25 = *(_QWORD *)a4;
          v26 = *(_QWORD *)(a4 + 8);
          if ((v18 & 0x80u) == 0)
          {
            v25 = a4;
            v26 = v18;
          }
          LODWORD(v28.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)"registerLearning";
          WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v25;
          HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
          v29 = v24;
          v30 = 2048;
          v31 = v26;
          v32 = 1024;
          v33 = v17;
          _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  [Inline Completions Generator] Negative learning from %s to %s should be unnecessary since prefix has length %zu <= %d already in database", (uint8_t *)&v28, 0x30u);
        }
        goto LABEL_47;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__p;
      else
        v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v21 = a1;
      v19 = (sqlite3 *)a4;
      v22 = v9;
      v23 = a5;
      goto LABEL_45;
    }
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v12 = (char)size;
    if ((size & 0x80u) == 0)
      v13 = a2;
    else
      v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a2->__r_.__value_.__l.__size_;
    if (size)
    {
      while (size)
      {
        v14 = v13->__r_.__value_.__s.__data_[--size];
        if (v14 == 32)
        {
          if (size == -1)
            break;
          std::string::basic_string(&v28, a2, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          goto LABEL_20;
        }
      }
    }
    if (v12 < 0)
      std::string::__init_copy_ctor_external(&v28, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    else
      v28 = *a2;
LABEL_20:
    TI::RejectionsDatabase::soft_add_deleted((uint64_t)a1, &v28, v9);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      v15 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v15);
    }
  }
}

void TIInlineCompletionGeneratorImpl::register_inline_completion_acceptance_rejection(uint64_t a1, const KB::String *a2, const KB::String *a3, const KB::String *a4, int a5)
{
  TIInlineCompletionEventDispatcher::did_register_completion_acceptance(*(_QWORD *)(a1 + 736), a2, a3, a4, a5);
}

void TI::Favonius::SearchNode::~SearchNode(TI::Favonius::SearchNode *this)
{
  TI::Favonius::SearchNode::~SearchNode(this);
  JUMPOUT(0x1DF0A2144);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *(_QWORD *)this = &off_1EA101780;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 200);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 176);
  v2 = (unsigned int *)*((_QWORD *)this + 16);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6 && *((_BYTE *)this + 94) == 1)
    free(v6);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 64);
  v7 = (unsigned int *)*((_QWORD *)this + 7);
  if (v7)
  {
    v8 = v7 + 2;
    v9 = atomic_load(v7 + 2);
    if (v9 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
    }
    else
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
    }
  }
  v11 = *((_QWORD *)this + 6);
  if (v11)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v11);
  v12 = (unsigned int *)*((_QWORD *)this + 4);
  if (v12)
  {
    v13 = v12 + 2;
    v14 = atomic_load(v12 + 2);
    if (v14 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
    else
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
    }
  }
  *(_QWORD *)this = off_1EA102A78;
  v16 = (unsigned int *)*((_QWORD *)this + 2);
  if (v16)
  {
    v17 = v16 + 2;
    v18 = atomic_load(v16 + 2);
    if (v18 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
    else
    {
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
    }
  }
}

unsigned int *TI::Favonius::SearchNode::clone_substituting_touch@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;

  if (*(_QWORD *)(a1 + 48))
  {
    result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)*a2 + 72))();
    v7 = (uint64_t)result;
    if (result)
    {
      do
        v8 = __ldaxr(result);
      while (__stlxr(v8 + 1, result));
    }
    else
    {
      v10 = 0;
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_19;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = operator new();
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *a2;
  *a2 = 0;
  v23 = v7;
  v24 = v12;
  v13 = *(unsigned int **)(a1 + 56);
  v22 = v13;
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  TI::Favonius::SearchNode::SearchNode(v9, v11, (uint64_t *)&v24, &v23, (uint64_t *)&v22, (_QWORD *)(a1 + 64), *(float *)(a1 + 152), NAN);
  if (v22)
  {
    v16 = v22 + 2;
    v17 = atomic_load(v22 + 2);
    if (v17 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v22 + 248))();
    }
    else
    {
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
    }
  }
  if (v23)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v23);
  result = v24;
  if (v24)
  {
    v19 = v24 + 2;
    v20 = atomic_load(v24 + 2);
    if (v20 == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v24 + 8))();
    }
    else
    {
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
    }
  }
LABEL_19:
  *a3 = v10;
  return result;
}

uint64_t TI::Favonius::SearchNode::node_at_current_bound@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  if (!*(_QWORD *)(this + 64) && *(_BYTE *)(this + 148) && *(_BYTE *)(this + 149))
  {
    *(_BYTE *)(this + 149) = 0;
    *(_DWORD *)(this + 24) = -8388608;
    *a2 = this;
    v2 = (unsigned int *)(this + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

_QWORD *TI::Favonius::SearchNode::branch_at_current_bound@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;

  if (this[8])
  {
    v3 = this;
    v4 = (unsigned int *)this[7];
    this[7] = 0;
    v13 = v4;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, unsigned int **))(*this + 144))(&v14, this, &v13);
    v5 = v14;
    v14 = 0;
    if (v13)
    {
      v6 = v13 + 2;
      v7 = atomic_load(v13 + 2);
      if (v7 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v13 + 248))();
      }
      else
      {
        do
          v8 = __ldaxr(v6);
        while (__stlxr(v8 - 1, v6));
      }
    }
    v9 = (unsigned int *)v3[7];
    v3[7] = 0;
    if (v9)
    {
      v10 = v9 + 2;
      v11 = atomic_load(v9 + 2);
      if (v11 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 248))(v9);
      }
      else
      {
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
      }
    }
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 48))(v3);
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return this;
}

float TI::Favonius::SearchNode::decrease_bound_on_score(TI::Favonius::SearchNode *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  float result;
  const float *v24;
  float32x2_t v25;
  float32x2_t v26;
  _QWORD v27[5];
  unsigned int *v28;

  if (!*((_BYTE *)this + 148))
  {
    if (*((_QWORD *)this + 16) || !*((_QWORD *)this + 2))
    {
      if (*((_QWORD *)this + 7))
      {
LABEL_25:
        *((_BYTE *)this + 148) = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(_QWORD *)this + 128))(this);
        result = *((float *)this + 38);
        v24 = (const float *)((char *)this + 144);
        v25 = vld1_dup_f32(v24);
        v26 = vmla_n_f32(v25, *(float32x2_t *)((char *)this + 136), result);
        *(float32x2_t *)((char *)this + 156) = v26;
        *((_DWORD *)this + 6) = v26.i32[0];
        return result;
      }
      v3 = (_QWORD *)((char *)this + 64);
      v2 = *((_QWORD *)this + 8);
      if (!v2)
      {
        (*(void (**)(TI::Favonius::SearchNode *, char *))(*(_QWORD *)this + 112))(this, (char *)this + 64);
        v5 = *((_QWORD *)this + 8);
        v4 = *((_QWORD *)this + 9);
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3221225472;
        v27[2] = ___ZN2TI8Favonius10SearchNode23decrease_bound_on_scoreEv_block_invoke;
        v27[3] = &__block_descriptor_40_e15_B24__0r_v8r_v16l;
        v27[4] = this;
        v6 = v27;
        v28 = v6;
        v7 = 126 - 2 * __clz(v5);
        if (v5)
          v8 = v7;
        else
          v8 = 0;
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v4, (uint64_t *)(v4 + 8 * v5), (uint64_t)&v28, v8, 1);

        v2 = *((_QWORD *)this + 8);
      }
      v9 = *((_QWORD *)this + 9) + 8 * v2;
      v10 = *(_QWORD *)(v9 - 8);
      *(_QWORD *)(v9 - 8) = 0;
      v11 = (unsigned int *)*((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v10;
      if (v11)
      {
        v12 = v11 + 2;
        v13 = atomic_load(v11 + 2);
        if (v13 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 248))(v11);
        }
        else
        {
          do
            v14 = __ldaxr(v12);
          while (__stlxr(v14 - 1, v12));
        }
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink((unsigned int *)this + 16, *v3 - 1);
    }
    else
    {
      (*(void (**)(unsigned int **__return_ptr, TI::Favonius::SearchNode *))(*(_QWORD *)this + 120))(&v28, this);
      v15 = (unsigned int *)*((_QWORD *)this + 16);
      v16 = v28;
      v28 = 0;
      *((_QWORD *)this + 16) = v16;
      if (v15)
      {
        v17 = v15 + 2;
        v18 = atomic_load(v15 + 2);
        if (v18 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
        else
        {
          do
            v19 = __ldaxr(v17);
          while (__stlxr(v19 - 1, v17));
        }
        if (v28)
        {
          v20 = v28 + 2;
          v21 = atomic_load(v28 + 2);
          if (v21 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v28 + 8))();
          }
          else
          {
            do
              v22 = __ldaxr(v20);
            while (__stlxr(v22 - 1, v20));
          }
        }
      }
      *((float *)this + 36) = (*(float (**)(_QWORD))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16));
    }
    (*(void (**)(TI::Favonius::SearchNode *))(*(_QWORD *)this + 136))(this);
    goto LABEL_25;
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::touch_count(TI::Favonius::SearchNode *this)
{
  return 1;
}

uint64_t TI::Favonius::SearchNode::key_count(TI::Favonius::SearchNode *this)
{
  return 1;
}

unsigned int *TI::Favonius::SearchNode::clone_with_parent@<X0>(TI::Favonius::SearchNode *this@<X0>, TI::Favonius::SearchNode *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  uint64_t (*i)(void);
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;

  v6 = (_BYTE *)operator new();
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  v22 = v7;
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (unsigned int *)*((_QWORD *)this + 6);
  v21 = v10;
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  (*(void (**)(unsigned int **__return_ptr, _QWORD, _QWORD))(**((_QWORD **)this + 7) + 208))(&v20, *((_QWORD *)this + 7), *((_QWORD *)a2 + 7));
  TI::Favonius::SearchNode::SearchNode((uint64_t)v6, (uint64_t)a2, (uint64_t *)&v22, (uint64_t *)&v21, (uint64_t *)&v20, 0, *((float *)this + 38), NAN);
  if (v20)
  {
    v12 = v20 + 2;
    v13 = atomic_load(v20 + 2);
    if (v13 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v20 + 248))();
    }
    else
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
    }
  }
  if (v21)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v21);
  result = v22;
  if (!v22)
    goto LABEL_19;
  v16 = v22 + 2;
  v17 = atomic_load(v22 + 2);
  if (v17 != 1)
  {
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    goto LABEL_19;
  }
  for (i = *(uint64_t (**)(void))(*(_QWORD *)v22 + 8); ; i = *(uint64_t (**)(void))(*(_QWORD *)v6 + 48))
  {
    result = (unsigned int *)i();
LABEL_19:
    if (v6[148])
      break;
  }
  *a3 = v6;
  return result;
}

void TI::Favonius::SearchNode::clone_discarding_first_touch_with_parent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNode::clone_discarding_second_touch_with_parent(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void TI::Favonius::SearchNode::clone_inserting_key(TI::Favonius::SearchNode *this@<X0>, TI::Favonius::SearchNode *a2@<X1>, TI::Favonius::SearchNodeSource **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  void *__p[2];
  _OWORD v33[2];
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  void **v37;

  v6 = *((_QWORD *)a2 + 4);
  v7 = *(_QWORD *)(v6 + 128);
  v8 = *(unsigned int **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 7) + 16))(*((_QWORD *)a2 + 7));
  v36 = v8;
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  (*(void (**)(void **__return_ptr, uint64_t, unsigned int **, _QWORD))(*(_QWORD *)v7 + 72))(__p, v7, &v36, *((_QWORD *)this + 2));
  v10 = (unsigned int *)__p[0];
  __p[0] = 0;
  if (v36)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v36);
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  v35 = v11;
  if (v11)
  {
    v12 = v11 + 2;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *((_QWORD *)a2 + 7);
  v15 = (unsigned int *)*((_QWORD *)this + 6);
  v34 = v15;
  v16 = v14;
  if (v15)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
    v16 = *((_QWORD *)a2 + 7);
  }
  v18 = *((float *)this + 38);
  v19 = (*(float (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  v20 = logf(v19);
  TI::Favonius::SearchNodeInsertingKey::create(v6, &v35, v14, (uint64_t)v10, (uint64_t *)&v34, (uint64_t *)__p, v18, v18 * v20);
  v21 = (unsigned int *)__p[0];
  __p[0] = 0;
  if (v34)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v34);
  if (v35)
  {
    v22 = v35 + 2;
    v23 = atomic_load(v35 + 2);
    if (v23 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v35 + 8))();
    }
    else
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
    }
  }
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)__p = 0u;
  v31 = v21;
  TI::Favonius::SearchNodeSourceQueue::insert((TI::Favonius::SearchNodeSourceQueue *)__p, (uint64_t *)&v31);
  if (v31)
  {
    v25 = v31 + 2;
    v26 = atomic_load(v31 + 2);
    if (v26 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v31 + 8))();
    }
    else
    {
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
    }
  }
  TI::Favonius::SearchNodeSourceQueue::next_search_node(__p, -INFINITY, a3);
  v37 = (void **)v33 + 1;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v37);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v10)
  {
    v28 = v10 + 2;
    v29 = atomic_load(v10 + 2);
    if (v29 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
    else
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
    }
  }
}

uint64_t *TI::Favonius::SearchNode::append_local_keys_for_debugging(TI::Favonius::SearchNode *this, KB::String *a2)
{
  uint64_t v3;
  TI::Favonius::Key **v4;

  v3 = *((_QWORD *)this + 6);
  if (v3)
    v4 = (TI::Favonius::Key **)(v3 + 8);
  else
    v4 = (TI::Favonius::Key **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  return TI::Favonius::Key::append_debug_data(*v4, a2);
}

uint64_t TI::Favonius::SearchNode::compute_language_model_data(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v4 = *(unsigned int **)(*(_QWORD *)(a1 + 48) + 8);
    v6 = v4;
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      result = *(_QWORD *)(a1 + 32);
    }
    TI::Favonius::SearchNode::get_language_extensions(result, a2, (uint64_t *)&v6);
    result = (uint64_t)v6;
    if (v6)
      return WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v6);
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::compute_geometry_model_data(TI::Favonius::SearchNode *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  v1 = (unsigned int *)*((_QWORD *)this + 6);
  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 128);
  v3 = *((_QWORD *)this + 2);
  if (v1)
  {
    v21 = *((_QWORD *)this + 2);
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v1 = (unsigned int *)*((_QWORD *)this + 6);
      v20 = v1;
      if (!v1)
      {
LABEL_7:
        (*(void (**)(uint64_t, uint64_t *, unsigned int **))(*(_QWORD *)v2 + 48))(v2, &v21, &v20);
        if (v20)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v20);
        result = v21;
        if (v21)
        {
          v8 = (unsigned int *)(v21 + 8);
          v9 = atomic_load((unsigned int *)(v21 + 8));
          if (v9 != 1)
          {
            do
              v10 = __ldaxr(v8);
            while (__stlxr(v10 - 1, v8));
            return result;
          }
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        return result;
      }
    }
    else
    {
      v20 = v1;
    }
    do
      v6 = __ldaxr(v1);
    while (__stlxr(v6 + 1, v1));
    goto LABEL_7;
  }
  v19 = *((_QWORD *)this + 2);
  if (v3)
  {
    v11 = (unsigned int *)(v3 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(unsigned int **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7));
  v18 = v13;
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  (*(void (**)(uint64_t, uint64_t *, unsigned int **))(*(_QWORD *)v2 + 64))(v2, &v19, &v18);
  if (v18)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v18);
  result = v19;
  if (v19)
  {
    v15 = (unsigned int *)(v19 + 8);
    v16 = atomic_load((unsigned int *)(v19 + 8));
    if (v16 == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
  }
  return result;
}

BOOL TI::Favonius::SearchNode::compute_score_is_final(TI::Favonius::SearchNode *this)
{
  if (!*((_QWORD *)this + 7) || *((_QWORD *)this + 8))
    return 0;
  if (*((_QWORD *)this + 16))
    return 1;
  return *((_QWORD *)this + 2) == 0;
}

void TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis(TI::Favonius::SearchNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis((uint64_t)this, v1);
}

unsigned int *TI::Favonius::SearchNode::clone_with_typing@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v6 = operator new();
  v7 = *a2;
  *a2 = 0;
  v12 = v7;
  *a3 = TI::Favonius::SearchNode::SearchNode(v6, a1, (uint64_t *)&v12);
  result = v12;
  if (v12)
  {
    v9 = v12 + 2;
    v10 = atomic_load(v12 + 2);
    if (v10 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 248))();
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
  }
  return result;
}

unsigned int *TI::Favonius::SearchNode::set_typing_hypothesis(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int **)(a1 + 56);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 248))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::instance_error_correction_type(TI::Favonius::SearchNode *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t TI::Favonius::SearchNode::SearchNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  const float *v19;
  float32x2_t v20;
  float32x2_t v21;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(_QWORD *)a1 = &off_1EA101780;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_DWORD *)(a1 + 40) = ++s_counter;
  v11 = *(unsigned int **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  KB::String::String((KB::String *)(a1 + 88), (const KB::String *)(a2 + 88));
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    if (*(_QWORD *)(a1 + 56))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    }
    else
    {
      v18 = *(_DWORD *)(v17 + 136);
      *(_DWORD *)(a1 + 136) = v18;
      *(_DWORD *)(a1 + 140) = v18;
    }
    *(_BYTE *)(a1 + 148) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v19 = (const float *)(a1 + 144);
    v20 = vld1_dup_f32(v19);
    v21 = vmla_n_f32(v20, *(float32x2_t *)(a1 + 136), *(float *)(a1 + 152));
    *(float32x2_t *)(a1 + 156) = v21;
    *(_DWORD *)(a1 + 24) = v21.i32[0];
  }
  return a1;
}

void TI::Favonius::SearchNode::set_language_scores_from_parent_and_typing_hypothesis(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(float *)(v4 + 136);
  *(float *)(a1 + 136) = v5;
  v6 = *(_QWORD *)(v4 + 56);
  v7 = 0.0;
  if (v6 != a2)
  {
    v8 = a2;
    do
    {
      v9 = (*(float (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
      v7 = v7 + logf(v9);
      v8 = (**(uint64_t (***)(uint64_t))v8)(v8);
    }
    while (v8 != v6);
    v5 = *(float *)(a1 + 136);
  }
  v10 = v7 + v5;
  *(float *)(a1 + 136) = v10;
  if (!*(_QWORD *)(a1 + 64))
  {
    v11 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
    v12 = *(float *)(a1 + 136);
    v10 = v12 + logf(v11);
  }
  *(float *)(a1 + 140) = v10;
}

void TI::Favonius::SearchNode::get_language_extensions(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56)))
    goto LABEL_40;
  v6 = *a3;
  v7 = *(unsigned __int16 *)(*a3 + 12);
  if (!*(_WORD *)(*a3 + 12))
  {
    KB::String::compute_length((unsigned __int16 *)(v6 + 8));
    v7 = *(unsigned __int16 *)(v6 + 12);
  }
  if (v7 != 1)
    goto LABEL_40;
  v8 = a1 + 200;
  v9 = 200;
  if (!KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix)
  {
    v9 = 176;
    v8 = a1 + 176;
  }
  v10 = *(_QWORD *)(a1 + v9);
  if (!v10)
  {
LABEL_40:
    (*(void (**)(_QWORD, unint64_t *, uint64_t *))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), a2, a3);
    return;
  }
  v11 = 0;
  v12 = *(char **)(v8 + 8);
  v13 = &v12[8 * v10];
  do
  {
    v14 = *(_DWORD *)(*a3 + 56);
    if (v14 != *(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v12 + 16))(*(_QWORD *)v12)
                          + 56))
      goto LABEL_38;
    v15 = *a2;
    if (*a2 != a2[2])
    {
      v21 = a2[1];
      v22 = v12;
      goto LABEL_32;
    }
    v16 = v15 + 1;
    v17 = a2[1];
    if (v17 <= (unint64_t)v12 && v17 + 8 * v15 > (unint64_t)v12)
    {
      v23 = &v12[-v17];
      if (v15 >= 0x100)
        v24 = v15 + (v15 >> 1);
      else
        v24 = 2 * v15;
      if (v24 <= v16)
        v25 = v16;
      else
        v25 = v24;
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v25);
      v21 = a2[1];
      v22 = &v23[v21];
      if (!v21)
        goto LABEL_37;
LABEL_31:
      v15 = *a2;
LABEL_32:
      v26 = *(_QWORD *)v22;
      *(_QWORD *)(v21 + 8 * v15) = v26;
      if (v26)
      {
        v27 = (unsigned int *)(v26 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        v15 = *a2;
      }
      *a2 = v15 + 1;
      goto LABEL_37;
    }
    if (v15 >= 0x100)
      v19 = v15 + (v15 >> 1);
    else
      v19 = 2 * v15;
    if (v19 <= v16)
      v20 = v16;
    else
      v20 = v19;
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v20);
    v21 = a2[1];
    v22 = v12;
    if (v21)
      goto LABEL_31;
LABEL_37:
    v11 = 1;
LABEL_38:
    v12 += 8;
  }
  while (v12 != v13);
  if ((v11 & 1) == 0)
    goto LABEL_40;
}

void std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__clear[abi:nn180100]((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__clear[abi:nn180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 8)
  {
    v4 = *(unsigned int **)(i - 8);
    result = v4;
    if (v4)
    {
      v5 = result + 2;
      v6 = atomic_load(result + 2);
      if (v6 == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
      else
      {
        do
          v7 = __ldaxr(v5);
        while (__stlxr(v7 - 1, v5));
      }
    }
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

uint64_t TI::Favonius::SearchNode::SearchNode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, float a7, float a8)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  float v25;
  float v26;
  int v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  const float *v44;
  float32x2_t v45;
  float32x2_t v46;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int *v51;

  v11 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(_QWORD *)a1 = &off_1EA101780;
  *(_QWORD *)(a1 + 32) = a2;
  if (a2)
  {
    v12 = (unsigned int *)(a2 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  *(_DWORD *)(a1 + 40) = ++s_counter;
  v14 = *a4;
  *a4 = 0;
  v15 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  v16 = (_QWORD *)(a1 + 64);
  if (a6)
  {
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector(v16, a6);
    v14 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    *v16 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  if (v14)
    v17 = v14 + 8;
  else
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  KB::String::String((KB::String *)(a1 + 88), (const KB::String *)(*(_QWORD *)v17 + 8));
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    v19 = v18 + 8;
  else
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  *(_WORD *)(a1 + 120) = *(_WORD *)(*(_QWORD *)v19 + 60);
  *(_QWORD *)(a1 + 128) = 0;
  v20 = *(_QWORD *)(a1 + 32);
  if (v20)
  {
    *(float *)(a1 + 152) = a7;
    v21 = (float *)(a1 + 152);
    v22 = *(_QWORD *)(a1 + 56);
    if (*(_QWORD *)(a1 + 16))
      v23 = 1;
    else
      v23 = v22 == 0;
    v24 = !v23;
    *(_BYTE *)(a1 + 148) = v24;
    *(_BYTE *)(a1 + 149) = 1;
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(v20 + 164) + 1;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    }
    else
    {
      v27 = *(_DWORD *)(v20 + 136);
      *(_DWORD *)(a1 + 136) = v27;
      *(_DWORD *)(a1 + 140) = v27;
    }
  }
  else
  {
    *(float *)(a1 + 152) = a7;
    v21 = (float *)(a1 + 152);
    *(_WORD *)(a1 + 148) = 1;
    *(_DWORD *)(a1 + 164) = 0;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    v25 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 88))(*(_QWORD *)(a1 + 56));
    *(float *)(a1 + 136) = v25;
    v26 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 80))(*(_QWORD *)(a1 + 56));
    *(float *)(a1 + 140) = v25 + logf(v26);
  }
  *(_DWORD *)(a1 + 144) = 0;
  v28 = *(_QWORD *)(a1 + 32);
  if (v28)
  {
    v29 = *(float *)(v28 + 144) + 0.0;
    *(float *)(a1 + 144) = v29;
    v30 = *(_QWORD *)(a1 + 48);
    if (v30)
    {
      v31 = *(float *)(v30 + 32);
    }
    else
    {
      v41 = *(_QWORD *)(a1 + 16);
      if (v41)
      {
        v32 = (*(float (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) + *(float *)(a1 + 144);
        goto LABEL_39;
      }
      if (*(_QWORD *)(v28 + 16))
      {
        v49 = *(_DWORD *)(v28 + 164);
        if (v49 >= 5)
          v49 = 5;
        v50 = TI::Favonius::SearchParameters::k_prediction_costs[v49];
      }
      else
      {
        v50 = 0.8;
      }
      v48 = *v21;
      v31 = (float)(1.0 - a8) * (float)(v48 * logf(v50));
    }
    v32 = v29 + v31;
LABEL_39:
    *(float *)(a1 + 144) = v32;
    goto LABEL_40;
  }
  (*(void (**)(unsigned int **__return_ptr))(**(_QWORD **)(a1 + 16) + 96))(&v51);
  v33 = *(unsigned int **)(a1 + 128);
  v34 = v51;
  v51 = 0;
  *(_QWORD *)(a1 + 128) = v34;
  if (v33)
  {
    v35 = v33 + 2;
    v36 = atomic_load(v33 + 2);
    if (v36 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
    else
    {
      do
        v37 = __ldaxr(v35);
      while (__stlxr(v37 - 1, v35));
    }
    if (v51)
    {
      v38 = v51 + 2;
      v39 = atomic_load(v51 + 2);
      if (v39 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v51 + 8))();
      }
      else
      {
        do
          v40 = __ldaxr(v38);
        while (__stlxr(v40 - 1, v38));
      }
    }
  }
LABEL_40:
  v42 = *(_QWORD *)(a1 + 32);
  if (v42)
  {
    v43 = *(_DWORD *)(v42 + 168);
    *(_DWORD *)(a1 + 168) = v43;
    if ((*(_WORD *)(a1 + 120) & 0x20) != 0)
      *(_DWORD *)(a1 + 168) = v43 + 1;
  }
  else
  {
    *(_DWORD *)(a1 + 168) = 0;
  }
  v44 = (const float *)(a1 + 144);
  v45 = vld1_dup_f32(v44);
  v46 = vmla_n_f32(v45, *(float32x2_t *)(a1 + 136), *(float *)(a1 + 152));
  *(float32x2_t *)(a1 + 156) = v46;
  *(_DWORD *)(a1 + 24) = v46.i32[0];
  return a1;
}

_QWORD *WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v3 = a2[2];
  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  if (v3)
  {
    a1[2] = v3;
    v5 = malloc_type_malloc(8 * v3, 0x2004093837F09uLL);
    a1[1] = v5;
    if (v5)
    {
      if (*a2)
      {
        v6 = (uint64_t *)a2[1];
        v7 = &v6[*a2];
        do
        {
          v8 = *v6;
          *v5 = *v6;
          if (v8)
          {
            v9 = (unsigned int *)(v8 + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
          }
          ++v5;
          ++v6;
        }
        while (v6 != v7);
      }
    }
  }
  return a1;
}

BOOL ___ZN2TI8Favonius10SearchNode23decrease_bound_on_scoreEv_block_invoke(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 56);
  v7 = 0.0;
  v8 = 0.0;
  if (*a2 != v6)
  {
    do
    {
      v9 = (*(float (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      v8 = v8 + logf(v9);
      v5 = (**(uint64_t (***)(uint64_t))v5)(v5);
    }
    while (v5 != v6);
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 56);
  }
  v10 = *a3;
  if (v10 != v5)
  {
    v7 = 0.0;
    do
    {
      v11 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v7 = v7 + logf(v11);
      v10 = (**(uint64_t (***)(uint64_t))v10)(v10);
    }
    while (v10 != v5);
  }
  return v8 < v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  BOOL v50;
  uint64_t *v51;
  unsigned int **v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int **i;
  unsigned int **v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int **v68;
  unsigned int *v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int **v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unsigned int *v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int **j;
  _QWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;

  v9 = (uint64_t *)result;
LABEL_2:
  v138 = a2;
  v140 = a2 - 1;
  v136 = a2 - 3;
  v137 = a2 - 2;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v47 = *v10;
          *v10 = *v140;
          *v140 = v47;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v140, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v140, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v10 + 3, v140, a3);
      default:
        if (v11 <= 191)
        {
          v48 = v10 + 1;
          v50 = v10 == a2 || v48 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v50)
            {
              v51 = v10;
              do
              {
                v52 = (unsigned int **)v48;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((_DWORD)result)
                {
                  v53 = 0;
                  v54 = *v52;
                  *v52 = 0;
                  v144 = v54;
                  for (i = v52; ; v53 = *i)
                  {
                    v56 = i;
                    i = (unsigned int **)v51;
                    v57 = (unsigned int *)*v51;
                    *v51 = 0;
                    *v56 = v57;
                    if (v53)
                    {
                      v58 = v53 + 2;
                      v59 = atomic_load(v53 + 2);
                      if (v59 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 248))(v53);
                      }
                      else
                      {
                        do
                          v60 = __ldaxr(v58);
                        while (__stlxr(v60 - 1, v58));
                      }
                    }
                    if (v51 == v10)
                      break;
                    --v51;
                    if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                      goto LABEL_89;
                  }
                  i = (unsigned int **)v10;
LABEL_89:
                  result = (uint64_t)*i;
                  *i = v144;
                  a2 = v138;
                  if (result)
                  {
                    v61 = (unsigned int *)(result + 8);
                    v62 = atomic_load((unsigned int *)(result + 8));
                    if (v62 == 1)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                    }
                    else
                    {
                      do
                        v63 = __ldaxr(v61);
                      while (__stlxr(v63 - 1, v61));
                    }
                    result = 0;
                  }
                }
                v48 = (uint64_t *)(v52 + 1);
                v51 = (uint64_t *)v52;
              }
              while (v52 + 1 != (unsigned int **)a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v124 = (unsigned int **)v48;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              if ((_DWORD)result)
              {
                v125 = 0;
                v126 = *v124;
                *v124 = 0;
                v147 = v126;
                for (j = v124; ; v125 = *j)
                {
                  v128 = j;
                  j = (unsigned int **)v9;
                  v129 = *v9;
                  *v9 = 0;
                  *v128 = v129;
                  if (v125)
                  {
                    v130 = v125 + 2;
                    v131 = atomic_load(v125 + 2);
                    if (v131 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 248))(v125);
                    }
                    else
                    {
                      do
                        v132 = __ldaxr(v130);
                      while (__stlxr(v132 - 1, v130));
                    }
                  }
                  --v9;
                  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                    break;
                }
                result = (uint64_t)*j;
                *j = v147;
                if (result)
                {
                  v133 = (unsigned int *)(result + 8);
                  v134 = atomic_load((unsigned int *)(result + 8));
                  if (v134 == 1)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v135 = __ldaxr(v133);
                    while (__stlxr(v135 - 1, v133));
                  }
                  result = 0;
                }
              }
              v48 = (uint64_t *)(v124 + 1);
              v9 = (uint64_t *)v124;
            }
            while (v124 + 1 != (unsigned int **)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v141 = v64;
            do
            {
              v65 = v64;
              if (v141 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = &v9[v66];
                if (2 * v64 + 2 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v67;
                  v66 = 2 * v65 + 2;
                }
                v68 = (unsigned int **)&v9[v65];
                a2 = v138;
                if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                {
                  v69 = *v68;
                  *v68 = 0;
                  v145 = v69;
                  do
                  {
                    v70 = (unsigned int **)v67;
                    v71 = (unsigned int *)*v67;
                    *v67 = 0;
                    v72 = *v68;
                    *v68 = v71;
                    if (v72)
                    {
                      v73 = v72 + 2;
                      v74 = atomic_load(v72 + 2);
                      if (v74 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 248))(v72);
                      }
                      else
                      {
                        do
                          v75 = __ldaxr(v73);
                        while (__stlxr(v75 - 1, v73));
                      }
                    }
                    if (v141 < v66)
                      break;
                    v76 = (2 * v66) | 1;
                    v67 = &v9[v76];
                    v77 = 2 * v66 + 2;
                    if (v77 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                    {
                      ++v67;
                      v76 = v77;
                    }
                    v68 = v70;
                    v66 = v76;
                  }
                  while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
                  v78 = *v70;
                  *v70 = v145;
                  if (v78)
                  {
                    v79 = v78 + 2;
                    v80 = atomic_load(v78 + 2);
                    if (v80 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 248))(v78);
                    }
                    else
                    {
                      do
                        v81 = __ldaxr(v79);
                      while (__stlxr(v81 - 1, v79));
                    }
                  }
                  a2 = v138;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v82 = (unint64_t)v11 >> 3;
            do
            {
              v83 = a2;
              v84 = 0;
              v85 = *v9;
              *v9 = 0;
              v86 = v82 - 2;
              v139 = v85;
              if (v82 < 2)
                v86 = v82 - 1;
              v87 = v86 >> 1;
              v88 = v9;
              do
              {
                v89 = (unsigned int **)v88;
                v88 += v84 + 1;
                v90 = 2 * v84;
                v84 = (2 * v84) | 1;
                v91 = v90 + 2;
                if (v90 + 2 < v82 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v88;
                  v84 = v91;
                }
                v92 = (unsigned int *)*v88;
                *v88 = 0;
                v93 = *v89;
                *v89 = v92;
                if (v93)
                {
                  v94 = v93 + 2;
                  v95 = atomic_load(v93 + 2);
                  if (v95 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 248))(v93);
                  }
                  else
                  {
                    do
                      v96 = __ldaxr(v94);
                    while (__stlxr(v96 - 1, v94));
                  }
                }
              }
              while (v84 <= v87);
              v97 = v83 - 1;
              if (v88 == v97)
              {
                v106 = v97;
                result = *v88;
                *v88 = v139;
                if (result)
                {
                  v120 = (unsigned int *)(result + 8);
                  v121 = atomic_load((unsigned int *)(result + 8));
                  if (v121 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v122 = __ldaxr(v120);
                    while (__stlxr(v122 - 1, v120));
                  }
                }
              }
              else
              {
                v98 = *v97;
                *v97 = 0;
                v99 = (unsigned int *)*v88;
                *v88 = v98;
                if (v99)
                {
                  v100 = v99 + 2;
                  v101 = atomic_load(v99 + 2);
                  if (v101 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 248))(v99);
                  }
                  else
                  {
                    do
                      v102 = __ldaxr(v100);
                    while (__stlxr(v102 - 1, v100));
                  }
                }
                result = *v97;
                *v97 = v139;
                if (result)
                {
                  v103 = (unsigned int *)(result + 8);
                  v104 = atomic_load((unsigned int *)(result + 8));
                  if (v104 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                  }
                  else
                  {
                    do
                      v105 = __ldaxr(v103);
                    while (__stlxr(v105 - 1, v103));
                  }
                }
                v106 = v97;
                v107 = (char *)(v88 + 1) - (char *)v9;
                if (v107 >= 9)
                {
                  v108 = (unint64_t)((v107 >> 3) - 2) >> 1;
                  v109 = &v9[v108];
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v110 = (unsigned int *)*v88;
                    *v88 = 0;
                    v146 = (uint64_t)v110;
                    do
                    {
                      v111 = v109;
                      v112 = *v109;
                      *v109 = 0;
                      v113 = (unsigned int *)*v88;
                      *v88 = v112;
                      if (v113)
                      {
                        v114 = v113 + 2;
                        v115 = atomic_load(v113 + 2);
                        if (v115 == 1)
                        {
                          (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 248))(v113);
                        }
                        else
                        {
                          do
                            v116 = __ldaxr(v114);
                          while (__stlxr(v116 - 1, v114));
                        }
                      }
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = &v9[v108];
                      v88 = v111;
                    }
                    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
                    result = *v111;
                    *v111 = v146;
                    if (result)
                    {
                      v117 = (unsigned int *)(result + 8);
                      v118 = atomic_load((unsigned int *)(result + 8));
                      if (v118 == 1)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)result + 248))(result);
                      }
                      else
                      {
                        do
                          v119 = __ldaxr(v117);
                        while (__stlxr(v119 - 1, v117));
                      }
                      result = 0;
                    }
                  }
                }
              }
              v123 = v82-- <= 2;
              a2 = v106;
            }
            while (!v123);
          }
          return result;
        }
        v13 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v10[v12 >> 1], v10, v140, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, &v10[v12 >> 1], v140, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 1, v13 - 1, v137, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 2, &v10[(v12 >> 1) + 1], v136, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v13 - 1, &v10[v12 >> 1], &v10[(v12 >> 1) + 1], a3);
          v14 = *v10;
          *v10 = *v13;
          *v13 = v14;
        }
        --a4;
        a2 = v138;
        if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v32 = *v10;
          *v10 = 0;
          v143 = v32;
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            do
              ++v10;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
          }
          else
          {
            v33 = v10 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v138)
                break;
              v34 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v33 = v10 + 1;
            }
            while (!v34);
          }
          v35 = v138;
          if (v10 < v138)
          {
            v35 = v138;
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          while (v10 < v35)
          {
            v36 = *v10;
            *v10 = *v35;
            *v35 = v36;
            do
              ++v10;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          v37 = (unsigned int **)(v10 - 1);
          if (v10 - 1 != v9)
          {
            v38 = *v37;
            *v37 = 0;
            v39 = (unsigned int *)*v9;
            *v9 = (uint64_t)v38;
            if (v39)
            {
              v40 = v39 + 2;
              v41 = atomic_load(v39 + 2);
              if (v41 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 248))(v39);
              }
              else
              {
                do
                  v42 = __ldaxr(v40);
                while (__stlxr(v42 - 1, v40));
              }
            }
          }
          v43 = *v37;
          *v37 = (unsigned int *)v143;
          if (v43)
          {
            v44 = v43 + 2;
            v45 = atomic_load(v43 + 2);
            if (v45 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 248))(v43);
            }
            else
            {
              do
                v46 = __ldaxr(v44);
              while (__stlxr(v46 - 1, v44));
            }
          }
          result = 0;
          a5 = 0;
          continue;
        }
        v15 = *v10;
        *v10 = 0;
        v142 = v15;
        v16 = v10;
        do
          v17 = v16++;
        while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
        v18 = v138;
        if (v17 == v10)
        {
          v18 = v138;
          do
          {
            if (v16 >= v18)
              break;
            --v18;
          }
          while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
        }
        if (v16 < v18)
        {
          v19 = v16;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              v17 = v19++;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            do
              --v20;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
          }
          while (v19 < v20);
        }
        if (v17 != v9)
        {
          v22 = *v17;
          *v17 = 0;
          v23 = (unsigned int *)*v9;
          *v9 = v22;
          if (v23)
          {
            v24 = v23 + 2;
            v25 = atomic_load(v23 + 2);
            if (v25 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 248))(v23);
            }
            else
            {
              do
                v26 = __ldaxr(v24);
              while (__stlxr(v26 - 1, v24));
            }
          }
        }
        v27 = (unsigned int *)*v17;
        *v17 = v142;
        if (v27)
        {
          v28 = v27 + 2;
          v29 = atomic_load(v27 + 2);
          if (v29 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 248))(v27);
          }
          else
          {
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 - 1, v28));
          }
        }
        if (v16 < v18)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v9, v17, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v17 + 1;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v9, v17, a3);
        v10 = v17 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v17 + 1, v138, a3);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_37;
        }
        a2 = v17;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer} {__strong}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int **v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **i;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v13 = 0;
      v14 = *v11;
      *v11 = 0;
      v25 = v14;
      for (i = v11; ; v13 = *i)
      {
        v16 = i;
        i = (unsigned int **)v10;
        v17 = (unsigned int *)*v10;
        *v10 = 0;
        *v16 = v17;
        if (v13)
        {
          v18 = v13 + 2;
          v19 = atomic_load(v13 + 2);
          if (v19 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 248))(v13);
          }
          else
          {
            do
              v20 = __ldaxr(v18);
            while (__stlxr(v20 - 1, v18));
          }
        }
        if (v10 == a1)
          break;
        --v10;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          goto LABEL_16;
      }
      i = (unsigned int **)a1;
LABEL_16:
      v21 = *i;
      *i = v25;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 248))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v12 == 8)
        return v11 + 1 == (unsigned int **)a2;
    }
    v10 = (uint64_t *)v11++;
    if (v11 == (unsigned int **)a2)
      return 1;
  }
}

float TI::Favonius::SearchNode::partial_language_score(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float v4;
  float v5;

  if (a1 == a2)
    return 0.0;
  v3 = a1;
  v4 = 0.0;
  do
  {
    v5 = (*(float (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    v4 = v4 + logf(v5);
    v3 = (**(uint64_t (***)(uint64_t))v3)(v3);
  }
  while (v3 != a2);
  return v4;
}

unsigned int *TI::Favonius::SearchNode::create_root@<X0>(unsigned int **a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;

  v6 = operator new();
  v7 = *a1;
  *a1 = 0;
  v17 = 0;
  v18 = v7;
  v8 = *a2;
  *a2 = 0;
  v16 = v8;
  *a3 = TI::Favonius::SearchNode::SearchNode(v6, 0, (uint64_t *)&v18, &v17, (uint64_t *)&v16, 0, 0.0, NAN);
  if (v16)
  {
    v9 = v16 + 2;
    v10 = atomic_load(v16 + 2);
    if (v10 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v16 + 248))();
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
  }
  if (v17)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v17);
  result = v18;
  if (v18)
  {
    v13 = v18 + 2;
    v14 = atomic_load(v18 + 2);
    if (v14 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8))();
    }
    else
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
    }
  }
  return result;
}

void TI::Favonius::SearchNode::input_string(TI::Favonius::SearchNode *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  TI::Favonius::SearchNode::input_string_recursive(this, (KB::String *)a2, 0);
}

void TI::Favonius::SearchNode::input_string_recursive(TI::Favonius::SearchNode *this, KB::String *a2, unsigned int a3)
{
  uint64_t *v4;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned __int16 v18;
  char v19;
  void *v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v4)
    return;
  v17 = 0x100000;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v7 = *((unsigned __int16 *)this + 60);
  if ((v7 & 0xB81) != 0)
  {
    v8 = ((v7 >> 7) & 1) + a3;
  }
  else
  {
    TI::Favonius::SearchNode::compute_characters((unsigned __int16 *)&v17, v4[7], *((_QWORD *)this + 7));
    v9 = v18;
    if (!v18)
    {
      KB::String::compute_length((unsigned __int16 *)&v17);
      v9 = v18;
    }
    v10 = v9 - a3;
    if (v9 > a3)
    {
      TI::Favonius::SearchNode::input_string_recursive(*((TI::Favonius::SearchNode **)this + 4), a2, 0);
      v11 = (char *)v20;
      if (!v20)
        v11 = &v21;
      v13 = v11;
      v14 = 0;
      v15 = (unsigned __int16)v17;
      v16 = 0;
      KB::String::iterator::initialize((uint64_t *)&v13);
      if (v10 <= 1)
        v12 = 1;
      else
        v12 = v10;
      do
      {
        KB::String::append(a2, v16);
        KB::String::iterator::operator++((uint64_t *)&v13);
        --v12;
      }
      while (v12);
      goto LABEL_16;
    }
    v8 = a3 - v9;
    v4 = (uint64_t *)*((_QWORD *)this + 4);
  }
  TI::Favonius::SearchNode::input_string_recursive((TI::Favonius::SearchNode *)v4, a2, v8);
LABEL_16:
  if (v20)
  {
    if (v19 == 1)
      free(v20);
  }
}

unsigned __int16 *TI::Favonius::SearchNode::compute_characters(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != a3)
  {
    v5 = result;
    v6 = (**(uint64_t (***)(uint64_t))a3)(a3);
    TI::Favonius::SearchNode::compute_characters(v5, a2, v6);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    return KB::String::append(v5, (const KB::String *)(*(_QWORD *)v7 + 8));
  }
  return result;
}

uint64_t TI::Favonius::SearchNode::unshift_mask(TI::Favonius::SearchNode *this, const TI::Favonius::SearchNode ***a2)
{
  const TI::Favonius::SearchNode *v2;
  TI::Favonius::SearchNode *v3;
  const TI::Favonius::SearchNode **v4;
  unsigned int v5;
  uint64_t v6;
  TI::Favonius::SearchNode *v7;
  const TI::Favonius::SearchNode *v8;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  char v14;
  char v15;
  int v17;
  unsigned __int16 v18;
  char v19;
  void *v20;
  char v21;
  uint64_t v22;

  v2 = (const TI::Favonius::SearchNode *)a2;
  v22 = *MEMORY[0x1E0C80C00];
  do
  {
    v3 = this;
    this = (TI::Favonius::SearchNode *)*((_QWORD *)this + 4);
  }
  while (this && !*((_QWORD *)v3 + 2));
  v4 = a2[4];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = v3;
      v8 = v2;
      if (v3)
      {
        v3 = (TI::Favonius::SearchNode *)*((_QWORD *)v3 + 4);
        if ((*(unsigned int (**)(TI::Favonius::SearchNode *))(*(_QWORD *)v7 + 56))(v7) == 2
          && (*(unsigned int (**)(const TI::Favonius::SearchNode *))(*(_QWORD *)v2 + 56))(v2) == 1)
        {
          v2 = v4[4];
          if (v2)
            goto LABEL_17;
        }
        if ((*(unsigned int (**)(TI::Favonius::SearchNode *))(*(_QWORD *)v7 + 56))(v7) == 1
          && (*(unsigned int (**)(const TI::Favonius::SearchNode *))(*(_QWORD *)v8 + 56))(v8) == 2
          && v3 != 0)
        {
          v3 = (TI::Favonius::SearchNode *)*((_QWORD *)v3 + 4);
        }
      }
      v2 = (const TI::Favonius::SearchNode *)v4;
LABEL_17:
      v10 = *((_WORD *)v8 + 60);
      if ((v10 & 0xB81) != 0)
      {
        if ((v10 & 0x80) != 0)
        {
          ++v5;
        }
        else if (v7 && (*((_WORD *)v8 + 60) & 0x100) != 0)
        {
          v6 = v6 | ((*((_WORD *)v7 + 60) & 0x100) == 0);
        }
      }
      else
      {
        v17 = 0x100000;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        TI::Favonius::SearchNode::compute_characters((unsigned __int16 *)&v17, *((_QWORD *)v2 + 7), *((_QWORD *)v8 + 7));
        v11 = v18;
        if (!v18)
        {
          KB::String::compute_length((unsigned __int16 *)&v17);
          v11 = v18;
        }
        if (v5 >= v11)
          v12 = v5 - v11;
        else
          v12 = 0;
        v13 = v11 >= v5;
        v14 = v11 - v5;
        if (v13)
          v15 = v14;
        else
          v15 = 0;
        if (v20 && v19 == 1)
          free(v20);
        v6 = ((_DWORD)v6 << v15);
        v5 = v12;
      }
      v4 = (const TI::Favonius::SearchNode **)*((_QWORD *)v2 + 4);
      if (!v4)
        return v6;
    }
  }
  return 0;
}

float TI::Favonius::SearchNode::prediction_geometric_log_likelihood(TI::Favonius::SearchNode *this, float a2, float a3)
{
  unsigned int v4;
  float v5;

  if (*((_QWORD *)this + 2))
  {
    v4 = *((_DWORD *)this + 41);
    if (v4 >= 5)
      v4 = 5;
    v5 = TI::Favonius::SearchParameters::k_prediction_costs[v4];
  }
  else
  {
    v5 = 0.8;
  }
  return (float)(1.0 - a3) * (float)(logf(v5) * a2);
}

float TI::Favonius::SearchNode::long_prediction_geometric_log_likelihood(TI::Favonius::SearchNode *this, int a2, float a3, float a4)
{
  unsigned int v7;
  float v8;

  if (a2 < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = *((_DWORD *)this + 41);
    if (v7 >= 5)
      v7 = 5;
    v8 = logf(TI::Favonius::SearchParameters::k_prediction_costs[v7]) + 0.0;
    if (a2 != 1)
      v8 = v8 + (float)((float)(a2 - 1) * -0.22314);
  }
  return (float)(1.0 - a4) * (float)(v8 * a3);
}

unint64_t TI::Favonius::SearchNode::error_correction_type_for_current_word(TI::Favonius::SearchNode *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(_QWORD *)this + 160))(this);
  v3 = *((_QWORD *)this + 7);
  if (v3 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3))
  {
    v4 = *((_QWORD *)this + 4);
    if (v4)
      v4 = TI::Favonius::SearchNode::error_correction_type_for_current_word((TI::Favonius::SearchNode *)v4);
    return v4 | v2;
  }
  return v2;
}

unint64_t TI::Favonius::SearchNode::transfer_error_correction_types_to_candidates(TI::Favonius::SearchNode *this, CandidateCollection *a2, uint64_t a3)
{
  unint64_t result;
  Candidate *var1;
  Candidate *i;

  result = TI::Favonius::SearchNode::error_correction_type_for_current_word(this);
  var1 = a2->var0.var1;
  for (i = (Candidate *)((char *)a2->var0.var0 + 1000 * a3); i < var1; i = (Candidate *)((char *)i + 1000))
    *(_QWORD *)(*((_QWORD *)i + 1) + 240 * *(_QWORD *)i - 88) = result;
  return result;
}

void TI::Favonius::SearchNode::build_candidates(uint64_t a1, _QWORD *a2, void *a3, void *a4)
{
  void (**v7)(id, _QWORD);
  uint64_t v8;
  unint64_t i;
  void (**v10)(id, _QWORD *);

  v10 = a3;
  v7 = a4;
  if (*(_QWORD *)(a1 + 56))
  {
    v8 = a2[1] - *a2;
    v10[2](v10, a2);
    for (i = *a2 + v8; i < a2[1]; i += 1000)
    {
      v7[2](v7, i);
      *(_DWORD *)(i + 776) = *(_DWORD *)(a1 + 40);
    }
  }

}

void TI::Favonius::SearchNode::candidates(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float a5)
{
  _QWORD v5[6];
  float v6;
  _QWORD v7[7];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke;
  v7[3] = &__block_descriptor_56_e9_v16__0_v8l;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke_2;
  v5[3] = &__block_descriptor_52_e9_v16__0_v8l;
  v5[4] = a1;
  v5[5] = a2;
  v6 = a5;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v7, v5);
}

unint64_t ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke(uint64_t a1, CandidateCollection *a2)
{
  uint64_t v3;
  TI::Favonius::SearchNode *v4;

  v3 = 0x1CAC083126E978D5 * ((a2->var0.var1 - a2->var0.var0) >> 3);
  v4 = *(TI::Favonius::SearchNode **)(a1 + 32);
  (*(void (**)(_QWORD, _QWORD, _QWORD, CandidateCollection *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *((_QWORD *)v4 + 7), *(_QWORD *)(a1 + 48), a2);
  return TI::Favonius::SearchNode::transfer_error_correction_types_to_candidates(v4, a2, v3);
}

uint64_t ___ZNK2TI8Favonius10SearchNode10candidatesEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEf_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, float, float))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(float *)(*(_QWORD *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

void TI::Favonius::SearchNode::completion_stems(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, char a5, float a6)
{
  _QWORD v6[6];
  float v7;
  _QWORD v8[7];
  char v9;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke;
  v8[3] = &__block_descriptor_57_e9_v16__0_v8l;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v9 = a5;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke_2;
  v6[3] = &__block_descriptor_52_e9_v16__0_v8l;
  v6[4] = a1;
  v6[5] = a2;
  v7 = a6;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v8, v6);
}

void ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  KB::Candidate *v8;
  char *v9;
  unsigned __int16 *v10;
  KB::Candidate *i;
  KB::Candidate *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  KB::Candidate *v20;
  KB::Word *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  KB::Candidate **v27;
  KB::Candidate *v28;
  char *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  int v34;
  int v35;
  KB::Candidate *v36[2];
  _OWORD v37[2];
  _OWORD v38[3];
  int v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 56) + 168))(*(_QWORD *)(v4 + 56)) & 1) == 0)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 56) + 136))(*(_QWORD *)(v4 + 56));
    if (v5 && (v6 = v5, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5) & 1) == 0))
    {
      (*(void (**)(KB::Candidate **__return_ptr))(**(_QWORD **)(v4 + 56) + 120))(v36);
      KB::Word::Word((KB::Word *)&v32, (const KB::String *)v36, &kTITokenIDUNK, 0);
      if (v36[1] && BYTE6(v36[0]) == 1)
        free(v36[1]);
      v35 |= 0x800000u;
      v34 = 1065353216;
      v39 = 0;
      memset(v38, 0, sizeof(v38));
      *(_OWORD *)v36 = 0u;
      memset(v37, 0, sizeof(v37));
      (*(void (**)(_QWORD, uint64_t, _QWORD, KB::Candidate **))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v6, *(_QWORD *)(a1 + 48), v36);
      v10 = (unsigned __int16 *)v36[0];
      for (i = v36[1]; v10 != (unsigned __int16 *)i; v10 += 500)
      {
        KB::Candidate::append(v10, (const KB::Word *)&v32);
        v12 = (KB::Candidate *)a2[1];
        v13 = a2[2];
        if ((unint64_t)v12 >= v13)
        {
          v15 = 0x1CAC083126E978D5 * (((uint64_t)v12 - *a2) >> 3);
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) > 0x4189374BC6A7EFLL)
            goto LABEL_41;
          v17 = 0x1CAC083126E978D5 * ((uint64_t)(v13 - *a2) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x20C49BA5E353F7)
            v18 = 0x4189374BC6A7EFLL;
          else
            v18 = v16;
          v31 = a2 + 2;
          if (v18)
            v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v18);
          else
            v19 = 0;
          v20 = (KB::Candidate *)(v18 + 1000 * v15);
          v27 = (KB::Candidate **)v18;
          v28 = v20;
          v30 = v18 + 1000 * v19;
          KB::Candidate::Candidate(v20, (const KB::Candidate *)v10);
          v29 = (char *)v20 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &v27);
          v14 = (char *)a2[1];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v27);
        }
        else
        {
          v14 = (char *)KB::Candidate::Candidate(v12, (const KB::Candidate *)v10) + 1000;
        }
        a2[1] = (uint64_t)v14;
      }
      v27 = (KB::Candidate **)&v38[1] + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      v27 = (KB::Candidate **)v38;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      v27 = (KB::Candidate **)v37 + 1;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      v27 = v36;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v27);
      v21 = (KB::Word *)&v32;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 56))
        return;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 56) + 120))(&v32);
      KB::Word::Word((KB::Word *)v36, (const KB::String *)&v32, &kTITokenIDUNK, 0);
      if (v33 && BYTE6(v32) == 1)
        free(v33);
      v40 |= 0x800000u;
      LODWORD(v38[0]) = 1065353216;
      KB::Candidate::Candidate((KB::Candidate *)&v32);
      KB::Candidate::append((unsigned __int16 *)&v32, (const KB::Word *)v36);
      v7 = a2[2];
      v8 = (KB::Candidate *)a2[1];
      if ((unint64_t)v8 >= v7)
      {
        v22 = 0x1CAC083126E978D5 * (((uint64_t)v8 - *a2) >> 3);
        if ((unint64_t)(v22 + 1) > 0x4189374BC6A7EFLL)
LABEL_41:
          abort();
        v23 = 0x1CAC083126E978D5 * ((uint64_t)(v7 - *a2) >> 3);
        v24 = 2 * v23;
        if (2 * v23 <= v22 + 1)
          v24 = v22 + 1;
        if (v23 >= 0x20C49BA5E353F7)
          v25 = 0x4189374BC6A7EFLL;
        else
          v25 = v24;
        v31 = a2 + 2;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v25);
        else
          v26 = 0;
        v27 = (KB::Candidate **)v25;
        v28 = (KB::Candidate *)(v25 + 1000 * v22);
        v30 = v25 + 1000 * v26;
        KB::Candidate::Candidate(v28, (const KB::Candidate *)&v32);
        v29 = (char *)v28 + 1000;
        std::vector<KB::Candidate>::__swap_out_circular_buffer(a2, &v27);
        v9 = (char *)a2[1];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v27);
      }
      else
      {
        v9 = (char *)KB::Candidate::Candidate(v8, (const KB::Candidate *)&v32) + 1000;
      }
      a2[1] = (uint64_t)v9;
      KB::Candidate::~Candidate((KB::Candidate *)&v32);
      v21 = (KB::Word *)v36;
    }
    KB::Word::~Word(v21);
  }
}

uint64_t ___ZNK2TI8Favonius10SearchNode16completion_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEffb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, float, float))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(float *)(*(_QWORD *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

void TI::Favonius::SearchNode::prediction_stems(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, float a5)
{
  _QWORD v5[6];
  float v6;
  _QWORD v7[7];

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke;
  v7[3] = &__block_descriptor_56_e9_v16__0_v8l;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke_2;
  v5[3] = &__block_descriptor_52_e9_v16__0_v8l;
  v5[4] = a1;
  v5[5] = a2;
  v6 = a5;
  TI::Favonius::SearchNode::build_candidates(a1, a4, v7, v5);
}

void ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke(uint64_t a1, uint64_t a2)
{
  KB::Candidate *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD v11[3];
  _OWORD v12[3];
  int v13;
  void **v14[5];

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(_QWORD *)(a1 + 48), a2);
  v4 = *(KB::Candidate **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    v5 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v4 >= v5)
    {
      v14[4] = (void **)(a2 + 16);
      v7 = 0x1CAC083126E978D5 * ((uint64_t)(v5 - (_QWORD)v4) >> 3);
      v8 = 0x395810624DD2F1AALL * ((uint64_t)(v5 - (_QWORD)v4) >> 3);
      if (v8 <= 1)
        v8 = 1;
      if (v7 >= 0x20C49BA5E353F7)
        v9 = 0x4189374BC6A7EFLL;
      else
        v9 = v8;
      v14[0] = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v9);
      v14[1] = v14[0];
      v14[3] = &v14[0][125 * v10];
      bzero(v14[0], 0x3E8uLL);
      KB::Candidate::Candidate((KB::Candidate *)v14[0]);
      v14[2] = v14[0] + 125;
      std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, v14);
      v6 = *(char **)(a2 + 8);
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v14);
    }
    else
    {
      bzero(*(void **)a2, 0x3E8uLL);
      KB::Candidate::Candidate(v4);
      v6 = (char *)v4 + 1000;
    }
    *(_QWORD *)(a2 + 8) = v6;
    KB::LanguageModelContext::operator=((uint64_t)(v6 - 216), *(uint64_t **)(a1 + 48));
  }
  v14[0] = (void **)&v12[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)v12;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)&v11[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
  v14[0] = (void **)v11;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v14);
}

uint64_t ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, float, float))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), *(float *)(*(_QWORD *)(a1 + 32) + 144), *(float *)(a1 + 48));
}

float TI::Favonius::SearchNode::set_scores_from_language_and_geometry_scores(TI::Favonius::SearchNode *this)
{
  float result;
  const float *v3;
  float32x2_t v4;
  float32x2_t v5;

  *((_BYTE *)this + 148) = (*(uint64_t (**)(TI::Favonius::SearchNode *))(*(_QWORD *)this + 128))(this);
  result = *((float *)this + 38);
  v3 = (const float *)((char *)this + 144);
  v4 = vld1_dup_f32(v3);
  v5 = vmla_n_f32(v4, *(float32x2_t *)((char *)this + 136), result);
  *(float32x2_t *)((char *)this + 156) = v5;
  *((_DWORD *)this + 6) = v5.i32[0];
  return result;
}

uint64_t TI::Favonius::SearchNode::cached_language_extensions(TI::Favonius::SearchNode *this)
{
  if (KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix)
    return (uint64_t)this + 200;
  else
    return (uint64_t)this + 176;
}

unint64_t *TI::Favonius::SearchNode::get_language_extensions(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;

  v3 = 200;
  if (KB::SetInputHasSupplementalPrefixForScope::s_inputHasSupplementalPrefix)
  {
    v4 = (unint64_t *)(a1 + 200);
  }
  else
  {
    v3 = 176;
    v4 = (unint64_t *)(a1 + 176);
  }
  if (!*(_QWORD *)(a1 + v3))
    (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56), v4);
  return WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::operator=(a2, v4);
}

void TI::Favonius::SearchNode::clear_cached_language_extensions(TI::Favonius::SearchNode *this)
{
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity((uint64_t)this + 176);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity((uint64_t)this + 200);
}

void TI::Favonius::SearchNode::create_key_sequence_extensions(uint64_t a1, _QWORD *a2, unsigned int ***a3, float a4)
{
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unsigned int **v24;
  uint64_t *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  void **v30;
  unsigned int v31;
  unsigned int **v32;
  unsigned int **v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  void (*v48)(void);
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  unsigned int **v64;
  uint64_t *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int *v68;
  unint64_t v69;
  unsigned int **v70;
  uint64_t v71;
  uint64_t *v72;
  __int128 v73;
  void **v74;
  __int128 v75;
  unint64_t v76;
  _QWORD *v77;

  if (a1)
  {
    v8 = (unsigned int *)(a1 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = a2[2];
  v11 = (uint64_t *)a2[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = (uint64_t *)*a2;
    v14 = ((uint64_t)v11 - *a2) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
LABEL_68:
      abort();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v77 = a2 + 2;
    if (v17)
    {
      v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v17);
      v13 = (uint64_t *)*a2;
      v11 = (uint64_t *)a2[1];
    }
    else
    {
      v18 = 0;
    }
    v19 = (_QWORD *)(v17 + 8 * v14);
    v20 = v17 + 8 * v18;
    v76 = v20;
    *v19 = a1;
    *((_QWORD *)&v75 + 1) = v19 + 1;
    if (v11 == v13)
    {
      v12 = v19 + 1;
    }
    else
    {
      do
      {
        v21 = *--v11;
        *v11 = 0;
        *--v19 = v21;
      }
      while (v11 != v13);
      v12 = (_QWORD *)*((_QWORD *)&v75 + 1);
      v20 = v76;
    }
    v22 = *(_OWORD *)a2;
    *a2 = v19;
    a2[1] = v12;
    v75 = v22;
    v23 = a2[2];
    a2[2] = v20;
    v76 = v23;
    v74 = (void **)v22;
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v74);
  }
  else
  {
    *v11 = a1;
    v12 = v11 + 1;
  }
  a2[1] = v12;
  v24 = *a3;
  v64 = a3[1];
  if (*a3 != v64)
  {
    do
    {
      v72 = (uint64_t *)*a2;
      v25 = v72;
      v26 = *(_OWORD *)(a2 + 1);
      *a2 = 0;
      a2[1] = 0;
      v73 = v26;
      a2[2] = 0;
      std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a2, (uint64_t)(v26 - (_QWORD)v25) >> 3);
      v28 = v72;
      v27 = (uint64_t *)v73;
      v65 = (uint64_t *)v73;
      while (v28 != v27)
      {
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v29 = *v28;
        v30 = (void **)*((_QWORD *)v24[1] + 1);
        v74 = v30;
        if (v30)
        {
          do
            v31 = __ldaxr((unsigned int *)v30);
          while (__stlxr(v31 + 1, (unsigned int *)v30));
        }
        TI::Favonius::SearchNode::get_language_extensions(v29, &v69, (uint64_t *)&v74);
        if (v74)
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v74);
        if (v69)
        {
          v32 = v70;
          v33 = &v70[v69];
          do
          {
            v34 = operator new();
            v35 = (_BYTE *)v34;
            v36 = *v28;
            v37 = *v24;
            v68 = v37;
            if (v37)
            {
              v38 = v37 + 2;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 + 1, v38));
            }
            v40 = v24[1];
            v67 = v40;
            if (v40)
            {
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 + 1, v40));
            }
            v42 = *v32;
            *v32 = 0;
            v66 = v42;
            TI::Favonius::SearchNode::SearchNode(v34, v36, (uint64_t *)&v68, (uint64_t *)&v67, (uint64_t *)&v66, 0, a4, NAN);
            if (v66)
            {
              v43 = v66 + 2;
              v44 = atomic_load(v66 + 2);
              if (v44 == 1)
              {
                (*(void (**)(void))(*(_QWORD *)v66 + 248))();
              }
              else
              {
                do
                  v45 = __ldaxr(v43);
                while (__stlxr(v45 - 1, v43));
              }
            }
            if (v67)
              WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v67);
            if (v68)
            {
              v46 = v68 + 2;
              v47 = atomic_load(v68 + 2);
              if (v47 == 1)
              {
                v48 = *(void (**)(void))(*(_QWORD *)v68 + 8);
                goto LABEL_46;
              }
              do
                v49 = __ldaxr(v46);
              while (__stlxr(v49 - 1, v46));
            }
            while (!v35[148])
            {
              v48 = *(void (**)(void))(*(_QWORD *)v35 + 48);
LABEL_46:
              v48();
            }
            v51 = (uint64_t *)a2[1];
            v50 = a2[2];
            if ((unint64_t)v51 >= v50)
            {
              v53 = (uint64_t *)*a2;
              v54 = ((uint64_t)v51 - *a2) >> 3;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                goto LABEL_68;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 2 > v55)
                v55 = v56 >> 2;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              v77 = a2 + 2;
              if (v57)
              {
                v57 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v57);
                v53 = (uint64_t *)*a2;
                v51 = (uint64_t *)a2[1];
              }
              else
              {
                v58 = 0;
              }
              v59 = (_QWORD *)(v57 + 8 * v54);
              v60 = v57 + 8 * v58;
              v76 = v60;
              *v59 = v35;
              *((_QWORD *)&v75 + 1) = v59 + 1;
              if (v51 == v53)
              {
                v52 = v59 + 1;
              }
              else
              {
                do
                {
                  v61 = *--v51;
                  *v51 = 0;
                  *--v59 = v61;
                }
                while (v51 != v53);
                v52 = (_QWORD *)*((_QWORD *)&v75 + 1);
                v60 = v76;
              }
              v62 = *(_OWORD *)a2;
              *a2 = v59;
              a2[1] = v52;
              v75 = v62;
              v63 = a2[2];
              a2[2] = v60;
              v76 = v63;
              v74 = (void **)v62;
              std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v74);
            }
            else
            {
              *v51 = (uint64_t)v35;
              v52 = v51 + 1;
            }
            a2[1] = v52;
            ++v32;
          }
          while (v32 != v33);
        }
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v69);
        ++v28;
        v27 = v65;
      }
      v74 = (void **)&v72;
      std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v74);
      v24 += 2;
    }
    while (v24 != v64);
  }
}

_QWORD *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      abort();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

TI::Favonius::SearchNode *TI::Favonius::SearchNode::append_keys_for_debugging(TI::Favonius::SearchNode *this, KB::String *a2)
{
  TI::Favonius::SearchNode *result;

  result = (TI::Favonius::SearchNode *)*((_QWORD *)this + 4);
  if (result)
  {
    TI::Favonius::SearchNode::append_keys_for_debugging(result, a2);
    return (TI::Favonius::SearchNode *)(*(uint64_t (**)(TI::Favonius::SearchNode *, KB::String *))(*(_QWORD *)this + 104))(this, a2);
  }
  return result;
}

void TI::Favonius::SearchNode::append_debug_data(TI::Favonius::SearchNode *this, __CFString *a2)
{
  char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  int v12;
  __int16 v13;
  char v14;
  void *v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  unsigned int v22;
  int v23;
  __int16 v24;
  char v25;
  char *v26;
  char v27;
  int v28;
  __int16 v29;
  char v30;
  char *v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v28 = 0x100000;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  TI::Favonius::SearchNode::input_string_recursive(this, (KB::String *)&v28, 0);
  v23 = 0x100000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v4 = v31;
  if (!v31)
    v4 = &v32;
  v20 = v4;
  LODWORD(v21) = 0;
  HIDWORD(v21) = (unsigned __int16)v28;
  v22 = 0;
  KB::String::iterator::initialize((uint64_t *)&v20);
  while (v22 == 10)
  {
    KB::String::append((unsigned __int16 *)&v23, "<BR>", 0xFFFFuLL);
LABEL_8:
    KB::String::iterator::operator++((uint64_t *)&v20);
  }
  if (v22)
  {
    KB::String::append((KB::String *)&v23, v22);
    goto LABEL_8;
  }
  LODWORD(v20) = 0x100000;
  WORD2(v20) = 0;
  BYTE6(v20) = 0;
  v21 = 0;
  LOBYTE(v22) = 0;
  TI::Favonius::SearchNode::append_keys_for_debugging(this, (KB::String *)&v20);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 7) + 224))(&v17);
  v12 = 0x100000;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v5 = v26;
  if (!v26)
    v5 = &v27;
  if (!(_WORD)v23)
    v5 = "";
  v6 = (const char *)v21;
  if (!v21)
    v6 = (const char *)&v22;
  if ((_WORD)v20)
    v7 = v6;
  else
    v7 = "";
  v8 = (const char *)v18;
  if (!v18)
    v8 = (const char *)&v19;
  if ((_WORD)v17)
    v9 = v8;
  else
    v9 = "";
  KB::String::append_format((KB::String *)&v12, "[%s] [L %7.3f + G %7.3f = %7.3f] [word %7.3f] [keys %s] [typing %s]\n", v5, *((float *)this + 34), *((float *)this + 36), *((float *)this + 39), *((float *)this + 40), v7, v9);
  v10 = (const char *)v15;
  if (!v15)
    v10 = &v16;
  if ((_WORD)v12)
    v11 = v10;
  else
    v11 = "";
  CFStringAppendCString(a2, v11, 0x8000100u);
  if (v15 && v14 == 1)
    free(v15);
  if (v18 && BYTE6(v17) == 1)
    free(v18);
  if (v21 && BYTE6(v20) == 1)
    free(v21);
  if (v26 && v25 == 1)
    free(v26);
  if (v31)
  {
    if (v30 == 1)
      free(v31);
  }
}

void TI::Favonius::SearchNode::debug_data(TI::Favonius::SearchNode *this@<X0>, uint64_t a2@<X8>)
{
  CFMutableStringRef Mutable;

  Mutable = CFStringCreateMutable(0, 0);
  TI::Favonius::SearchNode::append_debug_data(this, Mutable);
  KB::utf8_string(Mutable, a2);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t *TI::Favonius::UnigramTypingModel::root_hypotheses(unsigned int *a1, unint64_t *a2, unsigned __int16 *a3)
{
  unsigned int **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v6 = (unsigned int **)(a1 + 6);
  v7 = operator new();
  TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis((_QWORD *)v7, v6, a1);
  v8 = *a2;
  if (*a2 != a2[2])
  {
    v11 = a2[1];
    goto LABEL_10;
  }
  v9 = v8 + (v8 >> 1);
  if (v8 < 0x100)
    v9 = 2 * v8;
  if (v9 <= v8 + 1)
    v10 = v8 + 1;
  else
    v10 = v9;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v10);
  v11 = a2[1];
  if (v11)
  {
    v8 = *a2;
LABEL_10:
    *(_QWORD *)(v11 + 8 * v8) = v7;
    *a2 = v8 + 1;
    return TI::Favonius::UnigramTypingModel::extend_hypotheses((uint64_t)a1, a2, a3, 0xAu);
  }
  v13 = (unsigned int *)(v7 + 8);
  v14 = atomic_load((unsigned int *)(v7 + 8));
  if (v14 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 248))(v7);
  }
  else
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
  }
  return TI::Favonius::UnigramTypingModel::extend_hypotheses((uint64_t)a1, a2, a3, 0xAu);
}

uint64_t TI::Favonius::UnigramTypingModel::all_words_allow_restart(TI::Favonius::UnigramTypingModel *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel *))(*(_QWORD *)this + 48))(this)
                            + 64);
}

uint64_t TI::Favonius::UnigramTypingModel::key_factory(TI::Favonius::UnigramTypingModel *this)
{
  return (uint64_t)this + 32;
}

unsigned int *TI::Favonius::ZephyrTypingModel::set_input_segment_filter(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int **)(a1 + 16);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  return result;
}

void TI::Favonius::UnigramTypingModel::~UnigramTypingModel(TI::Favonius::UnigramTypingModel *this)
{
  TI::Favonius::UnigramTypingModel::~UnigramTypingModel(this);
  JUMPOUT(0x1DF0A2144);
}

{
  char *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1EA101928;
  v2 = (char *)this + 32;
  std::__hash_table<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>>>::__deallocate_node(*((_QWORD **)this + 10));
  v3 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    operator delete(v3);
  v4 = (char *)*((_QWORD *)this + 7);
  if (v4 == v2)
  {
    v5 = 4;
    v4 = v2;
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  if (v6)
    WTF::RefCounted<KB::DictionaryContainer>::deref(v6);
  *(_QWORD *)this = &unk_1EA103D70;
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = v7 + 2;
    v9 = atomic_load(v7 + 2);
    if (v9 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 - 1, v8));
    }
  }
}

uint64_t TI::Favonius::UnigramTypingModel::dictionary(TI::Favonius::UnigramTypingModel *this)
{
  return (uint64_t)this + 24;
}

void std::__hash_table<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,WTF::RefPtr<TI::Favonius::Key>>>>::__deallocate_node(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = v1[3];
      if (v3)
        WTF::RefCounted<TI::Favonius::Key>::deref(v3);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(_QWORD *a1, unsigned int **a2, unsigned int *a3)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v14;
  int v15;
  __int16 v16;
  char v17;
  void *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  if (a3)
  {
    v5 = a3 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis((uint64_t)a1, (uint64_t *)&v14);
  if (v14)
  {
    v7 = v14 + 2;
    v8 = atomic_load(v14 + 2);
    if (v8 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
    }
    else
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
    }
  }
  *a1 = off_1EA101970;
  v15 = 0x100000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v10 = operator new();
  a1[10] = TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(v10, a2, (const KB::String *)&v15);
  if (v18 && v17 == 1)
    free(v18);
  v11 = *a2;
  a1[11] = *a2;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  a1[12] = 0xFF8000003F800000;
  return a1;
}

uint64_t *TI::Favonius::UnigramTypingModel::extend_hypotheses(uint64_t a1, unint64_t *a2, unsigned __int16 *a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t *result;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  TI::Favonius::Key *v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  TI::Favonius::Key *v41;
  _BYTE v42[8];
  void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a3 + 1))
    v7 = *((_QWORD *)a3 + 1);
  else
    v7 = (uint64_t)(a3 + 8);
  v37 = v7;
  v8 = *a3;
  v38 = 0;
  v39 = v8;
  v40 = 0;
  KB::String::iterator::initialize(&v37);
  v33 = v7;
  v34 = v8;
  v35 = v8;
  v36 = 0;
  result = KB::String::iterator::initialize(&v33);
  if (v38 != v34)
  {
    while (1)
    {
      v10 = v40;
      v31 = *(_OWORD *)a2;
      v11 = a2[2];
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      v32 = v11;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      KB::String::String((uint64_t)v42, v10);
      TI::Favonius::KeyFactory::create_key(v12, (const KB::String *)v42, &v41);
      v30 = v41;
      if (v43 && v42[6] == 1)
        free(v43);
      if ((_QWORD)v31)
      {
        v13 = (uint64_t *)*((_QWORD *)&v31 + 1);
        v14 = 8 * v31;
        do
        {
          v15 = *v13++;
          (*(void (**)(uint64_t, unint64_t *, TI::Favonius::Key **))(*(_QWORD *)v15 + 40))(v15, a2, &v30);
          v14 -= 8;
        }
        while (v14);
      }
      v16 = *a2;
      if (!*a2)
        break;
      if (a4 && v16 > a4)
      {
        v17 = a2[1];
        v41 = (TI::Favonius::Key *)&__block_literal_global_11123;
        std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>(v17, (uint64_t *)(v17 + 8 * v16), (uint64_t)&v41, 126 - 2 * __clz(v16), 1);
        v18 = *a2;
        if (*a2 >= a4)
        {
          if (v18 != a4)
          {
            v23 = a2[1];
            v24 = (unsigned int **)(v23 + 8 * v18);
            v25 = (unsigned int **)(v23 + 8 * a4);
            do
            {
              v26 = *v25;
              if (*v25)
              {
                v27 = v26 + 2;
                v28 = atomic_load(v26 + 2);
                if (v28 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 248))(v26);
                }
                else
                {
                  do
                    v29 = __ldaxr(v27);
                  while (__stlxr(v29 - 1, v27));
                }
              }
              ++v25;
            }
            while (v25 != v24);
          }
        }
        else
        {
          v19 = a2[2];
          if (v19 < a4)
          {
            if (v19 >= 0x100)
              v20 = v19 + (v19 >> 1);
            else
              v20 = 2 * v19;
            if (v20 <= a4)
              v21 = a4;
            else
              v21 = v20;
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v21);
          }
          v22 = a2[1];
          if (v22)
            bzero((void *)(v22 + 8 * *a2), 8 * a4 - 8 * *a2);
        }
        *a2 = a4;
      }
      if (v30)
        WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v30);
      WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v31);
      result = KB::String::iterator::operator++(&v37);
      if (v38 == v34)
        return result;
    }
    if (v30)
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v30);
    return (uint64_t *)WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v31);
  }
  return result;
}

BOOL ___ZN2TI8Favonius18UnigramTypingModel17extend_hypothesesERN3WTF6VectorINS2_6RefPtrINS0_16TypingHypothesisEEELm0EEERKN2KB6StringEj_block_invoke(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  float v4;

  v3 = *a3;
  v4 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
  return v4 > (*(float (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::typing_model(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  return *((_QWORD *)this + 2);
}

float TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_key(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  return *((float *)this + 16) * *((float *)this + 24);
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::current_string_key(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((_QWORD *)this + 5);
}

void TI::Favonius::UnigramTypingModel::Hypothesis::extensions(_QWORD *a1, unint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;

  if (TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_is_extended_by_key(a1, *a3))
  {
    v6 = TI::Favonius::UnigramTypingModel::Hypothesis::extending_key_could_terminate_input_segment(a1, *a3);
    (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t *, uint64_t))(*a1 + 256))(&v26, a1, a3, 1);
    v7 = v26;
    if (!v6)
    {
      if (!v26)
        return;
      v8 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(unsigned int **__return_ptr, _QWORD *, uint64_t *, _QWORD))(*a1 + 256))(&v26, a1, a3, 0);
  v8 = v26;
  if (!v7)
    goto LABEL_24;
  if (v26
    && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 160))(v7) & 1) == 0
    && (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 160))(v8))
  {
    v9 = v7 + 2;
    v10 = atomic_load(v7 + 2);
    if (v10 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
    goto LABEL_25;
  }
LABEL_14:
  v12 = *a2;
  if (*a2 != a2[2])
  {
    v15 = a2[1];
    goto LABEL_23;
  }
  v13 = v12 + (v12 >> 1);
  if (v12 < 0x100)
    v13 = 2 * v12;
  if (v13 <= v12 + 1)
    v14 = v12 + 1;
  else
    v14 = v13;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v14);
  v15 = a2[1];
  if (v15)
  {
    v12 = *a2;
LABEL_23:
    *(_QWORD *)(v15 + 8 * v12) = v7;
    *a2 = v12 + 1;
    goto LABEL_24;
  }
  v23 = v7 + 2;
  v24 = atomic_load(v7 + 2);
  if (v24 == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 248))(v7);
  }
  else
  {
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
  }
LABEL_24:
  if (!v8)
    return;
LABEL_25:
  v16 = *a2;
  if (*a2 != a2[2])
  {
    v19 = a2[1];
    goto LABEL_34;
  }
  v17 = v16 + (v16 >> 1);
  if (v16 < 0x100)
    v17 = 2 * v16;
  if (v17 <= v16 + 1)
    v18 = v16 + 1;
  else
    v18 = v17;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v18);
  v19 = a2[1];
  if (v19)
  {
    v16 = *a2;
LABEL_34:
    *(_QWORD *)(v19 + 8 * v16) = v8;
    *a2 = v16 + 1;
    return;
  }
  v20 = v8 + 2;
  v21 = atomic_load(v8 + 2);
  if (v21 == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 248))(v8);
  }
  else
  {
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::predict_extensions(unsigned int **a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  TI::Favonius::DictionaryHypothesis *v30;
  uint64_t *v31;
  _QWORD v32[2];
  uint64_t (*v33)(uint64_t, unsigned int **);
  void *v34;
  unsigned int **v35;
  int v36;
  __int16 v37;
  char v38;
  void *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1[10])
  {
    v4 = (*((uint64_t (**)(unsigned int **))*a1 + 4))(a1);
    if (((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 60) & 1) != 0
       || (*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + 60) & 0x34E) != 0)
      && (((*((uint64_t (**)(unsigned int **))*a1 + 9))(a1) & 1) != 0
       || (*(_WORD *)(*(_QWORD *)(*((uint64_t (**)(unsigned int **))*a1 + 2))(a1) + 60) & 8) == 0))
    {
      v5 = *a2;
      TI::Favonius::UnigramTypingModel::Hypothesis::extensions_from_dict_hypothesis((uint64_t)a1, a2, (uint64_t *)a1[10], 1);
      v6 = *a2;
      v7 = a2[1];
      v8 = (unsigned int **)(v7 + 8 * v5);
      v9 = (unsigned int **)(v7 + 8 * *a2);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 0x40000000;
      v33 = (uint64_t (*)(uint64_t, unsigned int **))___ZNK2TI8Favonius18UnigramTypingModel10Hypothesis18predict_extensionsERN3WTF6VectorINS3_6RefPtrINS0_16TypingHypothesisEEELm0EEE_block_invoke;
      v34 = &__block_descriptor_tmp_11126;
      v35 = a1;
      if (v5 != v6)
      {
        v17 = 8 * v6 - 8 * v5;
        while ((v33((uint64_t)v32, v8) & 1) == 0)
        {
          ++v8;
          v17 -= 8;
          if (!v17)
          {
            v10 = v9;
            goto LABEL_21;
          }
        }
      }
      v10 = v9;
      if (v8 != v9)
      {
        v11 = v8 + 1;
        v10 = v8;
        while (v11 != v9)
        {
          if ((v33((uint64_t)v32, v11) & 1) == 0)
          {
            v12 = *v11;
            *v11 = 0;
            v13 = *v10;
            *v10 = v12;
            if (v13)
            {
              v14 = v13 + 2;
              v15 = atomic_load(v13 + 2);
              if (v15 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 248))(v13);
              }
              else
              {
                do
                  v16 = __ldaxr(v14);
                while (__stlxr(v16 - 1, v14));
              }
            }
            ++v10;
          }
          ++v11;
        }
      }
LABEL_21:
      v19 = *a2;
      v18 = a2[1];
      v20 = (uint64_t)((uint64_t)v10 - v18) >> 3;
      if (*a2 >= v20)
      {
        if (v19 != v20)
        {
          v24 = (unsigned int **)(v18 + 8 * v19);
          v25 = (unsigned int **)(v18 + 8 * v20);
          do
          {
            v26 = *v25;
            if (*v25)
            {
              v27 = v26 + 2;
              v28 = atomic_load(v26 + 2);
              if (v28 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 248))(v26);
              }
              else
              {
                do
                  v29 = __ldaxr(v27);
                while (__stlxr(v29 - 1, v27));
              }
            }
            ++v25;
          }
          while (v25 != v24);
        }
      }
      else
      {
        v21 = a2[2];
        if (v21 < v20)
        {
          v22 = v21 + (v21 >> 1);
          if (v21 < 0x100)
            v22 = 2 * v21;
          if (v22 <= v20)
            v23 = v20;
          else
            v23 = v22;
          WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v23);
          v18 = a2[1];
        }
        if (v18)
          bzero((void *)(v18 + 8 * *a2), 8 * v20 - 8 * *a2);
      }
      *a2 = v20;
      if (!*((_BYTE *)a1[11] + 64)
        && TI::Favonius::DictionaryHypothesis::allows_restart((TI::Favonius::DictionaryHypothesis *)a1[10]))
      {
        v30 = (TI::Favonius::DictionaryHypothesis *)a1[10];
        if (v30)
        {
          TI::Favonius::DictionaryHypothesis::affix_sentinel(v30, (uint64_t)&v36);
        }
        else
        {
          v36 = 0x100000;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = 0;
        }
        v31 = (uint64_t *)operator new();
        TI::Favonius::DictionaryHypothesis::DictionaryHypothesis((uint64_t)v31, a1 + 11, (const KB::String *)&v36);
        if (v39 && v38 == 1)
          free(v39);
        TI::Favonius::UnigramTypingModel::Hypothesis::extensions_from_dict_hypothesis((uint64_t)a1, a2, v31, 0);
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v31);
      }
    }
  }
}

TI::Favonius::DictionaryHypothesis *TI::Favonius::UnigramTypingModel::Hypothesis::predicted_extensions_are_canonical(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  _BOOL4 v2;
  TI::Favonius::DictionaryHypothesis *result;

  if (*(_QWORD *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 16))(this))
    v2 = (*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 16))(this)
                   + 60) & 8) == 0;
  else
    v2 = 1;
  result = (TI::Favonius::DictionaryHypothesis *)*((_QWORD *)this + 10);
  if (result)
    return (TI::Favonius::DictionaryHypothesis *)(v2 & ~TI::Favonius::DictionaryHypothesis::allows_restart(result));
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int HasEntries;
  BOOL v7;

  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 144))(this) & 1) != 0
    || !*((_QWORD *)this + 10))
  {
    return 0;
  }
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this) & 1) != 0)
    return 1;
  v2 = *((_QWORD *)this + 10);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3)
  {
    v4 = v2 + 16;
    v5 = 8 * v3 - 8;
    do
    {
      v4 += 8;
      HasEntries = LXCursorHasEntries();
      if (HasEntries)
        v7 = 1;
      else
        v7 = v5 == 0;
      v5 -= 8;
    }
    while (!v7);
    if (HasEntries)
      return 1;
  }
  return KB::DynamicDictionaryCursor::has_entries(*(KB::DynamicDictionaryCursor **)(v2 + 72));
}

float TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_word_termination(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  char v2;
  float result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this);
  result = 1.0;
  if ((v2 & 1) == 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (v4)
      return KB::DictionaryCursors::termination_probability((KB::DictionaryCursors *)(v4 + 16), *(const KB::DictionaryContainer **)(v4 + 8));
    else
      return 0.0;
  }
  return result;
}

void TI::Favonius::UnigramTypingModel::Hypothesis::word_score(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  uint64_t v2;
  float v3;
  float v4;

  if ((*((_DWORD *)this + 25) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    if ((**(uint64_t (***)(TI::Favonius::UnigramTypingModel::Hypothesis *))this)(this))
    {
      v2 = (**(uint64_t (***)(TI::Favonius::UnigramTypingModel::Hypothesis *))this)(this);
      v3 = (*(float (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
      v4 = v3 + logf(*((float *)this + 24));
    }
    else
    {
      v4 = 0.0;
    }
    *((float *)this + 25) = v4;
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::words_for_input_segment(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unint64_t v20;
  KB::Word *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE v29[48];
  int v30;
  float v31;
  int v32;
  int v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 168))(a1) & 1) != 0)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    KB::Word::Word((KB::Word *)v29, (const KB::String *)(*(_QWORD *)v5 + 8), &kTITokenIDUNK, 0);
    v30 = 1065353216;
    v33 |= 0x4000000u;
LABEL_23:
    v20 = a2[2];
    v21 = (KB::Word *)a2[1];
    if ((unint64_t)v21 >= v20)
    {
      v23 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v21 - *a2) >> 4);
      if (v23 + 1 > 0x111111111111111)
        abort();
      v24 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v20 - *a2) >> 4);
      v25 = 2 * v24;
      if (2 * v24 <= v23 + 1)
        v25 = v23 + 1;
      if (v24 >= 0x88888888888888)
        v26 = 0x111111111111111;
      else
        v26 = v25;
      v38 = a2 + 2;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Word>>(v26);
      else
        v27 = 0;
      v28 = (char *)(v26 + 240 * v23);
      v34 = v26;
      v35 = v28;
      v37 = v26 + 240 * v27;
      KB::Word::Word((KB::Word *)v28, (const KB::Word *)v29);
      v36 = v28 + 240;
      std::vector<KB::Word>::__swap_out_circular_buffer(a2, &v34);
      v22 = (char *)a2[1];
      std::__split_buffer<KB::Word>::~__split_buffer((uint64_t)&v34);
    }
    else
    {
      v22 = (char *)KB::Word::Word(v21, (const KB::Word *)v29) + 240;
    }
    a2[1] = (uint64_t)v22;
    KB::Word::~Word((KB::Word *)v29);
    return;
  }
  v6 = a1[10];
  if (v6)
  {
    TI::Favonius::DictionaryHypothesis::_words(v6, a2, 1, 1, 1);
    v7 = *a2;
    v8 = a2[1];
    TI::Favonius::ZephyrTypingModel::Hypothesis::filter_words_for_input_segment((uint64_t)a1, (uint64_t)a2);
    if (v7 == v8)
      v9 = 1.0;
    else
      v9 = 0.0001;
  }
  else
  {
    v9 = 1.0;
  }
  v10 = *a1;
  if (*a2 == a2[1])
  {
    v15 = (*(uint64_t (**)(_QWORD *))(v10 + 136))(a1);
    v16 = (*(float (**)(_QWORD *))(*a1 + 88))(a1);
    v17 = v16 - (*(float (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
    if (v17 > 0.0)
      v17 = 0.0;
    v18 = expf(v17);
    if (v18 >= 0.00000003)
      v19 = v18;
    else
      v19 = 0.00000003;
    (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*a1 + 120))(&v34, a1);
    KB::Word::Word((KB::Word *)v29, (const KB::String *)&v34, &kTITokenIDUNK, 0);
    if (v35 && BYTE6(v34) == 1)
      free(v35);
    v30 = LODWORD(v9);
    v31 = v19 * v9;
    v32 |= 0x800000u;
    goto LABEL_23;
  }
  v11 = (*(float (**)(_QWORD *))(v10 + 264))(a1);
  v12 = v11 * (*(float (**)(_QWORD *))(*a1 + 80))(a1);
  if (v12 < 0.00000003)
    v12 = 0.00000003;
  v13 = *a2;
  v14 = a2[1];
  while (v13 != v14)
  {
    *(float *)(v13 + 52) = v12 * *(float *)(v13 + 48);
    v13 += 240;
  }
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::previous_input_segment(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t TI::Favonius::ZephyrTypingModel::Hypothesis::is_input_boundary(TI::Favonius::ZephyrTypingModel::Hypothesis *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 5) + 56);
}

BOOL TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_prefix(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 144))(this) & 1) != 0)
    return 1;
  if (!*((_QWORD *)this + 10))
    return 0;
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this) & 1) != 0
    || *(_DWORD *)(*((_QWORD *)this + 10) + 88))
  {
    return 1;
  }
  return LXCursorIsRoot() != 0;
}

BOOL TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_separator(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  uint64_t v2;
  _BOOL8 result;

  result = 1;
  if (!*((_QWORD *)this + 10) || !LXCursorIsRoot())
  {
    if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 72))(this) & 1) != 0)
      return 0;
    v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 32))(this);
    if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2) + 60) & 8) == 0)
      return 0;
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::clone_with_parent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    v4 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2) ^ 1;
  else
    v4 = 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 256))(a2, v5, v4);
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::clone_with_key@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;

  v6 = (*(uint64_t (**)(_QWORD *))*a1)(a1);
  v7 = (unsigned int *)a1[10];
  v14 = v7;
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *a2;
  *a2 = 0;
  v13 = v9;
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 72))(a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int **, uint64_t *, uint64_t))(*(_QWORD *)v6 + 272))(&v15, v6, &v14, &v13, v10);
  v11 = v15;
  v15 = 0;
  *a3 = v11;
  if (v13)
    WTF::RefCounted<TI::Favonius::Key>::deref(v13);
  result = (uint64_t)v14;
  if (v14)
    return WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v14);
  return result;
}

void TI::Favonius::UnigramTypingModel::Hypothesis::~Hypothesis(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  TI::Favonius::UnigramTypingModel::Hypothesis::~Hypothesis(this);
  JUMPOUT(0x1DF0A2144);
}

{
  unsigned int *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1EA101970;
  v2 = (unsigned int *)*((_QWORD *)this + 11);
  if (v2)
    WTF::RefCounted<KB::DictionaryContainer>::deref(v2);
  v3 = *((_QWORD *)this + 10);
  if (v3)
    WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v3);
  TI::Favonius::ZephyrTypingModel::Hypothesis::~Hypothesis(this);
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::extend(unsigned int **a1, uint64_t *a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int v7;
  __int16 v8;
  TI::Favonius::DictionaryHypothesis *v9;
  uint64_t v10;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  TI::Favonius::DictionaryHypothesis *v18;
  unsigned int v19;
  char v20;
  uint64_t result;
  unsigned int *v22;
  uint64_t v23;
  void *v24;
  int v25;
  __int16 v26;
  char v27;
  void *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a1[10];
  if (!v6)
  {
    if ((a3 & 1) != 0)
    {
      v6 = 0;
      v22 = 0;
      v20 = 1;
      goto LABEL_40;
    }
    v8 = *(_WORD *)(*a2 + 60);
    goto LABEL_4;
  }
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_WORD *)(*a2 + 60);
  if ((a3 & 1) == 0)
  {
LABEL_4:
    v9 = (TI::Favonius::DictionaryHypothesis *)a1[10];
    if (v9)
    {
      TI::Favonius::DictionaryHypothesis::affix_sentinel(v9, (uint64_t)&v25);
    }
    else
    {
      v25 = 0x100000;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
    }
    v10 = operator new();
    TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(v10, a1 + 11, (const KB::String *)&v25);
    if (v6)
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v6);
    if (v28 && v27 == 1)
      free(v28);
    v6 = (unsigned int *)v10;
  }
  if (((v8 & 8) != 0 || (v8 & 0x30) == 0) && (v8 & 0xB81) == 0 && (v8 & 0x40) == 0)
  {
    v14 = *a2;
    v15 = *(unsigned __int16 *)(*a2 + 12);
    if (!*(_WORD *)(*a2 + 12))
    {
      KB::String::compute_length((unsigned __int16 *)(v14 + 8));
      v15 = *(unsigned __int16 *)(v14 + 12);
    }
    if (v15 < 2)
    {
      if (*(_WORD *)(*a2 + 40))
      {
        v17 = *(_DWORD *)(*a2 + 56);
        v18 = (TI::Favonius::DictionaryHypothesis *)operator new();
        TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(v18, (const TI::Favonius::DictionaryHypothesis *)v6, v17);
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v6);
        v6 = (unsigned int *)v18;
      }
    }
    else
    {
      v25 = 0x100000;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      if ((_DWORD)a3)
      {
        (*((void (**)(uint64_t *__return_ptr, unsigned int **))*a1 + 15))(&v23, a1);
        KB::String::operator=((uint64_t)&v25, (KB::String *)&v23);
        if (v24)
        {
          if (BYTE6(v23) == 1)
            free(v24);
        }
      }
      KB::String::append((unsigned __int16 *)&v25, (const KB::String *)(*a2 + 8));
      v16 = operator new();
      TI::Favonius::DictionaryHypothesis::DictionaryHypothesis(v16, a1 + 11, (const KB::String *)&v25);
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v6);
      if (v28 && v27 == 1)
        free(v28);
      v6 = (unsigned int *)v16;
    }
  }
  v22 = v6;
  do
    v19 = __ldaxr(v6);
  while (__stlxr(v19 + 1, v6));
  v20 = 0;
LABEL_40:
  (*((void (**)(unsigned int **, unsigned int **, uint64_t *, uint64_t))*a1 + 34))(a1, &v22, a2, a3);
  result = (uint64_t)v22;
  if (v22)
    result = WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v22);
  if ((v20 & 1) == 0)
    return WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v6);
  return result;
}

float TI::Favonius::UnigramTypingModel::Hypothesis::probability_of_unigram_prefix(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  char v2;
  float result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this);
  result = 1.0;
  if ((v2 & 1) == 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (v4)
      return *(float *)(v4 + 100);
    else
      return 0.0;
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::create@<X0>(const TI::Favonius::UnigramTypingModel::Hypothesis *a1@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v13 = v11;
  *a5 = TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(v10, a1, &v13, a3, a4);
  result = v13;
  if (v13)
    return WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v13);
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(uint64_t a1, const TI::Favonius::UnigramTypingModel::Hypothesis *a2, uint64_t *a3, unsigned int **a4, int a5)
{
  char v5;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;

  v5 = a5;
  v9 = (_QWORD *)TI::Favonius::ZephyrTypingModel::Hypothesis::Hypothesis(a1, (uint64_t)a2, a4, a5);
  *v9 = off_1EA101970;
  v10 = *a3;
  *a3 = 0;
  v11 = (unsigned int *)*((_QWORD *)a2 + 11);
  v9[10] = v10;
  v9[11] = v11;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 96) = 0xFF8000003F800000;
  if (*(_BYTE *)(a1 + 57))
  {
    if ((v5 & 1) == 0
      && TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_apostrophe_word((TI::Favonius::UnigramTypingModel::Hypothesis *)a1))
    {
      v13 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      v14 = 0.0000004;
      if (!v13)
        goto LABEL_18;
      goto LABEL_17;
    }
    v14 = 1.0;
    if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 60) & 0x80) != 0)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v16 = *(unsigned int **)(v15 + 80);
      if (v16)
      {
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      v18 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v16;
      if (v18)
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v18);
      v19 = *(float *)(v15 + 96);
      if (v19 <= 0.0)
        v14 = 1.0;
      else
        v14 = 1.0 / v19;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v14 = 1.0;
    if (v13)
LABEL_17:
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v13);
  }
LABEL_18:
  TI::Favonius::UnigramTypingModel::Hypothesis::unigram_probability_of_letter_key((TI::Favonius::UnigramTypingModel::Hypothesis *)a1, a2);
  *(float *)(a1 + 96) = v14 * v20;
  return a1;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::ends_with_word_apostrophe_word(TI::Favonius::UnigramTypingModel::Hypothesis *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 144))(this) & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 136))(this);
  if (!result)
    return result;
  v3 = result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result) & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
  if (!result)
    return result;
  v4 = result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result) & 1) != 0
    || ((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this) & 1) != 0)
  {
    return 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v3);
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) + 56) != 39)
    return 0;
  else
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 168))(v4) ^ 1;
}

void TI::Favonius::UnigramTypingModel::Hypothesis::unigram_probability_of_letter_key(TI::Favonius::UnigramTypingModel::Hypothesis *this, const TI::Favonius::UnigramTypingModel::Hypothesis *a2)
{
  uint64_t v4;

  if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 16))(this)
                 + 60) & 0xE) != 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (v4)
    {
      if (v4 != *((_QWORD *)a2 + 10))
        (*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 168))(this);
    }
  }
  if (((*(uint64_t (**)(TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)this + 72))(this) & 1) == 0
    && *((_QWORD *)a2 + 10)
    && ((*(uint64_t (**)(const TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)a2 + 168))(a2) & 1) == 0)
  {
    (*(float (**)(const TI::Favonius::UnigramTypingModel::Hypothesis *))(*(_QWORD *)a2 + 80))(a2);
  }
}

void TI::Favonius::UnigramTypingModel::Hypothesis::next_root_string(TI::Favonius::UnigramTypingModel::Hypothesis *this@<X0>, uint64_t a2@<X8>)
{
  TI::Favonius::DictionaryHypothesis *v2;

  v2 = (TI::Favonius::DictionaryHypothesis *)*((_QWORD *)this + 10);
  if (v2)
  {
    TI::Favonius::DictionaryHypothesis::affix_sentinel(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0x100000;
    *(_WORD *)(a2 + 4) = 0;
    *(_BYTE *)(a2 + 6) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

uint64_t TI::Favonius::DictionaryHypothesis::allows_restart(TI::Favonius::DictionaryHypothesis *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int HasEntries;
  BOOL v11;

  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = 8 * v3 - 8;
    v5 = (char *)this + 16;
    do
    {
      v5 += 8;
      v6 = LXCursorTerminatesWordStem();
      if (v6)
        v7 = 1;
      else
        v7 = v4 == 0;
      v4 -= 8;
    }
    while (!v7);
    if (v6)
      return 1;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 1) + 64))
    return 0;
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    v9 = 8 * v8 - 8;
    do
    {
      v2 += 8;
      HasEntries = LXCursorHasEntries();
      if (HasEntries)
        v11 = 1;
      else
        v11 = v9 == 0;
      v9 -= 8;
    }
    while (!v11);
    if (HasEntries)
      return 1;
  }
  return KB::DynamicDictionaryCursor::has_entries(*((KB::DynamicDictionaryCursor **)this + 9));
}

void TI::Favonius::UnigramTypingModel::Hypothesis::extensions_from_dict_hypothesis(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  TI::Favonius::KeyFactory *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  TI::Favonius::DictionaryHypothesis::extensions(a3, &v29);
  v7 = v29;
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v29 + *a2);
  v8 = (unsigned int **)v30;
  if (!v7)
    goto LABEL_32;
  v9 = (unsigned int **)((char *)v30 + 8 * v7);
  do
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v11 = (TI::Favonius::KeyFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    TI::Favonius::KeyFactory::create_key(v11, (*v8)[22], &v27);
    v12 = v27;
    v28 = v27;
    if ((v27[15] & 0xB81) != 0)
    {
LABEL_19:
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v12);
      goto LABEL_20;
    }
    v13 = *v8;
    v26 = v13;
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    (*(void (**)(unsigned int **__return_ptr, uint64_t, unsigned int **, unsigned int **, uint64_t))(*(_QWORD *)a1 + 272))(&v27, a1, &v26, &v28, a4);
    v15 = *a2;
    if (*a2 != a2[2])
    {
      v18 = a2[1];
      goto LABEL_15;
    }
    v16 = v15 + (v15 >> 1);
    if (v15 < 0x100)
      v16 = 2 * v15;
    if (v16 <= v15 + 1)
      v17 = v15 + 1;
    else
      v17 = v16;
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a2, v17);
    v18 = a2[1];
    if (v18)
    {
      v15 = *a2;
LABEL_15:
      v19 = v27;
      v27 = 0;
      *(_QWORD *)(v18 + 8 * v15) = v19;
      *a2 = v15 + 1;
      goto LABEL_16;
    }
    if (v27)
    {
      v20 = v27 + 2;
      v21 = atomic_load(v27 + 2);
      if (v21 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v27 + 248))();
      }
      else
      {
        do
          v22 = __ldaxr(v20);
        while (__stlxr(v22 - 1, v20));
      }
    }
LABEL_16:
    if (v26)
      WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref((uint64_t)v26);
    v12 = v28;
    if (v28)
      goto LABEL_19;
LABEL_20:
    ++v8;
  }
  while (v8 != v9);
  v8 = (unsigned int **)v30;
  if (v29)
  {
    v23 = 0;
    v24 = 8 * v29;
    do
    {
      v25 = (uint64_t)v8[v23 / 8];
      if (v25)
        WTF::RefCounted<TI::Favonius::DictionaryHypothesis>::deref(v25);
      v23 += 8;
    }
    while (v24 != v23);
  }
LABEL_32:
  free(v8);
}

uint64_t ___ZNK2TI8Favonius18UnigramTypingModel10Hypothesis18predict_extensionsERN3WTF6VectorINS3_6RefPtrINS0_16TypingHypothesisEEELm0EEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  return TI::Favonius::ZephyrTypingModel::Hypothesis::input_segment_is_extended_by_key(v2, *v3) ^ 1;
}

uint64_t TI::Favonius::UnigramTypingModel::Hypothesis::extending_key_could_terminate_input_segment(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int HasEntries;
  BOOL v10;

  result = a1[10];
  if (result)
  {
    if (a2 && (*(_WORD *)(a2 + 60) & 0xB81) != 0)
      return 0;
    if ((TI::Favonius::DictionaryHypothesis::allows_restart((TI::Favonius::DictionaryHypothesis *)result) & 1) != 0
      || ((*(uint64_t (**)(_QWORD *))(*a1 + 168))(a1) & 1) != 0)
    {
      return 1;
    }
    if (!a2 || (*(_WORD *)(a2 + 60) & 8) == 0)
      return 0;
    if (LXCursorIsRoot())
      return 1;
    v5 = a1[10];
    v6 = *(_QWORD *)(v5 + 56);
    if (v6)
    {
      v7 = v5 + 16;
      v8 = 8 * v6 - 8;
      do
      {
        v7 += 8;
        HasEntries = LXCursorHasEntries();
        if (HasEntries)
          v10 = 1;
        else
          v10 = v8 == 0;
        v8 -= 8;
      }
      while (!v10);
      if (HasEntries)
        return 1;
    }
    return (KB::DynamicDictionaryCursor::has_entries(*(KB::DynamicDictionaryCursor **)(v5 + 72)) & 1) != 0;
  }
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::create@<X0>(unsigned int **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = TI::Favonius::UnigramTypingModel::UnigramTypingModel(v4, a1);
  *a2 = result;
  return result;
}

uint64_t TI::Favonius::UnigramTypingModel::UnigramTypingModel(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t (**v5)();
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1EA101928;
  v3 = *a2;
  *(_QWORD *)(a1 + 24) = *a2;
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  if (!*a2)
  {
    v5 = &off_1EA101AF8;
    v9[0] = &off_1EA101AF8;
    v10 = v9;
LABEL_10:
    *(_QWORD *)(a1 + 56) = a1 + 32;
    ((void (*)(_QWORD *))v5[3])(v9);
    goto LABEL_11;
  }
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v9, *((_QWORD *)*a2 + 1) + 112);
  if (!v10)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_DWORD *)(a1 + 96) = 1065353216;
    return a1;
  }
  if (v10 == v9)
  {
    v5 = (uint64_t (**)())v9[0];
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_11:
  v6 = v10;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (v6 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_15;
  }
  if (v6)
  {
    v7 = 5;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA101AF8;
  return result;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA101AF8;
}

void std::__function::__func<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0,std::allocator<TI::Favonius::UnigramTypingModel::UnigramTypingModel(WTF::RefPtr<KB::DictionaryContainer> const&)::$_0>,KB::ByteString ()(KB::String const&)>::operator()(_WORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *TI::Favonius::UnigramTypingModel::Hypothesis::create@<X0>(unsigned int **a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  result = TI::Favonius::UnigramTypingModel::Hypothesis::Hypothesis(v6, a1, a2);
  *a3 = result;
  return result;
}

void TI::Favonius::BeamSearch::~BeamSearch(TI::Favonius::BeamSearch *this)
{
  TI::Favonius::BeamSearch::~BeamSearch(this);
  JUMPOUT(0x1DF0A2144);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void **v25;

  *(_QWORD *)this = &off_1EA101B40;
  v2 = (unsigned int *)*((_QWORD *)this + 35);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  v6 = *((_QWORD *)this + 34);
  if (v6)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v6);
  v25 = (void **)((char *)this + 248);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v25);
  v25 = (void **)((char *)this + 224);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v25);
  v25 = (void **)((char *)this + 200);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v25);
  v25 = (void **)((char *)this + 176);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v25);
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v25 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::BeamSearch *)((char *)this + 120));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::BeamSearch *)((char *)this + 112));
  v8 = (void *)*((_QWORD *)this + 8);
  if (v8)
  {
    *((_QWORD *)this + 9) = v8;
    operator delete(v8);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 48);
  v9 = (unsigned int *)*((_QWORD *)this + 5);
  if (v9)
  {
    v10 = v9 + 2;
    v11 = atomic_load(v9 + 2);
    if (v11 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
    else
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 4);
  if (v13)
  {
    v14 = v13 + 2;
    v15 = atomic_load(v13 + 2);
    if (v15 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
    else
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
    }
  }
  v17 = (unsigned int *)*((_QWORD *)this + 3);
  if (v17)
  {
    v18 = v17 + 2;
    v19 = atomic_load(v17 + 2);
    if (v19 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 16))(v17);
    }
    else
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  v21 = (unsigned int *)*((_QWORD *)this + 2);
  if (v21)
  {
    v22 = v21 + 2;
    v23 = atomic_load(v21 + 2);
    if (v23 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
    }
  }
}

uint64_t TI::Favonius::BeamSearch::touch_history(TI::Favonius::BeamSearch *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t TI::Favonius::BeamSearch::parent(TI::Favonius::BeamSearch *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t TI::Favonius::BeamSearch::hit_key(TI::Favonius::BeamSearch *this)
{
  return *((_QWORD *)this + 34);
}

void TI::Favonius::BeamSearch::input_string(TI::Favonius::BeamSearch *this@<X0>, uint64_t a2@<X8>)
{
  TI::Favonius::SearchNode *v2;

  v2 = (TI::Favonius::SearchNode *)*((_QWORD *)this + 35);
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  TI::Favonius::SearchNode::input_string_recursive(v2, (KB::String *)a2, 0);
}

void TI::Favonius::BeamSearch::alignment_for_accepted_text(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, KB::String *a4@<X3>, std::vector<unsigned int> *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  std::vector<unsigned int>::const_iterator v20;
  unsigned int v21;
  unsigned int v22;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer v25;
  char *v26;
  char *v27;
  int v28;
  unsigned int v29;
  char *v30;
  unsigned __int16 *v31;
  std::vector<unsigned int>::pointer v32;
  int v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  _QWORD v37[2];
  BOOL (*v38)(uint64_t, unsigned int);
  void *v39;
  KB::String *v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v50;
  int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  _BYTE v56[12];
  std::vector<unsigned int> __x;
  _BYTE v58[8];
  void *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 35);
  v11 = v10;
  do
  {
    v12 = v11;
    v11 = *(_QWORD *)(v11 + 32);
  }
  while (v11);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v13 = *(unsigned int **)(v10 + 128);
  if (v13)
  {
    v14 = v13 + 2;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  v16 = v13 + 2;
  (*(void (**)(unsigned int *, void **, int *))(*(_QWORD *)v13 + 88))(v13, &v52, &v51);
  v17 = atomic_load(v13 + 2);
  if (v17 == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
  }
  KB::String::String((KB::String *)v58, a4);
  memset(&v50, 0, sizeof(v50));
  v19 = *((unsigned __int16 *)a4 + 2);
  if (!*((_WORD *)a4 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a4);
    v19 = *((unsigned __int16 *)a4 + 2);
  }
  LODWORD(__x.__begin_) = -1;
  v20.__i_ = 0;
  std::vector<unsigned int>::insert(&v50, v20, v19, (std::vector<unsigned int>::const_reference)&__x);
  (*(void (**)(_QWORD, _BYTE *, std::vector<unsigned int> *, _QWORD))(**(_QWORD **)(*((_QWORD *)this + 35)
                                                                                             + 56)
                                                                               + 200))(*(_QWORD *)(*((_QWORD *)this + 35) + 56), v58, &v50, *(_QWORD *)(v12 + 56));
  memset(&__p, 0, sizeof(__p));
  __x.__begin_ = (std::vector<unsigned int>::pointer)&off_1EA103EF8;
  __x.__end_ = (std::vector<unsigned int>::pointer)1;
  if ((KB::InputSegmentFilter::string_preserves_surface_form_features((KB::InputSegmentFilter *)&__x, a2, (const KB::String *)v58, 0, &__p) & 1) == 0)
  {
    a5->__begin_ = 0;
    a5->__end_ = 0;
    a5->__end_cap_.__value_ = 0;
    goto LABEL_47;
  }
  if (*(_WORD *)a4)
  {
    v21 = *((unsigned __int16 *)a3 + 2);
    if (!*((_WORD *)a3 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a3);
      v21 = *((unsigned __int16 *)a3 + 2);
    }
    v22 = *((unsigned __int16 *)a4 + 2);
    if (!*((_WORD *)a4 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a4);
      v22 = *((unsigned __int16 *)a4 + 2);
    }
    if (v21 <= v22)
    {
      v26 = (char *)*((_QWORD *)a4 + 1);
      if (v26)
        v27 = (char *)*((_QWORD *)a4 + 1);
      else
        v27 = (char *)a4 + 16;
      *(_QWORD *)&v45 = v27;
      v28 = *(unsigned __int16 *)a4;
      DWORD2(v45) = 0;
      HIDWORD(v45) = v28;
      LODWORD(v46) = 0;
      KB::String::iterator::initialize((uint64_t *)&v45);
      v29 = *((unsigned __int16 *)a3 + 2);
      if (!*((_WORD *)a3 + 2))
      {
        KB::String::compute_length((unsigned __int16 *)a3);
        v29 = *((unsigned __int16 *)a3 + 2);
        v28 = *(unsigned __int16 *)a4;
        v26 = (char *)*((_QWORD *)a4 + 1);
      }
      v47 = v45;
      v48 = v46;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v47, v29);
      if (v26)
        v30 = v26;
      else
        v30 = (char *)a4 + 16;
      v41 = v30;
      v42 = v28;
      v43 = v28;
      v44 = 0;
      KB::String::iterator::initialize((uint64_t *)&v41);
      KB::String::String((KB::String *)&v55, (const KB::String::iterator *)&v47, (const KB::String::iterator *)&v41);
      v31 = (unsigned __int16 *)KB::String::String((KB::String *)&__x, a2);
      KB::String::append(v31, (const KB::String *)&v55);
      KB::String::operator=((uint64_t)a4, (KB::String *)&__x);
      if (__x.__end_ && BYTE6(__x.__begin_) == 1)
        free(__x.__end_);
      v32 = *(std::vector<unsigned int>::pointer *)v56;
      if (!*(_QWORD *)v56)
        goto LABEL_45;
      v33 = BYTE6(v55);
    }
    else
    {
      begin = __p.__begin_;
      end = __p.__end_;
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 0x40000000;
      v38 = ___ZNK2TI8Favonius10BeamSearch27alignment_for_accepted_textERKN2KB6StringES5_RS3__block_invoke;
      v39 = &__block_descriptor_tmp_26;
      v40 = a4;
      if (__p.__begin_ == __p.__end_)
      {
        v25 = __p.__begin_;
      }
      else
      {
        while ((((uint64_t (*)(_QWORD *, _QWORD))v38)(v37, *begin) & 1) == 0)
        {
          if (++begin == end)
          {
            begin = end;
            break;
          }
        }
        v25 = begin;
        begin = __p.__begin_;
      }
      v34 = (char *)v25 - (char *)begin;
      if (*((_QWORD *)a2 + 1))
        v35 = (char *)*((_QWORD *)a2 + 1);
      else
        v35 = (char *)a2 + 16;
      v55 = v35;
      v36 = *(unsigned __int16 *)a2;
      *(_DWORD *)v56 = 0;
      *(_QWORD *)&v56[4] = v36;
      KB::String::iterator::initialize((uint64_t *)&v55);
      *(_QWORD *)&v45 = v35;
      DWORD2(v45) = 0;
      HIDWORD(v45) = v36;
      LODWORD(v46) = 0;
      KB::String::iterator::initialize((uint64_t *)&v45);
      v47 = v45;
      v48 = v46;
      std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v47, (int)(v34 >> 2));
      KB::String::String((KB::String *)&__x, (const KB::String::iterator *)&v55, (const KB::String::iterator *)&v47);
      KB::String::operator=((uint64_t)a4, (KB::String *)&__x);
      v32 = __x.__end_;
      if (!__x.__end_)
        goto LABEL_45;
      v33 = BYTE6(__x.__begin_);
    }
    if (v33 == 1)
      free(v32);
  }
LABEL_45:
  KB::Alignment::operator*(&__p, (uint64_t *)&v50, &__x);
  KB::Alignment::operator*(&__x, (uint64_t *)&v52, a5);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
LABEL_47:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v50.__begin_)
  {
    v50.__end_ = v50.__begin_;
    operator delete(v50.__begin_);
  }
  if (v59 && v58[6] == 1)
    free(v59);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

uint64_t TI::Favonius::BeamSearch::input_geometry_hypothesis@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 280) + 128);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

uint64_t TI::Favonius::BeamSearch::most_likely_geometry_hypothesis@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(**(_QWORD **)(this + 200) + 128);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void TI::Favonius::BeamSearch::extend(unsigned int *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  void *__p[2];
  _OWORD v36[2];
  void **v37;

  v9 = *a2;
  *a2 = 0;
  v10 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 56))(v9) + 56);
  v11 = *(unsigned int *)(v10 + 200);
  v12 = (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3) >> 1;
  v13 = 0.24;
  if (a4)
    v13 = 0.12;
  if (v12 < v11 || v11 > 0xB)
    v15 = v13;
  else
    v15 = 0.02;
  memset(v36, 0, sizeof(v36));
  *(_OWORD *)__p = 0u;
  v34 = v9;
  v16 = v9 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  TI::Favonius::BeamSearch::initialize_search_for_extensions(a1, (TI::Favonius::SearchNodeSourceQueue *)__p, &v34, v15);
  if (v34)
  {
    v18 = v34 + 2;
    v19 = atomic_load(v34 + 2);
    if (v19 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v34 + 8))();
    }
    else
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  v21 = operator new();
  v33 = a1;
  if (a1)
  {
    v22 = a1 + 2;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = *a3;
  *a3 = 0;
  v31 = v24;
  v32 = v9;
  *a5 = TI::Favonius::BeamSearch::BeamSearch(v21, &v33, (uint64_t *)&v32, (uint64_t)__p, &v31, v15);
  if (v31)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v31);
  if (v32)
  {
    v25 = v32 + 2;
    v26 = atomic_load(v32 + 2);
    if (v26 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v32 + 8))();
    }
    else
    {
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
    }
  }
  if (v33)
  {
    v28 = v33 + 2;
    v29 = atomic_load(v33 + 2);
    if (v29 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v33 + 8))();
    }
    else
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
    }
  }
  v37 = (void **)v36 + 1;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v37);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void TI::Favonius::BeamSearch::extend_with_backspace(unsigned int *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  char *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  void **v26;
  void **v27;
  uint64_t *v28;
  unsigned int **v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  __int128 v46;
  int64x2_t v47;
  void **v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *i;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void **v81;
  void **v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  unsigned int *v101;
  uint64_t *v102;
  unsigned int *v103;
  unsigned int *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v110;
  unsigned int *v111;
  int64x2_t v112;
  _QWORD v113[2];
  void **v114;
  int64x2_t v115;
  void **v116;
  char **v117;

  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = 0;
  v112 = 0uLL;
  v113[0] = 0;
  v9 = *(void ***)a4;
  v10 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v10 >= 1)
  {
    v117 = (char **)v113;
    v11 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v10 >> 4);
    v114 = v11;
    v115.i64[0] = (uint64_t)v11;
    v115.i64[1] = (uint64_t)v11;
    v116 = &v11[2 * v12];
    v13 = (void **)((char *)v11 + v10);
    do
    {
      v14 = (char *)*v9;
      *v11 = *v9;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      v17 = (unsigned int *)v9[1];
      v11[1] = v17;
      if (v17)
      {
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      v11 += 2;
      v9 += 2;
    }
    while (v11 != v13);
    v115.i64[1] = (uint64_t)v13;
    v19 = v115.i64[0];
    v20 = (_QWORD *)v112.i64[0];
    if (v112.i64[0])
    {
      v21 = 0;
      do
      {
        v22 = *((_OWORD *)v21 - 1);
        v21 -= 2;
        *(_OWORD *)(v19 - 16) = v22;
        v19 -= 16;
        *v21 = 0;
        v21[1] = 0;
      }
      while (v21 != v20);
      v13 = (void **)v115.i64[1];
    }
    v115.i64[0] = v19;
    v23 = v112.i64[1];
    if (v112.i64[1])
    {
      v24 = 0;
      do
      {
        v25 = *v24;
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24++ + 1) = 0;
        *(_OWORD *)v13 = v25;
        v13 += 2;
      }
      while (v24 != (__int128 *)v23);
      v19 = v115.i64[0];
      v23 = v112.i64[1];
    }
    v26 = (void **)v112.i64[0];
    v27 = (void **)v113[0];
    v112.i64[0] = v19;
    v112.i64[1] = (uint64_t)v13;
    v113[0] = v116;
    v115.i64[1] = v23;
    v116 = v27;
    v114 = v26;
    v115.i64[0] = (uint64_t)v26;
    std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v114);
  }
  v28 = (uint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 64))(v8);
  v30 = *v28;
  v29 = (unsigned int **)v28[1];
  if (*v28)
  {
    v31 = 8 * v30;
    v32 = &v29[v30];
    while ((*(_WORD *)(*((_QWORD *)*v29 + 1) + 60) & 0x80) == 0)
    {
      ++v29;
      v31 -= 8;
      if (!v31)
      {
        v29 = v32;
        break;
      }
    }
  }
  v33 = *v29;
  v111 = v33;
  if (v33)
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v35 = v112.i64[1];
  if (v112.i64[1] >= v113[0])
  {
    v37 = (v112.i64[1] - v112.i64[0]) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
LABEL_102:
      abort();
    v39 = v113[0] - v112.i64[0];
    if ((v113[0] - v112.i64[0]) >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v117 = (char **)v113;
    v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v40);
    v43 = &v41[16 * v37];
    v36 = (uint64_t)(v43 + 16);
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    v44 = (_QWORD *)v112.i64[1];
    v45 = (_QWORD *)v112.i64[0];
    if (v112.i64[1] == v112.i64[0])
    {
      v47 = vdupq_n_s64(v112.u64[1]);
    }
    else
    {
      do
      {
        v46 = *((_OWORD *)v44 - 1);
        v44 -= 2;
        *v44 = 0;
        v44[1] = 0;
        *((_OWORD *)v43 - 1) = v46;
        v43 -= 16;
      }
      while (v44 != v45);
      v47 = v112;
    }
    v112.i64[0] = (uint64_t)v43;
    v112.i64[1] = v36;
    v115 = v47;
    v48 = (void **)v113[0];
    v113[0] = &v41[16 * v42];
    v116 = v48;
    v114 = (void **)v47.i64[0];
    std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v114);
  }
  else
  {
    v36 = v112.i64[1] + 16;
    *(_QWORD *)v112.i64[1] = 0;
    *(_QWORD *)(v35 + 8) = 0;
  }
  v112.i64[1] = v36;
  v49 = v8 + 2;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 + 1, v49));
  v51 = *(unsigned int **)(v36 - 16);
  *(_QWORD *)(v36 - 16) = v8;
  if (v51)
  {
    v52 = v51 + 2;
    v53 = atomic_load(v51 + 2);
    if (v53 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
    else
    {
      do
        v54 = __ldaxr(v52);
      while (__stlxr(v54 - 1, v52));
    }
  }
  v100 = a1;
  if (v111)
  {
    do
      v55 = __ldaxr(v111);
    while (__stlxr(v55 + 1, v111));
  }
  v101 = v8;
  v102 = a5;
  v56 = *(_QWORD *)(v112.i64[1] - 8);
  *(_QWORD *)(v112.i64[1] - 8) = v111;
  if (v56)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v56);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  for (i = *(uint64_t **)(v7 + 200); i != *(uint64_t **)(v7 + 208); ++i)
  {
    v58 = *i;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    TI::Favonius::SearchNode::create_key_sequence_extensions(v58, &v105, (unsigned int ***)&v112, 0.12);
    v60 = v105;
    v59 = v106;
    if ((char *)v106 - (char *)v105 >= 1)
    {
      v61 = v106 - v105;
      v62 = v109;
      if (v61 <= (v110 - (char *)v109) >> 3)
      {
        if (v61 <= 0)
        {
          v70 = &v105[v61];
          std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range((unsigned int *)&v108, v109, (unint64_t)v109, (char *)&v109[v61]);
          while (v60 != v70)
          {
            v83 = *v60;
            *v60 = 0;
            v84 = (unsigned int *)*v62;
            *v62 = v83;
            if (v84)
            {
              v85 = v84 + 2;
              v86 = atomic_load(v84 + 2);
              if (v86 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
              }
              else
              {
                do
                  v87 = __ldaxr(v85);
                while (__stlxr(v87 - 1, v85));
              }
            }
            ++v60;
            ++v62;
          }
        }
        else
        {
          if (v105 == v106)
          {
            v68 = v109;
          }
          else
          {
            v67 = v105;
            v68 = v109;
            do
            {
              v69 = *v67;
              *v67++ = 0;
              *v68++ = v69;
            }
            while (v67 != v59);
          }
          v109 = v68;
        }
      }
      else
      {
        v63 = v109 - v108;
        if ((unint64_t)(v63 + v61) >> 61)
          goto LABEL_102;
        v64 = (v110 - (char *)v108) >> 2;
        if (v64 <= v63 + v61)
          v64 = v63 + v61;
        if ((unint64_t)(v110 - (char *)v108) >= 0x7FFFFFFFFFFFFFF8)
          v65 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        v117 = &v110;
        if (v65)
          v65 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v65);
        else
          v66 = 0;
        v71 = (uint64_t *)(v65 + 8 * v63);
        v116 = (void **)(v65 + 8 * v66);
        v72 = 8 * v61;
        v73 = v71;
        v74 = &v71[v61];
        do
        {
          v75 = *v60;
          *v60++ = 0;
          *v73++ = v75;
          v72 -= 8;
        }
        while (v72);
        v115.i64[1] = (uint64_t)&v71[v61];
        v76 = v108;
        if (v108 != v62)
        {
          v77 = v62;
          do
          {
            v78 = *--v77;
            *v77 = 0;
            *--v71 = v78;
          }
          while (v77 != v76);
        }
        v115.i64[0] = (uint64_t)v71;
        v79 = v109;
        if (v109 != v62)
        {
          do
          {
            v80 = *v62;
            *v62++ = 0;
            *v74++ = v80;
          }
          while (v62 != v79);
          v71 = (uint64_t *)v115.i64[0];
          v62 = v109;
        }
        v81 = (void **)v108;
        v82 = (void **)v110;
        v108 = v71;
        v109 = v74;
        v110 = (char *)v116;
        v115.i64[1] = (uint64_t)v62;
        v116 = v82;
        v114 = v81;
        v115.i64[0] = (uint64_t)v81;
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v114);
      }
    }
    v114 = (void **)&v105;
    std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v114);
  }
  v88 = operator new();
  v104 = v100;
  if (v100)
  {
    v89 = v100 + 2;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 + 1, v89));
  }
  v103 = v101;
  *v102 = TI::Favonius::BeamSearch::BeamSearch(v88, &v104, (uint64_t *)&v103, &v108, &v111, 0.12);
  if (v103)
  {
    v91 = v103 + 2;
    v92 = atomic_load(v103 + 2);
    if (v92 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v103 + 8))();
    }
    else
    {
      do
        v93 = __ldaxr(v91);
      while (__stlxr(v93 - 1, v91));
    }
  }
  if (v104)
  {
    v94 = v104 + 2;
    v95 = atomic_load(v104 + 2);
    if (v95 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v104 + 8))();
    }
    else
    {
      do
        v96 = __ldaxr(v94);
      while (__stlxr(v96 - 1, v94));
    }
  }
  v114 = (void **)&v108;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v114);
  if (v111)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v111);
  v114 = (void **)&v112;
  std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100](&v114);
  v97 = (unsigned int *)(v7 + 8);
  v98 = atomic_load((unsigned int *)(v7 + 8));
  if (v98 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    do
      v99 = __ldaxr(v97);
    while (__stlxr(v99 - 1, v97));
  }
}

void TI::Favonius::BeamSearch::update(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  void *__p[2];
  _OWORD v37[2];
  void **v38;

  v9 = *a2;
  *a2 = 0;
  v10 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 56))(v9) + 56);
  v11 = *(unsigned int *)(v10 + 200);
  v12 = (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8)) >> 3) >> 1;
  v13 = 0.24;
  if (a4)
    v13 = 0.12;
  if (v12 < v11 || v11 > 0xB)
    v15 = v13;
  else
    v15 = 0.02;
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)__p = 0u;
  v35 = v9;
  v16 = v9 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  TI::Favonius::SearchNodeSourceQueue::clone_search_substituting_touch((char **)__p, (unsigned int ***)(a1 + 152), (unsigned int ***)(a1 + 200), (unsigned int ***)(a1 + 248), &v35);
  if (v35)
  {
    v18 = v35 + 2;
    v19 = atomic_load(v35 + 2);
    if (v19 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v35 + 8))();
    }
    else
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  v21 = operator new();
  v22 = *(unsigned int **)(a1 + 16);
  v34 = v22;
  if (v22)
  {
    v23 = v22 + 2;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  v25 = *a3;
  *a3 = 0;
  v32 = v25;
  v33 = v9;
  *a5 = TI::Favonius::BeamSearch::BeamSearch(v21, &v34, (uint64_t *)&v33, (uint64_t)__p, &v32, v15);
  if (v32)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v32);
  if (v33)
  {
    v26 = v33 + 2;
    v27 = atomic_load(v33 + 2);
    if (v27 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v33 + 8))();
    }
    else
    {
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
    }
  }
  if (v34)
  {
    v29 = v34 + 2;
    v30 = atomic_load(v34 + 2);
    if (v30 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v34 + 8))();
    }
    else
    {
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
    }
  }
  v38 = (void **)v37 + 1;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v38);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

unsigned int *TI::Favonius::BeamSearch::finalize@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      for (i = *(uint64_t **)(v9 + 200); i != *(uint64_t **)(v9 + 208); ++i)
      {
        v11 = *i;
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v11 + 176);
        WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v11 + 200);
      }
    }
  }
  v12 = operator new();
  v13 = *a2;
  *a2 = 0;
  v14 = *a3;
  *a3 = 0;
  v19 = v14;
  v20 = v13;
  *a4 = TI::Favonius::BeamSearch::BeamSearch(v12, a1, (uint64_t *)&v20, &v19);
  if (v19)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v19);
  result = v20;
  if (v20)
  {
    v16 = v20 + 2;
    v17 = atomic_load(v20 + 2);
    if (v17 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8))();
    }
    else
    {
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
    }
  }
  return result;
}

unsigned int *TI::Favonius::BeamSearch::accept_text@<X0>(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;

  result = (unsigned int *)TI::Favonius::BeamSearch::search_node_for_accepted_text(this, a2, a3, &v18);
  v7 = (unsigned int *)v18;
  if (v18)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v17 = (unsigned int *)v18;
      v8 = (unsigned int *)(v18 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      TI::Favonius::BeamSearch::clone_with_input_node((unsigned int *)this, &v17, &v18);
      result = v17;
      v10 = v18;
      v18 = 0;
      if (v17)
      {
        v11 = v17 + 2;
        v12 = atomic_load(v17 + 2);
        if (v12 == 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8))();
        }
        else
        {
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 - 1, v11));
        }
      }
    }
    else
    {
      v10 = 0;
    }
    *a4 = v10;
    v14 = v7 + 2;
    v15 = atomic_load(v7 + 2);
    if (v15 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

void TI::Favonius::BeamSearch::drop_touches(_QWORD *a1@<X0>, uint64_t a2@<X1>, KB::LanguageModelContext *a3@<X2>, uint64_t a4@<X3>, unsigned int **a5@<X4>, unsigned int **a6@<X5>, unsigned int **a7@<X8>)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  void *v35[2];
  void *__p[2];
  int v37;

  *(_OWORD *)v35 = 0u;
  *(_OWORD *)__p = 0u;
  v37 = 1065353216;
  v34 = 0;
  v11 = *(unint64_t **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (unint64_t)&v11[v12 >> 6];
  v14 = v12 & 0x3F;
  if (v12 < 0x40)
  {
LABEL_4:
    if (v12)
    {
      v15 = __clz(__rbit64(*v11 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12)));
      if ((*v11 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v12)) != 0)
        LODWORD(v12) = v15;
    }
  }
  else
  {
    while (!*v11)
    {
      ++v11;
      v12 -= 64;
      if (v12 <= 0x3F)
        goto LABEL_4;
    }
    LODWORD(v12) = __clz(__rbit64(*v11));
  }
  v16 = v12;
  v17 = *a5;
  *a5 = 0;
  v18 = *a6;
  *a6 = 0;
  v32 = v18;
  v33 = v17;
  TI::Favonius::BeamSearch::drop_touches(a1, (uint64_t)v11, v16, v13, v14, a3, a4, &v33, a7, &v32, (uint64_t)v35, &v34);
  if (v32)
  {
    v19 = v32 + 2;
    v20 = atomic_load(v32 + 2);
    if (v20 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v32 + 8))();
    }
    else
    {
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
    }
  }
  if (v33)
  {
    v22 = v33 + 2;
    v23 = atomic_load(v33 + 2);
    if (v23 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    }
    else
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
    }
  }
  v25 = __p[0];
  if (__p[0])
  {
    do
    {
      v26 = v25;
      v25 = (_QWORD *)*v25;
      v27 = (unsigned int *)v26[3];
      if (v27)
      {
        v28 = v27 + 2;
        v29 = atomic_load(v27 + 2);
        if (v29 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
        }
        else
        {
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
        }
      }
      operator delete(v26);
    }
    while (v25);
  }
  v31 = v35[0];
  v35[0] = 0;
  if (v31)
    operator delete(v31);
}

void TI::Favonius::BeamSearch::generate_candidates(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, float a6@<S0>)
{
  NSObject *log;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  float v15;
  TI::Favonius::SearchNode **v16;
  TI::Favonius::SearchNode *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  double v28;
  double v29;
  unsigned int *v30;
  double v31;
  KB *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  char v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  NSObject *v65;
  os_signpost_id_t v66;
  os_signpost_id_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  void *ptr;
  unsigned int *v72;
  _QWORD v73[2];
  BOOL (*v74)(uint64_t, unint64_t);
  void *v75;
  void ***v76;
  void ***v77;
  void ***v78;
  void ****v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[5];
  int v83;
  float v84;
  BOOL v85;
  uint8_t v86[8];
  void **v87;
  void ***v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint8_t buf[8];
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 __p;
  _BYTE v97[32];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  log = kac_get_log();
  ptr = (void *)(a1 ^ 0x16);
  v13 = os_signpost_id_make_with_pointer(log, (const void *)(a1 ^ 0x16));
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = v13;
    if (os_signpost_enabled(log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1DA6F2000, log, OS_SIGNPOST_INTERVAL_BEGIN, v14, "kbdManager.beamSearchCandidateGeneration", "", buf, 2u);
    }
  }
  if (((a4 - 1) & 0xFFFFFFFD) != 0)
    v15 = 0.0;
  else
    v15 = 1.0;
  if (a3)
  {
    v16 = *(TI::Favonius::SearchNode ***)(a1 + 200);
    if (v16 != *(TI::Favonius::SearchNode ***)(a1 + 208))
    {
      v17 = *v16;
      *(_DWORD *)buf = 0x100000;
      *(_WORD *)&buf[4] = 0;
      buf[6] = 0;
      v93 = 0;
      LOBYTE(v94) = 0;
      TI::Favonius::SearchNode::input_string_recursive(v17, (KB::String *)buf, 0);
      KB::String::operator=(a3, (KB::String *)buf);
      if (v93)
      {
        if (buf[6] == 1)
          free(v93);
      }
    }
  }
  TI::Favonius::BeamSearch::filtered_beam_for_candidate_generation(a1, (uint64_t **)(a1 + 200), a4, &v87);
  v18 = MEMORY[0x1E0C809B0];
  v82[0] = MEMORY[0x1E0C809B0];
  v82[1] = 0x40000000;
  v82[2] = ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke;
  v82[3] = &__block_descriptor_tmp_13_11139;
  v82[4] = a1;
  v85 = a4 != 4;
  v83 = a4;
  v84 = v15;
  *(_QWORD *)buf = v82;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  __p = 0u;
  memset(v97, 0, sizeof(v97));
  v19 = (uint64_t *)v87;
  v20 = (uint64_t *)v88;
  while (v19 != v20)
    TI::Favonius::SearchNodeResultQueue::visit((unsigned int *)buf, v19++);
  v78 = &v87;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v78);
  *(_DWORD *)(a5 + 100) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  v21 = *(_QWORD *)(a1 + 200);
  v22 = *(_QWORD *)(a1 + 208);
  if (v21 == v22)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v21 + 56))
        v24 = (*(_DWORD *)(*(_QWORD *)v21 + 140) & 0x7FFFFFFFu) < 0x7F800000;
      else
        v24 = 0;
      v23 += v24;
      v21 += 8;
    }
    while (v21 != v22);
  }
  if (v23 >= a2)
    v25 = a2;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >= 0x4189374BC6A7F0)
      abort();
    v91 = a5 + 16;
    v87 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v25);
    v88 = (void ***)v87;
    v89 = (uint64_t)v87;
    v90 = &v87[125 * v26];
    std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a5, &v87);
    std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v87);
  }
  v27 = std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__clear[abi:nn180100]((unsigned int *)(a1 + 224));
  v87 = 0;
  v88 = &v87;
  v89 = 0x2000000000;
  v90 = 0;
  v78 = 0;
  v79 = &v78;
  v80 = 0x2000000000;
  v81 = 0;
  v73[0] = v18;
  v73[1] = 0x40000000;
  v74 = ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_3;
  v75 = &unk_1EA101CB0;
  v76 = (void ***)&v78;
  v77 = &v87;
  v28 = KB::system_uptime((KB *)v27);
  v29 = *(double *)(*(_QWORD *)(a1 + 24) + 40);
  TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v86);
  v30 = *(unsigned int **)v86;
  v72 = *(unsigned int **)v86;
  if (*(_QWORD *)v86)
  {
    v31 = v28 + v29;
    do
    {
      if ((((uint64_t (*)(_QWORD *, unint64_t))v74)(v73, a2) & 1) == 0)
      {
        v32 = (KB *)((uint64_t (*)(_QWORD *, unint64_t))v74)(v73, 2 * a2);
        if (!(_DWORD)v32 || KB::system_uptime(v32) >= v31)
          break;
      }
      if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v30 + 7) + 16))(*((_QWORD *)v30 + 7))
                     + 60) & 0x20) != 0)
      {
        TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v86);
        v53 = *(_QWORD *)v86;
        *(_QWORD *)v86 = 0;
        v72 = (unsigned int *)v53;
        v54 = v30 + 2;
        v55 = atomic_load(v30 + 2);
        if (v55 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
        else
        {
          do
            v56 = __ldaxr(v54);
          while (__stlxr(v56 - 1, v54));
        }
        v49 = *(unsigned int **)v86;
        if (!*(_QWORD *)v86)
          goto LABEL_61;
        v57 = (unsigned int *)(*(_QWORD *)v86 + 8);
        v58 = atomic_load((unsigned int *)(*(_QWORD *)v86 + 8));
        if (v58 != 1)
        {
          do
            v59 = __ldaxr(v57);
          while (__stlxr(v59 - 1, v57));
          goto LABEL_61;
        }
      }
      else
      {
        v33 = TI::Favonius::SearchNode::unshift_mask((TI::Favonius::SearchNode *)v30, *(const TI::Favonius::SearchNode ****)(a1 + 280));
        v34 = (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) / 1000;
        TI::Favonius::SearchNode::candidates((uint64_t)v30, *(_QWORD *)(a1 + 32), a1 + 48, (_QWORD *)a5, a6);
        v35 = *(_QWORD *)a5;
        v36 = 0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
        if (v34 < v36 && !*((_QWORD *)v30 + 2))
        {
          std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100]((_QWORD *)(a1 + 224), (uint64_t *)&v72);
          v35 = *(_QWORD *)a5;
          v36 = 0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3);
        }
        v37 = v36 > v34;
        v38 = v36 - v34;
        if (v37)
        {
          v39 = 0;
          v40 = (*((_QWORD *)v30 + 2) == 0) << 19;
          v41 = v35 + 1000 * v34;
          do
          {
            *(_DWORD *)(v41 + 780) = v33;
            v42 = *(_QWORD *)v41;
            v43 = *(_QWORD *)(v41 + 8) + 240 * *(_QWORD *)v41;
            v44 = *(_DWORD *)(v43 - 136);
            *(_DWORD *)(v43 - 136) = v44 & 0xFFF7FFFF | v40;
            if (v42)
              v39 |= (v44 & 0x800000) == 0;
            v41 += 1000;
            --v38;
          }
          while (v38);
          if ((v39 & 1) != 0)
            v79[3] = (void ***)((char *)v79[3] + 1);
        }
        TI::Favonius::SearchNodeResultQueue::next_word_node((unsigned int **)buf, (unsigned int **)v86);
        v45 = *(_QWORD *)v86;
        *(_QWORD *)v86 = 0;
        v72 = (unsigned int *)v45;
        if (!v30)
          goto LABEL_61;
        v46 = v30 + 2;
        v47 = atomic_load(v30 + 2);
        if (v47 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
        }
        else
        {
          do
            v48 = __ldaxr(v46);
          while (__stlxr(v48 - 1, v46));
        }
        v49 = *(unsigned int **)v86;
        if (!*(_QWORD *)v86)
          goto LABEL_61;
        v50 = (unsigned int *)(*(_QWORD *)v86 + 8);
        v51 = atomic_load((unsigned int *)(*(_QWORD *)v86 + 8));
        if (v51 != 1)
        {
          do
            v52 = __ldaxr(v50);
          while (__stlxr(v52 - 1, v50));
          goto LABEL_61;
        }
      }
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
LABEL_61:
      v88[3] = (void **)((char *)v88[3] + 1);
      v30 = v72;
    }
    while (v72);
  }
  v60 = *(uint64_t **)a5;
  v61 = *(uint64_t **)(a5 + 8);
  v62 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v61 - *(_QWORD *)a5) >> 3));
  v63 = v61 == *(uint64_t **)a5;
  *(_QWORD *)v86 = &__block_literal_global_19;
  if (v63)
    v64 = 0;
  else
    v64 = v62;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v60, v61, (uint64_t)v86, v64, 1);
  kdebug_trace();
  v65 = kac_get_log();
  v66 = os_signpost_id_make_with_pointer(v65, ptr);
  if (v66 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v67 = v66;
    if (os_signpost_enabled(v65))
    {
      *(_WORD *)v86 = 0;
      _os_signpost_emit_with_name_impl(&dword_1DA6F2000, v65, OS_SIGNPOST_INTERVAL_END, v67, "kbdManager.beamSearchCandidateGeneration", "", v86, 2u);
    }
  }
  if (v30)
  {
    v68 = v30 + 2;
    v69 = atomic_load(v30 + 2);
    if (v69 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
    else
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 - 1, v68));
    }
  }
  _Block_object_dispose(&v78, 8);
  _Block_object_dispose(&v87, 8);
  v87 = (void **)&v97[8];
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v87);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v87 = &v93;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v87);
}

void TI::Favonius::BeamSearch::generate_completion_stems(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W3>, char a4@<W4>, KB::Candidate *a5@<X8>, float a6@<S0>)
{
  TI::Favonius::SearchNode **v11;
  TI::Favonius::SearchNode *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const KB::Candidate *v19;
  const KB::Candidate *v20;
  KB::Candidate *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  KB::Candidate *v26;
  KB::Candidate *v27;
  KB::Candidate *v28;
  int64x2_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  KB::Candidate *v33[2];
  _OWORD v34[2];
  _OWORD v35[3];
  int v36;
  void **v37;
  int64x2_t v38;
  unint64_t v39;
  _OWORD *v40;
  void *v41[2];
  _OWORD v42[2];
  _OWORD v43[3];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  *(_OWORD *)v33 = 0u;
  memset(v34, 0, sizeof(v34));
  memset(v35, 0, sizeof(v35));
  if (a2)
  {
    v11 = *(TI::Favonius::SearchNode ***)(a1 + 200);
    if (v11 != *(TI::Favonius::SearchNode ***)(a1 + 208))
    {
      v13 = *v11;
      LODWORD(v41[0]) = 0x100000;
      WORD2(v41[0]) = 0;
      BYTE6(v41[0]) = 0;
      v41[1] = 0;
      LOBYTE(v42[0]) = 0;
      TI::Favonius::SearchNode::input_string_recursive(v13, (KB::String *)v41, 0);
      KB::String::operator=(a2, (KB::String *)v41);
      if (v41[1])
      {
        if (BYTE6(v41[0]) == 1)
          free(v41[1]);
      }
    }
  }
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__clear[abi:nn180100]((unsigned int *)(a1 + 224));
  if (a3 == 4)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v44 = 0;
    *(_OWORD *)v41 = 0u;
    memset(v42, 0, sizeof(v42));
    memset(v43, 0, sizeof(v43));
    v16 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3;
    if (v16 >= 3)
      v16 = 3;
    if (v16)
    {
      v17 = 0;
      v18 = 8 * v16;
      do
      {
        TI::Favonius::SearchNode::completion_stems(*(_QWORD *)(*(_QWORD *)(a1 + 200) + v17), *(_QWORD *)(a1 + 32), a1 + 48, v41, a4, a6);
        v17 += 8;
      }
      while (v18 != v17);
      v19 = (const KB::Candidate *)v41[0];
      v20 = (const KB::Candidate *)v41[1];
      if (v41[0] != v41[1])
      {
        v21 = v33[1];
        do
        {
          if ((unint64_t)v21 >= *(_QWORD *)&v34[0])
          {
            v22 = 0x1CAC083126E978D5 * ((v21 - v33[0]) >> 3);
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) > 0x4189374BC6A7EFLL)
              abort();
            if (0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v34[0] - (unint64_t)v33[0]) >> 3) > v23)
              v23 = 0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)&v34[0] - (unint64_t)v33[0]) >> 3);
            if ((unint64_t)(0x1CAC083126E978D5
                                  * ((uint64_t)(*(_QWORD *)&v34[0] - (unint64_t)v33[0]) >> 3)) >= 0x20C49BA5E353F7)
              v24 = 0x4189374BC6A7EFLL;
            else
              v24 = v23;
            v40 = v34;
            if (v24)
              v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v24);
            else
              v25 = 0;
            v26 = (KB::Candidate *)(v24 + 1000 * v22);
            v37 = (void **)v24;
            v38.i64[0] = (uint64_t)v26;
            v39 = v24 + 1000 * v25;
            KB::Candidate::Candidate(v26, v19);
            v21 = (KB::Candidate *)((char *)v26 + 1000);
            v38.i64[1] = (uint64_t)v21;
            v27 = v33[1];
            v28 = (KB::Candidate *)v38.i64[0];
            if (v33[1] == v33[0])
            {
              v29 = vdupq_n_s64((unint64_t)v33[1]);
            }
            else
            {
              do
              {
                v27 = (KB::Candidate *)((char *)v27 - 1000);
                v28 = (KB::Candidate *)KB::Candidate::Candidate((uint64_t)v28 - 1000, (uint64_t)v27);
              }
              while (v27 != v33[0]);
              v29 = *(int64x2_t *)v33;
              v21 = (KB::Candidate *)v38.i64[1];
            }
            v33[0] = v28;
            v33[1] = v21;
            v38 = v29;
            v30 = *(_QWORD *)&v34[0];
            *(_QWORD *)&v34[0] = v39;
            v39 = v30;
            v37 = (void **)v29.i64[0];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v37);
          }
          else
          {
            KB::Candidate::Candidate(v21, v19);
            v21 = (KB::Candidate *)((char *)v21 + 1000);
          }
          v33[1] = v21;
          v19 = (const KB::Candidate *)((char *)v19 + 1000);
        }
        while (v19 != v20);
      }
    }
    v37 = (void **)&v43[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    v37 = (void **)v43;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    v37 = (void **)v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    v37 = v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
    v15 = (uint64_t *)v33[0];
    v14 = (uint64_t *)v33[1];
  }
  v31 = 126 - 2 * __clz(0x1CAC083126E978D5 * (v14 - v15));
  v41[0] = &__block_literal_global_21_11136;
  if (v14 == v15)
    v32 = 0;
  else
    v32 = v31;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v15, v14, (uint64_t)v41, v32, 1);
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  std::vector<KB::Candidate>::__init_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>(a5, v33[0], v33[1], 0x1CAC083126E978D5 * ((v33[1] - v33[0]) >> 3));
  v41[0] = (char *)&v35[1] + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = v35;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = (char *)v34 + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
  v41[0] = v33;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
}

void TI::Favonius::BeamSearch::generate_prediction_stems(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, KB::Candidate *a4@<X8>, float a5@<S0>)
{
  TI::Favonius::SearchNode **v9;
  TI::Favonius::SearchNode *v11;
  TI::Favonius::SearchNode *v12;
  TI::Favonius::SearchNode *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const KB::Candidate *v19;
  const KB::Candidate *v20;
  unint64_t v21;
  _OWORD v22[3];
  _OWORD v23[3];
  int v24;
  _QWORD v25[6];
  float v26;
  int v27;
  __int16 v28;
  char v29;
  void *v30;
  char v31;
  int v32;
  __int16 v33;
  char v34;
  void *v35;
  char v36;
  void **v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v23, 0, sizeof(v23));
  if (a3)
  {
    v9 = (TI::Favonius::SearchNode **)a1[25];
    if (v9 != (TI::Favonius::SearchNode **)a1[26])
    {
      v11 = *v9;
      LODWORD(v37) = 0x100000;
      WORD2(v37) = 0;
      BYTE6(v37) = 0;
      v38 = 0;
      LOBYTE(v39) = 0;
      TI::Favonius::SearchNode::input_string_recursive(v11, (KB::String *)&v37, 0);
      KB::String::operator=(a3, (KB::String *)&v37);
      if (v38)
      {
        if (BYTE6(v37) == 1)
          free((void *)v38);
      }
    }
  }
  v12 = (TI::Favonius::SearchNode *)a1[35];
  v32 = 0x100000;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v12, (KB::String *)&v32, 0);
  v13 = *(TI::Favonius::SearchNode **)a1[25];
  v27 = 0x100000;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v13, (KB::String *)&v27, 0);
  if (KB::String::equal((KB::String *)&v27, (const KB::String *)&v32, 0))
    v14 = (uint64_t *)a1[25];
  else
    v14 = a1 + 35;
  v15 = *v14;
  v16 = a1[4];
  v37 = (void **)MEMORY[0x1E0C809B0];
  v38 = 3221225472;
  v39 = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke;
  v40 = &__block_descriptor_56_e9_v16__0_v8l;
  v41 = v15;
  v42 = v16;
  v43 = a1 + 6;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZNK2TI8Favonius10SearchNode16prediction_stemsEPKNS0_18CandidateGeneratorERKN2KB20LanguageModelContextERNS5_19CandidateCollectionEff_block_invoke_2;
  v25[3] = &__block_descriptor_52_e9_v16__0_v8l;
  v25[4] = v15;
  v25[5] = v16;
  v26 = a5;
  TI::Favonius::SearchNode::build_candidates(v15, v22, &v37, v25);
  v17 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)&v22[0] + 1) - *(_QWORD *)&v22[0]) >> 3));
  v37 = (void **)&__block_literal_global_23;
  if (*((_QWORD *)&v22[0] + 1) == *(_QWORD *)&v22[0])
    v18 = 0;
  else
    v18 = v17;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(*(uint64_t **)&v22[0], *((uint64_t **)&v22[0] + 1), (uint64_t)&v37, v18, 1);
  v20 = (const KB::Candidate *)*((_QWORD *)&v22[0] + 1);
  v19 = *(const KB::Candidate **)&v22[0];
  v21 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)&v22[0] + 1) - *(_QWORD *)&v22[0]) >> 3);
  if (v21 > a2)
  {
    std::vector<KB::Candidate>::erase((uint64_t)v22, (uint64_t *)(*(_QWORD *)&v22[0] + 1000 * a2), *((KB::Candidate **)&v22[0] + 1));
    v20 = (const KB::Candidate *)*((_QWORD *)&v22[0] + 1);
    v19 = *(const KB::Candidate **)&v22[0];
    v21 = 0x1CAC083126E978D5 * ((uint64_t)(*((_QWORD *)&v22[0] + 1) - *(_QWORD *)&v22[0]) >> 3);
  }
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  std::vector<KB::Candidate>::__init_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>(a4, v19, v20, v21);
  if (v30 && v29 == 1)
    free(v30);
  if (v35 && v34 == 1)
    free(v35);
  v37 = (void **)&v23[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
  v37 = (void **)v23;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
  v37 = (void **)&v22[1] + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
  v37 = (void **)v22;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v37);
}

void TI::Favonius::BeamSearch::append_debug_data(TI::Favonius::SearchNode **this, CFMutableStringRef theString)
{
  TI::Favonius::SearchNode **i;
  TI::Favonius::SearchNode *v5;

  CFStringAppendCString(theString, "", 0x8000100u);
  CFStringAppendFormat(theString, 0, CFSTR("INPUT NODE:\n"));
  TI::Favonius::SearchNode::append_debug_data(this[35], theString);
  CFStringAppendFormat(theString, 0, CFSTR("STEMS:\n"));
  for (i = (TI::Favonius::SearchNode **)this[25]; i != (TI::Favonius::SearchNode **)this[26]; ++i)
  {
    v5 = *i;
    TI::Favonius::SearchNode::append_debug_data(v5, theString);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t *v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36[127];

  v36[125] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v10 = a1;
  v34 = a1 + 250;
  v35 = a1 + 125;
  while (2)
  {
    v11 = (char *)a2 - (char *)v10;
    v12 = 0x1CAC083126E978D5 * (a2 - v10);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v10, a2 - 125);
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v10, v10 + 125, a2 - 125, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v10, v10 + 125, v10 + 250, a2 - 125, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v10, v10 + 125, v10 + 250, v10 + 375, a2 - 125, a3);
        return;
      default:
        if (v11 > 23999)
        {
          if (!a4)
          {
            if (v10 != a2)
              std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,KB::Candidate*>(v10, a2, a2, a3);
            return;
          }
          v13 = v12 >> 1;
          v14 = &v10[125 * (v12 >> 1)];
          if ((unint64_t)v11 < 0x1F401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v14, v10, a2 - 125, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v10, v14, a2 - 125, a3);
            v15 = &v10[125 * v13];
            v16 = v15 - 125;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v35, v15 - 125, a2 - 250, a3);
            v15 += 125;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v34, v15, a2 - 375, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v16, v14, v15, a3);
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v10, v14);
          }
          --a4;
          if ((a5 & 1) != 0 || ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            KB::Candidate::Candidate((uint64_t)v36, (uint64_t)v10);
            v17 = v10;
            do
            {
              v18 = v17;
              v17 += 125;
            }
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            v19 = a2;
            if (v18 == v10)
            {
              v19 = a2;
              do
              {
                if (v17 >= v19)
                  break;
                v19 -= 125;
              }
              while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
            }
            else
            {
              do
                v19 -= 125;
              while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            }
            a1 = v17;
            if (v17 < v19)
            {
              v20 = v19;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, v20);
                do
                  a1 += 125;
                while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
                do
                  v20 -= 125;
                while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
              }
              while (a1 < v20);
            }
            if (a1 - 125 != v10)
              KB::Candidate::operator=(v10, a1 - 125);
            KB::Candidate::operator=(a1 - 125, v36);
            KB::Candidate::~Candidate((KB::Candidate *)v36);
            if (v17 >= v19)
            {
              v21 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(v10, a1 - 125, a3);
              if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3))
              {
                a2 = a1 - 125;
                if ((v21 & 1) == 0)
                  continue;
                return;
              }
              if ((v21 & 1) != 0)
                goto LABEL_2;
            }
            std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,false>(v10, a1 - 125, a3, a4, a5 & 1);
            a5 = 0;
            goto LABEL_2;
          }
          KB::Candidate::Candidate((uint64_t)v36, (uint64_t)v10);
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            a1 = v10;
            do
              a1 += 125;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
          }
          else
          {
            v22 = v10 + 125;
            do
            {
              a1 = v22;
              if (v22 >= a2)
                break;
              v23 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v22 = a1 + 125;
            }
            while (!v23);
          }
          v24 = a2;
          if (a1 < a2)
          {
            v24 = a2;
            do
              v24 -= 125;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          while (a1 < v24)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, v24);
            do
              a1 += 125;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
              v24 -= 125;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          if (a1 - 125 != v10)
            KB::Candidate::operator=(v10, a1 - 125);
          KB::Candidate::operator=(a1 - 125, v36);
          KB::Candidate::~Candidate((KB::Candidate *)v36);
          a5 = 0;
          goto LABEL_2;
        }
        v25 = v10 + 125;
        v27 = v10 == a2 || v25 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v27)
          {
            v28 = 0;
            do
            {
              v29 = (uint64_t)v25;
              if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
              {
                KB::Candidate::Candidate((uint64_t)v36, v29);
                v30 = v28;
                while (1)
                {
                  KB::Candidate::operator=((uint64_t *)((char *)v10 + v30 + 1000), (uint64_t *)((char *)v10 + v30));
                  if (!v30)
                    break;
                  v30 -= 1000;
                  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                  {
                    v31 = (uint64_t *)((char *)v10 + v30 + 1000);
                    goto LABEL_72;
                  }
                }
                v31 = v10;
LABEL_72:
                KB::Candidate::operator=(v31, v36);
                KB::Candidate::~Candidate((KB::Candidate *)v36);
              }
              v25 = (uint64_t *)(v29 + 1000);
              v28 += 1000;
            }
            while ((uint64_t *)(v29 + 1000) != a2);
          }
        }
        else if (!v27)
        {
          do
          {
            v32 = (uint64_t)v25;
            if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
            {
              KB::Candidate::Candidate((uint64_t)v36, v32);
              do
              {
                v33 = v10;
                KB::Candidate::operator=(v10 + 125, v10);
                v10 -= 125;
              }
              while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
              KB::Candidate::operator=(v33, v36);
              KB::Candidate::~Candidate((KB::Candidate *)v36);
            }
            v25 = (uint64_t *)(v32 + 1000);
            v10 = (uint64_t *)v32;
          }
          while ((uint64_t *)(v32 + 1000) != a2);
        }
        return;
    }
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8;
  int v9;
  uint64_t *v10;

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v8 & 1) != 0)
  {
    if (v9)
    {
      v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
      if (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
        return;
      v10 = a2;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v10, a3);
  }
  else if (v9)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
    if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3, a5);
  if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a3, a4);
    if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
      if ((*(unsigned int (**)(void))(*(_QWORD *)a5 + 16))())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a2, a3, a4, a6);
  if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a4, a5);
    if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a3, a4);
      if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a2, a3);
        if ((*(unsigned int (**)(void))(*(_QWORD *)a6 + 16))())
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2);
      }
    }
  }
}

void std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*,KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29[125];
  uint64_t v30[127];

  v30[125] = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 1000;
    if ((char *)a2 - (char *)a1 >= 1001)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[125 * v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>((uint64_t)a1, a4, v9, v12);
        v12 -= 125;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      do
      {
        if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(v13, a1);
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>((uint64_t)a1, a4, v9, a1);
        }
        v13 += 125;
      }
      while (v13 != a3);
    }
    if (v8 >= 1001)
    {
      v14 = v8 / 0x3E8uLL;
      do
      {
        v28 = v6;
        KB::Candidate::Candidate((uint64_t)v29, (uint64_t)a1);
        v15 = 0;
        v16 = v14 - 2;
        if (v14 < 2)
          v16 = v14 - 1;
        v17 = v16 >> 1;
        v18 = a1;
        do
        {
          v19 = &v18[125 * v15 + 125];
          v20 = (2 * v15) | 1;
          v21 = 2 * v15 + 2;
          if (v21 < v14 && (*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
          {
            v19 += 125;
            v20 = v21;
          }
          KB::Candidate::operator=(v18, v19);
          v18 = v19;
          v15 = v20;
        }
        while (v20 <= v17);
        v6 = v28 - 125;
        if (v19 == v28 - 125)
        {
          KB::Candidate::operator=(v19, v29);
          v23 = v14 - 1;
        }
        else
        {
          KB::Candidate::operator=(v19, v28 - 125);
          KB::Candidate::operator=(v6, v29);
          v22 = (char *)v19 - (char *)a1 + 1000;
          v23 = v14 - 1;
          if (v22 >= 1001)
          {
            v24 = (unint64_t)(0x1CAC083126E978D5 * (v22 >> 3) - 2) >> 1;
            v25 = &a1[125 * v24];
            if ((*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
            {
              KB::Candidate::Candidate((uint64_t)v30, (uint64_t)v19);
              do
              {
                v26 = v25;
                KB::Candidate::operator=(v19, v25);
                if (!v24)
                  break;
                v24 = (v24 - 1) >> 1;
                v25 = &a1[125 * v24];
                v19 = v26;
              }
              while (((*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))() & 1) != 0);
              KB::Candidate::operator=(v26, v30);
              KB::Candidate::~Candidate((KB::Candidate *)v30);
            }
          }
        }
        KB::Candidate::~Candidate((KB::Candidate *)v29);
        v27 = v14 <= 2;
        v14 = v23;
      }
      while (!v27);
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13[126];

  v13[125] = *MEMORY[0x1E0C80C00];
  v6 = 1;
  switch(0x1CAC083126E978D5 * (a2 - a1))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<KB::Candidate *&,KB::Candidate *&>(a1, a2 - 125);
      return v6;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a2 - 125, a3);
      return v6;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a2 - 125, a3);
      return v6;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a1 + 375, a2 - 125, a3);
      return v6;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(a1, a1 + 125, a1 + 250, a3);
      v7 = (uint64_t)(a1 + 375);
      if (a1 + 375 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
  {
LABEL_14:
    v8 += 1000;
    v7 += 1000;
    if ((uint64_t *)v7 == a2)
      return 1;
  }
  KB::Candidate::Candidate((uint64_t)v13, v7);
  v10 = v8;
  while (1)
  {
    KB::Candidate::operator=((uint64_t *)((char *)a1 + v10 + 3000), (uint64_t *)((char *)a1 + v10 + 2000));
    if (v10 == -2000)
      break;
    v10 -= 1000;
    if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
    {
      v11 = (uint64_t *)((char *)a1 + v10 + 3000);
      goto LABEL_12;
    }
  }
  v11 = a1;
LABEL_12:
  KB::Candidate::operator=(v11, v13);
  if (++v9 != 8)
  {
    KB::Candidate::~Candidate((KB::Candidate *)v13);
    goto LABEL_14;
  }
  v6 = v7 + 1000 == (_QWORD)a2;
  KB::Candidate::~Candidate((KB::Candidate *)v13);
  return v6;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(KB::Candidate const&,KB::Candidate const&),KB::Candidate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[127];

  v16[125] = *MEMORY[0x1E0C80C00];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x1CAC083126E978D5 * (((uint64_t)a4 - a1) >> 3))
    {
      v10 = (0x395810624DD2F1AALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v11 = (uint64_t *)(a1 + 1000 * v10);
      v12 = 0x395810624DD2F1AALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v12 < a3 && (*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
      {
        v11 += 125;
        v10 = v12;
      }
      if (((*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))() & 1) == 0)
      {
        KB::Candidate::Candidate((uint64_t)v16, (uint64_t)v5);
        do
        {
          v13 = v11;
          KB::Candidate::operator=(v5, v11);
          if (v7 < v10)
            break;
          v14 = (2 * v10) | 1;
          v11 = (uint64_t *)(a1 + 1000 * v14);
          v15 = 2 * v10 + 2;
          if (v15 < a3)
          {
            if ((*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))())
            {
              v11 += 125;
              v14 = v15;
            }
          }
          v5 = v13;
          v10 = v14;
        }
        while (!(*(unsigned int (**)(void))(*(_QWORD *)a2 + 16))());
        KB::Candidate::operator=(v13, v16);
        KB::Candidate::~Candidate((KB::Candidate *)v16);
      }
    }
  }
}

BOOL ___ZN2TI8Favonius10BeamSearch25generate_prediction_stemsEmPN2KB6StringENS2_10LookupTypeEf_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;

  v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

BOOL ___ZN2TI8Favonius10BeamSearch25generate_completion_stemsEmPN2KB6StringENS2_10LookupTypeEfb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;

  v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

_QWORD *TI::Favonius::BeamSearch::filtered_beam_for_candidate_generation@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  int v15;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a4, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v12 = ___ZNK2TI8Favonius10BeamSearch38filtered_beam_for_candidate_generationERKNSt3__16vectorIN3WTF6RefPtrINS0_10SearchNodeEEENS2_9allocatorIS7_EEEEN2KB10LookupTypeE_block_invoke;
  v13 = &__block_descriptor_tmp_11_11145;
  v14 = a1;
  v15 = a3;
  while (v9 != v10)
  {
    result = (_QWORD *)v12((uint64_t)v11, (uint64_t)v9);
    if ((_DWORD)result)
      result = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](a4, v9);
    ++v9;
  }
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_3(uint64_t a1, unint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < 4 * a2;
}

_QWORD *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](_QWORD *result, uint64_t *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  _QWORD *v29;

  v3 = (uint64_t **)result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (uint64_t *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v11 = ((uint64_t)v6 - *result) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v5 - *result;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v29 = v4;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v14);
    else
      v15 = 0;
    v16 = (uint64_t *)(v14 + 8 * v11);
    v26 = v14;
    v27.i64[0] = (uint64_t)v16;
    v27.i64[1] = (uint64_t)v16;
    v28 = v14 + 8 * v15;
    v17 = *a2;
    *v16 = *a2;
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = v27.u64[1];
      v16 = (uint64_t *)v27.i64[0];
    }
    else
    {
      v20 = v14 + 8 * v11;
    }
    v10 = (uint64_t *)(v20 + 8);
    v27.i64[1] = v20 + 8;
    v22 = *v3;
    v21 = v3[1];
    if (v21 == *v3)
    {
      v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        v23 = *--v21;
        *v21 = 0;
        *--v16 = v23;
      }
      while (v21 != v22);
      v24 = *(int64x2_t *)v3;
      v10 = (uint64_t *)v27.i64[1];
    }
    *v3 = v16;
    v3[1] = v10;
    v27 = v24;
    v25 = (unint64_t)v3[2];
    v3[2] = (uint64_t *)v28;
    v28 = v25;
    v26 = v24.i64[0];
    result = (_QWORD *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    v7 = *a2;
    *v6 = *a2;
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    v10 = v6 + 1;
  }
  v3[1] = v10;
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch19generate_candidatesEmPN2KB6StringENS2_10LookupTypeEf_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4;

  v4 = expf(*(float *)(a2 + 744));
  return v4 > expf(*(float *)(a3 + 744));
}

uint64_t TI::Favonius::BeamSearch::should_extend_for_prediction(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a2;
  if (a3 != 1 && *(_DWORD *)(v3 + 168) > *(_DWORD *)(*(_QWORD *)(a1 + 280) + 168))
    return 0;
  v5 = *(_QWORD *)(v3 + 56);
  if (!v5)
    return 1;
  if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) + 60) & 8) == 0)
    return 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t ___ZNK2TI8Favonius10BeamSearch38filtered_beam_for_candidate_generationERKNSt3__16vectorIN3WTF6RefPtrINS0_10SearchNodeEEENS2_9allocatorIS7_EEEEN2KB10LookupTypeE_block_invoke(uint64_t a1, uint64_t a2)
{
  return TI::Favonius::BeamSearch::should_consider_for_candidate_generation(*(_QWORD *)(a1 + 32), a2, *(_DWORD *)(a1 + 40));
}

uint64_t TI::Favonius::BeamSearch::should_consider_for_candidate_generation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t should_consider_for_candidate_generation;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (!v3)
    return 1;
  v4 = *(unsigned __int16 *)(*(_QWORD *)a2 + 120);
  if ((v4 & 0x4E) != 0 || a3 == 1 && (v4 & 0x80) != 0)
    return 1;
  if ((v4 & 0x300) == 0 || v4 != *(unsigned __int16 *)(*(_QWORD *)(a1 + 280) + 120))
    return 0;
  v12 = *(unsigned int **)(*(_QWORD *)a2 + 32);
  v7 = (unsigned int *)(v3 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  should_consider_for_candidate_generation = TI::Favonius::BeamSearch::should_consider_for_candidate_generation();
  if (v12)
  {
    v9 = v12 + 2;
    v10 = atomic_load(v12 + 2);
    if (v10 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v12 + 8))();
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
  }
  return should_consider_for_candidate_generation;
}

void TI::Favonius::BeamSearch::drop_touches(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, KB::LanguageModelContext *a6@<X5>, uint64_t a7@<X6>, unsigned int **a8@<X7>, unsigned int **a9@<X8>, unsigned int **a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v15;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  _QWORD *v47;
  _QWORD *i;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  float v54;
  float v55;
  _BOOL8 v56;
  unint64_t v57;
  unint64_t v58;
  size_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t *v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int64x2_t v95;
  unint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint8x8_t v118;
  unsigned int *v119;
  unsigned int v120;
  _QWORD *v121;
  _QWORD *j;
  unint64_t v123;
  _QWORD *v124;
  unsigned int *v125;
  unsigned int v126;
  float v127;
  float v128;
  _BOOL8 v129;
  unint64_t v130;
  unint64_t v131;
  size_t v132;
  unsigned int v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  _QWORD *v146;
  unsigned int *v147;
  unsigned int **v148;
  unsigned int **v149;
  unsigned int *v150;
  unsigned int *v151;
  unsigned int *v152;
  int64x2_t v153;
  unint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int *v159;
  int64x2_t *v160;
  int64x2_t v161;
  unint64_t v162;
  unint64_t *v163;

  v15 = a3;
  v18 = *a8;
  *a8 = 0;
  v19 = *a10;
  *a10 = 0;
  if (a2 == a4 && (_DWORD)a3 == (_DWORD)a5)
  {
    v20 = a1[3];
    if (v20)
    {
      v148 = a9;
      v159 = v18;
      if (v18)
      {
        v21 = v18 + 2;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
      }
      v158 = v19;
      if (v19)
      {
        v24 = v19 + 2;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
      }
      v150 = v19;
      v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v157 = (unsigned int *)v26;
      if (v26)
      {
        v27 = (unsigned int *)(v26 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
      }
      (**(void (***)(unsigned int **__return_ptr, unint64_t, KB::LanguageModelContext *, uint64_t, unsigned int **, unsigned int **, unsigned int **))v20)((unsigned int **)&v160, v20, a6, a7, &v159, &v158, &v157);
      v29 = (unsigned int *)v160;
      v160 = 0;
      if (v157)
      {
        v30 = v157 + 2;
        v31 = atomic_load(v157 + 2);
        if (v31 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v157 + 8))();
        }
        else
        {
          do
            v32 = __ldaxr(v30);
          while (__stlxr(v32 - 1, v30));
        }
      }
      if (v158)
      {
        v33 = v158 + 2;
        v34 = atomic_load(v158 + 2);
        if (v34 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v158 + 8))();
        }
        else
        {
          do
            v35 = __ldaxr(v33);
          while (__stlxr(v35 - 1, v33));
        }
      }
      if (v159)
      {
        v36 = v159 + 2;
        v37 = atomic_load(v159 + 2);
        if (v37 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v159 + 40))();
        }
        else
        {
          do
            v38 = __ldaxr(v36);
          while (__stlxr(v38 - 1, v36));
        }
      }
      *a12 = *((_QWORD *)v29 + 35);
      if (v18 && ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18) & 1) != 0)
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1[35] + 56) + 64))(*(_QWORD *)(a1[35] + 56)))
          std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(a11, a1[35], a1[35], *a12);
        v39 = *(_QWORD *)(a11 + 24);
        if (v39 <= 2)
        {
          v40 = (unint64_t *)a1[25];
          if (v40 != (unint64_t *)a1[26])
          {
            v146 = (_QWORD *)(a11 + 16);
            while (1)
            {
              v41 = *v40;
              if (!std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(*(_QWORD *)a11, *(_QWORD *)(a11 + 8), *v40))
              {
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 56) + 64))(*(_QWORD *)(v41 + 56)))
                  break;
              }
LABEL_62:
              v39 = *(_QWORD *)(a11 + 24);
LABEL_63:
              if (v39 >= 3)
                goto LABEL_192;
              if (++v40 == (unint64_t *)a1[26])
                goto LABEL_179;
            }
            v42 = 0x9DDFEA08EB382D69 * (((8 * v41) + 8) ^ HIDWORD(v41));
            v43 = 0x9DDFEA08EB382D69 * (HIDWORD(v41) ^ (v42 >> 47) ^ v42);
            v44 = 0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47));
            v45 = *(_QWORD *)(a11 + 8);
            if (v45)
            {
              v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
              v46.i16[0] = vaddlv_u8(v46);
              if (v46.u32[0] > 1uLL)
              {
                v15 = 0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47));
                if (v44 >= v45)
                  v15 = v44 % v45;
              }
              else
              {
                v15 = v44 & (v45 - 1);
              }
              v47 = *(_QWORD **)(*(_QWORD *)a11 + 8 * v15);
              if (v47)
              {
                for (i = (_QWORD *)*v47; i; i = (_QWORD *)*i)
                {
                  v49 = i[1];
                  if (v49 == v44)
                  {
                    if (i[2] == v41)
                      goto LABEL_62;
                  }
                  else
                  {
                    if (v46.u32[0] > 1uLL)
                    {
                      if (v49 >= v45)
                        v49 %= v45;
                    }
                    else
                    {
                      v49 &= v45 - 1;
                    }
                    if (v49 != v15)
                      break;
                  }
                }
              }
            }
            v50 = operator new(0x20uLL);
            *v50 = 0;
            v50[1] = v44;
            v51 = *a12;
            v50[2] = v41;
            v50[3] = v51;
            if (v51)
            {
              v52 = (unsigned int *)(v51 + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 + 1, v52));
            }
            v54 = (float)(unint64_t)(*(_QWORD *)(a11 + 24) + 1);
            v55 = *(float *)(a11 + 32);
            if (!v45 || (float)(v55 * (float)v45) < v54)
            {
              v56 = (v45 & (v45 - 1)) != 0;
              if (v45 < 3)
                v56 = 1;
              v57 = v56 | (2 * v45);
              v58 = vcvtps_u32_f32(v54 / v55);
              if (v57 <= v58)
                v59 = v58;
              else
                v59 = v57;
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a11, v59);
              v45 = *(_QWORD *)(a11 + 8);
              if ((v45 & (v45 - 1)) != 0)
              {
                if (v44 >= v45)
                  v15 = v44 % v45;
                else
                  v15 = v44;
              }
              else
              {
                v15 = (v45 - 1) & v44;
              }
            }
            v60 = *(_QWORD *)a11;
            v61 = *(_QWORD **)(*(_QWORD *)a11 + 8 * v15);
            if (v61)
            {
              *v50 = *v61;
            }
            else
            {
              *v50 = *v146;
              *v146 = v50;
              *(_QWORD *)(v60 + 8 * v15) = v146;
              if (!*v50)
              {
LABEL_78:
                v39 = *(_QWORD *)(a11 + 24) + 1;
                *(_QWORD *)(a11 + 24) = v39;
                goto LABEL_63;
              }
              v62 = *(_QWORD *)(*v50 + 8);
              if ((v45 & (v45 - 1)) != 0)
              {
                if (v62 >= v45)
                  v62 %= v45;
              }
              else
              {
                v62 &= v45 - 1;
              }
              v61 = (_QWORD *)(*(_QWORD *)a11 + 8 * v62);
            }
            *v61 = v50;
            goto LABEL_78;
          }
LABEL_179:
          if (!v39)
            std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(a11, a1[35], a1[35], *a12);
        }
        goto LABEL_192;
      }
      v112 = a1[35];
      v113 = *((_QWORD *)v29 + 35);
      v114 = 0x9DDFEA08EB382D69 * (((8 * v112) + 8) ^ HIDWORD(v112));
      v115 = 0x9DDFEA08EB382D69 * (HIDWORD(v112) ^ (v114 >> 47) ^ v114);
      v116 = 0x9DDFEA08EB382D69 * (v115 ^ (v115 >> 47));
      v117 = *(_QWORD *)(a11 + 8);
      if (v117)
      {
        v118 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
        v118.i16[0] = vaddlv_u8(v118);
        if (v118.u32[0] > 1uLL)
        {
          v20 = 0x9DDFEA08EB382D69 * (v115 ^ (v115 >> 47));
          if (v116 >= v117)
            v20 = v116 % v117;
        }
        else
        {
          v20 = v116 & (v117 - 1);
        }
        v121 = *(_QWORD **)(*(_QWORD *)a11 + 8 * v20);
        if (v121)
        {
          for (j = (_QWORD *)*v121; j; j = (_QWORD *)*j)
          {
            v123 = j[1];
            if (v123 == v116)
            {
              if (j[2] == v112)
                goto LABEL_192;
            }
            else
            {
              if (v118.u32[0] > 1uLL)
              {
                if (v123 >= v117)
                  v123 %= v117;
              }
              else
              {
                v123 &= v117 - 1;
              }
              if (v123 != v20)
                break;
            }
          }
        }
      }
      v124 = operator new(0x20uLL);
      *v124 = 0;
      v124[1] = v116;
      v124[2] = v112;
      v124[3] = v113;
      if (v113)
      {
        v125 = (unsigned int *)(v113 + 8);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 + 1, v125));
      }
      v127 = (float)(unint64_t)(*(_QWORD *)(a11 + 24) + 1);
      v128 = *(float *)(a11 + 32);
      if (!v117 || (float)(v128 * (float)v117) < v127)
      {
        v129 = 1;
        if (v117 >= 3)
          v129 = (v117 & (v117 - 1)) != 0;
        v130 = v129 | (2 * v117);
        v131 = vcvtps_u32_f32(v127 / v128);
        if (v130 <= v131)
          v132 = v131;
        else
          v132 = v130;
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a11, v132);
        v117 = *(_QWORD *)(a11 + 8);
        if ((v117 & (v117 - 1)) != 0)
        {
          if (v116 >= v117)
            v20 = v116 % v117;
          else
            v20 = v116;
        }
        else
        {
          v20 = (v117 - 1) & v116;
        }
      }
      v134 = *(_QWORD *)a11;
      v135 = *(_QWORD **)(*(_QWORD *)a11 + 8 * v20);
      if (v135)
      {
        *v124 = *v135;
      }
      else
      {
        v136 = *(_QWORD *)(a11 + 16);
        *v124 = v136;
        *(_QWORD *)(a11 + 16) = v124;
        *(_QWORD *)(v134 + 8 * v20) = a11 + 16;
        if (!v136)
        {
LABEL_191:
          ++*(_QWORD *)(a11 + 24);
LABEL_192:
          *v148 = v29;
          goto LABEL_193;
        }
        v137 = *(_QWORD *)(v136 + 8);
        if ((v117 & (v117 - 1)) != 0)
        {
          if (v137 >= v117)
            v137 %= v117;
        }
        else
        {
          v137 &= v117 - 1;
        }
        v135 = (_QWORD *)(*(_QWORD *)a11 + 8 * v137);
      }
      *v135 = v124;
      goto LABEL_191;
    }
LABEL_144:
    *a9 = 0;
    goto LABEL_194;
  }
  if (!a1[2])
    goto LABEL_144;
  v147 = v18;
  v149 = a9;
  v63 = a5 - 1;
  if (a5 >= 0x40uLL)
    v63 = a5 - 64;
  v64 = (_QWORD *)(a4 + 8 * (v63 >> 6));
  v65 = a5 - 1;
  v156 = v18;
  if (v18)
  {
    v66 = v18 + 2;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
  }
  v155 = v19;
  if (v19)
  {
    v68 = v19 + 2;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
  }
  v150 = v19;
  TI::Favonius::BeamSearch::drop_touches(&v160);
  v70 = (unsigned int *)v160;
  v160 = 0;
  if (v155)
  {
    v71 = v155 + 2;
    v72 = atomic_load(v155 + 2);
    if (v72 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v155 + 8))();
    }
    else
    {
      do
        v73 = __ldaxr(v71);
      while (__stlxr(v73 - 1, v71));
    }
  }
  v19 = v150;
  if (v156)
  {
    v74 = v156 + 2;
    v75 = atomic_load(v156 + 2);
    if (v75 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v156 + 40))();
      v19 = v150;
    }
    else
    {
      do
        v76 = __ldaxr(v74);
      while (__stlxr(v76 - 1, v74));
    }
  }
  if (!v70)
  {
    v18 = v147;
    a9 = v149;
    goto LABEL_144;
  }
  if (((*v64 >> (v65 & 0x3F)) & 1) == 0)
  {
    *v149 = v70;
    v18 = v147;
    goto LABEL_194;
  }
  v144 = v70;
  v153 = 0uLL;
  v154 = 0;
  v78 = (unint64_t *)a1[25];
  v77 = (unint64_t *)a1[26];
  if (v78 != v77)
  {
    do
    {
      TI::Favonius::BeamSearch::clone_search_node((unint64_t)a1, *v78, a2, v15, a4, a5, a11, (unsigned int *)*a12, (unsigned int **)&v160);
      v79 = (unsigned int *)v160;
      if (v160)
      {
        v80 = v153.i64[1];
        if (v153.i64[1] >= v154)
        {
          v84 = (v153.i64[1] - v153.i64[0]) >> 3;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 61)
            abort();
          v86 = v154 - v153.i64[0];
          if ((uint64_t)(v154 - v153.i64[0]) >> 2 > v85)
            v85 = v86 >> 2;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
            v87 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          v163 = &v154;
          if (v87)
            v87 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v87);
          else
            v88 = 0;
          v160 = (int64x2_t *)v87;
          v161.i64[0] = v87 + 8 * v84;
          v161.i64[1] = v161.i64[0];
          v162 = v87 + 8 * v88;
          *(_QWORD *)v161.i64[0] = v79;
          v89 = v79 + 2;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 + 1, v89));
          v91 = v161.i64[0];
          v83 = v161.i64[1] + 8;
          v161.i64[1] += 8;
          v92 = (_QWORD *)v153.i64[1];
          v93 = (_QWORD *)v153.i64[0];
          if (v153.i64[1] == v153.i64[0])
          {
            v95 = vdupq_n_s64(v153.u64[1]);
          }
          else
          {
            do
            {
              v94 = *--v92;
              *v92 = 0;
              *(_QWORD *)(v91 - 8) = v94;
              v91 -= 8;
            }
            while (v92 != v93);
            v95 = v153;
            v83 = v161.i64[1];
          }
          v153.i64[0] = v91;
          v153.i64[1] = v83;
          v161 = v95;
          v96 = v154;
          v154 = v162;
          v162 = v96;
          v160 = (int64x2_t *)v95.i64[0];
          std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v160);
        }
        else
        {
          *(_QWORD *)v153.i64[1] = v160;
          v81 = v79 + 2;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 + 1, v81));
          v83 = v80 + 8;
        }
        v153.i64[1] = v83;
        v97 = v79 + 2;
        v98 = atomic_load(v79 + 2);
        if (v98 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
        }
        else
        {
          do
            v99 = __ldaxr(v97);
          while (__stlxr(v99 - 1, v97));
        }
      }
      ++v78;
    }
    while (v78 != v77);
    if (v153.i64[0] != v153.i64[1])
    {
      TI::Favonius::BeamSearch::clone_search_node((unint64_t)a1, a1[35], a2, v15, a4, a5, a11, (unsigned int *)*a12, (unsigned int **)&v160);
      v100 = (unsigned int *)v160;
      if (v160)
      {
        v101 = operator new();
        v151 = v100;
        v152 = v144;
        v102 = v100 + 2;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 + 1, v102));
        *v149 = (unsigned int *)TI::Favonius::BeamSearch::BeamSearch(v101, a1, (uint64_t *)&v152, a6, (uint64_t **)&v153, (uint64_t *)&v151);
        if (v151)
        {
          v104 = v151 + 2;
          v105 = atomic_load(v151 + 2);
          if (v105 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v151 + 8))();
          }
          else
          {
            do
              v106 = __ldaxr(v104);
            while (__stlxr(v106 - 1, v104));
          }
        }
        if (v152)
        {
          v107 = v152 + 2;
          v108 = atomic_load(v152 + 2);
          if (v108 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v152 + 8))();
          }
          else
          {
            do
              v109 = __ldaxr(v107);
            while (__stlxr(v109 - 1, v107));
          }
        }
        v110 = atomic_load(v102);
        if (v110 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 8))(v100);
        }
        else
        {
          do
            v111 = __ldaxr(v102);
          while (__stlxr(v111 - 1, v102));
        }
        v160 = &v153;
        std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v160);
        v18 = v147;
        goto LABEL_193;
      }
    }
  }
  *v149 = 0;
  v160 = &v153;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v160);
  v119 = v144 + 2;
  v120 = atomic_load(v144 + 2);
  v18 = v147;
  if (v120 == 1)
  {
    (*(void (**)(void))(*(_QWORD *)v144 + 8))();
LABEL_193:
    v19 = v150;
    goto LABEL_194;
  }
  v19 = v150;
  do
    v133 = __ldaxr(v119);
  while (__stlxr(v133 - 1, v119));
LABEL_194:
  if (v19)
  {
    v138 = v19 + 2;
    v139 = atomic_load(v19 + 2);
    if (v139 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
    else
    {
      do
        v140 = __ldaxr(v138);
      while (__stlxr(v140 - 1, v138));
    }
  }
  if (v18)
  {
    v141 = v18 + 2;
    v142 = atomic_load(v18 + 2);
    if (v142 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 40))(v18);
    }
    else
    {
      do
        v143 = __ldaxr(v141);
      while (__stlxr(v143 - 1, v141));
    }
  }
}

void std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = operator new(0x20uLL);
  *v16 = 0;
  v16[1] = v10;
  v16[2] = a3;
  v16[3] = a4;
  if (a4)
  {
    v17 = (unsigned int *)(a4 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *v16 = *v26;
LABEL_41:
    *v26 = v16;
    goto LABEL_42;
  }
  v27 = *(_QWORD *)(a1 + 16);
  *v16 = v27;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  if (!a2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= a2)
      v7 = v5 % a2;
  }
  else
  {
    v7 = v5 & (a2 - 1);
  }
  v8 = *(_QWORD **)(a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2)
            v10 %= a2;
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void TI::Favonius::BeamSearch::clone_search_node(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int *a8@<X7>, unsigned int **a9@<X8>)
{
  _QWORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v24;
  unsigned int v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  _QWORD *v44;
  _QWORD *i;
  unint64_t v46;
  _QWORD *v47;
  unsigned int *v48;
  unsigned int v49;
  float v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;

  v18 = std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::find<TI::Favonius::SearchNode *>(*(_QWORD *)a7, *(_QWORD *)(a7 + 8), a2);
  if (v18)
  {
    v19 = (unsigned int *)v18[3];
    *a9 = v19;
    if (v19)
    {
      v20 = v19 + 2;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 + 1, v20));
    }
    return;
  }
  if (a3 == a5 && (_DWORD)a4 == (_DWORD)a6)
    goto LABEL_20;
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2) == 2
    && a3 + ((((unint64_t)a4 + 1) >> 3) & 0x3FFFFFF8) == a5
    && (((_BYTE)a4 + 1) & 0x3F) == (_DWORD)a6)
  {
    if (a8)
    {
      v30 = a8 + 2;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
      goto LABEL_24;
    }
LABEL_20:
    std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&,decltype(nullptr)>(a7, a2, a2);
    *a9 = 0;
    return;
  }
  v24 = *(_QWORD *)(a2 + 32);
  v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2);
  v26 = a6 - (unint64_t)v25;
  v27 = v26 - 63;
  if (v26 < 63)
    v27 = a6 - (unint64_t)v25;
  v28 = v27 >> 6;
  v29 = (unint64_t)v26 >> 6;
  if (v25)
    v29 = v28;
  TI::Favonius::BeamSearch::clone_search_node(&v63, a1, v24, a3, a4, a5 + 8 * v29, a6 & 0xFFFFFFFF00000000 | ((_BYTE)a6 - (_BYTE)v25) & 0x3F, a7, a8);
  a8 = v63;
  if (!v63)
    goto LABEL_20;
LABEL_24:
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2) == 1)
  {
    v32 = a6 - 1;
    if (a6 >= 0x40uLL)
      v32 = a6 - 64;
    if (((*(_QWORD *)(a5 + 8 * (v32 >> 6)) >> (a6 - 1)) & 1) != 0)
      goto LABEL_28;
LABEL_46:
    v38 = 0;
    goto LABEL_47;
  }
  v33 = a3 + ((((unint64_t)(a4 & 0xFFFFFFFE) + 2) >> 3) & 0x3FFFFFF8);
  if (v33 > a5)
    goto LABEL_41;
  if (v33 == a5 && (((_BYTE)a4 + 2) & 0x3Fu) > a6)
    goto LABEL_41;
  v35 = a6 - 65;
  if (a6 < 0x41uLL)
    v35 = a6 - 2;
  if (((*(_QWORD *)(a5 + 8 * (v35 >> 6)) >> (a6 + 62)) & 1) == 0)
  {
LABEL_41:
    v37 = a6 - 1;
    if (a6 >= 0x40uLL)
      v37 = a6 - 64;
    if (((*(_QWORD *)(a5 + 8 * (v37 >> 6)) >> (a6 - 1)) & 1) != 0)
    {
      (*(void (**)(unsigned int **__return_ptr, unint64_t, unsigned int *))(*(_QWORD *)a2 + 80))(&v63, a2, a8);
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  v36 = a6 - 1;
  if (a6 >= 0x40uLL)
    v36 = a6 - 64;
  if (((*(_QWORD *)(a5 + 8 * (v36 >> 6)) >> (a6 - 1)) & 1) == 0)
  {
    (*(void (**)(unsigned int **__return_ptr, unint64_t, unsigned int *))(*(_QWORD *)a2 + 88))(&v63, a2, a8);
    goto LABEL_45;
  }
LABEL_28:
  (*(void (**)(unsigned int **__return_ptr, unint64_t, unsigned int *))(*(_QWORD *)a2 + 72))(&v63, a2, a8);
LABEL_45:
  v38 = v63;
LABEL_47:
  v39 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v40 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v39 >> 47) ^ v39);
  v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
  v42 = *(_QWORD *)(a7 + 8);
  if (v42)
  {
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.u32[0] > 1uLL)
    {
      a1 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      if (v41 >= v42)
        a1 = v41 % v42;
    }
    else
    {
      a1 = v41 & (v42 - 1);
    }
    v44 = *(_QWORD **)(*(_QWORD *)a7 + 8 * a1);
    if (v44)
    {
      for (i = (_QWORD *)*v44; i; i = (_QWORD *)*i)
      {
        v46 = i[1];
        if (v46 == v41)
        {
          if (i[2] == a2)
            goto LABEL_89;
        }
        else
        {
          if (v43.u32[0] > 1uLL)
          {
            if (v46 >= v42)
              v46 %= v42;
          }
          else
          {
            v46 &= v42 - 1;
          }
          if (v46 != a1)
            break;
        }
      }
    }
  }
  v47 = operator new(0x20uLL);
  *v47 = 0;
  v47[1] = v41;
  v47[2] = a2;
  v47[3] = v38;
  if (v38)
  {
    v48 = v38 + 2;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  v50 = (float)(unint64_t)(*(_QWORD *)(a7 + 24) + 1);
  v51 = *(float *)(a7 + 32);
  if (!v42 || (float)(v51 * (float)v42) < v50)
  {
    v52 = 1;
    if (v42 >= 3)
      v52 = (v42 & (v42 - 1)) != 0;
    v53 = v52 | (2 * v42);
    v54 = vcvtps_u32_f32(v50 / v51);
    if (v53 <= v54)
      v55 = v54;
    else
      v55 = v53;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a7, v55);
    v42 = *(_QWORD *)(a7 + 8);
    if ((v42 & (v42 - 1)) != 0)
    {
      if (v41 >= v42)
        a1 = v41 % v42;
      else
        a1 = v41;
    }
    else
    {
      a1 = (v42 - 1) & v41;
    }
  }
  v56 = *(_QWORD *)a7;
  v57 = *(_QWORD **)(*(_QWORD *)a7 + 8 * a1);
  if (v57)
  {
    *v47 = *v57;
  }
  else
  {
    v58 = *(_QWORD *)(a7 + 16);
    *v47 = v58;
    *(_QWORD *)(a7 + 16) = v47;
    *(_QWORD *)(v56 + 8 * a1) = a7 + 16;
    if (!v58)
      goto LABEL_88;
    v59 = *(_QWORD *)(v58 + 8);
    if ((v42 & (v42 - 1)) != 0)
    {
      if (v59 >= v42)
        v59 %= v42;
    }
    else
    {
      v59 &= v42 - 1;
    }
    v57 = (_QWORD *)(*(_QWORD *)a7 + 8 * v59);
  }
  *v57 = v47;
LABEL_88:
  ++*(_QWORD *)(a7 + 24);
LABEL_89:
  *a9 = v38;
  v60 = a8 + 2;
  v61 = atomic_load(a8 + 2);
  if (v61 == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)a8 + 8))(a8);
  }
  else
  {
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
  }
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, _QWORD *a2, uint64_t *a3, KB::LanguageModelContext *a4, uint64_t **a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v29;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  v10 = *a3;
  *a3 = 0;
  v11 = a2[3];
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = a2[4];
  *(_QWORD *)(a1 + 32) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = a2[5];
  *(_QWORD *)(a1 + 40) = v17;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), a4);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 200), *a5, a5[1], a5[1] - *a5);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v20 = (unsigned int *)a2[34];
  *(_QWORD *)(a1 + 272) = v20;
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 280) = v22;
  v23 = *(_QWORD *)(a1 + 200);
  v24 = *(uint64_t **)(a1 + 208);
  v25 = (uint64_t *)v23;
  if ((uint64_t *)v23 != v24)
  {
    while (*v25 != v22)
    {
      if (++v25 == v24)
      {
        v25 = *(uint64_t **)(a1 + 208);
        break;
      }
    }
  }
  if (v25 == v24)
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100]((_QWORD *)(a1 + 200), (uint64_t *)(a1 + 280));
    v23 = *(_QWORD *)(a1 + 200);
    v24 = *(uint64_t **)(a1 + 208);
  }
  v29 = &__block_literal_global_8;
  v26 = 126 - 2 * __clz(((uint64_t)v24 - v23) >> 3);
  if (v24 == (uint64_t *)v23)
    v27 = 0;
  else
    v27 = v26;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(v23, v24, (uint64_t)&v29, v27, 1);
  return a1;
}

_QWORD *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v6 = result;
    result = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = *a2;
      *result = *a2;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      ++a2;
      ++result;
    }
    v6[1] = result;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  BOOL v50;
  uint64_t *v51;
  unsigned int **v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int **i;
  unsigned int **v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unsigned int **v68;
  unsigned int *v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int **v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unsigned int *v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int **j;
  _QWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;

  v9 = (uint64_t *)result;
LABEL_2:
  v138 = a2;
  v140 = a2 - 1;
  v136 = a2 - 3;
  v137 = a2 - 2;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v47 = *v10;
          *v10 = *v140;
          *v140 = v47;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v140, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v140, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v10 + 3, v140, a3);
      default:
        if (v11 <= 191)
        {
          v48 = v10 + 1;
          v50 = v10 == a2 || v48 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v50)
            {
              v51 = v10;
              do
              {
                v52 = (unsigned int **)v48;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((_DWORD)result)
                {
                  v53 = 0;
                  v54 = *v52;
                  *v52 = 0;
                  v144 = v54;
                  for (i = v52; ; v53 = *i)
                  {
                    v56 = i;
                    i = (unsigned int **)v51;
                    v57 = (unsigned int *)*v51;
                    *v51 = 0;
                    *v56 = v57;
                    if (v53)
                    {
                      v58 = v53 + 2;
                      v59 = atomic_load(v53 + 2);
                      if (v59 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
                      }
                      else
                      {
                        do
                          v60 = __ldaxr(v58);
                        while (__stlxr(v60 - 1, v58));
                      }
                    }
                    if (v51 == v10)
                      break;
                    --v51;
                    if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                      goto LABEL_89;
                  }
                  i = (unsigned int **)v10;
LABEL_89:
                  result = (uint64_t)*i;
                  *i = v144;
                  a2 = v138;
                  if (result)
                  {
                    v61 = (unsigned int *)(result + 8);
                    v62 = atomic_load((unsigned int *)(result + 8));
                    if (v62 == 1)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                    }
                    else
                    {
                      do
                        v63 = __ldaxr(v61);
                      while (__stlxr(v63 - 1, v61));
                    }
                    result = 0;
                  }
                }
                v48 = (uint64_t *)(v52 + 1);
                v51 = (uint64_t *)v52;
              }
              while (v52 + 1 != (unsigned int **)a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v124 = (unsigned int **)v48;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              if ((_DWORD)result)
              {
                v125 = 0;
                v126 = *v124;
                *v124 = 0;
                v147 = v126;
                for (j = v124; ; v125 = *j)
                {
                  v128 = j;
                  j = (unsigned int **)v9;
                  v129 = *v9;
                  *v9 = 0;
                  *v128 = v129;
                  if (v125)
                  {
                    v130 = v125 + 2;
                    v131 = atomic_load(v125 + 2);
                    if (v131 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v125 + 8))(v125);
                    }
                    else
                    {
                      do
                        v132 = __ldaxr(v130);
                      while (__stlxr(v132 - 1, v130));
                    }
                  }
                  --v9;
                  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                    break;
                }
                result = (uint64_t)*j;
                *j = v147;
                if (result)
                {
                  v133 = (unsigned int *)(result + 8);
                  v134 = atomic_load((unsigned int *)(result + 8));
                  if (v134 == 1)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  }
                  else
                  {
                    do
                      v135 = __ldaxr(v133);
                    while (__stlxr(v135 - 1, v133));
                  }
                  result = 0;
                }
              }
              v48 = (uint64_t *)(v124 + 1);
              v9 = (uint64_t *)v124;
            }
            while (v124 + 1 != (unsigned int **)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v64 = (v12 - 2) >> 1;
            v141 = v64;
            do
            {
              v65 = v64;
              if (v141 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = &v9[v66];
                if (2 * v64 + 2 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v67;
                  v66 = 2 * v65 + 2;
                }
                v68 = (unsigned int **)&v9[v65];
                a2 = v138;
                if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                {
                  v69 = *v68;
                  *v68 = 0;
                  v145 = v69;
                  do
                  {
                    v70 = (unsigned int **)v67;
                    v71 = (unsigned int *)*v67;
                    *v67 = 0;
                    v72 = *v68;
                    *v68 = v71;
                    if (v72)
                    {
                      v73 = v72 + 2;
                      v74 = atomic_load(v72 + 2);
                      if (v74 == 1)
                      {
                        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
                      }
                      else
                      {
                        do
                          v75 = __ldaxr(v73);
                        while (__stlxr(v75 - 1, v73));
                      }
                    }
                    if (v141 < v66)
                      break;
                    v76 = (2 * v66) | 1;
                    v67 = &v9[v76];
                    v77 = 2 * v66 + 2;
                    if (v77 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                    {
                      ++v67;
                      v76 = v77;
                    }
                    v68 = v70;
                    v66 = v76;
                  }
                  while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
                  v78 = *v70;
                  *v70 = v145;
                  if (v78)
                  {
                    v79 = v78 + 2;
                    v80 = atomic_load(v78 + 2);
                    if (v80 == 1)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 8))(v78);
                    }
                    else
                    {
                      do
                        v81 = __ldaxr(v79);
                      while (__stlxr(v81 - 1, v79));
                    }
                  }
                  a2 = v138;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v82 = (unint64_t)v11 >> 3;
            do
            {
              v83 = a2;
              v84 = 0;
              v85 = *v9;
              *v9 = 0;
              v86 = v82 - 2;
              v139 = v85;
              if (v82 < 2)
                v86 = v82 - 1;
              v87 = v86 >> 1;
              v88 = v9;
              do
              {
                v89 = (unsigned int **)v88;
                v88 += v84 + 1;
                v90 = 2 * v84;
                v84 = (2 * v84) | 1;
                v91 = v90 + 2;
                if (v90 + 2 < v82 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v88;
                  v84 = v91;
                }
                v92 = (unsigned int *)*v88;
                *v88 = 0;
                v93 = *v89;
                *v89 = v92;
                if (v93)
                {
                  v94 = v93 + 2;
                  v95 = atomic_load(v93 + 2);
                  if (v95 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
                  }
                  else
                  {
                    do
                      v96 = __ldaxr(v94);
                    while (__stlxr(v96 - 1, v94));
                  }
                }
              }
              while (v84 <= v87);
              v97 = v83 - 1;
              if (v88 == v97)
              {
                v106 = v97;
                result = *v88;
                *v88 = v139;
                if (result)
                {
                  v120 = (unsigned int *)(result + 8);
                  v121 = atomic_load((unsigned int *)(result + 8));
                  if (v121 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  }
                  else
                  {
                    do
                      v122 = __ldaxr(v120);
                    while (__stlxr(v122 - 1, v120));
                  }
                }
              }
              else
              {
                v98 = *v97;
                *v97 = 0;
                v99 = (unsigned int *)*v88;
                *v88 = v98;
                if (v99)
                {
                  v100 = v99 + 2;
                  v101 = atomic_load(v99 + 2);
                  if (v101 == 1)
                  {
                    (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 8))(v99);
                  }
                  else
                  {
                    do
                      v102 = __ldaxr(v100);
                    while (__stlxr(v102 - 1, v100));
                  }
                }
                result = *v97;
                *v97 = v139;
                if (result)
                {
                  v103 = (unsigned int *)(result + 8);
                  v104 = atomic_load((unsigned int *)(result + 8));
                  if (v104 == 1)
                  {
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  }
                  else
                  {
                    do
                      v105 = __ldaxr(v103);
                    while (__stlxr(v105 - 1, v103));
                  }
                }
                v106 = v97;
                v107 = (char *)(v88 + 1) - (char *)v9;
                if (v107 >= 9)
                {
                  v108 = (unint64_t)((v107 >> 3) - 2) >> 1;
                  v109 = &v9[v108];
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v110 = (unsigned int *)*v88;
                    *v88 = 0;
                    v146 = (uint64_t)v110;
                    do
                    {
                      v111 = v109;
                      v112 = *v109;
                      *v109 = 0;
                      v113 = (unsigned int *)*v88;
                      *v88 = v112;
                      if (v113)
                      {
                        v114 = v113 + 2;
                        v115 = atomic_load(v113 + 2);
                        if (v115 == 1)
                        {
                          (*(void (**)(unsigned int *))(*(_QWORD *)v113 + 8))(v113);
                        }
                        else
                        {
                          do
                            v116 = __ldaxr(v114);
                          while (__stlxr(v116 - 1, v114));
                        }
                      }
                      if (!v108)
                        break;
                      v108 = (v108 - 1) >> 1;
                      v109 = &v9[v108];
                      v88 = v111;
                    }
                    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
                    result = *v111;
                    *v111 = v146;
                    if (result)
                    {
                      v117 = (unsigned int *)(result + 8);
                      v118 = atomic_load((unsigned int *)(result + 8));
                      if (v118 == 1)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                      }
                      else
                      {
                        do
                          v119 = __ldaxr(v117);
                        while (__stlxr(v119 - 1, v117));
                      }
                      result = 0;
                    }
                  }
                }
              }
              v123 = v82-- <= 2;
              a2 = v106;
            }
            while (!v123);
          }
          return result;
        }
        v13 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v10[v12 >> 1], v10, v140, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, &v10[v12 >> 1], v140, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 1, v13 - 1, v137, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 2, &v10[(v12 >> 1) + 1], v136, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v13 - 1, &v10[v12 >> 1], &v10[(v12 >> 1) + 1], a3);
          v14 = *v10;
          *v10 = *v13;
          *v13 = v14;
        }
        --a4;
        a2 = v138;
        if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v32 = *v10;
          *v10 = 0;
          v143 = v32;
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            do
              ++v10;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
          }
          else
          {
            v33 = v10 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v138)
                break;
              v34 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v33 = v10 + 1;
            }
            while (!v34);
          }
          v35 = v138;
          if (v10 < v138)
          {
            v35 = v138;
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          while (v10 < v35)
          {
            v36 = *v10;
            *v10 = *v35;
            *v35 = v36;
            do
              ++v10;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
              --v35;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          v37 = (unsigned int **)(v10 - 1);
          if (v10 - 1 != v9)
          {
            v38 = *v37;
            *v37 = 0;
            v39 = (unsigned int *)*v9;
            *v9 = (uint64_t)v38;
            if (v39)
            {
              v40 = v39 + 2;
              v41 = atomic_load(v39 + 2);
              if (v41 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
              }
              else
              {
                do
                  v42 = __ldaxr(v40);
                while (__stlxr(v42 - 1, v40));
              }
            }
          }
          v43 = *v37;
          *v37 = (unsigned int *)v143;
          if (v43)
          {
            v44 = v43 + 2;
            v45 = atomic_load(v43 + 2);
            if (v45 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 8))(v43);
            }
            else
            {
              do
                v46 = __ldaxr(v44);
              while (__stlxr(v46 - 1, v44));
            }
          }
          result = 0;
          a5 = 0;
          continue;
        }
        v15 = *v10;
        *v10 = 0;
        v142 = v15;
        v16 = v10;
        do
          v17 = v16++;
        while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
        v18 = v138;
        if (v17 == v10)
        {
          v18 = v138;
          do
          {
            if (v16 >= v18)
              break;
            --v18;
          }
          while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
        }
        if (v16 < v18)
        {
          v19 = v16;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              v17 = v19++;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            do
              --v20;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
          }
          while (v19 < v20);
        }
        if (v17 != v9)
        {
          v22 = *v17;
          *v17 = 0;
          v23 = (unsigned int *)*v9;
          *v9 = v22;
          if (v23)
          {
            v24 = v23 + 2;
            v25 = atomic_load(v23 + 2);
            if (v25 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
            }
            else
            {
              do
                v26 = __ldaxr(v24);
              while (__stlxr(v26 - 1, v24));
            }
          }
        }
        v27 = (unsigned int *)*v17;
        *v17 = v142;
        if (v27)
        {
          v28 = v27 + 2;
          v29 = atomic_load(v27 + 2);
          if (v29 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
          }
          else
          {
            do
              v30 = __ldaxr(v28);
            while (__stlxr(v30 - 1, v28));
          }
        }
        if (v16 < v18)
        {
LABEL_37:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*,false>(v9, v17, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v17 + 1;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(v9, v17, a3);
        v10 = v17 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(v17 + 1, v138, a3);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_37;
        }
        a2 = v17;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::SearchNode> const&,WTF::RefPtr<TI::Favonius::SearchNode> const&),WTF::RefPtr<TI::Favonius::SearchNode>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int **v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **i;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      v11 = (unsigned int **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v13 = 0;
      v14 = *v11;
      *v11 = 0;
      v25 = v14;
      for (i = v11; ; v13 = *i)
      {
        v16 = i;
        i = (unsigned int **)v10;
        v17 = (unsigned int *)*v10;
        *v10 = 0;
        *v16 = v17;
        if (v13)
        {
          v18 = v13 + 2;
          v19 = atomic_load(v13 + 2);
          if (v19 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
          }
          else
          {
            do
              v20 = __ldaxr(v18);
            while (__stlxr(v20 - 1, v18));
          }
        }
        if (v10 == a1)
          break;
        --v10;
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          goto LABEL_16;
      }
      i = (unsigned int **)a1;
LABEL_16:
      v21 = *i;
      *i = v25;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v12 == 8)
        return v11 + 1 == (unsigned int **)a2;
    }
    v10 = (uint64_t *)v11++;
    if (v11 == (unsigned int **)a2)
      return 1;
  }
}

BOOL ___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EERKN2KB20LanguageModelContextERKNSt3__16vectorINS4_6RefPtrINS0_10SearchNodeEEENSB_9allocatorISF_EEEENS5_ISE_EE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(_QWORD *)a2 + 156) > *(float *)(*(_QWORD *)a3 + 156);
}

void std::__hash_table<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::__unordered_map_hasher<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::hash<TI::Favonius::SearchNode *>,std::equal_to<TI::Favonius::SearchNode *>,true>,std::__unordered_map_equal<TI::Favonius::SearchNode *,std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>,std::equal_to<TI::Favonius::SearchNode *>,std::hash<TI::Favonius::SearchNode *>,true>,std::allocator<std::__hash_value_type<TI::Favonius::SearchNode *,WTF::RefPtr<TI::Favonius::SearchNode>>>>::__emplace_unique_key_args<TI::Favonius::SearchNode *,TI::Favonius::SearchNode *&,decltype(nullptr)>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  v14[1] = v8;
  v14[2] = a3;
  v14[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(a1 + 16);
  *v14 = v23;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t TI::Favonius::BeamSearch::search_node_for_accepted_text@<X0>(TI::Favonius::BeamSearch *this@<X0>, const KB::String *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  _QWORD v37[2];
  BOOL (*v38)(uint64_t, TI::Favonius::SearchNode **);
  void *v39;
  const KB::String *v40;
  unsigned int v41;

  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v38 = ___ZNK2TI8Favonius10BeamSearch29search_node_for_accepted_textERKN2KB6StringEj_block_invoke;
  v39 = &__block_descriptor_tmp_24_11150;
  v41 = a3;
  v40 = a2;
  v8 = (uint64_t *)*((_QWORD *)this + 28);
  v9 = (uint64_t *)*((_QWORD *)this + 29);
  if (v8 == v9)
    goto LABEL_10;
  while (1)
  {
    result = ((uint64_t (*)(_QWORD *, uint64_t *))v38)(v37, v8);
    if ((result & 1) != 0)
      break;
    if (++v8 == v9)
    {
      v8 = v9;
      break;
    }
  }
  if (v8 == *((uint64_t **)this + 29))
  {
LABEL_10:
    v14 = (uint64_t *)*((_QWORD *)this + 25);
    v15 = (uint64_t *)*((_QWORD *)this + 26);
    if (v14 == v15)
      goto LABEL_19;
    while (1)
    {
      result = ((uint64_t (*)(_QWORD *, uint64_t *))v38)(v37, v14);
      if ((result & 1) != 0)
        break;
      if (++v14 == v15)
      {
        v14 = v15;
        break;
      }
    }
    if (v14 == *((uint64_t **)this + 26))
    {
LABEL_19:
      result = *((_QWORD *)this + 2);
      if (result
        && (result = (uint64_t)TI::Favonius::BeamSearch::search_node_for_accepted_text((uint64_t *)&v36, (TI::Favonius::BeamSearch *)result, a2, a3), (v19 = v36) != 0))
      {
        if (*((_QWORD *)v36 + 2))
        {
          v20 = (uint64_t *)*((_QWORD *)this + 25);
          v21 = (uint64_t *)*((_QWORD *)this + 26);
          while (1)
          {
            if (v20 == v21)
            {
              result = (*(uint64_t (**)(_QWORD, unsigned int *))(**((_QWORD **)this + 35) + 72))(*((_QWORD *)this + 35), v19);
              goto LABEL_46;
            }
            v22 = *v20;
            if (v19 == *(unsigned int **)(*v20 + 32))
            {
              v23 = *((_QWORD *)this + 35);
              if (v22 == v23)
              {
                *a4 = v22;
                goto LABEL_41;
              }
              result = KB::String::equal((KB::String *)(v22 + 88), (const KB::String *)(v23 + 88), 1);
              if ((_DWORD)result)
                break;
            }
            ++v20;
          }
          v22 = *v20;
          *a4 = *v20;
          if (!v22)
            goto LABEL_46;
LABEL_41:
          v31 = (unsigned int *)(v22 + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
        }
        else if (*(_QWORD *)(*((_QWORD *)v36 + 4) + 16))
        {
          (*(void (**)(unsigned int **__return_ptr, _QWORD, unsigned int *))(**((_QWORD **)this + 35) + 96))(&v36, *((_QWORD *)this + 35), v36);
          v24 = v36;
          result = TI::Favonius::BeamSearch::search_node_with_typing((uint64_t)this, *((_QWORD *)v36 + 7));
          if (result)
          {
            v25 = result;
            v26 = (unsigned int *)(result + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 + 1, v26));
            v28 = v24 + 2;
            v29 = atomic_load(v24 + 2);
            if (v29 == 1)
            {
              result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
            }
            else
            {
              do
                v30 = __ldaxr(v28);
              while (__stlxr(v30 - 1, v28));
            }
          }
          else
          {
            v25 = (uint64_t)v24;
          }
          *a4 = v25;
        }
        else
        {
          *a4 = 0;
        }
LABEL_46:
        v33 = v19 + 2;
        v34 = atomic_load(v19 + 2);
        if (v34 == 1)
        {
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
        else
        {
          do
            v35 = __ldaxr(v33);
          while (__stlxr(v35 - 1, v33));
        }
      }
      else
      {
        *a4 = 0;
      }
    }
    else
    {
      v16 = *v14;
      *a4 = *v14;
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
    }
  }
  else
  {
    v11 = *v8;
    *a4 = *v8;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  return result;
}

unsigned int *TI::Favonius::BeamSearch::clone_with_input_node@<X0>(unsigned int *result@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;

  v3 = (uint64_t)result;
  if (*a2 == *((unsigned int **)result + 35))
  {
    *a3 = result;
    v11 = result + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  else
  {
    v6 = operator new();
    v7 = *a2;
    *a2 = 0;
    v13 = v7;
    *a3 = TI::Favonius::BeamSearch::BeamSearch(v6, v3, (uint64_t *)&v13);
    result = v13;
    if (v13)
    {
      v8 = v13 + 2;
      v9 = atomic_load(v13 + 2);
      if (v9 == 1)
      {
        return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
      }
      else
      {
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
      }
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int *v82;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(a2 + 48));
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 200), *(uint64_t **)(a2 + 200), *(uint64_t **)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 224), *(uint64_t **)(a2 + 224), *(uint64_t **)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v15 = *(unsigned int **)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v15;
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = (_QWORD *)(a1 + 280);
  v18 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 280) = v18;
  v19 = *(_QWORD *)(a1 + 200);
  v20 = *(_QWORD **)(a1 + 208);
  if ((_QWORD *)v19 == v20)
    goto LABEL_23;
  v21 = *(_QWORD **)(a1 + 200);
  while (*v21 != v18)
  {
    if (++v21 == v20)
    {
      v21 = *(_QWORD **)(a1 + 208);
      break;
    }
  }
  if (v21 == v20)
  {
    v22 = ((uint64_t)v20 - v19) >> 3;
    do
    {
      v23 = v22 >> 1;
      v24 = (uint64_t *)(v19 + 8 * (v22 >> 1));
      v26 = *v24;
      v25 = v24 + 1;
      v22 += ~(v22 >> 1);
      if (*(float *)(v26 + 156) > *(float *)(v18 + 156))
        v19 = (uint64_t)v25;
      else
        v22 = v23;
    }
    while (v22);
LABEL_23:
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert((unsigned int *)(a1 + 200), v19, (unsigned int **)(a1 + 280));
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_60;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v17 + 56))(*v17) == 1)
  {
    v27 = *(_QWORD *)(a2 + 16);
    v28 = *(_QWORD *)(*v17 + 32);
    v81 = v28;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    TI::Favonius::BeamSearch::clone_with_input_node(&v82, v27, &v81);
    v31 = *(unsigned int **)(a1 + 16);
    v32 = v82;
    v82 = 0;
    *(_QWORD *)(a1 + 16) = v32;
    if (v31)
    {
      v33 = v31 + 2;
      v34 = atomic_load(v31 + 2);
      if (v34 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
      }
      else
      {
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
      }
      if (v82)
      {
        v36 = v82 + 2;
        v37 = atomic_load(v82 + 2);
        if (v37 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v82 + 8))();
        }
        else
        {
          do
            v38 = __ldaxr(v36);
          while (__stlxr(v38 - 1, v36));
        }
      }
    }
    v39 = v81;
    if (v81)
    {
      v40 = (unsigned int *)(v81 + 8);
      v41 = atomic_load((unsigned int *)(v81 + 8));
      if (v41 != 1)
      {
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        goto LABEL_60;
      }
LABEL_58:
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
  }
  else
  {
    v43 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
    v44 = *(unsigned int **)(*v17 + 32);
    v80 = v44;
    if (v44)
    {
      v45 = v44 + 2;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 + 1, v45));
    }
    TI::Favonius::BeamSearch::clone_with_input_node(&v82, v43, &v80);
    v47 = (uint64_t)v82;
    v82 = 0;
    if (v80)
    {
      v48 = v80 + 2;
      v49 = atomic_load(v80 + 2);
      if (v49 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v80 + 8))();
      }
      else
      {
        do
          v50 = __ldaxr(v48);
        while (__stlxr(v50 - 1, v48));
      }
    }
    v51 = operator new();
    v52 = *(_QWORD *)(a2 + 16);
    v53 = *(unsigned int **)(a2 + 272);
    v78 = v53;
    v79 = v47;
    if (v53)
    {
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
    }
    v55 = TI::Favonius::BeamSearch::BeamSearch(v51, v52, &v79, &v78);
    v56 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v55;
    if (v56)
    {
      v57 = v56 + 2;
      v58 = atomic_load(v56 + 2);
      if (v58 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 8))(v56);
      }
      else
      {
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
      }
    }
    if (v78)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v78);
    v39 = v79;
    if (v79)
    {
      v60 = (unsigned int *)(v79 + 8);
      v61 = atomic_load((unsigned int *)(v79 + 8));
      if (v61 == 1)
        goto LABEL_58;
      do
        v62 = __ldaxr(v60);
      while (__stlxr(v62 - 1, v60));
    }
  }
LABEL_60:
  if (*(_QWORD *)(a1 + 16))
  {
    v63 = (_QWORD *)(a2 + 280);
    if (TI::Favonius::BeamSearch::finalized_search_should_exclude_node((_QWORD *)a1, v63))
    {
      v64 = *(uint64_t **)(a1 + 200);
      v65 = *(uint64_t **)(a1 + 208);
      if (v64 != v65)
      {
        while (*v64 != *v63)
        {
          if (++v64 == v65)
          {
            v64 = *(uint64_t **)(a1 + 208);
            break;
          }
        }
      }
      v66 = v64 + 1;
      if (v64 + 1 != v65)
      {
        do
        {
          v67 = *v66;
          *v66 = 0;
          v68 = (unsigned int *)*v64;
          *v64 = v67;
          if (v68)
          {
            v69 = v68 + 2;
            v70 = atomic_load(v68 + 2);
            if (v70 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 8))(v68);
            }
            else
            {
              do
                v71 = __ldaxr(v69);
              while (__stlxr(v71 - 1, v69));
            }
          }
          ++v66;
          ++v64;
        }
        while (v66 != v65);
        v65 = *(uint64_t **)(a1 + 208);
      }
      while (v65 != v64)
      {
        v73 = (unsigned int *)*--v65;
        v72 = v73;
        if (v73)
        {
          v74 = v72 + 2;
          v75 = atomic_load(v72 + 2);
          if (v75 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
          }
          else
          {
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 - 1, v74));
          }
        }
      }
      *(_QWORD *)(a1 + 208) = v64;
    }
  }
  return a1;
}

unsigned int **std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert(unsigned int *a1, uint64_t a2, unsigned int **a3)
{
  unsigned int **v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int **v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  char *v36;
  char *v37;
  unsigned int **v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *v45;

  v4 = (unsigned int **)a2;
  v6 = *((_QWORD *)a1 + 1);
  v8 = a1 + 4;
  v7 = *((_QWORD *)a1 + 2);
  if (v6 >= v7)
  {
    v16 = *(unsigned int ***)a1;
    v17 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 3) + 1;
    if (v17 >> 61)
      abort();
    v18 = a2 - (_QWORD)v16;
    v19 = (a2 - (uint64_t)v16) >> 3;
    v20 = v7 - (_QWORD)v16;
    if (v20 >> 2 > v17)
      v17 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v17;
    v40 = v8;
    if (v21)
    {
      v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v21);
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v27 = (unsigned int **)&v23[8 * v19];
    v36 = v23;
    v37 = (char *)v27;
    v28 = &v23[8 * v22];
    v38 = v27;
    v39 = v28;
    if (v19 == v22)
    {
      if (v18 < 1)
      {
        if (v16 == v4)
          v30 = 1;
        else
          v30 = v18 >> 2;
        v45 = v8;
        v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v30);
        v37 = &v36[8 * (v30 >> 2)];
        v41 = v23;
        v42 = &v23[8 * v19];
        v38 = (unsigned int **)v37;
        v39 = &v36[8 * v31];
        v43 = v42;
        v44 = v28;
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v41);
        v27 = (unsigned int **)v37;
      }
      else
      {
        v29 = v19 + 2;
        if (v19 >= -1)
          v29 = v19 + 1;
        v27 -= v29 >> 1;
        v37 = (char *)v27;
        v38 = v27;
      }
    }
    v32 = *a3;
    *v27 = *a3;
    if (v32)
    {
      v33 = v32 + 2;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
      v27 = v38;
    }
    v38 = v27 + 1;
    v4 = (unsigned int **)std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__swap_out_circular_buffer(a1, &v36, v4);
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    v24 = *a3;
    *(_QWORD *)a2 = *a3;
    if (v24)
    {
      v25 = v24 + 2;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    *((_QWORD *)a1 + 1) = a2 + 8;
  }
  else
  {
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range(a1, (_QWORD *)a2, v6, (char *)(a2 + 8));
    if (v4 <= a3)
      a3 += *((_QWORD *)a1 + 1) > (unint64_t)a3;
    v9 = *a3;
    if (*a3)
    {
      v10 = v9 + 2;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = *v4;
    *v4 = v9;
    if (v12)
    {
      v13 = v12 + 2;
      v14 = atomic_load(v12 + 2);
      if (v14 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
      else
      {
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
      }
    }
  }
  return v4;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD v39[2];
  uint64_t (*v40)(uint64_t, unsigned int **);
  void *v41;
  uint64_t v42;
  unsigned int *v43;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    v7 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(*(_QWORD *)(a1 + 16) + 48));
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 200), *(uint64_t **)(a2 + 200), *(uint64_t **)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 224), *(uint64_t **)(a2 + 224), *(uint64_t **)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v17 = *(unsigned int **)(a2 + 272);
  *(_QWORD *)(a1 + 272) = v17;
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v22 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v43 = v22;
    TI::Favonius::BeamSearch::initialize_input_node(a1, &v43, *(float *)(*(_QWORD *)(a2 + 280) + 152));
    if (v43)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v43);
  }
  v23 = *(unsigned int ***)(a1 + 200);
  v24 = *(unsigned int ***)(a1 + 208);
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 0x40000000;
  v40 = (uint64_t (*)(uint64_t, unsigned int **))___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EENS5_INS0_8KeyMatchEEE_block_invoke;
  v41 = &__block_descriptor_tmp_4_11148;
  v42 = a1;
  if (v23 == v24)
    goto LABEL_35;
  v25 = v24;
  while ((v40((uint64_t)v39, v23) & 1) == 0)
  {
    if (++v23 == v24)
      goto LABEL_36;
  }
  if (v23 != v24)
  {
    v26 = v23 + 1;
    if (v23 + 1 != v24)
    {
      v25 = v23;
      do
      {
        if ((v40((uint64_t)v39, v26) & 1) == 0)
        {
          v27 = *v26;
          *v26 = 0;
          v28 = *v25;
          *v25 = v27;
          if (v28)
          {
            v29 = v28 + 2;
            v30 = atomic_load(v28 + 2);
            if (v30 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
            }
            else
            {
              do
                v31 = __ldaxr(v29);
              while (__stlxr(v31 - 1, v29));
            }
          }
          ++v25;
        }
        ++v26;
      }
      while (v26 != v24);
      goto LABEL_36;
    }
LABEL_35:
    v25 = v23;
  }
LABEL_36:
  v32 = *(unsigned int ***)(a1 + 208);
  if (v25 != v32)
  {
    while (v32 != v25)
    {
      v34 = *--v32;
      v33 = v34;
      if (v34)
      {
        v35 = v33 + 2;
        v36 = atomic_load(v33 + 2);
        if (v36 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
        }
        else
        {
          do
            v37 = __ldaxr(v35);
          while (__stlxr(v37 - 1, v35));
        }
      }
    }
    *(_QWORD *)(a1 + 208) = v25;
  }
  return a1;
}

uint64_t TI::Favonius::BeamSearch::finalized_search_should_exclude_node(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  BOOL v21;
  int v22;
  __int16 v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (***v34)(_QWORD);
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  KB::String *v40;

  v2 = a1[35];
  if (*a2 == v2)
    return 0;
  if (*(_DWORD *)(*a2 + 168) > (*(_DWORD *)(v2 + 168) + 2))
    return 1;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6) + 56);
  v8 = *(unsigned int *)(v7 + 200);
  v9 = (unint64_t)((uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3) >> 1;
  if (v8 > 0xB || v9 < v8)
    goto LABEL_8;
  v37 = *(_QWORD *)(*a2 + 48);
  if (!v37)
    return 1;
  v38 = *(_QWORD *)(v37 + 8);
  v39 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1) + 8);
  if (v38 == v39 || (v40 = (KB::String *)(v38 + 8), v3 = 1, KB::String::equal(v40, (const KB::String *)(v39 + 8), 1)))
  {
LABEL_8:
    v11 = *(_QWORD *)(*a2 + 56);
    if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 60) & 0x20) != 0)
    {
      if ((**(uint64_t (***)(uint64_t))v11)(v11))
      {
        v12 = (**(uint64_t (***)(uint64_t))v11)(v11);
        if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) + 60) & 0x20) != 0)
          return 1;
      }
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    if ((*(_WORD *)(*(_QWORD *)v13 + 60) & 0x30) != 0 && (*(_WORD *)(*(_QWORD *)v13 + 60) & 8) == 0)
    {
      v15 = (**(uint64_t (***)(uint64_t))v11)(v11);
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15))
        return 1;
    }
    if ((*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 56) + 16))(*(_QWORD *)(*a2 + 56))
                   + 60) & 0x80) != 0)
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 56) + 32))(*(_QWORD *)(*a2 + 56));
      v17 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[35] + 56) + 32))(*(_QWORD *)(a1[35] + 56));
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
      v20 = *(_WORD *)(v17 + 60);
      v21 = (v20 & 8) != 0 || (v20 & 0x30) == 0;
      v22 = v20 & 1;
      if (!v21)
        v22 = 1;
      v23 = *(_WORD *)(*(_QWORD *)v19 + 60);
      v24 = (v23 & 8) != 0 || (v23 & 0x30) == 0;
      v25 = v23 & 1;
      if (!v24)
        v25 = 1;
      if (v22 != v25)
        return 1;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 56) == 39)
    {
      v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      v27 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26) + 56);
      v28 = *(unsigned int *)(v27 + 200);
      v29 = (unint64_t)((uint64_t)(*(_QWORD *)(v27 + 16) - *(_QWORD *)(v27 + 8)) >> 3) >> 1;
      v30 = v28 <= 0xB && v29 >= v28;
      if (!v30
        && (*(_WORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[35] + 56) + 16))(*(_QWORD *)(a1[35] + 56))
                     + 60) & 2) != 0)
      {
        return 1;
      }
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2) == 2)
    {
      v31 = (**(uint64_t (***)(uint64_t))v11)(v11);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      if ((*(_WORD *)(*(_QWORD *)v32 + 60) & 0x30) != 0 && (*(_WORD *)(*(_QWORD *)v32 + 60) & 8) == 0)
      {
        v34 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t))v11)(v11);
        v35 = (**v34)(v34);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 64))(v35))
          return 1;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t TI::Favonius::BeamSearch::initialize_input_node(uint64_t a1, unsigned int **a2, float a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  void **v24;
  unsigned int *v25;
  void **i;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t result;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int **v59;
  void **v60;
  uint64_t v61;
  unsigned int **v62;
  char *v63;
  char *v64;
  _QWORD v65[2];
  uint64_t (***(*v66)(uint64_t, uint64_t *))(_QWORD);
  void *v67;
  unsigned int **v68;
  unsigned int *v69;
  void ***v70;

  v6 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 280);
  if (v6)
  {
    v7 = v6 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *(unsigned int ***)(a1 + 200);
  v10 = *(unsigned int ***)(a1 + 208);
  v65[0] = MEMORY[0x1E0C809B0];
  v65[1] = 1174405120;
  v66 = ___ZN2TI8Favonius10BeamSearch21initialize_input_nodeERKN3WTF6RefPtrINS0_8KeyMatchEEEf_block_invoke;
  v67 = &__block_descriptor_tmp_11149;
  v68 = a2;
  v69 = v6;
  if (v6)
  {
    v11 = v6 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  if (v9 != v10)
  {
    while (((uint64_t)v66((uint64_t)v65, (uint64_t *)v9) & 1) == 0)
    {
      if (++v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v9 == *(unsigned int ***)(a1 + 208))
  {
    v13 = operator new(0x10uLL);
    v63 = (char *)(v13 + 2);
    v64 = (char *)(v13 + 2);
    *v13 = 0;
    v13[1] = 0;
    v62 = (unsigned int **)v13;
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
    {
      v15 = (unsigned int *)(v14 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v17 = (unsigned int *)*v13;
      *v13 = v14;
      if (v17)
      {
        v18 = v17 + 2;
        v19 = atomic_load(v17 + 2);
        if (v19 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
        else
        {
          do
            v20 = __ldaxr(v18);
          while (__stlxr(v20 - 1, v18));
        }
      }
    }
    v21 = *a2;
    if (*a2)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = *((_QWORD *)v63 - 1);
    *((_QWORD *)v63 - 1) = v21;
    if (v23)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v23);
    v59 = 0;
    v60 = 0;
    v61 = 0;
    TI::Favonius::SearchNode::create_key_sequence_extensions((uint64_t)v6, &v59, &v62, a3);
    v24 = (void **)v59;
    v25 = *v59;
    *v59 = 0;
    v70 = (void ***)v25;
    for (i = v60; i != v24; --i)
    {
      v28 = (unsigned int *)*(i - 1);
      v27 = v28;
      if (v28)
      {
        v29 = v27 + 2;
        v30 = atomic_load(v27 + 2);
        if (v30 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
        }
        else
        {
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
        }
      }
    }
    v60 = v24;
    v33 = *(_QWORD **)(a1 + 200);
    v32 = *(_QWORD *)(a1 + 208);
    if ((_QWORD *)v32 != v33)
    {
      v34 = (v32 - (uint64_t)v33) >> 3;
      do
      {
        v35 = v34 >> 1;
        v36 = &v33[v34 >> 1];
        v38 = *v36;
        v37 = v36 + 1;
        v34 += ~(v34 >> 1);
        if (*(float *)(v38 + 156) > *((float *)v70 + 39))
          v33 = v37;
        else
          v34 = v35;
      }
      while (v34);
      v32 = (uint64_t)v33;
    }
    v9 = std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::insert((unsigned int *)(a1 + 200), v32, (unsigned int **)&v70);
    if (v70)
    {
      v39 = (unsigned int *)(v70 + 1);
      v40 = atomic_load((unsigned int *)v70 + 2);
      if (v40 == 1)
      {
        ((void (*)(void))(*v70)[1])();
      }
      else
      {
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
      }
    }
    v70 = (void ***)&v59;
    std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v70);
    v59 = (unsigned int **)&v62;
    std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v59);
  }
  v42 = *v9;
  if (*v9)
  {
    v43 = v42 + 2;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
  }
  v45 = *(unsigned int **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v42;
  if (v45)
  {
    v46 = v45 + 2;
    v47 = atomic_load(v45 + 2);
    if (v47 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
    }
    else
    {
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
    }
  }
  v49 = *a2;
  if (*a2)
  {
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
  }
  v51 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v49;
  if (v51)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v51);
  result = (uint64_t)v69;
  if (v69)
  {
    v53 = v69 + 2;
    v54 = atomic_load(v69 + 2);
    if (v54 == 1)
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v69 + 8))();
    }
    else
    {
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 - 1, v53));
    }
  }
  if (v6)
  {
    v56 = v6 + 2;
    v57 = atomic_load(v6 + 2);
    if (v57 == 1)
    {
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      do
        v58 = __ldaxr(v56);
      while (__stlxr(v58 - 1, v56));
    }
  }
  return result;
}

uint64_t ___ZN2TI8Favonius10BeamSearchC2ERKS1_N3WTF10PassRefPtrIS1_EENS5_INS0_8KeyMatchEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  return TI::Favonius::BeamSearch::finalized_search_should_exclude_node(*(_QWORD **)(a1 + 32), a2);
}

void std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v2);
  result = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    v4 = result + 2;
    v5 = atomic_load(result + 2);
    if (v5 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      do
        v6 = __ldaxr(v4);
      while (__stlxr(v6 - 1, v4));
    }
  }
  return result;
}

uint64_t __copy_helper_block_8_40c46_ZTSKN3WTF6RefPtrIN2TI8Favonius10SearchNodeEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return result;
}

unsigned int *__destroy_helper_block_8_40c46_ZTSKN3WTF6RefPtrIN2TI8Favonius10SearchNodeEEE(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(unsigned int **)(a1 + 40);
  if (result)
  {
    v2 = result + 2;
    v3 = atomic_load(result + 2);
    if (v3 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      do
        v4 = __ldaxr(v2);
      while (__stlxr(v4 - 1, v2));
    }
  }
  return result;
}

unsigned int *std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__move_range(unsigned int *result, _QWORD *a2, unint64_t a3, char *a4)
{
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v5 = (char *)*((_QWORD *)result + 1);
  v6 = (_QWORD *)((char *)a2 + v5 - a4);
  v7 = v5;
  if ((unint64_t)v6 < a3)
  {
    v8 = (_QWORD *)((char *)a2 + v5 - a4);
    v7 = (char *)*((_QWORD *)result + 1);
    do
    {
      v9 = *v8;
      *v8++ = 0;
      *(_QWORD *)v7 = v9;
      v7 += 8;
    }
    while ((unint64_t)v8 < a3);
  }
  *((_QWORD *)result + 1) = v7;
  if (v5 != a4)
  {
    do
    {
      v11 = *--v6;
      v10 = v11;
      *v6 = 0;
      v12 = (unsigned int *)*((_QWORD *)v5 - 1);
      v5 -= 8;
      result = v12;
      *(_QWORD *)v5 = v10;
      if (v12)
      {
        v13 = result + 2;
        v14 = atomic_load(result + 2);
        if (v14 == 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
        else
        {
          do
            v15 = __ldaxr(v13);
          while (__stlxr(v15 - 1, v13));
        }
      }
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *--v7;
      *v7 = 0;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v12 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

BOOL ___ZNK2TI8Favonius10BeamSearch29search_node_for_accepted_textERKN2KB6StringEj_block_invoke(uint64_t a1, TI::Favonius::SearchNode **a2)
{
  int v3;
  _BOOL8 v4;
  KB::String *v5;
  TI::Favonius::SearchNode *v6;
  _BOOL4 v7;
  int v9;
  __int16 v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 40);
  if (v3)
    return *((_DWORD *)*a2 + 10) == v3;
  v5 = *(KB::String **)(a1 + 32);
  v6 = *a2;
  v9 = 0x100000;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  TI::Favonius::SearchNode::input_string_recursive(v6, (KB::String *)&v9, 0);
  v7 = KB::String::equal(v5, (const KB::String *)&v9, 0);
  v4 = 0;
  if (v7)
    v4 = (*((_WORD *)*a2 + 60) & 0xB81) == 0;
  if (v12 && v11 == 1)
    free(v12);
  return v4;
}

uint64_t TI::Favonius::BeamSearch::search_node_with_typing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
  v6 = *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  if (v6 == v5)
    return 0;
  v7 = v4;
  while ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v6 + 56) + 192))(*(_QWORD *)(*(_QWORD *)v6 + 56)) != v7
       || !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v6 + 56) + 184))(*(_QWORD *)(*(_QWORD *)v6 + 56), a2))
  {
    v6 += 8;
    if (v6 == v5)
      return 0;
  }
  return *(_QWORD *)v6;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, float a6)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  v10 = (_QWORD *)*a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v10;
  v11 = v10[3];
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v10 = *(_QWORD **)(a1 + 16);
  }
  v14 = v10[4];
  *(_QWORD *)(a1 + 32) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v10 = *(_QWORD **)(a1 + 16);
  }
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v17;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(v10 + 6));
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v19 = *(const void **)a4;
  v18 = *(_QWORD *)(a4 + 8);
  v20 = v18 - *(_QWORD *)a4;
  if (v18 != *(_QWORD *)a4)
  {
    if (v18 - *(_QWORD *)a4 < 0)
      goto LABEL_25;
    v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v20 >> 3);
    *(_QWORD *)(a1 + 152) = v21;
    *(_QWORD *)(a1 + 160) = v21;
    *(_QWORD *)(a1 + 168) = &v21[8 * v22];
    memmove(v21, v19, v20);
    *(_QWORD *)(a1 + 160) = &v21[v20];
  }
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v24 = *(char **)(a4 + 24);
  v23 = *(char **)(a4 + 32);
  v25 = v23 - v24;
  if (v23 == v24)
    goto LABEL_20;
  if (v25 < 0)
LABEL_25:
    abort();
  v26 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v25 >> 3);
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v26;
  *(_QWORD *)(a1 + 192) = &v26[v27];
  do
  {
    v28 = *(_QWORD *)v24;
    *v26 = *(_QWORD *)v24;
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    v24 += 8;
    ++v26;
  }
  while (v24 != v23);
  *(_QWORD *)(a1 + 184) = v26;
LABEL_20:
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  v31 = *a5;
  *a5 = 0;
  v33 = v31;
  TI::Favonius::BeamSearch::advance_search_beam(a1, (_QWORD *)(a1 + 200), (TI::Favonius::SearchNodeSourceQueue *)(a1 + 152), (_QWORD *)(a1 + 248), &v33, &v34, a6);
  if (v33)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v33);
  TI::Favonius::BeamSearch::initialize_input_node(a1, &v34, a6);
  if (v34)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v34);
  return a1;
}

TI::Favonius::SearchNodeSource *TI::Favonius::BeamSearch::advance_search_beam@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, TI::Favonius::SearchNodeSourceQueue *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X4>, unsigned int **a6@<X8>, float a7@<S0>)
{
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  TI::Favonius::SearchNodeSource *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  TI::Favonius::SearchNodeSource *v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  TI::Favonius::SearchNodeSource *result;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  _QWORD *v89;
  TI::Favonius::SearchNodeSource *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  TI::Favonius::SearchNodeSource *v95;
  TI::Favonius::SearchNodeSource *v96;
  __int128 v97;
  unint64_t v98;
  _QWORD *v99;

  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::reserve(a2, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24));
  TI::Favonius::SearchNodeSourceQueue::next_search_node(a3, -INFINITY, &v96);
  v13 = (unint64_t)v96;
  v95 = v96;
  if (v96)
    std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::push_back[abi:nn180100](a2, (uint64_t *)&v95);
  v14 = *a5;
  *a5 = 0;
  v15 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 280);
  v93 = v15;
  v94 = (unsigned int *)v14;
  if (v15)
  {
    v16 = v15 + 2;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v13 = (unint64_t)v95;
  }
  if (v13)
  {
    v96 = 0;
    v18 = TI::Favonius::BeamSearch::choose_hit_test_node(&v93, &v94, &v96, &v95);
    v92 = v18;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      if (v96)
      {
        v21 = (unsigned int *)((char *)v96 + 8);
        v22 = atomic_load((unsigned int *)v96 + 2);
        if (v22 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v96 + 8))();
        }
        else
        {
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 - 1, v21));
        }
      }
    }
    v13 = (unint64_t)v95;
    v89 = (_QWORD *)(a1 + 40);
    if (v95)
    {
      v24 = *((float *)v95 + 39);
      v25 = (float)(v24 + (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40)))
          + (float)(a7 * -5.9915);
      goto LABEL_19;
    }
  }
  else
  {
    v92 = 0;
    v89 = (_QWORD *)(a1 + 40);
  }
  v25 = -INFINITY;
LABEL_19:
  v26 = -1;
  v27 = a1;
  do
  {
    v27 = *(_QWORD *)(v27 + 16);
    ++v26;
  }
  while (v27);
  if (v13)
  {
    v28 = *(_QWORD *)(v13 + 56);
    if (v28)
      v13 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 160))(v28) ^ 1;
    else
      v13 = 1;
  }
  v29 = (double *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
  v30 = *(_QWORD *)(a1 + 24);
  v31 = v29[4] + *(double *)(v30 + 32);
  while (1)
  {
    v32 = (uint64_t)(a2[1] - *a2) >> 3;
    if (v32 >= *(_QWORD *)(v30 + 16) && (v32 >= *(_QWORD *)(v30 + 24) || KB::system_uptime((KB *)v29) >= v31))
      break;
    TI::Favonius::SearchNodeSourceQueue::next_search_node(a3, v25, &v96);
    v33 = v96;
    v91 = v96;
    if (!v96)
      break;
    v34 = TI::Favonius::BeamSearch::search_node_with_typing(a1, *((_QWORD *)v96 + 7));
    if (v34)
      v35 = 0;
    else
      v35 = v26 >= 4;
    if (v35)
    {
      v38 = (unsigned int *)*((_QWORD *)v33 + 16);
      if (v38)
      {
        v39 = v38 + 2;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
      }
      v41 = v38 + 2;
      v42 = (*(float (**)(unsigned int *))(*(_QWORD *)v38 + 16))(v38);
      v43 = atomic_load(v38 + 2);
      if (v43 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
      }
      else
      {
        do
          v44 = __ldaxr(v41);
        while (__stlxr(v44 - 1, v41));
      }
      if (v42 <= (float)((float)(v26 + 3) * -0.8))
      {
LABEL_35:
        v36 = v13;
        v37 = a4;
        goto LABEL_56;
      }
    }
    else if (v34)
    {
      goto LABEL_35;
    }
    v45 = TI::Favonius::BeamSearch::choose_hit_test_node(&v93, &v94, &v92, &v91);
    if (v45)
    {
      v46 = (unsigned int *)(v45 + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 + 1, v46));
    }
    v48 = (unsigned int *)v92;
    v92 = v45;
    if (v48)
    {
      v49 = v48 + 2;
      v50 = atomic_load(v48 + 2);
      if (v50 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      }
      else
      {
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
      }
    }
    v52 = *((_QWORD *)v91 + 7);
    if (!v52)
    {
      v36 = 1;
      v37 = a4;
      if ((v13 & 1) != 0)
        goto LABEL_56;
LABEL_55:
      v37 = a2;
      goto LABEL_56;
    }
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 160))(v52);
    v36 = v53 ^ 1 | v13;
    if ((v53 & 1) != 0)
      goto LABEL_55;
    v37 = a4;
    if (((v13 ^ 1) & 1) != 0)
      goto LABEL_55;
LABEL_56:
    v54 = v37[2];
    v55 = (_QWORD *)v37[1];
    if ((unint64_t)v55 >= v54)
    {
      v57 = (_QWORD *)*v37;
      v58 = ((uint64_t)v55 - *v37) >> 3;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61)
        abort();
      v60 = v54 - (_QWORD)v57;
      if (v60 >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      v99 = v37 + 2;
      if (v61)
      {
        v61 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v61);
        v57 = (_QWORD *)*v37;
        v55 = (_QWORD *)v37[1];
      }
      else
      {
        v62 = 0;
      }
      v63 = (_QWORD *)(v61 + 8 * v58);
      v64 = v61 + 8 * v62;
      v98 = v64;
      *v63 = 0;
      *((_QWORD *)&v97 + 1) = v63 + 1;
      if (v55 == v57)
      {
        v56 = v63 + 1;
      }
      else
      {
        do
        {
          v65 = *--v55;
          *v55 = 0;
          *--v63 = v65;
        }
        while (v55 != v57);
        v56 = (_QWORD *)*((_QWORD *)&v97 + 1);
        v64 = v98;
      }
      v66 = *(_OWORD *)v37;
      *v37 = v63;
      v37[1] = v56;
      v97 = v66;
      v67 = v37[2];
      v37[2] = v64;
      v98 = v67;
      v96 = (TI::Favonius::SearchNodeSource *)v66;
      std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v96);
    }
    else
    {
      *v55 = 0;
      v56 = v55 + 1;
    }
    v37[1] = v56;
    v68 = v91;
    v91 = 0;
    v69 = (unsigned int *)*(v56 - 1);
    *(v56 - 1) = v68;
    if (v69)
    {
      v70 = v69 + 2;
      v71 = atomic_load(v69 + 2);
      if (v71 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
      }
      else
      {
        do
          v72 = __ldaxr(v70);
        while (__stlxr(v72 - 1, v70));
      }
    }
    v29 = (double *)v91;
    if (v91)
    {
      v73 = (unsigned int *)((char *)v91 + 8);
      v74 = atomic_load((unsigned int *)v91 + 2);
      if (v74 == 1)
      {
        v29 = (double *)(*(uint64_t (**)(void))(*(_QWORD *)v91 + 8))();
      }
      else
      {
        do
          v75 = __ldaxr(v73);
        while (__stlxr(v75 - 1, v73));
      }
    }
    v30 = *(_QWORD *)(a1 + 24);
    v13 = v36;
  }
  v76 = v94;
  if (!v94)
  {
    if (v92)
    {
      v76 = *(unsigned int **)(v92 + 48);
      if (v76)
      {
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
LABEL_88:
        if (v94)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v94);
      }
    }
    else
    {
      v76 = **(unsigned int ***)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v89 + 64))(*v89) + 8);
      if (v76)
      {
        do
          v78 = __ldaxr(v76);
        while (__stlxr(v78 + 1, v76));
        goto LABEL_88;
      }
    }
  }
  TI::Favonius::SearchNodeSourceQueue::clean_up(a3);
  v94 = 0;
  *a6 = v76;
  if (v92)
  {
    v79 = (unsigned int *)(v92 + 8);
    v80 = atomic_load((unsigned int *)(v92 + 8));
    if (v80 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v92 + 8))();
    }
    else
    {
      do
        v81 = __ldaxr(v79);
      while (__stlxr(v81 - 1, v79));
    }
  }
  if (v93)
  {
    v82 = v93 + 2;
    v83 = atomic_load(v93 + 2);
    if (v83 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v93 + 8))();
    }
    else
    {
      do
        v84 = __ldaxr(v82);
      while (__stlxr(v84 - 1, v82));
    }
  }
  if (v94)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v94);
  result = v95;
  if (v95)
  {
    v86 = (unsigned int *)((char *)v95 + 8);
    v87 = atomic_load((unsigned int *)v95 + 2);
    if (v87 == 1)
    {
      return (TI::Favonius::SearchNodeSource *)(*(uint64_t (**)(void))(*(_QWORD *)v95 + 8))();
    }
    else
    {
      do
        v88 = __ldaxr(v86);
      while (__stlxr(v88 - 1, v86));
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::choose_hit_test_node(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v14;
  BOOL v16;
  uint64_t (***v17)(_QWORD);

  v5 = *a4;
  v6 = *(_QWORD *)(*a4 + 48);
  if (!v6)
    goto LABEL_25;
  if (*a2 && *a2 != v6)
    goto LABEL_25;
  v8 = a4;
  v9 = *a3;
  if (*a3)
  {
    v10 = *(float *)(v6 + 32);
    v11 = *(_QWORD *)(v9 + 48);
    v12 = *(float *)(v11 + 32);
    if ((float)(v10 * 4.0) > v12 || v10 <= v12)
    {
      if ((float)(v10 * 4.0) > v12)
        return *v8;
    }
    else if ((float)(*(float *)(v5 + 144) + (float)(*(float *)(v5 + 136) * 0.18)) > (float)(*(float *)(v9 + 144)
                                                                                           + (float)(*(float *)(v9 + 136) * 0.18)))
    {
      return *v8;
    }
    v14 = *(_QWORD *)(v5 + 32);
    v16 = v6 != v11 || *a1 != v14 || v14 == 0;
    if (v16
      || (v17 = *(uint64_t (****)(_QWORD))(v5 + 56)) == 0
      || (**v17)(v17) != *(_QWORD *)(*(_QWORD *)(v5 + 32) + 56))
    {
LABEL_25:
      v8 = a3;
    }
  }
  return *v8;
}

uint64_t std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:nn180100]<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>,0>(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t **a4, unsigned int **a5, float a6)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  v10 = (_QWORD *)*a2;
  *a2 = 0;
  v11 = v10[3];
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v10 = *(_QWORD **)(a1 + 16);
  }
  v14 = v10[4];
  *(_QWORD *)(a1 + 32) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v10 = *(_QWORD **)(a1 + 16);
  }
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v17;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), (const KB::LanguageModelContext *)(v10 + 6));
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 200), *a4, a4[1], a4[1] - *a4);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  TI::Favonius::BeamSearch::initialize_input_node(a1, a5, a6);
  return a1;
}

unsigned int *TI::Favonius::BeamSearch::initialize_search_for_extensions(unsigned int *a1, TI::Favonius::SearchNodeSourceQueue *a2, unsigned int **a3, float a4)
{
  unsigned int *v7;
  uint64_t *i;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int *result;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  v7 = *a3;
  *a3 = 0;
  v15 = v7;
  v9 = (uint64_t *)*((_QWORD *)a1 + 25);
  for (i = (uint64_t *)*((_QWORD *)a1 + 26); v9 != i; i = (uint64_t *)*((_QWORD *)a1 + 26))
  {
    if (TI::Favonius::BeamSearch::should_extend_for_hit_testing(a1, (uint64_t)v9, *(unsigned __int8 *)(*((_QWORD *)a1 + 3) + 12)))
    {
      v10 = TI::Favonius::BeamSearch::add_extensions_to_fringe((uint64_t)a1, a2, v9, &v15, a4);
      TI::Favonius::BeamSearch::add_unmatched_touch_extensions_to_fringe(a4, (uint64_t)v10, a2, v9, &v15);
    }
    ++v9;
  }
  result = TI::Favonius::BeamSearch::add_transposition_extensions_to_fringe(a1, a2, &v15, a4);
  if (v7)
  {
    v12 = v7 + 2;
    v13 = atomic_load(v7 + 2);
    if (v13 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::should_extend_for_hit_testing(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  uint64_t should_extend_for_hit_testing;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;

  v6 = *(_WORD *)(*(_QWORD *)a2 + 120);
  should_extend_for_hit_testing = 1;
  if (!KB::String::equal((KB::String *)(*(_QWORD *)a2 + 88), (const KB::String *)(a1[35] + 88), 1)
    && (v6 & 0xE) == 0)
  {
    v8 = *(_QWORD **)a2;
    if ((v6 & 0x20) == 0
      || !(_DWORD)a3
      || (v9 = v8[4], (*(_WORD *)(v9 + 120) & 0x4E) == 0)
      || !*(_QWORD *)(v9 + 56)
      || (*(_DWORD *)(v9 + 140) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      if (!(*(unsigned int (**)(_QWORD *))(*v8 + 64))(v8)
        && (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1)
        && *(_QWORD *)(*(_QWORD *)a2 + 32))
      {
        v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
        v12 = *(unsigned int **)(*(_QWORD *)a2 + 32);
        v19 = v12;
        if (v12)
        {
          v13 = v12 + 2;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v15 = v19;
          should_extend_for_hit_testing = TI::Favonius::BeamSearch::should_extend_for_hit_testing(v11, &v19, a3);
          if (v15)
          {
            v16 = v15 + 2;
            v17 = atomic_load(v15 + 2);
            if (v17 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
            }
            else
            {
              do
                v18 = __ldaxr(v16);
              while (__stlxr(v18 - 1, v16));
            }
          }
        }
        else
        {
          return TI::Favonius::BeamSearch::should_extend_for_hit_testing(v11, &v19, a3);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return should_extend_for_hit_testing;
}

unsigned int *TI::Favonius::BeamSearch::add_extensions_to_fringe(uint64_t a1, TI::Favonius::SearchNodeSourceQueue *a2, uint64_t *a3, unsigned int **a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *result;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  float v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  TI::Favonius::KeyFactory *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  TI::Favonius::SearchNodeLanguageExtensions *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a3;
  v12 = v10 && (*(_WORD *)(v11 + 120) & 0x20) != 0 && (*(_WORD *)(*(_QWORD *)(a1 + 280) + 120) & 0x20) == 0;
  v81 = *a4;
  if (v81)
  {
    v13 = v81 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  TI::Favonius::SearchNodeGeometryExtensions::create(v11, &v81, v12, (uint64_t *)&v82, a5);
  TI::Favonius::SearchNodeSourceQueue::insert(a2, (uint64_t *)&v82);
  if (v82)
  {
    v15 = v82 + 2;
    v16 = atomic_load(v82 + 2);
    if (v16 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v82 + 8))(v82);
    }
    else
    {
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
    }
  }
  if (v81)
  {
    v18 = v81 + 2;
    v19 = atomic_load(v81 + 2);
    if (v19 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v81 + 8))(v81);
    }
    else
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  v21 = *a3;
  if (*(_QWORD *)(*a3 + 32))
  {
    v22 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40)) + 56);
    v23 = *(unsigned int *)(v22 + 200);
    v24 = (unint64_t)((uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3) >> 1;
    if (v23 <= 0xB && v24 >= v23)
    {
      v21 = *a3;
    }
    else
    {
      v26 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a4 + 56))(*a4) + 56);
      v27 = *(unsigned int *)(v26 + 200);
      v28 = (unint64_t)((uint64_t)(*(_QWORD *)(v26 + 16) - *(_QWORD *)(v26 + 8)) >> 3) >> 1;
      v21 = *a3;
      if (v27 > 0xB || v28 < v27)
      {
        v30 = *a4;
        v79 = v30;
        if (v30)
        {
          v31 = v30 + 2;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 1, v31));
        }
        TI::Favonius::SearchNodeLanguageThenGeometryExtensions::create(v21, &v79, *(_BYTE *)(*(_QWORD *)(a1 + 24) + 12), (uint64_t *)&v80, a5);
        TI::Favonius::SearchNodeSourceQueue::insert(a2, (uint64_t *)&v80);
        if (v80)
        {
          v33 = v80 + 2;
          v34 = atomic_load(v80 + 2);
          if (v34 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v80 + 8))();
          }
          else
          {
            do
              v35 = __ldaxr(v33);
            while (__stlxr(v35 - 1, v33));
          }
        }
        if (v79)
        {
          v36 = v79 + 2;
          v37 = atomic_load(v79 + 2);
          if (v37 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v79 + 8))();
          }
          else
          {
            do
              v38 = __ldaxr(v36);
            while (__stlxr(v38 - 1, v36));
          }
        }
        goto LABEL_39;
      }
    }
  }
  if (*(_QWORD *)(a1 + 280) == v21
    && *(_BYTE *)(*(_QWORD *)(a1 + 24) + 12)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v21 + 56) + 64))(*(_QWORD *)(v21 + 56)))
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v55 = *(_QWORD *)(a1 + 280);
    v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 56) + 8))(*(_QWORD *)(v55 + 56));
    v57 = (TI::Favonius::KeyFactory *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
    TI::Favonius::KeyFactory::create_key(v57, 0x20u, &v74);
    v75 = v74;
    TI::Favonius::SearchNode::get_language_extensions(v55, &v76, (uint64_t *)&v75);
    if (v75)
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v75);
    if (v76)
    {
      v58 = v77;
      v59 = &v77[v76];
      do
      {
        v60 = *a3;
        v61 = *a4;
        v72 = v61;
        if (v61)
        {
          v62 = v61 + 2;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
        }
        TI::Favonius::SearchNodeGeometryExtensionsInsertingKey::create(v60, &v72, *v58, (uint64_t *)&v73, a5);
        TI::Favonius::SearchNodeSourceQueue::insert(a2, (uint64_t *)&v73);
        if (v73)
        {
          v64 = v73 + 2;
          v65 = atomic_load(v73 + 2);
          if (v65 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v73 + 8))();
          }
          else
          {
            do
              v66 = __ldaxr(v64);
            while (__stlxr(v66 - 1, v64));
          }
        }
        if (v72)
        {
          v67 = v72 + 2;
          v68 = atomic_load(v72 + 2);
          if (v68 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v72 + 8))();
          }
          else
          {
            do
              v69 = __ldaxr(v67);
            while (__stlxr(v69 - 1, v67));
          }
        }
        ++v58;
      }
      while (v58 != v59);
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v76);
  }
LABEL_39:
  result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a4 + 56))(*a4);
  v40 = *((_QWORD *)result + 7);
  v41 = *(unsigned int *)(v40 + 200);
  v42 = (unint64_t)((uint64_t)(*(_QWORD *)(v40 + 16) - *(_QWORD *)(v40 + 8)) >> 3) >> 1;
  if (v41 > 0xB || v42 < v41)
  {
    v44 = (*(float (**)(unsigned int *))(*(_QWORD *)*a4 + 16))(*a4);
    v45 = *a3;
    v46 = *a4;
    v70 = v46;
    if (v46)
    {
      v47 = v46 + 2;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 + 1, v47));
    }
    TI::Favonius::SearchNodeLanguageExtensions::create(v45, &v70, &v71, a5, NAN, v44);
    TI::Favonius::SearchNodeSourceQueue::insert(a2, (uint64_t *)&v71);
    if (v71)
    {
      v49 = (unsigned int *)((char *)v71 + 8);
      v50 = atomic_load((unsigned int *)v71 + 2);
      if (v50 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v71 + 8))();
      }
      else
      {
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
      }
    }
    result = v70;
    if (v70)
    {
      v52 = v70 + 2;
      v53 = atomic_load(v70 + 2);
      if (v53 == 1)
      {
        return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v70 + 8))();
      }
      else
      {
        do
          v54 = __ldaxr(v52);
        while (__stlxr(v54 - 1, v52));
      }
    }
  }
  return result;
}

unsigned int *TI::Favonius::BeamSearch::add_unmatched_touch_extensions_to_fringe(float a1, uint64_t a2, TI::Favonius::SearchNodeSourceQueue *a3, uint64_t *a4, unsigned int **a5)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;

  v6 = *a4;
  v7 = *a5;
  v17 = v7;
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  TI::Favonius::SearchNodeSkippingTouch::create(v6, &v17, (uint64_t *)&v18, a1);
  TI::Favonius::SearchNodeSourceQueue::insert(a3, (uint64_t *)&v18);
  if (v18)
  {
    v10 = v18 + 2;
    v11 = atomic_load(v18 + 2);
    if (v11 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v18 + 8))();
    }
    else
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
    }
  }
  result = v17;
  if (v17)
  {
    v14 = v17 + 2;
    v15 = atomic_load(v17 + 2);
    if (v15 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v17 + 8))();
    }
    else
    {
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
    }
  }
  return result;
}

unsigned int *TI::Favonius::BeamSearch::add_transposition_extensions_to_fringe(unsigned int *result, TI::Favonius::SearchNodeSourceQueue *a2, unsigned int **a3, float a4)
{
  unsigned int *v4;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t *i;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;

  v4 = (unsigned int *)*((_QWORD *)result + 2);
  if (v4)
  {
    v8 = result;
    v9 = v4 + 2;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    for (i = (uint64_t *)*((_QWORD *)v4 + 25); i != *((uint64_t **)v4 + 26); ++i)
    {
      result = (unsigned int *)TI::Favonius::BeamSearch::should_extend_for_hit_testing(v4, (uint64_t)i, *(unsigned __int8 *)(*((_QWORD *)v8 + 3) + 12));
      if ((_DWORD)result)
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)v8 + 3) + 12);
        v13 = *i;
        v14 = (unsigned int *)*((_QWORD *)v8 + 5);
        v32 = v14;
        if (v14)
        {
          v15 = v14 + 2;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
        v17 = *a3;
        v31 = v17;
        if (v17)
        {
          v18 = v17 + 2;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        TI::Favonius::SearchNodeTranspositionGeometryExtensions::create(v13, &v32, &v31, v12 != 0, (uint64_t *)&v33, a4);
        TI::Favonius::SearchNodeSourceQueue::insert(a2, (uint64_t *)&v33);
        if (v33)
        {
          v20 = v33 + 2;
          v21 = atomic_load(v33 + 2);
          if (v21 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v33 + 8))();
          }
          else
          {
            do
              v22 = __ldaxr(v20);
            while (__stlxr(v22 - 1, v20));
          }
        }
        if (v31)
        {
          v23 = v31 + 2;
          v24 = atomic_load(v31 + 2);
          if (v24 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v31 + 8))();
          }
          else
          {
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
          }
        }
        result = v32;
        if (v32)
        {
          v26 = v32 + 2;
          v27 = atomic_load(v32 + 2);
          if (v27 == 1)
          {
            result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 8))();
          }
          else
          {
            do
              v28 = __ldaxr(v26);
            while (__stlxr(v28 - 1, v26));
          }
        }
      }
    }
    v29 = atomic_load(v9);
    if (v29 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
    else
    {
      do
        v30 = __ldaxr(v9);
      while (__stlxr(v30 - 1, v9));
    }
  }
  return result;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v4;
  unsigned int *i;
  std::vector<unsigned int> *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *value;
  const unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<unsigned int>::size_type v19;
  unsigned int *v20;
  const unsigned int *v21;
  const unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  std::vector<unsigned int>::size_type v25;
  unsigned int *v26;
  std::vector<unsigned int>::size_type v27;
  unsigned int *v28;
  std::__split_buffer<unsigned int> __v;

  if (__n)
  {
    v4 = __x;
    i = (unsigned int *)__position.__i_;
    v7 = this;
    p_end_cap = (std::allocator<unsigned int> *)&this->__end_cap_;
    value = this->__end_cap_.__value_;
    end = this->__end_;
    if (__n <= value - end)
    {
      v17 = (char *)end - (char *)__position.__i_;
      if (__n <= end - __position.__i_)
      {
        v20 = this->__end_;
        v19 = __n;
      }
      else
      {
        v18 = 0;
        v19 = v17 >> 2;
        v20 = (unsigned int *)&end[__n - (v17 >> 2)];
        do
        {
          end[v18 / 4] = *__x;
          v18 += 4;
        }
        while (4 * __n - 4 * v19 != v18);
        this->__end_ = v20;
        if (end == __position.__i_)
          return (std::vector<unsigned int>::iterator)this;
      }
      v21 = &__position.__i_[__n];
      v22 = &v20[-__n];
      v23 = v20;
      if (v22 < end)
      {
        v23 = v20;
        do
        {
          v24 = *v22++;
          *v23++ = v24;
        }
        while (v22 < end);
      }
      this->__end_ = v23;
      if (v20 != v21)
        this = (std::vector<unsigned int> *)memmove(&v20[-(v20 - v21)], __position.__i_, (char *)v20 - (char *)v21);
      if (i <= v4)
      {
        if (v7->__end_ <= v4)
          v25 = 0;
        else
          v25 = __n;
        v4 += v25;
      }
      do
      {
        *i++ = *v4;
        --v19;
      }
      while (v19);
    }
    else
    {
      begin = this->__begin_;
      v12 = __n + end - this->__begin_;
      if (v12 >> 62)
        abort();
      v13 = __position.__i_ - begin;
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v12)
        v12 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v12;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v15)
        v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v15);
      else
        v16 = 0;
      v26 = (unsigned int *)(v15 + 4 * v13);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v15;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = (unsigned int *)(v15 + 4 * v16);
      v27 = 4 * __n;
      v28 = &v26[__n];
      do
      {
        *v26++ = *v4;
        v27 -= 4;
      }
      while (v27);
      __v.__end_ = v28;
      std::vector<unsigned int>::__swap_out_circular_buffer(v7, &__v, i);
      this = (std::vector<unsigned int> *)__v.__first_;
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return (std::vector<unsigned int>::iterator)this;
}

BOOL ___ZNK2TI8Favonius10BeamSearch27alignment_for_accepted_textERKN2KB6StringES5_RS3__block_invoke(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (a2 == -1)
    return 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int16 *)(v3 + 4);
  if (!*(_WORD *)(v3 + 4))
  {
    KB::String::compute_length(*(unsigned __int16 **)(a1 + 32));
    v4 = *(unsigned __int16 *)(v3 + 4);
  }
  return v4 <= a2;
}

uint64_t TI::Favonius::BeamSearchAlgorithm::create_search@<X0>(unsigned int *a1@<X0>, KB::LanguageModelContext *a2@<X1>, unsigned int **a3@<X3>, unsigned int **a4@<X4>, unsigned int **a5@<X5>, void ***a6@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  void *v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  void **v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t result;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int **v84;
  uint64_t v85;
  void **v86;
  __int128 v87;
  unint64_t v88;
  unint64_t *v89;

  v6 = *a3;
  *a3 = 0;
  v73 = *a4;
  v74 = v6;
  *a4 = 0;
  v7 = *a5;
  *a5 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  (**(void (***)(unsigned int *, unint64_t *))v6)(v6, &v83);
  v86 = (void **)&__block_literal_global_31;
  v8 = 126 - 2 * __clz(v83);
  if (v83)
    v9 = v8;
  else
    v9 = 0;
  std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*,false>((uint64_t)v84, (uint64_t *)&v84[v83], (uint64_t)&v86, v9, 1);
  v10 = v83;
  v11 = v84;
  if (v83 >= 4)
  {
    v12 = v84 + 3;
    v13 = &v84[v83];
    v14 = v84 + 3;
    do
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v15 + 2;
        v17 = atomic_load(v15 + 2);
        if (v17 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 248))(v15);
        }
        else
        {
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
        }
      }
      ++v14;
    }
    while (v14 != v13);
    v19 = v83;
    v11 = v84;
    memmove(v12, v13, (char *)&v84[v83] - (char *)v13);
    v10 = v19 - v10 + 3;
    v83 = v10;
  }
  v81 = 0uLL;
  v82 = 0;
  if (v10)
  {
    v20 = &v11[v10];
    v21 = v7 + 2;
    do
    {
      v79 = v7;
      if (v7)
      {
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
      }
      v23 = *v11;
      *v11 = 0;
      v78 = v23;
      TI::Favonius::SearchNode::create_root(&v79, &v78, &v80);
      v24 = v80;
      v80 = 0;
      v25 = (_QWORD *)*((_QWORD *)&v81 + 1);
      if (*((_QWORD *)&v81 + 1) >= v82)
      {
        v27 = (_QWORD *)v81;
        v28 = (uint64_t)(*((_QWORD *)&v81 + 1) - v81) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          abort();
        v30 = v82 - v81;
        if ((uint64_t)(v82 - v81) >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v89 = &v82;
        if (v31)
        {
          v31 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v31);
          v25 = (_QWORD *)*((_QWORD *)&v81 + 1);
          v27 = (_QWORD *)v81;
        }
        else
        {
          v32 = 0;
        }
        v33 = (uint64_t *)(v31 + 8 * v28);
        v34 = v31 + 8 * v32;
        v88 = v34;
        *v33 = v24;
        *((_QWORD *)&v87 + 1) = v33 + 1;
        if (v25 == v27)
        {
          v26 = v33 + 1;
        }
        else
        {
          do
          {
            v35 = *--v25;
            *v25 = 0;
            *--v33 = v35;
          }
          while (v25 != v27);
          v26 = (_QWORD *)*((_QWORD *)&v87 + 1);
          v34 = v88;
        }
        v36 = v81;
        *(_QWORD *)&v81 = v33;
        *((_QWORD *)&v81 + 1) = v26;
        v87 = v36;
        v37 = v82;
        v82 = v34;
        v88 = v37;
        v86 = (void **)v36;
        std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v86);
      }
      else
      {
        **((_QWORD **)&v81 + 1) = v24;
        v26 = v25 + 1;
      }
      *((_QWORD *)&v81 + 1) = v26;
      if (v78)
      {
        v38 = v78 + 2;
        v39 = atomic_load(v78 + 2);
        if (v39 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v78 + 248))();
        }
        else
        {
          do
            v40 = __ldaxr(v38);
          while (__stlxr(v40 - 1, v38));
        }
      }
      if (v79)
      {
        v41 = v79 + 2;
        v42 = atomic_load(v79 + 2);
        if (v42 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v79 + 8))();
        }
        else
        {
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
        }
      }
      ++v11;
    }
    while (v11 != v20);
  }
  v77 = a1;
  if (a1)
  {
    v44 = a1 + 2;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
  }
  v76 = v73;
  if (v73)
  {
    v46 = v73 + 2;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  v75 = v7;
  if (v7)
  {
    v48 = v7 + 2;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  TI::Favonius::BeamSearch::create(&v77, &v76, a2, &v75, (uint64_t **)&v81, (uint64_t *)&v86);
  v50 = v86;
  v86 = 0;
  *a6 = v50;
  if (v75)
  {
    v51 = v75 + 2;
    v52 = atomic_load(v75 + 2);
    if (v52 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v75 + 8))();
    }
    else
    {
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
    }
  }
  if (v76)
  {
    v54 = v76 + 2;
    v55 = atomic_load(v76 + 2);
    if (v55 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v76 + 8))();
    }
    else
    {
      do
        v56 = __ldaxr(v54);
      while (__stlxr(v56 - 1, v54));
    }
  }
  if (v77)
  {
    v57 = v77 + 2;
    v58 = atomic_load(v77 + 2);
    if (v58 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v77 + 16))();
    }
    else
    {
      do
        v59 = __ldaxr(v57);
      while (__stlxr(v59 - 1, v57));
    }
  }
  v86 = (void **)&v81;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v86);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)&v83);
  if (v7)
  {
    v60 = v7 + 2;
    v61 = atomic_load(v7 + 2);
    if (v61 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
    else
    {
      do
        v62 = __ldaxr(v60);
      while (__stlxr(v62 - 1, v60));
    }
  }
  if (v73)
  {
    v63 = v73 + 2;
    v64 = atomic_load(v73 + 2);
    if (v64 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
    }
    else
    {
      do
        v65 = __ldaxr(v63);
      while (__stlxr(v65 - 1, v63));
    }
  }
  result = (uint64_t)v74;
  v67 = v74 + 2;
  v68 = atomic_load(v74 + 2);
  if (v68 == 1)
    return (*(uint64_t (**)(void))(*(_QWORD *)v74 + 40))();
  do
    v69 = __ldaxr(v67);
  while (__stlxr(v69 - 1, v67));
  return result;
}

void TI::Favonius::BeamSearchAlgorithm::~BeamSearchAlgorithm(TI::Favonius::BeamSearchAlgorithm *this)
{
  JUMPOUT(0x1DF0A2144);
}

unsigned int *TI::Favonius::BeamSearch::create@<X0>(unsigned int **a1@<X0>, unsigned int **a2@<X1>, KB::LanguageModelContext *a3@<X2>, unsigned int **a4@<X3>, uint64_t **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;

  v12 = operator new();
  v13 = *a1;
  *a1 = 0;
  v14 = *a2;
  *a2 = 0;
  v27 = v14;
  v28 = v13;
  v15 = *a4;
  *a4 = 0;
  v26 = v15;
  *a6 = TI::Favonius::BeamSearch::BeamSearch(v12, (uint64_t *)&v28, (uint64_t *)&v27, a3, (uint64_t *)&v26, a5);
  if (v26)
  {
    v16 = v26 + 2;
    v17 = atomic_load(v26 + 2);
    if (v17 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v26 + 8))();
    }
    else
    {
      do
        v18 = __ldaxr(v16);
      while (__stlxr(v18 - 1, v16));
    }
  }
  if (v27)
  {
    v19 = v27 + 2;
    v20 = atomic_load(v27 + 2);
    if (v20 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v27 + 8))();
    }
    else
    {
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
    }
  }
  result = v28;
  if (v28)
  {
    v23 = v28 + 2;
    v24 = atomic_load(v28 + 2);
    if (v24 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 16))();
    }
    else
    {
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
    }
  }
  return result;
}

uint64_t TI::Favonius::BeamSearch::BeamSearch(uint64_t a1, uint64_t *a2, uint64_t *a3, KB::LanguageModelContext *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1EA101B40;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *a3;
  *a3 = 0;
  v10 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)(a1 + 48), a4);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNode>>::__init_with_size[abi:nn180100]<WTF::RefPtr<TI::Favonius::SearchNode>*,WTF::RefPtr<TI::Favonius::SearchNode>*>((_QWORD *)(a1 + 200), *a6, a6[1], a6[1] - *a6);
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  v11 = **(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 280) = v11;
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  return a1;
}

BOOL ___ZN2TI8Favonius19BeamSearchAlgorithm13create_searchERKN2KB20LanguageModelContextERKNS2_6StringEN3WTF10PassRefPtrINS0_11TypingModelEEENSA_INS0_18CandidateGeneratorEEENSA_INS0_12TouchHistoryEEE_block_invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  float v4;

  v4 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
  return v4 > (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
}

float TI::Favonius::BeamSearch::compute_language_power(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float result;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) + 56);
  v4 = *(unsigned int *)(v3 + 200);
  v5 = (unint64_t)((uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 3) >> 1;
  result = 0.24;
  if (a2)
    result = 0.12;
  if (v5 >= v4 && v4 <= 0xB)
    return 0.02;
  return result;
}

void TI::Favonius::BeamSearch::clear_cached_language_extensions(TI::Favonius::BeamSearch *this)
{
  uint64_t *i;
  uint64_t v3;

  for (i = (uint64_t *)*((_QWORD *)this + 25); i != *((uint64_t **)this + 26); ++i)
  {
    v3 = *i;
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v3 + 176);
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrinkCapacity(v3 + 200);
  }
}

void TI::Favonius::BeamSearch::log_search_nodes(uint64_t a1, unsigned int a2)
{
  const char *v3;
  TI::Favonius::SearchNode **v4;
  TI::Favonius::SearchNode **i;
  const char *v6;
  const char *v7;
  CFStringRef v8;
  CFStringRef v9;
  void *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  char v14;
  void *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0x100000;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  if (a2 > 6)
    v3 = "UNKNOWN";
  else
    v3 = off_1EA101E38[a2];
  KB::String::append_format((KB::String *)&v12, "BeamSearch(%s):\n", v3);
  v4 = *(TI::Favonius::SearchNode ***)(a1 + 200);
  for (i = *(TI::Favonius::SearchNode ***)(a1 + 208); v4 != i; ++v4)
  {
    TI::Favonius::SearchNode::debug_data(*v4, (uint64_t)&v9);
    v6 = (const char *)v10;
    if (!v10)
      v6 = (const char *)&v11;
    if ((_WORD)v9)
      v7 = v6;
    else
      v7 = "";
    KB::String::append_format((KB::String *)&v12, "    %s", v7);
    if (v10 && BYTE6(v9) == 1)
      free(v10);
  }
  KB::cf_string_impl<KB::String>(&v9, (unsigned __int16 *)&v12);
  v8 = v9;
  TIOSLogLines(v9);
  if (v8)
    CFRelease(v8);
  if (v15)
  {
    if (v14 == 1)
      free(v15);
  }
}

uint64_t TI::Favonius::BeamSearch::depth(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  LODWORD(this) = -1;
  do
  {
    v1 = *(_QWORD *)(v1 + 16);
    this = (this + 1);
  }
  while (v1);
  return this;
}

BOOL TI::Favonius::BeamSearch::is_ancestor(TI::Favonius::BeamSearch *this, const TI::Favonius::BeamSearch *a2)
{
  BOOL v2;

  if (this && this != a2)
  {
    do
    {
      this = (TI::Favonius::BeamSearch *)*((_QWORD *)this + 2);
      if (this)
        v2 = this == a2;
      else
        v2 = 1;
    }
    while (!v2);
  }
  return this == a2;
}

float TI::Favonius::BeamSearch::compute_pruning_threshold(uint64_t a1, uint64_t a2, float a3)
{
  float v3;

  if (!a2)
    return -INFINITY;
  v3 = *(float *)(a2 + 156);
  return (float)(v3 + (*(float (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1)) + (float)(a3 * -5.9915);
}

uint64_t TI::Favonius::BeamSearch::append_hit_keys(uint64_t result, char **a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  _QWORD *v34;

  if (result != a3)
  {
    v4 = (_QWORD *)result;
    TI::Favonius::BeamSearch::append_hit_keys(*(_QWORD *)(result + 16));
    v5 = (unint64_t)a2[2];
    v6 = a2[1];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (v6 - *a2) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        abort();
      v10 = v5 - (_QWORD)*a2;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      v34 = a2 + 2;
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v11);
      v14 = &v12[16 * v8];
      v7 = v14 + 16;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      v16 = *a2;
      v15 = a2[1];
      if (v15 == *a2)
      {
        v18 = vdupq_n_s64((unint64_t)v15);
      }
      else
      {
        do
        {
          v17 = *((_OWORD *)v15 - 1);
          v15 -= 16;
          *(_QWORD *)v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
          *((_OWORD *)v14 - 1) = v17;
          v14 -= 16;
        }
        while (v15 != v16);
        v18 = *(int64x2_t *)a2;
      }
      *a2 = v14;
      a2[1] = v7;
      v32 = v18;
      v19 = a2[2];
      a2[2] = &v12[16 * v13];
      v33 = v19;
      v31 = v18.i64[0];
      std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)&v31);
    }
    else
    {
      v7 = v6 + 16;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
    }
    a2[1] = v7;
    v20 = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    v21 = a2[1];
    if (v20)
    {
      v22 = (unsigned int *)(v20 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    v24 = (unsigned int *)*((_QWORD *)v21 - 2);
    *((_QWORD *)v21 - 2) = v20;
    if (v24)
    {
      v25 = v24 + 2;
      v26 = atomic_load(v24 + 2);
      if (v26 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
      }
      else
      {
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
      }
    }
    v28 = (unsigned int *)v4[34];
    v29 = a2[1];
    if (v28)
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 + 1, v28));
    }
    result = *((_QWORD *)v29 - 1);
    *((_QWORD *)v29 - 1) = v28;
    if (result)
      return WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
  }
  return result;
}

uint64_t TI::Favonius::BeamSearchAlgorithm::create@<X0>(TI::Favonius::BeamSearchAlgorithm *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X1>, uint64_t a5@<X2>, _QWORD *a6@<X8>)
{
  char v10;
  uint64_t result;

  v10 = (char)this;
  result = operator new();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1EA101DE0;
  *(_BYTE *)(result + 12) = v10;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(double *)(result + 32) = a2;
  *(double *)(result + 40) = a3;
  *a6 = result;
  return result;
}

uint64_t TI::Favonius::BeamSearchAlgorithm::BeamSearchAlgorithm(uint64_t this, char a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = &off_1EA101DE0;
  *(_BYTE *)(this + 12) = a2;
  *(_QWORD *)(this + 16) = a5;
  *(_QWORD *)(this + 24) = a6;
  *(double *)(this + 32) = a3;
  *(double *)(this + 40) = a4;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = &off_1EA101DE0;
  *(_BYTE *)(this + 12) = a2;
  *(_QWORD *)(this + 16) = a5;
  *(_QWORD *)(this + 24) = a6;
  *(double *)(this + 32) = a3;
  *(double *)(this + 40) = a4;
  return this;
}

void TI::Favonius::FavoniusStrokeBuildManager::~FavoniusStrokeBuildManager(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  TI::Favonius::FavoniusStrokeBuildManager::~FavoniusStrokeBuildManager(this);
  JUMPOUT(0x1DF0A2144);
}

{
  void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void **v26;

  *(_QWORD *)this = &off_1EA101E80;
  if (*((_BYTE *)this + 984))
  {
    v2 = (void *)*((_QWORD *)this + 120);
    if (v2 && *((_BYTE *)this + 958) == 1)
      free(v2);
    v3 = (void *)*((_QWORD *)this + 116);
    if (v3 && *((_BYTE *)this + 926) == 1)
      free(v3);
  }
  v26 = (void **)((char *)this + 872);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v26);
  v26 = (void **)((char *)this + 848);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v26);
  v26 = (void **)((char *)this + 824);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v26);
  v26 = (void **)((char *)this + 800);
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v26);
  std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((_QWORD **)this + 98));
  if (*((_BYTE *)this + 760) && *((char *)this + 759) < 0)
    operator delete(*((void **)this + 92));
  v4 = (const void *)*((_QWORD *)this + 91);
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 90);
  *((_OWORD *)this + 45) = 0u;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (void *)*((_QWORD *)this + 64);
  if (v9 && *((_BYTE *)this + 510) == 1)
    free(v9);
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  v26 = (void **)((char *)this + 304);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v26);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 296));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 288));
  v10 = (void *)*((_QWORD *)this + 30);
  if (v10)
  {
    *((_QWORD *)this + 31) = v10;
    operator delete(v10);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 224);
  v11 = (void *)*((_QWORD *)this + 21);
  if (v11)
  {
    *((_QWORD *)this + 22) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 17);
  if (v12 && *((_BYTE *)this + 134) == 1)
    free(v12);
  v13 = (void *)*((_QWORD *)this + 13);
  if (v13 && *((_BYTE *)this + 102) == 1)
    free(v13);
  WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector((uint64_t)this + 72);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector((_QWORD *)this + 6);
  v14 = (unsigned int *)*((_QWORD *)this + 5);
  if (v14)
  {
    v15 = v14 + 2;
    v16 = atomic_load(v14 + 2);
    if (v16 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    }
    else
    {
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
    }
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 24);
  v18 = (unsigned int *)*((_QWORD *)this + 2);
  if (v18)
  {
    v19 = v18 + 2;
    v20 = atomic_load(v18 + 2);
    if (v20 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
    else
    {
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
    }
  }
  v22 = (unsigned int *)*((_QWORD *)this + 1);
  if (v22)
  {
    v23 = v22 + 2;
    v24 = atomic_load(v22 + 2);
    if (v24 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 40))(v22);
    }
    else
    {
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
    }
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::engineType(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  const char *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  char v8;
  unsigned int *v10;
  _BYTE v11[8];
  void *v12;
  unsigned __int16 v13[3];
  char v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 90))
    return 1;
  v2 = (char *)this + 448;
  if (*((char *)this + 471) < 0)
    v2 = *(const char **)v2;
  KB::String::String((KB::String *)v13, v2);
  KB::String::String((KB::String *)v11, (const KB::String *)(*(_QWORD *)(*((_QWORD *)this + 90) + 8) + 208));
  v3 = *((_QWORD *)this + 1);
  if (v3 && (v4 = *(unsigned int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3)) != 0)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v10 = v4;
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + 1, v4));
    v7 = v10;
    v8 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(v13, (uint64_t)v11, &v10, (uint64_t)this + 736);
    WTF::RefCounted<KB::DictionaryContainer>::deref(v7);
    WTF::RefCounted<KB::DictionaryContainer>::deref(v4);
  }
  else
  {
    v10 = 0;
    v8 = TI::TIInputRecognizer::ml_based_tap_typing_enabled(v13, (uint64_t)v11, &v10, (uint64_t)this + 736);
  }
  if (v12 && v11[6] == 1)
    free(v12);
  if (v15)
  {
    if (v14 == 1)
      free(v15);
  }
  if ((v8 & 1) != 0)
    return 2;
  else
    return 1;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_down_or_drag(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  double v9;
  double v10;
  TI::Favonius::KeyboardLayout *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned int *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  std::string v45;
  uint64_t v46;
  unsigned int *v47[6];
  std::__shared_weak_count *v48;
  std::string __p;
  _BYTE v50[8];
  void *v51;
  unsigned int *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(*a2 + 32);
  v9 = *(double *)(v8 + 8);
  v10 = *(double *)(v8 + 16);
  v11 = *(TI::Favonius::KeyboardLayout **)(v8 + 56);
  *(double *)(a1 + 216) = TI::Favonius::KeyboardLayout::median_key_half_width(v11);
  v12 = *(unsigned int *)(v8 + 48);
  v13 = *(unsigned int *)(v8 + 40);
  v47[0] = (unsigned int *)v11;
  if (v11)
  {
    do
      v14 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v14 + 1, (unsigned int *)v11));
  }
  v15 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index((TI::Favonius::FavoniusStrokeBuildManager *)a1, v12);
  v16 = v15;
  v17 = (uint64_t *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) == v15)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15 - 8);
    v19 = *a2;
    *a2 = 0;
    v46 = v19;
    TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode((uint64_t *)&v52, *(_QWORD *)(v18 + 8), &v46, a3);
    v20 = *(_QWORD *)(a1 + 48);
    if (v20 == *(_QWORD *)(a1 + 64))
    {
      v21 = (unsigned int **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)(a1 + 48), v20 + 1, (unint64_t)&v52);
      v22 = *(_QWORD *)(a1 + 56);
      if (!v22)
      {
LABEL_15:
        if (v52)
          WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref((uint64_t)v52);
        if (v46)
          WTF::RefCounted<TI::Favonius::Touch>::deref(v46);
        TI::Favonius::FavoniusStrokeBuildManager::initialize_it_recognizer(a1, v47);
        TI::Favonius::FavoniusStrokeBuildManager::initialize_ensemble_path_recognizer((TI::Favonius::FavoniusStrokeBuildManager *)a1);
        goto LABEL_20;
      }
      v20 = *v17;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 56);
      v21 = &v52;
    }
    v26 = *v21;
    *(_QWORD *)(v22 + 8 * v20) = *v21;
    if (v26)
    {
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v20 = *v17;
    }
    *v17 = v20 + 1;
    goto LABEL_15;
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v15 - 1, (unint64_t *)&v52);
  v23 = v53[(_QWORD)v52 - 1];
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *a2;
  *a2 = 0;
  *(_QWORD *)(v23 + 8) = v25;
  if (v24)
    WTF::RefCounted<TI::Favonius::Touch>::deref(v24);
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, (uint64_t *)&v52);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&v52);
LABEL_20:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16) + 16) = a3;
  if ((a4 & 1) != 0 || (_DWORD)v13 != 1)
  {
    TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v16, &v52);
    v28 = v52;
    a3 = *((__int16 *)v52 + 31);
  }
  else
  {
    v28 = 0;
  }
  v29 = *(_QWORD **)(a1 + 704);
  if (!v29)
    goto LABEL_59;
  v30 = v47[0];
  if (!v47[0])
  {
    TI::CP::TIPathRecognizerInterface::set_key_layout(v29, 0);
    if ((_DWORD)v13)
      goto LABEL_29;
    goto LABEL_28;
  }
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  TI::CP::TIPathRecognizerInterface::set_key_layout(v29, v30);
  WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v30);
  if (!(_DWORD)v13)
LABEL_28:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 704) + 120))(*(_QWORD *)(a1 + 704), a1 + 224);
LABEL_29:
  (*(void (**)(_QWORD, uint64_t, uint64_t, double, double, double, double))(**(_QWORD **)(a1 + 704) + 32))(*(_QWORD *)(a1 + 704), v13, v12, v9, v10, *(double *)(a1 + 200), 0.0);
  if (v47[0])
  {
    v32 = atomic_load((unsigned __int8 *)(*(_QWORD *)(a1 + 704) + 633));
    if ((v32 & 1) == 0)
    {
      v33 = *(unsigned int **)(a1 + 704);
      v34 = *(std::__shared_weak_count **)(a1 + 712);
      if (v34)
      {
        p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
        do
          v36 = __ldxr(p_shared_weak_owners);
        while (__stxr(v36 + 1, p_shared_weak_owners));
      }
      KB::String::String((KB::String *)&v52, (const KB::String *)(v47[0] + 52));
      if (*(char *)(a1 + 471) < 0)
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
      else
        v45 = *(std::string *)(a1 + 448);
      if (TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken != -1)
        dispatch_once(&TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken, &__block_literal_global_18_11223);
      v47[1] = (unsigned int *)MEMORY[0x1E0C809B0];
      v47[2] = (unsigned int *)1174405120;
      v47[3] = (unsigned int *)___ZN2TI8Favonius26FavoniusStrokeBuildManager22add_touch_down_or_dragEN3WTF10PassRefPtrINS0_5TouchEEEib_block_invoke;
      v47[4] = (unsigned int *)&__block_descriptor_tmp_3_11224;
      v47[5] = v33;
      v48 = v34;
      if (v34)
      {
        v37 = (unint64_t *)&v34->__shared_weak_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v39 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      else
        __p = v45;
      KB::String::String((KB::String *)v50, (const KB::String *)&v52);
      TIDispatchAsync();
      if (v51 && v50[6] == 1)
        free(v51);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v48)
        std::__shared_weak_count::__release_weak(v48);
      if (v39 < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (v53 && BYTE6(v52) == 1)
        free(v53);
      if (v34)
        std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_59:
  v40 = *(_QWORD *)(a1 + 720);
  if (v40)
  {
    KB::LanguageModelContext::operator=(v40 + 104, (uint64_t *)(a1 + 224));
    v41 = *(_QWORD **)(a1 + 720);
    v42 = v47[0];
    if (v47[0])
    {
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
      TI::CP::TIPathRecognizerInterface::set_key_layout(v41, v42);
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v42);
    }
    else
    {
      TI::CP::TIPathRecognizerInterface::set_key_layout(v41, 0);
    }
    TI::TIInputRecognizer::add_touch(*(_QWORD *)(a1 + 720), v13, v9, v10);
  }
  if (v28)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v28);
  if (v47[0])
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v47[0]);
  return a3;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_up(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int **v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int *v59;
  unint64_t v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64[3];
  uint64_t v65;

  v5 = *a2;
  *a2 = 0;
  v6 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index((TI::Favonius::FavoniusStrokeBuildManager *)a1, *(_DWORD *)(v5 + 48));
  v7 = v6;
  v8 = v6;
  v9 = (uint64_t *)(a1 + 48);
  if (*(_QWORD *)(a1 + 48) == v6)
  {
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(v5 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6 - 8);
    v65 = v5;
    do
      v11 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v11 + 1, (unsigned int *)v5));
    TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode((uint64_t *)v64, *(_QWORD *)(v10 + 8), &v65, a3);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 == *(_QWORD *)(a1 + 64))
    {
      v13 = (unsigned int **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)(a1 + 48), v12 + 1, (unint64_t)v64);
      v14 = *(_QWORD *)(a1 + 56);
      if (!v14)
      {
LABEL_21:
        if (v64[0])
          WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref((uint64_t)v64[0]);
        if (v65)
          WTF::RefCounted<TI::Favonius::Touch>::deref(v65);
        goto LABEL_25;
      }
      v12 = *v9;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 56);
      v13 = v64;
    }
    v18 = *v13;
    *(_QWORD *)(v14 + 8 * v12) = *v13;
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v12 = *v9;
    }
    *v9 = v12 + 1;
    goto LABEL_21;
  }
  if (*(_QWORD *)(a1 + 72) > (unint64_t)v6
    && !TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v6))
  {
LABEL_25:
    TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v7, &v58);
    if (v58)
      WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v58);
    goto LABEL_44;
  }
  if (v7 - 1 <= *(_DWORD *)(a1 + 160))
    goto LABEL_44;
  memset(v64, 0, sizeof(v64));
  if (*v9 > (unint64_t)(v7 + 1))
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v7, (unint64_t *)v64);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v7 - 1, (unint64_t *)&v61);
  memset(v60, 0, sizeof(v60));
  v15 = *(_DWORD *)(a1 + 160);
  if (*(_QWORD *)(a1 + 48) > (unint64_t)(v15 + 1))
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v15, v60);
  v16 = (unint64_t)v64[0];
  if (v64[0])
  {
    v17 = (unint64_t *)v64;
LABEL_29:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 8 * v61 - 8) + 8) + 32) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17[1] + 8 * v16 - 8)
                                                                                                  + 8)
                                                                                      + 32);
    goto LABEL_30;
  }
  v16 = v60[0];
  if (v60[0])
  {
    v17 = v60;
    goto LABEL_29;
  }
LABEL_30:
  v20 = *(_QWORD *)(a1 + 72);
  v21 = (*(_DWORD *)(a1 + 160) + 1);
  if (v20 > v21)
  {
    v22 = *(_QWORD *)(a1 + 80);
    v23 = (unsigned int **)(v22 + 8 * v20);
    v24 = (unsigned int **)(v22 + 8 * v21);
    do
    {
      v25 = *v24;
      if (*v24)
      {
        v26 = v25 + 2;
        v27 = atomic_load(v25 + 2);
        if (v27 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 - 1, v26));
        }
      }
      ++v24;
    }
    while (v24 != v23);
    *(_QWORD *)(a1 + 72) = v21;
  }
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, &v61);
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, (uint64_t *)v60);
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, (uint64_t *)v64);
  v29 = *(_DWORD *)(a1 + 160) + 1;
  if (v29 <= v7)
  {
    do
    {
      TI::Favonius::FavoniusStrokeBuildManager::perform_search((TI::Favonius::FavoniusStrokeBuildManager *)a1, v29, &v59);
      if (v59)
        WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v59);
      ++v29;
    }
    while (v29 <= v7);
    v29 = *(_DWORD *)(a1 + 160) + 1;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v60);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&v61);
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v64);
  v8 = v29;
  v7 = v29;
LABEL_44:
  if (*(_QWORD *)(a1 + 72) <= v8)
  {
    v50 = 0;
  }
  else
  {
    TI::Favonius::FavoniusStrokeBuildManager::forced_hit_key(a1, *(const TI::Favonius::KeyboardLayout **)(v5 + 56), v7, a3, v64);
    v30 = v64[0];
    v31 = *(_QWORD *)(a1 + 80);
    v32 = *(_QWORD *)(v31 + 8 * v8);
    v33 = *(unsigned int **)(v31 + 8 * (v7 - 1));
    v57 = v33;
    if (v33)
    {
      v34 = v33 + 2;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    v56 = v30;
    if (v30)
    {
      do
        v36 = __ldaxr(v30);
      while (__stlxr(v36 + 1, v30));
    }
    (*(void (**)(unsigned int **__return_ptr, uint64_t, unsigned int **, unsigned int **))(*(_QWORD *)v32 + 96))(v64, v32, &v57, &v56);
    v37 = *(_QWORD *)(a1 + 80);
    v38 = *(unsigned int **)(v37 + 8 * v8);
    v39 = v64[0];
    v64[0] = 0;
    *(_QWORD *)(v37 + 8 * v8) = v39;
    if (v38)
    {
      v40 = v38 + 2;
      v41 = atomic_load(v38 + 2);
      if (v41 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
      }
      else
      {
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
      }
      if (v64[0])
      {
        v43 = v64[0] + 2;
        v44 = atomic_load(v64[0] + 2);
        if (v44 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v64[0] + 8))();
        }
        else
        {
          do
            v45 = __ldaxr(v43);
          while (__stlxr(v45 - 1, v43));
        }
      }
    }
    if (v56)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v56);
    if (v57)
    {
      v46 = v57 + 2;
      v47 = atomic_load(v57 + 2);
      if (v47 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v57 + 8))();
      }
      else
      {
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
      }
    }
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8);
    v50 = *(unsigned int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 32))(v49) + 8);
    if (v50)
    {
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
    }
    v52 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8);
    a3 = *(__int16 *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52) + 8)
                                  + 62);
    if (v30)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v30);
  }
  if (*(_DWORD *)(a1 + 160) < v7)
    *(_DWORD *)(a1 + 160) = v7;
  v53 = *(_QWORD *)(a1 + 704);
  if (v53)
    (*(void (**)(uint64_t, uint64_t, _QWORD, double, double, double, double))(*(_QWORD *)v53 + 32))(v53, 2, *(unsigned int *)(v5 + 48), *(double *)(v5 + 8), *(double *)(v5 + 16), *(double *)(v5 + 32), 0.0);
  v54 = *(_QWORD *)(a1 + 720);
  if (v54)
    TI::TIInputRecognizer::add_touch(v54, 2, *(double *)(v5 + 8), *(double *)(v5 + 16));
  if (v50)
    WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v50);
  if (v5)
    WTF::RefCounted<TI::Favonius::Touch>::deref(v5);
  return a3;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::add_touch_cancel(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  _DWORD *v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t i;
  uint64_t v20;
  unsigned int *v22;
  unint64_t v23[3];

  v4 = (_DWORD *)*((_QWORD *)this + 88);
  if (v4 && v4[20] == a2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 56))(v4);
  v5 = TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index(this, a2);
  v7 = (unint64_t *)((char *)this + 72);
  v6 = *((_QWORD *)this + 9);
  v8 = v5;
  if (v6 <= v5)
    v9 = 0;
  else
    v9 = v6 + ~v5;
  memset(v23, 0, sizeof(v23));
  v10 = v5 + 1;
  if (*((_QWORD *)this + 6) > v10)
  {
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history((uint64_t)this, v5, v23);
    v11 = *((_QWORD *)this + 9);
    if (v11 > v10)
    {
      v12 = *((_QWORD *)this + 10);
      v13 = (unsigned int **)(v12 + 8 * v11);
      v14 = (unsigned int **)(v12 + 8 * v10);
      do
      {
        v15 = *v14;
        if (*v14)
        {
          v16 = v15 + 2;
          v17 = atomic_load(v15 + 2);
          if (v17 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
          }
          else
          {
            do
              v18 = __ldaxr(v16);
            while (__stlxr(v18 - 1, v16));
          }
        }
        ++v14;
      }
      while (v14 != v13);
      *v7 = v10;
    }
  }
  for (i = *((_QWORD *)this + 6); i > v8; *((_QWORD *)this + 6) = i)
  {
    if (*v7)
    {
      WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrink((unsigned int *)this + 18, *v7 - 1);
      i = *((_QWORD *)this + 6);
    }
    --i;
    v20 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * i);
    if (v20)
      WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v20);
  }
  if (v23[0])
  {
    TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history((uint64_t)this, (uint64_t *)v23);
    if (v9 + (int)i > i)
    {
      do
      {
        TI::Favonius::FavoniusStrokeBuildManager::perform_search(this, i, &v22);
        if (v22)
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v22);
        LODWORD(i) = i + 1;
        --v9;
      }
      while (v9);
    }
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v23);
  return 0;
}

void TI::Favonius::FavoniusStrokeBuildManager::add_input(TI::Favonius::FavoniusStrokeBuildManager *this, std::vector<unsigned int>::size_type __n, char a3)
{
  unsigned int v3;
  int v5;
  std::vector<unsigned int> *v6;
  int v7;
  std::vector<unsigned int>::const_iterator v8;
  _OWORD v9[3];
  _OWORD v10[3];
  int v11;
  void **v12;

  if (!*((_BYTE *)this + 209))
  {
    v3 = __n;
    v5 = *((_DWORD *)this + 40);
    v6 = (std::vector<unsigned int> *)((char *)this + 168);
    if (!v5 || (a3 & 1) != 0)
      v7 = -1;
    else
      v7 = v5 - 1;
    LODWORD(v9[0]) = v7;
    v8.__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)(*((_QWORD *)this + 21)
                                                                    + 4 * *((unsigned int *)this + 48));
    std::vector<unsigned int>::insert(v6, v8, v3, (std::vector<unsigned int>::const_reference)v9);
    *((_DWORD *)this + 48) += v3;
    v11 = 0;
    memset(v9, 0, sizeof(v9));
    memset(v10, 0, sizeof(v10));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v9);
    v12 = (void **)&v10[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    v12 = (void **)v10;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    v12 = (void **)&v9[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    v12 = (void **)v9;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v12);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((_QWORD **)this + 98));
    *((_QWORD *)this + 97) = (char *)this + 784;
    *((_QWORD *)this + 99) = 0;
    *((_QWORD *)this + 98) = 0;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::delete_from_input(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[3];
  _OWORD v7[3];
  int v8;
  void **v9;

  if (!*((_BYTE *)this + 209))
  {
    v2 = *((_DWORD *)this + 48) - 1;
    *((_DWORD *)this + 48) = v2;
    v3 = *((_QWORD *)this + 22);
    v4 = *((_QWORD *)this + 21) + 4 * v2;
    v5 = v3 - (v4 + 4);
    if (v3 != v4 + 4)
      memmove((void *)(*((_QWORD *)this + 21) + 4 * v2), (const void *)(v4 + 4), v3 - (v4 + 4));
    *((_QWORD *)this + 22) = v4 + v5;
    *((_BYTE *)this + 208) = 1;
    v8 = 0;
    memset(v6, 0, sizeof(v6));
    memset(v7, 0, sizeof(v7));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v6);
    v9 = (void **)&v7[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    v9 = (void **)v7;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    v9 = (void **)&v6[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    v9 = (void **)v6;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v9);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((_QWORD **)this + 98));
    *((_QWORD *)this + 97) = (char *)this + 784;
    *((_QWORD *)this + 99) = 0;
    *((_QWORD *)this + 98) = 0;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::set_input_index(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  _OWORD v3[3];
  _OWORD v4[3];
  int v5;
  void **v6;

  if (!*((_BYTE *)this + 209))
  {
    *((_DWORD *)this + 48) = a2;
    v5 = 0;
    memset(v3, 0, sizeof(v3));
    memset(v4, 0, sizeof(v4));
    KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)v3);
    v6 = (void **)&v4[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    v6 = (void **)v4;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    v6 = (void **)&v3[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    v6 = (void **)v3;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v6);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((_QWORD **)this + 98));
    *((_QWORD *)this + 97) = (char *)this + 784;
    *((_QWORD *)this + 99) = 0;
    *((_QWORD *)this + 98) = 0;
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String *a1@<X1>, KB::String *this@<X4>, uint64_t a3@<X0>, uint64_t *a4@<X2>, int a5@<W3>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  int *v21;
  float v22;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  int v27;
  float v28;
  uint64_t v29;
  int *v30;
  float v31;
  uint64_t *v33;
  KB::Candidate *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  float v47;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  void ***v56;
  uint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const KB::LanguageModelContext *v62;
  uint64_t v63;
  int *v64[3];
  void *v65[3];
  int *v66[3];
  void *__p[3];
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  KB::Candidate *v73;
  int *v74[3];
  void *v75[3];
  char v76;
  unsigned int v77;
  void **v78;
  _QWORD v79[3];
  _QWORD *v80;
  uint64_t (**v81)();
  char v82;
  uint64_t (***v83)();
  int v84;
  __int16 v85;
  unsigned __int8 v86;
  void *v87;
  char v88;
  _BYTE v89[24];
  _BYTE *v90;
  _BYTE v91[8];
  void *v92;
  uint64_t v93;

  LODWORD(v9) = a5;
  v93 = *MEMORY[0x1E0C80C00];
  v77 = a6;
  if ((_DWORD)a6 == 5)
  {
    KB::String::String((KB::String *)v91, a1);
    v14 = (_QWORD *)a7[3];
    if (v14)
    {
      if (v14 == a7)
      {
        v90 = v89;
        (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v89);
      }
      else
      {
        v90 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
      }
    }
    else
    {
      v90 = 0;
    }
    TI::Favonius::FavoniusStrokeBuildManager::latham_conversions(a3, v9, (KB *)v91, a4, (uint64_t)v89, a8);
    v24 = v90;
    if (v90 == v89)
    {
      v25 = 4;
      v24 = v89;
    }
    else
    {
      if (!v90)
      {
LABEL_25:
        v26 = v92;
        if (!v92)
          return;
        v27 = v91[6];
LABEL_27:
        if (v27 == 1)
          free(v26);
        return;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_25;
  }
  v15 = a6;
  KB::String::operator=(this, (KB::String *)(a3 + 128));
  *(_DWORD *)(a8 + 100) = 0;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  v17 = *(unsigned int *)(a3 + 160);
  if (*(_QWORD *)(a3 + 72) > v17 && !*(_BYTE *)(a3 + 209))
  {
    v63 = *(_QWORD *)(a3 + 80);
    v84 = 0x100000;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 432))(a3);
    v76 = v18;
    if (v15 >= 2 && (_DWORD)v15 != 4)
    {
      if ((_DWORD)v15 != 3)
      {
LABEL_101:
        v26 = v87;
        if (!v87)
          return;
        v27 = v86;
        goto LABEL_27;
      }
      v19 = v18;
      v20 = *(_QWORD *)(v63 + 8 * v17);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
      {
        v21 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
        if (*(_BYTE *)(a3 + 336))
        {
          v22 = *(float *)(a3 + 332);
          if (v22 <= 1.0 && v22 >= 0.0)
            v21 = (int *)(a3 + 332);
        }
      }
      else
      {
        v21 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
      }
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, int *, uint64_t, float))(*(_QWORD *)v20 + 136))(v68, v20, v9, &v84, 3, *(float *)v21);
      KB::String::append((unsigned __int16 *)this, (const KB::String *)&v84);
      v57 = *(_QWORD *)(a3 + 24);
      v81 = &off_1EA102280;
      v82 = v19;
      v83 = &v81;
      (*(void (**)(uint64_t, _QWORD *, uint64_t *, uint64_t, uint64_t (***)()))(*(_QWORD *)v57 + 80))(v57, v68, a4, a8, &v81);
      v58 = v83;
      if (v83 == &v81)
      {
        v59 = 4;
        v58 = &v81;
      }
      else
      {
        if (!v83)
          goto LABEL_96;
        v59 = 5;
      }
      (*v58)[v59]();
LABEL_96:
      memset(v74, 0, sizeof(v74));
      KB::CandidateFilterFlags::CandidateFilterFlags(v75, v74);
      LOBYTE(v72) = 1;
      v60 = a7[3];
      if (v60)
      {
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t **))(*(_QWORD *)v60 + 48))(v60, a8, v75, &v72);
        if (v75[0])
        {
          v75[1] = v75[0];
          operator delete(v75[0]);
        }
        v72 = v68;
        v56 = (void ***)&v72;
LABEL_100:
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v56);
        goto LABEL_101;
      }
      goto LABEL_103;
    }
    if ((v15 & 0xFFFFFFFD) == 1)
      v28 = 1.0;
    else
      v28 = 0.0;
    v29 = *(_QWORD *)(v63 + 8 * v17);
    v9 = v9;
    v62 = (const KB::LanguageModelContext *)a4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      v30 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
      if (*(_BYTE *)(a3 + 336))
      {
        v31 = *(float *)(a3 + 332);
        if (v31 <= 1.0 && v31 >= 0.0)
          v30 = (int *)(a3 + 332);
      }
    }
    else
    {
      v30 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
    }
    (*(void (**)(uint64_t **__return_ptr, uint64_t, _QWORD, int *, uint64_t, uint64_t, float))(*(_QWORD *)v29 + 128))(&v72, v29, v9, &v84, v15, 1, *(float *)v30);
    v33 = v72;
    v34 = v73;
    if (v72 == (uint64_t *)v73)
    {
      v34 = (KB::Candidate *)v72;
    }
    else
    {
      v61 = v9;
      while (*v33)
      {
        v35 = v33[1] + 240 * *v33;
        v36 = *(_QWORD *)(v35 - 232);
        v37 = v35 - 224;
        v38 = (const char *)(v36 ? v36 : v37);
        if (!strcmp(v38, " "))
          break;
        v33 += 125;
        if (v33 == (uint64_t *)v34)
        {
          v33 = (uint64_t *)v34;
          goto LABEL_61;
        }
      }
      if (v33 != (uint64_t *)v34)
      {
        v39 = v33 + 125;
        if (v33 + 125 != (uint64_t *)v34)
        {
          do
          {
            if (*v39)
            {
              v40 = v39[1] + 240 * *v39;
              v41 = *(_QWORD *)(v40 - 232);
              v42 = v40 - 224;
              v43 = (const char *)(v41 ? v41 : v42);
              if (strcmp(v43, " "))
              {
                KB::Candidate::operator=(v33, v39);
                v33 += 125;
              }
            }
            v39 += 125;
          }
          while (v39 != (uint64_t *)v34);
          v34 = v73;
          v15 = v77;
        }
      }
LABEL_61:
      v9 = v61;
    }
    std::vector<KB::Candidate>::erase((uint64_t)&v72, v33, v34);
    if ((_DWORD)v15 == 1
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 48))(*(_QWORD *)(a3 + 24)) & 1) != 0)
    {
      goto LABEL_75;
    }
    v44 = v9;
    v45 = *(_QWORD *)(v63 + 8 * v17);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 152))(a3))
    {
      v46 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
      if (*(_BYTE *)(a3 + 336))
      {
        v47 = *(float *)(a3 + 332);
        if (v47 <= 1.0 && v47 >= 0.0)
          v46 = (int *)(a3 + 332);
      }
    }
    else
    {
      v46 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
    }
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, int *, uint64_t, float))(*(_QWORD *)v45 + 120))(v68, v45, v44, &v84, v15, *(float *)v46);
    KB::CandidateCollection::operator=(a8, (uint64_t)v68);
    v78 = (void **)&v71;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v78);
    v78 = (void **)&v70;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v78);
    v78 = (void **)&v69;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v78);
    v78 = (void **)v68;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v78);
    if ((_DWORD)v15 == 1)
LABEL_75:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 136))(*(_QWORD *)(a3 + 24), a8);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 24) + 64))(*(_QWORD *)(a3 + 24), a8, 1);
    KB::String::append((unsigned __int16 *)this, (const KB::String *)&v84);
    (*(void (**)(_QWORD, uint64_t **, const KB::LanguageModelContext *, uint64_t, uint64_t, float))(**(_QWORD **)(a3 + 24) + 72))(*(_QWORD *)(a3 + 24), &v72, v62, a8, v15, v28);
    v49 = (int *)operator new(4uLL);
    *v49 = 0;
    v66[1] = v49 + 1;
    v66[2] = v49 + 1;
    v66[0] = v49;
    KB::CandidateFilterFlags::CandidateFilterFlags(__p, v66);
    LOBYTE(v68[0]) = 0;
    v50 = a7[3];
    if (!v50)
      goto LABEL_103;
    (*(void (**)(uint64_t, uint64_t, void **, _QWORD *))(*(_QWORD *)v50 + 48))(v50, a8, __p, v68);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    operator delete(v49);
    v51 = *(_QWORD *)(a3 + 24);
    v79[0] = &off_1EA1022C8;
    v79[1] = &v76;
    v79[2] = &v77;
    v80 = v79;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v51 + 56))(v51, a8, v79);
    v52 = v80;
    if (v80 == v79)
    {
      v53 = 4;
      v52 = v79;
    }
    else
    {
      if (!v80)
        goto LABEL_84;
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_84:
    if (!v77)
      TI::Favonius::FavoniusStrokeBuildManager::update_autocorrection_candidates_with_ensemble((TI::Favonius::FavoniusStrokeBuildManager *)a3, (KB::CandidateCollection *)a8, a1, v62);
    v54 = (int *)operator new(4uLL);
    *v54 = 1;
    v64[1] = v54 + 1;
    v64[2] = v54 + 1;
    v64[0] = v54;
    KB::CandidateFilterFlags::CandidateFilterFlags(v65, v64);
    LOBYTE(v68[0]) = 1;
    v55 = a7[3];
    if (v55)
    {
      (*(void (**)(uint64_t, uint64_t, void **, _QWORD *))(*(_QWORD *)v55 + 48))(v55, a8, v65, v68);
      if (v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
      }
      operator delete(v54);
      v68[0] = &v72;
      v56 = (void ***)v68;
      goto LABEL_100;
    }
LABEL_103:
    std::__throw_bad_function_call[abi:nn180100]();
    TI::Favonius::FavoniusStrokeBuildManager::lookup_inline_completions_for_UI();
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::lookup_inline_completions_for_UI(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, const KB::LanguageModelContext *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  KB::String *v12;
  const KB::String *v13;
  const KB::String *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  float v23;
  char *v25;
  void *v26;
  const KB::String *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32[2];
  const KB::String *v33;
  void *v34[2];
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  __int128 v43;
  _QWORD v44[4];
  __int128 v45;
  _QWORD v46[4];
  uint64_t v47;
  void **v48;
  void *v49;
  char v50;
  __int128 v51;
  int v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24)))
  {
    WORD2(v48) = 0;
    BYTE6(v48) = 0;
    v49 = " \t\n";
    LODWORD(v48) = 1048579;
    v50 = 0;
    KB::sbs_string_tokenize(a2, (const KB::String *)&v48, v32);
    v12 = (KB::String *)v49;
    if (v49 && BYTE6(v48) == 1)
      free(v49);
    v14 = *(const KB::String **)v32;
    v13 = v33;
    if ((const KB::String *)((char *)v33 - *(_QWORD *)v32) == (const KB::String *)32
      && (unsigned __int16)**(_WORD **)v32 < *a2)
    {
      KB::String::space(v12);
      KB::String::String((KB::String *)&v48, v14);
      KB::String::append((unsigned __int16 *)&v48, (const KB::String *)&KB::String::space(void)::space);
      KB::String::operator=(*(uint64_t *)v32, (KB::String *)&v48);
      if (v49 && BYTE6(v48) == 1)
        free(v49);
      v14 = *(const KB::String **)v32;
      v13 = v33;
    }
    if (v13 == v14)
      KB::String::String((KB::String *)v34, "");
    else
      KB::String::String((KB::String *)v34, (const KB::String *)((char *)v13 - 32));
    KB::Word::Word((KB::Word *)&v43, (const KB::String *)v34, &kTITokenIDUNK, 0);
    KB::Candidate::Candidate((KB::Candidate *)&v48, (const KB::Word *)&v43);
    KB::Word::~Word((KB::Word *)&v43);
    if (v34[1] && BYTE6(v34[0]) == 1)
      free(v34[1]);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1))
    {
      v22 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
      if (*(_BYTE *)(a1 + 336))
      {
        v23 = *(float *)(a1 + 332);
        if (v23 <= 1.0 && v23 >= 0.0)
          v22 = (int *)(a1 + 332);
      }
    }
    else
    {
      v22 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
    }
    v52 = *v22;
    v53 = -8388608;
    v51 = 0u;
    KB::Candidate::Candidate((KB::Candidate *)&v43, (const KB::Candidate *)&v48);
    v25 = (char *)operator new(0x3E8uLL);
    v26 = v25 + 1000;
    v34[0] = v25;
    __p[0] = v25 + 1000;
    KB::Candidate::Candidate((KB::Candidate *)v25, (const KB::Candidate *)&v43);
    v34[1] = v26;
    KB::Candidate::~Candidate((KB::Candidate *)&v43);
    if (v33 != *(const KB::String **)v32)
    {
      v27 = (const KB::String *)((char *)v33 - 32);
      v28 = (void *)*((_QWORD *)v33 - 3);
      if (v28)
      {
        if (*((_BYTE *)v33 - 26) == 1)
          free(v28);
      }
      v33 = v27;
    }
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v41, a5);
    TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(a1, a3, (uint64_t)v34, (const KB::String **)v32, a4, (uint64_t)v41, a6);
    v29 = v42;
    if (v42 == v41)
    {
      v30 = 4;
      v29 = v41;
    }
    else
    {
      if (!v42)
      {
LABEL_45:
        *(_QWORD *)&v43 = v34;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
        KB::Candidate::~Candidate((KB::Candidate *)&v48);
        v48 = (void **)v32;
        std::vector<KB::String>::__destroy_vector::operator()[abi:nn180100](&v48);
        return;
      }
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
    goto LABEL_45;
  }
  HIDWORD(v47) = 0;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  bzero(&v48, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)&v48);
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)__p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v38);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v38 + 8));
  v39 = 0uLL;
  v40 = 0;
  LOBYTE(v32[0]) = 0;
  v15 = *(_QWORD *)(a5 + 24);
  if (v15)
  {
    (*(void (**)(uint64_t, __int128 *, void ***, void **, int *))(*(_QWORD *)v15 + 48))(v15, &v43, &v48, v34, v32);
    *(_QWORD *)v32 = &v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)v32);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v38 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v38);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v16 = (std::__shared_weak_count *)v34[1];
    if (v34[1])
    {
      v17 = (unint64_t *)((char *)v34[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    KB::Candidate::~Candidate((KB::Candidate *)&v48);
    *(_OWORD *)a6 = v43;
    v19 = v44[3];
    *(_QWORD *)(a6 + 16) = v44[0];
    v43 = 0uLL;
    *(_OWORD *)(a6 + 24) = *(_OWORD *)&v44[1];
    *(_QWORD *)(a6 + 40) = v19;
    memset(v44, 0, sizeof(v44));
    *(_OWORD *)(a6 + 48) = v45;
    v20 = v46[3];
    v21 = v47;
    *(_QWORD *)(a6 + 64) = v46[0];
    v45 = 0uLL;
    *(_OWORD *)(a6 + 72) = *(_OWORD *)&v46[1];
    memset(v46, 0, sizeof(v46));
    *(_QWORD *)(a6 + 88) = v20;
    *(_QWORD *)(a6 + 96) = v21;
    *(_BYTE *)(a6 + 104) = 1;
    v48 = (void **)&v46[1];
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v48);
    v48 = (void **)&v45;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v48);
    v48 = (void **)&v44[1];
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v48);
    v48 = (void **)&v43;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v48);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    TI::Favonius::FavoniusStrokeBuildManager::register_inline_completion_acceptance_rejection(v31);
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::register_inline_completion_acceptance_rejection(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
}

_QWORD *TI::Favonius::FavoniusStrokeBuildManager::delete_from_stroke_history_for_UI(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  int64x2_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[2];
  __int128 v82;
  _OWORD v83[3];
  int v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  int64x2_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92[4];

  v4 = *(_DWORD *)(a1 + 160);
  memset(v92, 0, 24);
  TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(a1, v4, v92);
  TI::Favonius::KeyboardLayout::key_for_char(*a2, 8u, v81);
  v5 = *(_QWORD *)&v81[0];
  if (!*(_QWORD *)&v81[0])
    return WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v92);
  v6 = *(_QWORD *)(*(_QWORD *)&v81[0] + 96);
  v7 = *(_QWORD *)(*(_QWORD *)&v81[0] + 104);
  v8 = *(_QWORD *)(a1 + 200);
  v9 = operator new();
  v10 = v9;
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = v6;
  *(_QWORD *)(v9 + 16) = v7;
  *(_DWORD *)(v9 + 24) = 1065353216;
  *(_QWORD *)(v9 + 32) = v8;
  *(_OWORD *)(v9 + 40) = xmmword_1DA911070;
  v11 = (unsigned int *)*a2;
  *(_QWORD *)(v9 + 56) = *a2;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = (uint64_t *)(a1 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 48) - 8);
  v90 = v9;
  do
    v15 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v15 + 1, (unsigned int *)v9));
  TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode(&v91, *(_QWORD *)(v14 + 8), &v90, 8);
  if (v90)
    WTF::RefCounted<TI::Favonius::Touch>::deref(v90);
  v16 = *(_QWORD *)(a1 + 48);
  if (v16 != *(_QWORD *)(a1 + 64))
  {
    v18 = *(_QWORD *)(a1 + 56);
    v17 = (unsigned int **)&v91;
    goto LABEL_12;
  }
  v17 = (unsigned int **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)(a1 + 48), v16 + 1, (unint64_t)&v91);
  v18 = *(_QWORD *)(a1 + 56);
  if (v18)
  {
    v16 = *v13;
LABEL_12:
    v19 = *v17;
    *(_QWORD *)(v18 + 8 * v16) = *v17;
    if (v19)
    {
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
      v16 = *v13;
    }
    *v13 = v16 + 1;
  }
  TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(a1, (uint64_t *)v92);
  v21 = *(_DWORD *)(a1 + 192);
  if (!v21)
    goto LABEL_22;
  v22 = *(_QWORD *)(a1 + 168);
  v23 = (v21 - 1);
  if ((_DWORD)v23)
  {
    while (*(_DWORD *)(v22 + 4 * v23) == -1)
    {
      if (!(_DWORD)--v23)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    LODWORD(v23) = 0;
  }
  v24 = *(_DWORD *)(v22 + 4 * v23);
  v25 = v24 + 1;
  if (v24 == -1)
LABEL_22:
    v25 = 0;
  v26 = (uint64_t *)(a1 + 72);
  v27 = *(unsigned int *)(a1 + 160);
  if (*(_QWORD *)(a1 + 72) <= v27)
    goto LABEL_71;
  v79 = *(_QWORD *)(a1 + 80);
  v80 = v5;
  v88 = 0uLL;
  v89 = 0;
  v78 = v25;
  v28 = v25 + 1;
  if (v25 + 1 <= v27)
  {
    do
    {
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v28);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v28);
      v32 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
      v33 = v32;
      if (v30)
      {
        v34 = (unsigned int *)(v30 + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      if (v32)
      {
        do
          v36 = __ldaxr(v32);
        while (__stlxr(v36 + 1, v32));
      }
      v37 = v88.i64[1];
      if (v88.i64[1] >= v89)
      {
        v39 = (v88.i64[1] - v88.i64[0]) >> 4;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 60)
          abort();
        v41 = v89 - v88.i64[0];
        if ((uint64_t)(v89 - v88.i64[0]) >> 3 > v40)
          v40 = v41 >> 3;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        *(_QWORD *)&v82 = &v89;
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<KB::LanguageModel>>>(v42);
        v44 = (uint64_t *)&v43[16 * v39];
        *((_QWORD *)&v81[1] + 1) = &v43[16 * v45];
        *v44 = v30;
        v44[1] = (uint64_t)v33;
        v38 = v44 + 2;
        *(_QWORD *)&v81[1] = v44 + 2;
        v46 = (_QWORD *)v88.i64[1];
        v47 = (_QWORD *)v88.i64[0];
        if (v88.i64[1] == v88.i64[0])
        {
          v49 = vdupq_n_s64(v88.u64[1]);
        }
        else
        {
          do
          {
            v48 = *((_OWORD *)v46 - 1);
            v46 -= 2;
            *v46 = 0;
            v46[1] = 0;
            *((_OWORD *)v44 - 1) = v48;
            v44 -= 2;
          }
          while (v46 != v47);
          v49 = v88;
          v38 = *(_QWORD **)&v81[1];
        }
        v88.i64[0] = (uint64_t)v44;
        v88.i64[1] = (uint64_t)v38;
        *(int64x2_t *)((char *)v81 + 8) = v49;
        v50 = v89;
        v89 = *((_QWORD *)&v81[1] + 1);
        *((_QWORD *)&v81[1] + 1) = v50;
        *(_QWORD *)&v81[0] = v49.i64[0];
        std::__split_buffer<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::~__split_buffer((uint64_t)v81);
      }
      else
      {
        *(_QWORD *)v88.i64[1] = v30;
        *(_QWORD *)(v37 + 8) = v32;
        v38 = (_QWORD *)(v37 + 16);
      }
      v88.i64[1] = (uint64_t)v38;
      ++v28;
    }
    while (v28 <= *(_DWORD *)(a1 + 160));
  }
  v51 = *(_QWORD *)(v79 + 8 * v27);
  v52 = *(unsigned int **)(v91 + 8);
  v86 = v52;
  if (v52)
  {
    v53 = v52 + 2;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 + 1, v53));
  }
  v55 = *(unsigned int **)(v79 + 8 * v78);
  v85 = v55;
  if (v55)
  {
    v56 = v55 + 2;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int **, unsigned int **, int64x2_t *))(*(_QWORD *)v51 + 80))(&v87, v51, &v86, &v85, &v88);
  v58 = v87;
  v87 = 0;
  *(_QWORD *)&v81[0] = v58;
  if (v85)
  {
    v59 = v85 + 2;
    v60 = atomic_load(v85 + 2);
    if (v60 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v85 + 8))();
    }
    else
    {
      do
        v61 = __ldaxr(v59);
      while (__stlxr(v61 - 1, v59));
    }
  }
  if (v86)
  {
    v62 = v86 + 2;
    v63 = atomic_load(v86 + 2);
    if (v63 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v86 + 8))();
    }
    else
    {
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
    }
  }
  v65 = *(_DWORD *)(a1 + 160);
  v66 = *(_QWORD *)(a1 + 72);
  if (v66 != *(_QWORD *)(a1 + 88))
  {
    v68 = *(_QWORD *)(a1 + 80);
    v69 = (uint64_t *)v81;
    goto LABEL_62;
  }
  v67 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)(a1 + 72), v66 + 1, (unint64_t)v81);
  v68 = *(_QWORD *)(a1 + 80);
  if (v68)
  {
    v69 = (uint64_t *)v67;
    v66 = *v26;
LABEL_62:
    v70 = (uint64_t *)(v68 + 8 * (v65 + 1));
    memmove(v70 + 1, v70, 8 * v66 - 8 * (v65 + 1));
    v71 = *v69;
    *v70 = *v69;
    if (v71)
    {
      v72 = (unsigned int *)(v71 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
    ++*v26;
  }
  v5 = v80;
  if (*(_QWORD *)&v81[0])
  {
    v74 = (unsigned int *)(*(_QWORD *)&v81[0] + 8);
    v75 = atomic_load((unsigned int *)(*(_QWORD *)&v81[0] + 8));
    if (v75 == 1)
    {
      (*(void (**)(void))(**(_QWORD **)&v81[0] + 8))();
    }
    else
    {
      do
        v76 = __ldaxr(v74);
      while (__stlxr(v76 - 1, v74));
    }
  }
  *(_QWORD *)&v81[0] = &v88;
  std::vector<std::pair<WTF::RefPtr<TI::Favonius::TouchHistory>,WTF::RefPtr<TI::Favonius::KeyMatch>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v81);
  LODWORD(v27) = *(_DWORD *)(a1 + 160);
LABEL_71:
  *(_DWORD *)(a1 + 160) = v27 + 1;
  *(_BYTE *)(a1 + 208) = 1;
  v84 = 0;
  memset(v81, 0, sizeof(v81));
  v82 = 0u;
  memset(v83, 0, sizeof(v83));
  KB::CandidateCollection::operator=(a1 + 800, (uint64_t)v81);
  v88.i64[0] = (uint64_t)&v83[1] + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  v88.i64[0] = (uint64_t)v83;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  v88.i64[0] = (uint64_t)&v81[1] + 8;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  v88.i64[0] = (uint64_t)v81;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*(_QWORD **)(a1 + 784));
  *(_QWORD *)(a1 + 776) = a1 + 784;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  if (v91)
    WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v91);
  WTF::RefCounted<TI::Favonius::Touch>::deref(v10);
  WTF::RefCounted<TI::Favonius::Key>::deref(v5);
  return WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(v92);
}

void TI::Favonius::FavoniusStrokeBuildManager::text_accepted_from_UI(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, const KB::String *a4@<X3>, const KB::String *a5@<X5>, uint64_t a6@<X4>, int a7@<W6>, std::vector<unsigned int> *a8@<X8>)
{
  BOOL v13;
  BOOL v16;
  unint64_t *v18;
  unint64_t *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  char *v26;
  char *v27;
  const char *v28;
  uint64_t **v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  _BYTE *v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unsigned int *v90;
  char *v91;
  unsigned __int16 v92;
  unsigned int v93;
  unsigned int *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t *v107;
  void *__p[2];
  __int128 v109;
  void *v110[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  int v114;
  __int128 v115;
  _QWORD v116[6];

  v116[3] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 88))
    v13 = a7 == 0;
  else
    v13 = 1;
  if (v13)
  {
    if (*(_WORD *)a3)
      v16 = *(unsigned __int16 *)a5 == 0;
    else
      v16 = 1;
    if (v16)
    {
      std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100]((uint64_t)this + 920);
    }
    else
    {
      KB::String::String((KB::String *)__p, a3);
      KB::String::String((KB::String *)v110, a5);
      v30 = (char *)this + 920;
      if (*((_BYTE *)this + 984))
      {
        KB::String::operator=((uint64_t)v30, (KB::String *)__p);
        KB::String::operator=((uint64_t)this + 952, (KB::String *)v110);
      }
      else
      {
        *((_DWORD *)this + 230) = 0x100000;
        *((_WORD *)this + 462) = 0;
        *((_BYTE *)this + 926) = 0;
        *((_QWORD *)this + 116) = 0;
        KB::String::operator=((uint64_t)v30, (KB::String *)__p);
        *((_DWORD *)this + 238) = 0x100000;
        *((_WORD *)this + 478) = 0;
        *((_BYTE *)this + 958) = 0;
        *((_QWORD *)this + 120) = 0;
        KB::String::operator=((uint64_t)this + 952, (KB::String *)v110);
        *((_BYTE *)this + 984) = 1;
      }
      if (v110[1] && BYTE6(v110[0]) == 1)
        free(v110[1]);
      if (__p[1] && BYTE6(__p[0]) == 1)
        free(__p[1]);
    }
    v31 = *((_QWORD *)this + 90);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 40);
      if (v32)
      {
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
        TI::TIInputRecognizer::load_lexicons_if_needed(v31, *(const KB::DynamicDictionary **)(*(_QWORD *)v33 + 24));
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v109 = 0;
    v34 = *((_QWORD *)this + 9);
    if (v34)
    {
      v35 = *(unsigned int **)(*((_QWORD *)this + 10) + 8 * v34 - 8);
      if (v35)
      {
        v36 = v35 + 2;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      if (a2 != a4 && !KB::String::equal(a2, a4, 1))
      {
        v38 = v35 + 2;
        (*(void (**)(__int128 *__return_ptr, unsigned int *, const KB::String *, uint64_t))(*(_QWORD *)v35 + 104))(&v115, v35, a2, a6);
        v39 = (unsigned int *)v115;
        *(_QWORD *)&v115 = 0;
        v40 = atomic_load(v35 + 2);
        if (v40 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
        }
        else
        {
          do
            v41 = __ldaxr(v38);
          while (__stlxr(v41 - 1, v38));
        }
        if ((_QWORD)v115)
        {
          v42 = (unsigned int *)(v115 + 8);
          v43 = atomic_load((unsigned int *)(v115 + 8));
          if (v43 == 1)
          {
            (*(void (**)(_QWORD))(*(_QWORD *)v115 + 8))(v115);
          }
          else
          {
            do
              v44 = __ldaxr(v42);
            while (__stlxr(v44 - 1, v42));
          }
        }
        v35 = v39;
      }
      if (v35)
      {
        v45 = *((_QWORD *)this + 9);
        if ((int)v45 >= 1)
        {
          v46 = *((_QWORD *)this + 9);
          v47 = v35;
          do
          {
            v48 = (v46 - 1);
            v49 = *((_QWORD *)this + 10);
            v50 = v47 + 2;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 + 1, v50));
            v52 = *(unsigned int **)(v49 + 8 * v48);
            *(_QWORD *)(v49 + 8 * v48) = v47;
            if (v52)
            {
              v53 = v52 + 2;
              v54 = atomic_load(v52 + 2);
              if (v54 == 1)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
              }
              else
              {
                do
                  v55 = __ldaxr(v53);
                while (__stlxr(v55 - 1, v53));
              }
            }
            v56 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
            v35 = (unsigned int *)v56;
            if (v56)
            {
              v57 = (unsigned int *)(v56 + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 + 1, v57));
            }
            v59 = atomic_load(v50);
            if (v59 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
            }
            else
            {
              do
                v60 = __ldaxr(v50);
              while (__stlxr(v60 - 1, v50));
            }
            if (!v35)
              break;
            v47 = v35;
          }
          while (v46-- > 1);
          v45 = *((_QWORD *)this + 9);
        }
        v62 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v45 - 8);
        (*(void (**)(__int128 *__return_ptr, uint64_t, const KB::String *, const KB::String *, char *))(*(_QWORD *)v62 + 48))(&v115, v62, a2, a4, (char *)this + 128);
        if (__p[0])
          operator delete(__p[0]);
        *(_OWORD *)__p = v115;
        *(_QWORD *)&v109 = v116[0];
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 10)
                                                                     + 8 * *((_QWORD *)this + 9)
                                                                     - 8)
                                                       + 56))(&v115);
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 10)
                                                                     + 8 * *((_QWORD *)this + 9)
                                                                     - 8)
                                                       + 64))(&v115);
      }
      v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * *((_QWORD *)this + 6) - 8) + 8);
      v101 = (unsigned int *)v115;
      (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned int **))(*(_QWORD *)v63 + 88))(&v115, v63, &v101);
      v64 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * *((_QWORD *)this + 6) - 8);
      v65 = *(unsigned int **)(v64 + 8);
      v66 = v115;
      *(_QWORD *)&v115 = 0;
      *(_QWORD *)(v64 + 8) = v66;
      if (v65)
      {
        v67 = v65 + 2;
        v68 = atomic_load(v65 + 2);
        if (v68 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v65 + 8))(v65);
        }
        else
        {
          do
            v69 = __ldaxr(v67);
          while (__stlxr(v69 - 1, v67));
        }
        if ((_QWORD)v115)
        {
          v70 = (unsigned int *)(v115 + 8);
          v71 = atomic_load((unsigned int *)(v115 + 8));
          if (v71 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v115 + 8))();
          }
          else
          {
            do
              v72 = __ldaxr(v70);
            while (__stlxr(v72 - 1, v70));
          }
        }
      }
      if (v101)
      {
        v73 = v101 + 2;
        v74 = atomic_load(v101 + 2);
        if (v74 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v101 + 8))();
        }
        else
        {
          do
            v75 = __ldaxr(v73);
          while (__stlxr(v75 - 1, v73));
        }
      }
      if (v35)
      {
        v76 = v35 + 2;
        v77 = atomic_load(v35 + 2);
        if (v77 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
        }
        else
        {
          do
            v78 = __ldaxr(v76);
          while (__stlxr(v78 - 1, v76));
        }
      }
    }
    if (*(_WORD *)a2 && __p[0] == __p[1])
      goto LABEL_100;
    v79 = *((unsigned __int16 *)a4 + 2);
    if (!*((_WORD *)a4 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a4);
      v79 = *((unsigned __int16 *)a4 + 2);
    }
    v80 = (*((_QWORD *)this + 22) - *((_QWORD *)this + 21)) >> 2;
    if (v80 < v79)
    {
LABEL_100:
      v81 = (char *)this + 209;
    }
    else
    {
      v81 = (char *)this + 209;
      if (*((_DWORD *)this + 48) <= v80)
      {
        if (!*v81)
        {
          TI::Favonius::FavoniusStrokeBuildManager::align_candidate_to_input((const std::vector<unsigned int> *)this, a2, a4, (std::vector<unsigned int> *)__p, a8);
LABEL_104:
          if (__p[0])
            operator delete(__p[0]);
          return;
        }
LABEL_103:
        a8->__begin_ = 0;
        a8->__end_ = 0;
        a8->__end_cap_.__value_ = 0;
        goto LABEL_104;
      }
    }
    *v81 = 1;
    goto LABEL_103;
  }
  if ((*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *, const KB::String *, const KB::String *, const KB::String *, uint64_t, const KB::String *))(*(_QWORD *)this + 384))(this, a2, a3, a4, a6, a5))
  {
    if (*(_WORD *)a2)
    {
      KB::word_ranges(a2, 0, &v106);
      v18 = v106;
      v19 = v107;
      if (v106 != v107)
      {
        v20 = (char *)*((_QWORD *)a2 + 1);
        if (!v20)
          v20 = (char *)a2 + 16;
        __p[0] = v20;
        v21 = *(unsigned __int16 *)a2;
        LODWORD(__p[1]) = 0;
        HIDWORD(__p[1]) = v21;
        LODWORD(v109) = 0;
        KB::String::iterator::initialize((uint64_t *)__p);
        v22 = *((int *)v19 - 2);
        v104 = *(_OWORD *)__p;
        v105 = v109;
        std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v104, v22);
        v23 = *((int *)v19 - 1);
        v102 = v104;
        v103 = v105;
        std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v102, v23);
        KB::String::String((KB::String *)__p, (const KB::String::iterator *)&v104, (const KB::String::iterator *)&v102);
        KB::lower_string((KB *)__p, 0, (KB::String *)&v115);
        v24 = (char *)*((_QWORD *)this + 98);
        if (v24)
        {
          if (*((_QWORD *)&v115 + 1))
            v25 = (const char *)*((_QWORD *)&v115 + 1);
          else
            v25 = (const char *)v116;
          while (1)
          {
            while (1)
            {
              v26 = v24;
              v27 = (char *)*((_QWORD *)v24 + 5);
              v28 = v27 ? v27 : v26 + 48;
              if ((strcmp(v25, v28) & 0x80000000) == 0)
                break;
              v24 = *(char **)v26;
              v29 = (uint64_t **)v26;
              if (!*(_QWORD *)v26)
                goto LABEL_110;
            }
            if ((strcmp(v28, v25) & 0x80000000) == 0)
              break;
            v29 = (uint64_t **)(v26 + 8);
            v24 = (char *)*((_QWORD *)v26 + 1);
            if (!v24)
              goto LABEL_110;
          }
        }
        else
        {
          v26 = (char *)this + 784;
          v29 = (uint64_t **)((char *)this + 784);
LABEL_110:
          v82 = v26;
          v26 = (char *)operator new(0xA8uLL);
          *((_DWORD *)v26 + 8) = 0x100000;
          *((_WORD *)v26 + 18) = 0;
          v26[38] = 0;
          *((_QWORD *)v26 + 5) = 0;
          KB::String::operator=((uint64_t)(v26 + 32), (KB::String *)&v115);
          *((_DWORD *)v26 + 41) = 0;
          *((_OWORD *)v26 + 4) = 0u;
          *((_OWORD *)v26 + 5) = 0u;
          *((_OWORD *)v26 + 6) = 0u;
          *((_OWORD *)v26 + 7) = 0u;
          *((_OWORD *)v26 + 8) = 0u;
          *((_OWORD *)v26 + 9) = 0u;
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
          *((_QWORD *)v26 + 2) = v82;
          *v29 = (uint64_t *)v26;
          v83 = **((_QWORD **)this + 97);
          v84 = (uint64_t *)v26;
          if (v83)
          {
            *((_QWORD *)this + 97) = v83;
            v84 = *v29;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 98), v84);
          ++*((_QWORD *)this + 99);
        }
        std::vector<KB::Candidate>::__vdeallocate((void **)v26 + 8);
        *((_OWORD *)v26 + 4) = *((_OWORD *)this + 50);
        *((_QWORD *)v26 + 10) = *((_QWORD *)this + 102);
        *((_QWORD *)this + 100) = 0;
        *((_QWORD *)this + 101) = 0;
        *((_QWORD *)this + 102) = 0;
        if (*((_QWORD *)&v115 + 1) && BYTE6(v115) == 1)
          free(*((void **)&v115 + 1));
        if (__p[1] && BYTE6(__p[0]) == 1)
          free(__p[1]);
        v18 = v106;
      }
      v114 = 0;
      *(_OWORD *)__p = 0u;
      v109 = 0u;
      *(_OWORD *)v110 = 0u;
      v111 = 0u;
      v112 = 0u;
      v113 = 0u;
      KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)__p);
      *(_QWORD *)&v115 = (char *)&v112 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = &v111;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = (char *)&v109 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = __p;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      if (v18)
      {
        v107 = v18;
        operator delete(v18);
      }
    }
    else
    {
      v114 = 0;
      *(_OWORD *)__p = 0u;
      v109 = 0u;
      *(_OWORD *)v110 = 0u;
      v111 = 0u;
      v112 = 0u;
      v113 = 0u;
      KB::CandidateCollection::operator=((uint64_t)this + 800, (uint64_t)__p);
      *(_QWORD *)&v115 = (char *)&v112 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = &v111;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = (char *)&v109 + 8;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      *(_QWORD *)&v115 = __p;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v115);
      std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*((_QWORD **)this + 98));
      *((_QWORD *)this + 97) = (char *)this + 784;
      *((_QWORD *)this + 99) = 0;
      *((_QWORD *)this + 98) = 0;
    }
  }
  v85 = *((_QWORD *)this + 90);
  if (v85)
  {
    v86 = *(_QWORD *)(v85 + 40);
    if (v86)
    {
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 48))(v86);
      TI::TIInputRecognizer::load_lexicons_if_needed(v85, *(const KB::DynamicDictionary **)(*(_QWORD *)v87 + 24));
    }
  }
  v88 = *((_QWORD *)this + 88);
  if (v88)
    (*(void (**)(uint64_t, const KB::String *, const KB::String *, uint64_t, _QWORD))(*(_QWORD *)v88 + 88))(v88, a2, a3, a6, 0);
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  *((_BYTE *)this + 209) = 1;
  a8->__end_ = 0;
  a8->__end_cap_.__value_ = 0;
  a8->__begin_ = 0;
  while (1)
  {
    v93 = *((unsigned __int16 *)a2 + 2);
    if (!*((_WORD *)a2 + 2))
    {
      KB::String::compute_length((unsigned __int16 *)a2);
      v93 = *((unsigned __int16 *)a2 + 2);
    }
    if (v93 <= v92)
      break;
    if (v91 >= (char *)v90)
    {
      v95 = (v91 - v89) >> 2;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 62)
        abort();
      if (((char *)v90 - v89) >> 1 > v96)
        v96 = ((char *)v90 - v89) >> 1;
      if ((unint64_t)((char *)v90 - v89) >= 0x7FFFFFFFFFFFFFFCLL)
        v97 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v97 = v96;
      if (v97)
        v97 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v97);
      else
        v98 = 0;
      v99 = (unsigned int *)(v97 + 4 * v95);
      *v99 = -1;
      v94 = v99 + 1;
      while (v91 != v89)
      {
        v100 = *((_DWORD *)v91 - 1);
        v91 -= 4;
        *--v99 = v100;
      }
      v90 = (unsigned int *)(v97 + 4 * v98);
      a8->__begin_ = v99;
      a8->__end_ = v94;
      a8->__end_cap_.__value_ = v90;
      if (v89)
        operator delete(v89);
      v89 = (char *)v99;
    }
    else
    {
      *(_DWORD *)v91 = -1;
      v94 = (unsigned int *)(v91 + 4);
    }
    a8->__end_ = v94;
    ++v92;
    v91 = (char *)v94;
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::remove_text_usage(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::String *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t, const KB::String *))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::drop_input_prefix(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::LanguageModelContext *a2, unsigned int a3, const KB::String *a4)
{
  TI::Favonius::FavoniusStrokeBuildManager *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  unint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int **v24;
  unint64_t v25;
  unsigned int **v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  unsigned int **v49;
  unsigned int **v50;
  uint64_t *v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int **v56;
  unsigned int **v57;
  unsigned int **v58;
  unsigned int *v59;
  unsigned int v60;
  TI::TIInputRecognizer *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  uint64_t v88;
  unsigned int **v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  BOOL v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int *v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int **v120;
  uint64_t v121;
  void *__p[3];
  unsigned int *v123;
  void *v124;
  uint64_t v125;

  v6 = this;
  v125 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t *)((char *)this + 48);
  v8 = *((_QWORD *)this + 6) - 1;
  LOBYTE(v123) = 0;
  std::vector<BOOL>::vector(__p, v8, (unsigned __int8 *)&v123);
  TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::drop_input_prefix((uint64_t)(v7 + 15), a3, (uint64_t)__p);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v9 = *v7;
  if (*v7 <= 1)
  {
    v10 = 0;
    v24 = (unsigned int **)(*((_QWORD *)v6 + 7) + 8 * v9 - 8);
    goto LABEL_29;
  }
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = (v11 - 1);
    if (((*(_QWORD *)((char *)__p[0] + ((v12 >> 3) & 0x1FFFFFF8)) >> (v11 - 1)) & 1) == 0)
      goto LABEL_24;
    v13 = v119;
    if (!v119)
    {
      v14 = (unsigned int **)(*((_QWORD *)v6 + 7) + 8 * v12);
      if (v121)
      {
        v13 = 0;
        v15 = v120;
      }
      else
      {
        v16 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v119, 1uLL, (unint64_t)v14);
        v13 = v119;
        v15 = v120;
        if (!v120)
          goto LABEL_13;
        v14 = (unsigned int **)v16;
      }
      v17 = *v14;
      v15[v13] = *v14;
      if (v17)
      {
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
        v13 = v119;
      }
      v119 = ++v13;
    }
LABEL_13:
    v19 = (unsigned int **)(*((_QWORD *)v6 + 7) + 8 * v11);
    if (v13 != v121)
    {
      v21 = v120;
      goto LABEL_17;
    }
    v20 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v119, v13 + 1, (unint64_t)v19);
    v21 = v120;
    if (v120)
    {
      v19 = (unsigned int **)v20;
      v13 = v119;
LABEL_17:
      v22 = *v19;
      v21[v13] = *v19;
      if (v22)
      {
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        v13 = v119;
      }
      v119 = v13 + 1;
    }
    if (v12 < *((_DWORD *)v6 + 40))
      ++v10;
    v9 = *((_QWORD *)v6 + 6);
LABEL_24:
    v11 = (v11 + 1);
  }
  while (v9 > v11);
  if (!v119)
  {
    v24 = (unsigned int **)(*((_QWORD *)v6 + 7) + 8 * v9 - 8);
    if (v121)
    {
      v25 = 0;
      v26 = v120;
      goto LABEL_31;
    }
LABEL_29:
    v27 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(&v119, 1uLL, (unint64_t)v24);
    v26 = v120;
    if (v120)
    {
      v24 = (unsigned int **)v27;
      v25 = v119;
LABEL_31:
      v28 = *v24;
      v26[v25] = *v24;
      if (v28)
      {
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
        v25 = v119;
      }
      v119 = v25 + 1;
    }
  }
  v30 = *((unsigned __int16 *)v6 + 66);
  if (!*((_WORD *)v6 + 66))
  {
    KB::String::compute_length((unsigned __int16 *)v6 + 64);
    v30 = *((unsigned __int16 *)v6 + 66);
  }
  if (v30 <= a3)
  {
    KB::String::clear((TI::Favonius::FavoniusStrokeBuildManager *)((char *)v6 + 128));
  }
  else
  {
    v31 = (char *)v6 + 144;
    if (*((_QWORD *)v6 + 17))
      v32 = (char *)*((_QWORD *)v6 + 17);
    else
      v32 = (char *)v6 + 144;
    *(_QWORD *)&v115 = v32;
    v33 = *((unsigned __int16 *)v6 + 64);
    DWORD2(v115) = 0;
    HIDWORD(v115) = v33;
    LODWORD(v116) = 0;
    KB::String::iterator::initialize((uint64_t *)&v115);
    v117 = v115;
    v118 = v116;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v117, (int)a3);
    *(_QWORD *)&v113 = v32;
    DWORD2(v113) = v33;
    HIDWORD(v113) = v33;
    LODWORD(v114) = 0;
    KB::String::iterator::initialize((uint64_t *)&v113);
    KB::String::String((KB::String *)&v123, (const KB::String::iterator *)&v117, (const KB::String::iterator *)&v113);
    KB::String::operator=((uint64_t)v6 + 128, (KB::String *)&v123);
    if (v124 && BYTE6(v123) == 1)
      free(v124);
    v34 = *((_QWORD *)v6 + 21);
    v35 = *((unsigned int *)v6 + 48);
    if ((_DWORD)v35)
    {
      v36 = 4 * v35;
      v37 = (_DWORD *)*((_QWORD *)v6 + 21);
      v38 = (_DWORD *)(v34 + 4 * v35);
      while (*v37 == -1)
      {
        ++v37;
        v36 -= 4;
        if (!v36)
        {
          v37 = v38;
          break;
        }
      }
    }
    else
    {
      v37 = (_DWORD *)*((_QWORD *)v6 + 21);
    }
    v39 = (uint64_t)v37 - v34;
    if (*((_QWORD *)v6 + 17))
      v31 = (char *)*((_QWORD *)v6 + 17);
    *(_QWORD *)&v117 = v31;
    v40 = *((unsigned __int16 *)v6 + 64);
    DWORD2(v117) = 0;
    HIDWORD(v117) = v40;
    LODWORD(v118) = 0;
    KB::String::iterator::initialize((uint64_t *)&v117);
    *(_QWORD *)&v113 = v31;
    DWORD2(v113) = 0;
    HIDWORD(v113) = v40;
    LODWORD(v114) = 0;
    KB::String::iterator::initialize((uint64_t *)&v113);
    v115 = v113;
    v116 = v114;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v115, (int)(v39 >> 2));
    KB::String::String((KB::String *)&v123, (const KB::String::iterator *)&v117, (const KB::String::iterator *)&v115);
    KB::String::operator=((uint64_t)v6 + 128, (KB::String *)&v123);
    if (v124 && BYTE6(v123) == 1)
      free(v124);
  }
  if (&v119 != v7)
  {
    v41 = *v7;
    v42 = v119;
    if (*v7 <= v119)
    {
      v45 = *((_QWORD *)v6 + 8);
      if (v119 <= v45)
      {
        v42 = *v7;
        goto LABEL_75;
      }
      if (v45)
      {
        if (v41)
        {
          v46 = (uint64_t *)*((_QWORD *)v6 + 7);
          v47 = 8 * v41;
          do
          {
            if (*v46)
              WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v46);
            ++v46;
            v47 -= 8;
          }
          while (v47);
          *v7 = 0;
        }
        v48 = (void *)*((_QWORD *)v6 + 7);
        *((_QWORD *)v6 + 7) = 0;
        *((_QWORD *)v6 + 8) = 0;
        free(v48);
        v42 = v119;
      }
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(v7, v42);
      if (*((_QWORD *)v6 + 7))
      {
        v42 = *v7;
        goto LABEL_75;
      }
    }
    else
    {
      v43 = (uint64_t *)(*((_QWORD *)v6 + 7) + 8 * v119);
      v44 = 8 * v41 - 8 * v119;
      do
      {
        if (*v43)
          WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v43);
        ++v43;
        v44 -= 8;
      }
      while (v44);
      *v7 = v42;
LABEL_75:
      v49 = v120;
      if (v42)
      {
        v50 = &v120[v42];
        v51 = (uint64_t *)*((_QWORD *)v6 + 7);
        do
        {
          v52 = *v49;
          if (*v49)
          {
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
          }
          v54 = *v51;
          *v51 = (uint64_t)v52;
          if (v54)
            WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v54);
          ++v49;
          ++v51;
        }
        while (v49 != v50);
        v49 = v120;
        v55 = *v7;
      }
      else
      {
        v55 = 0;
      }
      if (v55 != v119)
      {
        v56 = &v49[v119];
        v57 = (unsigned int **)(*((_QWORD *)v6 + 7) + 8 * v55);
        v58 = &v49[v55];
        do
        {
          v59 = *v58;
          *v57 = *v58;
          if (v59)
          {
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 + 1, v59));
          }
          ++v57;
          ++v58;
        }
        while (v58 != v56);
        v55 = v119;
      }
      *v7 = v55;
    }
  }
  *((_DWORD *)v6 + 40) = v10;
  KB::LanguageModelContext::operator=((uint64_t)v6 + 224, (uint64_t *)a2);
  v61 = (TI::TIInputRecognizer *)*((_QWORD *)v6 + 90);
  if (v61)
    TI::TIInputRecognizer::drop_input_prefix(v61, (TI::Favonius::FavoniusStrokeBuildManager *)((char *)v6 + 224));
  v62 = *((_QWORD *)v6 + 88);
  if (v62)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 120))(v62, (uint64_t)v6 + 224);
  v63 = *((unsigned __int16 *)v6 + 66);
  if (!*((_WORD *)v6 + 66))
  {
    KB::String::compute_length((unsigned __int16 *)v6 + 64);
    v63 = *((unsigned __int16 *)v6 + 66);
  }
  if (v63 > 0x7F)
    goto LABEL_154;
  v64 = (unsigned int *)*((_QWORD *)v6 + 1);
  if (!v64 || !*((_QWORD *)v6 + 5))
    goto LABEL_154;
  v123 = 0;
  v66 = (uint64_t *)((char *)v6 + 72);
  v65 = *((_QWORD *)v6 + 9);
  if (!v65)
    goto LABEL_152;
  v67 = *(_QWORD *)(*((_QWORD *)v6 + 10) + 8 * v65 - 8);
  v112 = v64;
  v68 = v64 + 2;
  do
    v69 = __ldaxr(v68);
  while (__stlxr(v69 + 1, v68));
  v70 = (unsigned int *)*((_QWORD *)v6 + 2);
  v111 = v70;
  if (v70)
  {
    v71 = v70 + 2;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **, const KB::LanguageModelContext *, uint64_t, unsigned int **, unsigned int **))(*(_QWORD *)v67 + 112))(&v117, v67, __p, a2, (uint64_t)v6 + 128, &v112, &v111);
  v73 = v123;
  v74 = (unsigned int *)v117;
  *(_QWORD *)&v117 = 0;
  v123 = v74;
  if (v73)
  {
    v75 = v73 + 2;
    v76 = atomic_load(v73 + 2);
    if (v76 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
    }
    else
    {
      do
        v77 = __ldaxr(v75);
      while (__stlxr(v77 - 1, v75));
    }
    if ((_QWORD)v117)
    {
      v78 = (unsigned int *)(v117 + 8);
      v79 = atomic_load((unsigned int *)(v117 + 8));
      if (v79 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v117 + 8))();
      }
      else
      {
        do
          v80 = __ldaxr(v78);
        while (__stlxr(v80 - 1, v78));
      }
    }
  }
  if (v111)
  {
    v81 = v111 + 2;
    v82 = atomic_load(v111 + 2);
    if (v82 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v111 + 8))();
    }
    else
    {
      do
        v83 = __ldaxr(v81);
      while (__stlxr(v83 - 1, v81));
    }
  }
  if (v112)
  {
    v84 = v112 + 2;
    v85 = atomic_load(v112 + 2);
    if (v85 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v112 + 40))();
    }
    else
    {
      do
        v86 = __ldaxr(v84);
      while (__stlxr(v86 - 1, v84));
    }
  }
  v87 = v123;
  if (!v123)
  {
LABEL_152:
    v109 = 17;
LABEL_153:
    (*(void (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(_QWORD *)v6 + 8 * v109))(v6);
    goto LABEL_154;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity((uint64_t)v6 + 72);
  while (2)
  {
    v88 = *((_QWORD *)v6 + 9);
    if (v88 == *((_QWORD *)v6 + 11))
    {
      v89 = (unsigned int **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)v6 + 9, v88 + 1, (unint64_t)&v123);
      v90 = *((_QWORD *)v6 + 10);
      if (v90)
      {
        v91 = *v66;
        v87 = *v89;
        *(_QWORD *)(v90 + 8 * *v66) = *v89;
        if (!v87)
          goto LABEL_132;
        goto LABEL_129;
      }
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)v6 + 10) + 8 * v88) = v87;
LABEL_129:
      v92 = v87 + 2;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 + 1, v92));
      v91 = *v66;
LABEL_132:
      *v66 = v91 + 1;
    }
    v94 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v123 + 24))(v123);
    v87 = (unsigned int *)v94;
    if (v94)
    {
      v95 = (unsigned int *)(v94 + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 + 1, v95));
    }
    v97 = v123;
    v123 = v87;
    if (v97)
    {
      v98 = v97 + 2;
      v99 = atomic_load(v97 + 2);
      if (v99 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v97 + 8))(v97);
      }
      else
      {
        do
          v100 = __ldaxr(v98);
        while (__stlxr(v100 - 1, v98));
      }
      v87 = v123;
    }
    if (v87)
      continue;
    break;
  }
  v101 = *((_QWORD *)v6 + 9);
  if (v101)
  {
    v102 = *((_QWORD *)v6 + 10);
    v103 = (_QWORD *)(v102 + 8 * v101 - 8);
    if ((unint64_t)v103 > v102)
    {
      v104 = v102 + 8;
      do
      {
        v105 = *(_QWORD *)(v104 - 8);
        *(_QWORD *)(v104 - 8) = *v103;
        *v103-- = v105;
        v106 = v104 >= (unint64_t)v103;
        v104 += 8;
      }
      while (!v106);
      v6 = (TI::Favonius::FavoniusStrokeBuildManager *)v123;
      if (v123)
      {
        v107 = v123 + 2;
        v108 = atomic_load(v123 + 2);
        if (v108 == 1)
        {
          v109 = 1;
          goto LABEL_153;
        }
        do
          v110 = __ldaxr(v107);
        while (__stlxr(v110 - 1, v107));
      }
    }
  }
LABEL_154:
  WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector(&v119);
  if (__p[0])
    operator delete(__p[0]);
}

void TI::Favonius::FavoniusStrokeBuildManager::sync_with_input_from_UI(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::LanguageModelContext *a2, const KB::String *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  std::vector<unsigned int>::const_iterator v23;
  uint64_t v24;
  void (***v25)(std::vector<unsigned int>::value_type *__return_ptr, _QWORD, const KB::LanguageModelContext *, char *, unsigned int **, unsigned int **, unsigned int **);
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  const KB::String *v48;
  unsigned int v49;
  TI::TIInputRecognizer *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int *v65;
  std::vector<unsigned int>::value_type __x[2];
  size_t __n;
  void *v68;
  _QWORD v69[3];

  v69[2] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 209))
  {
    __n = 0;
    v68 = 0;
    v69[0] = 0;
    TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history((uint64_t)this, *((_DWORD *)this + 40), &__n);
    v10 = *((_QWORD *)this + 6);
    v11 = (uint64_t *)*((_QWORD *)this + 7);
    v12 = (_QWORD *)((char *)this + 48);
    v13 = &v11[v10];
    v14 = *v11;
    *v11 = *(v13 - 1);
    *(v13 - 1) = v14;
    if (v10)
    {
      if (v10 != 1)
      {
        v15 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
        v16 = 8 * v10 - 8;
        do
        {
          if (*v15)
            WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v15);
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
    }
    else
    {
      if (!*((_QWORD *)this + 8))
        WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((_QWORD *)this + 6, 1uLL);
      v20 = *((_QWORD *)this + 7);
      if (v20)
        bzero((void *)(v20 + 8 * *v12), 8 - 8 * *v12);
    }
    *((_QWORD *)this + 6) = 1;
    v21 = (unint64_t *)((char *)this + 72);
    WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity((uint64_t)this + 72);
    v22 = *((_QWORD *)this + 21);
    *((_BYTE *)this + 208) = 0;
    *((_QWORD *)this + 22) = v22;
    *((_DWORD *)this + 48) = 0;
    KB::String::operator=((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 128), a3);
    __x[0] = -1;
    v23.__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)(*((_QWORD *)this + 21)
                                                                     + 4 * *((unsigned int *)this + 48));
    std::vector<unsigned int>::insert((std::vector<unsigned int> *)this + 7, v23, a5, __x);
    *((_DWORD *)this + 48) = a4;
    KB::LanguageModelContext::operator=((uint64_t)this + 224, (uint64_t *)a2);
    if (a4 > 0x7F)
      goto LABEL_50;
    v24 = *((_QWORD *)this + 1);
    if (!v24)
      goto LABEL_50;
    v25 = (void (***)(std::vector<unsigned int>::value_type *__return_ptr, _QWORD, const KB::LanguageModelContext *, char *, unsigned int **, unsigned int **, unsigned int **))*((_QWORD *)this + 5);
    if (!v25)
      goto LABEL_50;
    v65 = (unsigned int *)*((_QWORD *)this + 1);
    v26 = (unsigned int *)(v24 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = (unsigned int *)*((_QWORD *)this + 2);
    v64 = v28;
    if (v28)
    {
      v29 = v28 + 2;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    v31 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * *((_QWORD *)this + 6) - 8) + 8);
    v63 = v31;
    if (v31)
    {
      v32 = v31 + 2;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    (**v25)(__x, v25, a2, (char *)this + 128, &v65, &v64, &v63);
    v34 = *((_QWORD *)this + 9);
    if (v34 == *((_QWORD *)this + 11))
    {
      v35 = v34 + (v34 >> 1);
      if (v34 < 0x100)
        v35 = 2 * v34;
      if (v35 <= v34 + 1)
        v36 = v34 + 1;
      else
        v36 = v35;
      WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((_QWORD *)this + 9, v36);
      v37 = *((_QWORD *)this + 10);
      if (!v37)
      {
        if (*(_QWORD *)__x)
        {
          v59 = (unsigned int *)(*(_QWORD *)__x + 8);
          v60 = atomic_load((unsigned int *)(*(_QWORD *)__x + 8));
          if (v60 == 1)
          {
            (*(void (**)(void))(**(_QWORD **)__x + 8))();
          }
          else
          {
            do
              v61 = __ldaxr(v59);
            while (__stlxr(v61 - 1, v59));
          }
        }
        goto LABEL_38;
      }
      v34 = *v21;
    }
    else
    {
      v37 = *((_QWORD *)this + 10);
    }
    v38 = *(_QWORD *)__x;
    *(_QWORD *)__x = 0;
    *(_QWORD *)(v37 + 8 * v34) = v38;
    *v21 = v34 + 1;
LABEL_38:
    if (v63)
    {
      v39 = v63 + 2;
      v40 = atomic_load(v63 + 2);
      if (v40 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      }
      else
      {
        do
          v41 = __ldaxr(v39);
        while (__stlxr(v41 - 1, v39));
      }
    }
    if (v64)
    {
      v42 = v64 + 2;
      v43 = atomic_load(v64 + 2);
      if (v43 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v64 + 8))();
      }
      else
      {
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
      }
    }
    if (v65)
    {
      v45 = v65 + 2;
      v46 = atomic_load(v65 + 2);
      if (v46 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v65 + 40))();
      }
      else
      {
        do
          v47 = __ldaxr(v45);
        while (__stlxr(v47 - 1, v45));
      }
    }
LABEL_50:
    *((_DWORD *)this + 40) = 0;
    TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history((uint64_t)this, (uint64_t *)&__n);
    if (*((_QWORD *)this + 6) >= 2uLL)
    {
      v49 = 2;
      do
      {
        TI::Favonius::FavoniusStrokeBuildManager::perform_search(this, v49 - 1, &v62);
        if (v62)
          WTF::RefCounted<TI::Favonius::Key>::deref((uint64_t)v62);
      }
      while (*v12 > (unint64_t)v49++);
    }
    v51 = (TI::TIInputRecognizer *)*((_QWORD *)this + 90);
    if (v51)
      TI::TIInputRecognizer::sync_with_input_from_UI(v51, v48, a2);
    v52 = *((_QWORD *)this + 88);
    if (v52)
      (*(void (**)(uint64_t, const KB::LanguageModelContext *))(*(_QWORD *)v52 + 120))(v52, a2);
    std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100]((uint64_t)this + 920);
    WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(&__n);
    goto LABEL_60;
  }
  if (a4 && TI::Favonius::FavoniusStrokeBuildManager::last_touch_committed_and_hit_return_key(this))
  {
    KB::String::String((KB::String *)&__n, "\n");
    v17 = *(unsigned __int16 *)a3;
    if ((unsigned __int16)__n <= v17)
    {
      v53 = v17 - (unsigned __int16)__n;
      v54 = (char *)*((_QWORD *)a3 + 1);
      if (!v54)
        v54 = (char *)a3 + 16;
      v19 = v68;
      if (v68)
        v55 = (const char *)v68;
      else
        v55 = (const char *)v69;
      v18 = strncmp(&v54[v53], v55, (unsigned __int16)__n) == 0;
    }
    else
    {
      v18 = 0;
      v19 = v68;
    }
    if (v19 && BYTE6(__n) == 1)
      free(v19);
    if (!v18)
    {
      v56 = *((_QWORD *)this + 9);
      --*((_DWORD *)this + 40);
      WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrink((unsigned int *)this + 18, v56 - 1);
      v57 = *((_QWORD *)this + 6) - 1;
      v58 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v57);
      if (v58)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v58);
      *((_QWORD *)this + 6) = v57;
    }
  }
LABEL_60:
  *((_BYTE *)this + 209) = 0;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::language_model_uses_input_context(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::has_input_from_touch(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  if (*((_BYTE *)this + 209))
    return 0;
  v2 = *((_QWORD *)this + 21);
  v3 = *((unsigned int *)this + 48);
  if ((_DWORD)v3)
  {
    v4 = 4 * v3;
    v5 = (_DWORD *)*((_QWORD *)this + 21);
    while (*v5 == -1)
    {
      ++v5;
      v4 -= 4;
      if (!v4)
      {
        v5 = (_DWORD *)(v2 + 4 * v3);
        return v3 > (((unint64_t)v5 - v2) >> 2);
      }
    }
  }
  else
  {
    v5 = (_DWORD *)*((_QWORD *)this + 21);
  }
  return v3 > (((unint64_t)v5 - v2) >> 2);
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_typing_model(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int **)(a1 + 8);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  *(_BYTE *)(a1 + 210) = 1;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::candidate_generator@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_candidate_generator(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int **)(a1 + 16);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  *(_BYTE *)(a1 + 210) = 1;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::candidate_refinery@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *TI::Favonius::FavoniusStrokeBuildManager::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<KB::LanguageModel>::operator=[abi:nn180100]((_QWORD *)(a1 + 24), *a2, a2[1]);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::search_algorithm@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 40);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

unsigned int *TI::Favonius::FavoniusStrokeBuildManager::set_search_algorithm(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int **)(a1 + 40);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 40) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::touch_count(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 209))
    return 0;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    return (v2 - 1);
  else
    return 0;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::keys_for_input(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_BYTE *)this + 209))
    return 0;
  v2 = *((_QWORD *)this + 21);
  if (((unint64_t)(*((_QWORD *)this + 22) - v2) >> 2) <= a2)
    return 0;
  for (; a2; --a2)
  {
    if (*(_DWORD *)(v2 + 4 * a2) != -1)
      break;
  }
  v3 = *(unsigned int *)(v2 + 4 * a2);
  if ((_DWORD)v3 == -1)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * v3 + 8) + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_search_if_necessary_from_last_touch(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  void *__p[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void **v14;
  void *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 209))
  {
    v2 = *((_DWORD *)this + 40);
    if (v2)
    {
      *((_DWORD *)this + 40) = v2 - 1;
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    *(_OWORD *)__p = 0u;
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v11);
    language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v11 + 8));
    v12 = 0uLL;
    v13 = 0;
    LODWORD(v14) = 0x100000;
    WORD2(v14) = 0;
    BYTE6(v14) = 0;
    v15 = 0;
    v16 = 0;
    (*(void (**)(TI::Favonius::FavoniusStrokeBuildManager *, __int128 *, void ***, _QWORD, _QWORD))(*(_QWORD *)this + 144))(this, &v7, &v14, 0, 0);
    *((_DWORD *)this + 40) = v3;
    if (v15 && BYTE6(v14) == 1)
      free(v15);
    v14 = (void **)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v14);
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v11 + 8));
    language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v11);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::append_debug_data(TI::Favonius::FavoniusStrokeBuildManager *this, __CFString *a2, int a3)
{
  const char *v5;
  uint64_t v6;
  TI::CP::Search *v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  _WORD v17[3];
  char v18;
  void *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  char v23;
  void *v24;
  char v25;
  int v26;
  __int16 v27;
  char v28;
  void *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a3
    && (*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(_QWORD *)this + 288))(this)
    && (v6 = *((_QWORD *)this + 88)) != 0)
  {
    v7 = *(TI::CP::Search **)(v6 + 64);
    if (v7)
      TI::CP::Search::append_debug_data(v7, a2, v5);
  }
  else
  {
    v8 = *((unsigned int *)this + 40);
    if ((_DWORD)v8 && *((_QWORD *)this + 9) > v8)
    {
      v26 = 0x100000;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * v8) + 8);
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 104))(v9, &v26);
      v10 = (const char *)v29;
      if (!v29)
        v10 = &v30;
      if ((_WORD)v26)
        v11 = v10;
      else
        v11 = "";
      CFStringAppendCString(a2, v11, 0x8000100u);
      v21 = 0x100000;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 0;
      KB::LanguageModelContext::description((int **)this + 28, (KB::String *)v17);
      v12 = (const char *)v19;
      if (!v19)
        v12 = (const char *)&v20;
      if (v17[0])
        v13 = v12;
      else
        v13 = "";
      KB::String::append_format((KB::String *)&v21, "CONTEXT: %s\n", v13);
      if (v19 && v18 == 1)
        free(v19);
      v14 = (const char *)v24;
      if (!v24)
        v14 = &v25;
      if ((_WORD)v21)
        v15 = v14;
      else
        v15 = "";
      CFStringAppendCString(a2, v15, 0x8000100u);
      v16 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * *((unsigned int *)this + 40));
      (*(void (**)(uint64_t, __CFString *))(*(_QWORD *)v16 + 144))(v16, a2);
      if (v24 && v23 == 1)
        free(v24);
      if (v29 && v28 == 1)
        free(v29);
    }
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_testing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 211) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_skip_language_layout_check_cp_ml(uint64_t this, int a2)
{
  if (a2)
    *(_BYTE *)(this + 440) = 0;
  return this;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::is_hit_test_correction(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_BYTE *)this + 209))
    return 0;
  for (i = *((_QWORD *)this + 21); a2; --a2)
  {
    if (*(_DWORD *)(i + 4 * a2) != -1)
      break;
  }
  v5 = *(unsigned int *)(i + 4 * a2);
  if ((_DWORD)v5 == -1)
    return 0;
  v6 = v5 + 1;
  if (*((_QWORD *)this + 9) <= (unint64_t)(v5 + 1))
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * v6) + 8);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  v9 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v6);
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) + 8);
  v11 = *(_QWORD *)(**(_QWORD **)(v8 + 8) + 8);
  return v10 != v11 && !KB::String::equal((KB::String *)(v10 + 8), (const KB::String *)(v11 + 8), 1);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_continuous_path(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 328);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path(uint64_t this, char a2)
{
  *(_BYTE *)(this + 328) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_exact_typed_string_lm_ranking(uint64_t this, char a2)
{
  *(_BYTE *)(this + 212) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_ml_tap_typing(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 330);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_ml_tap_typing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 330) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path_progressive_candidates(uint64_t this, char a2)
{
  *(_BYTE *)(this + 496) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_completes_words(uint64_t this, char a2)
{
  *(_BYTE *)(this + 497) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_should_detect_pause(uint64_t this, char a2)
{
  *(_BYTE *)(this + 498) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::clear_continuous_path(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

double TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_language_weight(TI::Favonius::FavoniusStrokeBuildManager *this, double result)
{
  uint64_t v2;
  uint64_t v3;
  float v4;

  v2 = *((_QWORD *)this + 88);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 64);
    if (v3)
    {
      *(_QWORD *)(v3 + 432) = 0x3FD60DC768DFBD6ALL;
      v4 = result;
      *(double *)(v3 + 440) = v4;
      *(_OWORD *)(v3 + 448) = xmmword_1DA911080;
      *(_OWORD *)(v3 + 464) = xmmword_1DA911090;
      *(_OWORD *)(v3 + 480) = xmmword_1DA9110A0;
      *(_OWORD *)(v3 + 496) = xmmword_1DA9110B0;
      *(_OWORD *)(v3 + 512) = xmmword_1DA9110C0;
      *(_OWORD *)(v3 + 528) = xmmword_1DA9110D0;
      *(_OWORD *)(v3 + 544) = xmmword_1DA9110E0;
      *(_QWORD *)(v3 + 560) = 0x401F404C05921038;
      *(_BYTE *)(v3 + 568) = 1;
      result = 54.3812;
      *(_OWORD *)(v3 + 576) = xmmword_1DA9110F0;
    }
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::enabled_continuous_path_algorithms(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned int *)this + 111);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_enabled_continuous_path_algorithms(uint64_t result, int a2)
{
  *(_DWORD *)(result + 444) = a2;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_continuous_path_retrocorrection(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 329);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_continuous_path_retrocorrection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 329) = a2;
  return this;
}

const void **TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_params(const void **this, const __CFDictionary *a2)
{
  return KB::retain_ptr<__CFDictionary const*>::operator=(this + 91, a2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_source_weights(uint64_t this, CFArrayRef theArray)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (theArray)
  {
    v3 = this;
    this = CFArrayGetCount(theArray);
    if (this >= 1)
    {
      v4 = this;
      v5 = 0;
      v6 = v3 + 352;
      do
      {
        this = (uint64_t)applesauce::CF::details::at_as<__CFNumber const*>(theArray, v5);
        if (v7)
        {
          this = applesauce::CF::convert_as<double,0>(this);
          if (v8)
            *(_QWORD *)(v6 + 8 * v5) = this;
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_source_scales(uint64_t this, CFArrayRef theArray)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  if (theArray)
  {
    v3 = this;
    this = CFArrayGetCount(theArray);
    if (this >= 1)
    {
      v4 = this;
      v5 = 0;
      v6 = v3 + 376;
      do
      {
        this = (uint64_t)applesauce::CF::details::at_as<__CFNumber const*>(theArray, v5);
        if (v7)
        {
          this = applesauce::CF::convert_as<double,0>(this);
          if (v8)
            *(_QWORD *)(v6 + 8 * v5) = this;
        }
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::uses_stem_suffix_correction_factor(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  return *((unsigned __int8 *)this + 768);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_uses_stem_suffix_correction_factor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 768) = a2;
  return this;
}

std::string *TI::Favonius::FavoniusStrokeBuildManager::set_language_identifier(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 448), a2);
}

KB::String *TI::Favonius::FavoniusStrokeBuildManager::set_shape_store_resource_path(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::String *a2)
{
  return KB::String::operator=((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 504), a2);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::set_continuous_path_ensemble_scheme(uint64_t result, int a2)
{
  *(_DWORD *)(result + 344) = a2;
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::remove_shapes_older_than(TI::Favonius::FavoniusStrokeBuildManager *this, double a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 144))(result, a2);
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::get_it_recognizer_state(uint64_t a1@<X0>, int a2@<W1>, CFMutableStringRef *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 720);
  if (v3)
    TI::TIInputRecognizer::state_for_typology_logging(v3, a2, a3);
  else
    *a3 = 0;
}

const void *applesauce::CF::details::at_as<__CFNumber const*>(const __CFArray *a1, unint64_t a2)
{
  if (CFArrayGetCount(a1) <= a2)
    return 0;
  else
    return CFArrayGetValueAtIndex(a1, a2);
}

unint64_t applesauce::CF::convert_as<double,0>(unint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  const __CFNumber *v3;
  CFNumberType v4;
  CFTypeID v5;
  unint64_t v6;
  double v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  const __CFNumber *v16;
  CFNumberType v17;
  BOOL v18;
  int v19;
  double v20;
  uint64_t valuePtr;

  if (*(double *)&result != 0.0)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          v3 = v1;
          v4 = kCFNumberSInt8Type;
          goto LABEL_16;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          v8 = v1;
          v9 = kCFNumberSInt16Type;
          goto LABEL_18;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          v10 = v1;
          v11 = kCFNumberSInt32Type;
          goto LABEL_20;
        case kCFNumberSInt64Type:
          valuePtr = 0;
          v12 = v1;
          v13 = kCFNumberSInt64Type;
          goto LABEL_29;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          v14 = v1;
          v15 = kCFNumberFloat32Type;
          goto LABEL_25;
        case kCFNumberFloat64Type:
          valuePtr = 0;
          v16 = v1;
          v17 = kCFNumberFloat64Type;
          goto LABEL_37;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          v3 = v1;
          v4 = kCFNumberCharType;
LABEL_16:
          v18 = CFNumberGetValue(v3, v4, &valuePtr) == 0;
          v19 = (char)valuePtr;
          goto LABEL_21;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          v8 = v1;
          v9 = kCFNumberShortType;
LABEL_18:
          v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
          v19 = (__int16)valuePtr;
          goto LABEL_21;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          v10 = v1;
          v11 = kCFNumberIntType;
LABEL_20:
          v18 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
          v19 = valuePtr;
LABEL_21:
          v20 = (double)v19;
          goto LABEL_30;
        case kCFNumberLongType:
          valuePtr = 0;
          v12 = v1;
          v13 = kCFNumberLongType;
          goto LABEL_29;
        case kCFNumberLongLongType:
          valuePtr = 0;
          v12 = v1;
          v13 = kCFNumberLongLongType;
          goto LABEL_29;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          v14 = v1;
          v15 = kCFNumberFloatType;
LABEL_25:
          v18 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
          v20 = *(float *)&valuePtr;
          goto LABEL_30;
        case kCFNumberDoubleType:
          valuePtr = 0;
          v16 = v1;
          v17 = kCFNumberDoubleType;
          goto LABEL_37;
        case kCFNumberCFIndexType:
          valuePtr = 0;
          v12 = v1;
          v13 = kCFNumberCFIndexType;
          goto LABEL_29;
        case kCFNumberNSIntegerType:
          valuePtr = 0;
          v12 = v1;
          v13 = kCFNumberNSIntegerType;
LABEL_29:
          v18 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
          v20 = (double)valuePtr;
LABEL_30:
          v7 = v20;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          valuePtr = 0;
          v16 = v1;
          v17 = kCFNumberCGFloatType;
LABEL_37:
          v18 = CFNumberGetValue(v16, v17, &valuePtr) == 0;
          v7 = *(double *)&valuePtr;
LABEL_31:
          if (v18)
            v7 = 0.0;
          v6 = *(_QWORD *)&v7 & 0xFFFFFFFFFFFFFF00;
          break;
        default:
          v6 = 0;
          LOBYTE(v7) = 0;
          break;
      }
      return LOBYTE(v7) | v6;
    }
    else
    {
      v5 = CFBooleanGetTypeID();
      if (v5 == CFGetTypeID(v1))
        *(double *)&result = (double)CFBooleanGetValue(v1);
      else
        *(double *)&result = 0.0;
    }
  }
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::pop_touches_from_history(uint64_t a1, int a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v5 = (a2 + 1);
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a3, *a3 - v5 + *(_QWORD *)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 > v5)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6 - 8) + 8);
      v8 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      v9 = v8;
      if (v8)
      {
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 + 1, v8));
      }
      v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 48) - 8) + 16);
      v12 = operator new();
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = v9;
      *(_DWORD *)(v12 + 16) = v11;
      v26 = v12;
      v13 = *a3;
      if (*a3 != a3[2])
        break;
      v14 = v13 + 1;
      v15 = a3[1];
      if (v15 > (unint64_t)&v26 || v15 + 8 * v13 <= (unint64_t)&v26)
      {
        if (v13 >= 0x100)
          v21 = v13 + (v13 >> 1);
        else
          v21 = 2 * v13;
        if (v21 <= v14)
          v22 = v14;
        else
          v22 = v21;
        WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a3, v22);
        v19 = a3[1];
        v20 = &v26;
        if (!v19)
          goto LABEL_27;
      }
      else
      {
        v16 = (char *)&v26 - v15;
        if (v13 >= 0x100)
          v17 = v13 + (v13 >> 1);
        else
          v17 = 2 * v13;
        if (v17 <= v14)
          v18 = v14;
        else
          v18 = v17;
        WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a3, v18);
        v19 = a3[1];
        v20 = (uint64_t *)&v16[v19];
        if (!v19)
          goto LABEL_27;
      }
      v12 = *v20;
      v23 = *a3;
      *(_QWORD *)(v19 + 8 * *a3) = v12;
      if (v12)
        goto LABEL_24;
LABEL_26:
      *a3 = v23 + 1;
LABEL_27:
      if (v26)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(v26);
      v6 = *(_QWORD *)(a1 + 48) - 1;
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
      if (v25)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v25);
      *(_QWORD *)(a1 + 48) = v6;
      if (v6 <= v5)
        return;
    }
    *(_QWORD *)(a3[1] + 8 * v13) = v12;
    do
LABEL_24:
      v24 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v24 + 1, (unsigned int *)v12));
    v23 = *a3;
    goto LABEL_26;
  }
}

uint64_t WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(uint64_t result)
{
  unsigned int v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = atomic_load((unsigned int *)result);
  if (v1 == 1)
  {
    v2 = *(unsigned int **)(result + 8);
    if (v2)
    {
      v3 = v2 + 2;
      v4 = atomic_load(v2 + 2);
      if (v4 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
      }
      else
      {
        do
          v6 = __ldaxr(v3);
        while (__stlxr(v6 - 1, v3));
      }
    }
    JUMPOUT(0x1DF0A2144);
  }
  do
    v5 = __ldaxr((unsigned int *)result);
  while (__stlxr(v5 - 1, (unsigned int *)result));
  return result;
}

void WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrinkCapacity(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 16))
  {
    if (*(_QWORD *)a1)
      WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrink((unsigned int *)a1, 0);
    v2 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    free(v2);
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::push_touches_to_history(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;

  v2 = *a2;
  if (*a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 48);
    while (1)
    {
      v6 = *(_QWORD *)(v4[7] + 8 * v4[6] - 8);
      v7 = *(_QWORD *)(a2[1] + 8 * v2 - 8);
      v8 = *(unsigned int **)(v7 + 8);
      v15 = v8;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v7 = *(_QWORD *)(a2[1] + 8 * *a2 - 8);
      }
      TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode(&v16, *(_QWORD *)(v6 + 8), (uint64_t *)&v15, *(_DWORD *)(v7 + 16));
      v10 = v4[6];
      if (v10 != v4[8])
        break;
      v11 = (unsigned int **)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity(v5, v10 + 1, (unint64_t)&v16);
      v12 = v4[7];
      if (v12)
      {
        v10 = *v5;
LABEL_10:
        v13 = *v11;
        *(_QWORD *)(v12 + 8 * v10) = *v11;
        if (v13)
        {
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          v10 = *v5;
        }
        *v5 = v10 + 1;
      }
      if (v16)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v16);
      if (v15)
        WTF::RefCounted<TI::Favonius::Touch>::deref((uint64_t)v15);
      v2 = *a2 - 1;
      result = *(_QWORD *)(a2[1] + 8 * v2);
      if (result)
        result = WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(result);
      *a2 = v2;
      if (!v2)
        return result;
    }
    v12 = v4[7];
    v11 = (unsigned int **)&v16;
    goto LABEL_10;
  }
  return result;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::perform_search@<X0>(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, unsigned int a2@<W1>, unsigned int **a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int **v43;
  unsigned int **v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t result;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int *v82;
  unsigned int *v83;
  _QWORD v84[4];
  unsigned int v85;
  unsigned int *v86;
  unsigned int *v87;

  v6 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2);
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  v8 = a2;
  v9 = *(_DWORD *)(v6 + 16);
  v10 = *(unsigned int **)(v6 + 8);
  if (!v10)
  {
    v13 = v9 == -2;
    if (v9 < 0xFFFFFFFE)
    {
      v15 = 0;
      v86 = 0;
      goto LABEL_10;
    }
LABEL_17:
    v16 = 0;
    goto LABEL_18;
  }
  v11 = v10 + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = v9 == -2;
  if (v9 >= 0xFFFFFFFE)
    goto LABEL_17;
  v86 = v10;
  do
    v14 = __ldaxr(v11);
  while (__stlxr(v14 + 1, v11));
  v15 = v86;
LABEL_10:
  v84[0] = MEMORY[0x1E0C809B0];
  v84[1] = 0x40000000;
  v84[2] = ___ZN2TI8Favonius26FavoniusStrokeBuildManager14perform_searchEj_block_invoke;
  v84[3] = &__block_descriptor_tmp_16;
  v85 = v9;
  TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test(&v86, (uint64_t)v84, &v87);
  v16 = v87;
  v87 = 0;
  if (v15)
  {
    v17 = v15 + 2;
    v18 = atomic_load(v15 + 2);
    if (v18 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
    }
    else
    {
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
    }
  }
LABEL_18:
  if (TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search(this, a2))
  {
    v20 = *((_QWORD *)this + 10);
    v21 = *(_QWORD *)(v20 + 8 * v8);
    if (!v13)
    {
      v83 = v10;
      if (v10)
      {
        v22 = v10 + 2;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
      }
      v82 = v16;
      if (v16)
      {
        do
          v24 = __ldaxr(v16);
        while (__stlxr(v24 + 1, v16));
      }
      (*(void (**)(unsigned int **__return_ptr, uint64_t, unsigned int **, unsigned int **, _QWORD))(*(_QWORD *)v21 + 88))(&v87, v21, &v83, &v82, *((unsigned __int8 *)this + 208));
      v25 = *(unsigned int **)(v20 + 8 * v8);
      v26 = v87;
      v87 = 0;
      *(_QWORD *)(v20 + 8 * v8) = v26;
      if (v25)
      {
        v27 = v25 + 2;
        v28 = atomic_load(v25 + 2);
        if (v28 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          do
            v29 = __ldaxr(v27);
          while (__stlxr(v29 - 1, v27));
        }
        if (v87)
        {
          v30 = v87 + 2;
          v31 = atomic_load(v87 + 2);
          if (v31 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v87 + 8))();
          }
          else
          {
            do
              v32 = __ldaxr(v30);
            while (__stlxr(v32 - 1, v30));
          }
        }
      }
      if (v82)
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v82);
      if (v83)
      {
        v33 = v83 + 2;
        v34 = atomic_load(v83 + 2);
        if (v34 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v83 + 8))();
        }
        else
        {
          do
            v35 = __ldaxr(v33);
          while (__stlxr(v35 - 1, v33));
        }
      }
      v21 = *(_QWORD *)(v20 + 8 * v8);
    }
    v36 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    v37 = (uint64_t)v36;
    if (v36)
    {
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 + 1, v36));
    }
LABEL_42:
    if (v16)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v16);
    goto LABEL_95;
  }
  v39 = (unint64_t *)((char *)this + 72);
  v40 = *((_QWORD *)this + 9);
  if (v40 >= a2)
  {
    if (v40 == v8)
    {
      v40 = a2 + 1;
      v79 = a3;
      if (a2 == -1)
      {
        v42 = *((_QWORD *)this + 10);
        v43 = (unsigned int **)(v42 + 8 * v8);
        v44 = (unsigned int **)(v42 + 8 * v40);
        do
        {
          v45 = *v44;
          if (*v44)
          {
            v46 = v45 + 2;
            v47 = atomic_load(v45 + 2);
            if (v47 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 8))(v45);
            }
            else
            {
              do
                v48 = __ldaxr(v46);
              while (__stlxr(v48 - 1, v46));
            }
          }
          ++v44;
        }
        while (v44 != v43);
      }
      else
      {
        v49 = *((_QWORD *)this + 11);
        if (v49 < v40)
        {
          if (v49 >= 0x100)
            v50 = v49 + (v49 >> 1);
          else
            v50 = 2 * v49;
          if (v50 <= v40)
            v51 = a2 + 1;
          else
            v51 = v50;
          WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((_QWORD *)this + 9, v51);
        }
        v52 = *((_QWORD *)this + 10);
        if (v52)
          bzero((void *)(v52 + 8 * *v39), 8 * v40 - 8 * *v39);
      }
      *v39 = v40;
      a3 = v79;
    }
    if (v40 > a2)
    {
      v53 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * (a2 - 1));
      v81 = v10;
      if (v10)
      {
        v54 = v10 + 2;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 + 1, v54));
      }
      v80 = v16;
      if (v16)
      {
        do
          v56 = __ldaxr(v16);
        while (__stlxr(v56 + 1, v16));
      }
      (*(void (**)(unsigned int **__return_ptr, uint64_t, unsigned int **, unsigned int **, _QWORD))(*(_QWORD *)v53 + 72))(&v87, v53, &v81, &v80, *((unsigned __int8 *)this + 208));
      v57 = *((_QWORD *)this + 10);
      v58 = *(unsigned int **)(v57 + 8 * a2);
      v59 = v87;
      v87 = 0;
      *(_QWORD *)(v57 + 8 * a2) = v59;
      if (v58)
      {
        v60 = v58 + 2;
        v61 = atomic_load(v58 + 2);
        if (v61 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
        }
        else
        {
          do
            v62 = __ldaxr(v60);
          while (__stlxr(v62 - 1, v60));
        }
        if (v87)
        {
          v63 = v87 + 2;
          v64 = atomic_load(v87 + 2);
          if (v64 == 1)
          {
            (*(void (**)(void))(*(_QWORD *)v87 + 8))();
          }
          else
          {
            do
              v65 = __ldaxr(v63);
            while (__stlxr(v65 - 1, v63));
          }
        }
      }
      if (v80)
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v80);
      if (v81)
      {
        v66 = v81 + 2;
        v67 = atomic_load(v81 + 2);
        if (v67 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v81 + 8))();
        }
        else
        {
          do
            v68 = __ldaxr(v66);
          while (__stlxr(v68 - 1, v66));
        }
      }
      v69 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * a2);
      v70 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 32))(v69);
      v37 = (uint64_t)v70;
      if (v70)
      {
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 + 1, v70));
      }
      goto LABEL_42;
    }
    v37 = (uint64_t)v16;
    if (!v16)
    {
      v37 = **(_QWORD **)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 64))(v10) + 8);
      if (v37)
      {
        do
          v72 = __ldaxr((unsigned int *)v37);
        while (__stlxr(v72 + 1, (unsigned int *)v37));
      }
    }
  }
  else
  {
    v37 = (uint64_t)v16;
    if (!v16)
    {
      v37 = **(_QWORD **)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 64))(v10) + 8);
      if (v37)
      {
        do
          v41 = __ldaxr((unsigned int *)v37);
        while (__stlxr(v41 + 1, (unsigned int *)v37));
      }
    }
  }
LABEL_95:
  v73 = *(unsigned int **)(v37 + 8);
  *a3 = v73;
  if (v73)
  {
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  result = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v37);
  if (v10)
  {
    v76 = v10 + 2;
    v77 = atomic_load(v10 + 2);
    if (v77 == 1)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
    else
    {
      do
        v78 = __ldaxr(v76);
      while (__stlxr(v78 - 1, v76));
    }
  }
  if (v6)
    return WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v6);
  return result;
}

void std::__optional_destruct_base<std::pair<KB::String,KB::String>,false>::reset[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 64))
  {
    v2 = *(void **)(a1 + 40);
    if (v2 && *(_BYTE *)(a1 + 38) == 1)
      free(v2);
    v3 = *(void **)(a1 + 8);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 6) == 1)
        free(v3);
    }
    *(_BYTE *)(a1 + 64) = 0;
  }
}

_QWORD *WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>,0ul>::~Vector(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  if (*a1)
  {
    v2 = (uint64_t *)a1[1];
    v3 = 8 * *a1;
    do
    {
      if (*v2)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(*v2);
      ++v2;
      v3 -= 8;
    }
    while (v3);
    *a1 = 0;
  }
  v4 = (void *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  free(v4);
  return a1;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::last_touch_committed_and_hit_return_key(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL8 v5;

  v1 = *((_QWORD *)this + 6);
  if (v1 != *((_DWORD *)this + 40) + 1)
    return 0;
  if (*((_QWORD *)this + 9) != v1)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v1 - 8);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if (!v3)
    return 0;
  do
    v4 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v4 + 1, (unsigned int *)v3));
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 56) == 10;
  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v3);
  return v5;
}

unsigned int *WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = result;
  if (*(_QWORD *)result != a2)
  {
    v4 = *((_QWORD *)result + 1);
    v5 = (unsigned int **)(v4 + 8 * *(_QWORD *)result);
    v6 = (unsigned int **)(v4 + 8 * a2);
    do
    {
      result = *v6;
      if (*v6)
      {
        v7 = result + 2;
        v8 = atomic_load(result + 2);
        if (v8 == 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
        else
        {
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 - 1, v7));
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)v3 = a2;
  return result;
}

uint64_t WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchRefWithKeycode>::deref(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = atomic_load((unsigned int *)result);
  if (v1 == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2)
      WTF::RefCounted<TI::Favonius::Touch>::deref(v2);
    JUMPOUT(0x1DF0A2144);
  }
  do
    v3 = __ldaxr((unsigned int *)result);
  while (__stlxr(v3 - 1, (unsigned int *)result));
  return result;
}

BOOL ___ZN2TI8Favonius26FavoniusStrokeBuildManager14perform_searchEj_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(__int16 *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 62);
}

_QWORD *TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, unsigned int **a3@<X8>)
{
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int **v9;
  unsigned int *v11;
  unsigned int v12;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
  if (*result)
  {
    v6 = result;
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = (unsigned int **)(v6[1] + 8 * v7);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, unsigned int **))(a2 + 16))(a2, v9);
      if ((_DWORD)result)
        break;
      v7 = v8;
      if (*v6 <= (unint64_t)v8++)
        goto LABEL_5;
    }
    v11 = *v9;
    *a3 = *v9;
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  else
  {
LABEL_5:
    *a3 = 0;
  }
  return result;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::can_update_existing_search(TI::Favonius::FavoniusStrokeBuildManager *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;

  if (*((_QWORD *)this + 9) <= (unint64_t)a2)
    return 0;
  v4 = a2;
  v5 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = (unsigned int *)v7;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * (a2 - 1));
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v13 = (unsigned int *)v12;
  if (v12)
  {
    v14 = (unsigned int *)(v12 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    v16 = atomic_load(v14);
    if (v16 == 1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    else
    {
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 - 1, v14));
    }
  }
  if (v8)
  {
    v18 = v8 + 2;
    v19 = atomic_load(v8 + 2);
    if (v19 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
    else
    {
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
    }
  }
  if (v8 != v13)
    return 0;
  v22 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v4);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v24 = *(unsigned int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23) + 56);
  if (v24)
  {
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * v4) + 8);
  v27 = *(unsigned int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26) + 56);
  if (v27)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v27);
  }
  v21 = v24 == v27;
  if (v24)
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v24);
  return v21;
}

uint64_t TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode::history_by_appending_touch_keycode(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v6 = *a3;
  *a3 = 0;
  v10 = v6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(&v11, a2, &v10);
  v7 = operator new();
  v8 = v11;
  v11 = 0;
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 16) = a4;
  *a1 = v7;
  result = v10;
  if (v10)
    return WTF::RefCounted<TI::Favonius::Touch>::deref(v10);
  return result;
}

uint64_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager24input_disruption_from_UIEv_block_invoke()
{
  return TIDispatchAsync();
}

uint64_t WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)a1)
    WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::shrink((unsigned int *)a1, 0);
  v2 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  free(v2);
  return a1;
}

uint64_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager24input_disruption_from_UIEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    WTF::Vector<WTF::RefPtr<TI::Favonius::Search>,0ul>::~Vector(result);
    JUMPOUT(0x1DF0A2144);
  }
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::drop_input_prefix(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  std::vector<unsigned int>::pointer v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  int64_t v32;
  std::vector<unsigned int>::pointer begin;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *value;
  uint64_t v38;
  std::vector<unsigned int>::pointer end;
  unsigned int *v40;
  std::vector<unsigned int>::pointer v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  std::vector<unsigned int> v60;

  v4 = *(unsigned int **)a1;
  v3 = *(unsigned int **)(a1 + 8);
  v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 2;
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = v5;
  if (v3 == v4)
    return;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    v60.__begin_ = *(std::vector<unsigned int>::pointer *)a3;
    LODWORD(v60.__end_) = 0;
    std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v60, v9);
    v4 = *(unsigned int **)a1;
    v3 = *(unsigned int **)(a1 + 8);
    v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 2;
  }
  if (v5 <= v6)
    goto LABEL_29;
  v10 = &v4[v6];
  v11 = v10 + 1;
  if (v10 != v3 && v11 != v3)
  {
    v13 = *v10;
    v14 = v10 + 1;
    do
    {
      v16 = *v14++;
      v15 = v16;
      if (v16 < v13)
      {
        v13 = v15;
        v10 = v11;
      }
      v11 = v14;
    }
    while (v14 != v3);
  }
  v17 = *v10;
  if ((_DWORD)v17 == -1)
  {
LABEL_29:
    if (!(_DWORD)v6)
      goto LABEL_32;
    v19 = 4 * v6;
    v20 = 0xFFFFFFFFLL;
    v21 = v4;
    do
    {
      v23 = *v21++;
      v22 = v23;
      if (v20 <= v23)
        v24 = v22;
      else
        v24 = v20;
      if (v20 == 0xFFFFFFFF)
        v24 = v22;
      if ((_DWORD)v22 != -1)
        v20 = v24;
      v19 -= 4;
    }
    while (v19);
    if (v20 == 0xFFFFFFFF)
      goto LABEL_32;
    v18 = *(unsigned int **)a3;
    v17 = v20 + 1;
    goto LABEL_31;
  }
  if ((_DWORD)v17)
  {
    v18 = *(unsigned int **)a3;
LABEL_31:
    v60.__begin_ = v18;
    LODWORD(v60.__end_) = 0;
    std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v60, v17);
    v4 = *(unsigned int **)a1;
    v3 = *(unsigned int **)(a1 + 8);
    v5 = ((uint64_t)v3 - *(_QWORD *)a1) >> 2;
  }
LABEL_32:
  if (v3 != v4)
  {
    v25 = 0;
    v26 = *(std::vector<unsigned int>::pointer *)a3;
    do
    {
      v27 = v4[v25];
      if ((_DWORD)v27 != -1)
      {
        if (*(_QWORD *)(a3 + 8) <= v27)
        {
          v4[v25] = -1;
        }
        else
        {
          v28 = v27 >> 6;
          v29 = 1 << v27;
          if (v25 >= v6)
            v30 = *(_QWORD *)&v26[2 * v28] | v29;
          else
            v30 = *(_QWORD *)&v26[2 * v28] & ~v29;
          *(_QWORD *)&v26[2 * v28] = v30;
        }
      }
      ++v25;
    }
    while (v5 > v25);
  }
  if ((_DWORD)v6)
  {
    v31 = &v4[v6];
    v32 = (char *)v3 - (char *)v31;
    if (v3 != v31)
      memmove(v4, v31, (char *)v3 - (char *)v31);
    *(_QWORD *)(a1 + 8) = (char *)v4 + v32;
  }
  *(_DWORD *)(a1 + 24) -= v6;
  memset(&v60, 0, sizeof(v60));
  std::vector<unsigned int>::reserve(&v60, *(_QWORD *)(a3 + 8));
  begin = v60.__begin_;
  if (*(_QWORD *)(a3 + 8))
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    value = v60.__end_cap_.__value_;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)a3 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) != 0)
      {
        v38 = (v36 + 1);
        end = v60.__end_;
        if (v60.__end_ >= value)
        {
          v42 = v60.__end_ - begin;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            goto LABEL_93;
          if (((char *)value - (char *)begin) >> 1 > v43)
            v43 = ((char *)value - (char *)begin) >> 1;
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v44 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v44);
          else
            v45 = 0;
          v50 = (unsigned int *)(v44 + 4 * v42);
          *v50 = v36;
          v40 = v50 + 1;
          while (end != begin)
          {
            v51 = *--end;
            *--v50 = v51;
          }
          value = (unsigned int *)(v44 + 4 * v45);
          if (begin)
            operator delete(begin);
          begin = v50;
        }
        else
        {
          *v60.__end_ = v36;
          v40 = end + 1;
        }
      }
      else
      {
        v41 = v60.__end_;
        if (v60.__end_ >= value)
        {
          v46 = v60.__end_ - begin;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
LABEL_93:
            abort();
          if (((char *)value - (char *)begin) >> 1 > v47)
            v47 = ((char *)value - (char *)begin) >> 1;
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v48);
          else
            v49 = 0;
          v52 = (unsigned int *)(v48 + 4 * v46);
          *v52 = -1;
          v40 = v52 + 1;
          while (v41 != begin)
          {
            v53 = *--v41;
            *--v52 = v53;
          }
          value = (unsigned int *)(v48 + 4 * v49);
          if (begin)
            operator delete(begin);
          begin = v52;
        }
        else
        {
          *v60.__end_ = -1;
          v40 = v41 + 1;
        }
        v38 = v36;
      }
      v60.__end_ = v40;
      v34 = ++v35;
      v36 = v38;
    }
    while (*(_QWORD *)(a3 + 8) > (unint64_t)v35);
  }
  v54 = *(unsigned int **)a1;
  v55 = *(_QWORD *)(a1 + 8);
  v56 = v55 - *(_QWORD *)a1;
  if (v55 != *(_QWORD *)a1)
  {
    v57 = 0;
    v58 = v56 >> 2;
    do
    {
      v59 = v54[v57];
      if ((_DWORD)v59 != -1)
        v54[v57] = begin[v59];
      ++v57;
    }
    while (v58 > v57);
  }
  if (begin)
    operator delete(begin);
}

_QWORD *WTF::Vector<WTF::RefPtr<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>,0ul>::~Vector(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  if (*a1)
  {
    v2 = (uint64_t *)a1[1];
    v3 = 8 * *a1;
    do
    {
      if (*v2)
        WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(*v2);
      ++v2;
      v3 -= 8;
    }
    while (v3);
    *a1 = 0;
  }
  v4 = (void *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  free(v4);
  return a1;
}

void std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(*a1);
    std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::align_candidate_to_input(const std::vector<unsigned int> *this@<X0>, const KB::String *a2@<X1>, const KB::String *a3@<X2>, std::vector<unsigned int> *a4@<X3>, std::vector<unsigned int> *a5@<X8>)
{
  uint64_t *v10;
  unint64_t begin_low;
  std::vector<unsigned int>::pointer end;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v19;
  char *v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  void *v25;
  std::vector<unsigned int>::pointer v26;
  unsigned int *v27;
  std::vector<unsigned int> *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38[3];
  std::vector<unsigned int> v39;

  v10 = (uint64_t *)&this[7];
  std::vector<unsigned int>::vector(&v39, this + 7);
  begin_low = LODWORD(this[8].__begin_);
  end = v39.__end_;
  v13 = v39.__end_ - v39.__begin_;
  if (begin_low <= v13)
  {
    if (begin_low >= v13)
      goto LABEL_17;
    v24 = &v39.__begin_[begin_low];
LABEL_14:
    v39.__end_ = v24;
    goto LABEL_17;
  }
  v14 = begin_low - v13;
  if (begin_low - v13 <= v39.__end_cap_.__value_ - v39.__end_)
  {
    bzero(v39.__end_, 4 * v14);
    v24 = &end[v14];
    goto LABEL_14;
  }
  v15 = (char *)v39.__end_cap_.__value_ - (char *)v39.__begin_;
  if (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 1 > begin_low)
    begin_low = v15 >> 1;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v16 = begin_low;
  v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v16);
  begin = v39.__begin_;
  v19 = v39.__end_;
  v20 = &v17[4 * v13];
  v37 = (unsigned int *)&v17[4 * v21];
  bzero(v20, 4 * v14);
  v22 = (unsigned int *)&v20[4 * v14];
  while (v19 != begin)
  {
    v23 = *--v19;
    *((_DWORD *)v20 - 1) = v23;
    v20 -= 4;
  }
  v39.__begin_ = (std::vector<unsigned int>::pointer)v20;
  v39.__end_ = v22;
  v39.__end_cap_.__value_ = v37;
  if (begin)
    operator delete(begin);
LABEL_17:
  KB::Alignment::inverse((KB::Alignment *)&v39, (std::vector<unsigned int>::size_type)this[2].__begin_ - 1, (uint64_t)v38);
  v25 = (void *)v38[0];
  if (v38[0] == v38[1] && this[2].__begin_ >= (std::vector<unsigned int>::pointer)2)
  {
    BYTE1(this[8].__end_cap_.__value_) = 1;
    a5->__end_ = 0;
    a5->__end_cap_.__value_ = 0;
    a5->__begin_ = 0;
    if (!v25)
      goto LABEL_47;
LABEL_46:
    operator delete(v25);
    goto LABEL_47;
  }
  KB::Alignment::operator*(a4, v38, a5);
  v28 = a5;
  v26 = a5->__begin_;
  v27 = v28->__end_;
  v29 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    v29 = *((unsigned __int16 *)a2 + 2);
  }
  v30 = v27 - v26;
  v31 = *((unsigned __int16 *)a3 + 2);
  if (!*((_WORD *)a3 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a3);
    v31 = *((unsigned __int16 *)a3 + 2);
  }
  if (v31 >= v29)
    v32 = v29;
  else
    v32 = v31;
  if (v30 < v32)
    v32 = v27 - v26;
  if (v27 != v26)
  {
    v33 = 0;
    do
    {
      v34 = v26[v33];
      if (v33 >= v32)
        v35 = v32;
      else
        v35 = v33;
      if (v34 < v35)
        v35 = v26[v33];
      if (v34 != -1)
        LODWORD(v32) = v35;
      ++v33;
    }
    while (v30 > v33);
  }
  if ((_DWORD)v32)
  {
    v36 = 0;
    do
    {
      v26[v36] = v36;
      ++v36;
    }
    while (v32 != v36);
  }
  if (!v31)
  {
    KB::String::compute_length((unsigned __int16 *)a3);
    v31 = *((unsigned __int16 *)a3 + 2);
  }
  TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::replace_alignment(v10, 0, v31, (uint64_t)a4);
  if (v25)
    goto LABEL_46;
LABEL_47:
  if (v39.__begin_)
  {
    v39.__end_ = v39.__begin_;
    operator delete(v39.__begin_);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::replace_alignment(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  int *v30;
  _DWORD *v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  std::__split_buffer<unsigned int> __v;

  v8 = *a1;
  if (a3)
  {
    v9 = v8 + 4 * a2;
    v10 = (_BYTE *)(v9 + 4 * a3);
    v11 = (_BYTE *)a1[1];
    v12 = v11 - v10;
    if (v11 != v10)
    {
      memmove((void *)(v8 + 4 * a2), v10, v11 - v10);
      v8 = *a1;
    }
    a1[1] = v9 + v12;
  }
  v14 = *(unsigned int **)a4;
  v13 = *(char **)(a4 + 8);
  v15 = (uint64_t)&v13[-*(_QWORD *)a4];
  if (v15 >= 1)
  {
    v16 = a2;
    v17 = (unsigned int *)(v8 + 4 * a2);
    v18 = v15 >> 2;
    v19 = a1[2];
    v20 = a1[1];
    if (v15 >> 2 > (uint64_t)(v19 - v20) >> 2)
    {
      v21 = v18 + ((uint64_t)(v20 - v8) >> 2);
      if (v21 >> 62)
        abort();
      v22 = v19 - v8;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)(a1 + 2);
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v23);
      else
        v24 = 0;
      v33 = (unsigned int *)(v23 + 4 * v16);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v23;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = (unsigned int *)(v23 + 4 * v24);
      v34 = 4 * v18;
      v35 = &v33[v18];
      do
      {
        v36 = *v14++;
        *v33++ = v36;
        v34 -= 4;
      }
      while (v34);
      __v.__end_ = v35;
      std::vector<unsigned int>::__swap_out_circular_buffer((std::vector<unsigned int> *)a1, &__v, v17);
      if (__v.__first_)
        operator delete(__v.__first_);
      goto LABEL_33;
    }
    v25 = (uint64_t)(v20 - (_QWORD)v17) >> 2;
    if (v25 >= v18)
    {
      v26 = (char *)&v14[v18];
      v28 = (_DWORD *)a1[1];
    }
    else
    {
      v26 = (char *)&v14[v25];
      v27 = v13 - v26;
      if (v13 != v26)
        memmove((void *)a1[1], &v14[v25], v13 - v26);
      v28 = (_DWORD *)(v20 + v27);
      a1[1] = v20 + v27;
      if ((uint64_t)(v20 - (_QWORD)v17) < 1)
        goto LABEL_33;
    }
    v29 = &v17[v18];
    v30 = &v28[-v18];
    v31 = v28;
    if ((unint64_t)v30 < v20)
    {
      v31 = v28;
      do
      {
        v32 = *v30++;
        *v31++ = v32;
      }
      while ((unint64_t)v30 < v20);
    }
    a1[1] = (uint64_t)v31;
    if (v28 != v29)
      memmove(&v28[-(v28 - v29)], v17, (char *)v28 - (char *)v29);
    if (v26 != (char *)v14)
      memmove(v17, v14, v26 - (char *)v14);
  }
LABEL_33:
  *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 6) - a3 + ((*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
}

void TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(uint64_t a1@<X0>, const KB::LanguageModelContext *a2@<X1>, uint64_t a3@<X2>, const KB::String **a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  const KB::String *v9;
  const KB::String *v10;
  KB::StaticDictionary **v11;
  KB::StaticDictionary **v12;
  TITokenID v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  _QWORD *v31;
  __int128 v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43[8];
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  _QWORD v51[3];
  _QWORD *v52;
  _BYTE v53[24];
  _BYTE *v54;
  void **v55[4];
  __int128 v56;
  uint64_t v57;
  int v58;
  _OWORD v59[6];
  _BYTE v60[40];
  uint64_t v61[100];
  void *v62[2];
  _OWORD v63[2];
  __int128 v64;
  _OWORD v65[2];
  uint64_t v66;
  _WORD v67[16];
  __int128 v68;
  uint64_t v69;
  int v70;
  _OWORD v71[4];
  __int128 v72;
  __int128 v73;
  _BYTE v74[40];
  _QWORD v75[8];

  v75[5] = *MEMORY[0x1E0C80C00];
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)v43, a2);
  v10 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
  {
LABEL_13:
    v14 = *(_QWORD *)(a1 + 24);
    std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)v51, a6);
    v15 = operator new(0x28uLL);
    v16 = v15;
    *v15 = &off_1EA102310;
    if (v52)
    {
      if (v52 == v51)
      {
        v15[4] = v15 + 1;
        (*(void (**)(_QWORD *))(v51[0] + 24))(v51);
      }
      else
      {
        v15[4] = v52;
        v52 = 0;
      }
    }
    else
    {
      v15[4] = 0;
    }
    v54 = v16;
    (*(void (**)(uint64_t, uint64_t, char *, _QWORD, _BYTE *))(*(_QWORD *)v14 + 88))(v14, a3, v43, a5, v53);
    v17 = v54;
    if (v54 == v53)
    {
      v18 = 4;
      v17 = v53;
    }
    else
    {
      if (!v54)
        goto LABEL_23;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_23:
    v19 = v52;
    if (v52 == v51)
    {
      v20 = 4;
      v19 = v51;
    }
    else
    {
      if (!v52)
        goto LABEL_37;
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_37;
  }
  while (1)
  {
    v11 = (KB::StaticDictionary **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
    KB::DictionaryContainer::word_with_string(v11, v10, 0, (KB::Word *)v67);
    if (!v67[0])
    {
      KB::string_to_lowercase(v10, 0, (KB::String *)v62);
      v12 = (KB::StaticDictionary **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
      KB::DictionaryContainer::word_with_string(v12, (const KB::String *)v62, 0, (KB::Word *)v55);
      KB::String::operator=((uint64_t)v67, (KB::String *)v55);
      if ((unsigned __int16)v68 >= 0xFu && *((_QWORD *)&v68 + 1))
        MEMORY[0x1DF0A212C](*((_QWORD *)&v68 + 1), 0x1000C8077774924);
      v68 = v56;
      if ((unsigned __int16)v56 >= 0xFu)
        LOWORD(v56) = 0;
      v69 = v57;
      v70 = v58;
      KB::String::operator=((uint64_t)v71, (KB::String *)v59);
      v71[2] = v59[2];
      v71[3] = v59[3];
      v72 = v59[4];
      v73 = v59[5];
      KB::String::operator=((uint64_t)v74, (KB::String *)v60);
      v74[32] = v60[32];
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__move_assign((uint64_t)v75, v61);
      KB::Word::~Word((KB::Word *)v55);
      if (v62[1] && BYTE6(v62[0]) == 1)
        free(v62[1]);
      if (!v67[0])
        break;
    }
    v13 = (TITokenID)*((_QWORD *)&v72 + 1);
    KB::LanguageModelContext::append((KB::LanguageModelContext *)v43, v13, v10, 0);
    KB::Word::~Word((KB::Word *)v67);
    v10 = (const KB::String *)((char *)v10 + 32);
    if (v10 == v9)
      goto LABEL_13;
  }
  HIDWORD(v66) = 0;
  *(_OWORD *)v62 = 0u;
  memset(v63, 0, sizeof(v63));
  v64 = 0u;
  memset(v65, 0, sizeof(v65));
  bzero(v55, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)v55);
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  *(_OWORD *)__p = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)&v40);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v40 + 8));
  v41 = 0uLL;
  v42 = 0;
  LOBYTE(v50) = 0;
  v21 = *(_QWORD *)(a6 + 24);
  if (!v21)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__func(v31);
    return;
  }
  (*(void (**)(uint64_t, void **, void ***, __int128 *, void ***))(*(_QWORD *)v21 + 48))(v21, v62, v55, &v36, &v50);
  v50 = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v50);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)((char *)&v40 + 8));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v40);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  KB::Candidate::~Candidate((KB::Candidate *)v55);
  *(_OWORD *)a7 = *(_OWORD *)v62;
  v25 = *((_QWORD *)&v63[1] + 1);
  *(_QWORD *)(a7 + 16) = *(_QWORD *)&v63[0];
  v62[0] = 0;
  v62[1] = 0;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)((char *)v63 + 8);
  *(_QWORD *)(a7 + 40) = v25;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)(a7 + 48) = v64;
  v26 = *((_QWORD *)&v65[1] + 1);
  *(_QWORD *)(a7 + 64) = *(_QWORD *)&v65[0];
  v64 = 0uLL;
  *(_OWORD *)(a7 + 72) = *(_OWORD *)((char *)v65 + 8);
  memset(v65, 0, sizeof(v65));
  v27 = v66;
  *(_QWORD *)(a7 + 88) = v26;
  *(_QWORD *)(a7 + 96) = v27;
  *(_BYTE *)(a7 + 104) = 1;
  v55[0] = (void **)v65 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v55);
  v55[0] = (void **)&v64;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v55);
  v55[0] = (void **)v63 + 1;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v55);
  v55[0] = v62;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v55);
  KB::Word::~Word((KB::Word *)v67);
LABEL_37:
  v55[0] = (void **)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v55);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v48);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v47);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v28 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

_QWORD *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1EA102310;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1EA102310;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &off_1EA102310;
  std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA102310;
  return std::__function::__value_func<void ()(std::vector<KB::LanguageModel::PredictionInfo> const&,KB::Candidate const&,KB::LanguageModelContext const&)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lm_inline_predictions_for_favonious(KB::LanguageModelContext const&,std::vector<KB::Candidate> const&,std::vector<KB::String> const&,BOOL,std::function<void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>)::$_0>,void ()(KB::CandidateCollection &,KB::Candidate const&,KB::LanguageModelContext const&,BOOL)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  _BYTE v21[28];

  v9 = *a5;
  v10 = *a2;
  v11 = a2[1];
  while (v10 != v11)
  {
    *(_OWORD *)v21 = *(_OWORD *)(v10 + 748);
    *(_OWORD *)&v21[12] = *(_OWORD *)(v10 + 760);
    if (*(_QWORD *)v10)
    {
      v12 = 240 * *(_QWORD *)v10;
      v13 = (float *)(*(_QWORD *)(v10 + 8) + 52);
      v14 = 1.0;
      do
      {
        v15 = *v13;
        v13 += 60;
        v14 = v14 * v15;
        v12 -= 240;
      }
      while (v12);
    }
    else
    {
      v14 = 1.0;
    }
    update_lookup_suggestions_omega_factors(v10, (uint64_t)v21, 0, v14);
    v10 += 1000;
  }
  v21[0] = v9;
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v16 + 48))(v16, a2, a3, a4, v21);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    update_lookup_suggestions_omega_factors(v17, v18, v19, v20);
  }
}

void update_lookup_suggestions_omega_factors(uint64_t a1, uint64_t a2, int a3, float a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *(float *)a2;
  v7 = *(float *)(a2 + 8);
  v8 = *(float *)(a2 + 12);
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 24);
  v9 = logf(a4);
  v10 = v6 + (float)(v8 * (float)(v9 + v7));
  if (a3)
  {
    if (*(_QWORD *)a1)
    {
      v11 = 240 * *(_QWORD *)a1;
      v12 = (float *)(*(_QWORD *)(a1 + 8) + 100);
      v13 = 1.0;
      do
      {
        v14 = *v12;
        v12 += 60;
        v13 = v13 * v14;
        v11 -= 240;
      }
      while (v11);
    }
    else
    {
      v13 = 1.0;
    }
    v10 = v10 + (float)(v8 * logf(v13));
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
  {
    v15 = *(unsigned __int16 *)(a1 + 888);
    if (!*(_WORD *)(a1 + 888))
    {
      KB::Candidate::compute_string((KB::Candidate *)a1);
      v15 = *(unsigned __int16 *)(a1 + 888);
    }
    v16 = *(const char **)(a1 + 896);
    v21 = "update_lookup_suggestions_omega_factors";
    if (!v16)
      v16 = (const char *)(a1 + 904);
    v22 = 2080;
    *(_DWORD *)buf = 136316162;
    if (v15)
      v17 = v16;
    else
      v17 = "";
    v23 = v17;
    v24 = 2048;
    v25 = v6;
    v26 = 2048;
    v27 = v9;
    v28 = 2048;
    v29 = v10;
    _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  LM_SPI_changes candidate = %s, omega_factors.geometry = %f, omega_factors.word = %f recalculated log_omega = %f", buf, 0x34u);
  }
  *(float *)(a1 + 744) = v10;
  *(float *)(a1 + 748) = v6;
  *(float *)(a1 + 752) = v9;
  *(float *)(a1 + 756) = v7;
  *(float *)(a1 + 760) = v8;
  *(_DWORD *)(a1 + 772) = v19;
  *(_QWORD *)(a1 + 764) = v18;
  *(_DWORD *)(a1 + 992) = 1;
}

void TI::Favonius::FavoniusStrokeBuildManager::latham_conversions(uint64_t a1@<X0>, unsigned int a2@<W1>, KB *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  const KB::Candidate *v14;
  const KB::Candidate *v15;
  KB::Candidate *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  KB::Candidate *v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  KB::Candidate *v36;
  unint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  int *v42[3];
  void *v43[3];
  int *v44[3];
  void *v45[3];
  int *v46[3];
  void *__p[3];
  int64x2_t v48;
  _OWORD v49[2];
  _OWORD v50[3];
  int v51;
  int64x2_t *v52;
  void **v53;
  int64x2_t v54;
  unint64_t v55;
  _OWORD *v56;

  *(_DWORD *)(a6 + 100) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  v7 = *(_QWORD *)(a1 + 704);
  if (!v7)
    return;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 80))(v7, a6, 0);
  v13 = *(_QWORD *)(a1 + 8);
  if (v13
    && *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13)
    && !*(_BYTE *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                 + 65))
  {
    v41 = a4;
    v51 = 0;
    v48 = 0u;
    memset(v49, 0, sizeof(v49));
    memset(v50, 0, sizeof(v50));
    v14 = *(const KB::Candidate **)a6;
    v15 = *(const KB::Candidate **)(a6 + 8);
    if (*(const KB::Candidate **)a6 != v15)
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)v14;
        if (*(_QWORD *)v14)
        {
          v18 = 240 * v17;
          v19 = *((_QWORD *)v14 + 1);
          while (!*(_BYTE *)(v19 + 192))
          {
            v19 += 240;
            v18 -= 240;
            if (!v18)
              goto LABEL_14;
          }
        }
        else
        {
          v19 = *((_QWORD *)v14 + 1);
        }
        if (v19 == *((_QWORD *)v14 + 1) + 240 * v17)
        {
LABEL_14:
          if ((unint64_t)v16 >= *(_QWORD *)&v49[0])
          {
            v20 = 0x1CAC083126E978D5 * (((uint64_t)v16 - v48.i64[0]) >> 3);
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) > 0x4189374BC6A7EFLL)
              goto LABEL_60;
            if (0x395810624DD2F1AALL * ((*(_QWORD *)&v49[0] - v48.i64[0]) >> 3) > v21)
              v21 = 0x395810624DD2F1AALL * ((*(_QWORD *)&v49[0] - v48.i64[0]) >> 3);
            if ((unint64_t)(0x1CAC083126E978D5 * ((*(_QWORD *)&v49[0] - v48.i64[0]) >> 3)) >= 0x20C49BA5E353F7)
              v22 = 0x4189374BC6A7EFLL;
            else
              v22 = v21;
            v56 = v49;
            if (v22)
              v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v22);
            else
              v23 = 0;
            v24 = (KB::Candidate *)(v22 + 1000 * v20);
            v53 = (void **)v22;
            v54.i64[0] = (uint64_t)v24;
            v55 = v22 + 1000 * v23;
            KB::Candidate::Candidate(v24, v14);
            v16 = (KB::Candidate *)((char *)v24 + 1000);
            v54.i64[1] = (uint64_t)v16;
            v25 = v48.i64[1];
            v26 = v54.i64[0];
            if (v48.i64[1] == v48.i64[0])
            {
              v27 = vdupq_n_s64(v48.u64[1]);
            }
            else
            {
              do
              {
                v25 -= 1000;
                v26 = KB::Candidate::Candidate(v26 - 1000, v25);
              }
              while (v25 != v48.i64[0]);
              v27 = v48;
              v16 = (KB::Candidate *)v54.i64[1];
            }
            v48.i64[0] = v26;
            v48.i64[1] = (uint64_t)v16;
            v54 = v27;
            v28 = *(_QWORD *)&v49[0];
            *(_QWORD *)&v49[0] = v55;
            v55 = v28;
            v53 = (void **)v27.i64[0];
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            KB::Candidate::Candidate(v16, v14);
            v16 = (KB::Candidate *)((char *)v16 + 1000);
          }
          v48.i64[1] = (uint64_t)v16;
        }
        v14 = (const KB::Candidate *)((char *)v14 + 1000);
      }
      while (v14 != v15);
    }
    KB::CandidateCollection::operator=(a6, (uint64_t)&v48);
    v53 = (void **)&v50[1] + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v53);
    v53 = (void **)v50;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v53);
    v53 = (void **)v49 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v53);
    v53 = (void **)&v48;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v53);
    a4 = v41;
  }
  v29 = a2;
  v30 = *(_QWORD *)(a1 + 904);
  (*(void (**)(void ***__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 112))(&v53, *(_QWORD *)(a1 + 24), 5);
  if (v54.i8[8])
  {
    v30 = v54.i64[0];
    v31 = (unint64_t)v53;
  }
  else
  {
    v31 = v29;
  }
  if (0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3) > v31)
    std::vector<KB::Candidate>::resize((uint64_t *)a6, v31);
  if (a1 + 800 != a6)
    std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)(a1 + 800), *(const KB::Candidate **)a6, *(const KB::Candidate **)(a6 + 8), 0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 3));
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1))
  {
    TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(a3, a1, (const KB::Candidate **)a6, a4, a1 + 776, v30, (uint64_t)&v48);
    v32 = (int *)operator new(4uLL);
    *v32 = 0;
    v46[1] = v32 + 1;
    v46[2] = v32 + 1;
    v46[0] = v32;
    KB::CandidateFilterFlags::CandidateFilterFlags(__p, v46);
    LOBYTE(v52) = 0;
    v33 = *(_QWORD *)(a5 + 24);
    if (v33)
    {
      (*(void (**)(uint64_t, int64x2_t *, void **, int64x2_t **))(*(_QWORD *)v33 + 48))(v33, &v48, __p, &v52);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      operator delete(v32);
      TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions((uint64_t (***)())a1, (KB::CandidateCollection *)&v48, 1);
      if (&v48 != (int64x2_t *)a6)
        std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)a6, (const KB::Candidate *)v48.i64[0], (const KB::Candidate *)v48.i64[1], 0x1CAC083126E978D5 * ((v48.i64[1] - v48.i64[0]) >> 3));
      v52 = (int64x2_t *)((char *)&v50[1] + 8);
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
      v52 = (int64x2_t *)v50;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
      v52 = (int64x2_t *)((char *)v49 + 8);
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
      v52 = &v48;
      std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v52);
      goto LABEL_51;
    }
LABEL_59:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_60:
    abort();
  }
  v34 = (int *)operator new(4uLL);
  *v34 = 0;
  v44[1] = v34 + 1;
  v44[2] = v34 + 1;
  v44[0] = v34;
  KB::CandidateFilterFlags::CandidateFilterFlags(v45, v44);
  v48.i8[0] = 0;
  v35 = *(_QWORD *)(a5 + 24);
  if (!v35)
    goto LABEL_59;
  (*(void (**)(uint64_t, uint64_t, void **, int64x2_t *))(*(_QWORD *)v35 + 48))(v35, a6, v45, &v48);
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  operator delete(v34);
  TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions((uint64_t (***)())a1, (KB::CandidateCollection *)a6, 1);
LABEL_51:
  v36 = *(KB::Candidate **)(a6 + 8);
  v37 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v36 - *(_QWORD *)a6) >> 3));
  if (v36 == *(KB::Candidate **)a6)
    v38 = 0;
  else
    v38 = v37;
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(*(uint64_t **)a6, v36, v38, 1);
  KB::CandidateCollection::normalize_scores((float32x2_t **)a6);
  v39 = (int *)operator new(4uLL);
  *v39 = 1;
  v42[1] = v39 + 1;
  v42[2] = v39 + 1;
  v42[0] = v39;
  KB::CandidateFilterFlags::CandidateFilterFlags(v43, v42);
  v48.i8[0] = 1;
  v40 = *(_QWORD *)(a5 + 24);
  if (!v40)
    goto LABEL_59;
  (*(void (**)(uint64_t, uint64_t, void **, int64x2_t *))(*(_QWORD *)v40 + 48))(v40, a6, v43, &v48);
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  operator delete(v39);
}

void TI::Favonius::FavoniusStrokeBuildManager::update_autocorrection_candidates_with_ensemble(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  if (!TI::Favonius::FavoniusStrokeBuildManager::shouldSkipEnsembleForFavoniusCandidates(this, a2, a3, a4))
  {
    TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_ml_tap_typing(this, a2, a3, a4);
    TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(this, a2, a3, a4);
  }
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::shouldSkipEnsembleForFavoniusCandidates(TI::Favonius::FavoniusStrokeBuildManager *this, const KB::CandidateCollection *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
    return 0;
  if (!*(_WORD *)(v4 + 888))
    KB::Candidate::compute_string(*(KB::Candidate **)a2);
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
  do
    v8 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v8 + 1, (unsigned int *)v7));
  v9 = KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(_QWORD *)(v7 + 8) + 72), (_LXLexicon *)(v4 + 888), a3, a4);
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v7);
  if (!v9)
    return 1;
  v10 = *(_QWORD *)(v4 + 8);
  v11 = v10 + 240 * *(_QWORD *)v4;
  if (*(_QWORD *)v4)
  {
    v12 = 240 * *(_QWORD *)v4;
    while ((*(_BYTE *)(v10 + 106) & 1) == 0)
    {
      v10 += 240;
      v12 -= 240;
      if (!v12)
      {
        v10 = v11;
        return v10 != v11;
      }
    }
  }
  return v10 != v11;
}

void TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_ml_tap_typing(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  float *v8;
  float *v9;
  unint64_t v10;
  KB::Candidate *v11;
  KB::Candidate *v12;
  unint64_t v13;
  float *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  KB::Candidate *v24;
  uint64_t *v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  const KB::Candidate *v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  char *v35;
  void **v36;
  char *v37;

  if (TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(this))
  {
    TI::Favonius::FavoniusStrokeBuildManager::ml_tap_typing_autocorrection_candidates(this, a3, a4, 1u, (uint64_t)v29);
    v8 = (float *)v29[0];
    if (v29[0] != v29[1])
    {
      v9 = *(float **)a2;
      if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
      {
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v9 >= v13)
        {
          v37 = (char *)a2 + 16;
          v15 = 0x1CAC083126E978D5 * ((uint64_t)(v13 - (_QWORD)v9) >> 3);
          v16 = 0x395810624DD2F1AALL * ((uint64_t)(v13 - (_QWORD)v9) >> 3);
          if (v16 <= 1)
            v16 = 1;
          if (v15 >= 0x20C49BA5E353F7)
            v17 = 0x4189374BC6A7EFLL;
          else
            v17 = v16;
          v33 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v17);
          v34 = v33;
          v36 = &v33[125 * v18];
          v35 = (char *)KB::Candidate::Candidate((KB::Candidate *)v33, (const KB::Candidate *)v8) + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, &v33);
          v14 = (float *)*((_QWORD *)a2 + 1);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v33);
        }
        else
        {
          KB::Candidate::Candidate(*(KB::Candidate **)a2, v29[0]);
          v14 = v9 + 250;
        }
        *((_QWORD *)a2 + 1) = v14;
      }
      else
      {
        if (!*((_WORD *)v9 + 444))
          KB::Candidate::compute_string(*(KB::Candidate **)a2);
        if (!*((_WORD *)v8 + 444))
          KB::Candidate::compute_string((KB::Candidate *)v8);
        if (v9 != v8
          && !KB::String::equal((KB::String *)(v9 + 222), (const KB::String *)(v8 + 222), 1)
          && v9[188] < v8[188])
        {
          v10 = *((_QWORD *)a2 + 2);
          v11 = (KB::Candidate *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v11 >= v10)
          {
            v19 = 0x1CAC083126E978D5 * (((uint64_t)v11 - *(_QWORD *)a2) >> 3);
            if ((unint64_t)(v19 + 1) > 0x4189374BC6A7EFLL)
              abort();
            v20 = 0x1CAC083126E978D5 * ((uint64_t)(v10 - *(_QWORD *)a2) >> 3);
            v21 = 2 * v20;
            if (2 * v20 <= v19 + 1)
              v21 = v19 + 1;
            if (v20 >= 0x20C49BA5E353F7)
              v22 = 0x4189374BC6A7EFLL;
            else
              v22 = v21;
            v37 = (char *)a2 + 16;
            if (v22)
              v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v22);
            else
              v23 = 0;
            v24 = (KB::Candidate *)(v22 + 1000 * v19);
            v33 = (void **)v22;
            v34 = (void **)v24;
            v36 = (void **)(v22 + 1000 * v23);
            KB::Candidate::Candidate(v24, (const KB::Candidate *)v8);
            v35 = (char *)v24 + 1000;
            std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a2, &v33);
            v12 = (KB::Candidate *)*((_QWORD *)a2 + 1);
            std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v33);
          }
          else
          {
            v12 = (KB::Candidate *)((char *)KB::Candidate::Candidate(v11, (const KB::Candidate *)v8) + 1000);
          }
          v25 = *(uint64_t **)a2;
          v26 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v12 - *(_QWORD *)a2) >> 3));
          v27 = v12 == *(KB::Candidate **)a2;
          *((_QWORD *)a2 + 1) = v12;
          if (v27)
            v28 = 0;
          else
            v28 = v26;
          std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v25, v12, v28, 1);
        }
      }
    }
    v33 = (void **)&v32;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    v33 = (void **)&v31;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    v33 = (void **)&v30;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
    v33 = (void **)v29;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v33);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(TI::Favonius::FavoniusStrokeBuildManager *this, KB::CandidateCollection *a2, const KB::String *a3, const KB::LanguageModelContext *a4)
{
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  KB::Candidate *v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  KB::CandidateCollection *v26;
  uint64_t v27;
  float v28;
  int64x2_t v29;
  _OWORD v30[2];
  _OWORD v31[3];
  int v32;
  void *__p;
  _DWORD *v34;
  void **v35;
  int64x2_t v36;
  unint64_t v37;
  _OWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _OWORD v41[3];
  _OWORD v42[3];
  int v43;
  _BYTE v44[784];
  _QWORD v45[30];

  v45[27] = *MEMORY[0x1E0C80C00];
  if (((TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(this) & 1) != 0
     || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3))
     && *((_BYTE *)this + 212))
    && *(_QWORD *)a2 != *((_QWORD *)a2 + 1)
    && *(_WORD *)a3 != 0)
  {
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 128))(&__p);
    v9 = __p;
    if (__p == v34)
    {
LABEL_38:
      if (v9)
      {
        v34 = v9;
        operator delete(v9);
      }
      return;
    }
    v26 = a2;
    v27 = *(_QWORD *)a2;
    KB::Candidate::Candidate((KB::Candidate *)v44, a3, 0);
    KB::LanguageModelContext::operator=((uint64_t)v45, (uint64_t *)a4);
    v32 = 0;
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    memset(v31, 0, sizeof(v31));
    v10 = __p;
    v11 = v34;
    if (__p != v34)
    {
      do
      {
        KB::Candidate::Candidate((KB::Candidate *)v41, (const KB::Candidate *)v44);
        if (*(_QWORD *)&v41[0])
        {
          v12 = 240 * *(_QWORD *)&v41[0];
          v13 = (_DWORD *)(*((_QWORD *)&v41[0] + 1) + 136);
          do
          {
            *v13 = *v10;
            v13 += 60;
            v12 -= 240;
          }
          while (v12);
        }
        if (v29.i64[1] >= *(_QWORD *)&v30[0])
        {
          v15 = 0x1CAC083126E978D5 * ((v29.i64[1] - v29.i64[0]) >> 3) + 1;
          if (v15 > 0x4189374BC6A7EFLL)
            abort();
          if (0x395810624DD2F1AALL * ((*(_QWORD *)&v30[0] - v29.i64[0]) >> 3) > v15)
            v15 = 0x395810624DD2F1AALL * ((*(_QWORD *)&v30[0] - v29.i64[0]) >> 3);
          if ((unint64_t)(0x1CAC083126E978D5 * ((*(_QWORD *)&v30[0] - v29.i64[0]) >> 3)) >= 0x20C49BA5E353F7)
            v16 = 0x4189374BC6A7EFLL;
          else
            v16 = v15;
          v38 = v30;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v16);
          else
            v17 = 0;
          v18 = (KB::Candidate *)(v16 + 8 * ((v29.i64[1] - v29.i64[0]) >> 3));
          v35 = (void **)v16;
          v36.i64[0] = (uint64_t)v18;
          v37 = v16 + 1000 * v17;
          KB::Candidate::Candidate(v18, (const KB::Candidate *)v41);
          v14 = (char *)v18 + 1000;
          v36.i64[1] = (uint64_t)v18 + 1000;
          v19 = v29.i64[1];
          v20 = v36.i64[0];
          if (v29.i64[1] == v29.i64[0])
          {
            v21 = vdupq_n_s64(v29.u64[1]);
          }
          else
          {
            do
            {
              v19 -= 1000;
              v20 = KB::Candidate::Candidate(v20 - 1000, v19);
            }
            while (v19 != v29.i64[0]);
            v21 = v29;
            v14 = (char *)v36.i64[1];
          }
          v29.i64[0] = v20;
          v29.i64[1] = (uint64_t)v14;
          v36 = v21;
          v22 = *(_QWORD *)&v30[0];
          *(_QWORD *)&v30[0] = v37;
          v37 = v22;
          v35 = (void **)v21.i64[0];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v35);
        }
        else
        {
          v14 = (char *)KB::Candidate::Candidate((KB::Candidate *)v29.i64[1], (const KB::Candidate *)v41) + 1000;
        }
        v29.i64[1] = (uint64_t)v14;
        KB::Candidate::~Candidate((KB::Candidate *)v41);
        ++v10;
      }
      while (v10 != v11);
    }
    v28 = 0.0;
    v23 = *((_QWORD *)this + 3);
    v39[0] = &off_1EA102238;
    v39[1] = &v28;
    v40 = v39;
    (*(void (**)(uint64_t, int64x2_t *, _QWORD *))(*(_QWORD *)v23 + 56))(v23, &v29, v39);
    v24 = v40;
    if (v40 == v39)
    {
      v25 = 4;
      v24 = v39;
    }
    else
    {
      if (!v40)
      {
LABEL_35:
        if (logf(v28) >= *(float *)(v27 + 752))
        {
          v43 = 0;
          memset(v41, 0, sizeof(v41));
          memset(v42, 0, sizeof(v42));
          KB::CandidateCollection::operator=((uint64_t)v26, (uint64_t)v41);
          v35 = (void **)&v42[1] + 1;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
          v35 = (void **)v42;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
          v35 = (void **)&v41[1] + 1;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
          v35 = (void **)v41;
          std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        }
        *(_QWORD *)&v41[0] = (char *)&v31[1] + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
        *(_QWORD *)&v41[0] = v31;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
        *(_QWORD *)&v41[0] = (char *)v30 + 8;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
        *(_QWORD *)&v41[0] = &v29;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)v41);
        KB::Candidate::~Candidate((KB::Candidate *)v44);
        v9 = __p;
        goto LABEL_38;
      }
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
    goto LABEL_35;
  }
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::is_ml_tap_typing_enabled(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3)) & 1) == 0)
    {
      v3 = *((_QWORD *)this + 90);
      if (v3)
      {
        v4 = *(const void **)(v3 + 64);
        if (v4)
        {
          CFRetain(*(CFTypeRef *)(v3 + 64));
          CFRelease(v4);
          v5 = *((_QWORD *)this + 9);
          if (!v5)
            return 1;
          v6 = (_QWORD *)*((_QWORD *)this + 10);
          v7 = 8 * v5;
          while (1)
          {
            v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
            if (v8)
            {
              if ((*(_WORD *)(*(_QWORD *)(v8 + 8) + 60) & 0x80) != 0)
                break;
            }
            ++v6;
            v7 -= 8;
            if (!v7)
              return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_QWORD *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA102238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA102238;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::update_candidates_with_exact_typed_string(KB::CandidateCollection &,KB::String const&,KB::LanguageModelContext const&)::$_0>,void ()(KB::Candidate &,float)>::operator()(uint64_t result, uint64_t a2, float *a3)
{
  float *v3;

  v3 = *(float **)(result + 8);
  if (*v3 < *a3)
    *v3 = *a3;
  return result;
}

void TI::Favonius::FavoniusStrokeBuildManager::ml_tap_typing_autocorrection_candidates(TI::Favonius::FavoniusStrokeBuildManager *this@<X0>, const KB::String *a2@<X2>, const KB::LanguageModelContext *a3@<X3>, unsigned int a4@<W1>, uint64_t a5@<X8>)
{
  uint64_t v10;
  const KB::Candidate **v11;
  const KB::Candidate **v12;
  KB::String *v13;
  const KB::Candidate *v14;
  KB *v15;
  BOOL v16;
  const KB::Candidate *v17;
  KB::Candidate *v18;
  char *v19;
  char *i;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *__p;
  const KB::Candidate **v29;
  const KB::Candidate *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void *v36[5];

  v36[3] = *(void **)MEMORY[0x1E0C80C00];
  TI::TIInputRecognizer::generate_mltt_autocorrection_candidates(*((_QWORD *)this + 90), (unsigned __int16 *)a2, (uint64_t)this + 920, &__p);
  v11 = (const KB::Candidate **)__p;
  v10 = (uint64_t)v29;
  if (__p == v29)
  {
    *(_DWORD *)(a5 + 100) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
  }
  else
  {
    v12 = (const KB::Candidate **)__p;
    while (v12[4] != v12[5])
    {
      v12 += 17;
      if (v12 == v29)
        goto LABEL_18;
    }
    if (v12 != v29)
    {
      v13 = (KB::String *)(v12 + 17);
      if (v12 + 17 != v29)
      {
        do
        {
          if (*((_QWORD *)v13 + 4) != *((_QWORD *)v13 + 5))
          {
            KB::String::operator=((uint64_t)v12, v13);
            KB::CandidateCollection::operator=((uint64_t)(v12 + 4), (uint64_t)v13 + 32);
            v12 += 17;
          }
          v13 = (KB::String *)((char *)v13 + 136);
        }
        while (v13 != (KB::String *)v10);
        v11 = (const KB::Candidate **)__p;
        v10 = (uint64_t)v29;
      }
    }
    if (v12 == (const KB::Candidate **)v10)
    {
LABEL_18:
      v12 = (const KB::Candidate **)v10;
      goto LABEL_19;
    }
    while ((const KB::Candidate **)v10 != v12)
    {
      v10 -= 136;
      std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(v10);
    }
    v29 = v12;
    v11 = (const KB::Candidate **)__p;
LABEL_19:
    *(_DWORD *)(a5 + 100) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    if (v11 != v12)
    {
      do
      {
        v36[0] = 0;
        v36[1] = 0;
        v35 = v36;
        TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions((KB *)v11, (uint64_t)this, v11 + 4, (uint64_t *)a3, (uint64_t)&v35, *((_QWORD *)this + 113), (uint64_t)&v30);
        std::__tree<std::__value_type<KB::String,KB::CandidateCollection>,std::__map_value_compare<KB::String,std::__value_type<KB::String,KB::CandidateCollection>,std::less<KB::String>,true>,std::allocator<std::__value_type<KB::String,KB::CandidateCollection>>>::destroy((_QWORD *)v36[0]);
        KB::CandidateCollection::add((KB::CandidateCollection *)a5, &v30);
        v35 = (void **)&v34;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        v35 = (void **)&v33;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        v35 = (void **)&v32;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        v35 = (void **)&v30;
        std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v35);
        v11 += 17;
      }
      while (v11 != v12);
      v14 = *(const KB::Candidate **)(a5 + 8);
      if (*(const KB::Candidate **)a5 != v14)
      {
        v15 = (KB *)(*(_QWORD *)a5 + 888);
        while (1)
        {
          if (!*(_WORD *)v15)
            KB::Candidate::compute_string((KB *)((char *)v15 - 888));
          KB::lower_string(v15, 0, (KB::String *)&v30);
          KB::lower_string(a2, 0, (KB::String *)&v35);
          v16 = KB::String::equal((KB::String *)&v30, (const KB::String *)&v35, 1);
          if (v36[0] && BYTE6(v35) == 1)
            free(v36[0]);
          if (v31 && BYTE6(v30) == 1)
            free(v31);
          if (v16)
            break;
          v17 = (KB *)((char *)v15 + 112);
          v15 = (KB *)((char *)v15 + 1000);
          if (v17 == v14)
            goto LABEL_35;
        }
        v14 = (KB *)((char *)v15 - 888);
LABEL_35:
        if (v14 != *(const KB::Candidate **)(a5 + 8))
        {
          KB::Candidate::Candidate((KB::Candidate *)&v30, v14);
          v18 = *(KB::Candidate **)a5;
          if (*(_QWORD *)(a5 + 16) == *(_QWORD *)a5)
          {
            std::vector<KB::Candidate>::__vdeallocate((void **)a5);
            v21 = 0x395810624DD2F1AALL * ((uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)a5) >> 3);
            if (v21 <= 1)
              v21 = 1;
            if ((unint64_t)(0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)a5) >> 3)) >= 0x20C49BA5E353F7)
              v22 = 0x4189374BC6A7EFLL;
            else
              v22 = v21;
            std::vector<KB::Candidate>::__vallocate[abi:nn180100]((_QWORD *)a5, v22);
            v19 = (char *)KB::Candidate::Candidate(*(KB::Candidate **)(a5 + 8), (const KB::Candidate *)&v30) + 1000;
          }
          else
          {
            v19 = (char *)v18 + 1000;
            if (*(KB::Candidate **)(a5 + 8) == v18)
            {
              KB::Candidate::Candidate(v18, (const KB::Candidate *)&v30);
            }
            else
            {
              KB::Candidate::operator=((uint64_t)v18, (uint64_t)&v30);
              for (i = *(char **)(a5 + 8); i != v19; KB::Candidate::~Candidate((KB::Candidate *)(i - 1000)))
                ;
            }
          }
          *(_QWORD *)(a5 + 8) = v19;
          KB::Candidate::~Candidate((KB::Candidate *)&v30);
        }
      }
    }
  }
  TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions((uint64_t (***)())this, (KB::CandidateCollection *)a5, 0);
  KB::CandidateCollection::normalize_scores((float32x2_t **)a5);
  v23 = *(uint64_t **)(a5 + 8);
  v24 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v23 - *(_QWORD *)a5) >> 3));
  if (v23 == *(uint64_t **)a5)
    v25 = 0;
  else
    v25 = v24;
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort_by_word_score(void)::$_0 &,KB::Candidate *,false>(*(_QWORD *)a5, v23, v25, 1);
  if (0x1CAC083126E978D5 * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3) > (unint64_t)a4)
    std::vector<KB::Candidate>::resize((uint64_t *)a5, a4);
  v26 = __p;
  if (__p)
  {
    v27 = (uint64_t)v29;
    if (v29 != __p)
    {
      do
      {
        v27 -= 136;
        std::__destroy_at[abi:nn180100]<TI::MLTTAutocorrectionCandidateInfo,0>(v27);
      }
      while ((void *)v27 != v26);
      v26 = __p;
    }
    operator delete(v26);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB *this@<X2>, uint64_t a2@<X0>, const KB::Candidate **a3@<X1>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  unsigned int v10;
  int *v16;
  int *v17;
  char *v18;
  int v19;
  uint64_t v20;
  KB::String *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  KB::String *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  int v38;
  uint64_t *v39;
  const char *v40;
  const KB::Candidate **v41;
  const KB::String *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  const KB::Candidate *v51;
  const KB::Candidate *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64x2_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  KB::Candidate *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v87;
  unint64_t v90;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  void *__p;
  int *v102;
  unint64_t v103;
  int64x2_t v104;
  unint64_t v105;
  _OWORD *v106;
  int64x2_t v107;
  _OWORD v108[2];
  _OWORD v109[3];
  int v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  uint64_t v117;
  const void *v118[2];
  uint64_t v119;
  int v120;
  _BYTE v121[32];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  _BYTE v126[32];
  char v127;
  _QWORD *v128;
  int v129;
  __int128 v130;
  unint64_t v131;
  _BYTE v132[8];
  void *v133;
  int v134;
  __int16 v135;
  char v136;
  uint64_t v137;
  char v138;
  unsigned __int16 v139[8];
  uint64_t v140;
  int v141;
  int v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  int v151;
  __int16 v152;
  char v153;
  uint64_t v154;
  char v155;
  char v156;
  _QWORD v157[4];
  int v158;
  int v159;
  __int16 v160;
  char v161;
  uint64_t v162;
  char v163;
  unsigned __int16 v164[8];
  uint64_t v165;
  int v166;
  int v167;
  __int16 v168;
  char v169;
  uint64_t v170;
  char v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  int v176;
  __int16 v177;
  char v178;
  uint64_t v179;
  char v180;
  char v181;
  _QWORD v182[4];
  int v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a7 + 100) = 0;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v87 = (unsigned int *)v9;
  v84 = *(_QWORD *)(v9 + 8);
  KB::word_ranges(this, (const KB::String *)1, (unint64_t **)&__p);
  v159 = 0x100000;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164[0] = 0;
  v165 = 0x3F80000000000000;
  v166 = 1065353216;
  v167 = 0x100000;
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  __asm { FMOV            V9.2S, #1.0 }
  *(_QWORD *)&v172 = _D9;
  *((_QWORD *)&v175 + 1) = 0;
  v173 = 0u;
  v174 = 0u;
  DWORD2(v172) = 0;
  LODWORD(v175) = 0;
  v176 = 0x100000;
  v177 = 0;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  memset(v182, 0, sizeof(v182));
  v183 = 1065353216;
  v16 = (int *)__p;
  v17 = v102;
  if (__p == v102)
  {
    v19 = *(unsigned __int16 *)this;
    if (*((_QWORD *)this + 1))
      v18 = (char *)*((_QWORD *)this + 1);
    else
      v18 = (char *)this + 16;
    *(_QWORD *)&v99 = v18;
    DWORD2(v99) = v19;
    HIDWORD(v99) = v19;
    LODWORD(v100) = 0;
    KB::String::iterator::initialize((uint64_t *)&v99);
  }
  else
  {
    if (*((_QWORD *)this + 1))
      v18 = (char *)*((_QWORD *)this + 1);
    else
      v18 = (char *)this + 16;
    *(_QWORD *)&v116 = v18;
    v19 = *(unsigned __int16 *)this;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v19;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    v20 = *(v17 - 2);
    v99 = v116;
    v100 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v99, v20);
  }
  *(_QWORD *)&v116 = v18;
  DWORD2(v116) = 0;
  HIDWORD(v116) = v19;
  LODWORD(v117) = 0;
  KB::String::iterator::initialize((uint64_t *)&v116);
  if (DWORD2(v116) != DWORD2(v99))
  {
    *(_QWORD *)&v116 = v18;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v19;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    KB::String::String((KB::String *)&v111, (const KB::String::iterator *)&v116, (const KB::String::iterator *)&v99);
    v21 = KB::Word::Word((KB::Word *)&v116, (const KB::String *)&v111, &kTITokenIDUNK, 0);
    KB::String::space(v21);
    if (KB::String::equal((KB::String *)&v111, (const KB::String *)&KB::String::space(void)::space, 1))
      DWORD1(v124) |= 0x4000000u;
    DWORD2(v122) |= 0x800000u;
    KB::String::operator=((KB::String *)&v159, (KB::String *)&v116);
    KB::ByteString::operator=(v164, v118);
    v165 = v119;
    v166 = v120;
    KB::String::operator=((KB::String *)&v167, (KB::String *)v121);
    v172 = v122;
    v173 = v123;
    v174 = v124;
    v175 = v125;
    KB::String::operator=((KB::String *)&v176, (KB::String *)v126);
    v181 = v127;
    v183 = v129;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v182, v128);
    KB::Word::~Word((KB::Word *)&v116);
    if (*((_QWORD *)&v111 + 1) && BYTE6(v111) == 1)
      free(*((void **)&v111 + 1));
  }
  v134 = 0x100000;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v139[0] = 0;
  v140 = 0x3F80000000000000;
  v141 = 1065353216;
  v142 = 0x100000;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  *(_QWORD *)&v147 = _D9;
  *((_QWORD *)&v150 + 1) = 0;
  v148 = 0u;
  v149 = 0u;
  DWORD2(v147) = 0;
  LODWORD(v150) = 0;
  v151 = 0x100000;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  memset(v157, 0, sizeof(v157));
  v158 = 1065353216;
  if (v16 == v17)
  {
    v97 = v99;
    v98 = v100;
    v24 = *(unsigned __int16 *)this;
    v22 = (char *)*((_QWORD *)this + 1);
  }
  else
  {
    v22 = (char *)*((_QWORD *)this + 1);
    if (v22)
      v23 = (char *)*((_QWORD *)this + 1);
    else
      v23 = (char *)this + 16;
    *(_QWORD *)&v111 = v23;
    v24 = *(unsigned __int16 *)this;
    DWORD2(v111) = 0;
    HIDWORD(v111) = v24;
    LODWORD(v112) = 0;
    KB::String::iterator::initialize((uint64_t *)&v111);
    v25 = *(v17 - 2);
    v116 = v111;
    v117 = v112;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v116, v25);
    v26 = *(v17 - 1);
    v97 = v116;
    v98 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v97, v26);
  }
  if (!v22)
    v22 = (char *)this + 16;
  *(_QWORD *)&v116 = v22;
  DWORD2(v116) = v24;
  HIDWORD(v116) = v24;
  LODWORD(v117) = 0;
  KB::String::iterator::initialize((uint64_t *)&v116);
  if (DWORD2(v97) != DWORD2(v116))
  {
    *(_QWORD *)&v116 = v22;
    DWORD2(v116) = v24;
    HIDWORD(v116) = v24;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    KB::String::String((KB::String *)&v111, (const KB::String::iterator *)&v97, (const KB::String::iterator *)&v116);
    v27 = KB::Word::Word((KB::Word *)&v116, (const KB::String *)&v111, &kTITokenIDUNK, 0);
    KB::String::space(v27);
    if (KB::String::equal((KB::String *)&v111, (const KB::String *)&KB::String::space(void)::space, 1))
      DWORD1(v124) |= 0x4000000u;
    else
      DWORD2(v122) |= 0x800000u;
    KB::String::operator=((KB::String *)&v134, (KB::String *)&v116);
    KB::ByteString::operator=(v139, v118);
    v140 = v119;
    v141 = v120;
    KB::String::operator=((KB::String *)&v142, (KB::String *)v121);
    v147 = v122;
    v148 = v123;
    v149 = v124;
    v150 = v125;
    KB::String::operator=((KB::String *)&v151, (KB::String *)v126);
    v156 = v127;
    v158 = v129;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long long,void *> *>>(v157, v128);
    KB::Word::~Word((KB::Word *)&v116);
    if (*((_QWORD *)&v111 + 1))
    {
      if (BYTE6(v111) == 1)
        free(*((void **)&v111 + 1));
    }
  }
  v96 = a4;
  if (v16 != v17)
  {
    v28 = (char *)*((_QWORD *)this + 1);
    if (!v28)
      v28 = (char *)this + 16;
    *(_QWORD *)&v116 = v28;
    v29 = *(unsigned __int16 *)this;
    DWORD2(v116) = 0;
    HIDWORD(v116) = v29;
    LODWORD(v117) = 0;
    KB::String::iterator::initialize((uint64_t *)&v116);
    v30 = *(v17 - 2);
    v94 = v116;
    v95 = v117;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v94, v30);
    v31 = *(v17 - 1);
    v92 = v94;
    v93 = v95;
    std::__advance[abi:nn180100]<KB::String::iterator>((KB::String::iterator *)&v92, v31);
    KB::String::String((KB::String *)v132, (const KB::String::iterator *)&v94, (const KB::String::iterator *)&v92);
    v110 = 0;
    v107 = 0u;
    memset(v108, 0, sizeof(v108));
    memset(v109, 0, sizeof(v109));
    KB::lower_string((KB *)v132, 0, (KB::String *)&v116);
    v33 = a5 + 8;
    v32 = *(_QWORD *)(a5 + 8);
    v34 = (void *)*((_QWORD *)&v116 + 1);
    if (!v32)
      goto LABEL_52;
    v35 = *((_QWORD *)&v116 + 1) ? (const char *)*((_QWORD *)&v116 + 1) : (const char *)&v117;
    v36 = a5 + 8;
    do
    {
      if (*(_QWORD *)(v32 + 40))
        v37 = *(const char **)(v32 + 40);
      else
        v37 = (const char *)(v32 + 48);
      v38 = strcmp(v37, v35);
      v39 = (uint64_t *)(v32 + 8);
      if (v38 >= 0)
      {
        v39 = (uint64_t *)v32;
        v36 = v32;
      }
      v32 = *v39;
    }
    while (*v39);
    if (v33 == v36
      || (*(_QWORD *)(v36 + 40) ? (v40 = *(const char **)(v36 + 40)) : (v40 = (const char *)(v36 + 48)),
          strcmp(v35, v40) < 0))
    {
LABEL_52:
      v36 = a5 + 8;
    }
    if (v34 && BYTE6(v116) == 1)
      free(v34);
    v41 = a3;
    if (v33 == v36
      || (KB::CandidateCollection::operator=((uint64_t)&v107, v36 + 64),
          v43 = v107.i64[1],
          v44 = v107.i64[0],
          v107.i64[0] == v107.i64[1]))
    {
      KB::Word::Word((KB::Word *)&v111, (const KB::String *)v132, &kTITokenIDUNK, 0);
      v115 |= 0x800000u;
      KB::Candidate::Candidate((KB::Candidate *)&v116, (const KB::Word *)&v111);
      v130 = 0u;
      v131 = 0xFF8000003F800000;
      if (v107.i64[1] >= *(_QWORD *)&v108[0])
      {
        v47 = 0x1CAC083126E978D5 * ((v107.i64[1] - v107.i64[0]) >> 3);
        if ((unint64_t)(v47 + 1) > 0x4189374BC6A7EFLL)
LABEL_133:
          abort();
        v48 = 0x395810624DD2F1AALL * ((*(_QWORD *)&v108[0] - v107.i64[0]) >> 3);
        if (v48 <= v47 + 1)
          v48 = v47 + 1;
        if ((unint64_t)(0x1CAC083126E978D5 * ((*(_QWORD *)&v108[0] - v107.i64[0]) >> 3)) >= 0x20C49BA5E353F7)
          v49 = 0x4189374BC6A7EFLL;
        else
          v49 = v48;
        v106 = v108;
        if (v49)
          v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v49);
        else
          v50 = 0;
        v62 = v49 + 1000 * v47;
        v103 = v49;
        v104.i64[0] = v62;
        v105 = v49 + 1000 * v50;
        KB::Candidate::Candidate(v62, (uint64_t)&v116);
        v45 = v62 + 1000;
        v104.i64[1] = v62 + 1000;
        v64 = v107.i64[1];
        v63 = v107.i64[0];
        v65 = v104.i64[0];
        if (v107.i64[1] == v107.i64[0])
        {
          v66 = vdupq_n_s64(v107.u64[1]);
        }
        else
        {
          do
          {
            v64 -= 1000;
            v65 = KB::Candidate::Candidate(v65 - 1000, v64);
          }
          while (v64 != v63);
          v66 = v107;
          v45 = v104.i64[1];
        }
        v107.i64[0] = v65;
        v107.i64[1] = v45;
        v104 = v66;
        v67 = *(_QWORD *)&v108[0];
        *(_QWORD *)&v108[0] = v105;
        v105 = v67;
        v103 = v66.i64[0];
        std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v103);
      }
      else
      {
        v45 = KB::Candidate::Candidate(v107.i64[1], (uint64_t)&v116) + 1000;
      }
      v107.i64[1] = v45;
      KB::Candidate::~Candidate((KB::Candidate *)&v116);
      KB::Word::~Word((KB::Word *)&v111);
      v43 = v107.i64[1];
      v44 = v107.i64[0];
    }
    v68 = 0x1CAC083126E978D5 * ((v43 - v44) >> 3);
    if (v68 >= a6)
      v68 = a6;
    v90 = v68;
    if (v43 != v44)
    {
      v69 = 0;
      do
      {
        v70 = (KB::Candidate *)(v44 + 1000 * v69);
        if (v69 < v90)
          goto LABEL_108;
        v71 = v44 + 1000 * v69;
        if (!*(_WORD *)(v71 + 888))
          KB::Candidate::compute_string((KB::Candidate *)(v44 + 1000 * v69));
        if (!KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(v84 + 72), (_LXLexicon *)(v71 + 888), (const KB::String *)v132, v42))
        {
LABEL_108:
          if ((unint64_t)(0x1CAC083126E978D5 * ((v41[1] - *v41) >> 3)) >= *(_QWORD *)(a2 + 912))
            v72 = *(_QWORD *)(a2 + 912);
          else
            v72 = 0x1CAC083126E978D5 * ((v41[1] - *v41) >> 3);
          v73 = v44 + 1000 * v69;
          if (!*(_WORD *)(v73 + 888))
            KB::Candidate::compute_string(v70);
          if (KB::String::equal((KB::String *)v132, (const KB::String *)(v73 + 888), 0))
            v72 = 0x1CAC083126E978D5 * ((v41[1] - *v41) >> 3);
          if (v72)
          {
            v74 = 0;
            do
            {
              TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()((uint64_t)&v116, &v96, (const KB::Word *)&v159, (uint64_t)v70, (const KB::Word *)&v134, (float32x2_t *)((char *)*v41 + v74));
              v75 = *(_QWORD *)(a7 + 8);
              v76 = *(_QWORD *)(a7 + 16);
              if (v75 >= v76)
              {
                v78 = 0x1CAC083126E978D5 * ((uint64_t)(v75 - *(_QWORD *)a7) >> 3);
                v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) > 0x4189374BC6A7EFLL)
                  goto LABEL_133;
                v80 = 0x1CAC083126E978D5 * ((uint64_t)(v76 - *(_QWORD *)a7) >> 3);
                if (2 * v80 > v79)
                  v79 = 2 * v80;
                if (v80 >= 0x20C49BA5E353F7)
                  v81 = 0x4189374BC6A7EFLL;
                else
                  v81 = v79;
                v114 = a7 + 16;
                if (v81)
                  v81 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v81);
                else
                  v82 = 0;
                v83 = v81 + 1000 * v78;
                *(_QWORD *)&v111 = v81;
                *((_QWORD *)&v111 + 1) = v83;
                v113 = v81 + 1000 * v82;
                KB::Candidate::Candidate(v83, (uint64_t)&v116);
                v112 = v83 + 1000;
                std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a7, &v111);
                v77 = *(_QWORD *)(a7 + 8);
                std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v111);
              }
              else
              {
                v77 = KB::Candidate::Candidate(v75, (uint64_t)&v116) + 1000;
              }
              *(_QWORD *)(a7 + 8) = v77;
              KB::Candidate::~Candidate((KB::Candidate *)&v116);
              v74 += 1000;
              --v72;
              v41 = a3;
            }
            while (v72);
          }
        }
        ++v69;
        v44 = v107.i64[0];
      }
      while (v69 < 0x1CAC083126E978D5 * ((v107.i64[1] - v107.i64[0]) >> 3));
    }
    *(_QWORD *)&v116 = (char *)&v109[1] + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(_QWORD *)&v116 = v109;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(_QWORD *)&v116 = (char *)v108 + 8;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    *(_QWORD *)&v116 = &v107;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
    if (v133 && v132[6] == 1)
      free(v133);
LABEL_127:
    v46 = v87;
    goto LABEL_128;
  }
  if ((unsigned __int16)v159 | (unsigned __int16)v134)
  {
    KB::Candidate::Candidate((KB::Candidate *)&v116);
    v130 = 0u;
    v131 = 0xFF8000003F800000;
    v52 = *a3;
    v51 = a3[1];
    if (*a3 != v51)
    {
      do
      {
        KB::Candidate::Candidate((KB::Candidate *)&v111, v52);
        TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()((uint64_t)&v107, &v96, (const KB::Word *)&v159, (uint64_t)&v116, (const KB::Word *)&v134, (float32x2_t *)&v111);
        v53 = *(_QWORD *)(a7 + 8);
        v54 = *(_QWORD *)(a7 + 16);
        if (v53 >= v54)
        {
          v56 = 0x1CAC083126E978D5 * ((uint64_t)(v53 - *(_QWORD *)a7) >> 3);
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) > 0x4189374BC6A7EFLL)
            goto LABEL_133;
          v58 = 0x1CAC083126E978D5 * ((uint64_t)(v54 - *(_QWORD *)a7) >> 3);
          if (2 * v58 > v57)
            v57 = 2 * v58;
          if (v58 >= 0x20C49BA5E353F7)
            v59 = 0x4189374BC6A7EFLL;
          else
            v59 = v57;
          v106 = (_OWORD *)(a7 + 16);
          if (v59)
            v59 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v59);
          else
            v60 = 0;
          v61 = v59 + 1000 * v56;
          v103 = v59;
          v104.i64[0] = v61;
          v105 = v59 + 1000 * v60;
          KB::Candidate::Candidate(v61, (uint64_t)&v107);
          v104.i64[1] = v61 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer((uint64_t *)a7, &v103);
          v55 = *(_QWORD *)(a7 + 8);
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v103);
        }
        else
        {
          v55 = KB::Candidate::Candidate(v53, (uint64_t)&v107) + 1000;
        }
        *(_QWORD *)(a7 + 8) = v55;
        KB::Candidate::~Candidate((KB::Candidate *)&v107);
        KB::Candidate::~Candidate((KB::Candidate *)&v111);
        v52 = (const KB::Candidate *)((char *)v52 + 1000);
      }
      while (v52 != v51);
    }
    KB::Candidate::~Candidate((KB::Candidate *)&v116);
    goto LABEL_127;
  }
  v46 = v87;
  if ((const KB::Candidate **)a7 != a3)
    std::vector<KB::Candidate>::__assign_with_size[abi:nn180100]<KB::Candidate*,KB::Candidate*>((KB::Candidate **)a7, *a3, a3[1], 0x1CAC083126E978D5 * ((a3[1] - *a3) >> 3));
LABEL_128:
  KB::Word::~Word((KB::Word *)&v134);
  KB::Word::~Word((KB::Word *)&v159);
  if (__p)
    operator delete(__p);
  if (v46)
    WTF::RefCounted<KB::DictionaryContainer>::deref(v46);
}

uint64_t (***TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(uint64_t (***this)(), KB::CandidateCollection *a2, int a3))()
{
  uint64_t (***v5)();
  char v6;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t (**v9)();
  char v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (this[3])
  {
    v5 = this;
    v6 = ((uint64_t (*)(uint64_t (***)()))(*this)[54])(this);
    (*((void (**)(uint64_t (**)(), KB::CandidateCollection *, _QWORD))*v5[3] + 8))(v5[3], a2, a3 ^ 1u);
    v7 = v5[3];
    v9 = &off_1EA102358;
    v10 = v6;
    v11 = &v9;
    (*((void (**)(uint64_t (**)(), KB::CandidateCollection *, uint64_t (***)()))*v7 + 7))(v7, a2, &v9);
    this = v11;
    if (v11 == &v9)
    {
      v8 = 4;
      this = &v9;
    }
    else
    {
      if (!v11)
        return this;
      v8 = 5;
    }
    return (uint64_t (***)())(*this)[v8]();
  }
  return this;
}

void std::vector<KB::Candidate>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  KB::Candidate *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  KB::Candidate *v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[5];

  v4 = *a1;
  v5 = (KB::Candidate *)a1[1];
  v6 = 0x1CAC083126E978D5 * (((uint64_t)v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      v18 = (KB::Candidate *)(v4 + 1000 * a2);
      while (v5 != v18)
      {
        v5 = (KB::Candidate *)((char *)v5 - 1000);
        KB::Candidate::~Candidate(v5);
      }
      a1[1] = (uint64_t)v18;
    }
  }
  else
  {
    v8 = a1[2];
    if (0x1CAC083126E978D5 * ((v8 - (uint64_t)v5) >> 3) >= v7)
    {
      v19 = (char *)v5 + 1000 * v7;
      v20 = 1000 * a2 - 8 * (((uint64_t)v5 - *a1) >> 3);
      do
      {
        bzero(v5, 0x3E8uLL);
        KB::Candidate::Candidate(v5);
        v5 = (KB::Candidate *)((char *)v5 + 1000);
        v20 -= 1000;
      }
      while (v20);
      a1[1] = (uint64_t)v19;
    }
    else
    {
      if (a2 > 0x4189374BC6A7EFLL)
        abort();
      v21[4] = a1 + 2;
      v9 = 0x1CAC083126E978D5 * ((v8 - v4) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x20C49BA5E353F7)
        v11 = 0x4189374BC6A7EFLL;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v11);
      v13 = &v12[1000 * v6];
      v21[0] = v12;
      v21[1] = v13;
      v21[3] = &v12[1000 * v14];
      v15 = 1000 * a2;
      v16 = &v12[1000 * a2];
      v17 = v15 - 1000 * v6;
      do
      {
        bzero(v13, 0x3E8uLL);
        KB::Candidate::Candidate((KB::Candidate *)v13);
        v13 += 1000;
        v17 -= 1000;
      }
      while (v17);
      v21[2] = v16;
      std::vector<KB::Candidate>::__swap_out_circular_buffer(a1, v21);
      std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)v21);
    }
  }
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_BYTE *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1EA102358;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1EA102358;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::refine_latham_conversions(KB::CandidateCollection &,BOOL)::$_0>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;

  v5 = *a3;
  v6 = a2[187];
  v7 = a2[189];
  v8 = a2[190];
  v10 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 + 1);
  v11 = *(_QWORD *)a2 << 8;
  if (*(_QWORD *)a2)
  {
    v12 = v11 - 16 * v10;
    v13 = *((_QWORD *)a2 + 1);
    while ((*(_BYTE *)(v13 + 105) & 1) == 0)
    {
      v13 += 240;
      v12 -= 240;
      if (!v12)
        goto LABEL_8;
    }
  }
  else
  {
    v13 = *((_QWORD *)a2 + 1);
  }
  if (v13 == v9 + 240 * v10)
  {
LABEL_8:
    if (!v10)
      goto LABEL_17;
    v14 = 240 * v10 - 240;
    v15 = (uint64_t *)(v9 + 224);
    do
    {
      v17 = *v15;
      v15 += 30;
      v16 = v17;
      if (v17)
        v18 = 1;
      else
        v18 = v14 == 0;
      v14 -= 240;
    }
    while (!v18);
    if (!v16)
      goto LABEL_17;
  }
  v5 = v5 * 0.8;
LABEL_17:
  v19 = logf(v5);
  v20 = v6 + (float)(v8 * (float)(v7 + v19));
  if (*(_BYTE *)(a1 + 8))
  {
    if (v10)
    {
      v21 = v11 - 16 * v10;
      v22 = (float *)(v9 + 100);
      v23 = 1.0;
      do
      {
        v24 = *v22;
        v22 += 60;
        v23 = v23 * v24;
        v21 -= 240;
      }
      while (v21);
    }
    else
    {
      v23 = 1.0;
    }
    v20 = v20 + (float)(v8 * logf(v23));
  }
  a2[186] = v20;
  a2[187] = v6;
  a2[188] = v19;
  a2[189] = v7;
  a2[190] = v8;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::extended_latham_conversions(KB::CandidateCollection const&,KB::String const&,KB::LanguageModelContext const&,std::map<KB::String,KB::CandidateCollection> const&,unsigned long)const::$_0::operator()(uint64_t a1, uint64_t **a2, const KB::Word *a3, uint64_t a4, const KB::Word *a5, float32x2_t *a6)
{
  KB::Candidate *v12;
  unsigned __int16 *v13;
  float v14;
  float v15;
  float32x2_t v16;
  int v17;
  __int32 v18;
  uint64_t result;
  _BYTE v20[132];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = KB::Candidate::Candidate((KB::Candidate *)a1);
  KB::LanguageModelContext::operator=((uint64_t)v12 + 784, *a2);
  KB::Candidate::append((unsigned __int16 *)a1, a3);
  KB::Candidate::append((KB::Candidate *)a1, (const KB::Candidate *)a4);
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a4 + 744);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a4 + 748);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a4 + 760);
  v13 = KB::Candidate::append((unsigned __int16 *)a1, a5);
  if (*(_QWORD *)a1 && (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 240 * *(_QWORD *)a1 - 105) & 4) == 0)
  {
    KB::String::space((KB::String *)v13);
    KB::Word::Word((KB::Word *)v20, (const KB::String *)&KB::String::space(void)::space, &kTITokenIDUNK, 0);
    v21 |= 0x4000000u;
    KB::Candidate::append((unsigned __int16 *)a1, (const KB::Word *)v20);
    KB::Word::~Word((KB::Word *)v20);
  }
  KB::Candidate::append((KB::Candidate *)a1, (const KB::Candidate *)a6);
  v14 = *(float *)(a1 + 760);
  v15 = *(float *)(a1 + 748) + a6[93].f32[1];
  *(float *)(a1 + 748) = v15;
  v16 = vadd_f32(*(float32x2_t *)(a1 + 752), a6[94]);
  *(float *)(a1 + 744) = v15 + (float)(v14 * vaddv_f32(v16));
  *(float32x2_t *)(a1 + 752) = v16;
  *(_BYTE *)(a1 + 960) = a6[120].i8[0];
  *(_DWORD *)(a1 + 992) = a6[124].i32[0];
  v17 = *(_DWORD *)(a4 + 780);
  v18 = a6[97].i32[1];
  result = KB::Candidate::length((KB::Candidate *)a4);
  *(_DWORD *)(a1 + 780) = (v18 << (result + 1)) | v17;
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2>,void ()(KB::Candidate &,float)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

__n128 std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1EA1022C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1EA1022C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_2>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, uint64_t a2, float *a3)
{
  float v3;
  _OWORD v4[2];

  v3 = *a3;
  v4[0] = *(_OWORD *)(a2 + 748);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 760);
  update_lookup_suggestions_omega_factors(a2, (uint64_t)v4, **(unsigned __int8 **)(a1 + 8), v3);
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1>,void ()(KB::Candidate &,float)>::~__func()
{
  JUMPOUT(0x1DF0A2144);
}

_BYTE *std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1>,void ()(KB::Candidate &,float)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1EA102280;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1>,void ()(KB::Candidate &,float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1EA102280;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1,std::allocator<TI::Favonius::FavoniusStrokeBuildManager::lookup_suggestions_for_UI(KB::String const&,KB::LanguageModelContext const&,unsigned int,KB::String&,KB::LookupType,std::function<void ()(KB::CandidateCollection &,KB::CandidateFilterFlags,BOOL)>)::$_1>,void ()(KB::Candidate &,float)>::operator()(uint64_t a1, uint64_t a2, float *a3)
{
  float v3;
  _OWORD v4[2];

  v3 = *a3;
  v4[0] = *(_OWORD *)(a2 + 748);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a2 + 760);
  update_lookup_suggestions_omega_factors(a2, (uint64_t)v4, *(unsigned __int8 *)(a1 + 8), v3);
}

unint64_t TI::Favonius::FavoniusStrokeBuildManager::uncommitted_search_index_for_path_index(TI::Favonius::FavoniusStrokeBuildManager *this, int a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_DWORD *)this + 40);
  v4 = (v3 + 1);
  if (v2 > v4)
  {
    v7 = v3 + 2;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * v4) + 8);
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8) + 48) == a2)
        v2 = v7 - 1;
      else
        v2 = v2;
      v4 = v7;
    }
    while (*((_QWORD *)this + 6) > (unint64_t)v7++);
  }
  return v2;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::forced_hit_key@<X0>(uint64_t this@<X0>, const TI::Favonius::KeyboardLayout *a2@<X2>, unsigned int a3@<W1>, int a4@<W3>, unsigned int **a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[5];
  unsigned int *v30;
  unsigned int *v31;
  _QWORD v32[2];
  uint64_t (*v33)(uint64_t, unsigned int **);
  void *v34;
  unsigned int **v35;
  int v36;
  unsigned int *v37;
  unsigned int **v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  unsigned int *v45;

  if (a4 == -1)
  {
    v18 = 0;
  }
  else
  {
    v8 = a3;
    v9 = *(_QWORD *)(this + 56);
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * a3) + 8);
    if (*(const TI::Favonius::KeyboardLayout **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10) + 56) == a2)
    {
      v22 = *(unsigned int **)(*(_QWORD *)(v9 + 8 * v8) + 8);
      v45 = v22;
      if (v22)
      {
        v23 = v22 + 2;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
        v25 = v45;
      }
      else
      {
        v25 = 0;
      }
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 0x40000000;
      v43[2] = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke;
      v43[3] = &__block_descriptor_tmp_11_11219;
      v44 = a4;
      this = (uint64_t)TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test(&v45, (uint64_t)v43, &v37);
      v18 = v37;
      v37 = 0;
      if (v25)
      {
        v26 = v25 + 2;
        v27 = atomic_load(v25 + 2);
        if (v27 == 1)
        {
          this = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
        else
        {
          do
            v28 = __ldaxr(v26);
          while (__stlxr(v28 - 1, v26));
        }
      }
    }
    else
    {
      v37 = 0;
      v38 = &v37;
      v39 = 0x3002000000;
      v40 = __Block_byref_object_copy__11220;
      v41 = __Block_byref_object_dispose__11221;
      v42 = 0;
      v11 = MEMORY[0x1E0C809B0];
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 0x40000000;
      v33 = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_12;
      v34 = &unk_1EA102110;
      v36 = a4;
      v35 = &v37;
      v12 = (unsigned int **)*((_QWORD *)a2 + 1);
      v13 = (unsigned int **)*((_QWORD *)a2 + 2);
      if (v12 == v13)
        goto LABEL_16;
      do
        v33((uint64_t)v32, v12++);
      while (v12 != v13);
      if (!v38[5])
      {
LABEL_16:
        v18 = 0;
      }
      else
      {
        v14 = *(unsigned int **)(*(_QWORD *)(v9 + 8 * v8) + 8);
        v30 = v14;
        if (v14)
        {
          v15 = v14 + 2;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          v17 = v30;
        }
        else
        {
          v17 = 0;
        }
        v29[0] = v11;
        v29[1] = 0x40000000;
        v29[2] = ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_2;
        v29[3] = &unk_1EA102138;
        v29[4] = &v37;
        TI::Favonius::FavoniusStrokeBuildManager::key_near_touch_passing_test(&v30, (uint64_t)v29, &v31);
        v18 = v31;
        v31 = 0;
        if (v17)
        {
          v19 = v17 + 2;
          v20 = atomic_load(v17 + 2);
          if (v20 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
          }
          else
          {
            do
              v21 = __ldaxr(v19);
            while (__stlxr(v21 - 1, v19));
          }
        }
      }
      _Block_object_dispose(&v37, 8);
      this = v42;
      if (v42)
        this = WTF::RefCounted<TI::Favonius::Key>::deref(v42);
    }
  }
  *a5 = v18;
  return this;
}

BOOL ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) == *(__int16 *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 62);
}

uint64_t __Block_byref_object_copy__11220(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__11221(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return WTF::RefCounted<TI::Favonius::Key>::deref(result);
  return result;
}

uint64_t ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_12(uint64_t result, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *a2;
  if (*(_DWORD *)(result + 40) == *((__int16 *)*a2 + 31))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 + 1, v2));
    result = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    if (result)
      return WTF::RefCounted<TI::Favonius::Key>::deref(result);
  }
  return result;
}

BOOL ___ZNK2TI8Favonius26FavoniusStrokeBuildManager14forced_hit_keyEjPKNS0_14KeyboardLayoutEi_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return v2 == v3 || KB::String::equal((KB::String *)(v2 + 8), (const KB::String *)(v3 + 8), 1);
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_it_recognizer(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  __int128 *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  _OWORD buf[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 330) && !*(_QWORD *)(a1 + 720))
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      v5 = *(unsigned int **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
      if (v5)
      {
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
      }
    }
    else
    {
      v5 = 0;
    }
    v7 = (const char *)(a1 + 448);
    if (*(char *)(a1 + 471) < 0)
      v7 = *(const char **)(a1 + 448);
    KB::String::String((KB::String *)buf, v7);
    v8 = (uint64_t)(*a2 + 52);
    v24 = v5;
    if (v5)
    {
      do
        v9 = __ldaxr(v5);
      while (__stlxr(v9 + 1, v5));
      v10 = v24;
      v11 = (__int128 *)(a1 + 736);
      v12 = TI::TIInputRecognizer::ml_based_tap_typing_enabled((unsigned __int16 *)buf, v8, &v24, a1 + 736);
      if (v10)
        WTF::RefCounted<KB::DictionaryContainer>::deref(v10);
    }
    else
    {
      v11 = (__int128 *)(a1 + 736);
      v12 = TI::TIInputRecognizer::ml_based_tap_typing_enabled((unsigned __int16 *)buf, v8, &v24, a1 + 736);
    }
    if (*((_QWORD *)&buf[0] + 1) && BYTE6(buf[0]) == 1)
      free(*((void **)&buf[0] + 1));
    if (v12)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 136315138;
        *(_QWORD *)((char *)buf + 4) = "initialize_it_recognizer";
        _os_log_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%s  Creating ml tap typing recognizer", (uint8_t *)buf, 0xCu);
      }
      v13 = operator new();
      v14 = (_QWORD *)v13;
      v15 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&buf[0] = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v15 + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
      }
      TI::TIInputRecognizer::TIInputRecognizer(v13, 1, (uint64_t *)buf, (__int128 *)(a1 + 448), v11);
      if (*(_QWORD *)&buf[0])
      {
        v18 = (unsigned int *)(*(_QWORD *)&buf[0] + 8);
        v19 = atomic_load((unsigned int *)(*(_QWORD *)&buf[0] + 8));
        if (v19 == 1)
        {
          (*(void (**)(void))(**(_QWORD **)&buf[0] + 40))();
        }
        else
        {
          do
            v20 = __ldaxr(v18);
          while (__stlxr(v20 - 1, v18));
        }
      }
      v21 = *(_QWORD *)(a1 + 720);
      *(_QWORD *)(a1 + 720) = v14;
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v14 = *(_QWORD **)(a1 + 720);
      }
      v22 = *a2;
      if (v22)
      {
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 + 1, v22));
        TI::CP::TIPathRecognizerInterface::set_key_layout(v14, v22);
        WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v22);
      }
      else
      {
        TI::CP::TIPathRecognizerInterface::set_key_layout(v14, 0);
      }
      KB::LanguageModelContext::operator=(*(_QWORD *)(a1 + 720) + 104, (uint64_t *)(a1 + 224));
    }
    if (v5)
      WTF::RefCounted<KB::DictionaryContainer>::deref(v5);
  }
}

void TI::Favonius::FavoniusStrokeBuildManager::initialize_ensemble_path_recognizer(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  uint8_t buf[16];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::string v45;
  std::string __p;
  __int16 v47;
  char v48;
  _BYTE v49[8];
  void *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 328) && *((_BYTE *)this + 210))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    *((_OWORD *)this + 44) = 0u;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "initialize_ensemble_path_recognizer";
      _os_log_debug_impl(&dword_1DA6F2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "%s  Loading/reloading ensemble path recognizer", buf, 0xCu);
    }
    v5 = (const __CFDictionary *)*((_QWORD *)this + 91);
    if (v5)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v5, CFSTR("CPSearch"));
      if (Value)
        CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)TI::CP::SearchParameters::set_values_from_dictionary(__CFDictionary const*)::$_0::__invoke, (char *)this + 544);
    }
    v7 = operator new(0x298uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA102200;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    v37 = v8;
    if (v8)
    {
      v9 = v8 + 2;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    v36 = v11;
    if (v11)
    {
      v12 = v11 + 2;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v14 = *(_OWORD *)((char *)this + 424);
    v42 = *(_OWORD *)((char *)this + 408);
    v43 = v14;
    v44 = *((_QWORD *)this + 55);
    v15 = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)buf = *(_OWORD *)((char *)this + 344);
    v39 = v15;
    v16 = *(_OWORD *)((char *)this + 392);
    v40 = *(_OWORD *)((char *)this + 376);
    v41 = v16;
    if (*((char *)this + 471) < 0)
      std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)this + 56), *((_QWORD *)this + 57));
    else
      v45 = *(std::string *)((char *)this + 448);
    if (*((char *)this + 495) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 59), *((_QWORD *)this + 60));
    else
      __p = *(std::string *)((char *)this + 472);
    v47 = *((_WORD *)this + 248);
    v48 = *((_BYTE *)this + 498);
    KB::String::String((KB::String *)v49, (TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 504));
    v17 = *(_OWORD *)((char *)this + 680);
    v59 = *(_OWORD *)((char *)this + 664);
    v60 = v17;
    v61 = *((_QWORD *)this + 87);
    v18 = *(_OWORD *)((char *)this + 616);
    v55 = *(_OWORD *)((char *)this + 600);
    v56 = v18;
    v19 = *(_OWORD *)((char *)this + 648);
    v57 = *(_OWORD *)((char *)this + 632);
    v58 = v19;
    v20 = *(_OWORD *)((char *)this + 552);
    v51 = *(_OWORD *)((char *)this + 536);
    v52 = v20;
    v21 = *(_OWORD *)((char *)this + 584);
    v53 = *(_OWORD *)((char *)this + 568);
    v54 = v21;
    TI::CP::TIPathRecognizerEnsemble::TIPathRecognizerEnsemble((uint64_t)(v7 + 3), (uint64_t *)&v37, (uint64_t *)&v36, (uint64_t)buf);
    if (v50 && v49[6] == 1)
      free(v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (v36)
    {
      v22 = v36 + 2;
      v23 = atomic_load(v36 + 2);
      if (v23 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v36 + 8))();
      }
      else
      {
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
      }
    }
    if (v37)
    {
      v25 = v37 + 2;
      v26 = atomic_load(v37 + 2);
      if (v26 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      }
      else
      {
        do
          v27 = __ldaxr(v25);
        while (__stlxr(v27 - 1, v25));
      }
    }
    *(_QWORD *)&v28 = v7 + 3;
    *((_QWORD *)&v28 + 1) = v7;
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 89);
    *((_OWORD *)this + 44) = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (_QWORD *)*((_QWORD *)this + 88);
    v33 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * *((_QWORD *)this + 6) - 8) + 8);
    v34 = *(unsigned int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 56))(v33) + 56);
    if (v34)
    {
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
      TI::CP::TIPathRecognizerInterface::set_key_layout(v32, v34);
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v34);
    }
    else
    {
      TI::CP::TIPathRecognizerInterface::set_key_layout(v32, 0);
    }
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 88) + 120))(*((_QWORD *)this + 88), (char *)this + 224);
    TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(*((TI::CP::TIPathRecognizerEnsemble **)this + 88));
    *((_BYTE *)this + 210) = 0;
  }
}

uint64_t TI::CP::TIPathRecognizerInterface::set_key_layout(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;

  result = a1[1];
  if ((unsigned int *)result != a2)
  {
    if (a2)
    {
      do
        v4 = __ldaxr(a2);
      while (__stlxr(v4 + 1, a2));
      result = a1[1];
    }
    a1[1] = a2;
    if (result)
      WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(result);
    return (*(uint64_t (**)(_QWORD *))(*a1 + 152))(a1);
  }
  return result;
}

void ___ZN2TI8Favonius26FavoniusStrokeBuildManager22add_touch_down_or_dragEN3WTF10PassRefPtrINS0_5TouchEEEib_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[4];
      if (v5)
        TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed(v5, (uint64_t)(a1 + 6), (const KB::String *)(a1 + 9));
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

KB::String *__copy_helper_block_8_32c58_ZTSKNSt3__18weak_ptrIN2TI2CP24TIPathRecognizerEnsembleEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c17_ZTSKN2KB6StringE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    a1[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return KB::String::String((KB::String *)&a1[3], (const KB::String *)(a2 + 72));
}

void __destroy_helper_block_8_32c58_ZTSKNSt3__18weak_ptrIN2TI2CP24TIPathRecognizerEnsembleEEE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c17_ZTSKN2KB6StringE(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 80);
  if (v2 && *(_BYTE *)(a1 + 78) == 1)
    free(v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

dispatch_queue_t ___ZN2TI8Favonius26FavoniusStrokeBuildManager21background_task_queueEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  result = dispatch_queue_create("com.apple.TextInput.FSBM.backgroundTasks", v0);
  TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::__queue = (uint64_t)result;
  return result;
}

void std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::TIPathRecognizerEnsemble>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::InputTouchAlignment(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::touch_index_for_input_index(TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment *this, unsigned int a2)
{
  uint64_t i;

  for (i = *(_QWORD *)this; a2; --a2)
  {
    if (*(_DWORD *)(i + 4 * a2) != -1)
      break;
  }
  return *(unsigned int *)(i + 4 * a2);
}

std::__wrap_iter<unsigned int *>::iterator_type TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::add_input(std::vector<unsigned int> *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::size_type __n)
{
  int v3;
  std::vector<unsigned int>::const_iterator v5;
  std::__wrap_iter<unsigned int *>::iterator_type result;
  std::vector<unsigned int>::value_type __x;

  v3 = __n;
  __x = a2;
  v5.__i_ = &this->__begin_[LODWORD(this[1].__begin_)];
  result = std::vector<unsigned int>::insert(this, v5, __n, &__x).__i_;
  LODWORD(this[1].__begin_) += v3;
  return result;
}

std::__wrap_iter<unsigned int *>::iterator_type TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::add_unmapped_inputs(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int v2;
  std::vector<unsigned int>::const_iterator v4;
  std::__wrap_iter<unsigned int *>::iterator_type result;
  std::vector<unsigned int>::value_type __x;

  v2 = __n;
  __x = -1;
  v4.__i_ = &this->__begin_[LODWORD(this[1].__begin_)];
  result = std::vector<unsigned int>::insert(this, v4, v2, &__x).__i_;
  LODWORD(this[1].__begin_) += v2;
  return result;
}

_QWORD *TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::delete_from_input(_QWORD *this)
{
  _QWORD *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *((_DWORD *)this + 6) - 1;
  *((_DWORD *)this + 6) = v2;
  v3 = this[1];
  v4 = *this + 4 * v2;
  v5 = v3 - (v4 + 4);
  if (v3 != v4 + 4)
    this = memmove((void *)(*this + 4 * v2), (const void *)(v4 + 4), v3 - (v4 + 4));
  v1[1] = v4 + v5;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::set_input_index(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::clear(uint64_t this)
{
  *(_QWORD *)(this + 8) = *(_QWORD *)this;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

unint64_t TI::Favonius::FavoniusStrokeBuildManager::InputTouchAlignment::index_of_first_input_from_touch(char **this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;

  v1 = *this;
  v2 = *((unsigned int *)this + 6);
  if ((_DWORD)v2)
  {
    v3 = 4 * v2;
    v4 = *this;
    v5 = &v1[4 * v2];
    while (*(_DWORD *)v4 == -1)
    {
      v4 += 4;
      v3 -= 4;
      if (!v3)
      {
        v4 = v5;
        return (unint64_t)(v4 - v1) >> 2;
      }
    }
  }
  else
  {
    v4 = *this;
  }
  return (unint64_t)(v4 - v1) >> 2;
}

TI::Favonius::FavoniusStrokeBuildManager *TI::Favonius::FavoniusStrokeBuildManager::FavoniusStrokeBuildManager(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1EA101E80;
  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1EA1021C8;
  v2[4] = 0;
  v2[3] = &off_1EA106698;
  *((_QWORD *)this + 3) = v2 + 3;
  *((_QWORD *)this + 4) = v2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 82) = 0u;
  *(_DWORD *)((char *)this + 98) = 16;
  *((_BYTE *)this + 102) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 32) = 0x100000;
  *((_WORD *)this + 66) = 0;
  *((_BYTE *)this + 134) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_WORD *)this + 104) = 256;
  *((_BYTE *)this + 210) = 1;
  *((_BYTE *)this + 212) = 1;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 288));
  language_modeling::v1::LinguisticContext::LinguisticContext((TI::Favonius::FavoniusStrokeBuildManager *)((char *)this + 296));
  *((_BYTE *)this + 332) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *(_DWORD *)((char *)this + 327) = 0;
  *((_DWORD *)this + 86) = 4;
  *((_QWORD *)this + 46) = 0;
  *((_OWORD *)this + 22) = xmmword_1DA910408;
  *((_QWORD *)this + 49) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 376) = xmmword_1DA910420;
  *((_QWORD *)this + 52) = 0;
  *((_OWORD *)this + 25) = xmmword_1DA910438;
  *((_DWORD *)this + 106) = 1056964608;
  *((_QWORD *)this + 54) = 0x200000001;
  *((_BYTE *)this + 440) = 1;
  *((_DWORD *)this + 111) = 3;
  *(_DWORD *)((char *)this + 495) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_DWORD *)this + 126) = 0x100000;
  *((_WORD *)this + 254) = 0;
  *((_BYTE *)this + 510) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_BYTE *)this + 520) = 0;
  *((_DWORD *)this + 134) = 1050253722;
  *((_BYTE *)this + 680) = 1;
  *((_OWORD *)this + 34) = xmmword_1DA911100;
  *((_OWORD *)this + 35) = xmmword_1DA911080;
  *((_OWORD *)this + 36) = xmmword_1DA911090;
  *((_OWORD *)this + 37) = xmmword_1DA9110A0;
  *((_OWORD *)this + 40) = xmmword_1DA9110D0;
  *((_OWORD *)this + 41) = xmmword_1DA9110E0;
  *((_OWORD *)this + 38) = xmmword_1DA9110B0;
  *((_OWORD *)this + 39) = xmmword_1DA9110C0;
  *((_QWORD *)this + 84) = 0x401F404C05921038;
  *((_BYTE *)this + 760) = 0;
  *((_BYTE *)this + 768) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_BYTE *)this + 736) = 0;
  *((_OWORD *)this + 43) = xmmword_1DA9110F0;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_QWORD *)this + 97) = (char *)this + 784;
  *((_DWORD *)this + 225) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_QWORD *)this + 113) = 6;
  *((_QWORD *)this + 114) = 8;
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 984) = 0;
  v3 = operator new();
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)v3 = &off_1EA104628;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 56) = xmmword_1DA911110;
  *(_QWORD *)(v3 + 72) = 0x7F0000007FLL;
  *(_DWORD *)(v3 + 80) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 140) = 0x7F0000007FLL;
  *(_DWORD *)(v3 + 148) = -8388608;
  v4 = operator new();
  v6 = (uint64_t *)((char *)this + 48);
  v5 = *((_QWORD *)this + 6);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v3;
  *(_DWORD *)(v4 + 16) = -1;
  v12 = v4;
  if (v5 != *((_QWORD *)this + 8))
  {
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v5) = v4;
    do
LABEL_6:
      v10 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v10 + 1, (unsigned int *)v4));
    v9 = *v6;
    goto LABEL_8;
  }
  v7 = (uint64_t *)WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)this + 6, v5 + 1, (unint64_t)&v12);
  v8 = *((_QWORD *)this + 7);
  if (!v8)
    goto LABEL_9;
  v4 = *v7;
  v9 = *v6;
  *(_QWORD *)(v8 + 8 * *v6) = v4;
  if (v4)
    goto LABEL_6;
LABEL_8:
  *v6 = v9 + 1;
LABEL_9:
  if (v12)
    WTF::RefCounted<TI::Favonius::StrokeBuildManagerInternals::TouchHistoryRefWithKeycode>::deref(v12);
  return this;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  if (TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken != -1)
    dispatch_once(&TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::onceToken, &__block_literal_global_18_11223);
  return TI::Favonius::FavoniusStrokeBuildManager::background_task_queue(void)::__queue;
}

uint64_t TI::Favonius::FavoniusStrokeBuildManager::is_exact_typed_string_lm_ranking_enabled(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
  if ((_DWORD)result)
    return *((_BYTE *)this + 212) != 0;
  return result;
}

BOOL TI::Favonius::FavoniusStrokeBuildManager::areStringsSortKeyEquivalent(TI::Favonius::FavoniusStrokeBuildManager *this, _LXLexicon *a2, const KB::String *a3, const KB::String *a4)
{
  uint64_t v4;
  unsigned int v5;
  _BOOL8 v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 16);
  do
    v5 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v5 + 1, (unsigned int *)v4));
  v6 = KB::CollatorWrapper::sortkey_compare_strings((KB::CollatorWrapper **)(*(_QWORD *)(v4 + 8) + 72), a2, a3, a4) == 0;
  WTF::RefCounted<KB::DictionaryContainer>::deref((unsigned int *)v4);
  return v6;
}

float TI::Favonius::FavoniusStrokeBuildManager::language_power_for_lookup(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  int *v2;
  float v3;

  if ((*(unsigned int (**)(TI::Favonius::FavoniusStrokeBuildManager *))(*(_QWORD *)this + 152))(this))
  {
    v2 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
    if (*((_BYTE *)this + 336))
    {
      v3 = *((float *)this + 83);
      if (v3 <= 1.0 && v3 >= 0.0)
        v2 = (int *)((char *)this + 332);
    }
  }
  else
  {
    v2 = &TI::Favonius::SearchParameters::k_predictive_spell_power;
  }
  return *(float *)v2;
}

float TI::Favonius::FavoniusStrokeBuildManager::favonius_language_weight(TI::Favonius::FavoniusStrokeBuildManager *this)
{
  int *v1;
  float v2;

  v1 = &TI::Favonius::SearchParameters::k_linguistic_context_power;
  if (*((_BYTE *)this + 336))
  {
    v2 = *((float *)this + 83);
    if (v2 <= 1.0 && v2 >= 0.0)
      v1 = (int *)((char *)this + 332);
  }
  return *(float *)v1;
}

void TI::CP::TIPathRecognizerEnsemble::~TIPathRecognizerEnsemble(TI::CP::TIPathRecognizerEnsemble *this)
{
  TI::CP::TIPathRecognizerEnsemble::~TIPathRecognizerEnsemble(this);
  JUMPOUT(0x1DF0A2144);
}

{
  CFNumberRef v2;
  CFNumberRef v3;
  void *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  int valuePtr;
  void **v22;

  *(_QWORD *)this = &off_1EA102428;
  if (preference_value_for_key((const __CFString *)this) != *((_DWORD *)this + 150))
  {
    valuePtr = *((_DWORD *)this + 150);
    v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    if (v2)
    {
      v3 = v2;
      CFPreferencesSetAppValue(CFSTR("kbUserDidPath"), v2, CFSTR("com.apple.keyboard"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.keyboard"));
      CFRelease(v3);
    }
  }
  v22 = (void **)((char *)this + 576);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::TIPathRecognizerEnsemble *)((char *)this + 568));
  language_modeling::v1::LinguisticContext::~LinguisticContext((TI::CP::TIPathRecognizerEnsemble *)((char *)this + 560));
  v4 = (void *)*((_QWORD *)this + 64);
  if (v4)
  {
    *((_QWORD *)this + 65) = v4;
    operator delete(v4);
  }
  std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)this + 496);
  v5 = (unsigned int *)*((_QWORD *)this + 61);
  if (v5)
  {
    v6 = v5 + 2;
    v7 = atomic_load(v5 + 2);
    if (v7 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
    else
    {
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 60);
  if (v9)
  {
    v10 = v9 + 2;
    v11 = atomic_load(v9 + 2);
    if (v11 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 40))(v9);
    }
    else
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
    }
  }
  v13 = (void *)*((_QWORD *)this + 36);
  if (v13 && *((_BYTE *)this + 286) == 1)
    free(v13);
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (_QWORD *)*((_QWORD *)this + 4);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)(v17 + 3));
      operator delete(v17);
      v17 = v18;
    }
    while (v18);
  }
  v19 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
    operator delete(v19);
  *(_QWORD *)this = off_1EA1056B8;
  v20 = *((_QWORD *)this + 1);
  if (v20)
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref(v20);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::get_recognizer_type(TI::CP::TIPathRecognizerEnsemble *this)
{
  return 3;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::recognitionSources(TI::CP::TIPathRecognizerEnsemble *this)
{
  uint64_t *v1;
  uint64_t result;
  int v3;

  v1 = (uint64_t *)*((_QWORD *)this + 4);
  if (v1)
  {
    result = 0;
    while (1)
    {
      v3 = *((_DWORD *)v1 + 4);
      if (!v3)
        goto LABEL_7;
      if (v3 == 1)
        goto LABEL_8;
      if (v3 == 2)
        break;
LABEL_9:
      v1 = (uint64_t *)*v1;
      if (!v1)
        return result;
    }
    LODWORD(result) = result | 4;
LABEL_7:
    LODWORD(result) = result | 1;
LABEL_8:
    result = result | 2;
    goto LABEL_9;
  }
  return 0;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::add_touch(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  int v7;
  BOOL v8;
  int v15;
  uint64_t **i;

  v7 = *(_DWORD *)(result + 80);
  if (v7 == -1)
    v8 = (_DWORD)a2 != 0;
  else
    v8 = v7 != (_DWORD)a3;
  if (v8)
    return result;
  v15 = a3;
  if ((_DWORD)a2)
  {
    if ((a2 & 0xFFFFFFFE) != 2)
      goto LABEL_9;
    v15 = -1;
  }
  *(_DWORD *)(result + 80) = v15;
LABEL_9:
  *(double *)(result + 88) = a4;
  *(double *)(result + 96) = a5;
  *(_DWORD *)(result + 84) = a2;
  for (i = *(uint64_t ***)(result + 32); i; i = (uint64_t **)*i)
    result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double, double, double, double))(*i[3] + 32))(i[3], a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::touch_stage(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((unsigned int *)this + 21);
}

double TI::CP::TIPathRecognizerEnsemble::last_touch(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((double *)this + 11);
}

double TI::CP::TIPathRecognizerEnsemble::reset_path(TI::CP::TIPathRecognizerEnsemble *this)
{
  uint64_t **i;
  double result;

  for (i = (uint64_t **)*((_QWORD *)this + 4); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[3] + 56))(i[3]);
  *(_OWORD *)((char *)this + 88) = *MEMORY[0x1E0C9D538];
  *(_QWORD *)&result = 0x7FFFFFFFFLL;
  *((_QWORD *)this + 10) = 0x7FFFFFFFFLL;
  return result;
}

unsigned int *TI::CP::TIPathRecognizerEnsemble::set_typing_model(uint64_t a1, uint64_t *a2)
{
  unsigned int *result;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *i;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  result = *(unsigned int **)(a1 + 480);
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 480) = v4;
  if (result)
  {
    v5 = result + 2;
    v6 = atomic_load(result + 2);
    if (v6 == 1)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
    }
    else
    {
      do
        v7 = __ldaxr(v5);
      while (__stlxr(v7 - 1, v5));
    }
  }
  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v9 = i[3];
    v10 = *(unsigned int **)(a1 + 480);
    v16 = v10;
    if (v10)
    {
      v11 = v10 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v9 + 64))(v9, &v16);
    result = v16;
    if (v16)
    {
      v13 = v16 + 2;
      v14 = atomic_load(v16 + 2);
      if (v14 == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
      }
      else
      {
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
      }
    }
  }
  return result;
}

double TI::CP::TIPathRecognizerEnsemble::path_length(TI::CP::TIPathRecognizerEnsemble *this)
{
  uint64_t *v2;
  double result;

  v2 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((_QWORD *)this + 2, *((_DWORD *)this + 51));
  if (!v2)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 4);
    if (!v2)
      return 0.0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2[3] + 72))(v2[3]);
  return result;
}

void TI::CP::TIPathRecognizerEnsemble::generate_candidates(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  TI::ConfidenceModel *v10;
  double v11;
  int v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t *v15;
  int v16;
  unsigned __int8 v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  void **v22;
  char *v23;
  unint64_t v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *i;
  char *v34;
  void **v35;
  void **v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  void *__p[2];
  __int128 v46;
  float v47;
  void **v48[2];
  char v49;

  if (!TI::CP::TIPathRecognizerInterface::should_generate_candidates((TI::CP::TIPathRecognizerInterface *)a1))
    return;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  v47 = 1.0;
  v7 = *(_DWORD *)(a1 + 120);
  if ((v7 & 0x10) != 0)
  {
    v9 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 204));
    if (!v9)
    {
      v11 = -1.0;
      goto LABEL_59;
    }
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v10 = (TI::ConfidenceModel *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v9[3] + 80))(v9[3], &v38, a3);
    v11 = TI::ConfidenceModel::compute_confidence1(v10, (KB::CandidateCollection *)&v38, 2u);
    v12 = *(_DWORD *)(a1 + 204);
    v13 = (unint64_t)__p[1];
    if (__p[1])
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        v3 = v12;
        if (__p[1] <= (void *)v12)
          v3 = v12 % (unint64_t)__p[1];
      }
      else
      {
        v3 = ((unint64_t)__p[1] - 1) & v12;
      }
      v22 = (void **)*((_QWORD *)__p[0] + v3);
      if (v22)
      {
        v23 = (char *)*v22;
        if (*v22)
        {
          do
          {
            v24 = *((_QWORD *)v23 + 1);
            if (v24 == v12)
            {
              if (*((_DWORD *)v23 + 4) == v12)
                goto LABEL_58;
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if ((void *)v24 >= __p[1])
                  v24 %= (unint64_t)__p[1];
              }
              else
              {
                v24 &= (unint64_t)__p[1] - 1;
              }
              if (v24 != v3)
                break;
            }
            v23 = *(char **)v23;
          }
          while (v23);
        }
      }
    }
    v23 = (char *)operator new(0x80uLL);
    v48[1] = (void **)&v46;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v12;
    *((_DWORD *)v23 + 4) = v12;
    *((_DWORD *)v23 + 31) = 0;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *(_OWORD *)(v23 + 88) = 0u;
    *(_OWORD *)(v23 + 104) = 0u;
    v49 = 1;
    v25 = (float)(unint64_t)(*((_QWORD *)&v46 + 1) + 1);
    if (!v13 || (float)(v47 * (float)v13) < v25)
    {
      v26 = 1;
      if (v13 >= 3)
        v26 = (v13 & (v13 - 1)) != 0;
      v27 = v26 | (2 * v13);
      v28 = vcvtps_u32_f32(v25 / v47);
      if (v27 <= v28)
        v29 = v28;
      else
        v29 = v27;
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)__p, v29);
      v13 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v12)
          v3 = v12 % (unint64_t)__p[1];
        else
          v3 = v12;
      }
      else
      {
        v3 = ((unint64_t)__p[1] - 1) & v12;
      }
    }
    v30 = __p[0];
    v31 = (_QWORD *)*((_QWORD *)__p[0] + v3);
    if (v31)
    {
      *(_QWORD *)v23 = *v31;
    }
    else
    {
      *(_QWORD *)v23 = v46;
      *(_QWORD *)&v46 = v23;
      v30[v3] = &v46;
      if (!*(_QWORD *)v23)
        goto LABEL_57;
      v32 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v32 >= v13)
          v32 %= v13;
      }
      else
      {
        v32 &= v13 - 1;
      }
      v31 = (char *)__p[0] + 8 * v32;
    }
    *v31 = v23;
LABEL_57:
    v48[0] = 0;
    ++*((_QWORD *)&v46 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100]((uint64_t)v48);
LABEL_58:
    KB::CandidateCollection::operator=((uint64_t)(v23 + 24), (uint64_t)&v38);
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
LABEL_59:
    if (v11 >= *(float *)(a1 + 200))
      goto LABEL_67;
    v44 = 0;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)i[3] + 16))(i[3]) != *(_DWORD *)(a1 + 204)
        && (*((_DWORD *)i + 4) != 2 || *(_BYTE *)(a1 + 56)))
      {
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)i[3] + 80))(i[3], &v38, a3);
        LODWORD(v48[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)i[3] + 16))(i[3]);
        v34 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>((uint64_t)__p, (int)v48[0], v48);
        KB::CandidateCollection::operator=((uint64_t)(v34 + 24), (uint64_t)&v38);
      }
    }
    TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(a1, (uint64_t)__p, a2, *(_DWORD *)(a1 + 120), 0);
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    goto LABEL_69;
  }
  if ((v7 & 0x20) != 0
    && TI::CP::TIPathRecognizerEnsemble::can_use_preferred_source((TI::CP::TIPathRecognizerEnsemble *)a1))
  {
    v8 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>(a1 + 16, *(_DWORD *)(a1 + 208), (_DWORD *)(a1 + 208));
    (*(void (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)v8[3] + 80))(v8[3], a2, a3);
    KB::CandidateCollection::normalize_scores((float32x2_t **)a2);
    goto LABEL_69;
  }
  v15 = *(uint64_t **)(a1 + 32);
  if (!v15)
    goto LABEL_67;
  do
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v16 = *((_DWORD *)v15 + 4);
    if (v16 == 1)
    {
      v17 = atomic_load((unsigned __int8 *)(a1 + 632));
      if ((v17 & 1) == 0)
        goto LABEL_18;
    }
    else if (v16 == 2 && !*(_BYTE *)(a1 + 56))
    {
      goto LABEL_18;
    }
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v15[3] + 80))(v15[3], &v38, a3);
    if (*((_QWORD *)&v38 + 1) != (_QWORD)v38)
    {
      LODWORD(v48[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15[3] + 16))(v15[3]);
      v18 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>((uint64_t)__p, (int)v48[0], v48);
      KB::CandidateCollection::operator=((uint64_t)(v18 + 24), (uint64_t)&v38);
    }
LABEL_18:
    v48[0] = (void **)&v42 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v41;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v39 + 1;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v48[0] = (void **)&v38;
    std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](v48);
    v15 = (uint64_t *)*v15;
  }
  while (v15);
  if (*((_QWORD *)&v46 + 1) > 1uLL)
  {
    v19 = *(_DWORD *)(a1 + 120);
    v20 = a1;
    v21 = a2;
    goto LABEL_68;
  }
LABEL_67:
  v20 = a1;
  v21 = a2;
  v19 = 0;
LABEL_68:
  TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(v20, (uint64_t)__p, v21, v19, 0);
LABEL_69:
  v35 = (void **)v46;
  if ((_QWORD)v46)
  {
    do
    {
      v36 = (void **)*v35;
      std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(v35 + 2);
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = __p[0];
  __p[0] = 0;
  if (v37)
    operator delete(v37);
}

void TI::CP::TIPathRecognizerEnsemble::text_accepted_from_UI(TI::CP::TIPathRecognizerEnsemble *this, const KB::String *a2, const KB::String *a3, uint64_t a4, uint64_t a5)
{
  uint64_t **i;
  unsigned int v11;
  uint64_t v12;

  for (i = (uint64_t **)*((_QWORD *)this + 4); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, const KB::String *, const KB::String *, uint64_t, uint64_t))(*i[3] + 88))(i[3], a2, a3, a4, a5);
  v11 = *((unsigned __int16 *)a2 + 2);
  if (!*((_WORD *)a2 + 2))
  {
    KB::String::compute_length((unsigned __int16 *)a2);
    v11 = *((unsigned __int16 *)a2 + 2);
  }
  if (v11 > 2
    || (v12 = *((_QWORD *)this + 8)) != 0
    && (*(double (**)(uint64_t, const KB::String *, const KB::String *))(*(_QWORD *)v12 + 72))(v12, a2, a3) > *((double *)this + 14))
  {
    ++*((_DWORD *)this + 150);
  }
  TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(this);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::remove_text_usage(uint64_t this, const KB::String *a2)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 32); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::String *))(*i[3] + 96))(i[3], a2);
  return this;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::store_shapes(uint64_t this)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 32); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[3] + 104))(i[3]);
  return this;
}

void TI::CP::TIPathRecognizerEnsemble::set_candidate_refinery(uint64_t a1, uint64_t *a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v4 = i[3];
    v5 = (std::__shared_weak_count *)a2[1];
    v11 = *a2;
    v12 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 112))(v4, &v11);
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

uint64_t TI::CP::TIPathRecognizerEnsemble::set_context(uint64_t this, const KB::LanguageModelContext *a2)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 32); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::LanguageModelContext *))(*i[3] + 120))(i[3], a2);
  return this;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::set_input_stem(uint64_t this, const KB::String *a2)
{
  uint64_t **i;

  for (i = *(uint64_t ***)(this + 32); i; i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *, const KB::String *))(*i[3] + 128))(i[3], a2);
  return this;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::usage_count(TI::CP::TIPathRecognizerEnsemble *this)
{
  return *((unsigned int *)this + 150);
}

uint64_t TI::CP::TIPathRecognizerEnsemble::remove_shapes_older_than(TI::CP::TIPathRecognizerEnsemble *this, double a2)
{
  uint64_t **v2;
  uint64_t v4;

  v2 = (uint64_t **)*((_QWORD *)this + 4);
  if (!v2)
    return 1;
  LODWORD(v4) = 1;
  do
  {
    v4 = v4 & (*(unsigned int (**)(uint64_t *, double))(*v2[3] + 144))(v2[3], a2);
    v2 = (uint64_t **)*v2;
  }
  while (v2);
  return v4;
}

void TI::CP::TIPathRecognizerEnsemble::key_layout_did_update(TI::Favonius::KeyboardLayout **this)
{
  double v2;
  TI::Favonius::KeyboardLayout *i;
  int v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = TI::Favonius::KeyboardLayout::median_key_half_width(this[1]);
  *((double *)this + 13) = v2;
  *((double *)this + 14) = v2 * 6.0;
  for (i = this[4]; i; i = *(TI::Favonius::KeyboardLayout **)i)
  {
    v4 = *((_DWORD *)i + 4);
    if (!v4 || v4 == 1 && *((_DWORD *)this + 20) == -1)
    {
      v5 = (_QWORD *)*((_QWORD *)i + 3);
      v6 = (unsigned int *)this[1];
      if (v6)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        TI::CP::TIPathRecognizerInterface::set_key_layout(v5, v6);
        WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v6);
      }
      else
      {
        TI::CP::TIPathRecognizerInterface::set_key_layout(v5, 0);
      }
    }
  }
}

void TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed(TI::CP::TIPathRecognizerEnsemble *this)
{
  int v2;
  uint64_t v3;
  unsigned __int8 v4;
  int AppBooleanValue;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  Boolean keyExistsAndHasValidFormat[32];
  unsigned int *v21;

  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((_QWORD *)this + 2, 1))
  {
    return;
  }
  if ((*((_DWORD *)this + 55) & 2) == 0)
    return;
  v2 = *((_DWORD *)this + 55) & 5;
  if (v2)
  {
    if (*((_DWORD *)this + 150) < *((_DWORD *)this + 53))
      return;
  }
  if (!*((_BYTE *)this + 216))
  {
    v3 = *((_QWORD *)this + 1);
LABEL_11:
    TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed((uint64_t)this, (uint64_t)this + 224, (const KB::String *)(v3 + 208));
    goto LABEL_12;
  }
  if (!v2 || !*((_QWORD *)this + 5))
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      goto LABEL_11;
  }
LABEL_12:
  v4 = atomic_load((unsigned __int8 *)this + 632);
  if ((v4 & 1) != 0
    || (keyExistsAndHasValidFormat[0] = 0,
        AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("kbForceCPMLLan"), CFSTR("com.apple.keyboard"), keyExistsAndHasValidFormat), keyExistsAndHasValidFormat[0])&& AppBooleanValue)
  {
    v6 = (std::__shared_weak_count *)operator new(0x138uLL);
    v7 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1025F8;
    v9 = &v6[1].__vftable;
    v10 = (unsigned int *)*((_QWORD *)this + 60);
    v21 = v10;
    if (v10)
    {
      v11 = v10 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    keyExistsAndHasValidFormat[0] = 0;
    keyExistsAndHasValidFormat[24] = 0;
    TI::TIInputRecognizer::TIInputRecognizer((uint64_t)&v6[1], 0, (uint64_t *)&v21, (__int128 *)this + 14, (__int128 *)keyExistsAndHasValidFormat);
    if (v21)
    {
      v13 = v21 + 2;
      v14 = atomic_load(v21 + 2);
      if (v14 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v21 + 40))();
      }
      else
      {
        do
          v15 = __ldaxr(v13);
        while (__stlxr(v15 - 1, v13));
      }
    }
    v19[0] = v9;
    v19[1] = v7;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    TI::CP::TIPathRecognizerEnsemble::add_recognizer((uint64_t)this, v19);
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    TI::CP::TIPathRecognizerEnsemble::normalize_weights(this);
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t TI::CP::TIPathRecognizerEnsemble::update_ml_supports_language_layout_if_needed(uint64_t result, uint64_t a2, const KB::String *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;

  v3 = (unsigned __int8 *)(result + 632);
  if (!*(_BYTE *)(result + 216))
    goto LABEL_5;
  v4 = atomic_load(v3);
  if ((v4 & 1) == 0)
  {
    v5 = (unsigned __int8 *)(result + 633);
    v6 = atomic_load((unsigned __int8 *)(result + 633));
    if ((v6 & 1) == 0)
    {
      result = TI::TIInputRecognizer::is_language_and_layout_supported(a2, a3);
      atomic_store(result, v3);
      v3 = v5;
LABEL_5:
      atomic_store(1u, v3);
    }
  }
  return result;
}

void TI::CP::TIPathRecognizerEnsemble::add_recognizer(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t *v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  void *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  unsigned int v33;
  _QWORD v34[2];
  char v35;

  v5 = (uint64_t *)(a1 + 16);
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v7 = v6;
  v8 = v6;
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v9 <= v6)
        v2 = v6 % v9;
    }
    else
    {
      v2 = (v9 - 1) & v6;
    }
    v11 = *(void ***)(*v5 + 8 * v2);
    if (v11)
    {
      for (i = *v11; i; i = *(void **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v6)
        {
          if (*((_DWORD *)i + 4) == v6)
            goto LABEL_40;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v2)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 32);
  i = operator new(0x28uLL);
  v34[1] = a1 + 32;
  *((_QWORD *)i + 1) = v8;
  *((_DWORD *)i + 4) = v7;
  *((_QWORD *)i + 3) = 0;
  *((_QWORD *)i + 4) = 0;
  v35 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v16 = *(float *)(a1 + 48);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v5, v20);
    v9 = *(_QWORD *)(a1 + 24);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v21 = *v5;
  v22 = *(_QWORD **)(*v5 + 8 * v2);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v14;
  *v14 = i;
  *(_QWORD *)(v21 + 8 * v2) = v14;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*v5 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  v34[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>>>>::reset[abi:nn180100]((uint64_t)v34);
LABEL_40:
  v25 = *a2;
  v24 = a2[1];
  if (v24)
  {
    v26 = (unint64_t *)(v24 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)i + 4);
  *((_QWORD *)i + 3) = v25;
  *((_QWORD *)i + 4) = v24;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *(unsigned int **)(a1 + 8);
  if (v31)
  {
    v32 = (_QWORD *)*a2;
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 + 1, v31));
    TI::CP::TIPathRecognizerInterface::set_key_layout(v32, v31);
    WTF::RefCounted<TI::Favonius::KeyboardLayout>::deref((uint64_t)v31);
  }
}

uint64_t *TI::CP::TIPathRecognizerEnsemble::normalize_weights(TI::CP::TIPathRecognizerEnsemble *this)
{
  _QWORD *v2;
  double v3;
  uint64_t *result;
  uint64_t i;

  v2 = (_QWORD *)((char *)this + 16);
  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((_QWORD *)this + 2, 0))
  {
    v3 = *((double *)this + 16) + 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  if (std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(v2, 1))
  {
    v3 = v3 + *((double *)this + 17);
  }
  result = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>(v2, 2);
  if (result)
    v3 = v3 + *((double *)this + 18);
  if (v3 > 0.0)
  {
    for (i = 0; i != 24; i += 8)
      *(double *)((char *)this + i + 128) = *(double *)((char *)this + i + 128) / v3;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<language_modeling::v1::LanguageModel>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<TI::TIInputRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1025F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::TIInputRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1025F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::TIInputRecognizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::TIPathRecognizerEnsemble::combine_candidates_from_sources(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  float32x2_t *v7;
  TI::ConfidenceModel *v8;
  unint64_t v9;
  uint64_t *v10;
  KB::Candidate *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  int v23;
  double v24;
  uint64_t v25;
  double v26;
  float v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  const KB::Candidate *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  uint64_t v39;
  const __CFDictionary *v40;
  CFIndex Count;
  CFIndex v42;
  void *v43;
  void *v44;
  uint64_t i;
  uint64_t v46;
  float v47;
  KB::String *v48;
  unsigned int v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  uint64_t **v53;
  uint64_t **v54;
  unint64_t v55;
  _QWORD *v56;
  float v57;
  _BOOL8 v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  float v82;
  _QWORD *v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint8x8_t v87;
  void **v88;
  _QWORD *v89;
  unint64_t v90;
  float v91;
  float v92;
  _BOOL8 v93;
  unint64_t v94;
  unint64_t v95;
  size_t v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  BOOL v100;
  float *v101;
  const __CFAllocator *v102;
  float v103;
  float v104;
  KB::String *v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  uint8x8_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t **v112;
  uint64_t **v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t **v120;
  uint64_t *j;
  unint64_t v122;
  _QWORD *v123;
  int v124;
  float v125;
  _BOOL8 v126;
  unint64_t v127;
  unint64_t v128;
  size_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  __CFDictionary *Mutable;
  uint64_t *k;
  __CFDictionary *v135;
  unint64_t v136;
  CFNumberRef v137;
  CFNumberRef v138;
  void **v139;
  const void *v140;
  CFNumberRef v141;
  KB::Candidate *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  KB::Candidate *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  KB::Candidate *v158;
  unsigned int v159;
  const KB::Candidate *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  KB::Candidate *v165;
  BOOL v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  KB::Candidate *v171;
  unsigned int v172;
  const KB::Candidate *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  KB::Candidate *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  KB::Candidate *v184;
  _QWORD *v185;
  BOOL v186;
  _QWORD *v187;
  _QWORD *v188;
  float *v189;
  KB::String *v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  uint8x8_t v194;
  unint64_t v195;
  unsigned int **v196;
  unsigned int *m;
  unint64_t v198;
  float v199;
  _BOOL8 v200;
  unint64_t v201;
  unint64_t v202;
  size_t v203;
  _QWORD *v204;
  unsigned int **v205;
  unint64_t v206;
  KB::Candidate *v207;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  KB::Candidate *v215;
  _QWORD *v216;
  _QWORD *v217;
  void *v218;
  void *v219;
  KB::Candidate *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t *v226;
  char v227;
  int v229;
  void *__p[2];
  char v231;
  void *v232[2];
  void *v233[2];
  float v234;
  __int128 v235;
  __int128 v236;
  float v237;
  double valuePtr;
  void *v239;
  char *v240;
  void *v241;
  _BYTE v242[16];
  __int128 v243;
  __int128 v244;
  uint64_t *v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if ((a4 & 2) == 0)
    {
      if ((a4 & 8) == 0)
      {
        v235 = 0uLL;
        v236 = 0uLL;
        v237 = 1.0;
        *(_OWORD *)v232 = 0uLL;
        *(_OWORD *)v233 = 0uLL;
        v234 = 1.0;
        v7 = *(float32x2_t **)(a2 + 16);
        if (v7)
        {
          v224 = 0;
          v8 = (TI::ConfidenceModel *)(a1 + 604);
          v9 = 126;
          do
          {
            v10 = (uint64_t *)v7[3];
            v11 = (KB::Candidate *)v7[4];
            v12 = (uint64_t *)&v7[3];
            v13 = 126 - 2 * __clz(0x1CAC083126E978D5 * ((v11 - (KB::Candidate *)v10) >> 3));
            if (v11 == (KB::Candidate *)v10)
              v14 = 0;
            else
              v14 = v13;
            std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>(v10, v11, v14, 1);
            v15 = *v12;
            v16 = v7[4];
            if (*v12 != *(_QWORD *)&v16)
            {
              v17 = *(double *)(a1 + 8 * v7[2].u32[0] + 152);
              do
              {
                *(float32x4_t *)(v15 + 744) = vmulq_n_f32(*(float32x4_t *)(v15 + 744), v17);
                v15 += 1000;
              }
              while (v15 != *(_QWORD *)&v16);
            }
            KB::CandidateCollection::normalize_scores((float32x2_t **)&v7[3]);
            LODWORD(v243) = 0x7FFFFFFF;
            if (KB::CandidateCollection::contains_secondary_language_candidates((KB::CandidateCollection *)&v7[3], (int *)&v243, 6u))
            {
              TI::ConfidenceModel::update_confidence_for_candidates(v8, (KB::CandidateCollection *)&v7[3]);
              v224 |= (int)v243 < 4;
            }
            v7 = (float32x2_t *)*v7;
          }
          while (v7);
          v18 = *(uint64_t **)(a2 + 16);
          if (v18)
          {
            v223 = *(unsigned int *)(a2 + 24);
            v227 = 1;
            do
            {
              v19 = a1 + 8 * *((unsigned int *)v18 + 4);
              v20 = *(double *)(v19 + 128);
              v21 = *(_QWORD *)(a1 + 480);
              if (v21)
              {
                v22 = *(double *)(v19 + 176);
                if (*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21))
                {
                  v23 = *(unsigned __int8 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 480)
                                                                                          + 48))(*(_QWORD *)(a1 + 480))
                                           + 65);
                  v24 = (v224 & 1) != 0 ? v22 : v20;
                  if (v23)
                    v20 = v24;
                }
              }
              v243 = 0u;
              v244 = 0u;
              LODWORD(v245) = 1065353216;
              v25 = v18[3];
              if (v18[4] != v25)
              {
                if (v223 == 1)
                  v26 = 1.0;
                else
                  v26 = v20;
                v27 = v26;
                v28 = logf(v27);
                v29 = 0;
                v30 = 0;
                v226 = v18;
                while (1)
                {
                  v31 = (const KB::Candidate *)(v25 + 1000 * v29);
                  TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate(v31, (uint64_t)&v240);
                  if (std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v243, *((unint64_t *)&v243 + 1), &v240))
                  {
                    v32 = *(_QWORD *)v31;
                    if (*(_QWORD *)v31)
                    {
                      v33 = 240 * v32;
                      v34 = *((_QWORD *)v31 + 1);
                      while ((*(_BYTE *)(v34 + 106) & 1) == 0)
                      {
                        v34 += 240;
                        v33 -= 240;
                        if (!v33)
                          goto LABEL_160;
                      }
                    }
                    else
                    {
                      v34 = *((_QWORD *)v31 + 1);
                    }
                    if (v34 == *((_QWORD *)v31 + 1) + 240 * v32)
                      goto LABEL_160;
                  }
                  v229 = v30;
                  if ((v227 & 1) != 0)
                    break;
                  v35 = (float *)std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v235, *((unint64_t *)&v235 + 1), &v240);
                  if (!v35)
                    break;
                  v36 = v35;
                  v37 = v35[198];
                  v38 = v35[199];
                  v39 = v25 + 1000 * v29;
                  v40 = *(const __CFDictionary **)(v39 + 984);
                  if (v40)
                  {
                    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v39 + 984));
                    if (Count >= 1)
                    {
                      v42 = Count;
                      if ((unint64_t)Count >> 61)
                        goto LABEL_410;
                      v9 = (unint64_t)(v36 + 12);
                      v43 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(Count);
                      bzero(v43, 8 * v42);
                      v44 = operator new(8 * v42);
                      bzero(v44, 8 * v42);
                      CFDictionaryGetKeysAndValues(v40, (const void **)v43, (const void **)v44);
                      for (i = 0; i != v42; ++i)
                        KB::Candidate::add_sources_info((KB::Candidate *)v9, *((const __CFString **)v43 + i), *((const __CFDictionary **)v44 + i));
                      operator delete(v44);
                      v18 = v226;
                      if (v43)
                        operator delete(v43);
                    }
                  }
                  v46 = v25 + 1000 * v29;
                  v47 = v28 + *(float *)(v46 + 744);
                  if (v37 == -INFINITY)
                  {
                    LODWORD(v30) = v229;
                  }
                  else
                  {
                    LODWORD(v30) = v229;
                    if (v47 == -INFINITY)
                    {
                      v47 = v37;
                    }
                    else
                    {
                      if (v37 >= v47)
                        v68 = v37;
                      else
                        v68 = v28 + *(float *)(v46 + 744);
                      if (v37 >= v47)
                        v69 = v28 + *(float *)(v46 + 744);
                      else
                        v69 = v37;
                      v70 = expf(v69 - v68);
                      v47 = v68 + log1pf(v70);
                    }
                  }
                  v66 = (float *)(v46 + 744);
                  v71 = v25 + 1000 * v29;
                  v67 = v28 + *(float *)(v71 + 748);
                  if (v38 != -INFINITY)
                  {
                    if (v67 == -INFINITY)
                    {
                      v67 = v38;
                    }
                    else
                    {
                      if (v38 >= v67)
                        v72 = v38;
                      else
                        v72 = v28 + *(float *)(v71 + 748);
                      if (v38 >= v67)
                        v73 = v28 + *(float *)(v71 + 748);
                      else
                        v73 = v38;
                      v74 = expf(v73 - v72);
                      v67 = v72 + log1pf(v74);
                    }
                  }
LABEL_110:
                  valuePtr = COERCE_DOUBLE(&v240);
                  v75 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t)&v235, &v240, (const KB::String **)&valuePtr);
                  *((float *)v75 + 198) = v47;
                  v76 = v75[100];
                  v77 = *((_DWORD *)v75 + 202);
                  valuePtr = *(double *)((char *)v75 + 812);
                  LODWORD(v239) = *((_DWORD *)v75 + 205);
                  if (v26 == 1.0)
                    v77 = *(_DWORD *)(v25 + 1000 * v29 + 760);
                  v78 = *(_QWORD *)v31;
                  if (*(_QWORD *)v31)
                  {
                    v79 = 240 * v78;
                    v80 = *((_QWORD *)v31 + 1);
                    while ((*(_BYTE *)(v80 + 106) & 1) == 0)
                    {
                      v80 += 240;
                      v79 -= 240;
                      if (!v79)
                        goto LABEL_120;
                    }
                  }
                  else
                  {
                    v80 = *((_QWORD *)v31 + 1);
                  }
                  if (v80 != *((_QWORD *)v31 + 1) + 240 * v78)
                    *(_DWORD *)(v75[7] + 104) |= 0x10000u;
LABEL_120:
                  *((float *)v75 + 199) = v67;
                  v75[100] = v76;
                  *((_DWORD *)v75 + 202) = v77;
                  *(double *)((char *)v75 + 812) = valuePtr;
                  *((_DWORD *)v75 + 205) = (_DWORD)v239;
                  __p[0] = &v240;
                  v81 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t)&v243, &v240, (const KB::String **)__p);
                  KB::Candidate::operator=((uint64_t)(v81 + 6), v25 + 1000 * v29);
                  if (a5 < 1)
                    goto LABEL_160;
                  v82 = expf(*v66);
                  __p[0] = &v240;
                  v83 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t *)v232, &v240, (const KB::String **)__p);
                  v84 = v83 + 6;
                  v85 = *((int *)v18 + 4);
                  v86 = v83[7];
                  if (v86)
                  {
                    v87 = (uint8x8_t)vcnt_s8((int8x8_t)v86);
                    v87.i16[0] = vaddlv_u8(v87);
                    if (v87.u32[0] > 1uLL)
                    {
                      v9 = *((int *)v18 + 4);
                      if (v86 <= v85)
                        v9 = v85 % v86;
                    }
                    else
                    {
                      v9 = (v86 - 1) & v85;
                    }
                    v88 = *(void ***)(*v84 + 8 * v9);
                    if (v88)
                    {
                      v89 = *v88;
                      if (*v88)
                      {
                        do
                        {
                          v90 = v89[1];
                          if (v90 == v85)
                          {
                            if (*((_DWORD *)v89 + 4) == (_DWORD)v85)
                              goto LABEL_159;
                          }
                          else
                          {
                            if (v87.u32[0] > 1uLL)
                            {
                              if (v90 >= v86)
                                v90 %= v86;
                            }
                            else
                            {
                              v90 &= v86 - 1;
                            }
                            if (v90 != v9)
                              break;
                          }
                          v89 = (_QWORD *)*v89;
                        }
                        while (v89);
                      }
                    }
                  }
                  v89 = operator new(0x20uLL);
                  *v89 = 0;
                  v89[1] = v85;
                  *((_DWORD *)v89 + 4) = *((_DWORD *)v18 + 4);
                  *(_QWORD *)((char *)v89 + 20) = 0;
                  v91 = (float)(unint64_t)(v83[9] + 1);
                  v92 = *((float *)v83 + 20);
                  if (!v86 || (float)(v92 * (float)v86) < v91)
                  {
                    v93 = (v86 & (v86 - 1)) != 0;
                    if (v86 < 3)
                      v93 = 1;
                    v94 = v93 | (2 * v86);
                    v95 = vcvtps_u32_f32(v91 / v92);
                    if (v94 <= v95)
                      v96 = v95;
                    else
                      v96 = v94;
                    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v84, v96);
                    v86 = v83[7];
                    if ((v86 & (v86 - 1)) != 0)
                    {
                      if (v86 <= v85)
                        v9 = v85 % v86;
                      else
                        v9 = v85;
                    }
                    else
                    {
                      v9 = (v86 - 1) & v85;
                    }
                  }
                  v97 = *v84;
                  v98 = *(_QWORD **)(*v84 + 8 * v9);
                  if (v98)
                  {
                    *v89 = *v98;
                  }
                  else
                  {
                    *v89 = v83[8];
                    v83[8] = v89;
                    *(_QWORD *)(v97 + 8 * v9) = v83 + 8;
                    if (!*v89)
                      goto LABEL_158;
                    v99 = *(_QWORD *)(*v89 + 8);
                    if ((v86 & (v86 - 1)) != 0)
                    {
                      if (v99 >= v86)
                        v99 %= v86;
                    }
                    else
                    {
                      v99 &= v86 - 1;
                    }
                    v98 = (_QWORD *)(*v84 + 8 * v99);
                  }
                  *v98 = v89;
LABEL_158:
                  ++v83[9];
LABEL_159:
                  *((_DWORD *)v89 + 5) = v30;
                  *((float *)v89 + 6) = v82;
LABEL_160:
                  if (v241)
                    v100 = BYTE6(v240) == 1;
                  else
                    v100 = 0;
                  if (v100)
                    free(v241);
                  v29 = (v30 + 1);
                  v25 = v18[3];
                  v30 = v29;
                  if (0x1CAC083126E978D5 * ((v18[4] - v25) >> 3) <= v29)
                    goto LABEL_167;
                }
                if (v241)
                  v48 = (KB::String *)v241;
                else
                  v48 = (KB::String *)v242;
                v49 = KB::String::hash(v48, (const char *)(unsigned __int16)v240);
                v9 = v49;
                v50 = *((_QWORD *)&v235 + 1);
                if (*((_QWORD *)&v235 + 1))
                {
                  v51 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v235 + 8));
                  v51.i16[0] = vaddlv_u8(v51);
                  v52 = v51.u32[0];
                  if (v51.u32[0] > 1uLL)
                  {
                    v30 = v49;
                    if (*((_QWORD *)&v235 + 1) <= (unint64_t)v49)
                      v30 = (unint64_t)v49 % *((_QWORD *)&v235 + 1);
                  }
                  else
                  {
                    v30 = (DWORD2(v235) - 1) & v49;
                  }
                  v53 = *(uint64_t ***)(v235 + 8 * v30);
                  if (v53)
                  {
                    v54 = (uint64_t **)*v53;
                    if (*v53)
                    {
                      do
                      {
                        v55 = (unint64_t)v54[1];
                        if (v55 == v9)
                        {
                          if (v54 + 2 == (uint64_t **)&v240
                            || KB::String::equal((KB::String *)(v54 + 2), (const KB::String *)&v240, 1))
                          {
                            goto LABEL_92;
                          }
                        }
                        else
                        {
                          if (v52 > 1)
                          {
                            if (v55 >= v50)
                              v55 %= v50;
                          }
                          else
                          {
                            v55 &= v50 - 1;
                          }
                          if (v55 != v30)
                            break;
                        }
                        v54 = (uint64_t **)*v54;
                      }
                      while (v54);
                    }
                  }
                }
                v56 = operator new(0x418uLL);
                *v56 = 0;
                v56[1] = v9;
                KB::String::String((KB::String *)(v56 + 2), (const KB::String *)&v240);
                KB::Candidate::Candidate((KB::Candidate *)(v56 + 6), (const KB::Candidate *)(v25 + 1000 * v29));
                v57 = (float)(unint64_t)(*((_QWORD *)&v236 + 1) + 1);
                if (!v50 || (float)(v237 * (float)v50) < v57)
                {
                  v58 = (v50 & (v50 - 1)) != 0;
                  if (v50 < 3)
                    v58 = 1;
                  v59 = v58 | (2 * v50);
                  v60 = vcvtps_u32_f32(v57 / v237);
                  if (v59 <= v60)
                    v61 = v60;
                  else
                    v61 = v59;
                  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v235, v61);
                  v50 = *((_QWORD *)&v235 + 1);
                  if ((*((_QWORD *)&v235 + 1) & (*((_QWORD *)&v235 + 1) - 1)) != 0)
                  {
                    if (*((_QWORD *)&v235 + 1) <= v9)
                      v30 = v9 % *((_QWORD *)&v235 + 1);
                    else
                      v30 = v9;
                  }
                  else
                  {
                    v30 = (DWORD2(v235) - 1) & v9;
                  }
                }
                v62 = v235;
                v63 = *(_QWORD **)(v235 + 8 * v30);
                if (v63)
                {
                  *v56 = *v63;
                }
                else
                {
                  *v56 = v236;
                  *(_QWORD *)&v236 = v56;
                  *(_QWORD *)(v62 + 8 * v30) = &v236;
                  if (!*v56)
                    goto LABEL_91;
                  v64 = *(_QWORD *)(*v56 + 8);
                  if ((v50 & (v50 - 1)) != 0)
                  {
                    if (v64 >= v50)
                      v64 %= v50;
                  }
                  else
                  {
                    v64 &= v50 - 1;
                  }
                  v63 = (_QWORD *)(v235 + 8 * v64);
                }
                *v63 = v56;
LABEL_91:
                ++*((_QWORD *)&v236 + 1);
LABEL_92:
                v65 = v25 + 1000 * v29;
                v66 = (float *)(v65 + 744);
                v47 = v28 + *(float *)(v65 + 744);
                v67 = v28 + *(float *)(v65 + 748);
                v18 = v226;
                LODWORD(v30) = v229;
                goto LABEL_110;
              }
LABEL_167:
              std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table((uint64_t)&v243);
              v227 = 0;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
            v101 = (float *)v236;
            if ((_QWORD)v236)
            {
              v102 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              do
              {
                TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate((const KB::Candidate *)(v101 + 12), (uint64_t)&v240);
                v103 = v101[199];
                if (fabsf(v103) == INFINITY)
                  v104 = v101[200];
                else
                  v104 = (float)(v101[198] - v103) / v101[202];
                v101[200] = v104;
                v101[201] = 0.0;
                if (a5 < 1)
                  goto LABEL_259;
                v105 = (KB::String *)(v241 ? v241 : v242);
                v106 = KB::String::hash(v105, (const char *)(unsigned __int16)v240);
                v107 = (unint64_t)v232[1];
                if (!v232[1])
                  goto LABEL_259;
                v108 = v106;
                v109 = (uint8x8_t)vcnt_s8((int8x8_t)v232[1]);
                v109.i16[0] = vaddlv_u8(v109);
                v110 = v109.u32[0];
                if (v109.u32[0] > 1uLL)
                {
                  v111 = v106;
                  if (v232[1] <= (void *)v106)
                    v111 = v106 % (unint64_t)v232[1];
                }
                else
                {
                  v111 = (LODWORD(v232[1]) - 1) & v106;
                }
                v112 = (uint64_t **)*((_QWORD *)v232[0] + v111);
                if (!v112)
                  goto LABEL_259;
                v113 = (uint64_t **)*v112;
                if (!*v112)
                  goto LABEL_259;
                while (1)
                {
                  v114 = (unint64_t)v113[1];
                  if (v114 == v108)
                    break;
                  if (v110 > 1)
                  {
                    if (v114 >= v107)
                      v114 %= v107;
                  }
                  else
                  {
                    v114 &= v107 - 1;
                  }
                  if (v114 != v111)
                    goto LABEL_259;
LABEL_193:
                  v113 = (uint64_t **)*v113;
                  if (!v113)
                    goto LABEL_259;
                }
                if (v113 + 2 != (uint64_t **)&v240
                  && !KB::String::equal((KB::String *)(v113 + 2), (const KB::String *)&v240, 1))
                {
                  goto LABEL_193;
                }
                valuePtr = COERCE_DOUBLE(&v240);
                v115 = std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>((uint64_t *)v232, &v240, (const KB::String **)&valuePtr);
                v243 = 0u;
                v244 = 0u;
                LODWORD(v245) = *((_DWORD *)v115 + 20);
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v243, v115[7]);
                v116 = (uint64_t *)v115[8];
                if (v116)
                {
                  v117 = *((_QWORD *)&v243 + 1);
                  do
                  {
                    v118 = *((int *)v116 + 4);
                    if (v117)
                    {
                      v119 = (uint8x8_t)vcnt_s8((int8x8_t)v117);
                      v119.i16[0] = vaddlv_u8(v119);
                      if (v119.u32[0] > 1uLL)
                      {
                        v107 = *((int *)v116 + 4);
                        if (v117 <= v118)
                          v107 = v118 % v117;
                      }
                      else
                      {
                        v107 = (v117 - 1) & v118;
                      }
                      v120 = *(uint64_t ***)(v243 + 8 * v107);
                      if (v120)
                      {
                        for (j = *v120; j; j = (uint64_t *)*j)
                        {
                          v122 = j[1];
                          if (v122 == v118)
                          {
                            if (*((_DWORD *)j + 4) == (_DWORD)v118)
                              goto LABEL_235;
                          }
                          else
                          {
                            if (v119.u32[0] > 1uLL)
                            {
                              if (v122 >= v117)
                                v122 %= v117;
                            }
                            else
                            {
                              v122 &= v117 - 1;
                            }
                            if (v122 != v107)
                              break;
                          }
                        }
                      }
                    }
                    v123 = operator new(0x20uLL);
                    *v123 = 0;
                    v123[1] = v118;
                    v124 = *((_DWORD *)v116 + 6);
                    v123[2] = v116[2];
                    *((_DWORD *)v123 + 6) = v124;
                    v125 = (float)(unint64_t)(*((_QWORD *)&v244 + 1) + 1);
                    if (!v117 || (float)(*(float *)&v245 * (float)v117) < v125)
                    {
                      v126 = (v117 & (v117 - 1)) != 0;
                      if (v117 < 3)
                        v126 = 1;
                      v127 = v126 | (2 * v117);
                      v128 = vcvtps_u32_f32(v125 / *(float *)&v245);
                      if (v127 <= v128)
                        v129 = v128;
                      else
                        v129 = v127;
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v243, v129);
                      v117 = *((_QWORD *)&v243 + 1);
                      if ((v117 & (v117 - 1)) != 0)
                      {
                        if (*((_QWORD *)&v243 + 1) <= v118)
                          v107 = v118 % *((_QWORD *)&v243 + 1);
                        else
                          v107 = v118;
                      }
                      else
                      {
                        v107 = (*((_QWORD *)&v243 + 1) - 1) & v118;
                      }
                    }
                    v130 = v243;
                    v131 = *(_QWORD **)(v243 + 8 * v107);
                    if (v131)
                    {
                      *v123 = *v131;
                    }
                    else
                    {
                      *v123 = v244;
                      *(_QWORD *)&v244 = v123;
                      *(_QWORD *)(v130 + 8 * v107) = &v244;
                      if (!*v123)
                        goto LABEL_234;
                      v132 = *(_QWORD *)(*v123 + 8);
                      if ((v117 & (v117 - 1)) != 0)
                      {
                        if (v132 >= v117)
                          v132 %= v117;
                      }
                      else
                      {
                        v132 &= v117 - 1;
                      }
                      v131 = (_QWORD *)(v243 + 8 * v132);
                    }
                    *v131 = v123;
LABEL_234:
                    ++*((_QWORD *)&v244 + 1);
LABEL_235:
                    v116 = (uint64_t *)*v116;
                  }
                  while (v116);
                }
                Mutable = CFDictionaryCreateMutable(v102, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                for (k = (uint64_t *)v244; k; k = (uint64_t *)*k)
                {
                  v135 = CFDictionaryCreateMutable(v102, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  LODWORD(v136) = *((_DWORD *)k + 5);
                  valuePtr = (double)v136;
                  v137 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                  CFDictionarySetValue(v135, CFSTR("cand_index"), v137);
                  if (v137)
                    CFRelease(v137);
                  valuePtr = *((float *)k + 6);
                  v138 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                  CFDictionarySetValue(v135, CFSTR("cand_omega"), v138);
                  if (v138)
                    CFRelease(v138);
                  std::string::basic_string[abi:nn180100]<0>(__p, off_1EA102620[*((int *)k + 4)]);
                  if (v231 >= 0)
                    v139 = __p;
                  else
                    v139 = (void **)__p[0];
                  KB::String::String((KB::String *)&valuePtr, (const char *)v139);
                  if (v231 < 0)
                    operator delete(__p[0]);
                  KB::cf_string_impl<KB::String>((CFStringRef *)__p, (unsigned __int16 *)&valuePtr);
                  v140 = __p[0];
                  CFDictionarySetValue(Mutable, __p[0], v135);
                  if (v140)
                    CFRelease(v140);
                  if (v239 && BYTE6(valuePtr) == 1)
                    free(v239);
                  if (v135)
                    CFRelease(v135);
                }
                valuePtr = expf(v101[198]);
                v141 = CFNumberCreate(v102, kCFNumberDoubleType, &valuePtr);
                CFDictionarySetValue(Mutable, CFSTR("ensemble_omega"), v141);
                if (v141)
                  CFRelease(v141);
                KB::Candidate::add_sources_info((KB::Candidate *)(v101 + 12), CFSTR("ensemble"), Mutable);
                if (Mutable)
                  CFRelease(Mutable);
                std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&v243);
LABEL_259:
                v142 = (KB::Candidate *)a3[1];
                v143 = a3[2];
                if ((unint64_t)v142 >= v143)
                {
                  v145 = 0x1CAC083126E978D5 * (((uint64_t)v142 - *a3) >> 3);
                  v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) > 0x4189374BC6A7EFLL)
                    goto LABEL_410;
                  v147 = 0x1CAC083126E978D5 * ((uint64_t)(v143 - *a3) >> 3);
                  if (2 * v147 > v146)
                    v146 = 2 * v147;
                  if (v147 >= 0x20C49BA5E353F7)
                    v148 = 0x4189374BC6A7EFLL;
                  else
                    v148 = v146;
                  v245 = a3 + 2;
                  if (v148)
                    v148 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v148);
                  else
                    v149 = 0;
                  v150 = (KB::Candidate *)(v148 + 1000 * v145);
                  *(_QWORD *)&v243 = v148;
                  *((_QWORD *)&v243 + 1) = v150;
                  *((_QWORD *)&v244 + 1) = v148 + 1000 * v149;
                  KB::Candidate::Candidate(v150, (const KB::Candidate *)(v101 + 12));
                  *(_QWORD *)&v244 = (char *)v150 + 1000;
                  std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
                  v144 = (char *)a3[1];
                  std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
                }
                else
                {
                  v144 = (char *)KB::Candidate::Candidate(v142, (const KB::Candidate *)(v101 + 12)) + 1000;
                }
                a3[1] = (uint64_t)v144;
                if (v241 && BYTE6(v240) == 1)
                  free(v241);
                v101 = *(float **)v101;
              }
              while (v101);
            }
          }
        }
        v151 = v233[0];
        if (v233[0])
        {
          do
          {
            v152 = v151;
            v151 = (_QWORD *)*v151;
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)(v152 + 6));
            v153 = (void *)v152[3];
            if (v153 && *((_BYTE *)v152 + 22) == 1)
              free(v153);
            operator delete(v152);
          }
          while (v151);
        }
        goto LABEL_403;
      }
      v235 = 0uLL;
      v236 = 0uLL;
      v237 = 1.0;
      *(_OWORD *)v232 = 0uLL;
      *(_OWORD *)v233 = 0uLL;
      v234 = 1.0;
      v179 = *(_QWORD **)(a2 + 16);
      if (!v179)
        goto LABEL_398;
      v180 = (unint64_t)&v243;
      do
      {
        v181 = v179[3];
        if (v179[4] != v181)
        {
          v182 = 0;
          v183 = 1;
          do
          {
            v184 = (KB::Candidate *)(v181 + 1000 * v182);
            KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
            v185 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(v235, *((unint64_t *)&v235 + 1), &v243);
            if (*((_QWORD *)&v243 + 1))
              v186 = BYTE6(v243) == 1;
            else
              v186 = 0;
            if (v186)
              free(*((void **)&v243 + 1));
            if (v185)
            {
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              v240 = (char *)&v243;
              v187 = std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v232, &v243, (KB::String **)&v240);
              ++*((_DWORD *)v187 + 12);
            }
            else
            {
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              v240 = (char *)&v243;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)v232, &v243, (KB::String **)&v240)+ 12) = 1;
              if (*((_QWORD *)&v243 + 1) && BYTE6(v243) == 1)
                free(*((void **)&v243 + 1));
              KB::Candidate::capitalized_string(v184, (uint64_t)&v243);
              v240 = (char *)&v243;
              v188 = std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>((uint64_t)&v235, &v243, (KB::String **)&v240);
              KB::Candidate::operator=((uint64_t)(v188 + 6), (uint64_t)v184);
            }
            if (*((_QWORD *)&v243 + 1) && BYTE6(v243) == 1)
              free(*((void **)&v243 + 1));
            v182 = v183;
            v181 = v179[3];
            v166 = 0x1CAC083126E978D5 * ((v179[4] - v181) >> 3) > (unint64_t)v183++;
          }
          while (v166);
        }
        v179 = (_QWORD *)*v179;
      }
      while (v179);
      v189 = (float *)v236;
      if (!(_QWORD)v236)
      {
LABEL_398:
        v216 = v233[0];
        if (v233[0])
        {
          do
          {
            v217 = v216;
            v216 = (_QWORD *)*v216;
            v218 = (void *)v217[3];
            if (v218 && *((_BYTE *)v217 + 22) == 1)
              free(v218);
            operator delete(v217);
          }
          while (v216);
        }
LABEL_403:
        v219 = v232[0];
        v232[0] = 0;
        if (v219)
          operator delete(v219);
        std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table((uint64_t)&v235);
        goto LABEL_406;
      }
      while (1)
      {
        if (*((_QWORD *)v189 + 3))
          v190 = (KB::String *)*((_QWORD *)v189 + 3);
        else
          v190 = (KB::String *)(v189 + 8);
        v191 = KB::String::hash(v190, (const char *)*((unsigned __int16 *)v189 + 8));
        v192 = v191;
        v193 = (unint64_t)v232[1];
        if (v232[1])
        {
          v194 = (uint8x8_t)vcnt_s8((int8x8_t)v232[1]);
          v194.i16[0] = vaddlv_u8(v194);
          v195 = v194.u32[0];
          if (v194.u32[0] > 1uLL)
          {
            v180 = v191;
            if (v232[1] <= (void *)v191)
              v180 = v191 % (unint64_t)v232[1];
          }
          else
          {
            v180 = (LODWORD(v232[1]) - 1) & v191;
          }
          v196 = (unsigned int **)*((_QWORD *)v232[0] + v180);
          if (v196)
          {
            for (m = *v196; m; m = *(unsigned int **)m)
            {
              v198 = *((_QWORD *)m + 1);
              if (v198 == v192)
              {
                if (m + 4 == (unsigned int *)(v189 + 4)
                  || KB::String::equal((KB::String *)(m + 4), (const KB::String *)(v189 + 4), 1))
                {
                  goto LABEL_383;
                }
              }
              else
              {
                if (v195 > 1)
                {
                  if (v198 >= v193)
                    v198 %= v193;
                }
                else
                {
                  v198 &= v193 - 1;
                }
                if (v198 != v180)
                  break;
              }
            }
          }
        }
        m = (unsigned int *)operator new(0x38uLL);
        *(_QWORD *)&v243 = m;
        *((_QWORD *)&v243 + 1) = v233;
        *(_QWORD *)m = 0;
        *((_QWORD *)m + 1) = v192;
        KB::String::String((KB::String *)(m + 4), (const KB::String *)(v189 + 4));
        m[12] = 0;
        LOBYTE(v244) = 1;
        v199 = (float)((unint64_t)v233[1] + 1);
        if (!v193 || (float)(v234 * (float)v193) < v199)
        {
          v200 = (v193 & (v193 - 1)) != 0;
          if (v193 < 3)
            v200 = 1;
          v201 = v200 | (2 * v193);
          v202 = vcvtps_u32_f32(v199 / v234);
          if (v201 <= v202)
            v203 = v202;
          else
            v203 = v201;
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)v232, v203);
          v193 = (unint64_t)v232[1];
          if (((unint64_t)v232[1] & ((unint64_t)v232[1] - 1)) != 0)
          {
            if (v232[1] <= (void *)v192)
              v180 = v192 % (unint64_t)v232[1];
            else
              v180 = v192;
          }
          else
          {
            v180 = (LODWORD(v232[1]) - 1) & v192;
          }
        }
        v204 = v232[0];
        v205 = (unsigned int **)*((_QWORD *)v232[0] + v180);
        if (v205)
        {
          *(_QWORD *)m = *v205;
        }
        else
        {
          *(void **)m = v233[0];
          v233[0] = m;
          v204[v180] = v233;
          if (!*(_QWORD *)m)
            goto LABEL_382;
          v206 = *(_QWORD *)(*(_QWORD *)m + 8);
          if ((v193 & (v193 - 1)) != 0)
          {
            if (v206 >= v193)
              v206 %= v193;
          }
          else
          {
            v206 &= v193 - 1;
          }
          v205 = (unsigned int **)((char *)v232[0] + 8 * v206);
        }
        *v205 = m;
LABEL_382:
        *(_QWORD *)&v243 = 0;
        ++v233[1];
        std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100]((uint64_t *)&v243);
LABEL_383:
        v189[198] = logf((float)m[12]);
        v207 = (KB::Candidate *)a3[1];
        v208 = a3[2];
        if ((unint64_t)v207 >= v208)
        {
          v210 = 0x1CAC083126E978D5 * (((uint64_t)v207 - *a3) >> 3);
          v211 = v210 + 1;
          if ((unint64_t)(v210 + 1) > 0x4189374BC6A7EFLL)
            goto LABEL_410;
          v212 = 0x1CAC083126E978D5 * ((uint64_t)(v208 - *a3) >> 3);
          if (2 * v212 > v211)
            v211 = 2 * v212;
          if (v212 >= 0x20C49BA5E353F7)
            v213 = 0x4189374BC6A7EFLL;
          else
            v213 = v211;
          v245 = a3 + 2;
          if (v213)
            v213 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v213);
          else
            v214 = 0;
          v215 = (KB::Candidate *)(v213 + 1000 * v210);
          *(_QWORD *)&v243 = v213;
          *((_QWORD *)&v243 + 1) = v215;
          *((_QWORD *)&v244 + 1) = v213 + 1000 * v214;
          KB::Candidate::Candidate(v215, (const KB::Candidate *)(v189 + 12));
          *(_QWORD *)&v244 = (char *)v215 + 1000;
          std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
          v209 = (char *)a3[1];
          std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
        }
        else
        {
          v209 = (char *)KB::Candidate::Candidate(v207, (const KB::Candidate *)(v189 + 12)) + 1000;
        }
        a3[1] = (uint64_t)v209;
        v189 = *(float **)v189;
        if (!v189)
          goto LABEL_398;
      }
    }
    v167 = *(_QWORD **)(a2 + 16);
    if (v167)
    {
      v168 = a3 + 2;
      do
      {
        v169 = v167[3];
        if (v167[4] != v169)
        {
          v170 = 0;
          v171 = (KB::Candidate *)a3[1];
          v172 = 1;
          do
          {
            v173 = (const KB::Candidate *)(v169 + 1000 * v170);
            *((_DWORD *)v173 + 186) = 0;
            if ((unint64_t)v171 >= *v168)
            {
              v174 = 0x1CAC083126E978D5 * (((uint64_t)v171 - *a3) >> 3);
              v175 = v174 + 1;
              if ((unint64_t)(v174 + 1) > 0x4189374BC6A7EFLL)
                goto LABEL_410;
              if (0x395810624DD2F1AALL * ((*v168 - *a3) >> 3) > v175)
                v175 = 0x395810624DD2F1AALL * ((*v168 - *a3) >> 3);
              if ((unint64_t)(0x1CAC083126E978D5 * ((*v168 - *a3) >> 3)) >= 0x20C49BA5E353F7)
                v176 = 0x4189374BC6A7EFLL;
              else
                v176 = v175;
              v245 = a3 + 2;
              if (v176)
                v176 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v176);
              else
                v177 = 0;
              v178 = (KB::Candidate *)(v176 + 1000 * v174);
              *(_QWORD *)&v243 = v176;
              *((_QWORD *)&v243 + 1) = v178;
              *((_QWORD *)&v244 + 1) = v176 + 1000 * v177;
              KB::Candidate::Candidate(v178, v173);
              *(_QWORD *)&v244 = (char *)v178 + 1000;
              std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
              v171 = (KB::Candidate *)a3[1];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
            }
            else
            {
              KB::Candidate::Candidate(v171, v173);
              v171 = (KB::Candidate *)((char *)v171 + 1000);
            }
            a3[1] = (uint64_t)v171;
            v170 = v172;
            v169 = v167[3];
            v166 = 0x1CAC083126E978D5 * ((v167[4] - v169) >> 3) > (unint64_t)v172++;
          }
          while (v166);
        }
        v167 = (_QWORD *)*v167;
      }
      while (v167);
    }
  }
  else
  {
    v154 = *(_QWORD **)(a2 + 16);
    if (v154)
    {
      v155 = a3 + 2;
      do
      {
        v156 = v154[3];
        if (v154[4] != v156)
        {
          v157 = 0;
          v158 = (KB::Candidate *)a3[1];
          v159 = 1;
          do
          {
            v160 = (const KB::Candidate *)(v156 + 1000 * v157);
            if ((unint64_t)v158 >= *v155)
            {
              v161 = 0x1CAC083126E978D5 * (((uint64_t)v158 - *a3) >> 3);
              v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) > 0x4189374BC6A7EFLL)
LABEL_410:
                abort();
              if (0x395810624DD2F1AALL * ((*v155 - *a3) >> 3) > v162)
                v162 = 0x395810624DD2F1AALL * ((*v155 - *a3) >> 3);
              if ((unint64_t)(0x1CAC083126E978D5 * ((*v155 - *a3) >> 3)) >= 0x20C49BA5E353F7)
                v163 = 0x4189374BC6A7EFLL;
              else
                v163 = v162;
              v245 = a3 + 2;
              if (v163)
                v163 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<KB::Candidate>>(v163);
              else
                v164 = 0;
              v165 = (KB::Candidate *)(v163 + 1000 * v161);
              *(_QWORD *)&v243 = v163;
              *((_QWORD *)&v243 + 1) = v165;
              *((_QWORD *)&v244 + 1) = v163 + 1000 * v164;
              KB::Candidate::Candidate(v165, v160);
              *(_QWORD *)&v244 = (char *)v165 + 1000;
              std::vector<KB::Candidate>::__swap_out_circular_buffer(a3, &v243);
              v158 = (KB::Candidate *)a3[1];
              std::__split_buffer<KB::Candidate>::~__split_buffer((uint64_t)&v243);
            }
            else
            {
              KB::Candidate::Candidate(v158, v160);
              v158 = (KB::Candidate *)((char *)v158 + 1000);
            }
            a3[1] = (uint64_t)v158;
            v157 = v159;
            v156 = v154[3];
            v166 = 0x1CAC083126E978D5 * ((v154[4] - v156) >> 3) > (unint64_t)v159++;
          }
          while (v166);
        }
        v154 = (_QWORD *)*v154;
      }
      while (v154);
    }
  }
LABEL_406:
  v220 = (KB::Candidate *)a3[1];
  v221 = 126 - 2 * __clz(0x1CAC083126E978D5 * (((uint64_t)v220 - *a3) >> 3));
  if (v220 == (KB::Candidate *)*a3)
    v222 = 0;
  else
    v222 = v221;
  std::__introsort<std::_ClassicAlgPolicy,KB::CandidateCollection::sort(void)::$_0 &,KB::Candidate *,false>((uint64_t *)*a3, v220, v222, 1);
}

char *std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType&&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x80uLL);
  v23[1] = a1 + 16;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 31) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  v24 = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100]((uint64_t)v23);
  return v10;
}

uint64_t *TI::CP::TIPathRecognizerEnsemble::can_use_preferred_source(TI::CP::TIPathRecognizerEnsemble *this)
{
  int *v2;
  char *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;

  v2 = (int *)((char *)this + 208);
  v3 = (char *)this + 16;
  result = std::__hash_table<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<KB::String,std::unordered_set<KB::String>>>>>::find<int>((_QWORD *)this + 2, *((_DWORD *)this + 52));
  if (result)
  {
    v5 = *((_QWORD *)this + 60);
    result = 0;
    if (!v5
      || !*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5)
      || (v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 60) + 48))(*((_QWORD *)this + 60)),
          v7 = *(_QWORD *)(*(_QWORD *)v6 + 48),
          v8 = v7 - *(_QWORD *)(*(_QWORD *)v6 + 40),
          (unint64_t)(0x2E8BA2E8BA2E8BA3 * (v8 >> 4)) <= 2)
      && (v8 != 352 || *(_DWORD *)(v7 - 16) == -2)
      || !*(_BYTE *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 60) + 48))(*((_QWORD *)this + 60))
                   + 65))
    {
      v9 = std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>((uint64_t)v3, *v2, v2);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v9[3] + 16))(v9[3]) == 1)
      {
        v10 = atomic_load((unsigned __int8 *)this + 632);
        if ((v10 & 1) != 0)
          return (uint64_t *)1;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::__unordered_map_hasher<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::hash<int>,std::equal_to<TI::CP::TIPathRecognizerType>,true>,std::__unordered_map_equal<TI::CP::TIPathRecognizerType,std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,std::equal_to<TI::CP::TIPathRecognizerType>,std::hash<int>,true>,std::allocator<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>>>::__emplace_unique_key_args<TI::CP::TIPathRecognizerType,std::piecewise_construct_t const&,std::tuple<TI::CP::TIPathRecognizerType const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x28uLL);
  v23[1] = a1 + 16;
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v24 = 1;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,std::shared_ptr<TI::CP::TIPathRecognizerInterface>>,void *>>>>::reset[abi:nn180100]((uint64_t)v23);
  return v10;
}

void std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(void **a1)
{
  void **v2;
  void **v3;

  v2 = a1 + 1;
  v3 = a1 + 10;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = a1 + 7;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = a1 + 4;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
  v3 = v2;
  std::vector<KB::Candidate>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TI::CP::TIPathRecognizerType,KB::CandidateCollection>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<TI::CP::TIPathRecognizerType const,KB::CandidateCollection>,0>(v1 + 2);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::find<KB::String>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  KB::String *v6;
  unsigned int v7;
  uint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;

  if (a3[1])
    v6 = (KB::String *)a3[1];
  else
    v6 = (KB::String *)(a3 + 2);
  v7 = KB::String::hash(v6, (const char *)*(unsigned __int16 *)a3);
  if (!a2)
    return 0;
  v8 = v7;
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= a2)
      v11 = v7 % a2;
  }
  else
  {
    v11 = ((_DWORD)a2 - 1) & v7;
  }
  v12 = *(_QWORD **)(a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = (_QWORD *)*v12;
  if (*v12)
  {
    do
    {
      v14 = v13[1];
      if (v14 == v8)
      {
        if (v13 + 2 == a3 || KB::String::equal((KB::String *)(v13 + 2), (const KB::String *)a3, 1))
          return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v14 >= a2)
            v14 %= a2;
        }
        else
        {
          v14 &= a2 - 1;
        }
        if (v14 != v11)
          return 0;
      }
      v13 = (_QWORD *)*v13;
    }
    while (v13);
  }
  return v13;
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,unsigned int>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,unsigned int>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,unsigned int>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, KB::String **a3)
{
  unint64_t v3;
  KB::String *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  KB::String *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v28[2];
  char v29;

  if (a2[1])
    v7 = (KB::String *)a2[1];
  else
    v7 = (KB::String *)(a2 + 2);
  v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x38uLL);
  v28[0] = (uint64_t)v14;
  v28[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v9;
  v17 = *a3;
  *((_DWORD *)v14 + 4) = 0x100000;
  *((_WORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 22) = 0;
  v14[3] = 0;
  KB::String::operator=((uint64_t)(v14 + 2), v17);
  *((_DWORD *)v14 + 12) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v14 = *v25;
LABEL_42:
    *v25 = v14;
    goto LABEL_43;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v24 + 8 * v3) = v16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<KB::String,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<KB::String,void *>>>>::reset[abi:nn180100](v28);
  return v14;
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, KB::String **a3)
{
  unint64_t v3;
  KB::String *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  KB::String *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  if (a2[1])
    v7 = (KB::String *)a2[1];
  else
    v7 = (KB::String *)(a2 + 2);
  v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x418uLL);
  *v14 = 0;
  v14[1] = v9;
  v16 = *a3;
  *((_DWORD *)v14 + 4) = 0x100000;
  *((_WORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 22) = 0;
  v14[3] = 0;
  KB::String::operator=((uint64_t)(v14 + 2), v16);
  bzero(v14 + 6, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)(v14 + 6));
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v14 = *v24;
LABEL_42:
    *v24 = v14;
    goto LABEL_43;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

uint64_t std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    KB::Candidate::~Candidate((KB::Candidate *)(v3 + 6));
    v4 = (void *)v3[3];
    if (v4 && *((_BYTE *)v3 + 22) == 1)
      free(v4);
    operator delete(v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void TI::CP::TIPathRecognizerEnsemble::dictionary_key_for_candidate(const KB::Candidate *a1@<X1>, uint64_t a2@<X8>)
{
  KB::Word *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  BOOL v9;
  _WORD v10[3];
  char v11;
  void *v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a2 = 0x100000;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_QWORD *)a1)
  {
    v4 = (KB::Word *)*((_QWORD *)a1 + 1);
    v5 = 240 * *(_QWORD *)a1;
    do
    {
      v6 = *((_QWORD *)v4 + 17);
      KB::Word::capitalized_string(v4, (uint64_t)v10);
      v7 = (const char *)v12;
      if (!v12)
        v7 = (const char *)v13;
      if (v10[0])
        v8 = v7;
      else
        v8 = "";
      KB::String::append_format((KB::String *)a2, "[%u]%s", v6, v8);
      if (v12)
        v9 = v11 == 1;
      else
        v9 = 0;
      if (v9)
        free(v12);
      v4 = (KB::Word *)((char *)v4 + 240);
      v5 -= 240;
    }
    while (v5);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,KB::Candidate>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,KB::Candidate>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,KB::Candidate>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, const KB::String **a3)
{
  unint64_t v3;
  KB::String *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  if (a2[1])
    v7 = (KB::String *)a2[1];
  else
    v7 = (KB::String *)(a2 + 2);
  v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i + 2 == a2 || KB::String::equal((KB::String *)(i + 2), (const KB::String *)a2, 1))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x418uLL);
  *i = 0;
  i[1] = v9;
  KB::String::String((KB::String *)(i + 2), *a3);
  bzero(i + 6, 0x3E8uLL);
  KB::Candidate::Candidate((KB::Candidate *)(i + 6));
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_42:
    *v23 = i;
    goto LABEL_43;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

_QWORD *std::__hash_table<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::__unordered_map_hasher<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::hash<KB::String>,std::equal_to<KB::String>,true>,std::__unordered_map_equal<KB::String,std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>,std::equal_to<KB::String>,std::hash<KB::String>,true>,std::allocator<std::__hash_value_type<KB::String,std::unordered_map<TI::CP::TIPathRecognizerType,std::pair<unsigned int,float>>>>>::__emplace_unique_key_args<KB::String,std::piecewise_construct_t const&,std::tuple<KB::String const&>,std::tuple<>>(uint64_t *a1, _QWORD *a2, const KB::String **a3)
{
  unint64_t v3;
  KB::String *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  void *v38;

  if (a2[1])
    v7 = (KB::String *)a2[1];
  else
    v7 = (KB::String *)(a2 + 2);
  v8 = KB::String::hash(v7, (const char *)*(unsigned __int16 *)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v10 <= v8)
        v3 = v8 % v10;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == a2 || KB::String::equal((KB::String *)(v14 + 2), (const KB::String *)a2, 1))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = a1 + 2;
  v14 = operator new(0x58uLL);
  *v14 = 0;
  v14[1] = v9;
  KB::String::String((KB::String *)(v14 + 2), *a3);
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *((_DWORD *)v14 + 20) = 1065353216;
  v17 = (float)(unint64_t)(a1[3] + 1);
  v18 = *((float *)a1 + 8);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v16;
          if (*v16)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v27) = v16;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v33))
                  {
                    *(_QWORD *)(*a1 + 8 * v33) = v26;
                    goto LABEL_59;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*a1 + 8 * v33);
                  **(_QWORD **)(*a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_59:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v38 = (void *)*a1;
        *a1 = 0;
        if (v38)
          operator delete(v38);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = ((_DWORD)v10 - 1) & v9;
    }
  }
  v34 = *a1;
  v35 = *(_QWORD **)(*a1 + 8 * v3);
  if (v35)
  {
    *v14 = *v35;
LABEL_76:
    *v35 = v14;
    goto LABEL_77;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v34 + 8 * v3) = v16;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10)
        v36 %= v10;
    }
    else
    {
      v36 &= v10 - 1;
    }
    v35 = (_QWORD *)(*a1 + 8 * v36);
    goto LABEL_76;
  }
LABEL_77:
  ++a1[3];
  return v14;
}

const __CFNumber *preference_value_for_key(const __CFString *a1)
{
  const __CFNumber *result;
  const __CFNumber *v2;
  unsigned int valuePtr;

  result = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("kbUserDidPath"), CFSTR("com.apple.keyboard"));
  valuePtr = 0;
  if (result)
  {
    v2 = result;
    if (!CFNumberGetValue(result, kCFNumberIntType, &valuePtr))
      valuePtr = 0;
    CFRelease(v2);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t TI::CP::TIPathRecognizerEnsemble::TIPathRecognizerEnsemble(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  const __CFAllocator *v65;
  const void *v66;
  const __CFString *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  sqlite3 **v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  _QWORD v76[2];
  _QWORD v77[2];
  __int128 v78;
  CFTypeRef cf[2];
  char v80;
  void *v81[2];
  void *v82[2];
  __int128 v83;
  void *v84[2];
  __int128 v85;
  __int128 v86;
  char v87;
  int v88;
  int v89;
  __int128 filePath;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  _BYTE v101[23];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1EA102428;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x7FFFFFFFFLL;
  *(_OWORD *)(a1 + 88) = *MEMORY[0x1E0C9D538];
  v9 = *(_OWORD *)(a4 + 16);
  v8 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v9;
  v11 = *(_OWORD *)(a4 + 64);
  v10 = *(_OWORD *)(a4 + 80);
  v12 = *(_QWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a4 + 48);
  *(_QWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v11;
  v13 = (std::string *)(a1 + 224);
  if (*(char *)(a4 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a4 + 104), *(_QWORD *)(a4 + 112));
  }
  else
  {
    v14 = *(_OWORD *)(a4 + 104);
    v13->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 120);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = (std::string *)(a1 + 248);
  if (*(char *)(a4 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(a4 + 128), *(_QWORD *)(a4 + 136));
  }
  else
  {
    v16 = *(_OWORD *)(a4 + 128);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a4 + 144);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  v17 = *(_WORD *)(a4 + 152);
  *(_BYTE *)(a1 + 274) = *(_BYTE *)(a4 + 154);
  *(_WORD *)(a1 + 272) = v17;
  KB::String::String((KB::String *)(a1 + 280), (const KB::String *)(a4 + 160));
  v18 = *(_OWORD *)(a4 + 192);
  v19 = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a4 + 208);
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 312) = v18;
  v20 = *(_OWORD *)(a4 + 240);
  v21 = *(_OWORD *)(a4 + 256);
  v22 = *(_OWORD *)(a4 + 288);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a4 + 272);
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 360) = v20;
  *(_OWORD *)(a1 + 376) = v21;
  v23 = *(_OWORD *)(a4 + 304);
  v24 = *(_OWORD *)(a4 + 320);
  v25 = *(_OWORD *)(a4 + 336);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a4 + 352);
  *(_OWORD *)(a1 + 440) = v24;
  *(_OWORD *)(a1 + 456) = v25;
  *(_OWORD *)(a1 + 424) = v23;
  v26 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 480) = v26;
  v27 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 488) = v27;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 560));
  v28 = (const __CFString *)language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)(a1 + 568));
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 604) = xmmword_1DA910FE0;
  *(_DWORD *)(a1 + 620) = 1028443341;
  *(_QWORD *)(a1 + 624) = 0x300000000;
  *(_WORD *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 632));
  atomic_store(0, (unsigned __int8 *)(a1 + 633));
  v29 = *(_DWORD *)(a1 + 220);
  if ((v29 & 1) != 0)
  {
    v30 = *(_OWORD *)(a1 + 384);
    v95 = *(_OWORD *)(a1 + 400);
    v31 = *(_OWORD *)(a1 + 432);
    v96 = *(_OWORD *)(a1 + 416);
    v97 = v31;
    v98 = *(_QWORD *)(a1 + 448);
    v32 = *(_OWORD *)(a1 + 368);
    v92 = *(_OWORD *)(a1 + 352);
    v93 = v32;
    v94 = v30;
    v33 = *(_OWORD *)(a1 + 336);
    filePath = *(_OWORD *)(a1 + 320);
    v91 = v33;
    *(_OWORD *)v101 = *(_OWORD *)(a1 + 457);
    *(_QWORD *)&v101[15] = *(_QWORD *)(a1 + 472);
    v34 = *(_BYTE *)(a1 + 273);
    if (*(_BYTE *)(a1 + 272))
      v35 = 2;
    else
      v35 = 1;
    v36 = *(unsigned __int8 *)(a1 + 274);
    *(_QWORD *)&v78 = 0x402E000000000000;
    *((_QWORD *)&v78 + 1) = __PAIR64__(v36, v35);
    LOBYTE(cf[0]) = 1;
    cf[1] = (CFTypeRef)0x3FD3333333333333;
    v80 = 0;
    v88 = 0;
    v89 = 0;
    *(_OWORD *)v81 = 0u;
    *(_OWORD *)v82 = 0u;
    v83 = 0u;
    *(_OWORD *)v84 = 0u;
    v85 = 0u;
    v86 = 0u;
    v87 = 0;
    v37 = operator new(0x268uLL);
    v38 = v37;
    v37[1] = 0;
    v37[2] = 0;
    *v37 = &off_1EA1024D8;
    v39 = v37 + 3;
    v40 = *(unsigned int **)(a1 + 480);
    v100 = v40;
    if (v40)
    {
      v41 = v40 + 2;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
    v43 = *(unsigned int **)(a1 + 488);
    v99 = v43;
    if (v43)
    {
      v44 = v43 + 2;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
    }
    TI::CP::Search::Search((uint64_t)(v37 + 3), (uint64_t *)&v100, (uint64_t *)&v99, &v78);
    if (v99)
    {
      v46 = v99 + 2;
      v47 = atomic_load(v99 + 2);
      if (v47 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v99 + 8))(v99);
      }
      else
      {
        do
          v48 = __ldaxr(v46);
        while (__stlxr(v48 - 1, v46));
      }
    }
    if (v100)
    {
      v49 = v100 + 2;
      v50 = atomic_load(v100 + 2);
      if (v50 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v100 + 40))(v100);
      }
      else
      {
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
      }
    }
    *(_QWORD *)&v52 = v39;
    *((_QWORD *)&v52 + 1) = v38;
    v53 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v52;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(p_shared_owners);
      while (__stlxr(v55 - 1, p_shared_owners));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (*((_QWORD *)&v85 + 1))
      operator delete(*((void **)&v85 + 1));
    if (v84[0])
      operator delete(v84[0]);
    if (v82[1])
      operator delete(v82[1]);
    if (v81[0])
      operator delete(v81[0]);
    v56 = *(_QWORD *)(a1 + 64);
    v57 = v97;
    *(_OWORD *)(v56 + 528) = v96;
    *(_OWORD *)(v56 + 544) = v57;
    *(_QWORD *)(v56 + 560) = v98;
    v58 = v93;
    *(_OWORD *)(v56 + 464) = v92;
    *(_OWORD *)(v56 + 480) = v58;
    v59 = v95;
    *(_OWORD *)(v56 + 496) = v94;
    *(_OWORD *)(v56 + 512) = v59;
    v60 = v91;
    *(_OWORD *)(v56 + 432) = filePath;
    *(_OWORD *)(v56 + 448) = v60;
    *(_BYTE *)(v56 + 568) = v34;
    *(_OWORD *)(v56 + 569) = *(_OWORD *)v101;
    *(_QWORD *)(v56 + 584) = *(_QWORD *)&v101[15];
    v61 = *(std::__shared_weak_count **)(a1 + 72);
    v77[0] = *(_QWORD *)(a1 + 64);
    v77[1] = v61;
    if (v61)
    {
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldxr(v62);
      while (__stxr(v63 + 1, v62));
      TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v77);
      do
        v64 = __ldaxr(v62);
      while (__stlxr(v64 - 1, v62));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    else
    {
      TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v77);
    }
    v29 = *(_DWORD *)(a1 + 220);
  }
  if ((v29 & 0xC) != 0)
  {
    CFRetain(CFSTR("shapestore.db"));
    cf[0] = CFSTR("shapestore.db");
    if (*(_WORD *)(a1 + 284))
    {
      v65 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    else
    {
      KB::String::compute_length((unsigned __int16 *)(a1 + 280));
      v65 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (!*(_WORD *)(a1 + 284))
      {
        v67 = (const __CFString *)TI_KB_USER_DIRECTORY();
        *((_QWORD *)&v78 + 1) = CFURLCreateWithFileSystemPath(v65, v67, kCFURLPOSIXPathStyle, 1u);
LABEL_54:
        LODWORD(v78) = *(_DWORD *)(a1 + 312);
        KB::retain_ptr<__CFDictionary const*>::operator=(cf, CFSTR("shapestore.db"));
        v68 = (std::__shared_weak_count *)operator new(0x168uLL);
        v68->__shared_owners_ = 0;
        v69 = (unint64_t *)&v68->__shared_owners_;
        v68->__shared_weak_owners_ = 0;
        v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102510;
        v68[1].__shared_owners_ = 0;
        v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102548;
        *(_OWORD *)&v68[1].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v68[2].__shared_owners_ = 0u;
        v68[3].std::__shared_count = 0u;
        *(_OWORD *)&v68[3].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v68[4].__shared_owners_ = 0u;
        v68[5].std::__shared_count = 0u;
        LODWORD(v68[5].__shared_weak_owners_) = 7;
        v68[6].__vftable = (std::__shared_weak_count_vtbl *)0x4028000000000000;
        LODWORD(v68[6].__shared_owners_) = 8;
        *(_OWORD *)&v68[6].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v68[7].__shared_owners_ = 0u;
        v68[8].std::__shared_count = 0u;
        *(_OWORD *)&v68[8].__shared_weak_owners_ = 0u;
        v68[9].__shared_owners_ = 0;
        v70 = (sqlite3 **)TI::CP::ShapeStore::ShapeStore((uint64_t)&v68[9].__shared_weak_owners_, (uint64_t)&v78);
        LODWORD(v68[12].__shared_weak_owners_) = 0;
        v68[13].std::__shared_count = 0u;
        *(_OWORD *)&v68[13].__shared_weak_owners_ = 0u;
        LODWORD(v68[14].__shared_owners_) = 1065353216;
        LOBYTE(v68[14].__shared_weak_owners_) = 0;
        LODWORD(v68[12].__shared_weak_owners_) = TI::CP::ShapeStore::num_records(v70);
        v76[0] = v68 + 1;
        v76[1] = v68;
        do
          v71 = __ldxr(v69);
        while (__stxr(v71 + 1, v69));
        TI::CP::TIPathRecognizerEnsemble::add_recognizer(a1, v76);
        do
          v72 = __ldaxr(v69);
        while (__stlxr(v72 - 1, v69));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        *(_BYTE *)(a1 + 56) = (*(_BYTE *)(a1 + 220) & 4) != 0;
        do
          v73 = __ldaxr(v69);
        while (__stlxr(v73 - 1, v69));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        if (cf[0])
          CFRelease(cf[0]);
        cf[0] = 0;
        v28 = (const __CFString *)*((_QWORD *)&v78 + 1);
        if (*((_QWORD *)&v78 + 1))
          CFRelease(*((CFTypeRef *)&v78 + 1));
        goto LABEL_68;
      }
    }
    KB::cf_string_impl<KB::String>((CFStringRef *)&filePath, (unsigned __int16 *)(a1 + 280));
    v66 = (const void *)filePath;
    *((_QWORD *)&v78 + 1) = CFURLCreateWithFileSystemPath(v65, (CFStringRef)filePath, kCFURLPOSIXPathStyle, 1u);
    if (v66)
      CFRelease(v66);
    goto LABEL_54;
  }
LABEL_68:
  v74 = preference_value_for_key(v28);
  *(_DWORD *)(a1 + 600) = v74;
  if (v74 == 0x7FFFFFFF)
  {
    v74 = *(_DWORD *)(a1 + 212) + 1;
    *(_DWORD *)(a1 + 600) = v74;
  }
  if (v74 < 0)
    *(_DWORD *)(a1 + 600) = 0;
  TI::CP::TIPathRecognizerEnsemble::load_ml_source_if_needed((TI::CP::TIPathRecognizerEnsemble *)a1);
  TI::CP::TIPathRecognizerEnsemble::normalize_weights((TI::CP::TIPathRecognizerEnsemble *)a1);
  return a1;
}

void std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA102510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::ContextualShapeRecognizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<TI::CP::Search>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1024D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TI::CP::Search>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1024D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<TI::CP::Search>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::CP::TIPathRecognizerEnsemble::append_debug_data(TI::CP::TIPathRecognizerEnsemble *this, __CFString *a2, const char *a3)
{
  TI::CP::Search *v3;

  v3 = (TI::CP::Search *)*((_QWORD *)this + 8);
  if (v3)
    TI::CP::Search::append_debug_data(v3, a2, a3);
}

double TI::CP::TIPathRecognizerEnsemble::set_lm_weight(TI::CP::TIPathRecognizerEnsemble *this, double result)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    *(_QWORD *)(v2 + 432) = 0x3FD60DC768DFBD6ALL;
    *(double *)(v2 + 440) = *(float *)&result;
    *(_OWORD *)(v2 + 448) = xmmword_1DA911080;
    *(_OWORD *)(v2 + 464) = xmmword_1DA911090;
    *(_OWORD *)(v2 + 480) = xmmword_1DA9110A0;
    *(_OWORD *)(v2 + 496) = xmmword_1DA9110B0;
    *(_OWORD *)(v2 + 512) = xmmword_1DA9110C0;
    *(_OWORD *)(v2 + 528) = xmmword_1DA9110D0;
    *(_OWORD *)(v2 + 544) = xmmword_1DA9110E0;
    *(_QWORD *)(v2 + 560) = 0x401F404C05921038;
    *(_BYTE *)(v2 + 568) = 1;
    result = 54.3812;
    *(_OWORD *)(v2 + 576) = xmmword_1DA9110F0;
  }
  return result;
}

float TI::Favonius::CMGeometryParameters::kb_points_per_mm(TI::Favonius::CMGeometryParameters *this)
{
  return flt_1DA90F0D0[s_interface_idiom_is_pad == 0];
}

float TI::Favonius::CMGeometryParameters::kb_mm_per_point(TI::Favonius::CMGeometryParameters *this)
{
  unsigned __int8 v1;
  __objc2_prot_list **p_prots;
  int v4;

  p_prots = &OBJC_PROTOCOL___TITrialManager.prots;
  if ((v1 & 1) == 0)
  {
    p_prots = &OBJC_PROTOCOL___TITrialManager.prots;
    if (v4)
    {
      TI::Favonius::CMGeometryParameters::kb_mm_per_point(void)::mm_per_point = dword_1DA90F0D8[s_interface_idiom_is_pad == 0];
      p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL___TITrialManager + 16);
    }
  }
  return *((float *)p_prots + 586);
}

float TI::Favonius::CMGeometryParameters::kb_mm_to_points(TI::Favonius::CMGeometryParameters *this, float a2)
{
  return flt_1DA90F0D0[s_interface_idiom_is_pad == 0] * a2;
}

float TI::Favonius::CMGeometryParameters::kb_points_to_mm(TI::Favonius::CMGeometryParameters *this, float a2)
{
  return TI::Favonius::CMGeometryParameters::kb_mm_per_point(this) * a2;
}

uint64_t TI::Favonius::CMGeometryParameters::CMGeometryParameters(uint64_t a1, TI::Favonius::KeyboardLayout **a2)
{
  TI::Favonius::KeyboardLayout *v4;
  unint64_t v5;
  BOOL v7;
  KB::String *v8;
  BOOL v9;
  float v10;
  int32x4_t v11;
  unsigned int v12;
  float v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v17;
  _BYTE v18[8];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *((unsigned int *)*a2 + 50);
  v7 = v5 > 0xB || v5 > (unint64_t)((uint64_t)(*((_QWORD *)*a2 + 2) - *((_QWORD *)*a2 + 1)) >> 3) >> 1;
  *(_BYTE *)a1 = v7;
  *(_BYTE *)(a1 + 1) = TI::Favonius::KeyboardLayout::is_indic_alphabetic(v4);
  v8 = (TI::Favonius::KeyboardLayout *)((char *)*a2 + 208);
  KB::String::String((KB::String *)v18, "Zhuyin-Grid");
  v9 = KB::String::equal(v8, (const KB::String *)v18, 1);
  if (v19 && v18[6] == 1)
    free(v19);
  *(_BYTE *)(a1 + 2) = v9;
  v10 = TI::Favonius::KeyboardLayout::median_key_half_width(*a2) / 15.0;
  v11.i32[0] = 1.0;
  if (v10 >= 1.0)
  {
    *(float *)v11.i32 = v10;
    if (v10 > 4.0)
      v11.i32[0] = 4.0;
  }
  v17 = v11;
  v12 = s_interface_idiom_is_pad == 0;
  v13 = powf(*(float *)v11.i32, 0.66);
  v14 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v12)), 0x1FuLL));
  v15 = v17;
  *(float *)&v15.i32[1] = v13;
  *(float32x4_t *)(a1 + 4) = vmulq_f32((float32x4_t)vzip1q_s32(v15, vdupq_lane_s32(*(int32x2_t *)v15.i8, 1)), (float32x4_t)vbslq_s8(v14, (int8x16_t)xmmword_1DA911130, (int8x16_t)xmmword_1DA911120));
  *(float32x4_t *)(a1 + 20) = vmulq_n_f32((float32x4_t)vbslq_s8(v14, (int8x16_t)xmmword_1DA911150, (int8x16_t)xmmword_1DA911140), v13);
  return a1;
}

BOOL TI::Favonius::KeyboardLayout::is_indic_alphabetic(TI::Favonius::KeyboardLayout *this)
{
  _BOOL8 isAlphabeticLayout;
  BOOL v2;
  _BYTE v4[8];
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  KB::String::String((KB::String *)v4, (TI::Favonius::KeyboardLayout *)((char *)this + 208));
  isAlphabeticLayout = TI::IndicUtils::isAlphabeticLayout((KB::String *)v4);
  if (v5)
    v2 = v4[6] == 1;
  else
    v2 = 0;
  if (v2)
    free(v5);
  return isAlphabeticLayout;
}

double TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch(TI::Favonius::CMGeometryParametersForTouch *this)
{
  double result;

  *(_QWORD *)&result = 0x7F0000007FLL;
  *(_QWORD *)this = 0x7F0000007FLL;
  *((_DWORD *)this + 2) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)&result = 0x7F0000007FLL;
  *(_QWORD *)this = 0x7F0000007FLL;
  *((_DWORD *)this + 2) = 0;
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::CMGeometryParametersForTouch(float *a1, uint64_t a2, uint64_t a3, double a4)
{
  float v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v4 = *(float *)(*(_QWORD *)a3 + 24);
  v5 = 1.0;
  v6 = 1.0;
  if (v4 <= 12.0)
  {
    v6 = 0.0;
    if (v4 > 6.5)
      v6 = (float)((float)(v4 + -6.5) / 5.5);
  }
  if (a4 >= 0.15)
  {
    v5 = 0.0;
    if (a4 < 0.35)
    {
      v7 = (0.35 - a4) / 0.2;
      v5 = v7;
    }
  }
  v8 = v6 * 0.3 + v5 * (v6 * 0.7 + 1.0);
  if (v8 > 1.0)
    v8 = 1.0;
  v9 = *(float *)(a2 + 16) + (float)((float)(*(float *)(a2 + 20) - *(float *)(a2 + 16)) * v8);
  *a1 = -1.0 / (float)(v9 * (float)(v9 * 4.0));
  if (*(_BYTE *)a2)
    v10 = *(float *)(a2 + 24) + (float)((float)(*(float *)(a2 + 28) - *(float *)(a2 + 24)) * v8);
  else
    v10 = *(float *)(a2 + 32);
  a1[1] = -1.0 / (float)(v10 * (float)(v10 * 4.0));
  v11 = 1.0;
  if (a4 >= 0.15)
  {
    v11 = 0.0;
    if (a4 < 0.35)
      v11 = (0.35 - a4) / 0.2;
  }
  result = *(float *)(a2 + 8) + (float)((float)(*(float *)(a2 + 12) - *(float *)(a2 + 8)) * v11);
  a1[2] = result;
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::fuzzy_thumbness(uint64_t a1)
{
  float v1;
  float result;

  v1 = *(float *)(*(_QWORD *)a1 + 24);
  result = 1.0;
  if (v1 <= 12.0)
  {
    result = 0.0;
    if (v1 > 6.5)
      return (float)(v1 + -6.5) / 5.5;
  }
  return result;
}

float TI::Favonius::CMGeometryParametersForTouch::typing_quickness(TI::Favonius::CMGeometryParametersForTouch *this, double a2)
{
  float result;

  result = 1.0;
  if (a2 >= 0.15)
  {
    result = 0.0;
    if (a2 < 0.35)
      return (0.35 - a2) / 0.2;
  }
  return result;
}

double TI::Favonius::CMGeometryParametersForTouch::bounded_touch_interval(TI::Favonius::CMGeometryParametersForTouch *this, double a2)
{
  double v2;

  v2 = 0.15;
  if (a2 >= 0.15)
  {
    v2 = 0.5;
    if (a2 <= 0.5)
      return a2;
  }
  return v2;
}

_QWORD *__Block_byref_object_copy__11616(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  a2[6] = 0;
  a2[7] = 0;
  v3 = result[8];
  result[8] = a2[8];
  a2[8] = v3;
  return result;
}

_QWORD *__Block_byref_object_dispose__11617(uint64_t a1)
{
  return WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::~Vector((_QWORD *)(a1 + 48));
}

uint64_t KB::CandidateFilterLookupContext::CandidateFilterLookupContext(uint64_t a1, const KB::Candidate *a2, const std::vector<unsigned int> *a3, const KB::LanguageModelContext *a4, const KB::String *a5, const KB::Candidate *a6, int a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<unsigned int> v24;
  void **v25;
  _BYTE v26[1000];
  _BYTE v27[8];
  void *v28;
  _BYTE v29[1000];
  char v30;
  _BYTE v31[1000];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  KB::Candidate::Candidate((KB::Candidate *)v31, a2);
  v29[0] = 0;
  v30 = 0;
  std::vector<unsigned int>::vector(&v24, a3);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v17, a4);
  KB::String::String((KB::String *)v27, a5);
  KB::Candidate::Candidate((KB::Candidate *)v26, a6);
  KB::CandidateFilterLookupContext::CandidateFilterLookupContext(a1, (uint64_t)v31, (const KB::Candidate *)v29, (uint64_t)&v24, (uint64_t)&v17, (KB::String *)v27, (uint64_t)v26, a7);
  KB::Candidate::~Candidate((KB::Candidate *)v26);
  if (v28 && v27[6] == 1)
    free(v28);
  v25 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v21);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
  if (v30)
    KB::Candidate::~Candidate((KB::Candidate *)v29);
  KB::Candidate::~Candidate((KB::Candidate *)v31);
  return a1;
}

{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<unsigned int> v24;
  void **v25;
  _BYTE v26[1000];
  _BYTE v27[8];
  void *v28;
  _BYTE v29[1000];
  char v30;
  _BYTE v31[1000];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  KB::Candidate::Candidate((KB::Candidate *)v31, a2);
  v29[0] = 0;
  v30 = 0;
  std::vector<unsigned int>::vector(&v24, a3);
  KB::LanguageModelContext::LanguageModelContext((KB::LanguageModelContext *)&v17, a4);
  KB::String::String((KB::String *)v27, a5);
  KB::Candidate::Candidate((KB::Candidate *)v26, a6);
  KB::CandidateFilterLookupContext::CandidateFilterLookupContext(a1, (uint64_t)v31, (const KB::Candidate *)v29, (uint64_t)&v24, (uint64_t)&v17, (KB::String *)v27, (uint64_t)v26, a7);
  KB::Candidate::~Candidate((KB::Candidate *)v26);
  if (v28 && v27[6] == 1)
    free(v28);
  v25 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v25);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v22);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&v21);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v24.__begin_)
  {
    v24.__end_ = v24.__begin_;
    operator delete(v24.__begin_);
  }
  if (v30)
    KB::Candidate::~Candidate((KB::Candidate *)v29);
  KB::Candidate::~Candidate((KB::Candidate *)v31);
  return a1;
}

uint64_t KB::CandidateFilterLookupContext::CandidateFilterLookupContext(uint64_t a1, uint64_t a2, const KB::Candidate *a3, uint64_t a4, uint64_t a5, KB::String *a6, uint64_t a7, int a8)
{
  uint64_t v15;

  v15 = KB::Candidate::Candidate(a1, a2);
  *(_BYTE *)(v15 + 1000) = 0;
  *(_BYTE *)(v15 + 2000) = 0;
  if (*((_BYTE *)a3 + 1000))
  {
    KB::Candidate::Candidate((KB::Candidate *)(a1 + 1000), a3);
    *(_BYTE *)(a1 + 2000) = 1;
  }
  *(_QWORD *)(a1 + 2024) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2008) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 2024) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  KB::LanguageModelContext::LanguageModelContext(a1 + 2032, a5);
  *(_DWORD *)(a1 + 2136) = 0x100000;
  *(_WORD *)(a1 + 2140) = 0;
  *(_BYTE *)(a1 + 2142) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  KB::String::operator=(a1 + 2136, a6);
  KB::Candidate::Candidate(a1 + 2168, a7);
  *(_DWORD *)(a1 + 3168) = a8;
  *(_DWORD *)(a1 + 3172) = 0;
  *(_BYTE *)(a1 + 3176) = 0;
  return a1;
}

uint64_t KB::UserDictionary::trie(KB::UserDictionary *this)
{
  return *(_QWORD *)this;
}

void KB::UserDictionary::conversions_for_shortcut(uint64_t a1, KB *this, uint64_t a3)
{
  KB::String *v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  BOOL v15;
  _WORD v16[3];
  char v17;
  void *v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  KB::lower_string(this, 0, (KB::String *)v16);
  if (v18)
    v5 = (KB::String *)v18;
  else
    v5 = (KB::String *)v19;
  v6 = KB::String::hash(v5, (const char *)v16[0]);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v7 <= v6)
        v11 = v6 % v7;
    }
    else
    {
      v11 = ((_DWORD)v7 - 1) & v6;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 8 * v11);
    if (v12)
    {
      v13 = (uint64_t **)*v12;
      if (*v12)
      {
        do
        {
          v14 = (unint64_t)v13[1];
          if (v14 == v8)
          {
            if (v13 + 2 == (uint64_t **)v16 || KB::String::equal((KB::String *)(v13 + 2), (const KB::String *)v16, 1))
            {
              if (v13 + 6 != (uint64_t **)a3)
                std::vector<KB::String>::__assign_with_size[abi:nn180100]<KB::String*,KB::String*>(a3, (KB::String *)v13[6], (KB::String *)v13[7], ((char *)v13[7] - (char *)v13[6]) >> 5);
              break;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v14 >= v7)
                v14 %= v7;
            }
            else
            {
              v14 &= v7 - 1;
            }
            if (v14 != v11)
              break;
          }
          v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  if (v18)
    v15 = v17 == 1;
  else
    v15 = 0;
  if (v15)
    free(v18);
}

uint64_t KB::UserDictionary::single_character_completions_for_shortcut_prefix@<X0>(KB::UserDictionary *this@<X0>, const KB::String *a2@<X1>, uint64_t a3@<X8>)
{
  KB::String *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;

  *(_DWORD *)a3 = 0x100000;
  *(_WORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  if (*((_QWORD *)a2 + 1))
    v6 = (KB::String *)*((_QWORD *)a2 + 1);
  else
    v6 = (const KB::String *)((char *)a2 + 16);
  result = KB::String::hash(v6, (const char *)*(unsigned __int16 *)a2);
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    v9 = result;
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = result;
      if (v8 <= result)
        v12 = result % v8;
    }
    else
    {
      v12 = ((_DWORD)v8 - 1) & result;
    }
    v13 = *(_QWORD **)(*((_QWORD *)this + 6) + 8 * v12);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (v14 + 2 == (_QWORD *)a2)
              return (uint64_t)KB::String::operator=((KB::String *)a3, (KB::String *)(v14 + 6));
            result = KB::String::equal((KB::String *)(v14 + 2), a2, 1);
            if ((result & 1) != 0)
              return (uint64_t)KB::String::operator=((KB::String *)a3, (KB::String *)(v14 + 6));
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v8)
                v15 %= v8;
            }
            else
            {
              v15 &= v8 - 1;
            }
            if (v15 != v12)
              return result;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t KB::UserDictionary::maximum_shortcut_length(KB::UserDictionary *this)
{
  return *((unsigned int *)this + 22);
}

void KB::match_shortcut_conversion_case_with_input(KB *this@<X0>, const KB::String *a2@<X1>, KB::String *a3@<X8>)
{
  BOOL v6;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  KB *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __n128 (*v34)(__n128 *, __n128 *);
  uint64_t (*v35)();
  const char *v36;
  __int128 v37;

  if (*(_WORD *)this)
    v6 = *(unsigned __int16 *)a2 == 0;
  else
    v6 = 1;
  if (v6)
  {
    KB::String::String(a3, a2);
  }
  else
  {
    KB::ns_string(a2, a2);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "lowercaseLetterCharacterSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "uppercaseLetterCharacterSet");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "rangeOfCharacterFromSet:", v10);
      if (v12 && (objc_msgSend(v9, "rangeOfCharacterFromSet:", v11), !v13))
      {
        KB::ns_string(this, 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v14
          && (objc_msgSend(v14, "rangeOfCharacterFromSet:", v11), v16)
          && ((objc_msgSend(v15, "rangeOfCharacterFromSet:", v10), v17)
           || (unint64_t)objc_msgSend(v15, "length") < 2)
          && (objc_msgSend(v15, "capitalizedString"),
              v18 = (void *)objc_claimAutoreleasedReturnValue(),
              v19 = objc_msgSend(v15, "isEqualToString:", v18),
              v18,
              (v19 & 1) != 0))
        {
          v31 = 0;
          v32 = &v31;
          v33 = 0x4012000000;
          v34 = __Block_byref_object_copy__11648;
          v35 = __Block_byref_object_dispose__11649;
          v36 = "";
          v37 = xmmword_1DA910F40;
          v20 = objc_msgSend(v9, "length");
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 3221225472;
          v30[2] = ___ZN2KB41match_shortcut_conversion_case_with_inputERKNS_6StringES2__block_invoke;
          v30[3] = &unk_1EA1045F8;
          v30[4] = &v31;
          objc_msgSend(v9, "enumerateSubstringsInRange:options:usingBlock:", 0, v20, 515, v30);
          v21 = v32[6];
          if (v21 == 0x7FFFFFFFFFFFFFFFLL || (v22 = v32[7]) == 0)
          {
            KB::String::String(a3, a2);
          }
          else
          {
            if (v21 || v22 != objc_msgSend(v9, "length"))
            {
              objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", v9);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = v32[6];
              v27 = v32[7];
              objc_msgSend(v9, "substringWithRange:", v26, v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "capitalizedString");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "replaceCharactersInRange:withString:", v26, v27, v29);

              v25 = (uint64_t)a3;
              v23 = (KB *)v24;
            }
            else
            {
              objc_msgSend(v9, "capitalizedString");
              v23 = (KB *)objc_claimAutoreleasedReturnValue();
              v24 = v23;
              v25 = (uint64_t)a3;
            }
            KB::utf8_string(v23, v25);

          }
          _Block_object_dispose(&v31, 8);
        }
        else
        {
          KB::String::String(a3, a2);
        }

      }
      else
      {
        KB::String::String(a3, a2);
      }

    }
    else
    {
      KB::String::String(a3, a2);
    }

  }
}

__n128 __Block_byref_object_copy__11648(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t ___ZN2KB41match_shortcut_conversion_case_with_inputERKNS_6StringES2__block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7;

  *a7 = 1;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_QWORD *)(v7 + 48) = a3;
  *(_QWORD *)(v7 + 56) = a4;
  return result;
}

BOOL KB::should_match_input_with_shortcut(KB *this, const KB::String *a2, const KB::String *a3)
{
  void *v4;
  void *v5;
  void *v6;
  const KB::String *v7;
  void *v8;
  void *v9;
  int v10;
  _BOOL8 v11;

  if (!*(_WORD *)a2)
    return 0;
  KB::ns_string(a2, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "letterCharacterSet");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByTrimmingCharactersInSet:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 1;
  if (objc_msgSend(v6, "length"))
  {
    KB::ns_string(this, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringByTrimmingCharactersInSet:", v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v6, "isEqualToString:", v9);

    if (!v10)
      v11 = 0;
  }

  return v11;
}

unsigned int *TI::Favonius::SearchNodeSourceQueue::clone_search_substituting_touch(char **a1, unsigned int ***a2, unsigned int ***a3, unsigned int ***a4, unsigned int **a5)
{
  unsigned int *v9;
  int64x2_t *v10;
  unsigned int **v11;
  unsigned int **v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  char *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unsigned int *result;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int *v84;
  uint64_t v85;
  int64x2_t v86;
  unint64_t v87;
  char **v88;

  v9 = *a5;
  *a5 = 0;
  v83 = v9;
  a1[1] = *a1;
  v10 = (int64x2_t *)(a1 + 3);
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__clear[abi:nn180100]((unsigned int *)a1 + 6);
  v11 = *a3;
  v12 = a3[1];
  v13 = v12 - *a3 + a2[1] - *a2 + a4[1] - *a4;
  v14 = a1[3];
  if (v13 > (a1[5] - v14) >> 3)
  {
    if (v13 >> 61)
      goto LABEL_76;
    v15 = (char *)(a1[4] - v14);
    v88 = a1 + 5;
    v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v13);
    v19 = a1[3];
    v18 = a1[4];
    if (v18 == v19)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v16[(unint64_t)v15 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v20 = &v16[(unint64_t)v15 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v21 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v20 - 1) = v21;
        v20 -= 8;
      }
      while (v18 != v19);
      v22 = *v10;
    }
    a1[3] = v20;
    a1[4] = &v16[(unint64_t)v15 & 0xFFFFFFFFFFFFFFF8];
    v86 = v22;
    v23 = a1[5];
    a1[5] = &v16[8 * v17];
    v87 = (unint64_t)v23;
    v85 = v22.i64[0];
    std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v85);
    v11 = *a3;
    v12 = a3[1];
  }
  TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>((unsigned int *)a1, v11, v12, &v83);
  TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>((unsigned int *)a1, *a4, a4[1], &v83);
  v24 = *a2;
  v25 = a2[1];
  if (*a2 != v25)
  {
    do
    {
      v26 = *v24;
      if (*v24)
      {
        v27 = v26 + 2;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
      }
      v84 = v83;
      if (v83)
      {
        v29 = v83 + 2;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
      }
      (*(void (**)(uint64_t *__return_ptr, unsigned int *, unsigned int **))(*(_QWORD *)v26 + 24))(&v85, v26, &v84);
      v31 = v85;
      v85 = 0;
      if (v84)
      {
        v32 = v84 + 2;
        v33 = atomic_load(v84 + 2);
        if (v33 == 1)
        {
          (*(void (**)(void))(*(_QWORD *)v84 + 8))();
        }
        else
        {
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
        }
      }
      if (v31)
      {
        v36 = a1[4];
        v35 = (unint64_t)a1[5];
        if ((unint64_t)v36 >= v35)
        {
          v38 = (char *)v10->i64[0];
          v39 = (uint64_t)&v36[-v10->i64[0]] >> 3;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61)
            goto LABEL_76;
          v41 = v35 - (_QWORD)v38;
          if (v41 >> 2 > v40)
            v40 = v41 >> 2;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v42 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          v88 = a1 + 5;
          if (v42)
          {
            v42 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v42);
            v38 = a1[3];
            v36 = a1[4];
          }
          else
          {
            v43 = 0;
          }
          v44 = (char *)(v42 + 8 * v39);
          v45 = v42 + 8 * v43;
          v87 = v45;
          *(_QWORD *)v44 = 0;
          v86.i64[1] = (uint64_t)(v44 + 8);
          if (v36 == v38)
          {
            v37 = v44 + 8;
          }
          else
          {
            do
            {
              v46 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *(_QWORD *)v36 = 0;
              *((_QWORD *)v44 - 1) = v46;
              v44 -= 8;
            }
            while (v36 != v38);
            v37 = (char *)v86.i64[1];
            v45 = v87;
          }
          v47 = *(_OWORD *)(a1 + 3);
          a1[3] = v44;
          a1[4] = v37;
          v86 = (int64x2_t)v47;
          v48 = a1[5];
          a1[5] = (char *)v45;
          v87 = (unint64_t)v48;
          v85 = v47;
          std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v85);
        }
        else
        {
          *(_QWORD *)v36 = 0;
          v37 = v36 + 8;
        }
        a1[4] = v37;
        v49 = (unsigned int *)*((_QWORD *)v37 - 1);
        *((_QWORD *)v37 - 1) = v31;
        if (v49)
        {
          v50 = v49 + 2;
          v51 = atomic_load(v49 + 2);
          if (v51 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
          }
          else
          {
            do
              v52 = __ldaxr(v50);
            while (__stlxr(v52 - 1, v50));
          }
        }
      }
      v53 = v26 + 2;
      v54 = atomic_load(v26 + 2);
      if (v54 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
      }
      else
      {
        do
          v55 = __ldaxr(v53);
        while (__stlxr(v55 - 1, v53));
      }
      ++v24;
    }
    while (v24 != v25);
  }
  v56 = a1[4] - a1[3];
  if (v56 >> 3 > (unint64_t)((a1[2] - *a1) >> 3))
  {
    if ((v56 & 0x8000000000000000) == 0)
    {
      v57 = a1[1] - *a1;
      v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v56 >> 3);
      v59 = &v58[v57 & 0xFFFFFFFFFFFFFFF8];
      v61 = &v58[8 * v60];
      v63 = *a1;
      v62 = a1[1];
      v64 = v59;
      if (v62 != *a1)
      {
        do
        {
          v65 = *((_QWORD *)v62 - 1);
          v62 -= 8;
          *((_QWORD *)v64 - 1) = v65;
          v64 -= 8;
        }
        while (v62 != v63);
        v62 = *a1;
      }
      *a1 = v64;
      a1[1] = v59;
      a1[2] = v61;
      if (v62)
        operator delete(v62);
      goto LABEL_52;
    }
LABEL_76:
    abort();
  }
LABEL_52:
  v66 = a1[3];
  if (v66 != a1[4])
  {
    v67 = a1[1];
    do
    {
      v68 = *(_QWORD *)v66;
      v69 = (unint64_t)a1[2];
      if ((unint64_t)v67 >= v69)
      {
        v70 = (v67 - *a1) >> 3;
        if ((unint64_t)(v70 + 1) >> 61)
          goto LABEL_76;
        v71 = v69 - (_QWORD)*a1;
        v72 = v71 >> 2;
        if (v71 >> 2 <= (unint64_t)(v70 + 1))
          v72 = v70 + 1;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v72;
        if (v73)
          v73 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v73);
        else
          v74 = 0;
        v75 = (char *)(v73 + 8 * v70);
        *(_QWORD *)v75 = v68;
        v67 = v75 + 8;
        v77 = *a1;
        v76 = a1[1];
        if (v76 != *a1)
        {
          do
          {
            v78 = *((_QWORD *)v76 - 1);
            v76 -= 8;
            *((_QWORD *)v75 - 1) = v78;
            v75 -= 8;
          }
          while (v76 != v77);
          v76 = *a1;
        }
        *a1 = v75;
        a1[1] = v67;
        a1[2] = (char *)(v73 + 8 * v74);
        if (v76)
          operator delete(v76);
      }
      else
      {
        *(_QWORD *)v67 = v68;
        v67 += 8;
      }
      a1[1] = v67;
      v66 += 8;
    }
    while (v66 != a1[4]);
  }
  TI::Favonius::SearchNodeSourceQueue::make_heap((float *)a1);
  result = v83;
  if (v83)
  {
    v80 = v83 + 2;
    v81 = atomic_load(v83 + 2);
    if (v81 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v83 + 8))();
    }
    else
    {
      do
        v82 = __ldaxr(v80);
      while (__stlxr(v82 - 1, v80));
    }
  }
  return result;
}

unsigned int *TI::Favonius::SearchNodeSourceQueue::add_clone_substituting_touch_to_strong_refs<std::__wrap_iter<WTF::RefPtr<TI::Favonius::SearchNode> const*>>(unsigned int *result, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  unsigned int *v43;

  if (a2 != a3)
  {
    v6 = a2;
    v7 = result;
    v8 = result + 10;
    do
    {
      v9 = *v6;
      if (*v6)
      {
        v10 = v9 + 2;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      v12 = *a4;
      v39 = v12;
      if (v12)
      {
        v13 = v12 + 2;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      (*(void (**)(uint64_t *__return_ptr, unsigned int *, unsigned int **))(*(_QWORD *)v9 + 24))(&v40, v9, &v39);
      result = v39;
      v15 = v40;
      v40 = 0;
      if (v39)
      {
        v16 = v39 + 2;
        v17 = atomic_load(v39 + 2);
        if (v17 == 1)
        {
          result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v39 + 8))();
        }
        else
        {
          do
            v18 = __ldaxr(v16);
          while (__stlxr(v18 - 1, v16));
        }
      }
      if (v15)
      {
        v20 = (_QWORD *)*((_QWORD *)v7 + 4);
        v19 = *((_QWORD *)v7 + 5);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (_QWORD *)*((_QWORD *)v7 + 3);
          v23 = v20 - v22;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61)
            abort();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 2 > v24)
            v24 = v25 >> 2;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          v43 = v8;
          if (v26)
          {
            v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v26);
            v22 = (_QWORD *)*((_QWORD *)v7 + 3);
            v20 = (_QWORD *)*((_QWORD *)v7 + 4);
          }
          else
          {
            v27 = 0;
          }
          v28 = (_QWORD *)(v26 + 8 * v23);
          v29 = v26 + 8 * v27;
          v42 = v29;
          *v28 = 0;
          *((_QWORD *)&v41 + 1) = v28 + 1;
          if (v20 == v22)
          {
            v21 = v28 + 1;
          }
          else
          {
            do
            {
              v30 = *--v20;
              *v20 = 0;
              *--v28 = v30;
            }
            while (v20 != v22);
            v21 = (_QWORD *)*((_QWORD *)&v41 + 1);
            v29 = v42;
          }
          v31 = *(_OWORD *)(v7 + 6);
          *((_QWORD *)v7 + 3) = v28;
          *((_QWORD *)v7 + 4) = v21;
          v41 = v31;
          v32 = *((_QWORD *)v7 + 5);
          *((_QWORD *)v7 + 5) = v29;
          v42 = v32;
          v40 = v31;
          std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v40);
        }
        else
        {
          *v20 = 0;
          v21 = v20 + 1;
        }
        *((_QWORD *)v7 + 4) = v21;
        result = (unsigned int *)*(v21 - 1);
        *(v21 - 1) = v15;
        if (result)
        {
          v33 = result + 2;
          v34 = atomic_load(result + 2);
          if (v34 == 1)
          {
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
          }
          else
          {
            do
              v35 = __ldaxr(v33);
            while (__stlxr(v35 - 1, v33));
          }
        }
      }
      v36 = v9 + 2;
      v37 = atomic_load(v9 + 2);
      if (v37 == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        do
          v38 = __ldaxr(v36);
        while (__stlxr(v38 - 1, v36));
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

float *TI::Favonius::SearchNodeSourceQueue::make_heap(float *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v2 >= 9)
  {
    v3 = v2 >> 3;
    v4 = (unint64_t)((v2 >> 3) - 2) >> 1;
    v5 = v4;
    do
    {
      v6 = v5;
      if (v2 >= 16 && v4 >= v5)
      {
        v7 = (2 * v5) | 1;
        v8 = (_QWORD *)(v1 + 8 * v7);
        if (2 * v6 + 2 < v3)
        {
          this = (float *)v8[1];
          if (*(float *)(*v8 + 24) < this[6])
          {
            ++v8;
            v7 = 2 * v6 + 2;
          }
        }
        v9 = (_QWORD *)(v1 + 8 * v6);
        v10 = *v8;
        v11 = *v9;
        v12 = *(float *)(*v9 + 24);
        if (*(float *)(*v8 + 24) >= v12)
        {
          do
          {
            *v9 = v10;
            v9 = v8;
            if (v4 < v7)
              break;
            v13 = 2 * v7;
            v7 = (2 * v7) | 1;
            v8 = (_QWORD *)(v1 + 8 * v7);
            v14 = v13 + 2;
            if (v14 < v3)
            {
              this = (float *)(v8 + 1);
              if (*(float *)(*v8 + 24) < *(float *)(v8[1] + 24))
              {
                ++v8;
                v7 = v14;
              }
            }
            v10 = *v8;
          }
          while (*(float *)(*v8 + 24) >= v12);
          *v9 = v11;
        }
      }
      v5 = v6 - 1;
    }
    while (v6);
  }
  return this;
}

_QWORD *TI::Favonius::SearchNodeSourceQueue::next_search_node@<X0>(_QWORD *this@<X0>, float a2@<S0>, TI::Favonius::SearchNodeSource **a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  TI::Favonius::SearchNodeSource **v6;
  TI::Favonius::SearchNodeSource *v7;
  TI::Favonius::SearchNodeSource *v9;
  TI::Favonius::SearchNodeSource *v10;
  unint64_t v11;
  TI::Favonius::SearchNodeSource **v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  TI::Favonius::SearchNodeSource **v20;
  unint64_t v21;
  TI::Favonius::SearchNodeSource *v22;
  __int128 v23;
  unint64_t v24;
  TI::Favonius::SearchNodeSource *v26;
  __int128 v27;
  unint64_t v28;
  _QWORD *v29;

  v4 = this;
  v5 = this + 5;
  while (1)
  {
    v6 = (TI::Favonius::SearchNodeSource **)*v4;
    if (*v4 == v4[1])
      break;
    v7 = *v6;
    if ((*((_DWORD *)*v6 + 6) & 0x7FFFFFFFu) > 0x7F7FFFFF || *((float *)*v6 + 6) < a2)
      break;
    TI::Favonius::SearchNodeSourceQueue::pop_heap((TI::Favonius::SearchNodeSourceQueue *)v4);
    (*(void (**)(TI::Favonius::SearchNodeSource **__return_ptr, TI::Favonius::SearchNodeSource *))(*(_QWORD *)v7 + 32))(&v26, v7);
    v9 = v26;
    if (v26)
    {
      v10 = 0;
    }
    else
    {
      (*(void (**)(TI::Favonius::SearchNodeSource **__return_ptr, TI::Favonius::SearchNodeSource *))(*(_QWORD *)v7 + 40))(&v26, v7);
      v10 = v26;
      if (!v26)
        (*(void (**)(TI::Favonius::SearchNodeSource *))(*(_QWORD *)v7 + 48))(v7);
    }
    if ((*((_DWORD *)v7 + 6) & 0x7FFFFFFFu) < 0x7F800000
      || (this = (_QWORD *)(*(uint64_t (**)(TI::Favonius::SearchNodeSource *))(*(_QWORD *)v7 + 16))(v7),
          (_DWORD)this))
    {
      this = (_QWORD *)TI::Favonius::SearchNodeSourceQueue::push_heap((TI::Favonius::SearchNodeSourceQueue *)v4, v7);
    }
    if (v10)
    {
      this = (_QWORD *)TI::Favonius::SearchNodeSourceQueue::push_heap((TI::Favonius::SearchNodeSourceQueue *)v4, v10);
      v12 = (TI::Favonius::SearchNodeSource **)v4[4];
      v11 = v4[5];
      if ((unint64_t)v12 >= v11)
      {
        v14 = (_QWORD *)v4[3];
        v15 = v12 - (TI::Favonius::SearchNodeSource **)v14;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v29 = v5;
        if (v18)
        {
          v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v18);
          v14 = (_QWORD *)v4[3];
          v12 = (TI::Favonius::SearchNodeSource **)v4[4];
        }
        else
        {
          v19 = 0;
        }
        v20 = (TI::Favonius::SearchNodeSource **)(v18 + 8 * v15);
        v21 = v18 + 8 * v19;
        v28 = v21;
        *v20 = v10;
        *((_QWORD *)&v27 + 1) = v20 + 1;
        if (v12 == v14)
        {
          v13 = v20 + 1;
        }
        else
        {
          do
          {
            v22 = *--v12;
            *v12 = 0;
            *--v20 = v22;
          }
          while (v12 != v14);
          v13 = (_QWORD *)*((_QWORD *)&v27 + 1);
          v21 = v28;
        }
        v23 = *(_OWORD *)(v4 + 3);
        v4[3] = v20;
        v4[4] = v13;
        v27 = v23;
        v24 = v4[5];
        v4[5] = v21;
        v28 = v24;
        v26 = (TI::Favonius::SearchNodeSource *)v23;
        this = (_QWORD *)std::__split_buffer<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::~__split_buffer((uint64_t)&v26);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      v4[4] = v13;
    }
    if (v9)
      goto LABEL_35;
  }
  v9 = 0;
LABEL_35:
  *a3 = v9;
  return this;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::pop_heap(TI::Favonius::SearchNodeSourceQueue *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD **)this;
  v3 = *((_QWORD *)this + 1);
  v4 = *v2;
  if (v3 - (uint64_t)v2 >= 9)
  {
    v5 = 0;
    v6 = (v3 - (uint64_t)v2) >> 3;
    v7 = v2;
    do
    {
      v8 = v7;
      v7 += v5 + 1;
      v9 = 2 * v5;
      v5 = (2 * v5) | 1;
      v10 = v9 + 2;
      if (v10 < v6 && *(float *)(*v7 + 24) < *(float *)(v7[1] + 24))
      {
        ++v7;
        v5 = v10;
      }
      *v8 = *v7;
    }
    while (v5 <= (uint64_t)((unint64_t)(v6 - 2) >> 1));
    v11 = (_QWORD *)(v3 - 8);
    if (v7 == v11)
    {
      *v7 = v4;
    }
    else
    {
      *v7 = *v11;
      *v11 = v4;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>((uint64_t)v2, (uint64_t)(v7 + 1), v7 + 1 - v2);
    }
  }
  *((_QWORD *)this + 1) -= 8;
  return v4;
}

uint64_t TI::Favonius::SearchNodeSourceQueue::push_heap(TI::Favonius::SearchNodeSourceQueue *this, TI::Favonius::SearchNodeSource *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v4 - *(_QWORD *)this;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = a2;
    v6 = (uint64_t)(v12 + 1);
    v15 = *(char **)this;
    v14 = (char *)*((_QWORD *)this + 1);
    if (v14 != *(char **)this)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = *(char **)this;
    }
    *(_QWORD *)this = v12;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  *((_QWORD *)this + 1) = v6;
  return std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>(*(_QWORD *)this, v6, (v6 - *(_QWORD *)this) >> 3);
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeSourceQueue::BoundComparator &,std::__wrap_iter<TI::Favonius::SearchNodeSource **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 24);
    if (*(float *)(*v4 + 24) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 24) < v9);
      *v10 = v7;
    }
  }
  return result;
}

void TI::Favonius::SearchNodeSourceQueue::clean_up(TI::Favonius::SearchNodeSourceQueue *this)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  void **v21;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v20 = 0;
  v19 = 0uLL;
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v7 = 0;
  }
  else
  {
    if (v2 - v3 < 0)
      abort();
    v5 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v4 >> 3);
    v7 = &v5[v6];
    *(_QWORD *)&v19 = v5;
    v20 = v7;
    bzero(v5, v4);
    *((_QWORD *)&v19 + 1) = (char *)v5 + v4;
    v8 = *(uint64_t **)this;
    v9 = (uint64_t *)*((_QWORD *)this + 1);
    if (*(uint64_t **)this != v9)
    {
      do
      {
        v10 = *v8;
        if (*v8)
        {
          v11 = (unsigned int *)(v10 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
        v13 = (unsigned int *)*v5;
        *v5 = v10;
        if (v13)
        {
          v14 = v13 + 2;
          v15 = atomic_load(v13 + 2);
          if (v15 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
          }
          else
          {
            do
              v16 = __ldaxr(v14);
            while (__stlxr(v16 - 1, v14));
          }
        }
        ++v8;
        ++v5;
      }
      while (v8 != v9);
      v7 = v20;
    }
  }
  v17 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v19;
  v19 = v17;
  v18 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v7;
  v20 = v18;
  v21 = (void **)&v19;
  std::vector<WTF::RefPtr<TI::Favonius::SearchNodeSource>>::__destroy_vector::operator()[abi:nn180100](&v21);
}

void TI::Favonius::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(TI::Favonius::SearchNodeGeometryExtensions *this)
{
  TI::Favonius::SearchNodeGeometryExtensions::~SearchNodeGeometryExtensions(this);
  JUMPOUT(0x1DF0A2144);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1EA102688;
  WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::~Vector((_QWORD *)this + 5);
  v2 = (unsigned int *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  *(_QWORD *)this = off_1EA102A78;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = v6 + 2;
    v8 = atomic_load(v6 + 2);
    if (v8 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
    }
  }
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::can_refill_on_clone(TI::Favonius::SearchNodeGeometryExtensions *this)
{
  return 1;
}

unsigned int *TI::Favonius::SearchNodeGeometryExtensions::clone_substituting_touch@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v6 = operator new();
  v7 = *a2;
  *a2 = 0;
  v12 = v7;
  *a3 = TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(v6, a1, (uint64_t *)&v12);
  result = v12;
  if (v12)
  {
    v9 = v12 + 2;
    v10 = atomic_load(v12 + 2);
    if (v10 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8))();
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
  }
  return result;
}

unsigned int *TI::Favonius::SearchNodeGeometryExtensions::branch_at_current_bound@<X0>(unsigned int *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = (uint64_t)this;
    v5 = v3 - 1;
    v6 = *(unsigned int **)(*((_QWORD *)this + 6) + 8 * (v3 - 1));
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      v5 = *((_QWORD *)this + 5) - 1;
      v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v5);
      if (v8)
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v8);
    }
    *(_QWORD *)(v4 + 40) = v5;
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(v4);
    v9 = *(_QWORD *)(v4 + 32);
    v10 = *(unsigned int **)(v4 + 16);
    v18 = v10;
    if (v10)
    {
      v11 = v10 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v17 = v6;
    if (v6)
    {
      do
        v13 = __ldaxr(v6);
      while (__stlxr(v13 + 1, v6));
    }
    (*(void (**)(uint64_t, uint64_t, unsigned int **, unsigned int **, float))(*(_QWORD *)v4 + 56))(v4, v9, &v18, &v17, *(float *)(v4 + 64));
    if (v17)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v17);
    this = v18;
    if (v18)
    {
      v14 = v18 + 2;
      v15 = atomic_load(v18 + 2);
      if (v15 == 1)
      {
        this = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8))();
      }
      else
      {
        do
          v16 = __ldaxr(v14);
        while (__stlxr(v16 - 1, v14));
      }
    }
    if (v6)
      return (unsigned int *)WTF::RefCounted<TI::Favonius::KeyMatch>::deref((uint64_t)v6);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

unsigned int *TI::Favonius::SearchNodeGeometryExtensions::create_extension@<X0>(uint64_t a1@<X1>, unsigned int **a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *result;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v21 = v12;
  v22 = v11;
  v20 = 0;
  *a4 = TI::Favonius::SearchNode::SearchNode(v10, a1, (uint64_t *)&v22, &v21, (uint64_t *)&v20, 0, a5, NAN);
  if (v20)
  {
    v13 = v20 + 2;
    v14 = atomic_load(v20 + 2);
    if (v14 == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v20 + 248))();
    }
    else
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
    }
  }
  if (v21)
    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v21);
  result = v22;
  if (v22)
  {
    v17 = v22 + 2;
    v18 = atomic_load(v22 + 2);
    if (v18 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 8))();
    }
    else
    {
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 - 1, v17));
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  v1 = this;
  if (*(_BYTE *)(this + 68))
    this = TI::Favonius::SearchNodeGeometryExtensions::pop_nonletter_keys(this);
  v2 = *(_QWORD *)(v1 + 40);
  if (v2)
    v3 = *(float *)(v1 + 72) + *(float *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v2 - 8) + 32);
  else
    v3 = -INFINITY;
  *(float *)(v1 + 24) = v3;
  return this;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::pop_nonletter_keys(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = this;
    v3 = v1 - 1;
    do
    {
      this = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v3);
      if ((*(_WORD *)(*(_QWORD *)(this + 8) + 60) & 0x22) != 0)
        break;
      this = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(this);
      *(_QWORD *)(v2 + 40) = v3--;
    }
    while (v3 != -1);
  }
  return this;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t *v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t i;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v32;

  v5 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(_QWORD *)a1 = &off_1EA102688;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v9 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  v10 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 72) = v10;
  if ((v10 & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v11 = (unint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((_QWORD *)(a1 + 40), *v11);
    v12 = *v11;
    while (v12)
    {
      --v12;
      v13 = v11[1] + 8 * v12;
      if (!(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 72))(*(_QWORD *)(a2 + 16), *(__int16 *)(*(_QWORD *)(*(_QWORD *)v13 + 8) + 62)))
      {
        v14 = *(_QWORD *)(a1 + 40);
        if (v14 != *(_QWORD *)(a1 + 56))
        {
          v16 = *(_QWORD *)(a1 + 48);
          goto LABEL_11;
        }
        v15 = WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::expandCapacity((_QWORD *)(a1 + 40), v14 + 1, v13);
        v16 = *(_QWORD *)(a1 + 48);
        if (v16)
        {
          v13 = v15;
          v14 = *v9;
LABEL_11:
          v17 = *(unsigned int **)v13;
          *(_QWORD *)(v16 + 8 * v14) = *(_QWORD *)v13;
          if (v17)
          {
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
            v14 = *v9;
          }
          *v9 = v14 + 1;
        }
      }
    }
    if (*(_QWORD *)(a2 + 40))
    {
      for (i = *(_QWORD *)(a2 + 48); i != *(_QWORD *)(a2 + 48) + 8 * *(_QWORD *)(a2 + 40); i += 8)
      {
        v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), *(__int16 *)(*(_QWORD *)(*(_QWORD *)i + 8) + 62));
        if (v20)
        {
          v21 = (unsigned int *)v20;
          v22 = *(_QWORD *)(a1 + 40);
          if (v22 == *(_QWORD *)(a1 + 56))
          {
            v23 = v22 + (v22 >> 1);
            if (v22 < 0x100)
              v23 = 2 * v22;
            if (v23 <= v22 + 1)
              v24 = v22 + 1;
            else
              v24 = v23;
            WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity((_QWORD *)(a1 + 40), v24);
            v25 = *(_QWORD *)(a1 + 48);
            if (!v25)
              continue;
            v22 = *v9;
          }
          else
          {
            v25 = *(_QWORD *)(a1 + 48);
          }
          *(_QWORD *)(v25 + 8 * v22) = v21;
          do
            v26 = __ldaxr(v21);
          while (__stlxr(v26 + 1, v21));
          ++*v9;
        }
      }
    }
    v28 = *(_QWORD *)(a1 + 40);
    v27 = *(_QWORD *)(a1 + 48);
    v32 = &__block_literal_global_11704;
    v29 = 126 - 2 * __clz(v28);
    if (v28)
      v30 = v29;
    else
      v30 = 0;
    std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v27, (uint64_t *)(v27 + 8 * v28), (uint64_t)&v32, v30, 1);
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(a1);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v9 = (uint64_t *)result;
LABEL_2:
  v89 = a2;
  v91 = a2 - 1;
  v87 = a2 - 3;
  v88 = a2 - 2;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
        if ((_DWORD)result)
        {
          v35 = *v10;
          *v10 = *v91;
          *v91 = v35;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v91, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v91, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, v10 + 1, v10 + 2, v10 + 3, v91, a3);
      default:
        if (v11 <= 191)
        {
          v36 = v10 + 1;
          v38 = v10 == a2 || v36 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v38)
            {
              v39 = 0;
              do
              {
                v40 = v36;
                result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                if ((_DWORD)result)
                {
                  v41 = 0;
                  v42 = *v40;
                  *v40 = 0;
                  v95 = v42;
                  for (i = v39; ; i -= 8)
                  {
                    v44 = (uint64_t *)((char *)v10 + i);
                    v45 = *(uint64_t *)((char *)v10 + i);
                    *v44 = 0;
                    v44[1] = v45;
                    if (v41)
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v41);
                    if (!i)
                      break;
                    v46 = (uint64_t *)((char *)v10 + i);
                    if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                      goto LABEL_80;
                    v41 = *v44;
                  }
                  v46 = v10;
LABEL_80:
                  result = *v46;
                  *v46 = v95;
                  a2 = v89;
                  if (result)
                  {
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                    result = 0;
                  }
                }
                v36 = v40 + 1;
                v39 += 8;
              }
              while (v40 + 1 != a2);
            }
          }
          else if (!v38)
          {
            do
            {
              v83 = v36;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              if ((_DWORD)result)
              {
                v84 = 0;
                v85 = *v83;
                *v83 = 0;
                v98 = v85;
                while (1)
                {
                  v86 = *v9;
                  *v9 = 0;
                  v9[1] = v86;
                  if (v84)
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v84);
                  if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                    break;
                  v84 = *v9--;
                }
                result = *v9;
                *v9 = v98;
                if (result)
                {
                  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                  result = 0;
                }
              }
              v36 = v83 + 1;
              v9 = v83;
            }
            while (v83 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v47 = (v12 - 2) >> 1;
            v92 = v47;
            do
            {
              v48 = v47;
              if (v92 >= v47)
              {
                v49 = (2 * v47) | 1;
                v50 = &v9[v49];
                if (2 * v47 + 2 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v50;
                  v49 = 2 * v48 + 2;
                }
                v51 = &v9[v48];
                a2 = v89;
                if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
                {
                  v52 = *v51;
                  *v51 = 0;
                  v96 = v52;
                  do
                  {
                    v53 = v50;
                    v54 = *v50;
                    *v50 = 0;
                    v55 = *v51;
                    *v51 = v54;
                    if (v55)
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v55);
                    if (v92 < v49)
                      break;
                    v56 = (2 * v49) | 1;
                    v50 = &v9[v56];
                    v57 = 2 * v49 + 2;
                    if (v57 < (uint64_t)v12 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                    {
                      ++v50;
                      v56 = v57;
                    }
                    v51 = v53;
                    v49 = v56;
                  }
                  while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
                  v58 = *v53;
                  *v53 = v96;
                  if (v58)
                    WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v58);
                  a2 = v89;
                }
              }
              v47 = v48 - 1;
            }
            while (v48);
            v59 = (unint64_t)v11 >> 3;
            do
            {
              v60 = a2;
              v61 = 0;
              v62 = *v9;
              *v9 = 0;
              v63 = v59 - 2;
              v90 = v62;
              if (v59 < 2)
                v63 = v59 - 1;
              v64 = v63 >> 1;
              v65 = v9;
              do
              {
                v66 = &v65[v61 + 1];
                v67 = 2 * v61;
                v61 = (2 * v61) | 1;
                v68 = v67 + 2;
                if (v67 + 2 < v59 && (*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
                {
                  ++v66;
                  v61 = v68;
                }
                v69 = *v66;
                *v66 = 0;
                v70 = *v65;
                *v65 = v69;
                if (v70)
                  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v70);
                v65 = v66;
              }
              while (v61 <= v64);
              v71 = v60 - 1;
              if (v66 == v71)
              {
                v74 = v71;
                result = *v66;
                *v66 = v90;
                if (result)
                  result = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
              }
              else
              {
                v72 = *v71;
                *v71 = 0;
                v73 = *v66;
                *v66 = v72;
                if (v73)
                  WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v73);
                result = *v71;
                v74 = v71;
                *v71 = v90;
                if (result)
                  result = WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                v75 = (char *)(v66 + 1) - (char *)v9;
                if (v75 >= 9)
                {
                  v76 = (unint64_t)((v75 >> 3) - 2) >> 1;
                  v77 = &v9[v76];
                  result = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
                  if ((_DWORD)result)
                  {
                    v78 = *v66;
                    *v66 = 0;
                    v97 = v78;
                    do
                    {
                      v79 = v77;
                      v80 = *v77;
                      *v77 = 0;
                      v81 = *v66;
                      *v66 = v80;
                      if (v81)
                        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v81);
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                      v77 = &v9[v76];
                      v66 = v79;
                    }
                    while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
                    result = *v79;
                    *v79 = v97;
                    if (result)
                    {
                      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(result);
                      result = 0;
                    }
                  }
                }
              }
              v82 = v59-- <= 2;
              a2 = v74;
            }
            while (!v82);
          }
          return result;
        }
        v13 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(&v10[v12 >> 1], v10, v91, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10, &v10[v12 >> 1], v91, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 1, v13 - 1, v88, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v10 + 2, &v10[(v12 >> 1) + 1], v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(v13 - 1, &v10[v12 >> 1], &v10[(v12 >> 1) + 1], a3);
          v14 = *v10;
          *v10 = *v13;
          *v13 = v14;
        }
        --a4;
        a2 = v89;
        if ((a5 & 1) == 0 && ((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
        {
          v26 = *v10;
          *v10 = 0;
          v94 = v26;
          if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0)
          {
            do
              ++v10;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
          }
          else
          {
            v27 = v10 + 1;
            do
            {
              v10 = v27;
              if (v27 >= v89)
                break;
              v28 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
              v27 = v10 + 1;
            }
            while (!v28);
          }
          v29 = v89;
          if (v10 < v89)
          {
            v29 = v89;
            do
              --v29;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          while (v10 < v29)
          {
            v30 = *v10;
            *v10 = *v29;
            *v29 = v30;
            do
              ++v10;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
            do
              --v29;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
          }
          v31 = v10 - 1;
          if (v10 - 1 != v9)
          {
            v32 = *v31;
            *v31 = 0;
            v33 = *v9;
            *v9 = v32;
            if (v33)
              WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v33);
          }
          v34 = *v31;
          *v31 = v94;
          if (v34)
            WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v34);
          result = 0;
          a5 = 0;
          continue;
        }
        v15 = *v10;
        *v10 = 0;
        v93 = v15;
        v16 = v10;
        do
          v17 = v16++;
        while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
        v18 = v89;
        if (v17 == v10)
        {
          v18 = v89;
          do
          {
            if (v16 >= v18)
              break;
            --v18;
          }
          while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0);
        }
        else
        {
          do
            --v18;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
        }
        if (v16 < v18)
        {
          v19 = v16;
          v20 = v18;
          do
          {
            v21 = *v19;
            *v19 = *v20;
            *v20 = v21;
            do
              v17 = v19++;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) != 0);
            do
              --v20;
            while (!(*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))());
          }
          while (v19 < v20);
        }
        if (v17 != v9)
        {
          v22 = *v17;
          *v17 = 0;
          v23 = *v9;
          *v9 = v22;
          if (v23)
            WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v23);
        }
        v24 = *v17;
        *v17 = v93;
        if (v24)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v24);
        if (v16 < v18)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*,false>(v9, v17, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v17 + 1;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(v9, v17, a3);
        v10 = v17 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(v17 + 1, v89, a3);
        if (!(_DWORD)result)
        {
          if (v25)
            continue;
          goto LABEL_33;
        }
        a2 = v17;
        if (!v25)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::KeyMatch> const&,WTF::RefPtr<TI::Favonius::KeyMatch> const&),WTF::RefPtr<TI::Favonius::KeyMatch>*>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL({block_pointer}&)(WTF::RefPtr<TI::Favonius::TypingHypothesis> const&,WTF::RefPtr<TI::Favonius::TypingHypothesis> const&),WTF::RefPtr<TI::Favonius::TypingHypothesis>*>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*(unsigned int (**)(void))(*(_QWORD *)a3 + 16))())
    {
      v13 = 0;
      v14 = *v10;
      *v10 = 0;
      v20 = v14;
      for (i = v11; ; i -= 8)
      {
        v16 = (char *)a1 + i;
        v17 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v16 + 2) = 0;
        *((_QWORD *)v16 + 3) = v17;
        if (v13)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v13);
        if (i == -16)
        {
          v18 = a1;
          goto LABEL_15;
        }
        if (((*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))() & 1) == 0)
          break;
        v13 = *((_QWORD *)v16 + 2);
      }
      v18 = (uint64_t *)((char *)a1 + i + 16);
LABEL_15:
      v19 = *v18;
      *v18 = v20;
      if (v19)
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v19);
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL ___ZN2TI8Favonius28SearchNodeGeometryExtensionsC2ERKS1_N3WTF10PassRefPtrINS0_12TouchHistoryEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(float *)(*(_QWORD *)a2 + 32) < *(float *)(*(_QWORD *)a3 + 32);
}

unsigned int *TI::Favonius::SearchNodeGeometryExtensions::create@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v16 = v11;
  *a4 = TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(v10, a1, (uint64_t *)&v16, a3, a5, 0.0);
  result = v16;
  if (v16)
  {
    v13 = v16 + 2;
    v14 = atomic_load(v16 + 2);
    if (v14 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v16 + 8))();
    }
    else
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
    }
  }
  return result;
}

uint64_t TI::Favonius::SearchNodeGeometryExtensions::SearchNodeGeometryExtensions(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, float a5, float a6)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t *v10;
  float v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(_QWORD *)a1 = &off_1EA102688;
  *(_QWORD *)(a1 + 32) = a2;
  if (a2)
  {
    v8 = (unsigned int *)(a2 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 = (unint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(float *)(a1 + 64) = a5;
  *(_BYTE *)(a1 + 68) = a4;
  v11 = (float)(*(float *)(a2 + 144) + (float)(a5 * *(float *)(a2 + 136))) + a6;
  *(float *)(a1 + 72) = v11;
  if ((LODWORD(v11) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v12 = (unint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 64))(*(_QWORD *)(a1 + 16));
    WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=((unint64_t *)(a1 + 40), v12);
    v13 = *(_QWORD *)(a1 + 40);
    if (v13 >= 2)
    {
      v14 = 0;
      v15 = -1;
      do
      {
        v16 = *(_QWORD *)(a1 + 48);
        v17 = v13 + v15;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = 0;
        v19 = *(_QWORD *)(v16 + 8 * (v13 + v15));
        *(_QWORD *)(v16 + 8 * v17) = 0;
        v20 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v19;
        if (v20)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v20);
        v21 = *(_QWORD *)(v16 + 8 * v17);
        *(_QWORD *)(v16 + 8 * v17) = v18;
        if (v21)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v21);
        ++v14;
        v13 = *v10;
        --v15;
      }
      while (v14 < *v10 >> 1);
    }
    TI::Favonius::SearchNodeGeometryExtensions::set_bound_on_score(a1);
  }
  return a1;
}

unint64_t *WTF::Vector<WTF::RefPtr<TI::Favonius::KeyMatch>,0ul>::operator=(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  unsigned int **v12;
  unsigned int **v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int v23;

  if (a2 == a1)
    return a1;
  v4 = *a1;
  v5 = *a2;
  if (*a1 > *a2)
  {
    v6 = (uint64_t *)(a1[1] + 8 * v5);
    v7 = 8 * v4 - 8 * v5;
    do
    {
      if (*v6)
        WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v6);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    *a1 = v5;
    goto LABEL_20;
  }
  v8 = a1[2];
  if (v5 <= v8)
  {
    v5 = *a1;
    goto LABEL_20;
  }
  if (v8)
  {
    if (v4)
    {
      v9 = (uint64_t *)a1[1];
      v10 = 8 * v4;
      do
      {
        if (*v9)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(*v9);
        ++v9;
        v10 -= 8;
      }
      while (v10);
      *a1 = 0;
    }
    v11 = (void *)a1[1];
    a1[1] = 0;
    a1[2] = 0;
    free(v11);
    v5 = *a2;
  }
  WTF::Vector<WTF::RefPtr<TI::Favonius::LayoutKey>,0ul>::reserveCapacity(a1, v5);
  if (a1[1])
  {
    v5 = *a1;
LABEL_20:
    v12 = (unsigned int **)a2[1];
    if (v5)
    {
      v13 = &v12[v5];
      v14 = (uint64_t *)a1[1];
      do
      {
        v15 = *v12;
        if (*v12)
        {
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
        v17 = *v14;
        *v14 = (uint64_t)v15;
        if (v17)
          WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v17);
        ++v12;
        ++v14;
      }
      while (v12 != v13);
      v12 = (unsigned int **)a2[1];
      v18 = *a1;
    }
    else
    {
      v18 = 0;
    }
    if (v18 != *a2)
    {
      v19 = &v12[*a2];
      v20 = (unsigned int **)(a1[1] + 8 * v18);
      v21 = &v12[v18];
      do
      {
        v22 = *v21;
        *v20 = *v21;
        if (v22)
        {
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
        ++v20;
        ++v21;
      }
      while (v21 != v19);
      v18 = *a2;
    }
    *a1 = v18;
  }
  return a1;
}

void KB::InputManagerSpecializationTransliteration::~InputManagerSpecializationTransliteration(KB::InputManagerSpecializationTransliteration *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1EA0FD7C8;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 1) = 0;
}

{
  const void *v2;

  *(_QWORD *)this = &off_1EA0FD7C8;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 1) = 0;
  JUMPOUT(0x1DF0A2144);
}

_QWORD *KB::InputManagerSpecializationTransliteration::create_input_segment_filter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1EA102870;
  result[1] = 0;
  *((_DWORD *)result + 2) = 1;
  *a1 = result;
  return result;
}

void KB::NullInputSegmentFilter::~NullInputSegmentFilter(KB::NullInputSegmentFilter *this)
{
  JUMPOUT(0x1DF0A2144);
}

uint64_t KB::NullInputSegmentFilter::word_is_acceptable_for_input(KB::NullInputSegmentFilter *this, KB::Word *a2, const KB::String *a3)
{
  return 1;
}

uint64_t KB::NullInputSegmentFilter::letter_combines_with_selective_modifier(KB::NullInputSegmentFilter *this)
{
  return 1;
}

void std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1027D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA1027D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0A2144);
}

uint64_t std::__shared_ptr_emplace<KB::InputManagerSpecializationTransliteration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void TI::Favonius::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  TI::Favonius::SearchNodeLanguageExtensions::~SearchNodeLanguageExtensions(this);
  JUMPOUT(0x1DF0A2144);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = &off_1EA1028C8;
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::~Vector((uint64_t)this + 56);
  v2 = (unsigned int *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = v2 + 2;
    v4 = atomic_load(v2 + 2);
    if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    else
    {
      do
        v5 = __ldaxr(v3);
      while (__stlxr(v5 - 1, v3));
    }
  }
  *(_QWORD *)this = off_1EA102A78;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = v6 + 2;
    v8 = atomic_load(v6 + 2);
    if (v8 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    else
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 - 1, v7));
    }
  }
}

unsigned int *TI::Favonius::SearchNodeLanguageExtensions::clone_substituting_touch@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;

  v6 = operator new();
  v7 = *a2;
  *a2 = 0;
  v12 = v7;
  *a3 = TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(v6, a1, (uint64_t *)&v12);
  result = v12;
  if (v12)
  {
    v9 = v12 + 2;
    v10 = atomic_load(v12 + 2);
    if (v10 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 8))();
    }
    else
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
    }
  }
  return result;
}

unsigned int *TI::Favonius::SearchNodeLanguageExtensions::branch_at_current_bound@<X0>(TI::Favonius::SearchNodeLanguageExtensions *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;

  v6 = *((_QWORD *)this + 7);
  result = (unsigned int *)((char *)this + 56);
  v5 = v6;
  if (v6)
  {
    v7 = v5 - 1;
    v8 = *(unsigned int **)(*((_QWORD *)this + 8) + 8 * (v5 - 1));
    if (v8)
    {
      v9 = v8 + 2;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v7 = *(_QWORD *)result - 1;
    }
    WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::shrink(result, v7);
    TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(this);
    v11 = *((_QWORD *)this + 4);
    v12 = operator new();
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    v29 = v13;
    if (v13)
    {
      v14 = v13 + 2;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    v27 = v8;
    v28 = 0;
    if (v8)
    {
      v16 = v8 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    *a2 = TI::Favonius::SearchNode::SearchNode(v12, v11, (uint64_t *)&v29, &v28, (uint64_t *)&v27, 0, *((float *)this + 10), *((float *)this + 11));
    if (v27)
    {
      v18 = v27 + 2;
      v19 = atomic_load(v27 + 2);
      if (v19 == 1)
      {
        (*(void (**)(void))(*(_QWORD *)v27 + 248))();
      }
      else
      {
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
      }
    }
    if (v28)
      WTF::RefCounted<TI::Favonius::KeyMatch>::deref(v28);
    result = v29;
    if (v29)
    {
      v21 = v29 + 2;
      v22 = atomic_load(v29 + 2);
      if (v22 == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v29 + 8))();
      }
      else
      {
        do
          v23 = __ldaxr(v21);
        while (__stlxr(v23 - 1, v21));
      }
    }
    if (v8)
    {
      v24 = v8 + 2;
      v25 = atomic_load(v8 + 2);
      if (v25 == 1)
      {
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 248))(v8);
      }
      else
      {
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 - 1, v24));
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void TI::Favonius::SearchNodeLanguageExtensions::decrease_bound_on_score(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!*((_BYTE *)this + 52))
  {
    TI::Favonius::SearchNode::get_language_extensions(*((_QWORD *)this + 4), (unint64_t *)this + 7);
    *((_BYTE *)this + 52) = 1;
    v2 = *((_QWORD *)this + 7);
    v3 = 126 - 2 * __clz(v2);
    if (v2)
      v4 = v3;
    else
      v4 = 0;
    std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(*((unsigned int ***)this + 8), (unsigned int **)(*((_QWORD *)this + 8) + 8 * v2), v4, 1);
    TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(this);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *,false>(unsigned int **a1, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int **v13;
  unsigned int *v14;
  float v15;
  unsigned int *v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  float v20;
  unsigned int **v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  unsigned int **v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int *v29;
  float v30;
  uint64_t v31;
  float v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int *v43;
  float v44;
  float v45;
  unsigned int *v46;
  unsigned int **v47;
  float v48;
  unsigned int **v49;
  float v50;
  uint64_t v51;
  unsigned int *v52;
  float v53;
  unsigned int *v54;
  float v55;
  uint64_t v56;
  unsigned int **v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  unsigned int *v68;
  unsigned int **v69;
  BOOL v71;
  unsigned int **v72;
  unsigned int **v73;
  float v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int **i;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  float v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  unsigned int **v91;
  float v92;
  unsigned int **v93;
  float v94;
  unsigned int *v95;
  unsigned int **v96;
  unsigned int *v97;
  unsigned int *v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int **v115;
  unsigned int **v116;
  uint64_t v117;
  uint64_t v118;
  float v119;
  unsigned int *v120;
  unsigned int *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int **v125;
  unsigned int *v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int **v137;
  float v138;
  unsigned int *v139;
  unsigned int **v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  float v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int **v155;
  float v156;
  unsigned int *v157;
  unsigned int *v158;
  unsigned int **v159;
  unsigned int **v160;
  unsigned int *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  float v165;
  float v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  int64_t v170;

void TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(TI::Favonius::SearchNodeLanguageExtensions *this)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;

  if (*((_BYTE *)this + 52))
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v2 - 8);
      v4 = (*(float (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      v5 = *((float *)this + 12);
      v6 = *((float *)this + 10);
      v7 = v5 + (float)(v6 * logf(v4));
    }
    else
    {
      v7 = -INFINITY;
    }
  }
  else
  {
    v7 = *((float *)this + 12);
  }
  *((float *)this + 6) = v7;
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a2, a3, a4);
  v10 = (*(float (**)(_QWORD))(*(_QWORD *)*a5 + 24))(*a5);
  if (v10 < (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4))
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = (*(float (**)(_QWORD))(*(_QWORD *)*a4 + 24))(*a4);
    if (v12 < (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = (*(float (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3);
      if (v14 < (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = (*(float (**)(_QWORD))(*(_QWORD *)*a2 + 24))(*a2);
        if (v16 < (*(float (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1))
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  float v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int **i;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (*(float (**)(_QWORD))(*(_QWORD *)*(a2 - 1) + 24))(*(a2 - 1));
      if (v6 < (*(float (**)(unsigned int *))(*(_QWORD *)*a1 + 24))(*a1))
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TI::Favonius::SearchNodeLanguageExtensions::LetterExtensionComparator &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TI::CP::SearchNodeLanguageExtensions::decrease_bound_on_score(void)::$_0 &,WTF::RefPtr<TI::Favonius::TypingHypothesis> *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = (*(float (**)(unsigned int *))(*(_QWORD *)*v9 + 24))(*v9);
    if (v11 < (*(float (**)(unsigned int *))(*(_QWORD *)*v8 + 24))(*v8))
    {
      v12 = 0;
      v13 = *v9;
      *v9 = 0;
      for (i = v9; ; v12 = *i)
      {
        v15 = i;
        i = v8;
        v16 = *v8;
        *v8 = 0;
        *v15 = v16;
        if (v12)
        {
          v17 = v12 + 2;
          v18 = atomic_load(v12 + 2);
          if (v18 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 248))(v12);
          }
          else
          {
            do
              v19 = __ldaxr(v17);
            while (__stlxr(v19 - 1, v17));
          }
        }
        if (v8 == a1)
          break;
        v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
        --v8;
        if (v20 >= (*(float (**)(_QWORD))(*(_QWORD *)*(i - 1) + 24))(*(i - 1)))
          goto LABEL_16;
      }
      i = a1;
LABEL_16:
      v21 = *i;
      *i = v13;
      if (v21)
      {
        v22 = v21 + 2;
        v23 = atomic_load(v21 + 2);
        if (v23 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 248))(v21);
        }
        else
        {
          do
            v24 = __ldaxr(v22);
          while (__stlxr(v24 - 1, v22));
        }
      }
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9++;
    if (v9 == a2)
      return 1;
  }
}

uint64_t TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v4 = *a3;
  *a3 = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = -8388608;
  *(_QWORD *)a1 = &off_1EA1028C8;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  WTF::Vector<WTF::RefPtr<TI::Favonius::TypingHypothesis>,0ul>::Vector((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  return a1;
}

unsigned int *TI::Favonius::SearchNodeLanguageExtensions::create@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, TI::Favonius::SearchNodeLanguageExtensions **a3@<X8>, float a4@<S0>, float a5@<S1>, float a6@<S2>)
{
  TI::Favonius::SearchNodeLanguageExtensions *v12;
  unsigned int *v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;

  v12 = (TI::Favonius::SearchNodeLanguageExtensions *)operator new();
  v13 = *a2;
  *a2 = 0;
  v18 = v13;
  *a3 = TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(v12, a1, (uint64_t *)&v18, a4, a5, a6);
  result = v18;
  if (v18)
  {
    v15 = v18 + 2;
    v16 = atomic_load(v18 + 2);
    if (v16 == 1)
    {
      return (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v18 + 8))();
    }
    else
    {
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
    }
  }
  return result;
}

TI::Favonius::SearchNodeLanguageExtensions *TI::Favonius::SearchNodeLanguageExtensions::SearchNodeLanguageExtensions(TI::Favonius::SearchNodeLanguageExtensions *this, uint64_t a2, uint64_t *a3, float a4, float a5, float a6)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v7 = *a3;
  *a3 = 0;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = v7;
  *((_DWORD *)this + 6) = -8388608;
  *(_QWORD *)this = &off_1EA1028C8;
  *((_QWORD *)this + 4) = a2;
  if (a2)
  {
    v8 = (unsigned int *)(a2 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *((float *)this + 10) = a4;
  *((float *)this + 11) = a5;
  *((float *)this + 12) = (float)(*(float *)(a2 + 144) + (float)(a4 * *(float *)(a2 + 136))) + a6;
  *((_BYTE *)this + 52) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  TI::Favonius::SearchNodeLanguageExtensions::set_bound_on_score(this);
  return this;
}

uint64_t _shouldHandleSession(void *a1)
{
  id v1;
  uint64_t doesSessionContainValidStrings;

  v1 = a1;
  if (_isSessionAlignedConfidently(v1))
    doesSessionContainValidStrings = _doesSessionContainValidStrings(v1);
  else
    doesSessionContainValidStrings = 0;

  return doesSessionContainValidStrings;
}

