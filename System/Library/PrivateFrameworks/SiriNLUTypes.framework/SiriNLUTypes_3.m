uint64_t sub_1C1EAE548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    swift_retain();
LABEL_5:
    type metadata accessor for Siri_Nlu_External_SystemGaveOptions(0);
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v3, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019464();
    return swift_release();
  }
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  type metadata accessor for Siri_Nlu_External_UserDialogAct(0);
  sub_1C1EB31F4(&qword_1EF723EB8, v2, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  sub_1C1EB31F4(&qword_1ED7A0230, 255, type metadata accessor for Siri_Nlu_External_UserDialogAct, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserDialogAct);
  swift_retain();
  sub_1C2019890();
  if (!v1)
    goto LABEL_5;
  return swift_release();
}

uint64_t sub_1C1EAE690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723538);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1;
  v10 = type metadata accessor for Siri_Nlu_External_SystemOffered(0);
  sub_1C1D48918(a1 + *(int *)(v10 + 20), (uint64_t)v6, &qword_1EF723538);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    swift_retain();
    sub_1C1D48944((uint64_t)v6, &qword_1EF723538);
LABEL_4:
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v11, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019464();
    return swift_release();
  }
  sub_1C1D4B0A8((uint64_t)v6, (uint64_t)v9, type metadata accessor for Siri_Nlu_External_UserDialogAct);
  swift_retain();
  sub_1C1EADE34((uint64_t)v9, 1, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UserDialogAct, (void (*)(uint64_t, uint64_t *))sub_1C1EA8B44);
  sub_1C1D48A10((uint64_t)v9, type metadata accessor for Siri_Nlu_External_UserDialogAct);
  if (!v2)
    goto LABEL_4;
  return swift_release();
}

uint64_t sub_1C1EAE834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1;
  v10 = type metadata accessor for Siri_Nlu_External_UserStatedTask(0);
  sub_1C1D48918(a1 + *(int *)(v10 + 20), (uint64_t)v6, &qword_1ED79FE20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    swift_retain();
    sub_1C1D48944((uint64_t)v6, &qword_1ED79FE20);
LABEL_4:
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v11, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019464();
    return swift_release();
  }
  sub_1C1D4B0A8((uint64_t)v6, (uint64_t)v9, type metadata accessor for Siri_Nlu_External_UsoGraph);
  swift_retain();
  sub_1C1EADEF0((uint64_t)v9);
  sub_1C1D48A10((uint64_t)v9, type metadata accessor for Siri_Nlu_External_UsoGraph);
  if (!v2)
    goto LABEL_4;
  return swift_release();
}

uint64_t sub_1C1EAE9CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v8;

  OUTLINED_FUNCTION_92_4(a1, a2, a3);
  sub_1C1EB31F4(a4, 255, a3, a5);
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  sub_1C1EB31F4(&qword_1EF723EB8, v8, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  OUTLINED_FUNCTION_40();
  sub_1C20195C0();
  return OUTLINED_FUNCTION_44_9();
}

uint64_t sub_1C1EAEA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0680);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1C2019404();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1;
  v11 = type metadata accessor for Siri_Nlu_External_RRGroupIdentifier(0);
  sub_1C1D48918(a1 + *(int *)(v11 + 20), (uint64_t)v6, &qword_1ED7A0680);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    swift_retain();
    sub_1C1D48944((uint64_t)v6, &qword_1ED7A0680);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    swift_retain();
    sub_1C1EAE9CC((uint64_t)v10, 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E740], &qword_1ED7A0678, MEMORY[0x1E0D3E730]);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return swift_release();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if ((*(_BYTE *)(a1 + *(int *)(v11 + 24) + 4) & 1) != 0
    || (type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor(),
        sub_1C1EB31F4(&qword_1EF723EB8, v12, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8), sub_1C20197E8(), !v2))
  {
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v13, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019464();
  }
  return swift_release();
}

uint64_t sub_1C1EAECAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + *(int *)(type metadata accessor for Siri_Nlu_External_RepetitionResult(0) + 20) + 4) & 1) != 0)
  {
    swift_retain();
LABEL_4:
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v3, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019464();
    return swift_release();
  }
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  sub_1C1EB31F4(&qword_1EF723EB8, v2, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  swift_retain();
  sub_1C201986C();
  if (!v1)
    goto LABEL_4;
  return swift_release();
}

void sub_1C1EAEDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v46 = a4;
  v7 = sub_1C2019980();
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_23();
  v43 = v9;
  v10 = sub_1C2019494();
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_3_0();
  v15 = v14 - v13;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_3_0();
  v20 = v19 - v18;
  type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v21);
  v23 = (int *)((char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v20, a1, a3);
  v42 = v4;
  OUTLINED_FUNCTION_40();
  if (!swift_dynamicCast())
  {
    OUTLINED_FUNCTION_103_2(v15, 1);
    sub_1C1D48944(v15, &qword_1ED79FE20);
    type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
    sub_1C1EB31F4(&qword_1EF723EB8, v28, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C20195C0();
LABEL_5:
    swift_release();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_103_2(v15, 0);
  OUTLINED_FUNCTION_89_7(v15, (uint64_t)v23);
  sub_1C2019488();
  sub_1C1EB31F4((unint64_t *)&qword_1ED79FDF8, 255, type metadata accessor for Siri_Nlu_External_UsoGraph, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UsoGraph);
  v24 = v49;
  v25 = sub_1C20195CC();
  v27 = (uint64_t)v23;
  if (v24)
  {

    OUTLINED_FUNCTION_86_3();
    sub_1C1D48A10((uint64_t)v23, type metadata accessor for Siri_Nlu_External_UsoGraph);
    swift_release();
LABEL_7:
    OUTLINED_FUNCTION_2_3();
    return;
  }
  v29 = v25;
  v30 = v26;
  OUTLINED_FUNCTION_86_3();
  type metadata accessor for UsoGraphProtoReader.UnitIndexHelper();
  swift_initStackObject();
  sub_1C1DFE09C(v23);
  v50 = 2570;
  v51 = 0xE200000000000000;
  sub_1C2018F00();
  sub_1C201998C();
  swift_bridgeObjectRelease();
  sub_1C201998C();
  v31 = v43;
  sub_1C2019974();
  v32 = sub_1C201995C();
  v34 = v33;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v31, v45);
  if (v34 >> 60 == 15)
  {
    swift_release();
    OUTLINED_FUNCTION_43_7();
    sub_1C1D48A10(v27, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_5;
  }
  v50 = 0x7061726723232322;
  v51 = 0xE900000000000068;
  v52 = *(_QWORD *)(v42 + 24);
  v47 = v53;
  swift_retain();
  sub_1C1D48840(v29, v30);
  v48 = v32;
  sub_1C20199F8();
  v49 = (void *)v27;
  sub_1C201998C();
  swift_bridgeObjectRelease();
  sub_1C201998C();
  v36 = v50;
  v35 = v51;
  swift_beginAccess();
  v37 = v48;
  sub_1C1D48840(v48, v34);
  sub_1C1EAF6CC(v36, v35, v37, v34, v29, v30);
  swift_endAccess();
  OUTLINED_FUNCTION_43_7();
  swift_release();
  swift_release();
  sub_1C1D48884(v37, v34);
  OUTLINED_FUNCTION_43_7();
  sub_1C1D48A10((uint64_t)v49, type metadata accessor for Siri_Nlu_External_UsoGraph);
  v38 = *(_QWORD *)(v53 + 24);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (!v39)
  {
    *(_QWORD *)(v53 + 24) = v40;
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1C1EAF214()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C1EAF238()
{
  return sub_1C20197D0();
}

uint64_t sub_1C1EAF24C()
{
  return sub_1C20197E8();
}

uint64_t sub_1C1EAF260()
{
  return sub_1C201986C();
}

uint64_t sub_1C1EAF274()
{
  return sub_1C2019854();
}

uint64_t sub_1C1EAF288()
{
  return sub_1C2019860();
}

uint64_t sub_1C1EAF29C()
{
  return sub_1C201989C();
}

uint64_t sub_1C1EAF2B0()
{
  return sub_1C20198A8();
}

uint64_t sub_1C1EAF2C4()
{
  return sub_1C20198CC();
}

uint64_t sub_1C1EAF2D8()
{
  return sub_1C20198D8();
}

void sub_1C1EAF2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EAEDA8(a1, a2, a3, a4);
}

uint64_t sub_1C1EAF30C()
{
  return sub_1C20197DC();
}

uint64_t sub_1C1EAF334()
{
  return sub_1C20197A0();
}

uint64_t sub_1C1EAF348()
{
  return sub_1C201980C();
}

uint64_t sub_1C1EAF35C()
{
  return sub_1C20197B8();
}

uint64_t sub_1C1EAF370()
{
  return sub_1C20197C4();
}

uint64_t sub_1C1EAF384()
{
  return sub_1C201983C();
}

uint64_t sub_1C1EAF398()
{
  return sub_1C2019848();
}

uint64_t sub_1C1EAF3AC()
{
  return sub_1C2019818();
}

uint64_t sub_1C1EAF3C0()
{
  return sub_1C2019824();
}

uint64_t sub_1C1EAF3D4()
{
  return sub_1C2019878();
}

uint64_t sub_1C1EAF3E8()
{
  return sub_1C2019884();
}

uint64_t sub_1C1EAF3FC()
{
  return sub_1C20198B4();
}

uint64_t sub_1C1EAF410()
{
  return sub_1C20198C0();
}

uint64_t sub_1C1EAF424()
{
  return sub_1C2019764();
}

uint64_t sub_1C1EAF438()
{
  return sub_1C2019830();
}

uint64_t sub_1C1EAF44C()
{
  return sub_1C2019794();
}

uint64_t sub_1C1EAF460()
{
  return sub_1C2019770();
}

uint64_t sub_1C1EAF488()
{
  return sub_1C2019890();
}

uint64_t sub_1C1EAF4B0()
{
  return sub_1C20197AC();
}

uint64_t sub_1C1EAF4D8()
{
  return sub_1C2019704();
}

uint64_t sub_1C1EAF4EC()
{
  return sub_1C2019728();
}

uint64_t sub_1C1EAF500()
{
  return sub_1C2019710();
}

uint64_t sub_1C1EAF514()
{
  return sub_1C201971C();
}

uint64_t sub_1C1EAF528()
{
  return sub_1C201974C();
}

uint64_t sub_1C1EAF53C()
{
  return sub_1C2019758();
}

uint64_t sub_1C1EAF550()
{
  return sub_1C2019734();
}

uint64_t sub_1C1EAF564()
{
  return sub_1C2019740();
}

uint64_t sub_1C1EAF578()
{
  return sub_1C201977C();
}

uint64_t sub_1C1EAF58C()
{
  return sub_1C2019788();
}

uint64_t sub_1C1EAF5A0()
{
  return sub_1C20197F4();
}

uint64_t sub_1C1EAF5B4()
{
  return sub_1C2019800();
}

uint64_t sub_1C1EAF5C8()
{
  return sub_1C20196EC();
}

uint64_t sub_1C1EAF5DC()
{
  return sub_1C20196F8();
}

uint64_t sub_1C1EAF604()
{
  return sub_1C20196E0();
}

uint64_t sub_1C1EAF618()
{
  return sub_1C20198E4();
}

id SiriNLUTypesPrintUtils.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SiriNLUTypesPrintUtils.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriNLUTypesPrintUtils();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SiriNLUTypesPrintUtils.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriNLUTypesPrintUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C1EAF6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t *v6;
  uint64_t v14;

  swift_isUniquelyReferenced_nonNull_native();
  v14 = *v6;
  *v6 = 0x8000000000000000;
  sub_1C1EAF768(a1, a2, a3, a4, a5, a6);
  *v6 = v14;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C1EAF768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v7 = (_QWORD **)v6;
  v13 = (_QWORD *)*v6;
  v14 = sub_1C1E57634(a5, a6);
  if (__OFADD__(v13[2], (v15 & 1) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v14;
  v17 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723EE0);
  if ((sub_1C20199E0() & 1) == 0)
    goto LABEL_5;
  v18 = sub_1C1E57634(a5, a6);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = sub_1C2019A1C();
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v7;
  if ((v17 & 1) != 0)
  {
    v21 = (uint64_t *)(v20[7] + 32 * v16);
    v22 = v21[2];
    v23 = v21[3];
    swift_bridgeObjectRelease();
    result = sub_1C1D48898(v22, v23);
    *v21 = a1;
    v21[1] = a2;
    v21[2] = a3;
    v21[3] = a4;
  }
  else
  {
    sub_1C1EAF8CC(v16, a5, a6, a1, a2, a3, a4, v20);
    return sub_1C1D48840(a5, a6);
  }
  return result;
}

unint64_t sub_1C1EAF8CC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

void sub_1C1EAF91C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C1EAF984()
{
  return sub_1C2018D08();
}

uint64_t sub_1C1EAFB18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1C2018CD8();
  if (!result || (result = sub_1C2018CF0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1C2018CE4();
      return sub_1C2018D08();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C1EAFBBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t i;
  BOOL v32;
  unint64_t v33;
  int64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[2];
  int v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  unint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103[3];
  uint64_t matched;
  uint64_t v105;
  uint64_t v106;

  v88 = a4;
  v89 = a2;
  v106 = *MEMORY[0x1E0C80C00];
  v93 = sub_1C2019980();
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v94 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_1C2019494();
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v7 = (char *)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (int *)((char *)v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  matched = type metadata accessor for Siri_Nlu_Internal_Spanmatch_SpanMatchResponse();
  sub_1C1EB31F4(&qword_1EF723B48, 255, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Spanmatch_SpanMatchResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Spanmatch_SpanMatchResponse);
  v105 = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v103);
  sub_1C1D4B348(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_Spanmatch_SpanMatchResponse);
  sub_1C1EB3080((uint64_t)v103, (uint64_t)&v101);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED0);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
    sub_1C1D4B0A8((uint64_t)v10, (uint64_t)v13, type metadata accessor for Siri_Nlu_External_UsoGraph);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v13, v89);
    v44 = sub_1C2018F00();
    swift_release();
    sub_1C1D48A10((uint64_t)v13, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_70;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v11);
  sub_1C1D48944((uint64_t)v10, &qword_1ED79FE20);
  __swift_project_boxed_opaque_existential_1Tm(v103, matched);
  sub_1C2019488();
  v16 = sub_1C20195CC();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v7, v91);
  v99 = v16;
  v100 = v18;
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  v19 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED8);
  sub_1C1EB3164();
  *(_QWORD *)(v19 + 16) = sub_1C2019920();
  *(_QWORD *)(v19 + 24) = 0;
  v95 = v19;
  if (*(_QWORD *)(*boxed_opaque_existential_1 + 16))
  {
    type metadata accessor for Siri_Nlu_Internal_MatchingSpan(0);
    sub_1C1EB31F4(&qword_1EF723EB8, v21, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C1EB31F4(&qword_1EF7234A8, 255, type metadata accessor for Siri_Nlu_Internal_MatchingSpan, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_MatchingSpan);
    sub_1C2019890();
  }
  sub_1C1EB31F4(&qword_1EF723EB8, v20, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  sub_1C2019464();
  v87[1] = 0;
  v22 = v95;
  swift_beginAccess();
  v23 = *(_QWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v23 + 64);
  v89 = v23 + 64;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v90 = (unint64_t)(v25 + 63) >> 6;
  v91 = v23;
  swift_bridgeObjectRetain();
  v28 = 0;
  v29 = v94;
  if (!v27)
    goto LABEL_9;
LABEL_8:
  v30 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  for (i = v30 | (v28 << 6); ; i = __clz(__rbit64(v33)) + (v28 << 6))
  {
    v35 = (uint64_t *)(*(_QWORD *)(v91 + 48) + 16 * i);
    v37 = *v35;
    v36 = v35[1];
    v38 = *(_QWORD *)(v91 + 56) + 32 * i;
    v39 = *(_QWORD *)(v38 + 16);
    v40 = *(_QWORD *)(v38 + 24);
    sub_1C1D48840(*v35, v36);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v39, v40);
    sub_1C2019974();
    v41 = sub_1C201995C();
    v43 = v42;
    (*(void (**)(char *, uint64_t))(v92 + 8))(v29, v93);
    if (v43 >> 60 == 15)
    {
      sub_1C1D48898(v37, v36);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v39, v40);
      swift_release();
      swift_release();
      sub_1C1D48898(v99, v100);
LABEL_34:
      v44 = 0xD000000000000022;
      goto LABEL_70;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    while (sub_1C1EAD894(v37, v36, v41, v43))
      ;
    sub_1C1D48884(v41, v43);
    sub_1C1D48898(v37, v36);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v39, v40);
    if (v27)
      goto LABEL_8;
LABEL_9:
    v32 = __OFADD__(v28++, 1);
    if (v32)
    {
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v28 >= v90)
      goto LABEL_35;
    v33 = *(_QWORD *)(v89 + 8 * v28);
    if (!v33)
      break;
LABEL_23:
    v27 = (v33 - 1) & v33;
  }
  v34 = v28 + 1;
  if (v28 + 1 >= v90)
    goto LABEL_35;
  v33 = *(_QWORD *)(v89 + 8 * v34);
  if (v33)
    goto LABEL_22;
  v34 = v28 + 2;
  if (v28 + 2 >= v90)
    goto LABEL_35;
  v33 = *(_QWORD *)(v89 + 8 * v34);
  if (v33)
    goto LABEL_22;
  v34 = v28 + 3;
  if (v28 + 3 >= v90)
    goto LABEL_35;
  v33 = *(_QWORD *)(v89 + 8 * v34);
  if (v33)
    goto LABEL_22;
  v34 = v28 + 4;
  if (v28 + 4 >= v90)
    goto LABEL_35;
  v33 = *(_QWORD *)(v89 + 8 * v34);
  if (v33)
  {
LABEL_22:
    v28 = v34;
    goto LABEL_23;
  }
  v34 = v28 + 5;
  if (v28 + 5 < v90)
  {
    v33 = *(_QWORD *)(v89 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        v28 = v34 + 1;
        if (__OFADD__(v34, 1))
          break;
        if (v28 >= v90)
          goto LABEL_35;
        v33 = *(_QWORD *)(v89 + 8 * v28);
        ++v34;
        if (v33)
          goto LABEL_23;
      }
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
    }
    goto LABEL_22;
  }
LABEL_35:
  swift_release();
  v45 = (void *)objc_opt_self();
  v46 = v99;
  v47 = v100;
  sub_1C1D48840(v99, v100);
  v48 = (void *)sub_1C2018D14();
  sub_1C1D48898(v46, v47);
  v96 = 0;
  v49 = objc_msgSend(v45, sel_JSONObjectWithData_options_error_, v48, 0, &v96);

  v50 = v96;
  if (!v49)
  {
    v78 = v50;
    v44 = 0xD00000000000001ALL;
    v79 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v46, v47);
    goto LABEL_70;
  }
  sub_1C20199C8();
  swift_unknownObjectRelease();
  sub_1C1EB31A0(v98, &v101);
  __swift_project_boxed_opaque_existential_1Tm(&v101, v102);
  v51 = sub_1C2019A04();
  *(_QWORD *)&v98[0] = 0;
  v52 = objc_msgSend(v45, sel_dataWithJSONObject_options_error_, v51, 1, v98);
  swift_unknownObjectRelease();
  v53 = *(id *)&v98[0];
  if (!v52)
  {
    v80 = v53;
    v44 = 0xD00000000000001ALL;
    v81 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v46, v47);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
    goto LABEL_70;
  }
  v54 = (void *)sub_1C2018D2C();
  v56 = v55;

  v96 = v54;
  v97 = v56;
  v57 = v95;
  swift_beginAccess();
  v58 = *(_QWORD *)(v57 + 16);
  v59 = *(_QWORD *)(v58 + 64);
  v89 = v58 + 64;
  v60 = 1 << *(_BYTE *)(v58 + 32);
  v61 = -1;
  if (v60 < 64)
    v61 = ~(-1 << v60);
  v62 = v61 & v59;
  v90 = (unint64_t)(v60 + 63) >> 6;
  v91 = v58;
  swift_bridgeObjectRetain();
  v63 = 0;
  v64 = v94;
  if (!v62)
    goto LABEL_41;
  while (2)
  {
    v65 = __clz(__rbit64(v62));
    v62 &= v62 - 1;
    v66 = v65 | (v63 << 6);
LABEL_56:
    v69 = (uint64_t *)(*(_QWORD *)(v91 + 48) + 16 * v66);
    v71 = *v69;
    v70 = v69[1];
    v72 = *(_QWORD *)(v91 + 56) + 32 * v66;
    v73 = *(_QWORD *)(v72 + 16);
    v74 = *(_QWORD *)(v72 + 24);
    sub_1C1D48840(*v69, v70);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v73, v74);
    sub_1C2019974();
    v75 = sub_1C201995C();
    v77 = v76;
    (*(void (**)(char *, uint64_t))(v92 + 8))(v64, v93);
    if (v77 >> 60 == 15)
    {
      sub_1C1D48898(v71, v70);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v73, v74);
      swift_release();
      sub_1C1D48898((uint64_t)v96, v97);
      swift_release();
      sub_1C1D48898(v99, v100);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
      goto LABEL_34;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    if ((v88 & 1) != 0)
    {
      while (sub_1C1EAD894(v75, v77, v73, v74))
        ;
    }
    else
    {
      while (sub_1C1EAD894(v75, v77, 0, 0xC000000000000000))
        ;
    }
    sub_1C1D48884(v75, v77);
    sub_1C1D48898(v71, v70);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v73, v74);
    if (v62)
      continue;
    break;
  }
LABEL_41:
  v32 = __OFADD__(v63++, 1);
  if (v32)
    goto LABEL_75;
  if (v63 < v90)
  {
    v67 = *(_QWORD *)(v89 + 8 * v63);
    if (!v67)
    {
      v68 = v63 + 1;
      if (v63 + 1 >= v90)
        goto LABEL_71;
      v67 = *(_QWORD *)(v89 + 8 * v68);
      if (!v67)
      {
        v68 = v63 + 2;
        if (v63 + 2 >= v90)
          goto LABEL_71;
        v67 = *(_QWORD *)(v89 + 8 * v68);
        if (!v67)
        {
          v68 = v63 + 3;
          if (v63 + 3 >= v90)
            goto LABEL_71;
          v67 = *(_QWORD *)(v89 + 8 * v68);
          if (!v67)
          {
            v68 = v63 + 4;
            if (v63 + 4 >= v90)
              goto LABEL_71;
            v67 = *(_QWORD *)(v89 + 8 * v68);
            if (!v67)
            {
              v68 = v63 + 5;
              if (v63 + 5 >= v90)
                goto LABEL_71;
              v67 = *(_QWORD *)(v89 + 8 * v68);
              if (!v67)
              {
                while (1)
                {
                  v63 = v68 + 1;
                  if (__OFADD__(v68, 1))
                    goto LABEL_77;
                  if (v63 >= v90)
                    goto LABEL_71;
                  v67 = *(_QWORD *)(v89 + 8 * v63);
                  ++v68;
                  if (v67)
                    goto LABEL_55;
                }
              }
            }
          }
        }
      }
      v63 = v68;
    }
LABEL_55:
    v62 = (v67 - 1) & v67;
    v66 = __clz(__rbit64(v67)) + (v63 << 6);
    goto LABEL_56;
  }
LABEL_71:
  swift_release();
  v83 = (uint64_t)v96;
  v84 = v97;
  sub_1C1D48840((uint64_t)v96, v97);
  sub_1C2019974();
  v44 = sub_1C2019968();
  v86 = v85;
  sub_1C1D48898(v83, v84);
  if (!v86)
    v44 = 0xD000000000000036;
  sub_1C1D48898(v83, v84);
  swift_release();
  sub_1C1D48898(v99, v100);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v101);
LABEL_70:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v103);
  return v44;
}

void sub_1C1EB08CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void (*v59)(_QWORD *);
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  id v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[40];

  OUTLINED_FUNCTION_37_11(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  OUTLINED_FUNCTION_94_6(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_33_10(v13, v58);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_15_3();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_3_0();
  v18 = v17 - v16;
  type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v19);
  v20 = OUTLINED_FUNCTION_42_12();
  OUTLINED_FUNCTION_57_9(v20);
  OUTLINED_FUNCTION_74_8(v21);
  OUTLINED_FUNCTION_91_5(v11);
  OUTLINED_FUNCTION_105_4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED0);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_4_7(v18, 0);
    sub_1C1D4B0A8(v18, (uint64_t)v8, type metadata accessor for Siri_Nlu_External_UsoGraph);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v8, v61);
    OUTLINED_FUNCTION_93_4();
    v26 = OUTLINED_FUNCTION_73_11();
    OUTLINED_FUNCTION_64_1(v26, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_74;
  }
  OUTLINED_FUNCTION_4_7(v18, 1);
  sub_1C1D48944(v18, &qword_1ED79FE20);
  OUTLINED_FUNCTION_98_7();
  v22 = sub_1C20195CC();
  v24 = v23;
  OUTLINED_FUNCTION_16_13();
  v65 = v22;
  v66 = v24;
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  v25 = OUTLINED_FUNCTION_96_4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED8);
  sub_1C1EB3164();
  *(_QWORD *)(v25 + 16) = sub_1C2019920();
  *(_QWORD *)(v25 + 24) = 0;
  v63[0] = v25;
  v59(v63);
  OUTLINED_FUNCTION_40_8();
  OUTLINED_FUNCTION_13_8();
  v27 = 0;
  while (1)
  {
    v28 = __OFADD__(v27++, 1);
    if (v28)
    {
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    OUTLINED_FUNCTION_21_9();
    if (v29 == v28)
      goto LABEL_34;
    OUTLINED_FUNCTION_48_11();
    if (!v30)
      break;
LABEL_24:
    OUTLINED_FUNCTION_78_5();
    OUTLINED_FUNCTION_26_11(v37);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_95_5();
    sub_1C2019974();
    OUTLINED_FUNCTION_63_7();
    OUTLINED_FUNCTION_31_12();
    if (v20 >> 60 == 15)
    {
      OUTLINED_FUNCTION_38_10(v9);
      OUTLINED_FUNCTION_72_7();
      OUTLINED_FUNCTION_28_11(v25);
      OUTLINED_FUNCTION_18_9();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_61_7();
      goto LABEL_74;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    while (OUTLINED_FUNCTION_49_9())
      ;
    sub_1C1D48884(v18, v20);
    OUTLINED_FUNCTION_38_10(v9);
    OUTLINED_FUNCTION_72_7();
    OUTLINED_FUNCTION_28_11(v25);
  }
  OUTLINED_FUNCTION_6_11();
  if (v29 == v28)
    goto LABEL_34;
  OUTLINED_FUNCTION_5_11();
  if (v32)
    goto LABEL_23;
  OUTLINED_FUNCTION_6_11();
  if (v29 == v28)
    goto LABEL_34;
  OUTLINED_FUNCTION_5_11();
  if (v33)
    goto LABEL_23;
  OUTLINED_FUNCTION_6_11();
  if (v29 == v28)
    goto LABEL_34;
  OUTLINED_FUNCTION_5_11();
  if (v34)
    goto LABEL_23;
  OUTLINED_FUNCTION_6_11();
  if (v29 == v28)
    goto LABEL_34;
  OUTLINED_FUNCTION_5_11();
  if (v35)
  {
LABEL_23:
    v27 = v31;
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_6_11();
  if (v29 != v28)
  {
    OUTLINED_FUNCTION_5_11();
    if (!v36)
    {
      while (1)
      {
        v27 = v31 + 1;
        if (__OFADD__(v31, 1))
          break;
        OUTLINED_FUNCTION_21_9();
        if (v29 == v28)
          goto LABEL_34;
        OUTLINED_FUNCTION_30_12();
        if (v38)
          goto LABEL_24;
      }
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    goto LABEL_23;
  }
LABEL_34:
  OUTLINED_FUNCTION_18_9();
  objc_opt_self();
  OUTLINED_FUNCTION_65_7();
  v39 = (void *)OUTLINED_FUNCTION_90_7();
  v40 = OUTLINED_FUNCTION_23_12();
  v63[2] = 0;
  v41 = OUTLINED_FUNCTION_70_8(v40, sel_JSONObjectWithData_options_error_);

  v42 = OUTLINED_FUNCTION_109_3();
  if (v41)
  {
    OUTLINED_FUNCTION_107_4();
    OUTLINED_FUNCTION_28_0();
    v43 = OUTLINED_FUNCTION_45_9();
    v64 = 0;
    v44 = OUTLINED_FUNCTION_67_4(v43, sel_dataWithJSONObject_options_error_);
    OUTLINED_FUNCTION_28_0();
    v45 = v64;
    if (v44)
    {
      sub_1C2018D2C();
      OUTLINED_FUNCTION_99_6();
      OUTLINED_FUNCTION_29_9();
      OUTLINED_FUNCTION_14_16();
      v46 = 0;
      if (!v62)
        goto LABEL_38;
LABEL_37:
      OUTLINED_FUNCTION_77_5();
      while (1)
      {
        OUTLINED_FUNCTION_27_13(v47);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_106_4();
        sub_1C2019974();
        OUTLINED_FUNCTION_69_7();
        OUTLINED_FUNCTION_32_11();
        if (v43 >> 60 == 15)
          break;
        type metadata accessor for SiriNLUTypesPrintUtils();
        if ((v60 & 1) != 0)
        {
          while (OUTLINED_FUNCTION_58_9())
            ;
        }
        else
        {
          while (OUTLINED_FUNCTION_59_8())
            ;
        }
        sub_1C1D48884((uint64_t)v44, v43);
        OUTLINED_FUNCTION_47_6();
        OUTLINED_FUNCTION_185_0();
        OUTLINED_FUNCTION_38_10((uint64_t)v8);
        if (v62)
          goto LABEL_37;
LABEL_38:
        v28 = __OFADD__(v46++, 1);
        if (v28)
          goto LABEL_77;
        OUTLINED_FUNCTION_21_9();
        if (v29 == v28)
        {
LABEL_75:
          OUTLINED_FUNCTION_18_9();
          OUTLINED_FUNCTION_60_7();
          OUTLINED_FUNCTION_85_7();
          OUTLINED_FUNCTION_84_6();
          OUTLINED_FUNCTION_46_8();
          OUTLINED_FUNCTION_110_4();
          OUTLINED_FUNCTION_46_8();
          OUTLINED_FUNCTION_15_10();
          OUTLINED_FUNCTION_61_7();
          OUTLINED_FUNCTION_55_9();
          goto LABEL_74;
        }
        OUTLINED_FUNCTION_48_11();
        if (!v48)
        {
          OUTLINED_FUNCTION_6_11();
          if (v29 == v28)
            goto LABEL_75;
          OUTLINED_FUNCTION_5_11();
          if (!v50)
          {
            OUTLINED_FUNCTION_6_11();
            if (v29 == v28)
              goto LABEL_75;
            OUTLINED_FUNCTION_5_11();
            if (!v51)
            {
              OUTLINED_FUNCTION_6_11();
              if (v29 == v28)
                goto LABEL_75;
              OUTLINED_FUNCTION_5_11();
              if (!v52)
              {
                OUTLINED_FUNCTION_6_11();
                if (v29 == v28)
                  goto LABEL_75;
                OUTLINED_FUNCTION_5_11();
                if (!v53)
                {
                  OUTLINED_FUNCTION_6_11();
                  if (v29 == v28)
                    goto LABEL_75;
                  OUTLINED_FUNCTION_5_11();
                  if (!v54)
                  {
                    while (1)
                    {
                      v46 = v49 + 1;
                      if (__OFADD__(v49, 1))
                        break;
                      OUTLINED_FUNCTION_21_9();
                      if (v29 == v28)
                        goto LABEL_75;
                      OUTLINED_FUNCTION_30_12();
                      if (v55)
                        goto LABEL_58;
                    }
LABEL_79:
                    __break(1u);
                  }
                }
              }
            }
          }
          v46 = v49;
        }
LABEL_58:
        OUTLINED_FUNCTION_79_5();
      }
      OUTLINED_FUNCTION_47_6();
      OUTLINED_FUNCTION_185_0();
      OUTLINED_FUNCTION_38_10((uint64_t)v8);
      OUTLINED_FUNCTION_18_9();
      OUTLINED_FUNCTION_87_5();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_61_7();
      OUTLINED_FUNCTION_55_9();
    }
    else
    {
      v57 = v45;
      OUTLINED_FUNCTION_39_10();

      OUTLINED_FUNCTION_88_6();
      OUTLINED_FUNCTION_80_4();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_23_12();
      OUTLINED_FUNCTION_55_9();
    }
  }
  else
  {
    v56 = v42;
    OUTLINED_FUNCTION_39_10();

    OUTLINED_FUNCTION_88_6();
    OUTLINED_FUNCTION_80_4();
    OUTLINED_FUNCTION_15_10();
    OUTLINED_FUNCTION_23_12();
  }
LABEL_74:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
  OUTLINED_FUNCTION_0();
}

void sub_1C1EB0F6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  unint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD *);
  char v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];
  id v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[40];

  OUTLINED_FUNCTION_37_11(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  OUTLINED_FUNCTION_94_6(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_33_10(v14, v63);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v15);
  OUTLINED_FUNCTION_15_3();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v16);
  v17 = OUTLINED_FUNCTION_240_0();
  v18 = type metadata accessor for Siri_Nlu_External_UsoGraph(v17);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v19);
  v20 = OUTLINED_FUNCTION_42_12();
  OUTLINED_FUNCTION_57_9(v20);
  v22 = OUTLINED_FUNCTION_74_8(v21);
  OUTLINED_FUNCTION_91_5(v12);
  OUTLINED_FUNCTION_105_4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED0);
  if (swift_dynamicCast())
  {
    OUTLINED_FUNCTION_102_4(v10, 0);
    sub_1C1D4B0A8(v10, (uint64_t)v8, type metadata accessor for Siri_Nlu_External_UsoGraph);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v8, v66);
    OUTLINED_FUNCTION_93_4();
    v30 = OUTLINED_FUNCTION_73_11();
    OUTLINED_FUNCTION_64_1(v30, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_77;
  }
  OUTLINED_FUNCTION_102_4(v10, 1);
  sub_1C1D48944(v10, &qword_1ED79FE20);
  OUTLINED_FUNCTION_98_7();
  v23 = sub_1C20195CC();
  v25 = v24;
  OUTLINED_FUNCTION_16_13();
  v70 = v23;
  v71 = v25;
  v26 = type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  v27 = OUTLINED_FUNCTION_96_4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED8);
  sub_1C1EB3164();
  *(_QWORD *)(v27 + 16) = sub_1C2019920();
  *(_QWORD *)(v27 + 24) = 0;
  v68[0] = v27;
  v28 = *(uint64_t *)((char *)v22 + *(int *)(v20 + 20));
  v29 = swift_retain();
  v64(v29, v68);
  swift_release();
  sub_1C1EB31F4(&qword_1EF723EB8, v31, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  sub_1C2019464();
  OUTLINED_FUNCTION_40_8();
  OUTLINED_FUNCTION_13_8();
  v32 = 0;
  if (!v20)
    goto LABEL_5;
LABEL_4:
  OUTLINED_FUNCTION_82_5();
  while (1)
  {
    OUTLINED_FUNCTION_26_11(v33);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_95_5();
    sub_1C2019974();
    OUTLINED_FUNCTION_63_7();
    OUTLINED_FUNCTION_31_12();
    if (v10 >> 60 == 15)
    {
      OUTLINED_FUNCTION_38_10(v9);
      OUTLINED_FUNCTION_72_7();
      OUTLINED_FUNCTION_28_11(v26);
      OUTLINED_FUNCTION_18_9();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_61_7();
      goto LABEL_77;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    while (OUTLINED_FUNCTION_49_9())
      ;
    sub_1C1D48884(v18, v10);
    OUTLINED_FUNCTION_38_10(v9);
    OUTLINED_FUNCTION_72_7();
    OUTLINED_FUNCTION_28_11(v26);
    if (v20)
      goto LABEL_4;
LABEL_5:
    v34 = __OFADD__(v32++, 1);
    if (v34)
    {
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    OUTLINED_FUNCTION_21_9();
    if (v35 == v34)
      goto LABEL_37;
    OUTLINED_FUNCTION_48_11();
    if (!v36)
      break;
LABEL_25:
    OUTLINED_FUNCTION_78_5();
  }
  OUTLINED_FUNCTION_6_11();
  if (v35 == v34)
    goto LABEL_37;
  OUTLINED_FUNCTION_5_11();
  if (v38)
    goto LABEL_24;
  OUTLINED_FUNCTION_6_11();
  if (v35 == v34)
    goto LABEL_37;
  OUTLINED_FUNCTION_5_11();
  if (v39)
    goto LABEL_24;
  OUTLINED_FUNCTION_6_11();
  if (v35 == v34)
    goto LABEL_37;
  OUTLINED_FUNCTION_5_11();
  if (v40)
    goto LABEL_24;
  OUTLINED_FUNCTION_6_11();
  if (v35 == v34)
    goto LABEL_37;
  OUTLINED_FUNCTION_5_11();
  if (v41)
  {
LABEL_24:
    v32 = v37;
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_6_11();
  if (v35 != v34)
  {
    OUTLINED_FUNCTION_5_11();
    if (!v42)
    {
      while (1)
      {
        v32 = v37 + 1;
        if (__OFADD__(v37, 1))
          break;
        OUTLINED_FUNCTION_21_9();
        if (v35 == v34)
          goto LABEL_37;
        OUTLINED_FUNCTION_30_12();
        if (v43)
          goto LABEL_25;
      }
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    goto LABEL_24;
  }
LABEL_37:
  OUTLINED_FUNCTION_18_9();
  objc_opt_self();
  OUTLINED_FUNCTION_65_7();
  v44 = (void *)OUTLINED_FUNCTION_90_7();
  v45 = OUTLINED_FUNCTION_23_12();
  v68[2] = 0;
  v46 = OUTLINED_FUNCTION_70_8(v45, sel_JSONObjectWithData_options_error_);

  v47 = OUTLINED_FUNCTION_109_3();
  if (v46)
  {
    OUTLINED_FUNCTION_107_4();
    OUTLINED_FUNCTION_28_0();
    v48 = OUTLINED_FUNCTION_45_9();
    v69 = 0;
    v49 = OUTLINED_FUNCTION_67_4(v48, sel_dataWithJSONObject_options_error_);
    OUTLINED_FUNCTION_28_0();
    v50 = v69;
    if (v49)
    {
      sub_1C2018D2C();
      OUTLINED_FUNCTION_99_6();
      OUTLINED_FUNCTION_29_9();
      OUTLINED_FUNCTION_14_16();
      v51 = 0;
      if (!v67)
        goto LABEL_41;
LABEL_40:
      OUTLINED_FUNCTION_77_5();
      while (1)
      {
        OUTLINED_FUNCTION_27_13(v52);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_106_4();
        sub_1C2019974();
        OUTLINED_FUNCTION_69_7();
        OUTLINED_FUNCTION_32_11();
        if (v48 >> 60 == 15)
          break;
        type metadata accessor for SiriNLUTypesPrintUtils();
        if ((v65 & 1) != 0)
        {
          while (OUTLINED_FUNCTION_58_9())
            ;
        }
        else
        {
          while (OUTLINED_FUNCTION_59_8())
            ;
        }
        sub_1C1D48884((uint64_t)v49, v48);
        OUTLINED_FUNCTION_47_6();
        OUTLINED_FUNCTION_185_0();
        OUTLINED_FUNCTION_38_10(v28);
        if (v67)
          goto LABEL_40;
LABEL_41:
        v34 = __OFADD__(v51++, 1);
        if (v34)
          goto LABEL_80;
        OUTLINED_FUNCTION_21_9();
        if (v35 == v34)
        {
LABEL_78:
          OUTLINED_FUNCTION_18_9();
          OUTLINED_FUNCTION_60_7();
          OUTLINED_FUNCTION_85_7();
          OUTLINED_FUNCTION_84_6();
          OUTLINED_FUNCTION_46_8();
          OUTLINED_FUNCTION_110_4();
          OUTLINED_FUNCTION_46_8();
          OUTLINED_FUNCTION_15_10();
          OUTLINED_FUNCTION_61_7();
          OUTLINED_FUNCTION_55_9();
          goto LABEL_77;
        }
        OUTLINED_FUNCTION_48_11();
        if (!v53)
        {
          OUTLINED_FUNCTION_6_11();
          if (v35 == v34)
            goto LABEL_78;
          OUTLINED_FUNCTION_5_11();
          if (!v55)
          {
            OUTLINED_FUNCTION_6_11();
            if (v35 == v34)
              goto LABEL_78;
            OUTLINED_FUNCTION_5_11();
            if (!v56)
            {
              OUTLINED_FUNCTION_6_11();
              if (v35 == v34)
                goto LABEL_78;
              OUTLINED_FUNCTION_5_11();
              if (!v57)
              {
                OUTLINED_FUNCTION_6_11();
                if (v35 == v34)
                  goto LABEL_78;
                OUTLINED_FUNCTION_5_11();
                if (!v58)
                {
                  OUTLINED_FUNCTION_6_11();
                  if (v35 == v34)
                    goto LABEL_78;
                  OUTLINED_FUNCTION_5_11();
                  if (!v59)
                  {
                    while (1)
                    {
                      v51 = v54 + 1;
                      if (__OFADD__(v54, 1))
                        break;
                      OUTLINED_FUNCTION_21_9();
                      if (v35 == v34)
                        goto LABEL_78;
                      OUTLINED_FUNCTION_30_12();
                      if (v60)
                        goto LABEL_61;
                    }
LABEL_82:
                    __break(1u);
                  }
                }
              }
            }
          }
          v51 = v54;
        }
LABEL_61:
        OUTLINED_FUNCTION_79_5();
      }
      OUTLINED_FUNCTION_47_6();
      OUTLINED_FUNCTION_185_0();
      OUTLINED_FUNCTION_38_10(v28);
      OUTLINED_FUNCTION_18_9();
      OUTLINED_FUNCTION_87_5();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_61_7();
      OUTLINED_FUNCTION_55_9();
    }
    else
    {
      v62 = v50;
      OUTLINED_FUNCTION_39_10();

      OUTLINED_FUNCTION_88_6();
      OUTLINED_FUNCTION_80_4();
      OUTLINED_FUNCTION_15_10();
      OUTLINED_FUNCTION_23_12();
      OUTLINED_FUNCTION_55_9();
    }
  }
  else
  {
    v61 = v47;
    OUTLINED_FUNCTION_39_10();

    OUTLINED_FUNCTION_88_6();
    OUTLINED_FUNCTION_80_4();
    OUTLINED_FUNCTION_15_10();
    OUTLINED_FUNCTION_23_12();
  }
LABEL_77:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
  OUTLINED_FUNCTION_0();
}

uint64_t sub_1C1EB165C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t i;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  id v108;
  unint64_t v109;
  _OWORD v110[2];
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115[3];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v100 = a4;
  v102 = a2;
  v118 = *MEMORY[0x1E0C80C00];
  v105 = sub_1C2019980();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v106 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
  MEMORY[0x1E0C80A78](v6);
  v101 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
  MEMORY[0x1E0C80A78](v99);
  v98 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C2019494();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (int *)((char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
  v116 = v103;
  sub_1C1EB31F4(&qword_1EF729B20, 255, type metadata accessor for Siri_Nlu_External_SystemDialogActGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogActGroup);
  v117 = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v115);
  v21 = a1;
  v22 = boxed_opaque_existential_1;
  sub_1C1D4B348(v21, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Siri_Nlu_External_SystemDialogActGroup);
  sub_1C1EB3080((uint64_t)v115, (uint64_t)&v113);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED0);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v16);
    sub_1C1D4B0A8((uint64_t)v15, (uint64_t)v18, type metadata accessor for Siri_Nlu_External_UsoGraph);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v18, v102);
    v31 = sub_1C2018F00();
    swift_release();
    sub_1C1D48A10((uint64_t)v18, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_73;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v16);
  sub_1C1D48944((uint64_t)v15, &qword_1ED79FE20);
  __swift_project_boxed_opaque_existential_1Tm(v115, v116);
  sub_1C2019488();
  v23 = v103;
  v24 = v22;
  v25 = sub_1C20195CC();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v111 = v25;
  v112 = v27;
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  v28 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED8);
  sub_1C1EB3164();
  *(_QWORD *)(v28 + 16) = sub_1C2019920();
  *(_QWORD *)(v28 + 24) = 0;
  v107 = v28;
  v29 = v101;
  sub_1C1D48918((uint64_t)v24 + *(int *)(v23 + 24), v101, &qword_1EF724990);
  if (__swift_getEnumTagSinglePayload(v29, 1, v99) == 1)
  {
    sub_1C1D48944(v29, &qword_1EF724990);
  }
  else
  {
    v32 = v29;
    v33 = v98;
    sub_1C1D4B0A8(v32, v98, type metadata accessor for Siri_Nlu_External_SystemDialogAct);
    sub_1C1EADE34(v33, 1, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_SystemDialogAct, (void (*)(uint64_t, uint64_t *))sub_1C1EA9D3C);
    sub_1C1D48A10(v33, type metadata accessor for Siri_Nlu_External_SystemDialogAct);
  }
  if (*(_QWORD *)(*v24 + 16))
  {
    sub_1C1EB31F4(&qword_1EF723EB8, v30, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
    sub_1C2019890();
  }
  sub_1C1EB31F4(&qword_1EF723EB8, v30, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  sub_1C2019464();
  v99 = 0;
  v34 = v107;
  swift_beginAccess();
  v35 = *(_QWORD *)(v34 + 16);
  v36 = *(_QWORD *)(v35 + 64);
  v101 = v35 + 64;
  v37 = 1 << *(_BYTE *)(v35 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & v36;
  v102 = (unint64_t)(v37 + 63) >> 6;
  v103 = v35;
  swift_bridgeObjectRetain();
  v40 = 0;
  v41 = v106;
  if (!v39)
    goto LABEL_12;
LABEL_11:
  v42 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  for (i = v42 | (v40 << 6); ; i = __clz(__rbit64(v45)) + (v40 << 6))
  {
    v47 = (uint64_t *)(*(_QWORD *)(v103 + 48) + 16 * i);
    v49 = *v47;
    v48 = v47[1];
    v50 = *(_QWORD *)(v103 + 56) + 32 * i;
    v51 = *(_QWORD *)(v50 + 16);
    v52 = *(_QWORD *)(v50 + 24);
    sub_1C1D48840(*v47, v48);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v51, v52);
    sub_1C2019974();
    v53 = sub_1C201995C();
    v55 = v54;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v41, v105);
    if (v55 >> 60 == 15)
    {
      sub_1C1D48898(v49, v48);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v51, v52);
      swift_release();
      swift_release();
      sub_1C1D48898(v111, v112);
LABEL_37:
      v31 = 0xD000000000000022;
      goto LABEL_73;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    while (sub_1C1EAD894(v49, v48, v53, v55))
      ;
    sub_1C1D48884(v53, v55);
    sub_1C1D48898(v49, v48);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v51, v52);
    if (v39)
      goto LABEL_11;
LABEL_12:
    v44 = __OFADD__(v40++, 1);
    if (v44)
    {
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    if (v40 >= v102)
      goto LABEL_38;
    v45 = *(_QWORD *)(v101 + 8 * v40);
    if (!v45)
      break;
LABEL_26:
    v39 = (v45 - 1) & v45;
  }
  v46 = v40 + 1;
  if (v40 + 1 >= v102)
    goto LABEL_38;
  v45 = *(_QWORD *)(v101 + 8 * v46);
  if (v45)
    goto LABEL_25;
  v46 = v40 + 2;
  if (v40 + 2 >= v102)
    goto LABEL_38;
  v45 = *(_QWORD *)(v101 + 8 * v46);
  if (v45)
    goto LABEL_25;
  v46 = v40 + 3;
  if (v40 + 3 >= v102)
    goto LABEL_38;
  v45 = *(_QWORD *)(v101 + 8 * v46);
  if (v45)
    goto LABEL_25;
  v46 = v40 + 4;
  if (v40 + 4 >= v102)
    goto LABEL_38;
  v45 = *(_QWORD *)(v101 + 8 * v46);
  if (v45)
  {
LABEL_25:
    v40 = v46;
    goto LABEL_26;
  }
  v46 = v40 + 5;
  if (v40 + 5 < v102)
  {
    v45 = *(_QWORD *)(v101 + 8 * v46);
    if (!v45)
    {
      while (1)
      {
        v40 = v46 + 1;
        if (__OFADD__(v46, 1))
          break;
        if (v40 >= v102)
          goto LABEL_38;
        v45 = *(_QWORD *)(v101 + 8 * v40);
        ++v46;
        if (v45)
          goto LABEL_26;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
    goto LABEL_25;
  }
LABEL_38:
  swift_release();
  v56 = (void *)objc_opt_self();
  v57 = v111;
  v58 = v112;
  sub_1C1D48840(v111, v112);
  v59 = (void *)sub_1C2018D14();
  sub_1C1D48898(v57, v58);
  v108 = 0;
  v60 = objc_msgSend(v56, sel_JSONObjectWithData_options_error_, v59, 0, &v108);

  v61 = v108;
  if (!v60)
  {
    v89 = v61;
    v31 = 0xD00000000000001ALL;
    v90 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v57, v58);
    goto LABEL_73;
  }
  sub_1C20199C8();
  swift_unknownObjectRelease();
  sub_1C1EB31A0(v110, &v113);
  __swift_project_boxed_opaque_existential_1Tm(&v113, v114);
  v62 = sub_1C2019A04();
  *(_QWORD *)&v110[0] = 0;
  v63 = objc_msgSend(v56, sel_dataWithJSONObject_options_error_, v62, 1, v110);
  swift_unknownObjectRelease();
  v64 = *(id *)&v110[0];
  if (!v63)
  {
    v91 = v64;
    v31 = 0xD00000000000001ALL;
    v92 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v57, v58);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v113);
    goto LABEL_73;
  }
  v65 = (void *)sub_1C2018D2C();
  v67 = v66;

  v108 = v65;
  v109 = v67;
  v68 = v107;
  swift_beginAccess();
  v69 = *(_QWORD *)(v68 + 16);
  v70 = *(_QWORD *)(v69 + 64);
  v101 = v69 + 64;
  v71 = 1 << *(_BYTE *)(v69 + 32);
  v72 = -1;
  if (v71 < 64)
    v72 = ~(-1 << v71);
  v73 = v72 & v70;
  v102 = (unint64_t)(v71 + 63) >> 6;
  v103 = v69;
  swift_bridgeObjectRetain();
  v74 = 0;
  v75 = v106;
  if (!v73)
    goto LABEL_44;
  while (2)
  {
    v76 = __clz(__rbit64(v73));
    v73 &= v73 - 1;
    v77 = v76 | (v74 << 6);
LABEL_59:
    v80 = (uint64_t *)(*(_QWORD *)(v103 + 48) + 16 * v77);
    v82 = *v80;
    v81 = v80[1];
    v83 = *(_QWORD *)(v103 + 56) + 32 * v77;
    v84 = *(_QWORD *)(v83 + 16);
    v85 = *(_QWORD *)(v83 + 24);
    sub_1C1D48840(*v80, v81);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v84, v85);
    sub_1C2019974();
    v86 = sub_1C201995C();
    v88 = v87;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v75, v105);
    if (v88 >> 60 == 15)
    {
      sub_1C1D48898(v82, v81);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v84, v85);
      swift_release();
      sub_1C1D48898((uint64_t)v108, v109);
      swift_release();
      sub_1C1D48898(v111, v112);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v113);
      goto LABEL_37;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    if ((v100 & 1) != 0)
    {
      while (sub_1C1EAD894(v86, v88, v84, v85))
        ;
    }
    else
    {
      while (sub_1C1EAD894(v86, v88, 0, 0xC000000000000000))
        ;
    }
    sub_1C1D48884(v86, v88);
    sub_1C1D48898(v82, v81);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v84, v85);
    if (v73)
      continue;
    break;
  }
LABEL_44:
  v44 = __OFADD__(v74++, 1);
  if (v44)
    goto LABEL_78;
  if (v74 < v102)
  {
    v78 = *(_QWORD *)(v101 + 8 * v74);
    if (!v78)
    {
      v79 = v74 + 1;
      if (v74 + 1 >= v102)
        goto LABEL_74;
      v78 = *(_QWORD *)(v101 + 8 * v79);
      if (!v78)
      {
        v79 = v74 + 2;
        if (v74 + 2 >= v102)
          goto LABEL_74;
        v78 = *(_QWORD *)(v101 + 8 * v79);
        if (!v78)
        {
          v79 = v74 + 3;
          if (v74 + 3 >= v102)
            goto LABEL_74;
          v78 = *(_QWORD *)(v101 + 8 * v79);
          if (!v78)
          {
            v79 = v74 + 4;
            if (v74 + 4 >= v102)
              goto LABEL_74;
            v78 = *(_QWORD *)(v101 + 8 * v79);
            if (!v78)
            {
              v79 = v74 + 5;
              if (v74 + 5 >= v102)
                goto LABEL_74;
              v78 = *(_QWORD *)(v101 + 8 * v79);
              if (!v78)
              {
                while (1)
                {
                  v74 = v79 + 1;
                  if (__OFADD__(v79, 1))
                    goto LABEL_80;
                  if (v74 >= v102)
                    goto LABEL_74;
                  v78 = *(_QWORD *)(v101 + 8 * v74);
                  ++v79;
                  if (v78)
                    goto LABEL_58;
                }
              }
            }
          }
        }
      }
      v74 = v79;
    }
LABEL_58:
    v73 = (v78 - 1) & v78;
    v77 = __clz(__rbit64(v78)) + (v74 << 6);
    goto LABEL_59;
  }
LABEL_74:
  swift_release();
  v94 = (uint64_t)v108;
  v95 = v109;
  sub_1C1D48840((uint64_t)v108, v109);
  sub_1C2019974();
  v31 = sub_1C2019968();
  v97 = v96;
  sub_1C1D48898(v94, v95);
  if (!v97)
    v31 = 0xD000000000000036;
  sub_1C1D48898(v94, v95);
  swift_release();
  sub_1C1D48898(v111, v112);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v113);
LABEL_73:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v115);
  return v31;
}

uint64_t sub_1C1EB2454(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t i;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  id v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  unint64_t v99;
  _OWORD v100[2];
  uint64_t v101;
  unint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105[3];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v90 = a4;
  v92 = a2;
  v108 = *MEMORY[0x1E0C80C00];
  v95 = sub_1C2019980();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v96 = (char *)v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1C2019494();
  v10 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v12 = (char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FE20);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Siri_Nlu_External_UsoGraph(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (int *)((char *)v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = a6;
  v107 = a7;
  __swift_allocate_boxed_opaque_existential_1(v105);
  (*(void (**)(void))(*(_QWORD *)(a6 - 8) + 16))();
  sub_1C1EB3080((uint64_t)v105, (uint64_t)&v103);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED0);
  if (swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v16);
    sub_1C1D4B0A8((uint64_t)v15, (uint64_t)v18, type metadata accessor for Siri_Nlu_External_UsoGraph);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)(v18, v92);
    v24 = sub_1C2018F00();
    swift_release();
    sub_1C1D48A10((uint64_t)v18, type metadata accessor for Siri_Nlu_External_UsoGraph);
    goto LABEL_64;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 1, 1, v16);
  sub_1C1D48944((uint64_t)v15, &qword_1ED79FE20);
  __swift_project_boxed_opaque_existential_1Tm(v105, v106);
  sub_1C2019488();
  v19 = sub_1C20195CC();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v93);
  v101 = v19;
  v102 = v21;
  type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor();
  v22 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723ED8);
  sub_1C1EB3164();
  *(_QWORD *)(v22 + 16) = sub_1C2019920();
  *(_QWORD *)(v22 + 24) = 0;
  v97 = v22;
  sub_1C1EB31F4(&qword_1EF723EB8, v23, (uint64_t (*)(uint64_t))type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor, (uint64_t)&unk_1C20414C8);
  sub_1C20195C0();
  v89[1] = 0;
  v25 = v97;
  swift_beginAccess();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = *(_QWORD *)(v26 + 64);
  v91 = v26 + 64;
  v28 = 1 << *(_BYTE *)(v26 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v92 = (unint64_t)(v28 + 63) >> 6;
  v93 = v26;
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = v96;
  if (!v30)
    goto LABEL_7;
LABEL_6:
  v33 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  for (i = v33 | (v31 << 6); ; i = __clz(__rbit64(v36)) + (v31 << 6))
  {
    v38 = (uint64_t *)(*(_QWORD *)(v93 + 48) + 16 * i);
    v40 = *v38;
    v39 = v38[1];
    v41 = *(_QWORD *)(v93 + 56) + 32 * i;
    v42 = *(_QWORD *)(v41 + 16);
    v43 = *(_QWORD *)(v41 + 24);
    sub_1C1D48840(*v38, v39);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v42, v43);
    sub_1C2019974();
    v44 = sub_1C201995C();
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v32, v95);
    if (v46 >> 60 == 15)
    {
      sub_1C1D48898(v40, v39);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v42, v43);
      swift_release();
      swift_release();
      sub_1C1D48898(v101, v102);
LABEL_30:
      v24 = 0xD000000000000022;
      goto LABEL_64;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    while (sub_1C1EAD894(v40, v39, v44, v46))
      ;
    sub_1C1D48884(v44, v46);
    sub_1C1D48898(v40, v39);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v42, v43);
    if (v30)
      goto LABEL_6;
LABEL_7:
    v35 = __OFADD__(v31++, 1);
    if (v35)
    {
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v31 >= v92)
      goto LABEL_31;
    v36 = *(_QWORD *)(v91 + 8 * v31);
    if (!v36)
      break;
LABEL_19:
    v30 = (v36 - 1) & v36;
  }
  v37 = v31 + 1;
  if (v31 + 1 >= v92)
    goto LABEL_31;
  v36 = *(_QWORD *)(v91 + 8 * v37);
  if (v36)
    goto LABEL_18;
  v37 = v31 + 2;
  if (v31 + 2 >= v92)
    goto LABEL_31;
  v36 = *(_QWORD *)(v91 + 8 * v37);
  if (v36)
    goto LABEL_18;
  v37 = v31 + 3;
  if (v31 + 3 >= v92)
    goto LABEL_31;
  v36 = *(_QWORD *)(v91 + 8 * v37);
  if (v36)
  {
LABEL_18:
    v31 = v37;
    goto LABEL_19;
  }
  v37 = v31 + 4;
  if (v31 + 4 < v92)
  {
    v36 = *(_QWORD *)(v91 + 8 * v37);
    if (!v36)
    {
      while (1)
      {
        v31 = v37 + 1;
        if (__OFADD__(v37, 1))
          break;
        if (v31 >= v92)
          goto LABEL_31;
        v36 = *(_QWORD *)(v91 + 8 * v31);
        ++v37;
        if (v36)
          goto LABEL_19;
      }
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
    }
    goto LABEL_18;
  }
LABEL_31:
  swift_release();
  v47 = (void *)objc_opt_self();
  v48 = v101;
  v49 = v102;
  sub_1C1D48840(v101, v102);
  v50 = (void *)sub_1C2018D14();
  sub_1C1D48898(v48, v49);
  v98 = 0;
  v51 = objc_msgSend(v47, sel_JSONObjectWithData_options_error_, v50, 0, &v98);

  v52 = v98;
  if (!v51)
  {
    v80 = v52;
    v24 = 0xD00000000000001ALL;
    v81 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v48, v49);
    goto LABEL_64;
  }
  sub_1C20199C8();
  swift_unknownObjectRelease();
  sub_1C1EB31A0(v100, &v103);
  __swift_project_boxed_opaque_existential_1Tm(&v103, v104);
  v53 = sub_1C2019A04();
  *(_QWORD *)&v100[0] = 0;
  v54 = objc_msgSend(v47, sel_dataWithJSONObject_options_error_, v53, 1, v100);
  swift_unknownObjectRelease();
  v55 = *(id *)&v100[0];
  if (!v54)
  {
    v82 = v55;
    v24 = 0xD00000000000001ALL;
    v83 = (void *)sub_1C2018CFC();

    swift_willThrow();
    swift_release();
    sub_1C1D48898(v48, v49);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
    goto LABEL_64;
  }
  v56 = (void *)sub_1C2018D2C();
  v58 = v57;

  v98 = v56;
  v99 = v58;
  v59 = v97;
  swift_beginAccess();
  v60 = *(_QWORD *)(v59 + 16);
  v61 = *(_QWORD *)(v60 + 64);
  v91 = v60 + 64;
  v62 = 1 << *(_BYTE *)(v60 + 32);
  v63 = -1;
  if (v62 < 64)
    v63 = ~(-1 << v62);
  v64 = v63 & v61;
  v92 = (unint64_t)(v62 + 63) >> 6;
  v93 = v60;
  swift_bridgeObjectRetain();
  v65 = 0;
  v66 = v96;
  if (!v64)
    goto LABEL_37;
  while (2)
  {
    v67 = __clz(__rbit64(v64));
    v64 &= v64 - 1;
    v68 = v67 | (v65 << 6);
LABEL_50:
    v71 = (uint64_t *)(*(_QWORD *)(v93 + 48) + 16 * v68);
    v73 = *v71;
    v72 = v71[1];
    v74 = *(_QWORD *)(v93 + 56) + 32 * v68;
    v75 = *(_QWORD *)(v74 + 16);
    v76 = *(_QWORD *)(v74 + 24);
    sub_1C1D48840(*v71, v72);
    swift_bridgeObjectRetain();
    sub_1C1D48840(v75, v76);
    sub_1C2019974();
    v77 = sub_1C201995C();
    v79 = v78;
    (*(void (**)(char *, uint64_t))(v94 + 8))(v66, v95);
    if (v79 >> 60 == 15)
    {
      sub_1C1D48898(v73, v72);
      swift_bridgeObjectRelease();
      sub_1C1D48898(v75, v76);
      swift_release();
      sub_1C1D48898((uint64_t)v98, v99);
      swift_release();
      sub_1C1D48898(v101, v102);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
      goto LABEL_30;
    }
    type metadata accessor for SiriNLUTypesPrintUtils();
    if ((v90 & 1) != 0)
    {
      while (sub_1C1EAD894(v77, v79, v75, v76))
        ;
    }
    else
    {
      while (sub_1C1EAD894(v77, v79, 0, 0xC000000000000000))
        ;
    }
    sub_1C1D48884(v77, v79);
    sub_1C1D48898(v73, v72);
    swift_bridgeObjectRelease();
    sub_1C1D48898(v75, v76);
    if (v64)
      continue;
    break;
  }
LABEL_37:
  v35 = __OFADD__(v65++, 1);
  if (v35)
    goto LABEL_69;
  if (v65 < v92)
  {
    v69 = *(_QWORD *)(v91 + 8 * v65);
    if (!v69)
    {
      v70 = v65 + 1;
      if (v65 + 1 >= v92)
        goto LABEL_65;
      v69 = *(_QWORD *)(v91 + 8 * v70);
      if (!v69)
      {
        v70 = v65 + 2;
        if (v65 + 2 >= v92)
          goto LABEL_65;
        v69 = *(_QWORD *)(v91 + 8 * v70);
        if (!v69)
        {
          v70 = v65 + 3;
          if (v65 + 3 >= v92)
            goto LABEL_65;
          v69 = *(_QWORD *)(v91 + 8 * v70);
          if (!v69)
          {
            v70 = v65 + 4;
            if (v65 + 4 >= v92)
              goto LABEL_65;
            v69 = *(_QWORD *)(v91 + 8 * v70);
            if (!v69)
            {
              while (1)
              {
                v65 = v70 + 1;
                if (__OFADD__(v70, 1))
                  goto LABEL_71;
                if (v65 >= v92)
                  goto LABEL_65;
                v69 = *(_QWORD *)(v91 + 8 * v65);
                ++v70;
                if (v69)
                  goto LABEL_49;
              }
            }
          }
        }
      }
      v65 = v70;
    }
LABEL_49:
    v64 = (v69 - 1) & v69;
    v68 = __clz(__rbit64(v69)) + (v65 << 6);
    goto LABEL_50;
  }
LABEL_65:
  swift_release();
  v85 = (uint64_t)v98;
  v86 = v99;
  sub_1C1D48840((uint64_t)v98, v99);
  sub_1C2019974();
  v24 = sub_1C2019968();
  v88 = v87;
  sub_1C1D48898(v85, v86);
  if (!v88)
    v24 = 0xD000000000000036;
  sub_1C1D48898(v85, v86);
  swift_release();
  sub_1C1D48898(v101, v102);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v103);
LABEL_64:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v105);
  return v24;
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils()
{
  return objc_opt_self();
}

uint64_t sub_1C1EB3080(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1C1EB30C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF72CBE0;
  if (!qword_1EF72CBE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF72CBD8);
    result = MEMORY[0x1C3BB7668](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF72CBE0);
  }
  return result;
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils.ReadableGraphVisitor()
{
  return objc_opt_self();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_1C1EB3164()
{
  unint64_t result;

  result = qword_1EF7231B8;
  if (!qword_1EF7231B8)
  {
    result = MEMORY[0x1C3BB7668](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF7231B8);
  }
  return result;
}

_OWORD *sub_1C1EB31A0(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1C1EB31F4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x1C3BB7668](a4, v6), a1);
  }
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EB3230()
{
  return nullsub_1();
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  return sub_1C20195FC();
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  void *v0;

  return sub_1C1E02A10(v0);
}

uint64_t OUTLINED_FUNCTION_4_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 64) = a1;
  *(_QWORD *)(v2 - 56) = a2;
  *(_QWORD *)(v2 - 80) = 0;
  *(_OWORD *)(v2 - 112) = 0u;
  *(_OWORD *)(v2 - 96) = 0u;
  return sub_1C20194A0();
}

void OUTLINED_FUNCTION_10_16()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1C1D48A10(v1, v0);
}

void OUTLINED_FUNCTION_12_16()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1C1D4B0A8(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 - 328) = v2 + 64;
  *(_QWORD *)(v1 - 320) = (unint64_t)((1 << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  *(_QWORD *)(v1 - 312) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_14_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 - 328) = v2 + 64;
  *(_QWORD *)(v1 - 320) = (unint64_t)((1 << *(_BYTE *)(v2 + 32)) + 63) >> 6;
  *(_QWORD *)(v1 - 312) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_10()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 320) + 8))(v0, *(_QWORD *)(v1 - 312));
}

uint64_t OUTLINED_FUNCTION_18_9()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_9()
{
  return sub_1C20194AC();
}

uint64_t OUTLINED_FUNCTION_20_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_23_12()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48898(v0, v1);
}

void OUTLINED_FUNCTION_24_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  sub_1C1EB0F6C(v9, 0, 0, 1, v8, a6, a7, a8);
}

void OUTLINED_FUNCTION_25_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  sub_1C1EB08CC(v9, 0, 0, 1, v8, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_26_11@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 312) + 48) + 16 * a1;
  return sub_1C1D48840(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
}

uint64_t OUTLINED_FUNCTION_27_13@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 312) + 48) + 16 * a1;
  return sub_1C1D48840(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
}

uint64_t OUTLINED_FUNCTION_28_11(uint64_t a1)
{
  unint64_t v1;

  return sub_1C1D48898(a1, v1);
}

uint64_t OUTLINED_FUNCTION_29_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 264) = v0;
  *(_QWORD *)(v2 - 256) = v1;
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_31_12()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 304) + 8))(v0, *(_QWORD *)(v1 - 296));
}

uint64_t OUTLINED_FUNCTION_32_11()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 304) + 8))(v0, *(_QWORD *)(v1 - 296));
}

uint64_t OUTLINED_FUNCTION_33_10@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 288) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return sub_1C2019494();
}

void OUTLINED_FUNCTION_35_14(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  sub_1C1EB31F4(a1, 255, a3, a4);
}

void OUTLINED_FUNCTION_37_11(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 - 344) = a8;
  *(_DWORD *)(v8 - 332) = a4;
  *(_QWORD *)(v8 - 328) = a2;
}

uint64_t OUTLINED_FUNCTION_38_10(uint64_t a1)
{
  unint64_t v1;

  return sub_1C1D48898(a1, v1);
}

uint64_t OUTLINED_FUNCTION_39_10()
{
  return sub_1C2018CFC();
}

uint64_t OUTLINED_FUNCTION_40_8()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_41_13()
{
  return type metadata accessor for Siri_Nlu_Internal_Spanmatch_SpanMatchResponse();
}

uint64_t OUTLINED_FUNCTION_42_12()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_43_7()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1C1D48898(v1, v0);
}

uint64_t OUTLINED_FUNCTION_44_9()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_45_9()
{
  uint64_t v0;

  sub_1C1EB31A0((_OWORD *)(v0 - 248), (_OWORD *)(v0 - 176));
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 152));
  return sub_1C2019A04();
}

uint64_t OUTLINED_FUNCTION_46_8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48898(v0, v1);
}

uint64_t OUTLINED_FUNCTION_47_6()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1C1D48898(v1, v0);
}

BOOL OUTLINED_FUNCTION_49_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_1C1EAD894(v1, v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_55_9()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1Tm(v0 - 176);
}

uint64_t OUTLINED_FUNCTION_56_10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1C1EB2454(a1, a2, a3, a4, a5, a6, a7);
}

void OUTLINED_FUNCTION_57_9(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  *(_QWORD *)(v4 - 112) = a1;
  sub_1C1EB31F4(v2, 255, v3, v1);
}

BOOL OUTLINED_FUNCTION_58_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return sub_1C1EAD894(v0, v1, v2, v3);
}

BOOL OUTLINED_FUNCTION_59_8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C1EAD894(v0, v1, 0, 0xC000000000000000);
}

uint64_t OUTLINED_FUNCTION_60_7()
{
  uint64_t v0;

  return sub_1C1D48840(*(_QWORD *)(v0 - 264), *(_QWORD *)(v0 - 256));
}

uint64_t OUTLINED_FUNCTION_61_7()
{
  uint64_t v0;

  return sub_1C1D48898(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 184));
}

uint64_t OUTLINED_FUNCTION_62_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_63_7()
{
  return sub_1C201995C();
}

uint64_t OUTLINED_FUNCTION_65_7()
{
  uint64_t v0;

  return sub_1C1D48840(*(_QWORD *)(v0 - 192), *(_QWORD *)(v0 - 184));
}

id OUTLINED_FUNCTION_67_4(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v3, 1, v4 - 248);
}

uint64_t OUTLINED_FUNCTION_69_7()
{
  return sub_1C201995C();
}

id OUTLINED_FUNCTION_70_8(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  return objc_msgSend(v2, a2, v3, 0, v4 - 264);
}

uint64_t OUTLINED_FUNCTION_72_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_73_11()
{
  return swift_release();
}

uint64_t *OUTLINED_FUNCTION_74_8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 - 136));
}

void OUTLINED_FUNCTION_80_4()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_84_6()
{
  return sub_1C2019968();
}

uint64_t OUTLINED_FUNCTION_85_7()
{
  return sub_1C2019974();
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 160) + 8))(v0, *(_QWORD *)(v1 - 152));
}

uint64_t OUTLINED_FUNCTION_87_5()
{
  uint64_t v0;

  return sub_1C1D48898(*(_QWORD *)(v0 - 264), *(_QWORD *)(v0 - 256));
}

uint64_t OUTLINED_FUNCTION_88_6()
{
  return swift_willThrow();
}

void OUTLINED_FUNCTION_89_7(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_1C1D4B0A8(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_90_7()
{
  return sub_1C2018D14();
}

void OUTLINED_FUNCTION_91_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_1C1D4B348(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_92_4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_93_4()
{
  return sub_1C2018F00();
}

uint64_t OUTLINED_FUNCTION_94_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return sub_1C2019980();
}

uint64_t OUTLINED_FUNCTION_95_5()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48840(v0, v1);
}

uint64_t OUTLINED_FUNCTION_96_4()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_98_7()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 112));
  return sub_1C2019488();
}

void OUTLINED_FUNCTION_99_6()
{
  void *v0;

}

char *OUTLINED_FUNCTION_100_3(char *a1, int64_t a2)
{
  char *v2;

  return sub_1C1E5749C(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_102_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_103_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_105_4()
{
  uint64_t v0;

  return sub_1C1EB3080(v0 - 136, v0 - 176);
}

uint64_t OUTLINED_FUNCTION_106_4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48840(v0, v1);
}

uint64_t OUTLINED_FUNCTION_107_4()
{
  return sub_1C20199C8();
}

id OUTLINED_FUNCTION_109_3()
{
  uint64_t v0;

  return *(id *)(v0 - 264);
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.planText.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 24));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72CCB0);
}

void sub_1C1EB3968()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.planText.setter();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.planText.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_13();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.planText.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(int *)(OUTLINED_FUNCTION_33_11(a1) + 24);
  *(_DWORD *)(v1 + 24) = v2;
  v3 = OUTLINED_FUNCTION_12_2(v2);
  if (v3)
  {
    v5 = *v4;
    v6 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 8) = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.hasPlanText.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.clearPlanText()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.generatedTranscriptEventsJson.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  v1 = OUTLINED_FUNCTION_10_17(*(int *)(v0 + 28));
  sub_1C1D4882C(v1, v2);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB3A98(uint64_t a1)
{
  sub_1C1D48840(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.generatedTranscriptEventsJson.setter();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.generatedTranscriptEventsJson.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_30_13();
  OUTLINED_FUNCTION_35_15(*(int *)(v0 + 28));
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.generatedTranscriptEventsJson.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_33_11(a1);
  v2 = OUTLINED_FUNCTION_7_7(*(int *)(v1 + 28));
  OUTLINED_FUNCTION_41_14(v2, v3, v4);
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.hasGeneratedTranscriptEventsJson.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  return OUTLINED_FUNCTION_11_12(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.clearGeneratedTranscriptEventsJson()()
{
  _OWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  OUTLINED_FUNCTION_25_12(*(int *)(v1 + 28));
  *v0 = xmmword_1C203C410;
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.transcriptEvents.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.transcriptEvents.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.transcriptEvents.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_132();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t (*Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  return nullsub_1;
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.init()(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = MEMORY[0x1E0DEE9D8];
  v2 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v3 = (_QWORD *)((char *)a1 + *(int *)(v2 + 24));
  *v3 = 0;
  v3[1] = 0;
  *(_OWORD *)((char *)a1 + *(int *)(v2 + 28)) = xmmword_1C203C410;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoEncoding.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  v1 = OUTLINED_FUNCTION_10_17(*(int *)(v0 + 20));
  sub_1C1D4882C(v1, v2);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72CD48);
}

void sub_1C1EB3D04(uint64_t a1)
{
  sub_1C1D48840(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoEncoding.setter();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoEncoding.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_13_9();
  OUTLINED_FUNCTION_35_15(*(int *)(v0 + 20));
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoEncoding.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_20_11(a1);
  v2 = OUTLINED_FUNCTION_7_7(*(int *)(v1 + 20));
  OUTLINED_FUNCTION_41_14(v2, v3, v4);
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.hasProtoEncoding.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  return OUTLINED_FUNCTION_11_12(*(int *)(v0 + 20));
}

Swift::Void __swiftcall Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.clearProtoEncoding()()
{
  _OWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  OUTLINED_FUNCTION_25_12(*(int *)(v1 + 20));
  *v0 = xmmword_1C203C410;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.runtimeEncoding.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  v1 = OUTLINED_FUNCTION_10_17(*(int *)(v0 + 24));
  sub_1C1D4882C(v1, v2);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB3E24(uint64_t a1)
{
  sub_1C1D48840(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.runtimeEncoding.setter();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.runtimeEncoding.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_13_9();
  OUTLINED_FUNCTION_35_15(*(int *)(v0 + 24));
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.runtimeEncoding.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_20_11(a1);
  v2 = OUTLINED_FUNCTION_7_7(*(int *)(v1 + 24));
  OUTLINED_FUNCTION_41_14(v2, v3, v4);
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.hasRuntimeEncoding.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  return OUTLINED_FUNCTION_11_12(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.clearRuntimeEncoding()()
{
  _OWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  OUTLINED_FUNCTION_25_12(*(int *)(v1 + 24));
  *v0 = xmmword_1C203C410;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.eventDescription.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 28));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB3F54()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.eventDescription.setter();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.eventDescription.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_9();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.eventDescription.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(int *)(OUTLINED_FUNCTION_20_11(a1) + 28);
  *(_DWORD *)(v1 + 24) = v2;
  v3 = OUTLINED_FUNCTION_12_2(v2);
  if (v3)
  {
    v5 = *v4;
    v6 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 8) = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.hasEventDescription.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.clearEventDescription()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_132();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t (*Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.init()(uint64_t a1@<X8>)
{
  int *v2;
  _QWORD *v3;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v2 = (int *)type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  *(_OWORD *)(a1 + v2[5]) = xmmword_1C203C410;
  *(_OWORD *)(a1 + v2[6]) = xmmword_1C203C410;
  v3 = (_QWORD *)(a1 + v2[7]);
  *v3 = 0;
  v3[1] = 0;
  OUTLINED_FUNCTION_82();
}

unint64_t static Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_29_10();
}

uint64_t sub_1C1EB410C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CBE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CBE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "plan_text";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "generated_transcript_events_json";
  *((_QWORD *)v11 + 1) = 32;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "transcript_events";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_CdmPlanner_CdmPlannerResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724608, (uint64_t)qword_1EF72CBE8, a1);
}

void Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EB433C();
          break;
        case 2:
          OUTLINED_FUNCTION_17_15();
          break;
        case 1:
          OUTLINED_FUNCTION_18_10();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_26_2();
}

uint64_t sub_1C1EB433C()
{
  type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  sub_1C1D505C8(&qword_1EF72CC18, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
  return sub_1C20195A8();
}

uint64_t Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  char v5;
  char v6;

  v2 = v1;
  if (!*(_QWORD *)(v0
                  + *(int *)(type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0) + 24)
                  + 8)
    || (OUTLINED_FUNCTION_37_12(), result = sub_1C2019698(), (v2 = v1) == 0))
  {
    OUTLINED_FUNCTION_34_11();
    if (!v6 & v5
      || (OUTLINED_FUNCTION_19_10(v4),
          OUTLINED_FUNCTION_37_12(),
          sub_1C2019650(),
          result = OUTLINED_FUNCTION_14_17(),
          !v2))
    {
      if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
        return sub_1C2019464();
      type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
      sub_1C1D505C8(&qword_1EF72CC18, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
      result = sub_1C20196BC();
      if (!v2)
        return sub_1C2019464();
    }
  }
  return result;
}

void static Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  void (*v21)(uint64_t);
  uint64_t v22;

  v6 = OUTLINED_FUNCTION_8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v8);
  v9 = OUTLINED_FUNCTION_158_0();
  v10 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(v9);
  OUTLINED_FUNCTION_22_3();
  if (v11)
  {
    if (!v12)
      goto LABEL_20;
    v15 = *v13 == *v14 && v11 == v12;
    if (!v15 && (sub_1C2019A10() & 1) == 0)
      goto LABEL_20;
  }
  else if (v12)
  {
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_6_12();
  if (!(!v15 & v16))
  {
    OUTLINED_FUNCTION_39_11();
    if (!(!v17 & v16))
      OUTLINED_FUNCTION_0_20();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_39_11();
  if (!(!v15 & v16))
  {
LABEL_17:
    OUTLINED_FUNCTION_4_11();
    goto LABEL_20;
  }
  sub_1C1D40F84();
  if ((v18 & 1) != 0)
  {
    v19 = a1 + *(int *)(v10 + 20);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v20(v3, v19, v6);
    v20(v2, a2 + *(int *)(v10 + 20), v6);
    sub_1C1D505C8(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    sub_1C2019944();
    v21 = *(void (**)(uint64_t))(v7 + 8);
    v22 = OUTLINED_FUNCTION_132();
    v21(v22);
    ((void (*)(uint64_t, uint64_t))v21)(v3, v6);
  }
LABEL_20:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.hashValue.getter()
{
  return sub_1C1D666A0(type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, &qword_1EF72CC20, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
}

unint64_t sub_1C1EB4698()
{
  static Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.protoMessageName.getter();
  return 0xD000000000000030;
}

void sub_1C1EB46BC()
{
  Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EB46D0()
{
  return Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.traverse<A>(visitor:)();
}

uint64_t sub_1C1EB46E4()
{
  sub_1C1D505C8(&qword_1EF72CD90, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
  return sub_1C20194C4();
}

uint64_t sub_1C1EB4738()
{
  sub_1C1D505C8(&qword_1EF72CC38, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
  return sub_1C2019608();
}

uint64_t sub_1C1EB477C()
{
  sub_1C1D505C8(&qword_1EF72CC38, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_29_10();
}

uint64_t sub_1C1EB47DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CC00);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CC00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "proto_encoding";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "runtime_encoding";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "event_description";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724610, (uint64_t)qword_1EF72CC00, a1);
}

void Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_17_15();
          break;
        case 2:
          OUTLINED_FUNCTION_18_10();
          break;
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EB4A0C();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_26_2();
}

uint64_t sub_1C1EB4A0C()
{
  type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  return sub_1C2019530();
}

void sub_1C1EB4A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_10_11(a1, a2, a3, a4, a5);
  OUTLINED_FUNCTION_21_10(*(int *)(v5 + 24));
  OUTLINED_FUNCTION_51_1();
}

void sub_1C1EB4A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_10_11(a1, a2, a3, a4, a5);
  OUTLINED_FUNCTION_21_10(*(int *)(v5 + 28));
  OUTLINED_FUNCTION_51_1();
}

uint64_t Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t *v7;

  v2 = type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
  OUTLINED_FUNCTION_34_11();
  if (!v5 & v4 || (OUTLINED_FUNCTION_19_10(v3), OUTLINED_FUNCTION_36_14(), result = OUTLINED_FUNCTION_14_17(), !v1))
  {
    OUTLINED_FUNCTION_34_11();
    if (!v5 & v4 || (OUTLINED_FUNCTION_19_10(v7), OUTLINED_FUNCTION_36_14(), result = OUTLINED_FUNCTION_14_17(), !v1))
    {
      if (!*(_QWORD *)(v0 + *(int *)(v2 + 28) + 8))
        return sub_1C2019464();
      result = sub_1C2019698();
      if (!v1)
        return sub_1C2019464();
    }
  }
  return result;
}

void static Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v7 = OUTLINED_FUNCTION_8();
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v8);
  v9 = OUTLINED_FUNCTION_158_0();
  type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(v9);
  OUTLINED_FUNCTION_6_12();
  v19 = v2;
  if (!(!v11 & v10))
  {
    if (v4 >> 60 != 15)
      OUTLINED_FUNCTION_0_20();
    goto LABEL_14;
  }
  if (v4 >> 60 != 15)
    goto LABEL_14;
  OUTLINED_FUNCTION_6_12();
  if (!(!v11 & v10))
  {
    OUTLINED_FUNCTION_39_11();
    if (!(!v11 & v10))
      OUTLINED_FUNCTION_0_20();
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_39_11();
  if (!(!v11 & v10))
  {
LABEL_14:
    OUTLINED_FUNCTION_4_11();
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_22_3();
  if (!v12)
  {
    if (v13)
      goto LABEL_15;
LABEL_25:
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v17(v3, a1, v7);
    v17(v19, a2, v7);
    sub_1C1D505C8(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    sub_1C2019944();
    v18 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v18(v19, v7);
    v18(v3, v7);
    goto LABEL_15;
  }
  if (v13)
  {
    v16 = *v14 == *v15 && v12 == v13;
    if (v16 || (sub_1C2019A10() & 1) != 0)
      goto LABEL_25;
  }
LABEL_15:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.hashValue.getter()
{
  return sub_1C1D666A0(type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, &qword_1EF72CC28, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
}

unint64_t sub_1C1EB4D78()
{
  static Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoMessageName.getter();
  return 0xD000000000000030;
}

void sub_1C1EB4D9C()
{
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EB4DB0()
{
  return Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.traverse<A>(visitor:)();
}

uint64_t sub_1C1EB4DC4()
{
  sub_1C1D505C8(&qword_1EF72CD88, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
  return sub_1C20194C4();
}

uint64_t sub_1C1EB4E18()
{
  sub_1C1D505C8(&qword_1EF72CC18, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
  return sub_1C2019608();
}

uint64_t sub_1C1EB4E5C()
{
  sub_1C1D505C8(&qword_1EF72CC18, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
  return sub_1C2019614();
}

uint64_t sub_1C1EB4EB0()
{
  return sub_1C1D505C8(&qword_1EF72CC30, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
}

uint64_t sub_1C1EB4EDC()
{
  return sub_1C1D505C8(&qword_1EF72CC38, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
}

uint64_t sub_1C1EB4F08()
{
  return sub_1C1D505C8(&qword_1EF72CC20, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
}

uint64_t sub_1C1EB4F34()
{
  return sub_1C1D505C8(&qword_1EF72CC40, type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse);
}

uint64_t sub_1C1EB4F60()
{
  return sub_1C1D505C8(&qword_1EF72CC48, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
}

uint64_t sub_1C1EB4F8C()
{
  return sub_1C1D505C8(&qword_1EF72CC18, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
}

uint64_t sub_1C1EB4FB8()
{
  return sub_1C1D505C8(&qword_1EF72CC28, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
}

uint64_t sub_1C1EB4FE4()
{
  return sub_1C1D505C8(&qword_1EF72CC50, type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent);
}

void sub_1C1EB5010()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.planText.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB5034()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_CdmPlanner_CdmPlannerResponse.generatedTranscriptEventsJson.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB5058()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.protoEncoding.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB507C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.runtimeEncoding.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB50A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent.eventDescription.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v7 + v14;
    v19 = (_OWORD *)((char *)a2 + v14);
    v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      sub_1C1D48840(v21, v20);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_1C1D48898(*v7, v8);
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (char *)a1 + v12;
  v17 = (char *)a2 + v12;
  v18 = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_1C1D48840(v19, v18);
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = *(_QWORD *)((char *)a2 + v13 + 8);
  if (*(_QWORD *)((char *)a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      v18 = *v15;
      sub_1C1D48840(v18, v16);
      v19 = *v14;
      v20 = v14[1];
      *v14 = v18;
      v14[1] = v16;
      sub_1C1D48898(v19, v20);
      return a1;
    }
    sub_1C1E7151C((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    return a1;
  }
  v17 = *v15;
  sub_1C1D48840(v17, v16);
  *v14 = v17;
  v14[1] = v16;
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = *(_QWORD *)((char *)a1 + v15 + 8);
  if (v18 >> 60 != 15)
  {
    v19 = v17[1];
    if (v19 >> 60 != 15)
    {
      v20 = *v16;
      *v16 = *v17;
      v16[1] = v19;
      sub_1C1D48898(v20, v18);
      return a1;
    }
    sub_1C1E7151C((uint64_t)v16);
  }
  *(_OWORD *)v16 = *(_OWORD *)v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EB5530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_10_4(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EB559C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_12_1((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_1C1EB55F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_1C1D48840(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      sub_1C1D48840(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
    v19 = a3[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v4 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_1C1D48898(*v5, v6);
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_1C1D48898(*v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_1C1D48840(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_1C1D48840(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      sub_1C1D48840(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_1C1E7151C((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  sub_1C1D48840(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  sub_1C1D48898(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      sub_1C1D48840(v20, v18);
      v21 = *v16;
      v22 = v16[1];
      *v16 = v20;
      v16[1] = v18;
      sub_1C1D48898(v21, v22);
      goto LABEL_15;
    }
    sub_1C1E7151C((uint64_t)v16);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v19 = *v17;
  sub_1C1D48840(v19, v18);
  *v16 = v19;
  v16[1] = v18;
LABEL_15:
  v23 = a3[7];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1C1E7151C(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  sub_1C1D48898(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      v18 = *v14;
      *v14 = *v15;
      v14[1] = v17;
      sub_1C1D48898(v18, v16);
      goto LABEL_11;
    }
    sub_1C1E7151C((uint64_t)v14);
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
LABEL_11:
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EB5BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    OUTLINED_FUNCTION_10_4(a1, a2, v4);
  else
    OUTLINED_FUNCTION_101();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EB5C28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    OUTLINED_FUNCTION_12_1(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
    OUTLINED_FUNCTION_101();
  }
}

uint64_t sub_1C1EB5C8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void OUTLINED_FUNCTION_0_20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_1C1D4882C(v0, v1);
  sub_1C1D4882C(v2, v3);
  JUMPOUT(0x1C3BB5E98);
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_1C1D4882C(v0, v1);
  sub_1C1D4882C(v2, v3);
  sub_1C1D48884(v0, v1);
  return sub_1C1D48884(v2, v3);
}

uint64_t OUTLINED_FUNCTION_7_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + 24) = a1;
  return *(_QWORD *)(v2 + a1);
}

uint64_t OUTLINED_FUNCTION_9_11()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_1C1D48884(v2, v3);
  return sub_1C1D48884(v0, v1);
}

uint64_t OUTLINED_FUNCTION_10_17@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

BOOL OUTLINED_FUNCTION_11_12@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1 + 8) >> 60 != 15;
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  return type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
}

uint64_t OUTLINED_FUNCTION_14_17()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1C1D48884(v1, v0);
}

void OUTLINED_FUNCTION_17_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_1C1EB4A94(v1, v0, v3, v2, v4);
}

void OUTLINED_FUNCTION_18_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_1C1EB4A6C(v1, v0, v3, v2, v4);
}

uint64_t OUTLINED_FUNCTION_19_10@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v1;

  return sub_1C1D48840(*a1, v1);
}

uint64_t OUTLINED_FUNCTION_20_11(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_External_CdmPlanner_CDMTranscriptEvent(0);
}

uint64_t OUTLINED_FUNCTION_21_10@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v2 + a1, v4, v3);
}

uint64_t OUTLINED_FUNCTION_25_12@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C1D48884(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

unint64_t OUTLINED_FUNCTION_29_10()
{
  return 0xD000000000000030;
}

uint64_t OUTLINED_FUNCTION_30_13()
{
  return type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
}

uint64_t OUTLINED_FUNCTION_33_11(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_External_CdmPlanner_CdmPlannerResponse(0);
}

uint64_t OUTLINED_FUNCTION_35_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = v2 + a1;
  result = sub_1C1D48884(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_14()
{
  return sub_1C2019650();
}

uint64_t OUTLINED_FUNCTION_41_14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;

  *v4 = a3;
  v4[1] = v3;
  return sub_1C1D4882C(a1, a2);
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.hypotheses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.hypotheses.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Siri_Nlu_Internal_Cati_CATIResponse.hypotheses.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_21() + 20);
  v4 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(a1, v3, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 16));
}

uint64_t type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse()
{
  uint64_t result;

  result = qword_1EF72CE28;
  if (!qword_1EF72CE28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_21() + 20);
  v4 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*Siri_Nlu_Internal_Cati_CATIResponse.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_1_21();
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_1_21();
  return _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
}

unint64_t static Siri_Nlu_Internal_Cati_CATIResponse.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_1C1EB6098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CD98);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CD98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C202A2C0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "hypotheses";
  *(_QWORD *)(v5 + 8) = 10;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = sub_1C20198F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_Cati_CATIResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF724618 != -1)
    swift_once();
  v2 = sub_1C2019914();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF72CD98);
  return OUTLINED_FUNCTION_99(a1, v3, v2, *(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 16));
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1C20194DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_1C1E5B3DC();
  }
  return result;
}

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for Siri_Nlu_External_UserParse(0),
        sub_1C1D505C8(&qword_1EF723390, type metadata accessor for Siri_Nlu_External_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse), result = sub_1C20196BC(), !v1))
  {
    type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse();
    return sub_1C2019464();
  }
  return result;
}

#error "1C1EB63C0: call analysis failed (funcsize=74)"

uint64_t Siri_Nlu_Internal_Cati_CATIResponse.hashValue.getter()
{
  sub_1C2019A64();
  OUTLINED_FUNCTION_1_21();
  sub_1C1D505C8(&qword_1EF72CDB0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
  sub_1C201992C();
  return sub_1C2019A70();
}

unint64_t sub_1C1EB64E0()
{
  static Siri_Nlu_Internal_Cati_CATIResponse.protoMessageName.getter();
  return 0xD000000000000023;
}

uint64_t sub_1C1EB6504()
{
  return Siri_Nlu_Internal_Cati_CATIResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EB6518()
{
  return Siri_Nlu_Internal_Cati_CATIResponse.traverse<A>(visitor:)();
}

uint64_t sub_1C1EB652C()
{
  sub_1C1D505C8(&qword_1EF72CE60, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
  return sub_1C20194C4();
}

uint64_t sub_1C1EB6580()
{
  sub_1C1D505C8(&qword_1EF72CDC0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
  return sub_1C2019608();
}

uint64_t sub_1C1EB65C4()
{
  sub_1C1D505C8(&qword_1EF72CDC0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
  return sub_1C2019614();
}

uint64_t sub_1C1EB6618()
{
  return sub_1C1D505C8(&qword_1EF72CDB8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
}

uint64_t sub_1C1EB6644()
{
  return sub_1C1D505C8(&qword_1EF72CDC0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
}

uint64_t sub_1C1EB6670()
{
  return sub_1C1D505C8(&qword_1EF72CDB0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
}

uint64_t sub_1C1EB669C()
{
  return sub_1C1D505C8(&qword_1EF72CDC8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Cati_CATIResponse);
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_Cati_CATIResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EB66D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_8();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_Cati_CATIResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_1C1EB6750(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_8();
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return type metadata accessor for Siri_Nlu_Internal_Cati_CATIResponse();
}

uint64_t (*Siri_Nlu_Internal_OverrideMetadata.unknownFields.modify())(void)
{
  return nullsub_1;
}

SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideNamespace_optional __swiftcall Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideNamespace_optional result;

  OUTLINED_FUNCTION_66_2(v1);
  return result;
}

void sub_1C1EB67EC()
{
  unsigned __int8 *v0;

  sub_1C1ED5E3C(*v0);
}

uint64_t sub_1C1EB67F4()
{
  sub_1C1EC5034();
  return sub_1C20194D0();
}

void sub_1C1EB682C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED6054(a1, *v1);
}

SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideNamespace_optional sub_1C1EB6840(Swift::Int *a1)
{
  return Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace.init(rawValue:)(*a1);
}

SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideSource_optional __swiftcall Siri_Nlu_Internal_OverrideMetadata.OverrideSource.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideSource_optional result;

  OUTLINED_FUNCTION_66_2(v1);
  return result;
}

void sub_1C1EB685C()
{
  unsigned __int8 *v0;

  sub_1C1ED5E50(*v0);
}

uint64_t sub_1C1EB6864()
{
  sub_1C1ECD894();
  return sub_1C20194D0();
}

void sub_1C1EB689C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED6040(a1, *v1);
}

SiriNLUTypes::Siri_Nlu_Internal_OverrideMetadata::OverrideSource_optional sub_1C1EB68A8(Swift::Int *a1)
{
  return Siri_Nlu_Internal_OverrideMetadata.OverrideSource.init(rawValue:)(*a1);
}

void *static Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace.allCases.getter()
{
  return &unk_1E7BA65D0;
}

void sub_1C1EB68C0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA65D0;
}

void *static Siri_Nlu_Internal_OverrideMetadata.OverrideSource.allCases.getter()
{
  return &unk_1E7BA65F8;
}

void sub_1C1EB68DC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA65F8;
}

uint64_t Siri_Nlu_Internal_OverrideCollection.creationTimestampMsSinceUnixEpoch.getter()
{
  _BYTE *v0;

  type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
  OUTLINED_FUNCTION_22_5();
  return OUTLINED_FUNCTION_322_1(v0);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_OverrideCollection(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF720C20);
}

void Siri_Nlu_Internal_OverrideCollection.creationTimestampMsSinceUnixEpoch.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OUTLINED_FUNCTION_117_1();
  type metadata accessor for Siri_Nlu_Internal_OverrideCollection(v1);
  OUTLINED_FUNCTION_22_5();
  *(_QWORD *)v2 = v0;
  *(_BYTE *)(v2 + 8) = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_OverrideCollection.creationTimestampMsSinceUnixEpoch.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = v1;
  v2 = type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
  OUTLINED_FUNCTION_3_3(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_OverrideCollection.hasCreationTimestampMsSinceUnixEpoch.getter()
{
  uint64_t v0;

  type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
  OUTLINED_FUNCTION_22_5();
  return OUTLINED_FUNCTION_122_3(*(_BYTE *)(v0 + 8));
}

Swift::Void __swiftcall Siri_Nlu_Internal_OverrideCollection.clearCreationTimestampMsSinceUnixEpoch()()
{
  uint64_t v0;

  type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
  OUTLINED_FUNCTION_22_5();
  OUTLINED_FUNCTION_7_2(v0);
}

void Siri_Nlu_Internal_OverrideCollection.assetID.getter()
{
  sub_1C1E125CC(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EB69D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_OverrideCollection.assetID.setter(v1, v2);
}

void Siri_Nlu_Internal_OverrideCollection.assetID.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E1264C(a1, a2, type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

void Siri_Nlu_Internal_OverrideCollection.assetID.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[2] = v1;
  v3 = OUTLINED_FUNCTION_222_0();
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 32)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_OverrideCollection.hasAssetID.getter()
{
  return sub_1C1E126C8(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

Swift::Void __swiftcall Siri_Nlu_Internal_OverrideCollection.clearAssetID()()
{
  sub_1C1E126F0(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

void Siri_Nlu_Internal_OverrideCollection.version.getter()
{
  sub_1C1EB9EF8(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EB6A88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_OverrideCollection.version.setter(v1, v2);
}

void Siri_Nlu_Internal_OverrideCollection.version.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1EB9F78(a1, a2, type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

void Siri_Nlu_Internal_OverrideCollection.version.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[2] = v1;
  v3 = OUTLINED_FUNCTION_222_0();
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 36)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_OverrideCollection.hasVersion.getter()
{
  return sub_1C1EB9FF0(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

Swift::Void __swiftcall Siri_Nlu_Internal_OverrideCollection.clearVersion()()
{
  sub_1C1EBA018(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

uint64_t (*Siri_Nlu_Internal_OverrideCollection.parseOverrides.modify())(void)
{
  return nullsub_1;
}

uint64_t (*Siri_Nlu_Internal_OverrideCollection.componentOverrides.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_OverrideCollection.unknownFields.getter()
{
  return sub_1C1E191AC(type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

uint64_t Siri_Nlu_Internal_OverrideCollection.unknownFields.setter(uint64_t a1)
{
  return sub_1C1E191EC(a1, type metadata accessor for Siri_Nlu_Internal_OverrideCollection);
}

uint64_t (*Siri_Nlu_Internal_OverrideCollection.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_222_0();
  return nullsub_1;
}

void Siri_Nlu_Internal_OverrideCollection.init()(_QWORD *a1@<X8>)
{
  int *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v3;
  OUTLINED_FUNCTION_222_0();
  OUTLINED_FUNCTION_98_1();
  OUTLINED_FUNCTION_7_2((uint64_t)a1 + v1[7]);
  v4 = (_QWORD *)((char *)a1 + v1[8]);
  *v4 = 0;
  v4[1] = 0;
  OUTLINED_FUNCTION_26_1(v1[9]);
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_ParseOverride.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(0) + 20));
  OUTLINED_FUNCTION_24_0();
  if (!*(_QWORD *)(v1 + 24))
    OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_631();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ParseOverride(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF720860);
}

void sub_1C1EB6C4C()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_ParseOverride.id.setter();
}

void Siri_Nlu_Internal_ParseOverride.id.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_171_1();
  if ((OUTLINED_FUNCTION_176_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_175_4(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = *(_QWORD *)(v2 + v3);
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_1();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ParseOverride._StorageClass(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72D4A8);
}

void Siri_Nlu_Internal_ParseOverride.id.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = OUTLINED_FUNCTION_65_0();
  *v0 = v2;
  v2[11] = v1;
  v3 = *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(0) + 20);
  *((_DWORD *)v2 + 24) = v3;
  v4 = *(_QWORD *)(v1 + v3);
  OUTLINED_FUNCTION_24_0();
  if (*(_QWORD *)(v4 + 24))
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = *(_QWORD *)(v4 + 24);
  }
  else
  {
    OUTLINED_FUNCTION_22_1();
  }
  v2[9] = v5;
  v2[10] = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB6D7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42_3();
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 80);
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_95_3();
    if ((OUTLINED_FUNCTION_84_4() & 1) == 0)
    {
      v5 = *(int *)(v1 + 96);
      v6 = *(_QWORD *)(v1 + 88);
      OUTLINED_FUNCTION_3_7();
      v7 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v6 + v5) = OUTLINED_FUNCTION_175_4(v7);
      OUTLINED_FUNCTION_16_2();
    }
    v8 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + *(int *)(v1 + 96));
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_84_4() & 1) == 0)
    {
      v9 = *(int *)(v1 + 96);
      v10 = *(_QWORD *)(v1 + 88);
      OUTLINED_FUNCTION_3_7();
      v11 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v10 + v9) = OUTLINED_FUNCTION_175_4(v11);
      OUTLINED_FUNCTION_16_2();
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + *(int *)(v1 + 96));
    OUTLINED_FUNCTION_2_1();
    *(_QWORD *)(v12 + 16) = v2;
    *(_QWORD *)(v12 + 24) = v3;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_2((void *)v1);
}

void Siri_Nlu_Internal_ParseOverride.hasID.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((OUTLINED_FUNCTION_52_6() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_268();
}

void Siri_Nlu_Internal_ParseOverride.enabled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(0) + 20));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_171_2(*(unsigned __int8 *)(v1 + 32));
  OUTLINED_FUNCTION_66_0();
}

void Siri_Nlu_Internal_ParseOverride.enabled.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_171_1();
  v3 = v2;
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_170_3(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_BYTE *)(v5 + 32) = v3 & 1;
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_ParseOverride.enabled.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v2 = OUTLINED_FUNCTION_357();
  OUTLINED_FUNCTION_209_0((uint64_t)v2);
  OUTLINED_FUNCTION_24_0();
  *(_BYTE *)(v1 + 84) = (*(_BYTE *)(v0 + 32) == 2) | *(_BYTE *)(v0 + 32) & 1;
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB7014()
{
  char v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_42_3();
  v1 = v0;
  v3 = *v2;
  OUTLINED_FUNCTION_279_0();
  v4 = *(_BYTE *)(v3 + 84);
  v5 = OUTLINED_FUNCTION_328_0();
  if ((v1 & 1) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v5 & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    OUTLINED_FUNCTION_3_7();
    v8 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v7 + v6) = OUTLINED_FUNCTION_170_3(v8);
    OUTLINED_FUNCTION_16_2();
  }
LABEL_4:
  OUTLINED_FUNCTION_279_0();
  v11 = *(_QWORD *)(v10 + v9);
  OUTLINED_FUNCTION_2_1();
  *(_BYTE *)(v11 + 32) = v4;
  OUTLINED_FUNCTION_10_2((void *)v3);
}

void Siri_Nlu_Internal_ParseOverride.hasEnabled.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearEnabled()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((OUTLINED_FUNCTION_52_6() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_BYTE *)(v3 + 32) = 2;
  OUTLINED_FUNCTION_268();
}

void Siri_Nlu_Internal_ParseOverride.creationTimestampMsSinceUnixEpoch.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

void Siri_Nlu_Internal_ParseOverride.creationTimestampMsSinceUnixEpoch.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_171_1();
  v3 = v2;
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_170_3(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)(v5 + 40) = v3;
  *(_BYTE *)(v5 + 48) = 0;
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_ParseOverride.creationTimestampMsSinceUnixEpoch.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_245_0((uint64_t)v2);
  v4 = *(_QWORD *)(v0 + v3);
  OUTLINED_FUNCTION_24_0();
  v5 = *(_QWORD *)(v4 + 40);
  if (*(_BYTE *)(v4 + 48))
    v5 = 0;
  *(_QWORD *)(v1 + 72) = v5;
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB7248()
{
  char v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_42_3();
  v1 = v0;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 72);
  v5 = OUTLINED_FUNCTION_328_0();
  if ((v1 & 1) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v5 & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    OUTLINED_FUNCTION_3_7();
    v8 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v7 + v6) = OUTLINED_FUNCTION_170_3(v8);
    OUTLINED_FUNCTION_16_2();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)(v9 + 40) = v4;
  *(_BYTE *)(v9 + 48) = 0;
  OUTLINED_FUNCTION_10_2((void *)v3);
}

void Siri_Nlu_Internal_ParseOverride.hasCreationTimestampMsSinceUnixEpoch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(0) + 20));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_122_3(*(_BYTE *)(v1 + 48));
  OUTLINED_FUNCTION_66_0();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearCreationTimestampMsSinceUnixEpoch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((OUTLINED_FUNCTION_52_6() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 1;
  OUTLINED_FUNCTION_268();
}

uint64_t Siri_Nlu_Internal_ParseOverride.parserIdentifier.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;

  v2 = OUTLINED_FUNCTION_253();
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(v2) + 20));
  result = OUTLINED_FUNCTION_24_0();
  v5 = *(unsigned __int8 *)(v3 + 49);
  if (v5 == 10)
    LOBYTE(v5) = 1;
  *v0 = v5;
  return result;
}

void sub_1C1EB73D4()
{
  Siri_Nlu_Internal_ParseOverride.parserIdentifier.setter();
}

void Siri_Nlu_Internal_ParseOverride.parserIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_171_1();
  v3 = *v2;
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_BYTE *)(v5 + 49) = v3;
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_ParseOverride.parserIdentifier.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;

  v2 = OUTLINED_FUNCTION_357();
  OUTLINED_FUNCTION_209_0((uint64_t)v2);
  OUTLINED_FUNCTION_24_0();
  v3 = *(unsigned __int8 *)(v0 + 49);
  if (v3 == 10)
    LOBYTE(v3) = 1;
  *(_BYTE *)(v1 + 84) = v3;
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB74BC()
{
  char v0;
  char v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  OUTLINED_FUNCTION_42_3();
  v1 = v0;
  v3 = *v2;
  v4 = *(_BYTE *)(*v2 + 84);
  OUTLINED_FUNCTION_279_0();
  v5 = OUTLINED_FUNCTION_328_0();
  if ((v1 & 1) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((v5 & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    OUTLINED_FUNCTION_3_7();
    v8 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v7 + v6) = OUTLINED_FUNCTION_170_3(v8);
    OUTLINED_FUNCTION_16_2();
  }
LABEL_4:
  OUTLINED_FUNCTION_279_0();
  v11 = (_BYTE *)(*(_QWORD *)(v10 + v9) + 49);
  OUTLINED_FUNCTION_2_1();
  *v11 = v4;
  OUTLINED_FUNCTION_10_2((void *)v3);
}

void Siri_Nlu_Internal_ParseOverride.hasParserIdentifier.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearParserIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((OUTLINED_FUNCTION_52_6() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = *(_QWORD *)(v0 + v1);
  OUTLINED_FUNCTION_2_1();
  *(_BYTE *)(v3 + 49) = 10;
  OUTLINED_FUNCTION_268();
}

void Siri_Nlu_Internal_ParseOverride.parse.getter()
{
  sub_1C1EB8AC4();
}

uint64_t Siri_Nlu_Internal_ParseOverride.parse.setter()
{
  return sub_1C1EB8BA8();
}

void Siri_Nlu_Internal_ParseOverride.parse.modify()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v1);
  v2 = OUTLINED_FUNCTION_46_0();
  v3 = OUTLINED_FUNCTION_43_0(v2);
  v0[4] = v3;
  v4 = OUTLINED_FUNCTION_189_3();
  v0[5] = OUTLINED_FUNCTION_9_7(v4);
  v0[6] = OUTLINED_FUNCTION_19_1();
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_88_5();
  v6 = v5
     + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_16_10(v6);
  v7 = OUTLINED_FUNCTION_5_1((uint64_t)v3);
  if (v9)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    v10 = OUTLINED_FUNCTION_252_0();
    v11 = OUTLINED_FUNCTION_74_9(v10);
    v12 = OUTLINED_FUNCTION_155_3(v11);
    v13 = OUTLINED_FUNCTION_98_8(v12);
    v14 = OUTLINED_FUNCTION_30_2(v13);
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF723398);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v7, v8, type metadata accessor for Siri_Nlu_External_UserParse);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB7708()
{
  sub_1C1EB8894();
}

void Siri_Nlu_Internal_ParseOverride.hasParse.getter()
{
  sub_1C1EB8934(&qword_1EF723398, (uint64_t)type metadata accessor for Siri_Nlu_Internal_ParseOverride, &OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse, type metadata accessor for Siri_Nlu_External_UserParse);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearParse()()
{
  sub_1C1EB8E18();
}

void Siri_Nlu_Internal_ParseOverride.nluRequestRules.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_24_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_66_0();
}

void sub_1C1EB77A8()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_ParseOverride.nluRequestRules.setter();
}

void Siri_Nlu_Internal_ParseOverride.nluRequestRules.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  OUTLINED_FUNCTION_171_1();
  v3 = v2;
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_170_3(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = (_QWORD *)(*(_QWORD *)(v0 + v1)
                + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
  OUTLINED_FUNCTION_2_1();
  *v5 = v3;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_ParseOverride.nluRequestRules.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_245_0((uint64_t)v2);
  v4 = (_QWORD *)(*(_QWORD *)(v0 + v3)
                + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
  OUTLINED_FUNCTION_24_0();
  *(_QWORD *)(v1 + 72) = *v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB78A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_42_3();
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_95_3();
    if ((OUTLINED_FUNCTION_84_4() & 1) == 0)
    {
      v4 = *(int *)(v1 + 88);
      v5 = *(_QWORD *)(v1 + 80);
      OUTLINED_FUNCTION_3_7();
      v6 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v5 + v4) = OUTLINED_FUNCTION_175_4(v6);
      OUTLINED_FUNCTION_16_2();
    }
    v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + *(int *)(v1 + 88))
                  + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
    OUTLINED_FUNCTION_2_1();
    *v7 = v2;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((OUTLINED_FUNCTION_84_4() & 1) == 0)
    {
      v8 = *(int *)(v1 + 88);
      v9 = *(_QWORD *)(v1 + 80);
      OUTLINED_FUNCTION_3_7();
      v10 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v9 + v8) = OUTLINED_FUNCTION_175_4(v10);
      OUTLINED_FUNCTION_16_2();
    }
    v11 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + *(int *)(v1 + 88))
                   + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
    OUTLINED_FUNCTION_2_1();
    *v11 = v2;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_2((void *)v1);
}

void Siri_Nlu_Internal_ParseOverride.serializedParse.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_88_5();
  v1 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse;
  OUTLINED_FUNCTION_24_0();
  sub_1C1D4882C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_631();
}

void sub_1C1EB7A18(uint64_t a1)
{
  sub_1C1D48840(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  Siri_Nlu_Internal_ParseOverride.serializedParse.setter();
}

void Siri_Nlu_Internal_ParseOverride.serializedParse.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  OUTLINED_FUNCTION_171_1();
  if ((OUTLINED_FUNCTION_176_4() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v4 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v2 + v3) = OUTLINED_FUNCTION_175_4(v4);
    OUTLINED_FUNCTION_16_2();
  }
  v5 = (uint64_t *)(*(_QWORD *)(v2 + v3)
                 + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse);
  OUTLINED_FUNCTION_2_1();
  v6 = *v5;
  v7 = v5[1];
  *v5 = v1;
  v5[1] = v0;
  sub_1C1D48884(v6, v7);
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_ParseOverride.serializedParse.modify()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = OUTLINED_FUNCTION_65_0();
  *v0 = v2;
  v2[11] = v1;
  v3 = *(int *)(type metadata accessor for Siri_Nlu_Internal_ParseOverride(0) + 20);
  *((_DWORD *)v2 + 24) = v3;
  v4 = (uint64_t *)(*(_QWORD *)(v1 + v3)
                 + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse);
  OUTLINED_FUNCTION_24_0();
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v4[1];
  v2[9] = v7;
  v2[10] = v8;
  sub_1C1D4882C(v5, v6);
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB7B48()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_42_3();
  v1 = *v0;
  if ((v2 & 1) != 0)
  {
    sub_1C1D48840(*(_QWORD *)(*v0 + 72), *(_QWORD *)(*v0 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v3 = *(int *)(v1 + 96);
      v4 = *(_QWORD *)(v1 + 88);
      OUTLINED_FUNCTION_3_7();
      v5 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v4 + v3) = sub_1C1EBC7CC(v5);
      OUTLINED_FUNCTION_16_2();
    }
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_295_0();
    sub_1C1D48898(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v6 = *(int *)(v1 + 96);
      v7 = *(_QWORD *)(v1 + 88);
      OUTLINED_FUNCTION_3_7();
      v8 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v7 + v6) = sub_1C1EBC7CC(v8);
      OUTLINED_FUNCTION_16_2();
    }
    OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_295_0();
  }
  OUTLINED_FUNCTION_10_2((void *)v1);
}

void Siri_Nlu_Internal_ParseOverride.hasSerializedParse.getter()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ParseOverride.clearSerializedParse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  if ((OUTLINED_FUNCTION_52_6() & 1) == 0)
  {
    OUTLINED_FUNCTION_3_7();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_172_4(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = (uint64_t *)(*(_QWORD *)(v0 + v1)
                 + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse);
  OUTLINED_FUNCTION_2_1();
  v4 = *v3;
  v5 = v3[1];
  *(_OWORD *)v3 = xmmword_1C203C410;
  sub_1C1D48884(v4, v5);
  OUTLINED_FUNCTION_268();
}

uint64_t (*Siri_Nlu_Internal_ParseOverride.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_ParseOverride.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1EB8224(&qword_1EF724648, &qword_1EF72CEE0, a1);
}

void Siri_Nlu_Internal_ComponentOverride.id.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

void sub_1C1EB7D74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_ComponentOverride.id.setter(v1, v2);
}

void Siri_Nlu_Internal_ComponentOverride.id.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

void Siri_Nlu_Internal_ComponentOverride.id.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_270_1(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_ComponentOverride.hasID.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearID()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

void Siri_Nlu_Internal_ComponentOverride.overrideNamespace.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = OUTLINED_FUNCTION_253();
  v3 = *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v2) + 28));
  if (v3 == 7)
    LOBYTE(v3) = 0;
  *v0 = v3;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB7E48(char *a1)
{
  char v1;

  v1 = *a1;
  Siri_Nlu_Internal_ComponentOverride.overrideNamespace.setter(&v1);
}

void Siri_Nlu_Internal_ComponentOverride.overrideNamespace.setter(char *a1)
{
  sub_1C1EBAAE0(a1, type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

void Siri_Nlu_Internal_ComponentOverride.overrideNamespace.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = *(int *)(OUTLINED_FUNCTION_274(a1) + 28);
  v4 = *(unsigned __int8 *)(v2 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(v1 + 12) = v4;
  *(_DWORD *)(v1 + 8) = v3;
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_ComponentOverride.hasOverrideNamespace.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 28)) != 7;
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearOverrideNamespace()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 28)) = 7;
}

uint64_t Siri_Nlu_Internal_ComponentOverride.enabled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  return OUTLINED_FUNCTION_171_2(*(unsigned __int8 *)(v0 + *(int *)(v1 + 32)));
}

void Siri_Nlu_Internal_ComponentOverride.enabled.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 32)) = a1;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_ComponentOverride.enabled.modify(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(OUTLINED_FUNCTION_274(a1) + 32);
  OUTLINED_FUNCTION_108_3(v1);
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_ComponentOverride.hasEnabled.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 32));
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearEnabled()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 32));
}

uint64_t Siri_Nlu_Internal_ComponentOverride.creationTimestampMsSinceUnixEpoch.getter()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_166_3();
  return OUTLINED_FUNCTION_322_1(v0);
}

void Siri_Nlu_Internal_ComponentOverride.creationTimestampMsSinceUnixEpoch.setter(uint64_t a1)
{
  uint64_t v2;

  OUTLINED_FUNCTION_166_3();
  *(_QWORD *)v2 = a1;
  *(_BYTE *)(v2 + 8) = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_ComponentOverride.creationTimestampMsSinceUnixEpoch.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = v1;
  v2 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  OUTLINED_FUNCTION_3_3(*(int *)(v2 + 36));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_ComponentOverride.hasCreationTimestampMsSinceUnixEpoch.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_166_3();
  return OUTLINED_FUNCTION_122_3(*(_BYTE *)(v0 + 8));
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearCreationTimestampMsSinceUnixEpoch()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_166_3();
  OUTLINED_FUNCTION_7_2(v0);
}

void Siri_Nlu_Internal_ComponentOverride.value.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_12_0();
  v5 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v4);
  OUTLINED_FUNCTION_46_7(*(int *)(v5 + 40));
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  v7 = OUTLINED_FUNCTION_5_1(v1);
  if (v9)
  {
    OUTLINED_FUNCTION_40_0();
    v10 = *(int *)(v6 + 20);
    if (qword_1EF724668 != -1)
      swift_once();
    *(_QWORD *)(a1 + v10) = qword_1EF72CF28;
    v11 = swift_retain();
    OUTLINED_FUNCTION_171(v11, &qword_1EF720A48);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v7, v8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  }
  OUTLINED_FUNCTION_101();
}

void sub_1C1EB8140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_285_0();
  v9 = v8(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - v10;
  v12 = OUTLINED_FUNCTION_215();
  sub_1C1D4B348(v12, v13, a5);
  a6(v11);
  OUTLINED_FUNCTION_27_1();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.value.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  OUTLINED_FUNCTION_68_1(v0, &qword_1EF720A48);
  OUTLINED_FUNCTION_351(v1, v2, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  v3 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1EB8224(&qword_1EF724668, &qword_1EF72CF28, a1);
}

uint64_t sub_1C1EB8224@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v6 = *(int *)(OUTLINED_FUNCTION_202() + 20);
  if (*a1 != -1)
    swift_once();
  *(_QWORD *)(a3 + v6) = *a2;
  return OUTLINED_FUNCTION_399();
}

void Siri_Nlu_Internal_ComponentOverride.value.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(v6);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_9_7(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_213((uint64_t)v8);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v9);
  OUTLINED_FUNCTION_14_10(*(int *)(v10 + 40));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    OUTLINED_FUNCTION_69_0();
    v14 = *(int *)(v7 + 20);
    if (qword_1EF724668 != -1)
      swift_once();
    *(_QWORD *)(v1 + v14) = qword_1EF72CF28;
    v15 = swift_retain();
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF720A48);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB8358()
{
  sub_1C1EBAD7C();
}

void Siri_Nlu_Internal_ComponentOverride.hasValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_23_5();
  v4 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v3);
  OUTLINED_FUNCTION_281_0(v0 + *(int *)(v4 + 40), v1);
  v5 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  OUTLINED_FUNCTION_6_1(v5);
  OUTLINED_FUNCTION_328();
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF720A48);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.nluRequestRules.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.serializedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  v1 = OUTLINED_FUNCTION_323_0(*(int *)(v0 + 44));
  sub_1C1D4882C(v1, v2);
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB844C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  sub_1C1D48840(*a1, v2);
  Siri_Nlu_Internal_ComponentOverride.serializedValue.setter(v1, v2);
}

void Siri_Nlu_Internal_ComponentOverride.serializedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 44);
  sub_1C1D48884(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_ComponentOverride.serializedValue.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(int *)(OUTLINED_FUNCTION_270_1(a1) + 44);
  *(_DWORD *)(v1 + 24) = v2;
  v5 = OUTLINED_FUNCTION_323_0(v2);
  if (!v4 & v3)
    v7 = 0;
  else
    v7 = v5;
  v8 = 0xC000000000000000;
  if (!(!v4 & v3))
    v8 = v6;
  *(_QWORD *)v1 = v7;
  *(_QWORD *)(v1 + 8) = v8;
  sub_1C1D4882C(v5, v6);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB850C(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = a1[1];
  v3 = a1[2] + *((int *)a1 + 6);
  v4 = *a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    v7 = OUTLINED_FUNCTION_16_1();
    sub_1C1D48840(v7, v8);
    sub_1C1D48884(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    v9 = OUTLINED_FUNCTION_16_1();
    sub_1C1D48898(v9, v10);
  }
  else
  {
    sub_1C1D48884(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    OUTLINED_FUNCTION_27_1();
  }
}

BOOL Siri_Nlu_Internal_ComponentOverride.hasSerializedValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 44) + 8) >> 60 != 15;
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.clearSerializedValue()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0) + 44);
  sub_1C1D48884(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_1C203C410;
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.unknownFields.getter()
{
  return sub_1C1E12B60(type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

uint64_t Siri_Nlu_Internal_ComponentOverride.unknownFields.setter(uint64_t a1)
{
  return sub_1C1D6FC30(a1, type metadata accessor for Siri_Nlu_Internal_ComponentOverride);
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  OUTLINED_FUNCTION_73_4();
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.ccqrOverrideTemplate.getter()
{
  sub_1C1EB8F18();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.ccqrOverrideTemplate.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720998);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - v6;
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_81_3() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v9 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_294_1(v9);
    OUTLINED_FUNCTION_16_2();
  }
  OUTLINED_FUNCTION_83_0(v3, v8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  OUTLINED_FUNCTION_31_10((uint64_t)v7, 0, v11, v10);
  OUTLINED_FUNCTION_159_1();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_157_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.init()()
{
  return sub_1C1DCA910((void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

uint64_t sub_1C1EB875C(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  a1(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    a2(0);
    OUTLINED_FUNCTION_22_11();
    v7 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v3 + v4) = a3(v7);
    OUTLINED_FUNCTION_16_2();
  }
  return OUTLINED_FUNCTION_399();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.ccqrOverrideTemplate.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_55_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(v5);
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_9_7(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_80_5((uint64_t)v7);
  v9 = v8
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_16_10(v9);
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    OUTLINED_FUNCTION_69_0();
    v13 = OUTLINED_FUNCTION_445();
    v14 = type metadata accessor for Siri_Nlu_External_RewriteMessage(v13);
    v15 = OUTLINED_FUNCTION_30_2(v14);
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF720998);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v10, v11, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB8880()
{
  sub_1C1EB8894();
}

void sub_1C1EB8894()
{
  uint64_t v0;
  void (*v1)(void *);
  uint64_t (*v2)(_QWORD);
  void (*v3)(void *);
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);

  OUTLINED_FUNCTION_42_3();
  v3 = v1;
  v4 = *(void **)v0;
  v5 = *(void **)(*(_QWORD *)v0 + 40);
  v6 = *(void **)(*(_QWORD *)v0 + 48);
  v7 = *(void **)(*(_QWORD *)v0 + 32);
  if ((v8 & 1) != 0)
  {
    v9 = v2;
    v10 = OUTLINED_FUNCTION_199();
    sub_1C1D4B348(v10, v11, v12);
    v3(v5);
    sub_1C1D6E98C((uint64_t)v6, v9);
  }
  else
  {
    v1(*(void **)(*(_QWORD *)v0 + 48));
  }
  free(v6);
  free(v5);
  free(v7);
  OUTLINED_FUNCTION_10_2(v4);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.hasCcqrOverrideTemplate.getter()
{
  sub_1C1EB8934(&qword_1EF720998, (uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, &OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EB8934(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_88_5();
  v9 = v8 + *a3;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_281_0(v9, v4);
  v10 = a4(0);
  __swift_getEnumTagSinglePayload(v4, 1, v10);
  OUTLINED_FUNCTION_15_2(v4);
  OUTLINED_FUNCTION_27_1();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.clearCcqrOverrideTemplate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720998);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v5 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_280_0(v5);
    OUTLINED_FUNCTION_16_2();
  }
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  OUTLINED_FUNCTION_17_2((uint64_t)v4, v7, v8, v6);
  OUTLINED_FUNCTION_2_1();
  v9 = OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_212_1(v9, v10, &qword_1EF720998);
  OUTLINED_FUNCTION_137_3();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_27_1();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.userParse.getter()
{
  sub_1C1EB8AC4();
}

void sub_1C1EB8AC4()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  OUTLINED_FUNCTION_285_0();
  v4 = v3;
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  v6 = OUTLINED_FUNCTION_110();
  v1(v6);
  OUTLINED_FUNCTION_88_5();
  v8 = v7 + *v0;
  OUTLINED_FUNCTION_24_0();
  sub_1C1E354A8(v8, v2, &qword_1EF723398);
  v9 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_9(v2, 1, v9);
  if (v10)
  {
    Siri_Nlu_External_UserParse.init()(v4);
    sub_1C1D48944(v2, &qword_1EF723398);
  }
  else
  {
    sub_1C1D4A900(v2, (uint64_t)v4, type metadata accessor for Siri_Nlu_External_UserParse);
  }
  OUTLINED_FUNCTION_27_1();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.userParse.setter()
{
  return sub_1C1EB8BA8();
}

uint64_t sub_1C1EB8BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  void (*v8)(_QWORD);
  void (*v9)(_QWORD);
  uint64_t (*v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_5();
  v27 = v2;
  v28 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_254_0();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - v14;
  v16 = *(int *)(v11(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v9(0);
    OUTLINED_FUNCTION_22_11();
    v17 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v16) = v7(v17);
    OUTLINED_FUNCTION_16_2();
  }
  v18 = *(_QWORD *)(v0 + v16);
  v19 = OUTLINED_FUNCTION_215();
  sub_1C1D4A900(v19, v20, v21);
  v22 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_31_10((uint64_t)v15, 0, v23, v22);
  sub_1C1D4A958((uint64_t)v15, v1, &qword_1EF723398);
  v24 = v18 + *v5;
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  sub_1C1D53F5C(v1, v24, &qword_1EF723398);
  swift_endAccess();
  return OUTLINED_FUNCTION_44();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.userParse.modify()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v1);
  v2 = OUTLINED_FUNCTION_46_0();
  v3 = OUTLINED_FUNCTION_43_0(v2);
  *(_QWORD *)(v0 + 32) = v3;
  v4 = OUTLINED_FUNCTION_189_3();
  *(_QWORD *)(v0 + 40) = OUTLINED_FUNCTION_9_7(v4);
  v5 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_80_5((uint64_t)v5);
  v7 = v6
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_16_10(v7);
  v8 = OUTLINED_FUNCTION_5_1((uint64_t)v3);
  if (v10)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    v11 = OUTLINED_FUNCTION_252_0();
    v12 = OUTLINED_FUNCTION_74_9(v11);
    v13 = OUTLINED_FUNCTION_155_3(v12);
    v14 = OUTLINED_FUNCTION_98_8(v13);
    v15 = OUTLINED_FUNCTION_30_2(v14);
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF723398);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v8, v9, type metadata accessor for Siri_Nlu_External_UserParse);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB8DBC()
{
  sub_1C1EB8894();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.hasUserParse.getter()
{
  sub_1C1EB8934(&qword_1EF723398, (uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, &OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse, type metadata accessor for Siri_Nlu_External_UserParse);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.clearUserParse()()
{
  sub_1C1EB8E18();
}

void sub_1C1EB8E18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  void (*v6)(_QWORD);
  void (*v7)(_QWORD);
  void (*v8)(uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v10);
  v11 = OUTLINED_FUNCTION_23_5();
  v9(v11);
  if ((OUTLINED_FUNCTION_81_3() & 1) == 0)
  {
    v7(0);
    OUTLINED_FUNCTION_22_11();
    v12 = OUTLINED_FUNCTION_40();
    *(_QWORD *)((char *)v9 + v0) = v5(v12);
    OUTLINED_FUNCTION_16_2();
  }
  v13 = *(_QWORD *)((char *)v9 + v0);
  v14 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_17_2(v1, v15, v16, v14);
  v17 = v13 + *v3;
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  sub_1C1D53F5C(v1, v17, &qword_1EF723398);
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_11_0();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.lvcOverrideValue.getter()
{
  sub_1C1EB8F18();
}

void sub_1C1EB8F18()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_42_3();
  v2 = v1;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_37();
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(v7);
  OUTLINED_FUNCTION_88_5();
  OUTLINED_FUNCTION_24_0();
  v8 = OUTLINED_FUNCTION_314_1();
  OUTLINED_FUNCTION_281_0(v8, v9);
  v10 = OUTLINED_FUNCTION_202();
  OUTLINED_FUNCTION_9(v0, 1, v10);
  if (v11)
  {
    OUTLINED_FUNCTION_69_0();
    v12 = OUTLINED_FUNCTION_445();
    v13 = v2(v12);
    OUTLINED_FUNCTION_30_2(v13);
    OUTLINED_FUNCTION_15_2(v0);
  }
  else
  {
    OUTLINED_FUNCTION_117_4(v0, v4);
  }
  OUTLINED_FUNCTION_11_0();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.lvcOverrideValue.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D0F8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - v6;
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_81_3() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v9 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_294_1(v9);
    OUTLINED_FUNCTION_16_2();
  }
  OUTLINED_FUNCTION_83_0(v3, v8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  OUTLINED_FUNCTION_31_10((uint64_t)v7, 0, v11, v10);
  OUTLINED_FUNCTION_159_1();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_157_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.init()()
{
  return sub_1C1DCA910((void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.lvcOverrideValue.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_55_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(v5);
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_9_7(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_80_5((uint64_t)v7);
  v9 = v8
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_16_10(v9);
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    OUTLINED_FUNCTION_69_0();
    v13 = OUTLINED_FUNCTION_445();
    v14 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(v13);
    v15 = OUTLINED_FUNCTION_30_2(v14);
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF72D0F8);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v10, v11, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB91A0()
{
  sub_1C1EB8894();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.hasLvcOverrideValue.getter()
{
  sub_1C1EB8934(&qword_1EF72D0F8, (uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, &OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.clearLvcOverrideValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D0F8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v5 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_280_0(v5);
    OUTLINED_FUNCTION_16_2();
  }
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  OUTLINED_FUNCTION_17_2((uint64_t)v4, v7, v8, v6);
  OUTLINED_FUNCTION_2_1();
  v9 = OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_212_1(v9, v10, &qword_1EF72D0F8);
  OUTLINED_FUNCTION_137_3();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_27_1();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.planOverrideValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v2 = OUTLINED_FUNCTION_12_0();
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(v2);
  OUTLINED_FUNCTION_88_5();
  v4 = v3
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  OUTLINED_FUNCTION_24_0();
  sub_1C1E354A8(v4, v0, &qword_1EF72D108);
  v5 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  v6 = OUTLINED_FUNCTION_5_1(v0);
  if (v8)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_26_1(*(int *)(v5 + 20));
    OUTLINED_FUNCTION_171(v9, &qword_1EF72D108);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  }
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.planOverrideValue.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D108);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - v6;
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_81_3() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v9 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_294_1(v9);
    OUTLINED_FUNCTION_16_2();
  }
  OUTLINED_FUNCTION_83_0(v3, v8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  OUTLINED_FUNCTION_31_10((uint64_t)v7, 0, v11, v10);
  OUTLINED_FUNCTION_159_1();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_157_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_11_0();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.init()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_64_2();
  v0 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  OUTLINED_FUNCTION_26_1(*(int *)(v0 + 20));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.planOverrideValue.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_55_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(v6);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_9_7(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_80_5((uint64_t)v8);
  v10 = v9
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_16_10(v10);
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_69_0();
    v15 = (_QWORD *)(v1 + *(int *)(v7 + 20));
    *v15 = 0;
    v15[1] = 0;
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF72D108);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB9544()
{
  sub_1C1EB8894();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.hasPlanOverrideValue.getter()
{
  sub_1C1EB8934(&qword_1EF72D108, (uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, &OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.clearPlanOverrideValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D108);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if ((OUTLINED_FUNCTION_318() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
    OUTLINED_FUNCTION_22_11();
    v5 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = OUTLINED_FUNCTION_280_0(v5);
    OUTLINED_FUNCTION_16_2();
  }
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  OUTLINED_FUNCTION_17_2((uint64_t)v4, v7, v8, v6);
  OUTLINED_FUNCTION_2_1();
  v9 = OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_212_1(v9, v10, &qword_1EF72D108);
  OUTLINED_FUNCTION_137_3();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_27_1();
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.OverrideValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.rewriteMessage.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_12_0();
  v5 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(v4);
  OUTLINED_FUNCTION_46_7(*(int *)(v5 + 20));
  v6 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  v7 = OUTLINED_FUNCTION_5_1(v1);
  if (v9)
  {
    OUTLINED_FUNCTION_40_0();
    *(_BYTE *)(a1 + *(int *)(v6 + 20)) = 4;
    OUTLINED_FUNCTION_26_1(*(int *)(v6 + 24));
    OUTLINED_FUNCTION_171(v10, &qword_1EF7236D0);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v7, v8, type metadata accessor for Siri_Nlu_External_RewriteMessage);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.rewriteMessage.setter(uint64_t a1)
{
  return sub_1C1EB98F4(a1, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&qword_1EF7236D0, type metadata accessor for Siri_Nlu_External_RewriteMessage);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.rewriteMessage.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_External_RewriteMessage(v6);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_9_7(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_213((uint64_t)v8);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(v9);
  OUTLINED_FUNCTION_14_10(*(int *)(v10 + 20));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_69_0();
    *(_BYTE *)(v1 + *(int *)(v7 + 20)) = 4;
    v15 = (_QWORD *)(v1 + *(int *)(v7 + 24));
    *v15 = 0;
    v15[1] = 0;
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF7236D0);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_External_RewriteMessage);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB97D4()
{
  sub_1C1EBAD7C();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.hasRewriteMessage.getter()
{
  sub_1C1EB9A28();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.clearRewriteMessage()()
{
  sub_1C1EB9ABC(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.lvcValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_12_0();
  v5 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(v4);
  OUTLINED_FUNCTION_46_7(*(int *)(v5 + 20));
  v6 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  v7 = OUTLINED_FUNCTION_5_1(v1);
  if (v9)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_26_1(*(int *)(v6 + 20));
    v10 = a1 + *(int *)(v6 + 24);
    *(_QWORD *)v10 = 0;
    *(_BYTE *)(v10 + 8) = 1;
    OUTLINED_FUNCTION_171(v11, &qword_1EF72D118);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v7, v8, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.lvcValue.setter(uint64_t a1)
{
  return sub_1C1EB98F4(a1, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&qword_1EF72D118, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
}

uint64_t sub_1C1EB98F4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = v4 + *(int *)(OUTLINED_FUNCTION_172_0(a1, a2) + 20);
  OUTLINED_FUNCTION_160_4();
  sub_1C1D4A900(a1, v7, a4);
  OUTLINED_FUNCTION_90_0();
  v8 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_12_1(v8, v9, v10, v11);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.lvcValue.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(v6);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_9_7(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_213((uint64_t)v8);
  v10 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(v9);
  OUTLINED_FUNCTION_14_10(*(int *)(v10 + 20));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_69_0();
    v15 = (_QWORD *)(v1 + *(int *)(v7 + 20));
    *v15 = 0;
    v15[1] = 0;
    v16 = v1 + *(int *)(v7 + 24);
    *(_QWORD *)v16 = 0;
    *(_BYTE *)(v16 + 8) = 1;
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF72D118);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EB99F8()
{
  sub_1C1EBAD7C();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.hasLvcValue.getter()
{
  sub_1C1EB9A28();
}

void sub_1C1EB9A28()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_285_0();
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  v5 = OUTLINED_FUNCTION_110();
  v6 = v1(v5);
  OUTLINED_FUNCTION_128_2(v0 + *(int *)(v6 + 20), v2);
  v7 = OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_9(v2, 1, v7);
  OUTLINED_FUNCTION_39_0(v2);
  OUTLINED_FUNCTION_27_1();
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.clearLvcValue()()
{
  sub_1C1EB9ABC(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

uint64_t sub_1C1EB9ABC(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_53_3(a1);
  OUTLINED_FUNCTION_160_4();
  OUTLINED_FUNCTION_90_0();
  v1 = OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_1(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.plan.getter()
{
  sub_1C1D72A80(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EB9B18(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.plan.setter(v1, v2);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.plan.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19300(a1, a2, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.plan.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 20)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.hasPlan.getter()
{
  return sub_1C1D72B90(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

Swift::Void __swiftcall Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.clearPlan()()
{
  sub_1C1D72BB8(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

uint64_t (*Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_ComponentOverride.init()(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = OUTLINED_FUNCTION_133_1(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v3);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_174_2();
  *(_BYTE *)(a1 + v4) = 7;
  OUTLINED_FUNCTION_434(v1[8]);
  OUTLINED_FUNCTION_7_2(a1 + v1[9]);
  v5 = a1 + v1[10];
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  OUTLINED_FUNCTION_17_2(v5, v7, v8, v6);
  *(_OWORD *)(a1 + v1[11]) = xmmword_1C203C410;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_NluRequestRule.id.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EB9C60(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_NluRequestRule.id.setter(v1, v2);
}

void Siri_Nlu_Internal_NluRequestRule.id.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void Siri_Nlu_Internal_NluRequestRule.id.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_120_5(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_NluRequestRule.hasID.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

Swift::Void __swiftcall Siri_Nlu_Internal_NluRequestRule.clearID()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void Siri_Nlu_Internal_NluRequestRule.localeID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  if (OUTLINED_FUNCTION_12_2(*(int *)(v0 + 28)))
    OUTLINED_FUNCTION_29_1();
  else
    OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB9D40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_NluRequestRule.localeID.setter(v1, v2);
}

void Siri_Nlu_Internal_NluRequestRule.localeID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  OUTLINED_FUNCTION_11_1();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_NluRequestRule.localeID.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_120_5(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 28)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_NluRequestRule.hasLocaleID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_Internal_NluRequestRule.clearLocaleID()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_NluRequestRule.deviceType.getter()
{
  sub_1C1E125CC(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EB9E48(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_NluRequestRule.deviceType.setter(v1, v2);
}

void Siri_Nlu_Internal_NluRequestRule.deviceType.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E1264C(a1, a2, type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void Siri_Nlu_Internal_NluRequestRule.deviceType.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_120_5(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 32)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_NluRequestRule.hasDeviceType.getter()
{
  return sub_1C1E126C8(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

Swift::Void __swiftcall Siri_Nlu_Internal_NluRequestRule.clearDeviceType()()
{
  sub_1C1E126F0(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void Siri_Nlu_Internal_NluRequestRule.userInterfaceIdiom.getter()
{
  sub_1C1EB9EF8(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EB9EF8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_53_3(a1);
  if (OUTLINED_FUNCTION_12_2(*(int *)(v1 + 36)))
    OUTLINED_FUNCTION_29_1();
  else
    OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EB9F30(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_NluRequestRule.userInterfaceIdiom.setter(v1, v2);
}

void Siri_Nlu_Internal_NluRequestRule.userInterfaceIdiom.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1EB9F78(a1, a2, type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EB9F78(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_304(a1, a2, a3);
  OUTLINED_FUNCTION_11_1();
  *v4 = v5;
  v4[1] = v3;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_NluRequestRule.userInterfaceIdiom.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_120_5(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 36)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_NluRequestRule.hasUserInterfaceIdiom.getter()
{
  return sub_1C1EB9FF0(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

BOOL sub_1C1EB9FF0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_53_3(a1);
  return OUTLINED_FUNCTION_5_0(*(int *)(v1 + 36));
}

Swift::Void __swiftcall Siri_Nlu_Internal_NluRequestRule.clearUserInterfaceIdiom()()
{
  sub_1C1EBA018(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EBA018(uint64_t (*a1)(_QWORD))
{
  _QWORD *v1;

  OUTLINED_FUNCTION_53_3(a1);
  OUTLINED_FUNCTION_10_1();
  *v1 = 0;
  v1[1] = 0;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_Internal_NluRequestRule.turnInputRules.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_NluRequestRule.unknownFields.getter()
{
  return sub_1C1E12B60(type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

uint64_t Siri_Nlu_Internal_NluRequestRule.unknownFields.setter(uint64_t a1)
{
  return sub_1C1D6FC30(a1, type metadata accessor for Siri_Nlu_Internal_NluRequestRule);
}

uint64_t (*Siri_Nlu_Internal_NluRequestRule.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  OUTLINED_FUNCTION_73_4();
  return nullsub_1;
}

void Siri_Nlu_Internal_NluRequestRule.init()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = OUTLINED_FUNCTION_133_1(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(v3);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_174_2();
  OUTLINED_FUNCTION_26_1(v4);
  v5 = (_QWORD *)(a1 + *(int *)(v1 + 32));
  *v5 = 0;
  v5[1] = 0;
  OUTLINED_FUNCTION_26_1(*(int *)(v1 + 36));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.utteranceRule.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0);
  sub_1C1E354A8(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1EF721388);
  v7 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  v8 = OUTLINED_FUNCTION_5_1((uint64_t)v5);
  if (v10)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    v11 = (_QWORD *)(a1 + *(int *)(v7 + 24));
    *v11 = 0;
    v11[1] = 0;
    *(_BYTE *)(a1 + *(int *)(v7 + 28)) = 3;
    v12 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    v13 = OUTLINED_FUNCTION_30_2(v12);
    OUTLINED_FUNCTION_32_0(v13, &qword_1EF721388);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v8, v9, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.utteranceRule.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = OUTLINED_FUNCTION_117_1();
  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(v0);
  OUTLINED_FUNCTION_68_1(v1, &qword_1EF721388);
  OUTLINED_FUNCTION_351(v2, v3, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  v4 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v4, v5, v6, v7);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_174_2();
  *((_BYTE *)a1 + v2) = 3;
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v3 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

void Siri_Nlu_Internal_TurnInputRule.utteranceRule.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v6);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_9_7(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_213((uint64_t)v8);
  v10 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(v9);
  OUTLINED_FUNCTION_14_10(*(int *)(v10 + 28));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    v14 = (_QWORD *)(v1 + *(int *)(v7 + 24));
    *v14 = 0;
    v14[1] = 0;
    *(_BYTE *)(v1 + *(int *)(v7 + 28)) = 3;
    v15 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    v16 = OUTLINED_FUNCTION_30_2(v15);
    OUTLINED_FUNCTION_32_0(v16, &qword_1EF721388);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EBA308()
{
  sub_1C1EBAD7C();
}

void Siri_Nlu_Internal_TurnInputRule.hasUtteranceRule.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_23_5();
  v4 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(v3);
  OUTLINED_FUNCTION_281_0(v0 + *(int *)(v4 + 28), v1);
  v5 = OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_6_1(v5);
  OUTLINED_FUNCTION_328();
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.clearUtteranceRule()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF721388);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.positiveContextRules.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.negativeContextRules.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_Internal_TurnInputRule.negativeContextRules.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.negativeContextRules.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.unknownFields.getter()
{
  return sub_1C1E191AC(type metadata accessor for Siri_Nlu_Internal_TurnInputRule);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.unknownFields.setter(uint64_t a1)
{
  return sub_1C1E191EC(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0);
  return nullsub_1;
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.turnContext.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_12_0();
  v5 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v4);
  OUTLINED_FUNCTION_46_7(*(int *)(v5 + 24));
  OUTLINED_FUNCTION_164_3();
  v6 = OUTLINED_FUNCTION_5_1(v1);
  if (v8)
  {
    OUTLINED_FUNCTION_40_0();
    v9 = type metadata accessor for Siri_Nlu_External_NLContext(0);
    OUTLINED_FUNCTION_66_4(v9);
    v11 = a1 + v10;
    v12 = type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
    v15 = OUTLINED_FUNCTION_17_2(v11, v13, v14, v12);
    OUTLINED_FUNCTION_171(v15, &qword_1ED7A0060);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, type metadata accessor for Siri_Nlu_External_TurnContext);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.turnContext.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = OUTLINED_FUNCTION_117_1();
  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v0);
  OUTLINED_FUNCTION_68_1(v1, &qword_1ED7A0060);
  OUTLINED_FUNCTION_351(v2, v3, type metadata accessor for Siri_Nlu_External_TurnContext);
  OUTLINED_FUNCTION_164_3();
  v4 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v4, v5, v6, v7);
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.turnContext.modify()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_179_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_External_TurnContext(v5);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = OUTLINED_FUNCTION_9_7(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  v8 = OUTLINED_FUNCTION_213((uint64_t)v7);
  v9 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v8);
  OUTLINED_FUNCTION_14_10(*(int *)(v9 + 24));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    OUTLINED_FUNCTION_69_0();
    v13 = OUTLINED_FUNCTION_445();
    v14 = type metadata accessor for Siri_Nlu_External_NLContext(v13);
    OUTLINED_FUNCTION_66_4(v14);
    v15 = OUTLINED_FUNCTION_445();
    v16 = type metadata accessor for Siri_Nlu_External_LegacyNLContext(v15);
    v17 = OUTLINED_FUNCTION_30_2(v16);
    OUTLINED_FUNCTION_32_0(v17, &qword_1ED7A0060);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v10, v11, type metadata accessor for Siri_Nlu_External_TurnContext);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EBA5E0()
{
  sub_1C1EBAD7C();
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.hasTurnContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_23_5();
  v4 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v3);
  OUTLINED_FUNCTION_281_0(v0 + *(int *)(v4 + 24), v1);
  v5 = OUTLINED_FUNCTION_164_3();
  OUTLINED_FUNCTION_6_1(v5);
  OUTLINED_FUNCTION_328();
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.ContextRule.clearTurnContext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1ED7A0060);
  OUTLINED_FUNCTION_164_3();
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.matchingSpans.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.matchingSpans.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.ContextRule.matchingSpans.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.applyToPromptScenarios.getter()
{
  return sub_1C1EBB110(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.applyToPromptScenarios.setter(uint64_t a1)
{
  sub_1C1EBB13C(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.applyToPromptScenarios.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_273_0(a1);
  OUTLINED_FUNCTION_108_3(*(_DWORD *)(v1 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.ContextRule.hasApplyToPromptScenarios.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.ContextRule.clearApplyToPromptScenarios()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 28));
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.sdaComparisonMode.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_253();
  *v0 = *(_BYTE *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v2) + 32)) & 1;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EBA774(_BYTE *a1@<X8>)
{
  char v2;

  Siri_Nlu_Internal_TurnInputRule.ContextRule.sdaComparisonMode.getter();
  *a1 = v2;
}

void sub_1C1EBA7AC(char *a1)
{
  char v1;

  v1 = *a1;
  Siri_Nlu_Internal_TurnInputRule.ContextRule.sdaComparisonMode.setter(&v1);
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.sdaComparisonMode.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0) + 32)) = v2;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.sdaComparisonMode.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_273_0(a1);
  OUTLINED_FUNCTION_108_3(*(_DWORD *)(v1 + 32));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.ContextRule.hasSdaComparisonMode.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 32));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.ContextRule.clearSdaComparisonMode()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 32));
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.unknownFields.getter()
{
  return sub_1C1E12B60(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.unknownFields.setter(uint64_t a1)
{
  return sub_1C1D6FC30(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.ContextRule.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  OUTLINED_FUNCTION_73_4();
  return nullsub_1;
}

SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::ContextRule::SDAContextComparisonMode_optional __swiftcall Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::ContextRule::SDAContextComparisonMode_optional)rawValue;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_1C1EBA8DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1C1D3FCE4(*a1, *a2);
}

void sub_1C1EBA8E8()
{
  unsigned __int8 *v0;

  sub_1C1ED5E64(*v0);
}

uint64_t sub_1C1EBA8F0()
{
  sub_1C1EC5070();
  return sub_1C20194D0();
}

void sub_1C1EBA928(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED5FC8(a1, *v1);
}

SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::ContextRule::SDAContextComparisonMode_optional sub_1C1EBA93C(Swift::Int *a1)
{
  return Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode.init(rawValue:)(*a1);
}

void sub_1C1EBA944(uint64_t *a1@<X8>)
{
  *a1 = Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode.rawValue.getter();
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.init()(uint64_t a1@<X8>)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = OUTLINED_FUNCTION_133_1(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v3);
  OUTLINED_FUNCTION_40_1();
  v4 = a1 + v1[6];
  v5 = OUTLINED_FUNCTION_164_3();
  OUTLINED_FUNCTION_17_2(v4, v6, v7, v5);
  OUTLINED_FUNCTION_434(v1[7]);
  *(_BYTE *)(a1 + v1[8]) = v8;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.pattern.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EBA9C8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.pattern.setter(v1, v2);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.pattern.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.pattern.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.hasPattern.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.clearPattern()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.type.getter()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = OUTLINED_FUNCTION_253();
  v3 = *(unsigned __int8 *)(v1
                          + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v2) + 28));
  if (v3 == 3)
    LOBYTE(v3) = 0;
  *v0 = v3;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EBAAA0(char *a1)
{
  char v1;

  v1 = *a1;
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.type.setter(&v1);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.type.setter(char *a1)
{
  sub_1C1EBAAE0(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EBAAE0(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;

  v3 = *a1;
  *(_BYTE *)(v2 + *(int *)(OUTLINED_FUNCTION_172_0((uint64_t)a1, a2) + 28)) = v3;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.type.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.hasType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0) + 28)) != 3;
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.clearType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0) + 28)) = 3;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.compareOptions.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_12_0();
  v5 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v4);
  OUTLINED_FUNCTION_46_7(*(int *)(v5 + 32));
  v6 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v7 = OUTLINED_FUNCTION_5_1(v1);
  if (v9)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_434(v6[5]);
    *(_BYTE *)(a1 + v6[6]) = v10;
    *(_BYTE *)(a1 + v6[7]) = v10;
    OUTLINED_FUNCTION_171(v11, &qword_1EF7235F8);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v7, v8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.compareOptions.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = OUTLINED_FUNCTION_117_1();
  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v0);
  OUTLINED_FUNCTION_68_1(v1, &qword_1EF7235F8);
  OUTLINED_FUNCTION_351(v2, v3, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v4 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v4, v5, v6, v7);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_64_2();
  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  OUTLINED_FUNCTION_434(*(int *)(v1 + 20));
  *(_BYTE *)(v0 + *(int *)(v2 + 24)) = v3;
  *(_BYTE *)(v0 + *(int *)(v2 + 28)) = v3;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.compareOptions.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(v6);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_9_7((uint64_t)v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_213((uint64_t)v8);
  v10 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v9);
  OUTLINED_FUNCTION_14_10(*(int *)(v10 + 32));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_69_0();
    *(_BYTE *)(v1 + v7[5]) = 2;
    *(_BYTE *)(v1 + v7[6]) = 2;
    *(_BYTE *)(v1 + v7[7]) = 2;
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF7235F8);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v11, v12, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1EBAD68()
{
  sub_1C1EBAD7C();
}

void sub_1C1EBAD7C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);

  OUTLINED_FUNCTION_42_3();
  v2 = *(void **)v0;
  v3 = *(int *)(*(_QWORD *)v0 + 40);
  v4 = *(void **)(*(_QWORD *)v0 + 24);
  v5 = *(void **)(*(_QWORD *)v0 + 32);
  v6 = *(void **)(*(_QWORD *)v0 + 8);
  v7 = **(_QWORD **)v0 + v3;
  if ((v8 & 1) != 0)
  {
    sub_1C1D4B348(*(_QWORD *)(*(_QWORD *)v0 + 32), (uint64_t)v4, v1);
    OUTLINED_FUNCTION_107(v7);
    v9 = OUTLINED_FUNCTION_314_1();
    OUTLINED_FUNCTION_117_4(v9, v10);
    OUTLINED_FUNCTION_23_1();
    v11 = OUTLINED_FUNCTION_215();
    sub_1C1D6E98C(v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_107(**(_QWORD **)v0 + v3);
    OUTLINED_FUNCTION_117_4((uint64_t)v5, v7);
    OUTLINED_FUNCTION_23_1();
  }
  free(v5);
  free(v4);
  free(v6);
  OUTLINED_FUNCTION_10_2(v2);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.hasCompareOptions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_23_5();
  v4 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v3);
  OUTLINED_FUNCTION_281_0(v0 + *(int *)(v4 + 32), v1);
  v5 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  OUTLINED_FUNCTION_6_1(v5);
  OUTLINED_FUNCTION_328();
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.clearCompareOptions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF7235F8);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.spansForNamedCaptureGroups.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.unknownFields.getter()
{
  return sub_1C1E12B60(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.unknownFields.setter(uint64_t a1)
{
  return sub_1C1D6FC30(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_190_0();
  OUTLINED_FUNCTION_73_4();
  return nullsub_1;
}

SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::UtteranceRule::ComparisonType_optional __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::UtteranceRule::ComparisonType_optional result;

  OUTLINED_FUNCTION_66_2(v1);
  return result;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void sub_1C1EBAF1C()
{
  unsigned __int8 *v0;

  sub_1C1ED5EB4(*v0);
}

uint64_t sub_1C1EBAF24()
{
  sub_1C1EC50AC();
  return sub_1C20194D0();
}

void sub_1C1EBAF5C(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED5FDC(a1, *v1);
}

SiriNLUTypes::Siri_Nlu_Internal_TurnInputRule::UtteranceRule::ComparisonType_optional sub_1C1EBAF68(Swift::Int *a1)
{
  return Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType.init(rawValue:)(*a1);
}

void sub_1C1EBAF70(uint64_t *a1@<X8>)
{
  *a1 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType.rawValue.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.caseInsensitive.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return OUTLINED_FUNCTION_171_2(*(unsigned __int8 *)(v0 + *(int *)(v1 + 20)));
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.caseInsensitive.setter()
{
  char v0;
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_282_0() + 20)) = v0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.caseInsensitive.modify(_QWORD *a1)
{
  int v1;

  v1 = *(_DWORD *)(OUTLINED_FUNCTION_161_1(a1) + 20);
  OUTLINED_FUNCTION_108_3(v1);
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.hasCaseInsensitive.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 20));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.clearCaseInsensitive()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 20));
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.diacriticInsensitive.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0)
                           + 24)) & 1;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.diacriticInsensitive.setter()
{
  char v0;
  uint64_t v1;

  *(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_282_0() + 24)) = v0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.diacriticInsensitive.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_161_1(a1);
  OUTLINED_FUNCTION_108_3(*(_DWORD *)(v1 + 24));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.hasDiacriticInsensitive.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.clearDiacriticInsensitive()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 24));
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.widthInsensitive.getter()
{
  return sub_1C1EBB110(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

uint64_t sub_1C1EBB110(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(OUTLINED_FUNCTION_53_3(a1) + 28)) & 1;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.widthInsensitive.setter(uint64_t a1)
{
  sub_1C1EBB13C(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EBB13C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(OUTLINED_FUNCTION_172_0(a1, a2) + 28)) = a1;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.widthInsensitive.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_161_1(a1);
  OUTLINED_FUNCTION_108_3(*(_DWORD *)(v1 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.hasWidthInsensitive.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return OUTLINED_FUNCTION_71_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.clearWidthInsensitive()()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  OUTLINED_FUNCTION_358_0(*(int *)(v0 + 28));
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.captureGroupName.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EBB1F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.captureGroupName.setter(v1, v2);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.captureGroupName.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.captureGroupName.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.hasCaptureGroupName.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.clearCaptureGroupName()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.spans.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.unknownFields.getter()
{
  return sub_1C1E12B60(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.unknownFields.setter(uint64_t a1)
{
  return sub_1C1D6FC30(a1, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(0);
  OUTLINED_FUNCTION_73_4();
  return nullsub_1;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_133_1(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(v1);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_26_1(*(int *)(v0 + 24));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.label.getter()
{
  sub_1C1D72A80(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void sub_1C1EBB328(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.label.setter(v1, v2);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.label.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19300(a1, a2, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.label.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 20)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.hasLabel.getter()
{
  return sub_1C1D72B90(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.clearLabel()()
{
  sub_1C1D72BB8(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetNodeIdx.getter()
{
  _BYTE *v0;

  OUTLINED_FUNCTION_165_3();
  return OUTLINED_FUNCTION_112_1(v0);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetNodeIdx.setter(int a1)
{
  uint64_t v2;

  OUTLINED_FUNCTION_165_3();
  *(_DWORD *)v2 = a1;
  *(_BYTE *)(v2 + 4) = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetNodeIdx.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_272_1(a1);
  OUTLINED_FUNCTION_12_5(*(int *)(v1 + 24));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.hasTargetNodeIdx.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_165_3();
  return OUTLINED_FUNCTION_122_3(*(_BYTE *)(v0 + 4));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.clearTargetNodeIdx()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_165_3();
  OUTLINED_FUNCTION_28_3(v0);
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetUdaIdx.getter()
{
  _BYTE *v0;

  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  OUTLINED_FUNCTION_22_5();
  return OUTLINED_FUNCTION_112_1(v0);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetUdaIdx.setter(int a1)
{
  uint64_t v2;

  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  OUTLINED_FUNCTION_22_5();
  *(_DWORD *)v2 = a1;
  *(_BYTE *)(v2 + 4) = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetUdaIdx.modify(_QWORD *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_272_1(a1);
  OUTLINED_FUNCTION_12_5(*(int *)(v1 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.hasTargetUdaIdx.getter()
{
  uint64_t v0;

  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  OUTLINED_FUNCTION_22_5();
  return OUTLINED_FUNCTION_122_3(*(_BYTE *)(v0 + 4));
}

Swift::Void __swiftcall Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.clearTargetUdaIdx()()
{
  uint64_t v0;

  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  OUTLINED_FUNCTION_22_5();
  OUTLINED_FUNCTION_28_3(v0);
}

uint64_t (*Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  OUTLINED_FUNCTION_64_2();
  v1 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  OUTLINED_FUNCTION_26_1(*(int *)(v1 + 20));
  OUTLINED_FUNCTION_28_3(v0 + *(int *)(v2 + 24));
  v4 = v0 + *(int *)(v3 + 28);
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = v5;
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v2;
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0);
  OUTLINED_FUNCTION_98_1();
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  v3 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

void *static Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode.allCases.getter()
{
  return &unk_1E7BA6620;
}

void sub_1C1EBB5D4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA6620;
}

void *static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType.allCases.getter()
{
  return &unk_1E7BA6648;
}

void sub_1C1EBB5F0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA6648;
}

unint64_t static Siri_Nlu_Internal_OverrideMetadata.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(34);
}

uint64_t sub_1C1EBB618()
{
  uint64_t v0;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CE68);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CE68);
  return sub_1C2019908();
}

uint64_t static Siri_Nlu_Internal_OverrideMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724620, (uint64_t)qword_1EF72CE68, a1);
}

uint64_t Siri_Nlu_Internal_OverrideMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  OUTLINED_FUNCTION_226();
  do
    result = sub_1C20194DC();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t Siri_Nlu_Internal_OverrideMetadata.traverse<A>(visitor:)()
{
  return sub_1C2019464();
}

void static Siri_Nlu_Internal_OverrideMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);

  OUTLINED_FUNCTION_42_3();
  a17 = v18;
  a18 = v19;
  v21 = v20;
  v23 = v22;
  v24 = OUTLINED_FUNCTION_8();
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998];
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_87();
  v29 = v27 - v28;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&a9 - v31;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v33((char *)&a9 - v31, v23, v24);
  v33((char *)v29, v21, v24);
  sub_1C1D488DC(&qword_1EF7247C8, v25, MEMORY[0x1E0D3E9A8]);
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_181(v29);
  OUTLINED_FUNCTION_181((uint64_t)v32);
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_OverrideMetadata.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&unk_1EF72D120, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
}

unint64_t sub_1C1EBB7C8()
{
  static Siri_Nlu_Internal_OverrideMetadata.protoMessageName.getter();
  return 0xD000000000000022;
}

uint64_t sub_1C1EBB7EC()
{
  return Siri_Nlu_Internal_OverrideMetadata.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EBB800()
{
  return Siri_Nlu_Internal_OverrideMetadata.traverse<A>(visitor:)();
}

uint64_t sub_1C1EBB814()
{
  sub_1C1D488DC(&qword_1EF72D7C0, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
  return sub_1C20194C4();
}

uint64_t sub_1C1EBB868()
{
  sub_1C1D488DC(&qword_1EF72D218, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
  return sub_1C2019608();
}

uint64_t sub_1C1EBB8AC()
{
  sub_1C1D488DC(&qword_1EF72D218, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
  return sub_1C2019614();
}

uint64_t sub_1C1EBB900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CE80);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CE80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A4D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "OVERRIDE_NAMESPACE_UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OVERRIDE_NAMESPACE_NLX";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OVERRIDE_NAMESPACE_CCQR";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "OVERRIDE_NAMESPACE_MDS_UAAP";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "OVERRIDE_NAMESPACE_LVC";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "OVERRIDE_NAMESPACE_NLv4";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "OVERRIDE_NAMESPACE_PLANNER";
  *((_QWORD *)v21 + 1) = 26;
  v21[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724628, (uint64_t)qword_1EF72CE80, a1);
}

uint64_t sub_1C1EBBB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CE98);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CE98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "OVERRIDE_SOURCE_UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OVERRIDE_SOURCE_TRIAL_NAMESPACE_SIRI_UNDERSTANDING_NL";
  *(_QWORD *)(v11 + 8) = 53;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OVERRIDE_SOURCE_TRIAL_NAMESPACE_SIRI_UNDERSTANDING_NL_OVERRIDES";
  *((_QWORD *)v13 + 1) = 63;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "OVERRIDE_SOURCE_TESTING";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_OverrideMetadata.OverrideSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724630, (uint64_t)qword_1EF72CE98, a1);
}

unint64_t static Siri_Nlu_Internal_OverrideCollection.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(36);
}

uint64_t sub_1C1EBBD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CEB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CEB0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202E540;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "creation_timestamp_ms_since_unix_epoch";
  *(_QWORD *)(v7 + 8) = 38;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "asset_id";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "version";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "parse_overrides";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "component_overrides";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_OverrideCollection._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724638, (uint64_t)qword_1EF72CEB0, a1);
}

void Siri_Nlu_Internal_OverrideCollection.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EBC05C();
          break;
        case 2:
          OUTLINED_FUNCTION_297();
          break;
        case 3:
          OUTLINED_FUNCTION_180_4();
          break;
        case 4:
          OUTLINED_FUNCTION_56();
          sub_1C1EC461C();
          break;
        case 5:
          OUTLINED_FUNCTION_56();
          OUTLINED_FUNCTION_315_1();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

uint64_t sub_1C1EBC05C()
{
  type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
  return sub_1C201959C();
}

void Siri_Nlu_Internal_OverrideCollection.traverse<A>(visitor:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_219_0();
  if ((*((_BYTE *)v1 + *(int *)(type metadata accessor for Siri_Nlu_Internal_OverrideCollection(v2) + 28) + 8) & 1) != 0
    || (OUTLINED_FUNCTION_6_9(), !v0))
  {
    OUTLINED_FUNCTION_608();
    if (!v3 || (OUTLINED_FUNCTION_75_1(), !v0))
    {
      OUTLINED_FUNCTION_608();
      if (!v4 || (OUTLINED_FUNCTION_75_1(), !v0))
      {
        if (!*(_QWORD *)(*v1 + 16)
          || (type metadata accessor for Siri_Nlu_Internal_ParseOverride(0),
              sub_1C1D488DC(&qword_1EF720850, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride), OUTLINED_FUNCTION_83_3(), !v0))
        {
          if (!*(_QWORD *)(v1[1] + 16)
            || (type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0),
                sub_1C1D488DC(&qword_1EF720AB0, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride), OUTLINED_FUNCTION_83_3(), !v0))
          {
            OUTLINED_FUNCTION_380();
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_225();
}

#error "1C1EBC2E0: call analysis failed (funcsize=80)"

uint64_t Siri_Nlu_Internal_OverrideCollection.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&unk_1EF72D128, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
}

unint64_t sub_1C1EBC358()
{
  static Siri_Nlu_Internal_OverrideCollection.protoMessageName.getter();
  return 0xD000000000000024;
}

void sub_1C1EBC37C()
{
  Siri_Nlu_Internal_OverrideCollection.decodeMessage<A>(decoder:)();
}

void sub_1C1EBC390()
{
  Siri_Nlu_Internal_OverrideCollection.traverse<A>(visitor:)();
}

uint64_t sub_1C1EBC3A4()
{
  sub_1C1D488DC(&qword_1EF72D7B8, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
  return sub_1C20194C4();
}

uint64_t sub_1C1EBC3F8()
{
  sub_1C1D488DC(&qword_1EF72D228, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
  return sub_1C2019608();
}

uint64_t sub_1C1EBC43C()
{
  sub_1C1D488DC(&qword_1EF72D228, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_Internal_ParseOverride.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(31);
}

uint64_t sub_1C1EBC4A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v21;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CEC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CEC8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1C202A4D0;
  v5 = v21 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4) = 1;
  *(_QWORD *)v5 = "id";
  *(_QWORD *)(v5 + 8) = 2;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = sub_1C20198F0();
  v8 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  v9 = v21 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4 + v3) = 2;
  *(_QWORD *)v9 = "enabled";
  *(_QWORD *)(v9 + 8) = 7;
  *(_BYTE *)(v9 + 16) = 2;
  v8();
  v10 = (_QWORD *)(v21 + v4 + 2 * v3);
  v11 = (char *)v10 + *(int *)(v1 + 48);
  *v10 = 3;
  *(_QWORD *)v11 = "creation_timestamp_ms_since_unix_epoch";
  *((_QWORD *)v11 + 1) = 38;
  v11[16] = 2;
  v8();
  v12 = (_QWORD *)(v21 + v4 + 3 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "parser_identifier";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  v14 = (_QWORD *)(v21 + v4 + 4 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "parse";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v8();
  v16 = (_QWORD *)(v21 + v4 + 5 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 7;
  *(_QWORD *)v17 = "nlu_request_rules";
  *((_QWORD *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  v18 = (_QWORD *)(v21 + v4 + 6 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 8;
  *(_QWORD *)v19 = "serialized_parse";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_ParseOverride._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724640, (uint64_t)qword_1EF72CEC8, a1);
}

void sub_1C1EBC72C(uint64_t a1)
{
  sub_1C1E2162C(a1, type metadata accessor for Siri_Nlu_Internal_ParseOverride._StorageClass, sub_1C1EBC748, &qword_1EF72CEE0);
}

uint64_t sub_1C1EBC748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 2;
  *(_QWORD *)(v0 + 40) = 0;
  *(_WORD *)(v0 + 48) = 2561;
  v1 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
  v2 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse) = xmmword_1C203C410;
  return v0;
}

uint64_t sub_1C1EBC7CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  MEMORY[0x1E0C80A78](v4);
  v27 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 32) = 2;
  *(_QWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 48) = 2561;
  v6 = v1
     + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
  v25 = v1 + 49;
  v26 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
  v7 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  __swift_storeEnumTagSinglePayload(v6, 1, 1, v7);
  v28 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
  *v28 = MEMORY[0x1E0DEE9D8];
  v8 = v1
     + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse;
  *(_OWORD *)v8 = xmmword_1C203C410;
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 24) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v11 = *(_BYTE *)(a1 + 32);
  swift_beginAccess();
  *(_BYTE *)(v2 + 32) = v11;
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 40);
  LOBYTE(v9) = *(_BYTE *)(a1 + 48);
  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = v12;
  *(_BYTE *)(v2 + 48) = v9;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(a1 + 49);
  swift_beginAccess();
  *(_BYTE *)(v2 + 49) = v12;
  v13 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
  swift_beginAccess();
  v14 = v27;
  sub_1C1E354A8(v13, v27, &qword_1EF723398);
  v15 = v26;
  swift_beginAccess();
  sub_1C1D53F5C(v14, v15, &qword_1EF723398);
  swift_endAccess();
  v16 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules);
  swift_beginAccess();
  v17 = *v16;
  v18 = v28;
  swift_beginAccess();
  *v18 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse);
  swift_beginAccess();
  v21 = *v19;
  v20 = v19[1];
  sub_1C1D4882C(v21, v20);
  swift_release();
  swift_beginAccess();
  v22 = *(_QWORD *)v8;
  v23 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v8 = v21;
  *(_QWORD *)(v8 + 8) = v20;
  sub_1C1D48884(v22, v23);
  return v2;
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF720AC0);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF720A10);
}

uint64_t sub_1C1EBCB00()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse, &qword_1EF723398);
  swift_bridgeObjectRelease();
  sub_1C1D48884(*(_QWORD *)(v0+ OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse), *(_QWORD *)(v0+ OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse+ 8));
  return v0;
}

uint64_t sub_1C1EBCB58()
{
  return sub_1C1E35668((void (*)(void))sub_1C1EBCB00);
}

void Siri_Nlu_Internal_ParseOverride.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C1EBEF50(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ParseOverride, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ParseOverride._StorageClass, sub_1C1EBC7CC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C1EBCB98);
}

uint64_t sub_1C1EBCB98()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C20194DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_1C1E75194();
          break;
        case 2:
          sub_1C1EBCD1C();
          break;
        case 3:
          sub_1C1EBCD98();
          break;
        case 4:
          sub_1C1EBCE14();
          break;
        case 6:
          sub_1C1EBF148();
          break;
        case 7:
          sub_1C1EBCEA0();
          break;
        case 8:
          sub_1C1EBCF54();
          break;
        default:
          break;
      }
      result = sub_1C20194DC();
    }
  }
  return result;
}

uint64_t sub_1C1EBCD1C()
{
  swift_beginAccess();
  sub_1C2019500();
  return swift_endAccess();
}

uint64_t sub_1C1EBCD98()
{
  swift_beginAccess();
  sub_1C201959C();
  return swift_endAccess();
}

uint64_t sub_1C1EBCE14()
{
  swift_beginAccess();
  sub_1C1E3B828();
  sub_1C2019518();
  return swift_endAccess();
}

uint64_t sub_1C1EBCEA0()
{
  swift_beginAccess();
  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
  sub_1C20195A8();
  return swift_endAccess();
}

uint64_t sub_1C1EBCF54()
{
  swift_beginAccess();
  sub_1C2019530();
  return swift_endAccess();
}

uint64_t Siri_Nlu_Internal_ParseOverride.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C1EBF1F0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ParseOverride, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C1EBCFFC);
}

void sub_1C1EBCFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v14[72];
  _BYTE *v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  MEMORY[0x1E0C80A78](v6);
  v15 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 24) || (swift_bridgeObjectRetain(), sub_1C2019698(), swift_bridgeObjectRelease(), !v1))
  {
    swift_beginAccess();
    if (*(_BYTE *)(a1 + 32) == 2 || (sub_1C201962C(), !v1))
    {
      swift_beginAccess();
      if ((*(_BYTE *)(a1 + 48) & 1) != 0 || (sub_1C20196B0(), !v1))
      {
        swift_beginAccess();
        if (*(_BYTE *)(a1 + 49) == 10 || (v14[48] = *(_BYTE *)(a1 + 49), sub_1C1E3B828(), sub_1C2019638(), !v1))
        {
          v8 = a1
             + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
          swift_beginAccess();
          sub_1C1E354A8(v8, (uint64_t)v5, &qword_1EF723398);
          if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
          {
            sub_1C1D48944((uint64_t)v5, &qword_1EF723398);
          }
          else
          {
            v9 = v15;
            sub_1C1D4A900((uint64_t)v5, (uint64_t)v15, type metadata accessor for Siri_Nlu_External_UserParse);
            sub_1C1D488DC(&qword_1EF723390, type metadata accessor for Siri_Nlu_External_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
            sub_1C20196D4();
            sub_1C1D6E98C((uint64_t)v9, type metadata accessor for Siri_Nlu_External_UserParse);
            if (v1)
              return;
          }
          v10 = a1
              + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__nluRequestRules;
          swift_beginAccess();
          if (!*(_QWORD *)(*(_QWORD *)v10 + 16)
            || (type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0),
                sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule), swift_bridgeObjectRetain(), sub_1C20196BC(), swift_bridgeObjectRelease(), !v1))
          {
            v11 = a1
                + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse;
            swift_beginAccess();
            v12 = *(_QWORD *)(v11 + 8);
            if (v12 >> 60 != 15)
            {
              v13 = *(_QWORD *)v11;
              sub_1C1D48840(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
              sub_1C2019650();
              sub_1C1D48884(v13, v12);
            }
          }
        }
      }
    }
  }
}

void static Siri_Nlu_Internal_ParseOverride.== infix(_:_:)()
{
  sub_1C1EBF7FC();
}

void sub_1C1EBD3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  char v24;
  char v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_5();
  v1 = v0;
  v3 = v2;
  v4 = OUTLINED_FUNCTION_189_3();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D7E0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_23();
  v48 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v11);
  OUTLINED_FUNCTION_87();
  v14 = v12 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v46 - v16;
  OUTLINED_FUNCTION_24_0();
  v19 = *(_QWORD *)(v3 + 16);
  v18 = *(_QWORD *)(v3 + 24);
  OUTLINED_FUNCTION_24_0();
  v20 = *(_QWORD *)(v1 + 24);
  if (v18)
  {
    if (!v20)
      goto LABEL_45;
    v21 = v19 == *(_QWORD *)(v1 + 16) && v18 == v20;
    if (!v21 && (OUTLINED_FUNCTION_13() & 1) == 0)
      goto LABEL_45;
  }
  else if (v20)
  {
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_24_0();
  v22 = *(unsigned __int8 *)(v3 + 32);
  OUTLINED_FUNCTION_24_0();
  v23 = *(unsigned __int8 *)(v1 + 32);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_45;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_45;
  }
  OUTLINED_FUNCTION_24_0();
  v47 = *(_QWORD *)(v3 + 40);
  v24 = *(_BYTE *)(v3 + 48);
  OUTLINED_FUNCTION_24_0();
  v25 = *(_BYTE *)(v1 + 48);
  if ((v24 & 1) != 0)
  {
    if (!*(_BYTE *)(v1 + 48))
      goto LABEL_45;
LABEL_21:
    OUTLINED_FUNCTION_24_0();
    v26 = *(unsigned __int8 *)(v3 + 49);
    OUTLINED_FUNCTION_24_0();
    v27 = *(unsigned __int8 *)(v1 + 49);
    if (v26 == 10)
    {
      if (v27 != 10)
        goto LABEL_45;
    }
    else if (v27 == 10 || v26 != v27)
    {
      goto LABEL_45;
    }
    v29 = v3
        + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
    OUTLINED_FUNCTION_24_0();
    sub_1C1E354A8(v29, (uint64_t)v17, &qword_1EF723398);
    v30 = v1
        + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__parse;
    OUTLINED_FUNCTION_24_0();
    v31 = v48;
    v32 = v48 + *(int *)(v8 + 48);
    sub_1C1E354A8((uint64_t)v17, v48, &qword_1EF723398);
    sub_1C1E354A8(v30, v32, &qword_1EF723398);
    OUTLINED_FUNCTION_9(v31, 1, v4);
    if (v21)
    {
      OUTLINED_FUNCTION_164_1();
      OUTLINED_FUNCTION_40();
      sub_1C1D48944((uint64_t)v17, &qword_1EF723398);
      OUTLINED_FUNCTION_9(v32, 1, v4);
      if (v21)
      {
        sub_1C1D48944(v31, &qword_1EF723398);
        goto LABEL_39;
      }
    }
    else
    {
      sub_1C1E354A8(v31, v14, &qword_1EF723398);
      OUTLINED_FUNCTION_9(v32, 1, v4);
      if (!v33)
      {
        OUTLINED_FUNCTION_308_0(v32);
        OUTLINED_FUNCTION_164_1();
        OUTLINED_FUNCTION_40();
        static Siri_Nlu_External_UserParse.== infix(_:_:)();
        v35 = v34;
        OUTLINED_FUNCTION_283_0((uint64_t)v7);
        OUTLINED_FUNCTION_189_0((uint64_t)v17);
        OUTLINED_FUNCTION_283_0(v14);
        OUTLINED_FUNCTION_189_0(v31);
        if ((v35 & 1) != 0)
        {
LABEL_39:
          OUTLINED_FUNCTION_24_0();
          OUTLINED_FUNCTION_24_0();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_215();
          sub_1C1D45794();
          v37 = v36;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v37 & 1) != 0)
          {
            v38 = v3
                + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse;
            OUTLINED_FUNCTION_24_0();
            v39 = *(_QWORD *)(v38 + 8);
            v40 = (uint64_t *)(v1
                            + OBJC_IVAR____TtCV12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__serializedParse);
            OUTLINED_FUNCTION_24_0();
            v41 = *v40;
            if (v39 >> 60 == 15)
            {
              OUTLINED_FUNCTION_312_0();
              OUTLINED_FUNCTION_143_2();
              OUTLINED_FUNCTION_44();
              OUTLINED_FUNCTION_284_1();
              if (!v21 & v42)
                goto LABEL_45;
            }
            else
            {
              OUTLINED_FUNCTION_284_1();
              if (!(!v21 & v42))
              {
                OUTLINED_FUNCTION_312_0();
                v43 = OUTLINED_FUNCTION_215();
                sub_1C1D4882C(v43, v44);
                v45 = OUTLINED_FUNCTION_215();
                MEMORY[0x1C3BB5E98](v45);
                OUTLINED_FUNCTION_143_2();
                OUTLINED_FUNCTION_44();
                OUTLINED_FUNCTION_244_1(v41);
                OUTLINED_FUNCTION_216_1();
                goto LABEL_45;
              }
              OUTLINED_FUNCTION_310_1();
              OUTLINED_FUNCTION_310_1();
              OUTLINED_FUNCTION_143_2();
              OUTLINED_FUNCTION_44();
              OUTLINED_FUNCTION_216_1();
            }
            OUTLINED_FUNCTION_216_1();
            OUTLINED_FUNCTION_244_1(v41);
            goto LABEL_45;
          }
        }
LABEL_44:
        OUTLINED_FUNCTION_143_2();
        OUTLINED_FUNCTION_44();
        goto LABEL_45;
      }
      OUTLINED_FUNCTION_164_1();
      OUTLINED_FUNCTION_40();
      sub_1C1D48944((uint64_t)v17, &qword_1EF723398);
      sub_1C1D6E98C(v14, type metadata accessor for Siri_Nlu_External_UserParse);
    }
    sub_1C1D48944(v31, &qword_1EF72D7E0);
    goto LABEL_44;
  }
  if (v47 != *(_QWORD *)(v1 + 40))
    v25 = 1;
  if ((v25 & 1) == 0)
    goto LABEL_21;
LABEL_45:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_ParseOverride.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&unk_1EF72D130, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
}

unint64_t sub_1C1EBD8A4()
{
  static Siri_Nlu_Internal_ParseOverride.protoMessageName.getter();
  return 0xD00000000000001FLL;
}

void sub_1C1EBD8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Siri_Nlu_Internal_ParseOverride.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C1EBD8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nlu_Internal_ParseOverride.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C1EBD8E8()
{
  sub_1C1D488DC(&qword_1EF72D7B0, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
  return sub_1C20194C4();
}

uint64_t sub_1C1EBD93C()
{
  sub_1C1D488DC(&qword_1EF720850, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
  return sub_1C2019608();
}

uint64_t sub_1C1EBD980()
{
  sub_1C1D488DC(&qword_1EF720850, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_Internal_ComponentOverride.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(35);
}

uint64_t sub_1C1EBD9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CEE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CEE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A4D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "override_namespace";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "enabled";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "creation_timestamp_ms_since_unix_epoch";
  *((_QWORD *)v15 + 1) = 38;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "value";
  *((_QWORD *)v17 + 1) = 5;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "nlu_request_rules";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "serialized_value";
  *((_QWORD *)v21 + 1) = 16;
  v21[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_ComponentOverride._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724650, (uint64_t)qword_1EF72CEE8, a1);
}

void Siri_Nlu_Internal_ComponentOverride.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_298_0();
          break;
        case 2:
          v3 = OUTLINED_FUNCTION_41_4();
          sub_1C1EC33A4(v3, v4, v5, v6, v7, (void (*)(void))sub_1C1EC5034);
          break;
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EBDD5C();
          break;
        case 4:
          OUTLINED_FUNCTION_56();
          sub_1C1EBDDBC();
          break;
        case 5:
          OUTLINED_FUNCTION_56();
          sub_1C1EBDE1C();
          break;
        case 6:
          OUTLINED_FUNCTION_144_3();
          break;
        case 7:
          OUTLINED_FUNCTION_56();
          sub_1C1EBDEB0();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

uint64_t sub_1C1EBDD5C()
{
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  return sub_1C2019500();
}

uint64_t sub_1C1EBDDBC()
{
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  return sub_1C201959C();
}

uint64_t sub_1C1EBDE1C()
{
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  sub_1C1D488DC(&qword_1EF720A00, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  return sub_1C20195B4();
}

uint64_t sub_1C1EBDEB0()
{
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  return sub_1C2019530();
}

void Siri_Nlu_Internal_ComponentOverride.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  OUTLINED_FUNCTION_40_2();
  v4 = v1;
  OUTLINED_FUNCTION_226();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  v6 = OUTLINED_FUNCTION_240_0();
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(v6);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_111();
  v9 = (int *)type metadata accessor for Siri_Nlu_Internal_ComponentOverride(v8);
  OUTLINED_FUNCTION_608();
  if (!v10 || (OUTLINED_FUNCTION_75_1(), (v4 = v1) == 0))
  {
    if (*(_BYTE *)(v0 + v9[7]) == 7 || (sub_1C1EC5034(), v1 = v4, sub_1C2019638(), !v4))
    {
      if (*(_BYTE *)(v0 + v9[8]) == 2 || (v1 = v4, sub_1C201962C(), !v4))
      {
        if ((*(_BYTE *)(v0 + v9[9] + 8) & 1) != 0 || (OUTLINED_FUNCTION_6_9(), (v4 = v1) == 0))
        {
          sub_1C1E354A8(v0 + v9[10], v3, &qword_1EF720A48);
          v11 = OUTLINED_FUNCTION_111_4();
          if (v12)
          {
            OUTLINED_FUNCTION_344_0(v11, &qword_1EF720A48);
          }
          else
          {
            OUTLINED_FUNCTION_206_0(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
            OUTLINED_FUNCTION_177_2(&qword_1EF720A00, v13, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
            v1 = v4;
            sub_1C20196D4();
            OUTLINED_FUNCTION_229_0(v2);
            if (v4)
              goto LABEL_18;
          }
          if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
            || (type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0),
                sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule), OUTLINED_FUNCTION_83_3(), (v4 = v1) == 0))
          {
            if (*(_QWORD *)(v0 + v9[11] + 8) >> 60 == 15
              || (v14 = OUTLINED_FUNCTION_280(),
                  sub_1C1D48840(v14, v15),
                  OUTLINED_FUNCTION_280(),
                  sub_1C2019650(),
                  v16 = OUTLINED_FUNCTION_280(),
                  sub_1C1D48884(v16, v17),
                  !v4))
            {
              OUTLINED_FUNCTION_380();
            }
          }
        }
      }
    }
  }
LABEL_18:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_ComponentOverride.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  OUTLINED_FUNCTION_5();
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_8();
  v85 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_9(v9, v80);
  v11 = MEMORY[0x1E0C80A78](v10);
  v19 = OUTLINED_FUNCTION_64_7(v11, v12, v13, v14, v15, v16, v17, v18, v80);
  v20 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(v19);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_64();
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D138);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_66();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_143_0();
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v80 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v80 - v29;
  v31 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
  v32 = v4;
  v33 = (int *)v31;
  v34 = *(int *)(v31 + 24);
  v35 = *(_QWORD *)(v32 + v34 + 8);
  if (!*(_QWORD *)(v6 + v34 + 8))
  {
    v82 = v7;
    if (v35)
      goto LABEL_47;
LABEL_10:
    v41 = v33[7];
    v42 = *(unsigned __int8 *)(v6 + v41);
    v43 = *(unsigned __int8 *)(v32 + v41);
    if (v42 == 7)
    {
      if (v43 != 7)
        goto LABEL_47;
    }
    else if (v43 == 7 || v42 != v43)
    {
      goto LABEL_47;
    }
    v45 = v33[8];
    v46 = *(unsigned __int8 *)(v6 + v45);
    v47 = *(unsigned __int8 *)(v32 + v45);
    if (v46 == 2)
    {
      if (v47 != 2)
        goto LABEL_47;
    }
    else
    {
      if (v47 == 2)
        goto LABEL_47;
      OUTLINED_FUNCTION_32();
      if ((v48 & 1) == 0)
        goto LABEL_47;
    }
    v49 = v33[9];
    v50 = *(_BYTE *)(v6 + v49 + 8);
    v51 = *(unsigned __int8 *)(v32 + v49 + 8);
    if ((v50 & 1) != 0)
    {
      if (!v51)
        goto LABEL_47;
    }
    else
    {
      OUTLINED_FUNCTION_35();
      if ((v52 & 1) != 0)
        goto LABEL_47;
    }
    v53 = v32;
    sub_1C1E354A8(v6 + v33[10], (uint64_t)v30, &qword_1EF720A48);
    v54 = v33[10];
    v81 = v53;
    OUTLINED_FUNCTION_128_2(v53 + v54, (uint64_t)v28);
    v55 = v0 + *(int *)(v22 + 48);
    v56 = OUTLINED_FUNCTION_314_1();
    OUTLINED_FUNCTION_128_2(v56, v57);
    OUTLINED_FUNCTION_128_2((uint64_t)v28, v55);
    OUTLINED_FUNCTION_9(v0, 1, v20);
    if (v38)
    {
      OUTLINED_FUNCTION_39_0((uint64_t)v28);
      OUTLINED_FUNCTION_39_0((uint64_t)v30);
      v59 = OUTLINED_FUNCTION_9(v55, 1, v20);
      if (v38)
      {
        OUTLINED_FUNCTION_71(v59, &qword_1EF720A48);
        goto LABEL_37;
      }
    }
    else
    {
      OUTLINED_FUNCTION_231(v0, v58, &qword_1EF720A48);
      OUTLINED_FUNCTION_9(v55, 1, v20);
      if (!v60)
      {
        OUTLINED_FUNCTION_199_2(v55);
        static Siri_Nlu_Internal_ComponentOverride.OverrideValue.== infix(_:_:)();
        v63 = v62;
        OUTLINED_FUNCTION_283_0(v1);
        OUTLINED_FUNCTION_107((uint64_t)v28);
        OUTLINED_FUNCTION_107((uint64_t)v30);
        OUTLINED_FUNCTION_283_0(v2);
        OUTLINED_FUNCTION_107(v0);
        if ((v63 & 1) == 0)
          goto LABEL_47;
LABEL_37:
        v64 = v81;
        sub_1C1D45794();
        if ((v65 & 1) == 0)
          goto LABEL_47;
        v66 = v33[11];
        v67 = *(_QWORD *)(v6 + v66);
        v68 = *(_QWORD *)(v6 + v66 + 8);
        v69 = (uint64_t *)(v64 + v66);
        v70 = *v69;
        v71 = v69[1];
        if (v68 >> 60 == 15)
        {
          OUTLINED_FUNCTION_284_1();
          if (!(!v38 & v73))
            goto LABEL_44;
        }
        else
        {
          OUTLINED_FUNCTION_284_1();
          if (!v38 & v73)
          {
LABEL_44:
            sub_1C1D4882C(v67, v68);
            sub_1C1D4882C(v70, v71);
            OUTLINED_FUNCTION_307_1();
            OUTLINED_FUNCTION_244_1(v70);
            goto LABEL_47;
          }
          sub_1C1D4882C(v67, v68);
          sub_1C1D4882C(v70, v71);
          v74 = OUTLINED_FUNCTION_132();
          v75 = MEMORY[0x1C3BB5E98](v74);
          OUTLINED_FUNCTION_244_1(v70);
          OUTLINED_FUNCTION_307_1();
          v72 = v81;
          if ((v75 & 1) == 0)
            goto LABEL_47;
        }
        v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
        v77 = v82;
        v78 = v83;
        v79 = v72;
        v76(v83, v6 + v33[5], v82);
        OUTLINED_FUNCTION_54_2(v84, v79 + v33[5]);
        sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        OUTLINED_FUNCTION_12();
        OUTLINED_FUNCTION_217_1();
        ((void (*)(uint64_t, uint64_t))v76)(v78, v77);
        goto LABEL_47;
      }
      OUTLINED_FUNCTION_306_1();
      OUTLINED_FUNCTION_160_4();
      OUTLINED_FUNCTION_378(v61, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
    }
    OUTLINED_FUNCTION_71(v59, &qword_1EF72D138);
    goto LABEL_47;
  }
  if (v35)
  {
    v82 = v7;
    OUTLINED_FUNCTION_4(v6 + v34);
    v38 = v38 && v36 == v37;
    if (v38)
      goto LABEL_10;
    v39 = v32;
    v40 = sub_1C2019A10();
    v32 = v39;
    if ((v40 & 1) != 0)
      goto LABEL_10;
  }
LABEL_47:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&unk_1EF72D140, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
}

unint64_t sub_1C1EBE5CC()
{
  static Siri_Nlu_Internal_ComponentOverride.protoMessageName.getter();
  return 0xD000000000000023;
}

void sub_1C1EBE5F0()
{
  Siri_Nlu_Internal_ComponentOverride.decodeMessage<A>(decoder:)();
}

void sub_1C1EBE604()
{
  Siri_Nlu_Internal_ComponentOverride.traverse<A>(visitor:)();
}

uint64_t sub_1C1EBE618()
{
  sub_1C1D488DC(&qword_1EF72D7A8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
  return sub_1C20194C4();
}

uint64_t sub_1C1EBE66C()
{
  sub_1C1D488DC(&qword_1EF720AB0, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
  return sub_1C2019608();
}

uint64_t sub_1C1EBE6B0()
{
  sub_1C1D488DC(&qword_1EF720AB0, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
  return sub_1C2019614();
}

uint64_t sub_1C1EBE704()
{
  uint64_t result;

  result = sub_1C201998C();
  qword_1EF72CF00 = 0xD000000000000023;
  *(_QWORD *)algn_1EF72CF08 = 0x80000001C2051370;
  return result;
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724658);
}

uint64_t sub_1C1EBE798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CF10);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CF10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ccqr_override_template";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "user_parse";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "lvc_override_value";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "plan_override_value";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_ComponentOverride.OverrideValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724660, (uint64_t)qword_1EF72CF10, a1);
}

void sub_1C1EBE970(uint64_t a1)
{
  sub_1C1E2162C(a1, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass, sub_1C1EBE9B4, &qword_1EF72CF28);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF720960);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72D638);
}

uint64_t sub_1C1EBE9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  v2 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  v4 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  v6 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  v8 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v8);
  return v0;
}

uint64_t sub_1C1EBEA70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D108);
  MEMORY[0x1E0C80A78](v3);
  v28 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D0F8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720998);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  v15 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  __swift_storeEnumTagSinglePayload(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  v17 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  __swift_storeEnumTagSinglePayload(v16, 1, 1, v17);
  v18 = v1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  v19 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  __swift_storeEnumTagSinglePayload(v18, 1, 1, v19);
  v20 = v1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  v21 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  __swift_storeEnumTagSinglePayload(v20, 1, 1, v21);
  v22 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  swift_beginAccess();
  sub_1C1E354A8(v22, (uint64_t)v13, &qword_1EF720998);
  swift_beginAccess();
  sub_1C1D53F5C((uint64_t)v13, v14, &qword_1EF720998);
  swift_endAccess();
  v23 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  swift_beginAccess();
  sub_1C1E354A8(v23, (uint64_t)v10, &qword_1EF723398);
  swift_beginAccess();
  sub_1C1D53F5C((uint64_t)v10, v16, &qword_1EF723398);
  swift_endAccess();
  v24 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  swift_beginAccess();
  sub_1C1E354A8(v24, (uint64_t)v7, &qword_1EF72D0F8);
  swift_beginAccess();
  sub_1C1D53F5C((uint64_t)v7, v18, &qword_1EF72D0F8);
  swift_endAccess();
  v25 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  swift_beginAccess();
  v26 = v28;
  sub_1C1E354A8(v25, v28, &qword_1EF72D108);
  swift_release();
  swift_beginAccess();
  sub_1C1D53F5C(v26, v20, &qword_1EF72D108);
  swift_endAccess();
  return v1;
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72D3B0);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72D448);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_NluRequestRule(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723B90);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723670);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF721378);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF721368);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF7235C8);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF7235E8);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723638);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72D320);
}

uint64_t sub_1C1EBEE9C()
{
  uint64_t v0;

  sub_1C1D48944(v0+ OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate, &qword_1EF720998);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse, &qword_1EF723398);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue, &qword_1EF72D0F8);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue, &qword_1EF72D108);
  return v0;
}

uint64_t sub_1C1EBEF10()
{
  return sub_1C1E35668((void (*)(void))sub_1C1EBEE9C);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C1EBEF50(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass, sub_1C1EBEA70, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C1EBEFD0);
}

void sub_1C1EBEF50(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;

  sub_1C1EB875C(a4, a5, a6);
  swift_release();
  OUTLINED_FUNCTION_202_1();
  v11 = OUTLINED_FUNCTION_40();
  a7(v11, a1, a2, a3);
  swift_release();
  OUTLINED_FUNCTION_26_2();
}

uint64_t sub_1C1EBEFD0()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C20194DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_1C1EBF148();
          break;
        default:
          break;
      }
      result = sub_1C20194DC();
    }
  }
  return result;
}

uint64_t sub_1C1EBF148()
{
  OUTLINED_FUNCTION_207_1();
  swift_beginAccess();
  OUTLINED_FUNCTION_202_1();
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_37_1();
  sub_1C20195B4();
  return swift_endAccess();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C1EBF1F0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, sub_1C1EBF280);
}

uint64_t sub_1C1EBF1F0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
  {
    OUTLINED_FUNCTION_199();
    return sub_1C2019464();
  }
  return result;
}

void sub_1C1EBF280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a3;
  v46 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D108);
  MEMORY[0x1E0C80A78](v5);
  v40 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  MEMORY[0x1E0C80A78](v41);
  v37 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D0F8);
  MEMORY[0x1E0C80A78](v8);
  v42 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  MEMORY[0x1E0C80A78](v43);
  v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  MEMORY[0x1E0C80A78](v14);
  v39 = (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720998);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1;
  v23 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  swift_beginAccess();
  sub_1C1E354A8(v23, (uint64_t)v18, &qword_1EF720998);
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19) == 1)
  {
    sub_1C1D48944((uint64_t)v18, &qword_1EF720998);
    v24 = v44;
    v25 = v22;
  }
  else
  {
    sub_1C1D4A900((uint64_t)v18, (uint64_t)v21, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
    sub_1C1D488DC(&qword_1EF720950, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
    v26 = v44;
    sub_1C20196D4();
    v24 = v26;
    sub_1C1D6E98C((uint64_t)v21, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
    v25 = v22;
    if (v26)
      return;
  }
  v27 = v25
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  swift_beginAccess();
  sub_1C1E354A8(v27, (uint64_t)v13, &qword_1EF723398);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14) == 1)
  {
    sub_1C1D48944((uint64_t)v13, &qword_1EF723398);
  }
  else
  {
    v28 = v39;
    sub_1C1D4A900((uint64_t)v13, v39, type metadata accessor for Siri_Nlu_External_UserParse);
    sub_1C1D488DC(&qword_1EF723390, type metadata accessor for Siri_Nlu_External_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
    sub_1C20196D4();
    sub_1C1D6E98C(v28, type metadata accessor for Siri_Nlu_External_UserParse);
    if (v24)
      return;
  }
  v29 = v25
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  swift_beginAccess();
  v30 = v42;
  sub_1C1E354A8(v29, v42, &qword_1EF72D0F8);
  if (__swift_getEnumTagSinglePayload(v30, 1, v43) == 1)
  {
    sub_1C1D48944(v30, &qword_1EF72D0F8);
  }
  else
  {
    v31 = v30;
    v32 = v38;
    sub_1C1D4A900(v31, v38, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    sub_1C1D488DC(&qword_1EF72D260, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    sub_1C20196D4();
    sub_1C1D6E98C(v32, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    if (v24)
      return;
  }
  v33 = v25
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  swift_beginAccess();
  v34 = v40;
  sub_1C1E354A8(v33, v40, &qword_1EF72D108);
  if (__swift_getEnumTagSinglePayload(v34, 1, v41) == 1)
  {
    sub_1C1D48944(v34, &qword_1EF72D108);
  }
  else
  {
    v35 = v34;
    v36 = v37;
    sub_1C1D4A900(v35, v37, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
    sub_1C1D488DC(&qword_1EF72D278, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
    sub_1C20196D4();
    sub_1C1D6E98C(v36, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  }
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.== infix(_:_:)()
{
  sub_1C1EBF7FC();
}

void sub_1C1EBF7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  OUTLINED_FUNCTION_5();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = OUTLINED_FUNCTION_8();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v11);
  v12 = OUTLINED_FUNCTION_158_0();
  v13 = *(int *)(v5(v12) + 20);
  v14 = *(_QWORD *)(v9 + v13);
  v15 = *(_QWORD *)(v7 + v13);
  if (v14 == v15
    || (swift_retain(), swift_retain(), v16 = v3(v14, v15), swift_release(), swift_release(), (v16 & 1) != 0))
  {
    OUTLINED_FUNCTION_310();
    OUTLINED_FUNCTION_287();
    sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    OUTLINED_FUNCTION_7_1();
    OUTLINED_FUNCTION_285(v0);
    OUTLINED_FUNCTION_285(v1);
  }
  OUTLINED_FUNCTION_0();
}

BOOL sub_1C1EBF8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int EnumTagSinglePayload;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v93 = a2;
  v79 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(0);
  MEMORY[0x1E0C80A78](v79);
  v75 = (uint64_t)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D7D0);
  MEMORY[0x1E0C80A78](v78);
  v80 = (uint64_t)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D108);
  v6 = MEMORY[0x1E0C80A78](v5);
  v76 = (uint64_t)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v87 = (char *)&v75 - v8;
  v85 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(0);
  MEMORY[0x1E0C80A78](v85);
  v77 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D7D8);
  MEMORY[0x1E0C80A78](v83);
  v86 = (uint64_t)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D0F8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v81 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v84 = (uint64_t)&v75 - v14;
  v91 = type metadata accessor for Siri_Nlu_External_UserParse(0);
  MEMORY[0x1E0C80A78](v91);
  v82 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D7E0);
  MEMORY[0x1E0C80A78](v89);
  v92 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723398);
  v18 = MEMORY[0x1E0C80A78](v17);
  v88 = (uint64_t)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v90 = (uint64_t)&v75 - v20;
  v21 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D7E8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720998);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v75 - v31;
  v33 = a1
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  swift_beginAccess();
  sub_1C1E354A8(v33, (uint64_t)v32, &qword_1EF720998);
  v34 = v93;
  v35 = v93
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__ccqrOverrideTemplate;
  swift_beginAccess();
  v36 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_1C1E354A8((uint64_t)v32, (uint64_t)v26, &qword_1EF720998);
  sub_1C1E354A8(v35, v36, &qword_1EF720998);
  if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v21) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C1D48944((uint64_t)v32, &qword_1EF720998);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v36, 1, v21);
    v38 = a1;
    if (EnumTagSinglePayload == 1)
    {
      sub_1C1D48944((uint64_t)v26, &qword_1EF720998);
      goto LABEL_8;
    }
LABEL_6:
    v39 = &qword_1EF72D7E8;
    v40 = (uint64_t)v26;
LABEL_22:
    sub_1C1D48944(v40, v39);
    goto LABEL_23;
  }
  sub_1C1E354A8((uint64_t)v26, (uint64_t)v30, &qword_1EF720998);
  if (__swift_getEnumTagSinglePayload(v36, 1, v21) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C1D48944((uint64_t)v32, &qword_1EF720998);
    sub_1C1D6E98C((uint64_t)v30, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
    goto LABEL_6;
  }
  sub_1C1D4A900(v36, (uint64_t)v23, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  v38 = a1;
  swift_retain();
  swift_retain();
  static Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.== infix(_:_:)();
  v42 = v41;
  sub_1C1D6E98C((uint64_t)v23, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  sub_1C1D48944((uint64_t)v32, &qword_1EF720998);
  sub_1C1D6E98C((uint64_t)v30, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  sub_1C1D48944((uint64_t)v26, &qword_1EF720998);
  if ((v42 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  v43 = v38
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  swift_beginAccess();
  v44 = v90;
  sub_1C1E354A8(v43, v90, &qword_1EF723398);
  v45 = v34
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__userParse;
  swift_beginAccess();
  v46 = v92;
  v47 = v92 + *(int *)(v89 + 48);
  sub_1C1E354A8(v44, v92, &qword_1EF723398);
  sub_1C1E354A8(v45, v47, &qword_1EF723398);
  v48 = v91;
  if (__swift_getEnumTagSinglePayload(v46, 1, v91) == 1)
  {
    sub_1C1D48944(v44, &qword_1EF723398);
    if (__swift_getEnumTagSinglePayload(v47, 1, v48) == 1)
    {
      sub_1C1D48944(v46, &qword_1EF723398);
      goto LABEL_15;
    }
LABEL_13:
    v39 = &qword_1EF72D7E0;
LABEL_21:
    v40 = v46;
    goto LABEL_22;
  }
  v49 = v88;
  sub_1C1E354A8(v46, v88, &qword_1EF723398);
  if (__swift_getEnumTagSinglePayload(v47, 1, v48) == 1)
  {
    sub_1C1D48944(v44, &qword_1EF723398);
    sub_1C1D6E98C(v49, type metadata accessor for Siri_Nlu_External_UserParse);
    goto LABEL_13;
  }
  v50 = v82;
  sub_1C1D4A900(v47, v82, type metadata accessor for Siri_Nlu_External_UserParse);
  static Siri_Nlu_External_UserParse.== infix(_:_:)();
  v52 = v51;
  sub_1C1D6E98C(v50, type metadata accessor for Siri_Nlu_External_UserParse);
  sub_1C1D48944(v44, &qword_1EF723398);
  sub_1C1D6E98C(v49, type metadata accessor for Siri_Nlu_External_UserParse);
  sub_1C1D48944(v46, &qword_1EF723398);
  if ((v52 & 1) == 0)
    goto LABEL_23;
LABEL_15:
  v53 = v38
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  swift_beginAccess();
  v54 = v84;
  sub_1C1E354A8(v53, v84, &qword_1EF72D0F8);
  v55 = v34
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__lvcOverrideValue;
  swift_beginAccess();
  v46 = v86;
  v56 = v86 + *(int *)(v83 + 48);
  sub_1C1E354A8(v54, v86, &qword_1EF72D0F8);
  sub_1C1E354A8(v55, v56, &qword_1EF72D0F8);
  v57 = v85;
  if (__swift_getEnumTagSinglePayload(v46, 1, v85) != 1)
  {
    v60 = v81;
    sub_1C1E354A8(v46, v81, &qword_1EF72D0F8);
    v61 = __swift_getEnumTagSinglePayload(v56, 1, v57);
    v59 = (uint64_t)v87;
    if (v61 == 1)
    {
      sub_1C1D48944(v54, &qword_1EF72D0F8);
      sub_1C1D6E98C(v60, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
      goto LABEL_20;
    }
    v63 = v77;
    sub_1C1D4A900(v56, v77, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    static Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.== infix(_:_:)();
    v65 = v64;
    sub_1C1D6E98C(v63, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    sub_1C1D48944(v54, &qword_1EF72D0F8);
    sub_1C1D6E98C(v60, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
    sub_1C1D48944(v46, &qword_1EF72D0F8);
    if ((v65 & 1) != 0)
      goto LABEL_27;
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
  sub_1C1D48944(v54, &qword_1EF72D0F8);
  v58 = __swift_getEnumTagSinglePayload(v56, 1, v57);
  v59 = (uint64_t)v87;
  if (v58 != 1)
  {
LABEL_20:
    v39 = &qword_1EF72D7D8;
    goto LABEL_21;
  }
  sub_1C1D48944(v46, &qword_1EF72D0F8);
LABEL_27:
  v66 = v38
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  swift_beginAccess();
  sub_1C1E354A8(v66, v59, &qword_1EF72D108);
  v67 = v34
      + OBJC_IVAR____TtCVV12SiriNLUTypes35Siri_Nlu_Internal_ComponentOverride13OverrideValueP33_547E1FDA7FB929EBB369B4D8DD44934613_StorageClass__planOverrideValue;
  swift_beginAccess();
  v68 = v80;
  v69 = v80 + *(int *)(v78 + 48);
  sub_1C1E354A8(v59, v80, &qword_1EF72D108);
  sub_1C1E354A8(v67, v69, &qword_1EF72D108);
  v70 = v79;
  if (__swift_getEnumTagSinglePayload(v68, 1, v79) == 1)
  {
    swift_release();
    swift_release();
    sub_1C1D48944(v59, &qword_1EF72D108);
    if (__swift_getEnumTagSinglePayload(v69, 1, v70) == 1)
    {
      sub_1C1D48944(v68, &qword_1EF72D108);
      return 1;
    }
    goto LABEL_32;
  }
  v71 = v76;
  sub_1C1E354A8(v68, v76, &qword_1EF72D108);
  if (__swift_getEnumTagSinglePayload(v69, 1, v70) == 1)
  {
    swift_release();
    swift_release();
    sub_1C1D48944(v59, &qword_1EF72D108);
    sub_1C1D6E98C(v71, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
LABEL_32:
    sub_1C1D48944(v68, &qword_1EF72D7D0);
    return 0;
  }
  v72 = v75;
  sub_1C1D4A900(v69, v75, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  static Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.== infix(_:_:)();
  v74 = v73;
  swift_release();
  swift_release();
  sub_1C1D6E98C(v72, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  sub_1C1D48944(v59, &qword_1EF72D108);
  sub_1C1D6E98C(v71, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  sub_1C1D48944(v68, &qword_1EF72D108);
  return (v74 & 1) != 0;
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&unk_1EF72D148, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
}

void sub_1C1EC0470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C1EC0484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nlu_Internal_ComponentOverride.OverrideValue.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C1EC0498()
{
  sub_1C1D488DC(&qword_1EF72D7A0, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC04EC()
{
  sub_1C1D488DC(&qword_1EF720A00, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  return sub_1C2019608();
}

uint64_t sub_1C1EC0530()
{
  sub_1C1D488DC(&qword_1EF720A00, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
  return sub_1C2019614();
}

uint64_t sub_1C1EC0584(uint64_t a1)
{
  return sub_1C1EC0AF4(a1, 0xD000000000000015, 0x80000001C20518C0, &qword_1EF72CF30, &qword_1EF72CF38);
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724670);
}

void sub_1C1EC05CC()
{
  sub_1C1E2F6E4();
}

uint64_t static Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724678, (uint64_t)&unk_1EF72CF40, a1);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.decodeMessage<A>(decoder:)()
{
  sub_1C1EC0C18();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_47_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_22_4();
  v5 = type metadata accessor for Siri_Nlu_External_RewriteMessage(v4);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_37();
  v8 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(v7);
  OUTLINED_FUNCTION_516(v8);
  if (__swift_getEnumTagSinglePayload(v2, 1, v5) == 1)
  {
    sub_1C1D48944(v2, &qword_1EF7236D0);
LABEL_4:
    OUTLINED_FUNCTION_31_3();
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_279();
  OUTLINED_FUNCTION_177_2(&qword_1EF720910, v9, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_RewriteMessage);
  OUTLINED_FUNCTION_39_6();
  OUTLINED_FUNCTION_229_0(v1);
  if (!v0)
    goto LABEL_4;
LABEL_5:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_9(v9, v35);
  v11 = MEMORY[0x1E0C80A78](v10);
  v19 = OUTLINED_FUNCTION_64_7(v11, v12, v13, v14, v15, v16, v17, v18, v36);
  v20 = type metadata accessor for Siri_Nlu_External_RewriteMessage(v19);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_195_1(v22, v37);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF729BD0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_144_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_86();
  MEMORY[0x1E0C80A78](v27);
  v28 = OUTLINED_FUNCTION_214();
  v29 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(v28);
  OUTLINED_FUNCTION_281_0(v7 + *(int *)(v29 + 20), v3);
  OUTLINED_FUNCTION_281_0(v5 + *(int *)(v29 + 20), v0);
  v30 = v1 + *(int *)(v23 + 48);
  OUTLINED_FUNCTION_281_0(v3, v1);
  OUTLINED_FUNCTION_281_0(v0, v30);
  v31 = OUTLINED_FUNCTION_9(v1, 1, v20);
  if (v34)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    v33 = OUTLINED_FUNCTION_9(v30, 1, v20);
    if (v34)
    {
      OUTLINED_FUNCTION_38_1(v33, &qword_1EF7236D0);
LABEL_11:
      OUTLINED_FUNCTION_54_2(v38, v7);
      OUTLINED_FUNCTION_54_2(v39, v5);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_181(v39);
      OUTLINED_FUNCTION_181(v38);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_313_1(v31, v32, &qword_1EF7236D0);
  OUTLINED_FUNCTION_9(v30, 1, v20);
  if (v34)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    sub_1C1D6E98C(v2, type metadata accessor for Siri_Nlu_External_RewriteMessage);
LABEL_9:
    OUTLINED_FUNCTION_38_1(v33, &qword_1EF729BD0);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_194_3();
  static Siri_Nlu_External_RewriteMessage.== infix(_:_:)();
  OUTLINED_FUNCTION_260_1();
  OUTLINED_FUNCTION_189_0(v0);
  OUTLINED_FUNCTION_189_0(v3);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_189_0(v1);
  if ((v29 & 1) != 0)
    goto LABEL_11;
LABEL_12:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&unk_1EF72D150, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EC09B8()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.decodeMessage<A>(decoder:)();
}

void sub_1C1EC09CC()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC09E0()
{
  sub_1C1D488DC(&qword_1EF72D798, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC0A34()
{
  sub_1C1D488DC(&qword_1EF720950, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  return sub_1C2019608();
}

uint64_t sub_1C1EC0A78()
{
  sub_1C1D488DC(&qword_1EF720950, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  return sub_1C2019614();
}

uint64_t sub_1C1EC0ACC(uint64_t a1)
{
  return sub_1C1EC0AF4(a1, 0xD000000000000011, 0x80000001C2051890, &qword_1EF72CF58, &qword_1EF72CF60);
}

uint64_t sub_1C1EC0AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EF724658 != -1)
    swift_once();
  v8 = qword_1EF72CF00;
  v9 = *(_QWORD *)algn_1EF72CF08;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_199();
  result = sub_1C201998C();
  *a4 = v8;
  *a5 = v9;
  return result;
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724680);
}

void sub_1C1EC0BA8()
{
  sub_1C1E2F6E4();
}

uint64_t static Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724688, (uint64_t)&unk_1EF72CF68, a1);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.decodeMessage<A>(decoder:)()
{
  sub_1C1EC0C18();
}

void sub_1C1EC0C18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  while (1)
  {
    v1 = sub_1C20194DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (v1 == 1)
    {
      OUTLINED_FUNCTION_314_1();
      sub_1C1EC0CA0();
    }
    OUTLINED_FUNCTION_280();
  }
  OUTLINED_FUNCTION_225();
}

void sub_1C1EC0CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_207_1();
  OUTLINED_FUNCTION_180_0(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_202_1();
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_168_3();
  sub_1C20195B4();
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_47_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_22_4();
  v5 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(v4);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_37();
  v8 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(v7);
  OUTLINED_FUNCTION_516(v8);
  if (__swift_getEnumTagSinglePayload(v2, 1, v5) == 1)
  {
    sub_1C1D48944(v2, &qword_1EF72D118);
LABEL_4:
    OUTLINED_FUNCTION_31_3();
    goto LABEL_5;
  }
  OUTLINED_FUNCTION_279();
  OUTLINED_FUNCTION_177_2(&qword_1EF723FE0, v9, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_MultilingualVariant);
  OUTLINED_FUNCTION_39_6();
  OUTLINED_FUNCTION_229_0(v1);
  if (!v0)
    goto LABEL_4;
LABEL_5:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_9(v9, v35);
  v11 = MEMORY[0x1E0C80A78](v10);
  v19 = OUTLINED_FUNCTION_64_7(v11, v12, v13, v14, v15, v16, v17, v18, v36);
  v20 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(v19);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v21);
  OUTLINED_FUNCTION_195_1(v22, v37);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D158);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_144_0();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_86();
  MEMORY[0x1E0C80A78](v27);
  v28 = OUTLINED_FUNCTION_214();
  v29 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(v28);
  OUTLINED_FUNCTION_281_0(v7 + *(int *)(v29 + 20), v3);
  OUTLINED_FUNCTION_281_0(v5 + *(int *)(v29 + 20), v0);
  v30 = v1 + *(int *)(v23 + 48);
  OUTLINED_FUNCTION_281_0(v3, v1);
  OUTLINED_FUNCTION_281_0(v0, v30);
  v31 = OUTLINED_FUNCTION_9(v1, 1, v20);
  if (v34)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    v33 = OUTLINED_FUNCTION_9(v30, 1, v20);
    if (v34)
    {
      OUTLINED_FUNCTION_38_1(v33, &qword_1EF72D118);
LABEL_11:
      OUTLINED_FUNCTION_54_2(v38, v7);
      OUTLINED_FUNCTION_54_2(v39, v5);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_181(v39);
      OUTLINED_FUNCTION_181(v38);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_313_1(v31, v32, &qword_1EF72D118);
  OUTLINED_FUNCTION_9(v30, 1, v20);
  if (v34)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    sub_1C1D6E98C(v2, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
LABEL_9:
    OUTLINED_FUNCTION_38_1(v33, &qword_1EF72D158);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_194_3();
  static Siri_Nlu_External_MultilingualVariant.== infix(_:_:)(v2, v5);
  OUTLINED_FUNCTION_260_1();
  OUTLINED_FUNCTION_189_0(v0);
  OUTLINED_FUNCTION_189_0(v3);
  OUTLINED_FUNCTION_286();
  OUTLINED_FUNCTION_189_0(v1);
  if ((v29 & 1) != 0)
    goto LABEL_11;
LABEL_12:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&unk_1EF72D160, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void sub_1C1EC1060()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.decodeMessage<A>(decoder:)();
}

void sub_1C1EC1074()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC1088()
{
  sub_1C1D488DC(&qword_1EF72D790, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC10DC()
{
  sub_1C1D488DC(&qword_1EF72D260, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
  return sub_1C2019608();
}

uint64_t sub_1C1EC1120()
{
  sub_1C1D488DC(&qword_1EF72D260, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
  return sub_1C2019614();
}

uint64_t sub_1C1EC1174(uint64_t a1)
{
  return sub_1C1EC0AF4(a1, 0xD000000000000012, 0x80000001C2051870, &qword_1EF72CF80, &qword_1EF72CF88);
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724690);
}

void sub_1C1EC11BC()
{
  sub_1C1E2F6E4();
}

uint64_t static Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724698, (uint64_t)&unk_1EF72CF90, a1);
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
        OUTLINED_FUNCTION_454();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

void Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_227();
  if (!*(_QWORD *)(v1
                  + *(int *)(type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(v2)
                           + 20)
                  + 8)
    || (OUTLINED_FUNCTION_183_2(), !v0))
  {
    OUTLINED_FUNCTION_31_3();
  }
  OUTLINED_FUNCTION_22_2();
}

void static Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  OUTLINED_FUNCTION_42_3();
  v2 = OUTLINED_FUNCTION_8();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_158_0();
  type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue(v4);
  OUTLINED_FUNCTION_22_3();
  if (!v7)
  {
    if (v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_4(v6);
    v10 = v10 && v8 == v9;
    if (v10 || (OUTLINED_FUNCTION_13() & 1) != 0)
    {
LABEL_11:
      OUTLINED_FUNCTION_310();
      OUTLINED_FUNCTION_287();
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_216(v0);
      OUTLINED_FUNCTION_216(v1);
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&unk_1EF72D168, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EC1390()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.decodeMessage<A>(decoder:)();
}

void sub_1C1EC13A4()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC13B8()
{
  sub_1C1D488DC(&qword_1EF72D788, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC140C()
{
  sub_1C1D488DC(&qword_1EF72D278, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  return sub_1C2019608();
}

uint64_t sub_1C1EC1450()
{
  sub_1C1D488DC(&qword_1EF72D278, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_Internal_NluRequestRule.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(32);
}

uint64_t sub_1C1EC14BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CFA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CFA8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202E540;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "locale_id";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "device_type";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "user_interface_idiom";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "turn_input_rules";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_NluRequestRule._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246A0, (uint64_t)qword_1EF72CFA8, a1);
}

void Siri_Nlu_Internal_NluRequestRule.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_298_0();
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1EC1798();
          break;
        case 3:
          OUTLINED_FUNCTION_297();
          break;
        case 4:
          OUTLINED_FUNCTION_180_4();
          break;
        case 5:
          OUTLINED_FUNCTION_56();
          sub_1C1EC461C();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

uint64_t sub_1C1EC1798()
{
  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
  return sub_1C2019578();
}

void sub_1C1EC17F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  OUTLINED_FUNCTION_97_1(a1, a2, a3, a4, a5);
  OUTLINED_FUNCTION_227_0();
  OUTLINED_FUNCTION_22_2();
}

void Siri_Nlu_Internal_NluRequestRule.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = OUTLINED_FUNCTION_219_0();
  type metadata accessor for Siri_Nlu_Internal_NluRequestRule(v2);
  OUTLINED_FUNCTION_608();
  if (!v3 || (OUTLINED_FUNCTION_75_1(), !v0))
  {
    OUTLINED_FUNCTION_608();
    if (!v4 || (OUTLINED_FUNCTION_75_1(), !v0))
    {
      OUTLINED_FUNCTION_608();
      if (!v5 || (OUTLINED_FUNCTION_75_1(), !v0))
      {
        OUTLINED_FUNCTION_608();
        if (!v6 || (OUTLINED_FUNCTION_75_1(), !v0))
        {
          if (!*(_QWORD *)(*(_QWORD *)v1 + 16)
            || (type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0),
                sub_1C1D488DC(&qword_1EF723660, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule), OUTLINED_FUNCTION_83_3(), !v0))
          {
            OUTLINED_FUNCTION_380();
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_225();
}

void static Siri_Nlu_Internal_NluRequestRule.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;

  OUTLINED_FUNCTION_42_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_158_0();
  v4 = type metadata accessor for Siri_Nlu_Internal_NluRequestRule(v3);
  OUTLINED_FUNCTION_22_3();
  if (!v7)
  {
    if (v5)
      goto LABEL_39;
LABEL_10:
    OUTLINED_FUNCTION_22_3();
    if (v13)
    {
      if (!v11)
        goto LABEL_39;
      OUTLINED_FUNCTION_4(v12);
      v16 = v10 && v14 == v15;
      if (!v16 && (OUTLINED_FUNCTION_13() & 1) == 0)
        goto LABEL_39;
    }
    else if (v11)
    {
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_22_3();
    if (v19)
    {
      if (!v17)
        goto LABEL_39;
      OUTLINED_FUNCTION_4(v18);
      v22 = v10 && v20 == v21;
      if (!v22 && (OUTLINED_FUNCTION_13() & 1) == 0)
        goto LABEL_39;
    }
    else if (v17)
    {
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_22_3();
    if (v25)
    {
      if (!v23)
        goto LABEL_39;
      OUTLINED_FUNCTION_4(v24);
      v28 = v10 && v26 == v27;
      if (!v28 && (OUTLINED_FUNCTION_13() & 1) == 0)
        goto LABEL_39;
    }
    else if (v23)
    {
      goto LABEL_39;
    }
    sub_1C1D41B9C();
    if ((v29 & 1) != 0)
    {
      OUTLINED_FUNCTION_129_5(*(int *)(v4 + 20));
      OUTLINED_FUNCTION_93_1(*(int *)(v4 + 20));
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_60_3();
      OUTLINED_FUNCTION_216(v0);
    }
    goto LABEL_39;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_4(v6);
    v10 = v10 && v8 == v9;
    if (v10 || (OUTLINED_FUNCTION_13() & 1) != 0)
      goto LABEL_10;
  }
LABEL_39:
  OUTLINED_FUNCTION_296_1();
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_NluRequestRule.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&unk_1EF72D170, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
}

unint64_t sub_1C1EC1AB4()
{
  static Siri_Nlu_Internal_NluRequestRule.protoMessageName.getter();
  return 0xD000000000000020;
}

void sub_1C1EC1AD8()
{
  Siri_Nlu_Internal_NluRequestRule.decodeMessage<A>(decoder:)();
}

void sub_1C1EC1AEC()
{
  Siri_Nlu_Internal_NluRequestRule.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC1B00()
{
  sub_1C1D488DC(&qword_1EF72D780, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC1B54()
{
  sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
  return sub_1C2019608();
}

uint64_t sub_1C1EC1B98()
{
  sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_Internal_TurnInputRule.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(31);
}

uint64_t sub_1C1EC1C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CFC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CFC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "utterance_rule";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "positive_context_rules";
  *((_QWORD *)v11 + 1) = 22;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "negative_context_rules";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246A8, (uint64_t)qword_1EF72CFC0, a1);
}

void Siri_Nlu_Internal_TurnInputRule.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_315_1();
          break;
        case 2:
          OUTLINED_FUNCTION_70_9();
          break;
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EC1E44();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_26_2();
}

uint64_t sub_1C1EC1E44()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule(0);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  sub_1C1D488DC(&qword_1EF723648, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  return sub_1C20195B4();
}

void sub_1C1EC1ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_180_0(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_37_1();
  sub_1C20195A8();
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_Internal_TurnInputRule.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_40_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  v5 = OUTLINED_FUNCTION_240_0();
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v5);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_111();
  v11 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule(v7);
  sub_1C1E354A8(v0 + *(int *)(v11 + 28), v3, &qword_1EF721388);
  v8 = OUTLINED_FUNCTION_111_4();
  if (v9)
  {
    OUTLINED_FUNCTION_344_0(v8, &qword_1EF721388);
  }
  else
  {
    sub_1C1D4A900(v3, v2, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
    sub_1C1D488DC(&qword_1EF723648, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
    OUTLINED_FUNCTION_349();
    sub_1C20196D4();
    sub_1C1D6E98C(v2, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
    if (v1)
      goto LABEL_10;
  }
  OUTLINED_FUNCTION_316_1();
  if (!v10
    || (type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0),
        sub_1C1D488DC(&qword_1EF7235B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule), OUTLINED_FUNCTION_250_0(), OUTLINED_FUNCTION_177_4(), !v1))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
      || (type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0),
          sub_1C1D488DC(&qword_1EF7235B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule), OUTLINED_FUNCTION_177_4(), !v1))
    {
      sub_1C2019464();
    }
  }
LABEL_10:
  OUTLINED_FUNCTION_2_3();
}

#error "1C1EC22F4: call analysis failed (funcsize=163)"

uint64_t Siri_Nlu_Internal_TurnInputRule.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&unk_1EF72D178, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
}

unint64_t sub_1C1EC23A0()
{
  static Siri_Nlu_Internal_TurnInputRule.protoMessageName.getter();
  return 0xD00000000000001FLL;
}

void sub_1C1EC23C4()
{
  Siri_Nlu_Internal_TurnInputRule.decodeMessage<A>(decoder:)();
}

void sub_1C1EC23D8()
{
  Siri_Nlu_Internal_TurnInputRule.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC23EC()
{
  sub_1C1D488DC(&qword_1EF72D778, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC2440()
{
  sub_1C1D488DC(&qword_1EF723660, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
  return sub_1C2019608();
}

uint64_t sub_1C1EC2484()
{
  sub_1C1D488DC(&qword_1EF723660, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
  return sub_1C2019614();
}

uint64_t sub_1C1EC24D8(uint64_t a1)
{
  return sub_1C1EC2504(a1, 0x747865746E6F432ELL, 0xEC000000656C7552, qword_1EF72CFD8, &qword_1EF72CFD8[1]);
}

uint64_t sub_1C1EC2504(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;

  result = sub_1C201998C();
  *a4 = 0xD00000000000001FLL;
  *a5 = 0x80000001C20513D0;
  return result;
}

void static Siri_Nlu_Internal_TurnInputRule.ContextRule.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF7246B0);
}

uint64_t sub_1C1EC258C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72CFE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72CFE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "turn_context";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "matching_spans";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "apply_to_prompt_scenarios";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "sda_comparison_mode";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.ContextRule._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246B8, (uint64_t)qword_1EF72CFE8, a1);
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EC2814();
          break;
        case 2:
          OUTLINED_FUNCTION_70_9();
          break;
        case 3:
          v3 = OUTLINED_FUNCTION_261_0();
          sub_1C1EC4020(v3, v4, v5, v6, v7);
          break;
        case 4:
          OUTLINED_FUNCTION_56();
          sub_1C1EC28A8();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

uint64_t sub_1C1EC2814()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  type metadata accessor for Siri_Nlu_External_TurnContext(0);
  sub_1C1D488DC(&qword_1ED7A0050, type metadata accessor for Siri_Nlu_External_TurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_TurnContext);
  return sub_1C20195B4();
}

uint64_t sub_1C1EC28A8()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
  sub_1C1EC5070();
  return sub_1C2019518();
}

void Siri_Nlu_Internal_TurnInputRule.ContextRule.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int *v12;

  OUTLINED_FUNCTION_40_2();
  v4 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  v6 = OUTLINED_FUNCTION_240_0();
  type metadata accessor for Siri_Nlu_External_TurnContext(v6);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_111();
  v12 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v8);
  sub_1C1E354A8(v0 + v12[6], v3, &qword_1ED7A0060);
  v9 = OUTLINED_FUNCTION_111_4();
  if (v10)
  {
    OUTLINED_FUNCTION_344_0(v9, &qword_1ED7A0060);
  }
  else
  {
    sub_1C1D4A900(v3, v2, type metadata accessor for Siri_Nlu_External_TurnContext);
    sub_1C1D488DC(&qword_1ED7A0050, type metadata accessor for Siri_Nlu_External_TurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_TurnContext);
    OUTLINED_FUNCTION_349();
    OUTLINED_FUNCTION_241_2();
    sub_1C20196D4();
    v4 = v1;
    sub_1C1D6E98C(v2, type metadata accessor for Siri_Nlu_External_TurnContext);
    if (v1)
      goto LABEL_12;
  }
  OUTLINED_FUNCTION_316_1();
  if (!v11
    || (type metadata accessor for Siri_Nlu_Internal_MatchingSpan(0),
        sub_1C1D488DC(&qword_1EF7234A8, type metadata accessor for Siri_Nlu_Internal_MatchingSpan, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_MatchingSpan), OUTLINED_FUNCTION_250_0(), OUTLINED_FUNCTION_241_2(), sub_1C20196BC(), (v4 = v1) == 0))
  {
    if (*(_BYTE *)(v0 + v12[7]) == 2 || (v1 = v4, sub_1C201962C(), !v4))
    {
      if (*(_BYTE *)(v0 + v12[8]) == 2 || (sub_1C1EC5070(), OUTLINED_FUNCTION_241_2(), sub_1C2019638(), !v1))
        OUTLINED_FUNCTION_281_1();
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_TurnInputRule.ContextRule.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_8();
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_83_2(v10, v56);
  v12 = MEMORY[0x1E0C80A78](v11);
  v20 = OUTLINED_FUNCTION_278_0(v12, v13, v14, v15, v16, v17, v18, v19, v56);
  v21 = type metadata accessor for Siri_Nlu_External_TurnContext(v20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_64();
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724840);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v24);
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_299();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_143_0();
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v56 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = OUTLINED_FUNCTION_333_0();
  v31 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(v30);
  v32 = *(int *)(v31 + 24);
  v59 = v7;
  v33 = v7 + v32;
  v34 = (int *)v31;
  OUTLINED_FUNCTION_128_2(v33, v0);
  v35 = v34[6];
  v60 = v5;
  OUTLINED_FUNCTION_128_2((uint64_t)&v5[v35], (uint64_t)v29);
  v36 = v1 + *(int *)(v23 + 48);
  OUTLINED_FUNCTION_128_2(v0, v1);
  OUTLINED_FUNCTION_128_2((uint64_t)v29, v36);
  OUTLINED_FUNCTION_9(v1, 1, v21);
  if (!v39)
  {
    OUTLINED_FUNCTION_231(v1, v37, &qword_1ED7A0060);
    OUTLINED_FUNCTION_9(v36, 1, v21);
    if (!v39)
    {
      OUTLINED_FUNCTION_199_2(v36);
      static Siri_Nlu_External_TurnContext.== infix(_:_:)();
      v42 = v41;
      OUTLINED_FUNCTION_283_0(v2);
      OUTLINED_FUNCTION_107((uint64_t)v29);
      OUTLINED_FUNCTION_107(v0);
      OUTLINED_FUNCTION_283_0(v3);
      OUTLINED_FUNCTION_107(v1);
      if ((v42 & 1) == 0)
        goto LABEL_19;
      goto LABEL_11;
    }
    OUTLINED_FUNCTION_160_4();
    OUTLINED_FUNCTION_306_1();
    OUTLINED_FUNCTION_378(v40, type metadata accessor for Siri_Nlu_External_TurnContext);
LABEL_9:
    OUTLINED_FUNCTION_71(v38, &qword_1EF724840);
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_39_0((uint64_t)v29);
  OUTLINED_FUNCTION_39_0(v0);
  v38 = OUTLINED_FUNCTION_9(v36, 1, v21);
  if (!v39)
    goto LABEL_9;
  OUTLINED_FUNCTION_71(v38, &qword_1ED7A0060);
LABEL_11:
  v44 = v59;
  v43 = v60;
  sub_1C1D40D44();
  if ((v45 & 1) == 0)
    goto LABEL_19;
  v46 = v34[7];
  v47 = *(unsigned __int8 *)(v44 + v46);
  v48 = v43[v46];
  if (v47 == 2)
  {
    if (v48 != 2)
      goto LABEL_19;
  }
  else
  {
    if (v48 == 2)
      goto LABEL_19;
    OUTLINED_FUNCTION_32();
    if ((v49 & 1) == 0)
      goto LABEL_19;
  }
  v50 = v34[8];
  v51 = *(unsigned __int8 *)(v44 + v50);
  v52 = v43[v50];
  if (v51 == 2)
  {
    if (v52 != 2)
      goto LABEL_19;
LABEL_22:
    v53 = v44 + v34[5];
    v54 = v58;
    v55 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v56, v53, v58);
    OUTLINED_FUNCTION_214_3(v34[5]);
    sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    OUTLINED_FUNCTION_82_3();
    OUTLINED_FUNCTION_84_0();
    ((void (*)(uint64_t, uint64_t))v43)(v55, v54);
    goto LABEL_19;
  }
  if (v52 != 2 && ((v52 ^ v51) & 1) == 0)
    goto LABEL_22;
LABEL_19:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.ContextRule.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&unk_1EF72D180, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void sub_1C1EC2E2C()
{
  Siri_Nlu_Internal_TurnInputRule.ContextRule.decodeMessage<A>(decoder:)();
}

void sub_1C1EC2E40()
{
  Siri_Nlu_Internal_TurnInputRule.ContextRule.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC2E54()
{
  sub_1C1D488DC(&qword_1EF72D770, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC2EA8()
{
  sub_1C1D488DC(&qword_1EF7235B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
  return sub_1C2019608();
}

uint64_t sub_1C1EC2EEC()
{
  sub_1C1D488DC(&qword_1EF7235B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
  return sub_1C2019614();
}

uint64_t sub_1C1EC2F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D000);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D000);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "COMPARISON_MODE_SHALLOW";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "COMPARISON_MODE_DEEP";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246C0, (uint64_t)qword_1EF72D000, a1);
}

uint64_t sub_1C1EC30B0(uint64_t a1)
{
  return sub_1C1EC2504(a1, 0x6E6172657474552ELL, 0xEE00656C75526563, &qword_1EF72D018, &qword_1EF72D020);
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF7246C8);
}

uint64_t sub_1C1EC3100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D028);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D028);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pattern";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "type";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "compare_options";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "spans_for_named_capture_groups";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.UtteranceRule._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246D0, (uint64_t)qword_1EF72D028, a1);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_298_0();
          break;
        case 2:
          v3 = OUTLINED_FUNCTION_41_4();
          sub_1C1EC33A4(v3, v4, v5, v6, v7, (void (*)(void))sub_1C1EC50AC);
          break;
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EC3410();
          break;
        case 4:
          OUTLINED_FUNCTION_144_3();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

void sub_1C1EC33A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(void))
{
  OUTLINED_FUNCTION_180_0(a1, a2, a3, a4, a5);
  a6();
  sub_1C2019518();
  OUTLINED_FUNCTION_26_2();
}

uint64_t sub_1C1EC3410()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  sub_1C1D488DC(&qword_1EF72D188, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  return sub_1C20195B4();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_226();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  v5 = OUTLINED_FUNCTION_240_0();
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(v5);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_111();
  v8 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v7);
  if (!*(_QWORD *)(v0 + v8[6] + 8) || (sub_1C2019698(), !v1))
  {
    if (*(_BYTE *)(v0 + v8[7]) == 3 || (sub_1C1EC50AC(), OUTLINED_FUNCTION_242(), sub_1C2019638(), !v1))
    {
      sub_1C1E354A8(v0 + v8[8], v3, &qword_1EF7235F8);
      v9 = OUTLINED_FUNCTION_111_4();
      if (v10)
      {
        OUTLINED_FUNCTION_344_0(v9, &qword_1EF7235F8);
      }
      else
      {
        OUTLINED_FUNCTION_206_0(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
        OUTLINED_FUNCTION_177_2(&qword_1EF72D188, v11, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
        OUTLINED_FUNCTION_242();
        sub_1C20196D4();
        OUTLINED_FUNCTION_229_0(v2);
        if (v1)
          goto LABEL_12;
      }
      OUTLINED_FUNCTION_316_1();
      if (!v12
        || (type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(0),
            sub_1C1D488DC(&qword_1EF7235D8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans), OUTLINED_FUNCTION_242(), sub_1C20196BC(), !v1))
      {
        OUTLINED_FUNCTION_281_1();
      }
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_8();
  v54 = *(_QWORD *)(v8 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_83_2(v10, v49);
  v12 = MEMORY[0x1E0C80A78](v11);
  v20 = OUTLINED_FUNCTION_278_0(v12, v13, v14, v15, v16, v17, v18, v19, v50);
  v21 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(v20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_23();
  v55 = v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D190);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_138();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v26);
  OUTLINED_FUNCTION_143_0();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_254_0();
  MEMORY[0x1E0C80A78](v28);
  v29 = OUTLINED_FUNCTION_333_0();
  v30 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(v29);
  v31 = v30[6];
  v32 = *(_QWORD *)(v5 + v31 + 8);
  if (!*(_QWORD *)(v7 + v31 + 8))
  {
    v51 = v8;
    if (v32)
      goto LABEL_30;
LABEL_10:
    v36 = v30[7];
    v37 = *(unsigned __int8 *)(v7 + v36);
    v38 = *(unsigned __int8 *)(v5 + v36);
    if (v37 == 3)
    {
      if (v38 != 3)
        goto LABEL_30;
    }
    else if (v38 == 3 || v37 != v38)
    {
      goto LABEL_30;
    }
    OUTLINED_FUNCTION_128_2(v7 + v30[8], v0);
    OUTLINED_FUNCTION_128_2(v5 + v30[8], v1);
    v40 = v2 + *(int *)(v24 + 48);
    OUTLINED_FUNCTION_128_2(v0, v2);
    OUTLINED_FUNCTION_128_2(v1, v40);
    OUTLINED_FUNCTION_9(v2, 1, v21);
    if (v35)
    {
      OUTLINED_FUNCTION_39_0(v1);
      OUTLINED_FUNCTION_39_0(v0);
      v42 = OUTLINED_FUNCTION_9(v40, 1, v21);
      if (v35)
      {
        OUTLINED_FUNCTION_38_1(v42, &qword_1EF7235F8);
LABEL_28:
        sub_1C1D459DC();
        if ((v47 & 1) != 0)
        {
          v48 = *(void (**)(uint64_t, uint64_t))(v54 + 16);
          OUTLINED_FUNCTION_54_2(v52, v7 + v30[5]);
          OUTLINED_FUNCTION_54_2(v53, v5 + v30[5]);
          sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          OUTLINED_FUNCTION_12();
          OUTLINED_FUNCTION_217_1();
          v48(v52, v51);
        }
        goto LABEL_30;
      }
    }
    else
    {
      OUTLINED_FUNCTION_231(v2, v41, &qword_1EF7235F8);
      OUTLINED_FUNCTION_9(v40, 1, v21);
      if (!v43)
      {
        OUTLINED_FUNCTION_308_0(v40);
        static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.== infix(_:_:)();
        v46 = v45;
        OUTLINED_FUNCTION_283_0(v55);
        OUTLINED_FUNCTION_107(v1);
        OUTLINED_FUNCTION_107(v0);
        OUTLINED_FUNCTION_283_0(v3);
        OUTLINED_FUNCTION_107(v2);
        if ((v46 & 1) == 0)
          goto LABEL_30;
        goto LABEL_28;
      }
      OUTLINED_FUNCTION_166(v1);
      OUTLINED_FUNCTION_166(v0);
      OUTLINED_FUNCTION_378(v44, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
    }
    OUTLINED_FUNCTION_38_1(v42, &qword_1EF72D190);
    goto LABEL_30;
  }
  if (v32)
  {
    v51 = v8;
    OUTLINED_FUNCTION_4(v7 + v31);
    v35 = v35 && v33 == v34;
    if (v35 || (OUTLINED_FUNCTION_13() & 1) != 0)
      goto LABEL_10;
  }
LABEL_30:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&unk_1EF72D198, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EC39D0()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.decodeMessage<A>(decoder:)();
}

void sub_1C1EC39E4()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC39F8()
{
  sub_1C1D488DC(&qword_1EF72D768, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC3A4C()
{
  sub_1C1D488DC(&qword_1EF723648, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  return sub_1C2019608();
}

uint64_t sub_1C1EC3A90()
{
  sub_1C1D488DC(&qword_1EF723648, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
  return sub_1C2019614();
}

uint64_t sub_1C1EC3AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D040);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D040);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "COMPARISON_TYPE_UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "COMPARISON_TYPE_EXACT_LITERAL";
  *((_QWORD *)v11 + 1) = 29;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "COMPARISON_TYPE_REGULAR_EXPRESSION";
  *((_QWORD *)v13 + 1) = 34;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246D8, (uint64_t)qword_1EF72D040, a1);
}

uint64_t sub_1C1EC3C88()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EF7246C8 != -1)
    swift_once();
  v1 = qword_1EF72D018;
  v2 = qword_1EF72D020;
  swift_bridgeObjectRetain();
  result = sub_1C201998C();
  qword_1EF72D058 = v1;
  unk_1EF72D060 = v2;
  return result;
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF7246E0);
}

uint64_t sub_1C1EC3D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D068);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D068);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "case_insensitive";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "diacritic_insensitive";
  *((_QWORD *)v11 + 1) = 21;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "width_insensitive";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246E8, (uint64_t)qword_1EF72D068, a1);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          v3 = OUTLINED_FUNCTION_41_4();
          sub_1C1EC4020(v3, v4, v5, v6, v7);
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1EC3FC0();
          break;
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EC3F60();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

uint64_t sub_1C1EC3F60()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return sub_1C2019500();
}

uint64_t sub_1C1EC3FC0()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  return sub_1C2019500();
}

void sub_1C1EC4020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  OUTLINED_FUNCTION_97_1(a1, a2, a3, a4, a5);
  sub_1C2019500();
  OUTLINED_FUNCTION_22_2();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;

  v2 = OUTLINED_FUNCTION_227();
  v3 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(v2);
  if (*(_BYTE *)(v1 + v3[5]) == 2 || (OUTLINED_FUNCTION_578(), !v0))
  {
    if (*(_BYTE *)(v1 + v3[6]) == 2 || (OUTLINED_FUNCTION_578(), !v0))
    {
      if (*(_BYTE *)(v1 + v3[7]) == 2 || (OUTLINED_FUNCTION_578(), !v0))
        OUTLINED_FUNCTION_31_3();
    }
  }
  OUTLINED_FUNCTION_51_1();
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v8);
  v9 = OUTLINED_FUNCTION_158_0();
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(v9);
  OUTLINED_FUNCTION_248_1();
  if (v11)
  {
    if (v10 != 2)
      goto LABEL_20;
  }
  else
  {
    if (v10 == 2)
      goto LABEL_20;
    OUTLINED_FUNCTION_32();
    if ((v12 & 1) == 0)
      goto LABEL_20;
  }
  OUTLINED_FUNCTION_248_1();
  if (v11)
  {
    if (v13 != 2)
      goto LABEL_20;
  }
  else
  {
    if (v13 == 2)
      goto LABEL_20;
    OUTLINED_FUNCTION_32();
    if ((v14 & 1) == 0)
      goto LABEL_20;
  }
  OUTLINED_FUNCTION_248_1();
  if (v11)
  {
    if (v15 != 2)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v15 != 2)
  {
    OUTLINED_FUNCTION_32();
    if ((v16 & 1) != 0)
    {
LABEL_19:
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v17(v1, v5, v6);
      v17(v0, v3, v6);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_285(v0);
      OUTLINED_FUNCTION_285(v1);
    }
  }
LABEL_20:
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&unk_1EF72D1A0, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EC4260()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.decodeMessage<A>(decoder:)();
}

void sub_1C1EC4274()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC4288()
{
  sub_1C1D488DC(&qword_1EF72D760, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC42DC()
{
  sub_1C1D488DC(&qword_1EF72D188, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  return sub_1C2019608();
}

uint64_t sub_1C1EC4320()
{
  sub_1C1D488DC(&qword_1EF72D188, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  return sub_1C2019614();
}

uint64_t sub_1C1EC4374()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EF7246C8 != -1)
    swift_once();
  v1 = qword_1EF72D018;
  v2 = qword_1EF72D020;
  swift_bridgeObjectRetain();
  result = sub_1C201998C();
  qword_1EF72D080 = v1;
  *(_QWORD *)algn_1EF72D088 = v2;
  return result;
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF7246F0);
}

uint64_t sub_1C1EC4428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D090);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D090);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "capture_group_name";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "spans";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF7246F8, (uint64_t)qword_1EF72D090, a1);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 2)
      {
        OUTLINED_FUNCTION_70_9();
      }
      else if (v1 == 1)
      {
        v3 = OUTLINED_FUNCTION_261_0();
        sub_1C1E395F4(v3, v4, v5, v6, v7);
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

void sub_1C1EC461C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_180_0(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_168_3();
  sub_1C20195A8();
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_40_2();
  if (!*(_QWORD *)(v0
                  + *(int *)(type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(0)
                           + 24)
                  + 8)
    || (sub_1C2019698(), !v1))
  {
    OUTLINED_FUNCTION_316_1();
    if (!v2
      || (type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0),
          sub_1C1D488DC(&qword_1EF723628, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup), OUTLINED_FUNCTION_250_0(), sub_1C20196BC(), !v1))
    {
      sub_1C2019464();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;

  OUTLINED_FUNCTION_42_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_158_0();
  v4 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans(v3);
  OUTLINED_FUNCTION_22_3();
  if (!v7)
  {
    if (v5)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (v5)
  {
    OUTLINED_FUNCTION_4(v6);
    v10 = v10 && v8 == v9;
    if (v10 || (OUTLINED_FUNCTION_13() & 1) != 0)
    {
LABEL_10:
      sub_1C1D45C84();
      if ((v11 & 1) != 0)
      {
        OUTLINED_FUNCTION_129_5(*(int *)(v4 + 20));
        OUTLINED_FUNCTION_93_1(*(int *)(v4 + 20));
        sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        OUTLINED_FUNCTION_7_1();
        OUTLINED_FUNCTION_60_3();
        OUTLINED_FUNCTION_216(v0);
      }
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_296_1();
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&unk_1EF72D1A8, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EC4844()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.decodeMessage<A>(decoder:)();
}

void sub_1C1EC4858()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC486C()
{
  sub_1C1D488DC(&qword_1EF72D758, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC48C0()
{
  sub_1C1D488DC(&qword_1EF7235D8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
  return sub_1C2019608();
}

uint64_t sub_1C1EC4904()
{
  sub_1C1D488DC(&qword_1EF7235D8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
  return sub_1C2019614();
}

uint64_t sub_1C1EC4958()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EF7246C8 != -1)
    swift_once();
  v1 = qword_1EF72D018;
  v2 = qword_1EF72D020;
  swift_bridgeObjectRetain();
  result = sub_1C201998C();
  qword_1EF72D0A8 = v1;
  unk_1EF72D0B0 = v2;
  return result;
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724700);
}

uint64_t sub_1C1EC4A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D0B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D0B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "label";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "target_node_idx";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "target_uda_idx";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724708, (uint64_t)qword_1EF72D0B8, a1);
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EC4C90();
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1EC4C30();
          break;
        case 1:
          OUTLINED_FUNCTION_454();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

uint64_t sub_1C1EC4C30()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  return sub_1C2019548();
}

uint64_t sub_1C1EC4C90()
{
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
  return sub_1C2019548();
}

void Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;

  v2 = OUTLINED_FUNCTION_227();
  v3 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(v2);
  if (!*(_QWORD *)(v1 + v3[5] + 8) || (OUTLINED_FUNCTION_183_2(), !v0))
  {
    if ((*(_BYTE *)(v1 + v3[6] + 4) & 1) != 0 || (OUTLINED_FUNCTION_10_10(), !v0))
    {
      if ((*(_BYTE *)(v1 + v3[7] + 4) & 1) != 0 || (OUTLINED_FUNCTION_10_10(), !v0))
        OUTLINED_FUNCTION_31_3();
    }
  }
  OUTLINED_FUNCTION_51_1();
}

void static Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  char v11;
  char v12;
  int v13;
  char v14;
  char v15;

  OUTLINED_FUNCTION_42_3();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_158_0();
  type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(v3);
  OUTLINED_FUNCTION_22_3();
  if (!v6)
  {
    if (v4)
      goto LABEL_16;
LABEL_10:
    OUTLINED_FUNCTION_29_3();
    if ((v11 & 1) != 0)
    {
      if (!v10)
        goto LABEL_16;
    }
    else
    {
      OUTLINED_FUNCTION_3();
      if ((v12 & 1) != 0)
        goto LABEL_16;
    }
    OUTLINED_FUNCTION_29_3();
    if ((v14 & 1) != 0)
    {
      if (!v13)
        goto LABEL_16;
    }
    else
    {
      OUTLINED_FUNCTION_3();
      if ((v15 & 1) != 0)
        goto LABEL_16;
    }
    OUTLINED_FUNCTION_310();
    OUTLINED_FUNCTION_287();
    sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    OUTLINED_FUNCTION_7_1();
    OUTLINED_FUNCTION_60_3();
    OUTLINED_FUNCTION_216(v0);
    goto LABEL_16;
  }
  if (v4)
  {
    OUTLINED_FUNCTION_4(v5);
    v9 = v9 && v7 == v8;
    if (v9 || (OUTLINED_FUNCTION_13() & 1) != 0)
      goto LABEL_10;
  }
LABEL_16:
  OUTLINED_FUNCTION_296_1();
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.hashValue.getter()
{
  return sub_1C1EC4EA0((uint64_t)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&unk_1EF72D1B0, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

uint64_t sub_1C1EC4EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);

  OUTLINED_FUNCTION_285_0();
  sub_1C2019A64();
  v4(0);
  sub_1C1D488DC(v3, v4, a3);
  sub_1C201992C();
  return sub_1C2019A70();
}

void sub_1C1EC4F20()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.decodeMessage<A>(decoder:)();
}

void sub_1C1EC4F34()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.traverse<A>(visitor:)();
}

uint64_t sub_1C1EC4F48()
{
  sub_1C1D488DC(&qword_1EF72D750, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
  return sub_1C20194C4();
}

uint64_t sub_1C1EC4F9C()
{
  sub_1C1D488DC(&qword_1EF723628, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
  return sub_1C2019608();
}

uint64_t sub_1C1EC4FE0()
{
  sub_1C1D488DC(&qword_1EF723628, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
  return sub_1C2019614();
}

unint64_t sub_1C1EC5034()
{
  unint64_t result;

  result = qword_1EF720920;
  if (!qword_1EF720920)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace);
    atomic_store(result, (unint64_t *)&qword_1EF720920);
  }
  return result;
}

unint64_t sub_1C1EC5070()
{
  unint64_t result;

  result = qword_1EF7205E0;
  if (!qword_1EF7205E0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode, &type metadata for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode);
    atomic_store(result, (unint64_t *)&qword_1EF7205E0);
  }
  return result;
}

unint64_t sub_1C1EC50AC()
{
  unint64_t result;

  result = qword_1EF723608;
  if (!qword_1EF723608)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType, &type metadata for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType);
    atomic_store(result, (unint64_t *)&qword_1EF723608);
  }
  return result;
}

unint64_t sub_1C1EC50EC()
{
  unint64_t result;

  result = qword_1EF720930;
  if (!qword_1EF720930)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace);
    atomic_store(result, (unint64_t *)&qword_1EF720930);
  }
  return result;
}

unint64_t sub_1C1EC512C()
{
  unint64_t result;

  result = qword_1EF720928;
  if (!qword_1EF720928)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace);
    atomic_store(result, (unint64_t *)&qword_1EF720928);
  }
  return result;
}

unint64_t sub_1C1EC516C()
{
  unint64_t result;

  result = qword_1EF720938;
  if (!qword_1EF720938)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace);
    atomic_store(result, (unint64_t *)&qword_1EF720938);
  }
  return result;
}

unint64_t sub_1C1EC51AC()
{
  unint64_t result;

  result = qword_1EF72D1B8;
  if (!qword_1EF72D1B8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideSource, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideSource);
    atomic_store(result, (unint64_t *)&qword_1EF72D1B8);
  }
  return result;
}

unint64_t sub_1C1EC51EC()
{
  unint64_t result;

  result = qword_1EF72D1C0;
  if (!qword_1EF72D1C0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideSource, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideSource);
    atomic_store(result, (unint64_t *)&qword_1EF72D1C0);
  }
  return result;
}

unint64_t sub_1C1EC522C()
{
  unint64_t result;

  result = qword_1EF72D1C8;
  if (!qword_1EF72D1C8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideSource, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideSource);
    atomic_store(result, (unint64_t *)&qword_1EF72D1C8);
  }
  return result;
}

void sub_1C1EC5268()
{
  sub_1C1D7F910(&qword_1EF72D1D0, &qword_1EF72D1D8);
}

void sub_1C1EC528C()
{
  sub_1C1D7F910(&qword_1EF72D1E0, &qword_1EF72D1E8);
}

unint64_t sub_1C1EC52B4()
{
  unint64_t result;

  result = qword_1EF720410;
  if (!qword_1EF720410)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode, &type metadata for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode);
    atomic_store(result, (unint64_t *)&qword_1EF720410);
  }
  return result;
}

unint64_t sub_1C1EC52F4()
{
  unint64_t result;

  result = qword_1EF7205E8;
  if (!qword_1EF7205E8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode, &type metadata for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode);
    atomic_store(result, (unint64_t *)&qword_1EF7205E8);
  }
  return result;
}

unint64_t sub_1C1EC5334()
{
  unint64_t result;

  result = qword_1EF7205F0;
  if (!qword_1EF7205F0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode, &type metadata for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode);
    atomic_store(result, (unint64_t *)&qword_1EF7205F0);
  }
  return result;
}

unint64_t sub_1C1EC5374()
{
  unint64_t result;

  result = qword_1EF723618;
  if (!qword_1EF723618)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType, &type metadata for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType);
    atomic_store(result, (unint64_t *)&qword_1EF723618);
  }
  return result;
}

unint64_t sub_1C1EC53B4()
{
  unint64_t result;

  result = qword_1EF723610;
  if (!qword_1EF723610)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType, &type metadata for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType);
    atomic_store(result, (unint64_t *)&qword_1EF723610);
  }
  return result;
}

unint64_t sub_1C1EC53F4()
{
  unint64_t result;

  result = qword_1EF723620;
  if (!qword_1EF723620)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType, &type metadata for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType);
    atomic_store(result, (unint64_t *)&qword_1EF723620);
  }
  return result;
}

void sub_1C1EC5430()
{
  sub_1C1D7F910(&qword_1EF72D1F0, &qword_1EF72D1F8);
}

void sub_1C1EC5454()
{
  sub_1C1D7F910(&qword_1EF72D200, &qword_1EF72D208);
}

void sub_1C1EC5478()
{
  sub_1C1D488DC(&qword_1EF72D210, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
}

void sub_1C1EC54A4()
{
  sub_1C1D488DC(&qword_1EF72D218, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
}

void sub_1C1EC54D0()
{
  sub_1C1D488DC(&qword_1EF72D120, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
}

void sub_1C1EC54FC()
{
  sub_1C1D488DC(&qword_1EF72D220, type metadata accessor for Siri_Nlu_Internal_OverrideMetadata, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata);
}

void sub_1C1EC5528()
{
  sub_1C1D488DC(&qword_1EF720C18, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EC5554()
{
  sub_1C1D488DC(&qword_1EF72D228, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EC5580()
{
  sub_1C1D488DC(&qword_1EF72D128, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EC55AC()
{
  sub_1C1D488DC(&qword_1EF72D230, type metadata accessor for Siri_Nlu_Internal_OverrideCollection, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_OverrideCollection);
}

void sub_1C1EC55D8()
{
  sub_1C1D488DC(&qword_1EF720858, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
}

void sub_1C1EC5604()
{
  sub_1C1D488DC(&qword_1EF720850, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
}

void sub_1C1EC5630()
{
  sub_1C1D488DC(&qword_1EF72D130, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
}

void sub_1C1EC565C()
{
  sub_1C1D488DC(&qword_1EF72D238, type metadata accessor for Siri_Nlu_Internal_ParseOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ParseOverride);
}

void sub_1C1EC5688()
{
  sub_1C1D488DC(&qword_1EF720AB8, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
}

void sub_1C1EC56B4()
{
  sub_1C1D488DC(&qword_1EF720AB0, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
}

void sub_1C1EC56E0()
{
  sub_1C1D488DC(&qword_1EF72D140, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
}

void sub_1C1EC570C()
{
  sub_1C1D488DC(&qword_1EF72D240, type metadata accessor for Siri_Nlu_Internal_ComponentOverride, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride);
}

void sub_1C1EC5738()
{
  sub_1C1D488DC(&qword_1EF720A08, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
}

void sub_1C1EC5764()
{
  sub_1C1D488DC(&qword_1EF720A00, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
}

void sub_1C1EC5790()
{
  sub_1C1D488DC(&qword_1EF72D148, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
}

void sub_1C1EC57BC()
{
  sub_1C1D488DC(&qword_1EF72D248, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
}

void sub_1C1EC57E8()
{
  sub_1C1D488DC(&qword_1EF720958, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EC5814()
{
  sub_1C1D488DC(&qword_1EF720950, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EC5840()
{
  sub_1C1D488DC(&qword_1EF72D150, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EC586C()
{
  sub_1C1D488DC(&qword_1EF72D250, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
}

void sub_1C1EC5898()
{
  sub_1C1D488DC(&qword_1EF72D258, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void sub_1C1EC58C4()
{
  sub_1C1D488DC(&qword_1EF72D260, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void sub_1C1EC58F0()
{
  sub_1C1D488DC(&qword_1EF72D160, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void sub_1C1EC591C()
{
  sub_1C1D488DC(&qword_1EF72D268, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
}

void sub_1C1EC5948()
{
  sub_1C1D488DC(&qword_1EF72D270, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EC5974()
{
  sub_1C1D488DC(&qword_1EF72D278, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EC59A0()
{
  sub_1C1D488DC(&qword_1EF72D168, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EC59CC()
{
  sub_1C1D488DC(&qword_1EF72D280, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
}

void sub_1C1EC59F8()
{
  sub_1C1D488DC(&qword_1EF723B88, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EC5A24()
{
  sub_1C1D488DC(&qword_1EF7210F0, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EC5A50()
{
  sub_1C1D488DC(&qword_1EF72D170, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EC5A7C()
{
  sub_1C1D488DC(&qword_1EF72D288, type metadata accessor for Siri_Nlu_Internal_NluRequestRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NluRequestRule);
}

void sub_1C1EC5AA8()
{
  sub_1C1D488DC(&qword_1EF723668, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
}

void sub_1C1EC5AD4()
{
  sub_1C1D488DC(&qword_1EF723660, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
}

void sub_1C1EC5B00()
{
  sub_1C1D488DC(&qword_1EF72D178, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
}

void sub_1C1EC5B2C()
{
  sub_1C1D488DC(&qword_1EF72D290, type metadata accessor for Siri_Nlu_Internal_TurnInputRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule);
}

void sub_1C1EC5B58()
{
  sub_1C1D488DC(&qword_1EF7235C0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void sub_1C1EC5B84()
{
  sub_1C1D488DC(&qword_1EF7235B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void sub_1C1EC5BB0()
{
  sub_1C1D488DC(&qword_1EF72D180, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void sub_1C1EC5BDC()
{
  sub_1C1D488DC(&qword_1EF72D298, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.ContextRule);
}

void sub_1C1EC5C08()
{
  sub_1C1D488DC(&qword_1EF723650, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EC5C34()
{
  sub_1C1D488DC(&qword_1EF723648, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EC5C60()
{
  sub_1C1D488DC(&qword_1EF72D198, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EC5C8C()
{
  sub_1C1D488DC(&qword_1EF72D2A0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
}

void sub_1C1EC5CB8()
{
  sub_1C1D488DC(&qword_1EF72D2A8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EC5CE4()
{
  sub_1C1D488DC(&qword_1EF72D188, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EC5D10()
{
  sub_1C1D488DC(&qword_1EF72D1A0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EC5D3C()
{
  sub_1C1D488DC(&qword_1EF72D2B0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
}

void sub_1C1EC5D68()
{
  sub_1C1D488DC(&qword_1EF7235E0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EC5D94()
{
  sub_1C1D488DC(&qword_1EF7235D8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EC5DC0()
{
  sub_1C1D488DC(&qword_1EF72D1A8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EC5DEC()
{
  sub_1C1D488DC(&qword_1EF72D2B8, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans);
}

void sub_1C1EC5E18()
{
  sub_1C1D488DC(&qword_1EF723630, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void sub_1C1EC5E44()
{
  sub_1C1D488DC(&qword_1EF723628, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void sub_1C1EC5E70()
{
  sub_1C1D488DC(&qword_1EF72D1B0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void sub_1C1EC5E9C()
{
  sub_1C1D488DC(&qword_1EF72D2C0, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup);
}

void sub_1C1EC5EC8()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_30_1();
  *v0 = Siri_Nlu_Internal_OverrideCollection.creationTimestampMsSinceUnixEpoch.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5EE8()
{
  Siri_Nlu_Internal_OverrideCollection.creationTimestampMsSinceUnixEpoch.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5F08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_OverrideCollection.assetID.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5F2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_OverrideCollection.version.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5F50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ParseOverride.id.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5F74()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ParseOverride.enabled.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5F94(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_ParseOverride.enabled.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5FB0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ParseOverride.creationTimestampMsSinceUnixEpoch.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5FD0()
{
  Siri_Nlu_Internal_ParseOverride.creationTimestampMsSinceUnixEpoch.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC5FF0()
{
  Siri_Nlu_Internal_ParseOverride.parserIdentifier.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6010()
{
  Siri_Nlu_Internal_ParseOverride.parse.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC602C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_UserParse, (void (*)(char *))Siri_Nlu_Internal_ParseOverride.parse.setter);
}

void sub_1C1EC6050()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ParseOverride.nluRequestRules.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6074()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ParseOverride.serializedParse.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6098()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ComponentOverride.id.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC60BC()
{
  Siri_Nlu_Internal_ComponentOverride.overrideNamespace.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC60DC()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  v0 = Siri_Nlu_Internal_ComponentOverride.enabled.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC60FC(unsigned __int8 *a1)
{
  char v1;

  v1 = OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_ComponentOverride.enabled.setter(v1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6118()
{
  uint64_t *v0;

  OUTLINED_FUNCTION_30_1();
  *v0 = Siri_Nlu_Internal_ComponentOverride.creationTimestampMsSinceUnixEpoch.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6138(uint64_t *a1)
{
  Siri_Nlu_Internal_ComponentOverride.creationTimestampMsSinceUnixEpoch.setter(*a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6158(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_ComponentOverride.value.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.value.setter);
}

void sub_1C1EC6198()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ComponentOverride.serializedValue.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC61BC()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.ccqrOverrideTemplate.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC61D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.ccqrOverrideTemplate.setter);
}

void sub_1C1EC61FC()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.userParse.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_UserParse, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.userParse.setter);
}

void sub_1C1EC623C()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.lvcOverrideValue.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.lvcOverrideValue.setter);
}

void sub_1C1EC627C()
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.planOverrideValue.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.planOverrideValue.setter);
}

void sub_1C1EC62BC(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.rewriteMessage.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC62D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_RewriteMessage, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate.rewriteMessage.setter);
}

void sub_1C1EC62FC(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.lvcValue.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_MultilingualVariant, (void (*)(char *))Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue.lvcValue.setter);
}

void sub_1C1EC633C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue.plan.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6360()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_NluRequestRule.id.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6384()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_NluRequestRule.localeID.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC63A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_NluRequestRule.deviceType.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC63CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_NluRequestRule.userInterfaceIdiom.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC63F0(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_TurnInputRule.utteranceRule.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC640C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule, (void (*)(char *))Siri_Nlu_Internal_TurnInputRule.utteranceRule.setter);
}

void sub_1C1EC6430(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_TurnInputRule.ContextRule.turnContext.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC644C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_TurnContext, (void (*)(char *))Siri_Nlu_Internal_TurnInputRule.ContextRule.turnContext.setter);
}

void sub_1C1EC6470()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  v0 = Siri_Nlu_Internal_TurnInputRule.ContextRule.applyToPromptScenarios.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6490(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_TurnInputRule.ContextRule.applyToPromptScenarios.setter(v1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC64B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.pattern.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC64D8()
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.type.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC64F8(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.compareOptions.getter(a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C1EB8140(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions, (void (*)(char *))Siri_Nlu_Internal_TurnInputRule.UtteranceRule.compareOptions.setter);
}

void sub_1C1EC6538()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  v0 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.caseInsensitive.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6558(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.caseInsensitive.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6574()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  v0 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.diacriticInsensitive.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6594(unsigned __int8 *a1)
{
  OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.diacriticInsensitive.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC65B0()
{
  uint64_t v0;

  OUTLINED_FUNCTION_30_1();
  v0 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.widthInsensitive.getter();
  OUTLINED_FUNCTION_350_0(v0);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC65D0(unsigned __int8 *a1)
{
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_347_0(a1);
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions.widthInsensitive.setter(v1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC65EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans.captureGroupName.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6610()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.label.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6634()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_30_1();
  *v0 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetNodeIdx.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6654(int *a1)
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetNodeIdx.setter(*a1);
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6674()
{
  _DWORD *v0;

  OUTLINED_FUNCTION_30_1();
  *v0 = Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetUdaIdx.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EC6694(int *a1)
{
  Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup.targetUdaIdx.setter(*a1);
  OUTLINED_FUNCTION_82();
}

uint64_t initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C201947C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t initializeWithCopy for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_Internal_OverrideMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_OverrideMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC680C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_OverrideMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC6848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_132_0();
  return OUTLINED_FUNCTION_98(v0, v1, v2, v3);
}

uint64_t sub_1C1EC6874()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1C1EC6928 + 4 * byte_1C2041C0A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1C1EC695C + 4 * byte_1C2041C05[v4]))();
}

uint64_t sub_1C1EC695C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EC6964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1EC696CLL);
  return result;
}

uint64_t sub_1C1EC6978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1EC6980);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1C1EC6984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EC698C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Siri_Nlu_Internal_OverrideMetadata.OverrideNamespace()
{
  OUTLINED_FUNCTION_233();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_OverrideMetadata.OverrideSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C1EC69F0 + 4 * byte_1C2041C14[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C1EC6A24 + 4 * byte_1C2041C0F[v4]))();
}

uint64_t sub_1C1EC6A24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EC6A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1EC6A34);
  return result;
}

uint64_t sub_1C1EC6A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1EC6A48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C1EC6A4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EC6A54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Siri_Nlu_Internal_OverrideMetadata.OverrideSource()
{
  OUTLINED_FUNCTION_233();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_OverrideCollection(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = a3[8];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (uint64_t *)((char *)v7 + v14);
    v18 = (uint64_t *)((char *)a2 + v14);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[9];
    v21 = (uint64_t *)((char *)v7 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_OverrideCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_OverrideCollection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C201947C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = a3[8];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (_QWORD *)((char *)a1 + v13);
  v17 = (_QWORD *)((char *)a2 + v13);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_OverrideCollection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Siri_Nlu_Internal_OverrideCollection(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_OverrideCollection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (_QWORD *)((char *)a1 + v11);
  v15 = (_QWORD *)((char *)a2 + v11);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[9];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_OverrideCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EC6F50()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_209();
  if (v1)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_363(*(int *)(v2 + 24));
    OUTLINED_FUNCTION_10_4(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_OverrideCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EC6FA0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_52_2();
  if (v1)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_106_5(*(int *)(v2 + 24));
    OUTLINED_FUNCTION_12_1(v3, v4, v5, v6);
  }
}

uint64_t sub_1C1EC6FE0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ParseOverride()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ParseOverride()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC7090()
{
  return sub_1C1EC8C1C();
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_ComponentOverride(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v7 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *((_BYTE *)v7 + v14) = *((_BYTE *)a2 + v14);
    v18 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    v19[8] = v20[8];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v21 = a3[10];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v12(v22, v23, v11);
      *(_QWORD *)&v22[*(int *)(v24 + 20)] = *(_QWORD *)&v23[*(int *)(v24 + 20)];
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
    }
    v26 = a3[11];
    v27 = (char *)v7 + v26;
    v28 = (char *)a2 + v26;
    v29 = *((_QWORD *)v28 + 1);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v30 = *(_QWORD *)v28;
      sub_1C1D48840(*(_QWORD *)v28, *((_QWORD *)v28 + 1));
      *(_QWORD *)v27 = v30;
      *((_QWORD *)v27 + 1) = v29;
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_ComponentOverride(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_1C201947C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_bridgeObjectRelease();
  v7 = a1 + a2[10];
  v8 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    result = swift_release();
  }
  v10 = (uint64_t *)(a1 + a2[11]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    return sub_1C1D48898(*v10, v11);
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_ComponentOverride(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = a3[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v10(v20, v21, v9);
    *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
    swift_retain();
    __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
  }
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *((_QWORD *)v26 + 1);
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  else
  {
    v28 = *(_QWORD *)v26;
    sub_1C1D48840(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
    *(_QWORD *)v25 = v28;
    *((_QWORD *)v25 + 1) = v27;
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_ComponentOverride(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int EnumTagSinglePayload;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v15 = a3[9];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  v19 = a3[10];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v22);
  v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22);
  if (EnumTagSinglePayload)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
      *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
      swift_retain();
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_1C1D6E98C((uint64_t)v20, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v11(v20, v21, v9);
  *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
  swift_retain();
  swift_release();
LABEL_7:
  v26 = a3[11];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = *(_QWORD *)((char *)a2 + v26 + 8);
  if (*(_QWORD *)((char *)a1 + v26 + 8) >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      v31 = *v28;
      sub_1C1D48840(v31, v29);
      v32 = *v27;
      v33 = v27[1];
      *v27 = v31;
      v27[1] = v29;
      sub_1C1D48898(v32, v33);
      return a1;
    }
    sub_1C1E7151C((uint64_t)v27);
    goto LABEL_12;
  }
  if (v29 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v27 = *(_OWORD *)v28;
    return a1;
  }
  v30 = *v28;
  sub_1C1D48840(v30, v29);
  *v27 = v30;
  v27[1] = v29;
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_Internal_ComponentOverride(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v10(v16, v17, v9);
    *(_QWORD *)&v16[*(int *)(v18 + 20)] = *(_QWORD *)&v17[*(int *)(v18 + 20)];
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_ComponentOverride(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int EnumTagSinglePayload;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  v18 = a3[9];
  v19 = a3[10];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = (char *)a1 + v19;
  v23 = (char *)a2 + v19;
  v24 = type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v24);
  v26 = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24);
  if (EnumTagSinglePayload)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v22, v23, v9);
      *(_QWORD *)&v22[*(int *)(v24 + 20)] = *(_QWORD *)&v23[*(int *)(v24 + 20)];
      __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    sub_1C1D6E98C((uint64_t)v22, type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v11(v22, v23, v9);
  *(_QWORD *)&v22[*(int *)(v24 + 20)] = *(_QWORD *)&v23[*(int *)(v24 + 20)];
  swift_release();
LABEL_7:
  v28 = a3[11];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = *(_QWORD *)((char *)a1 + v28 + 8);
  if (v31 >> 60 != 15)
  {
    v32 = v30[1];
    if (v32 >> 60 != 15)
    {
      v33 = *v29;
      *v29 = *v30;
      v29[1] = v32;
      sub_1C1D48898(v33, v31);
      return a1;
    }
    sub_1C1E7151C((uint64_t)v29);
  }
  *(_OWORD *)v29 = *(_OWORD *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EC7A5C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_209();
  if (v2)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_52_0();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
      v3 = *(int *)(v1 + 40);
    }
    v4 = OUTLINED_FUNCTION_363(v3);
    OUTLINED_FUNCTION_10_4(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EC7ACC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_52_2();
  if (v2)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_53_1();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF720A48);
      v3 = *(int *)(v1 + 40);
    }
    v4 = OUTLINED_FUNCTION_106_5(v3);
    OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
  }
}

void sub_1C1EC7B30()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF720A50, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void _s12SiriNLUTypes31Siri_Nlu_Internal_ParseOverrideVwCP_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  if ((*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
  }
  else
  {
    v6 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_78(v6);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  OUTLINED_FUNCTION_101();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_84Tm(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v7)
  {
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v8, v9, v10, v11);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_101();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v10[*(int *)(v12 + 20)] = v11[*(int *)(v12 + 20)];
      v15 = *(int *)(v12 + 24);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v18;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[*(int *)(v11 + 20)] = v10[*(int *)(v11 + 20)];
    v13 = *(int *)(v11 + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v10[*(int *)(v12 + 20)] = v11[*(int *)(v12 + 20)];
      v20 = *(int *)(v12 + 24);
      v21 = &v10[v20];
      v22 = &v11[v20];
      *v21 = *v22;
      v21[1] = v22[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v10, type metadata accessor for Siri_Nlu_External_RewriteMessage);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  v10[*(int *)(v12 + 20)] = v11[*(int *)(v12 + 20)];
  v15 = *(int *)(v12 + 24);
  v16 = &v10[v15];
  v17 = &v11[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v9[*(int *)(v11 + 20)] = v10[*(int *)(v11 + 20)];
    *(_OWORD *)&v9[*(int *)(v11 + 24)] = *(_OWORD *)&v10[*(int *)(v11 + 24)];
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_RewriteMessage(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v10[*(int *)(v12 + 20)] = v11[*(int *)(v12 + 20)];
      v17 = *(int *)(v12 + 24);
      v18 = &v10[v17];
      v19 = (uint64_t *)&v11[v17];
      v21 = *v19;
      v20 = v19[1];
      *v18 = v21;
      v18[1] = v20;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v10, type metadata accessor for Siri_Nlu_External_RewriteMessage);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7236D0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  v10[*(int *)(v12 + 20)] = v11[*(int *)(v12 + 20)];
  *(_OWORD *)&v10[*(int *)(v12 + 24)] = *(_OWORD *)&v11[*(int *)(v12 + 24)];
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC835C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_89Tm(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC8374(uint64_t a1, uint64_t a2, int a3)
{
  return __swift_store_extra_inhabitant_index_90Tm(a1, a2, a3);
}

void sub_1C1EC8380()
{
  sub_1C1EC8B7C();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v15 = *(int *)(v12 + 20);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v18;
      v19 = *(int *)(v12 + 24);
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = *(int *)(v11 + 24);
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v24 = *(int *)(v12 + 20);
      v25 = &v10[v24];
      v26 = &v11[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27 = *(int *)(v12 + 24);
      v28 = &v10[v27];
      v29 = &v11[v27];
      v30 = *(_QWORD *)v29;
      v28[8] = v29[8];
      *(_QWORD *)v28 = v30;
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v10, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v15 = *(int *)(v12 + 20);
  v16 = &v10[v15];
  v17 = &v11[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v18 = *(int *)(v12 + 24);
  v19 = &v10[v18];
  v20 = &v11[v18];
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v21;
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    *(_OWORD *)&v9[*(int *)(v11 + 20)] = *(_OWORD *)&v10[*(int *)(v11 + 20)];
    v13 = *(int *)(v11 + 24);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v14[8] = v15[8];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_MultilingualVariant(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v20 = *(int *)(v12 + 20);
      v21 = &v10[v20];
      v22 = &v11[v20];
      v24 = *(_QWORD *)v22;
      v23 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = v24;
      *((_QWORD *)v21 + 1) = v23;
      swift_bridgeObjectRelease();
      v25 = *(int *)(v12 + 24);
      v26 = &v10[v25];
      v27 = &v11[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v10, type metadata accessor for Siri_Nlu_External_MultilingualVariant);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72D118);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
  v15 = *(int *)(v12 + 24);
  v16 = &v10[v15];
  v17 = &v11[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC8A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_89Tm(a1, a2, a3);
}

uint64_t __swift_get_extra_inhabitant_index_89Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_52_0();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    v8 = OUTLINED_FUNCTION_299();
    v9 = a1 + *(int *)(a3 + 20);
  }
  return OUTLINED_FUNCTION_10_4(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC8AEC(uint64_t a1, uint64_t a2, int a3)
{
  return __swift_store_extra_inhabitant_index_90Tm(a1, a2, a3);
}

uint64_t __swift_store_extra_inhabitant_index_90Tm(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_8() - 8) + 84) != a3)
    OUTLINED_FUNCTION_299();
  OUTLINED_FUNCTION_132_0();
  return __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
}

void sub_1C1EC8B68()
{
  sub_1C1EC8B7C();
}

void sub_1C1EC8B7C()
{
  void (*v0)(uint64_t);
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_100_2();
  if (v2 <= 0x3F)
  {
    sub_1C1D4D44C(319, v1, v0);
    if (v3 <= 0x3F)
    {
      OUTLINED_FUNCTION_418();
      OUTLINED_FUNCTION_466();
    }
  }
  OUTLINED_FUNCTION_631();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC8C10()
{
  return sub_1C1EC8C1C();
}

uint64_t sub_1C1EC8C1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_418();
    OUTLINED_FUNCTION_466();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_NluRequestRule(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v7 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = a3[9];
    v23 = (uint64_t *)((char *)v7 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (uint64_t *)((char *)v7 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_NluRequestRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_NluRequestRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[8];
  v20 = a3[9];
  v21 = (_QWORD *)((char *)a1 + v19);
  v22 = (_QWORD *)((char *)a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_QWORD *)((char *)a1 + v20);
  v25 = (_QWORD *)((char *)a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_NluRequestRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_Internal_NluRequestRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_NluRequestRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_NluRequestRule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_NluRequestRule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EC91B4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_TurnInputRule(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, (uint64_t)v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v18 = v16[5];
      v19 = (char *)v14 + v18;
      v20 = (char *)v15 + v18;
      swift_bridgeObjectRetain();
      v12(v19, v20, v11);
      v21 = v16[6];
      v22 = (_QWORD *)((char *)v14 + v21);
      v23 = (_QWORD *)((char *)v15 + v21);
      v24 = v23[1];
      *v22 = *v23;
      v22[1] = v24;
      *((_BYTE *)v14 + v16[7]) = *((_BYTE *)v15 + v16[7]);
      v25 = v16[8];
      v26 = (char *)v14 + v25;
      v27 = (char *)v15 + v25;
      v28 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, (uint64_t)v28))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v12(v26, v27, v11);
        v26[v28[5]] = v27[v28[5]];
        v26[v28[6]] = v27[v28[6]];
        v26[v28[7]] = v27[v28[7]];
        __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, (uint64_t)v28);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, (uint64_t)v16);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_TurnInputRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1C201947C();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 20), v5);
    swift_bridgeObjectRelease();
    v9 = v6 + *(int *)(v7 + 32);
    v10 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    result = __swift_getEnumTagSinglePayload(v9, 1, v10);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  }
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_TurnInputRule(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C201947C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v17 = v15[5];
    v18 = (char *)v13 + v17;
    v19 = (char *)v14 + v17;
    swift_bridgeObjectRetain();
    v11(v18, v19, v10);
    v20 = v15[6];
    v21 = (_QWORD *)((char *)v13 + v20);
    v22 = (_QWORD *)((char *)v14 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *((_BYTE *)v13 + v15[7]) = *((_BYTE *)v14 + v15[7]);
    v24 = v15[8];
    v25 = (char *)v13 + v24;
    v26 = (char *)v14 + v24;
    v27 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, (uint64_t)v27))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v11(v25, v26, v10);
      v25[v27[5]] = v26[v27[5]];
      v25[v27[6]] = v26[v27[6]];
      v25[v27[7]] = v26[v27[7]];
      __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, (uint64_t)v27);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_TurnInputRule(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  int EnumTagSinglePayload;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v15);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v15);
  if ((_DWORD)v8)
  {
    if (!EnumTagSinglePayload)
    {
      *v13 = *v14;
      v17 = v15[5];
      v18 = (char *)v13 + v17;
      v19 = (char *)v14 + v17;
      v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      swift_bridgeObjectRetain();
      v20(v18, v19, v9);
      v21 = v15[6];
      v22 = (_QWORD *)((char *)v13 + v21);
      v23 = (_QWORD *)((char *)v14 + v21);
      *v22 = *v23;
      v22[1] = v23[1];
      *((_BYTE *)v13 + v15[7]) = *((_BYTE *)v14 + v15[7]);
      v24 = v15[8];
      v25 = (char *)v13 + v24;
      v26 = (char *)v14 + v24;
      v27 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, (uint64_t)v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v20(v25, v26, v9);
        v25[v27[5]] = v26[v27[5]];
        v25[v27[6]] = v26[v27[6]];
        v25[v27[7]] = v26[v27[7]];
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, (uint64_t)v27);
      }
      v41 = (uint64_t)v13;
      v42 = (uint64_t)v15;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (EnumTagSinglePayload)
  {
    sub_1C1D6E98C((uint64_t)v13, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388) - 8) + 64);
    v30 = v13;
    v31 = v14;
    goto LABEL_8;
  }
  *v13 = *v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11((char *)v13 + v15[5], (char *)v14 + v15[5], v9);
  v32 = v15[6];
  v33 = (_QWORD *)((char *)v13 + v32);
  v34 = (_QWORD *)((char *)v14 + v32);
  *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v13 + v15[7]) = *((_BYTE *)v14 + v15[7]);
  v35 = v15[8];
  v36 = (uint64_t)v13 + v35;
  v37 = (uint64_t)v14 + v35;
  v38 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v39 = __swift_getEnumTagSinglePayload(v36, 1, (uint64_t)v38);
  v40 = __swift_getEnumTagSinglePayload(v37, 1, (uint64_t)v38);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v36, v37, v9);
      *(_BYTE *)(v36 + v38[5]) = *(_BYTE *)(v37 + v38[5]);
      *(_BYTE *)(v36 + v38[6]) = *(_BYTE *)(v37 + v38[6]);
      *(_BYTE *)(v36 + v38[7]) = *(_BYTE *)(v37 + v38[7]);
      v41 = v36;
      v42 = (uint64_t)v38;
LABEL_14:
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v42);
      return a1;
    }
  }
  else
  {
    if (!v40)
    {
      v11((char *)v36, (char *)v37, v9);
      *(_BYTE *)(v36 + v38[5]) = *(_BYTE *)(v37 + v38[5]);
      *(_BYTE *)(v36 + v38[6]) = *(_BYTE *)(v37 + v38[6]);
      *(_BYTE *)(v36 + v38[7]) = *(_BYTE *)(v37 + v38[7]);
      return a1;
    }
    sub_1C1D6E98C(v36, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  }
  v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8) - 8) + 64);
  v30 = (void *)v36;
  v31 = (const void *)v37;
LABEL_8:
  memcpy(v30, v31, v29);
  return a1;
}

_OWORD *initializeWithTake for Siri_Nlu_Internal_TurnInputRule(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    *(_OWORD *)((char *)v12 + v14[6]) = *(_OWORD *)((char *)v13 + v14[6]);
    *((_BYTE *)v12 + v14[7]) = *((_BYTE *)v13 + v14[7]);
    v16 = v14[8];
    v17 = (char *)v12 + v16;
    v18 = (char *)v13 + v16;
    v19 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, (uint64_t)v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v10(v17, v18, v9);
      v17[v19[5]] = v18[v19[5]];
      v17[v19[6]] = v18[v19[6]];
      v17[v19[7]] = v18[v19[7]];
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, (uint64_t)v19);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, (uint64_t)v14);
  }
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_TurnInputRule(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  int EnumTagSinglePayload;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, (uint64_t)v15);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v15);
  if ((_DWORD)v8)
  {
    if (!EnumTagSinglePayload)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v17 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v17(&v13[v15[5]], &v14[v15[5]], v9);
      *(_OWORD *)&v13[v15[6]] = *(_OWORD *)&v14[v15[6]];
      v13[v15[7]] = v14[v15[7]];
      v18 = v15[8];
      v19 = &v13[v18];
      v20 = &v14[v18];
      v21 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, (uint64_t)v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v17(v19, v20, v9);
        v19[v21[5]] = v20[v21[5]];
        v19[v21[6]] = v20[v21[6]];
        v19[v21[7]] = v20[v21[7]];
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, (uint64_t)v21);
      }
      v37 = (uint64_t)v13;
      v38 = (uint64_t)v15;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (EnumTagSinglePayload)
  {
    sub_1C1D6E98C((uint64_t)v13, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
LABEL_7:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388) - 8) + 64);
    v24 = v13;
    v25 = v14;
    goto LABEL_8;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  swift_bridgeObjectRelease();
  v11(&v13[v15[5]], &v14[v15[5]], v9);
  v26 = v15[6];
  v27 = &v13[v26];
  v28 = (uint64_t *)&v14[v26];
  v30 = *v28;
  v29 = v28[1];
  *(_QWORD *)v27 = v30;
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRelease();
  v13[v15[7]] = v14[v15[7]];
  v31 = v15[8];
  v32 = (uint64_t)&v13[v31];
  v33 = (uint64_t)&v14[v31];
  v34 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  v35 = __swift_getEnumTagSinglePayload(v32, 1, (uint64_t)v34);
  v36 = __swift_getEnumTagSinglePayload(v33, 1, (uint64_t)v34);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v32, v33, v9);
      *(_BYTE *)(v32 + v34[5]) = *(_BYTE *)(v33 + v34[5]);
      *(_BYTE *)(v32 + v34[6]) = *(_BYTE *)(v33 + v34[6]);
      *(_BYTE *)(v32 + v34[7]) = *(_BYTE *)(v33 + v34[7]);
      v37 = v32;
      v38 = (uint64_t)v34;
LABEL_14:
      __swift_storeEnumTagSinglePayload(v37, 0, 1, v38);
      return a1;
    }
  }
  else
  {
    if (!v36)
    {
      v11((char *)v32, (char *)v33, v9);
      *(_BYTE *)(v32 + v34[5]) = *(_BYTE *)(v33 + v34[5]);
      *(_BYTE *)(v32 + v34[6]) = *(_BYTE *)(v33 + v34[6]);
      *(_BYTE *)(v32 + v34[7]) = *(_BYTE *)(v33 + v34[7]);
      return a1;
    }
    sub_1C1D6E98C(v32, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8) - 8) + 64);
  v24 = (void *)v32;
  v25 = (const void *)v33;
LABEL_8:
  memcpy(v24, v25, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EC9FA0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_209();
  if (v2)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_52_0();
    if (v2)
    {
      v3 = *(int *)(v1 + 24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
      v3 = *(int *)(v1 + 28);
    }
    v4 = OUTLINED_FUNCTION_363(v3);
    OUTLINED_FUNCTION_10_4(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ECA010()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_52_2();
  if (v2)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_53_1();
    if (v2)
    {
      v3 = *(int *)(v1 + 24);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF721388);
      v3 = *(int *)(v1 + 28);
    }
    v4 = OUTLINED_FUNCTION_106_5(v3);
    OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
  }
}

void sub_1C1ECA074()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF723658, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_TurnInputRule.ContextRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v18 = *(int *)(v16 + 20);
      v66 = v11;
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = type metadata accessor for Siri_Nlu_External_NLContext(0);
      v67 = v12;
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEB0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v61 = v16;
        v64 = v14;
        v23 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v23;
        v24 = *((_QWORD *)v20 + 3);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
        *((_QWORD *)v19 + 3) = v24;
        v25 = *(int *)(v21 + 32);
        v62 = &v19[v25];
        v59 = &v20[v25];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v62, v59, v66);
        v60 = v21;
        v26 = *(int *)(v21 + 36);
        v63 = v19;
        v27 = &v19[v26];
        v28 = &v20[v26];
        v29 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
          v31 = (uint64_t)v19;
          v14 = v64;
          v32 = v60;
          v16 = v61;
        }
        else
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          v33 = *(int *)(v29 + 20);
          v34 = &v27[v33];
          v57 = &v28[v33];
          swift_bridgeObjectRetain();
          v35 = v34;
          v36 = (uint64_t)v27;
          v67(v35, v57, v66);
          v58 = v29;
          v37 = *(int *)(v29 + 24);
          v38 = &v27[v37];
          v39 = &v28[v37];
          v40 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v39, 1, v40))
          {
            v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
            memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
          }
          else
          {
            v67(v38, v39, v66);
            *(_QWORD *)&v38[*(int *)(v40 + 20)] = *(_QWORD *)&v39[*(int *)(v40 + 20)];
            swift_retain();
            __swift_storeEnumTagSinglePayload((uint64_t)v38, 0, 1, v40);
          }
          v31 = (uint64_t)v63;
          v14 = v64;
          v32 = v60;
          v16 = v61;
          __swift_storeEnumTagSinglePayload(v36, 0, 1, v58);
        }
        __swift_storeEnumTagSinglePayload(v31, 0, 1, v32);
      }
      v42 = *(int *)(v16 + 24);
      v43 = &v14[v42];
      v44 = &v15[v42];
      v45 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, (uint64_t)v45))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v65 = v14;
        v47 = *((_QWORD *)v44 + 1);
        *(_QWORD *)v43 = *(_QWORD *)v44;
        *((_QWORD *)v43 + 1) = v47;
        v48 = v45[6];
        v49 = &v43[v48];
        v50 = &v44[v48];
        swift_bridgeObjectRetain();
        v14 = v65;
        swift_bridgeObjectRetain();
        v67(v49, v50, v66);
        v43[v45[7]] = v44[v45[7]];
        v43[v45[8]] = v44[v45[8]];
        v51 = v45[9];
        v52 = &v43[v51];
        v53 = &v44[v51];
        v54 = *((_QWORD *)v53 + 1);
        *(_QWORD *)v52 = *(_QWORD *)v53;
        *((_QWORD *)v52 + 1) = v54;
        v43[v45[10]] = v44[v45[10]];
        v43[v45[11]] = v44[v45[11]];
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, (uint64_t)v45);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    v55 = a3[8];
    *((_BYTE *)v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v7 + v55) = *((_BYTE *)a2 + v55);
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_TurnInputRule.ContextRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C201947C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
  result = __swift_getEnumTagSinglePayload(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    v10 = v7 + *(int *)(v8 + 20);
    v11 = type metadata accessor for Siri_Nlu_External_NLContext(0);
    if (!__swift_getEnumTagSinglePayload(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6(v10 + *(int *)(v11 + 32), v5);
      v12 = v10 + *(int *)(v11 + 36);
      v13 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
      if (!__swift_getEnumTagSinglePayload(v12, 1, v13))
      {
        swift_bridgeObjectRelease();
        v6(v12 + *(int *)(v13 + 20), v5);
        v14 = v12 + *(int *)(v13 + 24);
        v15 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
        if (!__swift_getEnumTagSinglePayload(v14, 1, v15))
        {
          v6(v14, v5);
          swift_release();
        }
      }
    }
    v16 = v7 + *(int *)(v8 + 24);
    v17 = type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
    result = __swift_getEnumTagSinglePayload(v16, 1, v17);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6(v16 + *(int *)(v17 + 24), v5);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_TurnInputRule.ContextRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v16 = *(int *)(v14 + 20);
    v64 = v9;
    v17 = &v12[v16];
    v18 = &v13[v16];
    v19 = type metadata accessor for Siri_Nlu_External_NLContext(0);
    v65 = v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEB0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v57 = v14;
      v62 = v12;
      v21 = *((_QWORD *)v18 + 1);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = v21;
      v22 = *((_QWORD *)v18 + 3);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
      *((_QWORD *)v17 + 3) = v22;
      v23 = *(int *)(v19 + 32);
      v58 = &v18[v23];
      v60 = &v17[v23];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10(v60, v58, v64);
      v59 = v19;
      v61 = v17;
      v24 = *(int *)(v19 + 36);
      v25 = &v17[v24];
      v26 = &v18[v24];
      v27 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v29 = (uint64_t)v17;
        v12 = v62;
        v14 = v57;
        v30 = v59;
      }
      else
      {
        *(_QWORD *)v25 = *(_QWORD *)v26;
        v31 = *(int *)(v27 + 20);
        v32 = &v25[v31];
        v55 = &v26[v31];
        swift_bridgeObjectRetain();
        v33 = v32;
        v34 = (uint64_t)v25;
        v65(v33, v55, v64);
        v56 = v27;
        v35 = *(int *)(v27 + 24);
        v36 = &v25[v35];
        v37 = &v26[v35];
        v38 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          v65(v36, v37, v64);
          *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
          swift_retain();
          __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
        }
        v29 = (uint64_t)v61;
        v12 = v62;
        v14 = v57;
        v30 = v59;
        __swift_storeEnumTagSinglePayload(v34, 0, 1, v56);
      }
      __swift_storeEnumTagSinglePayload(v29, 0, 1, v30);
    }
    v40 = *(int *)(v14 + 24);
    v41 = &v12[v40];
    v42 = &v13[v40];
    v43 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, (uint64_t)v43))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v63 = v12;
      v45 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v45;
      v46 = v43[6];
      v47 = &v41[v46];
      v48 = &v42[v46];
      swift_bridgeObjectRetain();
      v12 = v63;
      swift_bridgeObjectRetain();
      v65(v47, v48, v64);
      v41[v43[7]] = v42[v43[7]];
      v41[v43[8]] = v42[v43[8]];
      v49 = v43[9];
      v50 = &v41[v49];
      v51 = &v42[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      v41[v43[10]] = v42[v43[10]];
      v41[v43[11]] = v42[v43[11]];
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, (uint64_t)v43);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  v53 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v53) = *((_BYTE *)a2 + v53);
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_TurnInputRule.ContextRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  int v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  size_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  int *v96;
  int v97;
  int v98;
  uint64_t v99;
  char *v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  int v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  void *v125;
  char *__dstb;
  _QWORD *__dst;
  char *__dstc;
  void (*__dsta)(char *, char *, uint64_t);
  char *__dstd;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void (*v134)(char *, char *, uint64_t);
  _QWORD *v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  int *__src;
  void *__srca;
  void *__srcb;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int *v144;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v13, 1, v15);
  v17 = __swift_getEnumTagSinglePayload(v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v18(v13, v14, v9);
      __src = (int *)v15;
      v19 = *(int *)(v15 + 20);
      v20 = (_QWORD *)(v13 + v19);
      v21 = v9;
      v22 = (_QWORD *)(v14 + v19);
      v23 = type metadata accessor for Siri_Nlu_External_NLContext(0);
      v141 = v21;
      v143 = a3;
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEB0);
        memcpy(v20, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = __src;
      }
      else
      {
        *v20 = *v22;
        v20[1] = v22[1];
        v132 = v23;
        v136 = v18;
        v20[2] = v22[2];
        v20[3] = v22[3];
        v37 = *(int *)(v23 + 32);
        v120 = (char *)v22 + v37;
        __dstb = (char *)v20 + v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38 = v23;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18((uint64_t)__dstb, (uint64_t)v120, v21);
        v39 = *(int *)(v23 + 36);
        __dst = (_QWORD *)((char *)v20 + v39);
        v40 = (_QWORD *)((char *)v22 + v39);
        v41 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
          memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
          v25 = __src;
        }
        else
        {
          *__dst = *v40;
          v53 = *(int *)(v41 + 20);
          v54 = (char *)__dst + v53;
          v122 = (char *)v40 + v53;
          swift_bridgeObjectRetain();
          v55 = v54;
          v18 = v136;
          v136((uint64_t)v55, (uint64_t)v122, v21);
          v56 = *(int *)(v41 + 24);
          v123 = (char *)__dst + v56;
          v57 = (char *)v40 + v56;
          v117 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v57, 1, v117))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
            memcpy(v123, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            v136((uint64_t)v123, (uint64_t)v57, v21);
            *(_QWORD *)&v123[*(int *)(v117 + 20)] = *(_QWORD *)&v57[*(int *)(v117 + 20)];
            swift_retain();
            __swift_storeEnumTagSinglePayload((uint64_t)v123, 0, 1, v117);
          }
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v41);
          v25 = __src;
          v38 = v132;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v38);
      }
      v69 = v25[6];
      v70 = (_QWORD *)(v13 + v69);
      v71 = (_QWORD *)(v14 + v69);
      v72 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v71, 1, (uint64_t)v72))
      {
        v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        *v70 = *v71;
        v70[1] = v71[1];
        v74 = v72[6];
        v75 = (char *)v70 + v74;
        v76 = (char *)v71 + v74;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18((uint64_t)v75, (uint64_t)v76, v141);
        *((_BYTE *)v70 + v72[7]) = *((_BYTE *)v71 + v72[7]);
        *((_BYTE *)v70 + v72[8]) = *((_BYTE *)v71 + v72[8]);
        v77 = v72[9];
        v78 = (_QWORD *)((char *)v70 + v77);
        v79 = (_QWORD *)((char *)v71 + v77);
        *v78 = *v79;
        v78[1] = v79[1];
        *((_BYTE *)v70 + v72[10]) = *((_BYTE *)v71 + v72[10]);
        *((_BYTE *)v70 + v72[11]) = *((_BYTE *)v71 + v72[11]);
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v70, 0, 1, (uint64_t)v72);
      }
      a3 = v143;
      v80 = v13;
      v81 = (uint64_t)v25;
      goto LABEL_36;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    sub_1C1D6E98C(v13, type metadata accessor for Siri_Nlu_External_TurnContext);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060) - 8) + 64);
    v27 = (void *)v13;
    v28 = (const void *)v14;
    goto LABEL_8;
  }
  v142 = v9;
  v144 = a3;
  v11((char *)v13, (char *)v14, v9);
  v29 = *(int *)(v15 + 20);
  v30 = v13 + v29;
  v31 = (char *)(v14 + v29);
  v32 = type metadata accessor for Siri_Nlu_External_NLContext(0);
  v135 = (_QWORD *)v30;
  LODWORD(v30) = __swift_getEnumTagSinglePayload(v30, 1, v32);
  v131 = v32;
  v33 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32);
  if (!(_DWORD)v30)
  {
    if (v33)
    {
      v43 = v135;
      sub_1C1D6E98C((uint64_t)v135, type metadata accessor for Siri_Nlu_External_NLContext);
      v44 = &qword_1ED79FEB0;
    }
    else
    {
      *v135 = *(_QWORD *)v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v135[1] = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v135[2] = *((_QWORD *)v31 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v135[3] = *((_QWORD *)v31 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11((char *)v135 + *(int *)(v32 + 32), &v31[*(int *)(v32 + 32)], v142);
      v59 = *(int *)(v32 + 36);
      v60 = (uint64_t)v135 + v59;
      v31 += v59;
      v61 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
      v135 = (_QWORD *)v60;
      LODWORD(v60) = __swift_getEnumTagSinglePayload(v60, 1, v61);
      v62 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v61);
      if ((_DWORD)v60)
      {
        if (!v62)
        {
          __srcb = (void *)v15;
          *v135 = *(_QWORD *)v31;
          v83 = *(int *)(v61 + 20);
          __dstd = &v31[v83];
          v133 = (char *)v135 + v83;
          v84 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
          swift_bridgeObjectRetain();
          v85 = v133;
          v134 = v84;
          v84(v85, __dstd, v142);
          v86 = *(int *)(v61 + 24);
          v87 = (char *)v135 + v86;
          v88 = &v31[v86];
          v89 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
          if (__swift_getEnumTagSinglePayload((uint64_t)v88, 1, v89))
          {
            v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
            memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
          }
          else
          {
            v134(v87, v88, v142);
            *(_QWORD *)&v87[*(int *)(v89 + 20)] = *(_QWORD *)&v88[*(int *)(v89 + 20)];
            swift_retain();
            __swift_storeEnumTagSinglePayload((uint64_t)v87, 0, 1, v89);
          }
          v15 = (uint64_t)__srcb;
          __swift_storeEnumTagSinglePayload((uint64_t)v135, 0, 1, v61);
          goto LABEL_19;
        }
        v34 = &qword_1ED7A05A8;
        goto LABEL_12;
      }
      if (!v62)
      {
        *v135 = *(_QWORD *)v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11((char *)v135 + *(int *)(v61 + 20), &v31[*(int *)(v61 + 20)], v142);
        v110 = *(int *)(v61 + 24);
        v111 = (uint64_t)v135 + v110;
        v112 = &v31[v110];
        v113 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
        v137 = v111;
        LODWORD(v111) = __swift_getEnumTagSinglePayload(v111, 1, v113);
        v114 = __swift_getEnumTagSinglePayload((uint64_t)v112, 1, v113);
        if ((_DWORD)v111)
        {
          a3 = v144;
          if (!v114)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v137, v112, v142);
            *(_QWORD *)(v137 + *(int *)(v113 + 20)) = *(_QWORD *)&v112[*(int *)(v113 + 20)];
            swift_retain();
            v91 = v137;
            v92 = v113;
LABEL_45:
            __swift_storeEnumTagSinglePayload(v91, 0, 1, v92);
            goto LABEL_46;
          }
          v115 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990) - 8) + 64);
          v116 = (void *)v137;
        }
        else
        {
          a3 = v144;
          if (!v114)
          {
            v11((char *)v137, v112, v142);
            *(_QWORD *)(v137 + *(int *)(v113 + 20)) = *(_QWORD *)&v112[*(int *)(v113 + 20)];
            swift_retain();
            a3 = v144;
            swift_release();
            goto LABEL_46;
          }
          sub_1C1D6E98C(v137, type metadata accessor for Siri_Nlu_External_SystemDialogAct);
          v115 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990) - 8) + 64);
          v116 = (void *)v137;
        }
        memcpy(v116, v112, v115);
        goto LABEL_46;
      }
      v43 = v135;
      sub_1C1D6E98C((uint64_t)v135, type metadata accessor for Siri_Nlu_External_SystemDialogActGroup);
      v44 = &qword_1ED7A05A8;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v44) - 8) + 64);
    v36 = v43;
    goto LABEL_18;
  }
  if (!v33)
  {
    __srca = (void *)v15;
    *v135 = *(_QWORD *)v31;
    v135[1] = *((_QWORD *)v31 + 1);
    v135[2] = *((_QWORD *)v31 + 2);
    v135[3] = *((_QWORD *)v31 + 3);
    v45 = *(int *)(v32 + 32);
    v121 = &v31[v45];
    __dstc = (char *)v135 + v45;
    v46 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = __dstc;
    __dsta = v46;
    v46(v47, v121, v142);
    v48 = *(int *)(v131 + 36);
    v49 = (_QWORD *)((char *)v135 + v48);
    v50 = &v31[v48];
    v51 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      a3 = v144;
      v15 = (uint64_t)__srca;
    }
    else
    {
      *v49 = *(_QWORD *)v50;
      v63 = *(int *)(v51 + 20);
      v118 = &v50[v63];
      v124 = (char *)v49 + v63;
      swift_bridgeObjectRetain();
      __dsta(v124, v118, v142);
      v119 = (uint64_t)v49;
      v125 = (void *)v51;
      v64 = *(int *)(v51 + 24);
      v65 = (char *)v49 + v64;
      v66 = &v50[v64];
      v67 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v66, 1, v67))
      {
        v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
        memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        __dsta(v65, v66, v142);
        *(_QWORD *)&v65[*(int *)(v67 + 20)] = *(_QWORD *)&v66[*(int *)(v67 + 20)];
        swift_retain();
        __swift_storeEnumTagSinglePayload((uint64_t)v65, 0, 1, v67);
      }
      a3 = v144;
      v15 = (uint64_t)__srca;
      __swift_storeEnumTagSinglePayload(v119, 0, 1, (uint64_t)v125);
    }
    v92 = v131;
    v91 = (uint64_t)v135;
    goto LABEL_45;
  }
  v34 = &qword_1ED79FEB0;
LABEL_12:
  v35 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v34) - 8) + 64);
  v36 = v135;
LABEL_18:
  memcpy(v36, v31, v35);
LABEL_19:
  a3 = v144;
LABEL_46:
  v93 = *(int *)(v15 + 24);
  v94 = (_QWORD *)(v13 + v93);
  v95 = (_QWORD *)(v14 + v93);
  v96 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
  v97 = __swift_getEnumTagSinglePayload((uint64_t)v94, 1, (uint64_t)v96);
  v98 = __swift_getEnumTagSinglePayload((uint64_t)v95, 1, (uint64_t)v96);
  if (v97)
  {
    if (!v98)
    {
      *v94 = *v95;
      v94[1] = v95[1];
      v99 = v96[6];
      v100 = (char *)v94 + v99;
      v101 = (char *)v95 + v99;
      v102 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v103 = v100;
      a3 = v144;
      v102(v103, v101, v142);
      *((_BYTE *)v94 + v96[7]) = *((_BYTE *)v95 + v96[7]);
      *((_BYTE *)v94 + v96[8]) = *((_BYTE *)v95 + v96[8]);
      v104 = v96[9];
      v105 = (_QWORD *)((char *)v94 + v104);
      v106 = (_QWORD *)((char *)v95 + v104);
      *v105 = *v106;
      v105[1] = v106[1];
      *((_BYTE *)v94 + v96[10]) = *((_BYTE *)v95 + v96[10]);
      *((_BYTE *)v94 + v96[11]) = *((_BYTE *)v95 + v96[11]);
      swift_bridgeObjectRetain();
      v80 = (uint64_t)v94;
      v81 = (uint64_t)v96;
LABEL_36:
      __swift_storeEnumTagSinglePayload(v80, 0, 1, v81);
      goto LABEL_37;
    }
  }
  else
  {
    if (!v98)
    {
      *v94 = *v95;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v94[1] = v95[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v11((char *)v94 + v96[6], (char *)v95 + v96[6], v142);
      *((_BYTE *)v94 + v96[7]) = *((_BYTE *)v95 + v96[7]);
      *((_BYTE *)v94 + v96[8]) = *((_BYTE *)v95 + v96[8]);
      v107 = v96[9];
      v108 = (_QWORD *)((char *)v94 + v107);
      v109 = (_QWORD *)((char *)v95 + v107);
      *v108 = *v109;
      v108[1] = v109[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_BYTE *)v94 + v96[10]) = *((_BYTE *)v95 + v96[10]);
      *((_BYTE *)v94 + v96[11]) = *((_BYTE *)v95 + v96[11]);
      goto LABEL_37;
    }
    sub_1C1D6E98C((uint64_t)v94, type metadata accessor for Siri_Nlu_External_LegacyNLContext);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8) - 8) + 64);
  v27 = v94;
  v28 = v95;
LABEL_8:
  memcpy(v27, v28, v26);
LABEL_37:
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_Internal_TurnInputRule.ContextRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *__dst;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v16 = *(int *)(v14 + 20);
    v45 = (uint64_t)v12;
    v17 = &v12[v16];
    v18 = &v13[v16];
    v19 = type metadata accessor for Siri_Nlu_External_NLContext(0);
    v44 = v10;
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEB0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = v45;
    }
    else
    {
      v22 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v22;
      v10(&v17[*(int *)(v19 + 32)], &v18[*(int *)(v19 + 32)], v9);
      v23 = *(int *)(v19 + 36);
      v42 = v19;
      __dst = &v17[v23];
      v24 = &v18[v23];
      v25 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
      v41 = (uint64_t)v17;
      if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
        memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        v27 = v42;
        v21 = v45;
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v24;
        v10(&__dst[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v9);
        v40 = v25;
        v28 = *(int *)(v25 + 24);
        v29 = &__dst[v28];
        v30 = &v24[v28];
        v39 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
        v21 = v45;
        if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v39))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v10(v29, v30, v9);
          *(_QWORD *)&v29[*(int *)(v39 + 20)] = *(_QWORD *)&v30[*(int *)(v39 + 20)];
          __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v39);
        }
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v40);
        v27 = v42;
      }
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v27);
    }
    v32 = *(int *)(v14 + 24);
    v33 = (_OWORD *)(v21 + v32);
    v34 = &v13[v32];
    v35 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, (uint64_t)v35))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v33 = *(_OWORD *)v34;
      v44((char *)v33 + v35[6], &v34[v35[6]], v9);
      *((_BYTE *)v33 + v35[7]) = v34[v35[7]];
      *((_BYTE *)v33 + v35[8]) = v34[v35[8]];
      *(_OWORD *)((char *)v33 + v35[9]) = *(_OWORD *)&v34[v35[9]];
      *((_BYTE *)v33 + v35[10]) = v34[v35[10]];
      *((_BYTE *)v33 + v35[11]) = v34[v35[11]];
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, (uint64_t)v35);
    }
    __swift_storeEnumTagSinglePayload(v21, 0, 1, v14);
  }
  v37 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_TurnInputRule.ContextRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  int v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  size_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  size_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  const void *v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  void *__dst;
  _QWORD *__dsta;
  void (*__dstb)(char *, char *, uint64_t);
  char *__dstc;
  uint64_t v108;
  int *v109;
  char *v110;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for Siri_Nlu_External_TurnContext(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v13, 1, v15);
  v17 = __swift_getEnumTagSinglePayload(v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      v109 = a3;
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      v18(v13, v14, v9);
      v19 = *(int *)(v15 + 20);
      v20 = (_OWORD *)(v13 + v19);
      v21 = (_OWORD *)(v14 + v19);
      v22 = type metadata accessor for Siri_Nlu_External_NLContext(0);
      v108 = v9;
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEB0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        v24 = (void (*)(char *, char *, uint64_t))v18;
        a3 = v109;
      }
      else
      {
        v36 = v21[1];
        *v20 = *v21;
        v20[1] = v36;
        v18((uint64_t)v20 + *(int *)(v22 + 32), (uint64_t)v21 + *(int *)(v22 + 32), v9);
        v37 = *(int *)(v22 + 36);
        v103 = v22;
        __dsta = (_QWORD *)((char *)v20 + v37);
        v38 = (_QWORD *)((char *)v21 + v37);
        v39 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
        v101 = v20;
        if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
          memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          v24 = (void (*)(char *, char *, uint64_t))v18;
          v42 = (uint64_t)v20;
          v41 = v103;
          a3 = v109;
        }
        else
        {
          *__dsta = *v38;
          v18((uint64_t)__dsta + *(int *)(v39 + 20), (uint64_t)v38 + *(int *)(v39 + 20), v9);
          v96 = (void *)v39;
          v52 = *(int *)(v39 + 24);
          v53 = (char *)__dsta + v52;
          v54 = (char *)v38 + v52;
          v94 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
          a3 = v109;
          if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v94))
          {
            v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
            memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          }
          else
          {
            v18((uint64_t)v53, (uint64_t)v54, v9);
            *(_QWORD *)&v53[*(int *)(v94 + 20)] = *(_QWORD *)&v54[*(int *)(v94 + 20)];
            __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v94);
          }
          v42 = (uint64_t)v101;
          __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, (uint64_t)v96);
          v24 = (void (*)(char *, char *, uint64_t))v18;
          v41 = v103;
        }
        __swift_storeEnumTagSinglePayload(v42, 0, 1, v41);
      }
      v63 = *(int *)(v15 + 24);
      v64 = (_OWORD *)(v13 + v63);
      v65 = (_OWORD *)(v14 + v63);
      v66 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v65, 1, (uint64_t)v66))
      {
        v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      }
      else
      {
        *v64 = *v65;
        v24((char *)v64 + v66[6], (char *)v65 + v66[6], v108);
        *((_BYTE *)v64 + v66[7]) = *((_BYTE *)v65 + v66[7]);
        *((_BYTE *)v64 + v66[8]) = *((_BYTE *)v65 + v66[8]);
        *(_OWORD *)((char *)v64 + v66[9]) = *(_OWORD *)((char *)v65 + v66[9]);
        *((_BYTE *)v64 + v66[10]) = *((_BYTE *)v65 + v66[10]);
        *((_BYTE *)v64 + v66[11]) = *((_BYTE *)v65 + v66[11]);
        __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, (uint64_t)v66);
      }
      v68 = v13;
      v69 = v15;
      goto LABEL_36;
    }
    goto LABEL_7;
  }
  if (v17)
  {
    sub_1C1D6E98C(v13, type metadata accessor for Siri_Nlu_External_TurnContext);
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060) - 8) + 64);
    v26 = (void *)v13;
    v27 = (const void *)v14;
    goto LABEL_8;
  }
  v100 = v11;
  v102 = v10;
  v11((char *)v13, (char *)v14, v9);
  v28 = *(int *)(v15 + 20);
  v29 = v13 + v28;
  v30 = (char *)(v14 + v28);
  v31 = type metadata accessor for Siri_Nlu_External_NLContext(0);
  v110 = (char *)v29;
  LODWORD(v29) = __swift_getEnumTagSinglePayload(v29, 1, v31);
  __dst = (void *)v31;
  v32 = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31);
  if (!(_DWORD)v29)
  {
    if (v32)
    {
      v43 = v110;
      sub_1C1D6E98C((uint64_t)v110, type metadata accessor for Siri_Nlu_External_NLContext);
      v44 = &qword_1ED79FEB0;
LABEL_17:
      v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v44) - 8) + 64);
      v35 = v43;
      goto LABEL_18;
    }
    *(_QWORD *)v110 = *(_QWORD *)v30;
    swift_bridgeObjectRelease();
    *((_QWORD *)v110 + 1) = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRelease();
    *((_QWORD *)v110 + 2) = *((_QWORD *)v30 + 2);
    swift_bridgeObjectRelease();
    *((_QWORD *)v110 + 3) = *((_QWORD *)v30 + 3);
    swift_bridgeObjectRelease();
    v100(&v110[*(int *)(v31 + 32)], &v30[*(int *)(v31 + 32)], v9);
    v56 = *(int *)(v31 + 36);
    v57 = (uint64_t)&v110[v56];
    v30 += v56;
    v58 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
    v110 = (char *)v57;
    LODWORD(v57) = __swift_getEnumTagSinglePayload(v57, 1, v58);
    v59 = __swift_getEnumTagSinglePayload((uint64_t)v30, 1, v58);
    if ((_DWORD)v57)
    {
      if (v59)
      {
        v33 = &qword_1ED7A05A8;
        goto LABEL_12;
      }
      *(_QWORD *)v110 = *(_QWORD *)v30;
      __dstb = *(void (**)(char *, char *, uint64_t))(v102 + 32);
      __dstb(&v110[*(int *)(v58 + 20)], &v30[*(int *)(v58 + 20)], v9);
      v72 = *(int *)(v58 + 24);
      v73 = &v110[v72];
      v74 = &v30[v72];
      v99 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v74, 1, v99))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        __dstb(v73, v74, v9);
        *(_QWORD *)&v73[*(int *)(v99 + 20)] = *(_QWORD *)&v74[*(int *)(v99 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v73, 0, 1, v99);
      }
      v76 = (uint64_t)v110;
      v77 = v58;
LABEL_45:
      __swift_storeEnumTagSinglePayload(v76, 0, 1, v77);
      goto LABEL_46;
    }
    if (v59)
    {
      v43 = v110;
      sub_1C1D6E98C((uint64_t)v110, type metadata accessor for Siri_Nlu_External_SystemDialogActGroup);
      v44 = &qword_1ED7A05A8;
      goto LABEL_17;
    }
    *(_QWORD *)v110 = *(_QWORD *)v30;
    swift_bridgeObjectRelease();
    v100(&v110[*(int *)(v58 + 20)], &v30[*(int *)(v58 + 20)], v9);
    v89 = *(int *)(v58 + 24);
    v90 = (uint64_t)&v110[v89];
    v91 = (uint64_t)&v30[v89];
    v92 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
    __dstc = (char *)v90;
    LODWORD(v90) = __swift_getEnumTagSinglePayload(v90, 1, v92);
    v93 = __swift_getEnumTagSinglePayload(v91, 1, v92);
    if ((_DWORD)v90)
    {
      if (!v93)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(__dstc, v91, v9);
        *(_QWORD *)&__dstc[*(int *)(v92 + 20)] = *(_QWORD *)(v91 + *(int *)(v92 + 20));
        v76 = (uint64_t)__dstc;
        v77 = v92;
        goto LABEL_45;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990) - 8) + 64);
      v35 = __dstc;
    }
    else
    {
      if (!v93)
      {
        v100(__dstc, (char *)v91, v9);
        *(_QWORD *)&__dstc[*(int *)(v92 + 20)] = *(_QWORD *)(v91 + *(int *)(v92 + 20));
        swift_release();
        goto LABEL_46;
      }
      sub_1C1D6E98C((uint64_t)__dstc, type metadata accessor for Siri_Nlu_External_SystemDialogAct);
      v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990) - 8) + 64);
      v35 = __dstc;
    }
    v45 = (const void *)v91;
    goto LABEL_19;
  }
  if (!v32)
  {
    v46 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v110 = *(_OWORD *)v30;
    *((_OWORD *)v110 + 1) = v46;
    v98 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
    v98(&v110[*(int *)(v31 + 32)], &v30[*(int *)(v31 + 32)], v9);
    v47 = *(int *)(v31 + 36);
    v48 = &v110[v47];
    v49 = &v30[v47];
    v50 = type metadata accessor for Siri_Nlu_External_SystemDialogActGroup(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v49, 1, v50))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A05A8);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v48 = *v49;
      v98(&v48[*(int *)(v50 + 20)], (char *)v49 + *(int *)(v50 + 20), v9);
      v60 = *(int *)(v50 + 24);
      v97 = &v48[v60];
      v61 = (char *)v49 + v60;
      v95 = type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v61, 1, v95))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724990);
        memcpy(v97, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v98(v97, v61, v9);
        *(_QWORD *)&v97[*(int *)(v95 + 20)] = *(_QWORD *)&v61[*(int *)(v95 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v95);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v48, 0, 1, v50);
    }
    v76 = (uint64_t)v110;
    v77 = (uint64_t)__dst;
    goto LABEL_45;
  }
  v33 = &qword_1ED79FEB0;
LABEL_12:
  v34 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v33) - 8) + 64);
  v35 = v110;
LABEL_18:
  v45 = v30;
LABEL_19:
  memcpy(v35, v45, v34);
LABEL_46:
  v78 = *(int *)(v15 + 24);
  v79 = v13 + v78;
  v80 = v14 + v78;
  v81 = (int *)type metadata accessor for Siri_Nlu_External_LegacyNLContext(0);
  v82 = __swift_getEnumTagSinglePayload(v79, 1, (uint64_t)v81);
  v83 = __swift_getEnumTagSinglePayload(v80, 1, (uint64_t)v81);
  if (v82)
  {
    if (!v83)
    {
      *(_OWORD *)v79 = *(_OWORD *)v80;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v79 + v81[6], v80 + v81[6], v9);
      *(_BYTE *)(v79 + v81[7]) = *(_BYTE *)(v80 + v81[7]);
      *(_BYTE *)(v79 + v81[8]) = *(_BYTE *)(v80 + v81[8]);
      *(_OWORD *)(v79 + v81[9]) = *(_OWORD *)(v80 + v81[9]);
      *(_BYTE *)(v79 + v81[10]) = *(_BYTE *)(v80 + v81[10]);
      *(_BYTE *)(v79 + v81[11]) = *(_BYTE *)(v80 + v81[11]);
      v68 = v79;
      v69 = (uint64_t)v81;
LABEL_36:
      __swift_storeEnumTagSinglePayload(v68, 0, 1, v69);
      goto LABEL_37;
    }
  }
  else
  {
    if (!v83)
    {
      *(_QWORD *)v79 = *(_QWORD *)v80;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v79 + 8) = *(_QWORD *)(v80 + 8);
      swift_bridgeObjectRelease();
      v100((char *)(v79 + v81[6]), (char *)(v80 + v81[6]), v9);
      *(_BYTE *)(v79 + v81[7]) = *(_BYTE *)(v80 + v81[7]);
      *(_BYTE *)(v79 + v81[8]) = *(_BYTE *)(v80 + v81[8]);
      v84 = v81[9];
      v85 = (_QWORD *)(v79 + v84);
      v86 = (uint64_t *)(v80 + v84);
      v88 = *v86;
      v87 = v86[1];
      *v85 = v88;
      v85[1] = v87;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v79 + v81[10]) = *(_BYTE *)(v80 + v81[10]);
      *(_BYTE *)(v79 + v81[11]) = *(_BYTE *)(v80 + v81[11]);
      goto LABEL_37;
    }
    sub_1C1D6E98C(v79, type metadata accessor for Siri_Nlu_External_LegacyNLContext);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A03A8) - 8) + 64);
  v26 = (void *)v79;
  v27 = (const void *)v80;
LABEL_8:
  memcpy(v26, v27, v25);
LABEL_37:
  v70 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v70) = *((_BYTE *)a2 + v70);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.ContextRule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ECC44C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_209();
  if (v2)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_52_0();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
      v3 = *(int *)(v1 + 24);
    }
    v4 = OUTLINED_FUNCTION_363(v3);
    OUTLINED_FUNCTION_10_4(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.ContextRule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ECC4BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_52_2();
  if (v2)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_53_1();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0060);
      v3 = *(int *)(v1 + 24);
    }
    v4 = OUTLINED_FUNCTION_106_5(v3);
    OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
  }
}

void sub_1C1ECC520()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1ED7A0068, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_TurnContext);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C1ECC61C + 4 * byte_1C2041C1E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C1ECC650 + 4 * byte_1C2041C19[v4]))();
}

uint64_t sub_1C1ECC650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1ECC658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1ECC660);
  return result;
}

uint64_t sub_1C1ECC66C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1ECC674);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C1ECC678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1ECC680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule.SDAContextComparisonMode()
{
  OUTLINED_FUNCTION_233();
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v7 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v16) = *((_BYTE *)a2 + v14);
    *v15 = v17;
    v15[1] = v18;
    *((_BYTE *)v7 + v14) = (_BYTE)v16;
    v19 = a3[8];
    v20 = (char *)v7 + v19;
    v21 = (char *)a2 + v19;
    v22 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, (uint64_t)v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v12(v20, v21, v11);
      v20[v22[5]] = v21[v22[5]];
      v20[v22[6]] = v21[v22[6]];
      v20[v22[7]] = v21[v22[7]];
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, (uint64_t)v22);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C201947C();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
    return v9(v6, v5);
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  LOBYTE(v14) = *((_BYTE *)a2 + v12);
  *v13 = v15;
  v13[1] = v16;
  *((_BYTE *)a1 + v12) = (_BYTE)v14;
  v17 = a3[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, (uint64_t)v20))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v10(v18, v19, v9);
    v18[v20[5]] = v19[v20[5]];
    v18[v20[6]] = v19[v20[6]];
    v18[v20[7]] = v19[v20[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, (uint64_t)v20);
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  int EnumTagSinglePayload;
  uint64_t v20;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, (uint64_t)v18);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, (uint64_t)v18);
  if (!(_DWORD)v8)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v16, v17, v9);
      v16[v18[5]] = v17[v18[5]];
      v16[v18[6]] = v17[v18[6]];
      v16[v18[7]] = v17[v18[7]];
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v16, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  v16[v18[5]] = v17[v18[5]];
  v16[v18[6]] = v17[v18[6]];
  v16[v18[7]] = v17[v18[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, (uint64_t)v18);
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v13, v14, v9);
    v13[v15[5]] = v14[v15[5]];
    v13[v15[6]] = v14[v15[6]];
    v13[v15[7]] = v14[v15[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  int EnumTagSinglePayload;
  uint64_t v22;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = (int *)type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
  LODWORD(v8) = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, (uint64_t)v20);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, (uint64_t)v20);
  if (!(_DWORD)v8)
  {
    if (!EnumTagSinglePayload)
    {
      v11(v18, v19, v9);
      v18[v20[5]] = v19[v20[5]];
      v18[v20[6]] = v19[v20[6]];
      v18[v20[7]] = v19[v20[7]];
      return a1;
    }
    sub_1C1D6E98C((uint64_t)v18, type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v19, v9);
  v18[v20[5]] = v19[v20[5]];
  v18[v20[6]] = v19[v20[6]];
  v18[v20[7]] = v19[v20[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, (uint64_t)v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ECCE84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_209();
  if (v2)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_52_0();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
      v3 = *(int *)(v1 + 32);
    }
    v4 = OUTLINED_FUNCTION_363(v3);
    OUTLINED_FUNCTION_10_4(v4, v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ECCEF4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_52_2();
  if (v2)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_53_1();
    if (v2)
    {
      v3 = *(int *)(v1 + 20);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7235F8);
      v3 = *(int *)(v1 + 32);
    }
    v4 = OUTLINED_FUNCTION_106_5(v3);
    OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
  }
}

void sub_1C1ECCF58()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF723600, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C1ECD05C + 4 * byte_1C2041C28[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C1ECD090 + 4 * byte_1C2041C23[v4]))();
}

uint64_t sub_1C1ECD090(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1ECD098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1ECD0A0);
  return result;
}

uint64_t sub_1C1ECD0AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1ECD0B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C1ECD0B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1ECD0C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.ComparisonType()
{
  OUTLINED_FUNCTION_233();
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ECD344()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_306();
  if (v0)
  {
    v1 = OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_10_4(v1, v2, v3);
  }
  else
  {
    OUTLINED_FUNCTION_101();
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ECD3C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v7)
  {
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v8, v9, v10, v11);
  }
  else
  {
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
    OUTLINED_FUNCTION_101();
  }
}

uint64_t sub_1C1ECD414()
{
  return sub_1C1ECD668();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_95Tm()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_209();
  if (v1)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_363(*(int *)(v2 + 20));
    OUTLINED_FUNCTION_10_4(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.AdjacentSpans()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_96Tm()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_52_2();
  if (v1)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_106_5(*(int *)(v2 + 20));
    OUTLINED_FUNCTION_12_1(v3, v4, v5, v6);
  }
}

uint64_t sub_1C1ECD4C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s12SiriNLUTypes31Siri_Nlu_Internal_TurnInputRuleV13UtteranceRuleV28SpanDataForNamedCaptureGroupVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_463(v3);
  OUTLINED_FUNCTION_12_2(*(int *)(a2 + 20));
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_93Tm()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_306();
  if (v0)
  {
    v1 = OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_10_4(v1, v2, v3);
  }
  else
  {
    OUTLINED_FUNCTION_101();
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_94Tm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v7)
  {
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v8, v9, v10, v11);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
    OUTLINED_FUNCTION_101();
  }
}

uint64_t sub_1C1ECD654()
{
  return sub_1C1ECD668();
}

uint64_t sub_1C1ECD668()
{
  uint64_t result;
  unint64_t v1;

  result = OUTLINED_FUNCTION_100_2();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_418();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C1ECD6CC()
{
  return type metadata accessor for Siri_Nlu_Internal_ParseOverride._StorageClass(0);
}

void sub_1C1ECD6D4()
{
  unint64_t v0;

  sub_1C1D4D44C(319, &qword_1EF720838, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UserParse);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1C1ECD790()
{
  return type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue._StorageClass(0);
}

void sub_1C1ECD798()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_1C1D4D44C(319, &qword_1EF7209A0, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.CCQROverrideTemplate);
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF720838, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UserParse);
    if (v1 <= 0x3F)
    {
      sub_1C1D4D44C(319, &qword_1EF72D648, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.LVCOverrideValue);
      if (v2 <= 0x3F)
      {
        sub_1C1D4D44C(319, qword_1EF72D650, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue.PlanOverrideValue);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

unint64_t sub_1C1ECD894()
{
  unint64_t result;

  result = qword_1EF72D7C8;
  if (!qword_1EF72D7C8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_Internal_OverrideMetadata.OverrideSource, &type metadata for Siri_Nlu_Internal_OverrideMetadata.OverrideSource);
    atomic_store(result, (unint64_t *)&qword_1EF72D7C8);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride._StorageClass(0);
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_52_6()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_70_9()
{
  sub_1C1EC461C();
}

uint64_t OUTLINED_FUNCTION_74_9(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  v5 = v3 + *(int *)(v2 + 28);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = v4;
  v6 = (_QWORD *)(v3 + *(int *)(v2 + 32));
  *v6 = 0;
  v6[1] = 0;
  return type metadata accessor for Siri_Nlu_External_RepetitionResult(0);
}

uint64_t OUTLINED_FUNCTION_80_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  return type metadata accessor for Siri_Nlu_Internal_ComponentOverride.OverrideValue(0);
}

uint64_t OUTLINED_FUNCTION_83_3()
{
  return sub_1C20196BC();
}

uint64_t OUTLINED_FUNCTION_98_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  v5 = v3 + *(int *)(v2 + 44);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = v4;
  return type metadata accessor for Siri_Nlu_External_CorrectionOutcome(0);
}

uint64_t OUTLINED_FUNCTION_106_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

void OUTLINED_FUNCTION_108_3(int a1@<W8>)
{
  char v1;
  uint64_t v2;

  *(_BYTE *)(v2 + 12) = v1 & 1;
  *(_DWORD *)(v2 + 8) = a1;
}

uint64_t OUTLINED_FUNCTION_111_4()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_120_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_Internal_NluRequestRule(0);
}

uint64_t OUTLINED_FUNCTION_129_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3 + a1, v1);
}

void OUTLINED_FUNCTION_144_3()
{
  sub_1C1EC461C();
}

uint64_t OUTLINED_FUNCTION_155_3(uint64_t a1)
{
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for Siri_Nlu_External_Parser(0);
}

void OUTLINED_FUNCTION_157_2()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_1C1D53F5C(v0, v2, v1);
}

void OUTLINED_FUNCTION_159_1()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  sub_1C1D4A958(v2, v0, v1);
}

void OUTLINED_FUNCTION_160_4()
{
  uint64_t v0;
  uint64_t *v1;

  sub_1C1D48944(v0, v1);
}

uint64_t OUTLINED_FUNCTION_161_1(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
}

uint64_t OUTLINED_FUNCTION_164_3()
{
  return type metadata accessor for Siri_Nlu_External_TurnContext(0);
}

uint64_t OUTLINED_FUNCTION_165_3()
{
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
}

uint64_t OUTLINED_FUNCTION_166_3()
{
  return type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
}

uint64_t OUTLINED_FUNCTION_168_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_170_3(uint64_t a1)
{
  return sub_1C1EBC7CC(a1);
}

uint64_t OUTLINED_FUNCTION_171_2@<X0>(int a1@<W8>)
{
  return (a1 == 2) | a1 & 1u;
}

uint64_t OUTLINED_FUNCTION_172_4(uint64_t a1)
{
  return sub_1C1EBC7CC(a1);
}

void OUTLINED_FUNCTION_174_2()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v0 + *(int *)(v1 + 24));
  *v2 = 0;
  v2[1] = 0;
}

uint64_t OUTLINED_FUNCTION_175_4(uint64_t a1)
{
  return sub_1C1EBC7CC(a1);
}

uint64_t OUTLINED_FUNCTION_176_4()
{
  type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_177_4()
{
  return sub_1C20196BC();
}

void OUTLINED_FUNCTION_180_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_1C1EC17F8(v1, v0, v3, v2, v4);
}

uint64_t OUTLINED_FUNCTION_183_2()
{
  return sub_1C2019698();
}

uint64_t OUTLINED_FUNCTION_189_3()
{
  return type metadata accessor for Siri_Nlu_External_UserParse(0);
}

uint64_t OUTLINED_FUNCTION_190_0()
{
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule(0);
}

void OUTLINED_FUNCTION_194_3()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_1C1D4A900(v1, *(_QWORD *)(v2 - 136), v0);
}

void OUTLINED_FUNCTION_199_2(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1C1D4A900(a1, v2, v1);
}

void OUTLINED_FUNCTION_206_0(uint64_t (*a1)(_QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  sub_1C1D4A900(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_209_0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 72) = v2;
  result = type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(result + 20);
  return result;
}

void OUTLINED_FUNCTION_212_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1C1D53F5C(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_214_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v1)(_QWORD, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(*(_QWORD *)(v4 - 120), v2 + a1, v3);
}

uint64_t OUTLINED_FUNCTION_215()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_216_1()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48884(v0, v1);
}

uint64_t OUTLINED_FUNCTION_217_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_219_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_222_0()
{
  return type metadata accessor for Siri_Nlu_Internal_OverrideCollection(0);
}

void OUTLINED_FUNCTION_229_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_1C1D6E98C(a1, v1);
}

void OUTLINED_FUNCTION_231(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_1C1E354A8(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_244_1(uint64_t a1)
{
  unint64_t v1;

  return sub_1C1D48884(a1, v1);
}

uint64_t OUTLINED_FUNCTION_245_0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 80) = v2;
  result = type metadata accessor for Siri_Nlu_Internal_ParseOverride(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_250_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_252_0()
{
  return type metadata accessor for Siri_Nlu_External_UUID();
}

void OUTLINED_FUNCTION_260_1()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1C1D6E98C(v1, v0);
}

uint64_t OUTLINED_FUNCTION_261_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_270_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
}

uint64_t OUTLINED_FUNCTION_272_1(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.SpanDataForNamedCaptureGroup(0);
}

uint64_t OUTLINED_FUNCTION_273_0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.ContextRule(0);
}

uint64_t OUTLINED_FUNCTION_274(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return type metadata accessor for Siri_Nlu_Internal_ComponentOverride(0);
}

uint64_t OUTLINED_FUNCTION_280_0(uint64_t a1)
{
  return sub_1C1EBEA70(a1);
}

uint64_t OUTLINED_FUNCTION_281_1()
{
  return sub_1C2019464();
}

uint64_t OUTLINED_FUNCTION_282_0()
{
  return type metadata accessor for Siri_Nlu_Internal_TurnInputRule.UtteranceRule.CompareOptions(0);
}

void OUTLINED_FUNCTION_286()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_1C1D6E98C(v1, v0);
}

uint64_t OUTLINED_FUNCTION_294_1(uint64_t a1)
{
  return sub_1C1EBEA70(a1);
}

uint64_t OUTLINED_FUNCTION_295_0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *v0;
  v4 = v0[1];
  *v0 = v1;
  v0[1] = v2;
  return sub_1C1D48884(v3, v4);
}

uint64_t OUTLINED_FUNCTION_296_1()
{
  char v0;

  return v0 & 1;
}

void OUTLINED_FUNCTION_306_1()
{
  uint64_t v0;
  uint64_t *v1;

  sub_1C1D48944(v0, v1);
}

uint64_t OUTLINED_FUNCTION_307_1()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48884(v0, v1);
}

void OUTLINED_FUNCTION_308_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1C1D4A900(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_310_1()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D48840(v0, v1);
}

uint64_t OUTLINED_FUNCTION_312_0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1C1D4882C(v0, v1);
}

void OUTLINED_FUNCTION_313_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_1C1E354A8(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_314_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_315_1()
{
  sub_1C1EC1ED8();
}

uint64_t OUTLINED_FUNCTION_322_1@<X0>(_BYTE *a1@<X8>)
{
  if (a1[8])
    return 0;
  else
    return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_323_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_328_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void Siri_Nlu_External_SemVer.init()(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v2 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_28_3(a1 + *(int *)(v2 + 20));
  v4 = a1 + *(int *)(v3 + 24);
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = v5;
  v6 = a1 + *(int *)(v3 + 28);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = v5;
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_SemVer()
{
  uint64_t result;

  result = qword_1ED79FD48;
  if (!qword_1ED79FD48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Siri_Nlu_External_SemVer.majorVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_17_3(*(int *)(v0 + 20));
}

void Siri_Nlu_External_SemVer.majorVersion.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_207(*(int *)(v0 + 20));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_SemVer.majorVersion.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  v2 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_12_5(*(int *)(v2 + 20));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_SemVer.hasMajorVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_149_0(*(int *)(v0 + 20));
}

Swift::Void __swiftcall Siri_Nlu_External_SemVer.clearMajorVersion()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_28_3(v0 + *(int *)(v1 + 20));
}

uint64_t Siri_Nlu_External_SemVer.minorVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_17_3(*(int *)(v0 + 24));
}

void Siri_Nlu_External_SemVer.minorVersion.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_207(*(int *)(v0 + 24));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_SemVer.minorVersion.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  v2 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_12_5(*(int *)(v2 + 24));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_SemVer.hasMinorVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_149_0(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_External_SemVer.clearMinorVersion()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_28_3(v0 + *(int *)(v1 + 24));
}

uint64_t Siri_Nlu_External_SemVer.patchVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_17_3(*(int *)(v0 + 28));
}

void Siri_Nlu_External_SemVer.patchVersion.setter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_207(*(int *)(v0 + 28));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_SemVer.patchVersion.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  v2 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_12_5(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_SemVer.hasPatchVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_138_0();
  return OUTLINED_FUNCTION_149_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_External_SemVer.clearPatchVersion()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_28_3(v0 + *(int *)(v1 + 28));
}

uint64_t Siri_Nlu_External_SemVer.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(a1, v1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 16));
}

uint64_t Siri_Nlu_External_SemVer.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(v1, a1, v3, *(uint64_t (**)(void))(*(_QWORD *)(v3 - 8) + 40));
}

uint64_t (*Siri_Nlu_External_SemVer.unknownFields.modify())(void)
{
  return nullsub_1;
}

unint64_t static Siri_Nlu_External_SemVer.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_1C1ECE258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF7232E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF7232E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "major_version";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "minor_version";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "patch_version";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_SemVer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF7232F8 != -1)
    swift_once();
  v2 = sub_1C2019914();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF7232E0);
  return OUTLINED_FUNCTION_99(a1, v3, v2, *(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 16));
}

uint64_t Siri_Nlu_External_SemVer.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1C20194DC();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        OUTLINED_FUNCTION_56();
        sub_1C1ECE5A0();
        break;
      case 2:
        OUTLINED_FUNCTION_56();
        sub_1C1ECE540();
        break;
      case 1:
        OUTLINED_FUNCTION_56();
        sub_1C1ECE4E0();
        break;
    }
  }
  return result;
}

uint64_t sub_1C1ECE4E0()
{
  type metadata accessor for Siri_Nlu_External_SemVer();
  return sub_1C2019590();
}

uint64_t sub_1C1ECE540()
{
  type metadata accessor for Siri_Nlu_External_SemVer();
  return sub_1C2019590();
}

uint64_t sub_1C1ECE5A0()
{
  type metadata accessor for Siri_Nlu_External_SemVer();
  return sub_1C2019590();
}

uint64_t Siri_Nlu_External_SemVer.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t result;

  v2 = (int *)type metadata accessor for Siri_Nlu_External_SemVer();
  if ((*(_BYTE *)(v0 + v2[5] + 4) & 1) != 0 || (result = OUTLINED_FUNCTION_128_0(), !v1))
  {
    if ((*(_BYTE *)(v0 + v2[6] + 4) & 1) != 0 || (result = OUTLINED_FUNCTION_128_0(), !v1))
    {
      if ((*(_BYTE *)(v0 + v2[7] + 4) & 1) != 0)
        return sub_1C2019464();
      result = OUTLINED_FUNCTION_128_0();
      if (!v1)
        return sub_1C2019464();
    }
  }
  return result;
}

uint64_t static Siri_Nlu_External_SemVer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  char v12;
  char v13;
  int v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v4 = OUTLINED_FUNCTION_8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v24 - v9;
  OUTLINED_FUNCTION_138_0();
  OUTLINED_FUNCTION_29_3();
  if ((v12 & 1) != 0)
  {
    if (!v11)
      goto LABEL_11;
  }
  else
  {
    OUTLINED_FUNCTION_3();
    if ((v13 & 1) != 0)
      goto LABEL_11;
  }
  OUTLINED_FUNCTION_29_3();
  if ((v15 & 1) != 0)
  {
    if (!v14)
      goto LABEL_11;
LABEL_9:
    OUTLINED_FUNCTION_29_3();
    if ((v18 & 1) != 0)
    {
      if (!v17)
        goto LABEL_11;
    }
    else
    {
      OUTLINED_FUNCTION_3();
      if ((v21 & 1) != 0)
        goto LABEL_11;
    }
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v22(v10, a1, v4);
    v22(v8, a2, v4);
    sub_1C1D505C8(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v19 = sub_1C2019944();
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    v23(v10, v4);
    return v19 & 1;
  }
  OUTLINED_FUNCTION_3();
  if ((v16 & 1) == 0)
    goto LABEL_9;
LABEL_11:
  v19 = 0;
  return v19 & 1;
}

uint64_t Siri_Nlu_External_SemVer.hashValue.getter()
{
  sub_1C2019A64();
  OUTLINED_FUNCTION_138_0();
  sub_1C1D505C8(&qword_1EF72D7F0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
  sub_1C201992C();
  return sub_1C2019A70();
}

unint64_t sub_1C1ECE8A0()
{
  static Siri_Nlu_External_SemVer.protoMessageName.getter();
  return 0xD000000000000018;
}

uint64_t sub_1C1ECE8C4()
{
  return Siri_Nlu_External_SemVer.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1ECE8D8()
{
  return Siri_Nlu_External_SemVer.traverse<A>(visitor:)();
}

uint64_t sub_1C1ECE8EC()
{
  sub_1C1D505C8(&qword_1EF72D800, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
  return sub_1C20194C4();
}

uint64_t sub_1C1ECE940()
{
  sub_1C1D505C8(&qword_1ED79FD38, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
  return sub_1C2019608();
}

uint64_t sub_1C1ECE984()
{
  sub_1C1D505C8(&qword_1ED79FD38, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
  return sub_1C2019614();
}

uint64_t sub_1C1ECE9D4()
{
  return sub_1C1D505C8(&qword_1ED79FD40, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
}

uint64_t sub_1C1ECEA00()
{
  return sub_1C1D505C8(&qword_1ED79FD38, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
}

uint64_t sub_1C1ECEA2C()
{
  return sub_1C1D505C8(&qword_1EF72D7F0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
}

uint64_t sub_1C1ECEA58()
{
  return sub_1C1D505C8(&qword_1EF72D7F8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_SemVer, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SemVer);
}

void sub_1C1ECEA88(_DWORD *a1@<X8>)
{
  *a1 = Siri_Nlu_External_SemVer.majorVersion.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ECEAAC()
{
  Siri_Nlu_External_SemVer.majorVersion.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ECEACC(_DWORD *a1@<X8>)
{
  *a1 = Siri_Nlu_External_SemVer.minorVersion.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ECEAF0()
{
  Siri_Nlu_External_SemVer.minorVersion.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ECEB10(_DWORD *a1@<X8>)
{
  *a1 = Siri_Nlu_External_SemVer.patchVersion.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ECEB34()
{
  Siri_Nlu_External_SemVer.patchVersion.setter();
  OUTLINED_FUNCTION_82();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_SemVer(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }
  return a1;
}

uint64_t initializeWithCopy for Siri_Nlu_External_SemVer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_SemVer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_SemVer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_SemVer(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_SemVer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1ECEEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_SemVer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1ECEEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t sub_1C1ECEF20()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void Siri_Nlu_Internal_UaapParser_UaaPParserResponse.requestID.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_3_0();
  v6 = v5 - v4;
  v7 = OUTLINED_FUNCTION_1_22();
  sub_1C1D4D808(v1 + *(int *)(v7 + 24), v6);
  v8 = OUTLINED_FUNCTION_59();
  if (__swift_getEnumTagSinglePayload(v6, 1, v8) == 1)
  {
    _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
    v9 = a1 + *(int *)(v8 + 20);
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(v9 + 8) = 1;
    OUTLINED_FUNCTION_169(a1 + *(int *)(v8 + 24));
    *(_BYTE *)(a1 + v10) = v11;
    sub_1C1D4F144(v6, &qword_1ED79FCE0);
  }
  else
  {
    sub_1C1D4D850(v6, a1);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse()
{
  uint64_t result;

  result = qword_1EF72D898;
  if (!qword_1EF72D898)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1C1ECF094(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for Siri_Nlu_External_UUID();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C1D4DB28(a1, (uint64_t)v4);
  return Siri_Nlu_Internal_UaapParser_UaaPParserResponse.requestID.setter((uint64_t)v4);
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.requestID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_22() + 24);
  sub_1C1D4F144(v3, &qword_1ED79FCE0);
  sub_1C1D4D850(a1, v3);
  v4 = OUTLINED_FUNCTION_59();
  return OUTLINED_FUNCTION_98(v3, 0, 1, v4);
}

void (*Siri_Nlu_Internal_UaapParser_UaaPParserResponse.requestID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = OUTLINED_FUNCTION_59();
  v3[2] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v3[3] = malloc(v7);
  v8 = malloc(v7);
  v3[4] = v8;
  v9 = *(int *)(OUTLINED_FUNCTION_1_22() + 24);
  *((_DWORD *)v3 + 10) = v9;
  OUTLINED_FUNCTION_10_13(v9);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
    _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
    v10 = &v8[*(int *)(v6 + 20)];
    *(_QWORD *)v10 = 0;
    v10[8] = 1;
    OUTLINED_FUNCTION_169((uint64_t)&v8[*(int *)(v6 + 24)]);
    v8[v11] = v12;
    sub_1C1D4F144((uint64_t)v5, &qword_1ED79FCE0);
  }
  else
  {
    sub_1C1D4D850((uint64_t)v5, (uint64_t)v8);
  }
  return sub_1C1DEFDD0;
}

void Siri_Nlu_Internal_UaapParser_UaaPParserResponse.hasRequestID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  OUTLINED_FUNCTION_3_0();
  v4 = v3 - v2;
  v5 = OUTLINED_FUNCTION_1_22();
  sub_1C1D4D808(v0 + *(int *)(v5 + 24), v4);
  v6 = OUTLINED_FUNCTION_59();
  __swift_getEnumTagSinglePayload(v4, 1, v6);
  sub_1C1D4F144(v4, &qword_1ED79FCE0);
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_UaapParser_UaaPParserResponse.clearRequestID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OUTLINED_FUNCTION_1_22();
  sub_1C1D4F144(v0 + *(int *)(v1 + 24), &qword_1ED79FCE0);
  OUTLINED_FUNCTION_59();
  v2 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v2, v3, v4, v5);
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.hypotheses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.hypotheses.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Siri_Nlu_Internal_UaapParser_UaaPParserResponse.hypotheses.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_22() + 20);
  v4 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(a1, v3, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 16));
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_1_22() + 20);
  v4 = OUTLINED_FUNCTION_8();
  return OUTLINED_FUNCTION_99(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*Siri_Nlu_Internal_UaapParser_UaaPParserResponse.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_1_22();
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = MEMORY[0x1E0DEE9D8];
  OUTLINED_FUNCTION_1_22();
  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  OUTLINED_FUNCTION_59();
  v1 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

unint64_t static Siri_Nlu_Internal_UaapParser_UaaPParserResponse.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t sub_1C1ECF46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D808);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D808);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "hypotheses";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_UaapParser_UaaPParserResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF724710 != -1)
    swift_once();
  v2 = sub_1C2019914();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF72D808);
  return OUTLINED_FUNCTION_99(a1, v3, v2, *(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 16));
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1C20194DC();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      OUTLINED_FUNCTION_56();
      sub_1C1E5B3DC();
    }
    else if (result == 1)
    {
      OUTLINED_FUNCTION_56();
      sub_1C1ECF6B0();
    }
  }
  return result;
}

uint64_t sub_1C1ECF6B0()
{
  type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse();
  type metadata accessor for Siri_Nlu_External_UUID();
  sub_1C1D505C8(&qword_1ED79FCD0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UUID, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UUID);
  return sub_1C20195B4();
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  OUTLINED_FUNCTION_3_0();
  v5 = v4 - v3;
  v6 = type metadata accessor for Siri_Nlu_External_UUID();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_3_0();
  v10 = v9 - v8;
  v11 = type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse();
  sub_1C1D4D808(v0 + *(int *)(v11 + 24), v5);
  if (__swift_getEnumTagSinglePayload(v5, 1, v6) == 1)
  {
    sub_1C1D4F144(v5, &qword_1ED79FCE0);
  }
  else
  {
    sub_1C1D4D850(v5, v10);
    sub_1C1D505C8(&qword_1ED79FCD0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UUID, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UUID);
    sub_1C20196D4();
    result = sub_1C1D4DB6C(v10);
    if (v1)
      return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return sub_1C2019464();
  type metadata accessor for Siri_Nlu_External_UserParse(0);
  sub_1C1D505C8(&qword_1EF723390, type metadata accessor for Siri_Nlu_External_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse);
  result = sub_1C20196BC();
  if (!v1)
    return sub_1C2019464();
  return result;
}

uint64_t static Siri_Nlu_Internal_UaapParser_UaaPParserResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t *v38;
  uint64_t *v39;
  char v40;
  char *v41;
  uint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v51 = OUTLINED_FUNCTION_8();
  v54 = *(_QWORD *)(v51 - 8);
  v4 = MEMORY[0x1E0C80A78](v51);
  v53 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v51 - v6;
  OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_3_0();
  v10 = v9 - v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7247C0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_3_0();
  v15 = v14 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  OUTLINED_FUNCTION_2();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v51 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v51 - v23;
  v25 = OUTLINED_FUNCTION_1_22();
  v26 = *(int *)(v25 + 24);
  v55 = a1;
  OUTLINED_FUNCTION_10_13(v26);
  v27 = *(int *)(v25 + 24);
  v56 = a2;
  sub_1C1D4D808((uint64_t)a2 + v27, (uint64_t)v22);
  v28 = v15 + *(int *)(v11 + 48);
  sub_1C1D4D808((uint64_t)v24, v15);
  sub_1C1D4D808((uint64_t)v22, v28);
  OUTLINED_FUNCTION_27_2(v15);
  if (v36)
  {
    sub_1C1D4F144((uint64_t)v22, &qword_1ED79FCE0);
    sub_1C1D4F144((uint64_t)v24, &qword_1ED79FCE0);
    v29 = OUTLINED_FUNCTION_27_2(v28);
    if (v36)
    {
      OUTLINED_FUNCTION_11_3(v29, &qword_1ED79FCE0);
      goto LABEL_11;
    }
LABEL_9:
    OUTLINED_FUNCTION_11_3(v29, &qword_1EF7247C0);
LABEL_13:
    v48 = 0;
    return v48 & 1;
  }
  sub_1C1D4D808(v15, (uint64_t)v19);
  OUTLINED_FUNCTION_27_2(v28);
  if (v36)
  {
    sub_1C1D4F144((uint64_t)v22, &qword_1ED79FCE0);
    sub_1C1D4F144((uint64_t)v24, &qword_1ED79FCE0);
    v29 = sub_1C1D4DB6C((uint64_t)v19);
    goto LABEL_9;
  }
  sub_1C1D4D850(v28, v10);
  v37 = static Siri_Nlu_External_UUID.== infix(_:_:)((uint64_t)v19, v10);
  sub_1C1D4DB6C(v10);
  OUTLINED_FUNCTION_44_3((uint64_t)v22);
  OUTLINED_FUNCTION_44_3((uint64_t)v24);
  sub_1C1D4DB6C((uint64_t)v19);
  OUTLINED_FUNCTION_44_3(v15);
  if ((v37 & 1) == 0)
    goto LABEL_13;
LABEL_11:
  v38 = v55;
  v39 = v56;
  sub_1C1D40F70(*v55, *v56, v30, v31, v32, v33, v34, v35, v51, v52, v53, v54, (uint64_t)v55, (uint64_t)v56, v57, v58, v59, v60, v61,
    v62);
  if ((v40 & 1) == 0)
    goto LABEL_13;
  v41 = (char *)v38 + *(int *)(v25 + 20);
  v42 = v54;
  v43 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 16);
  v44 = v51;
  v45 = v52;
  v43(v52, v41, v51);
  v46 = (char *)v39 + *(int *)(v25 + 20);
  v47 = v53;
  v43(v53, v46, v44);
  sub_1C1D505C8(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v48 = sub_1C2019944();
  v49 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v49(v47, v44);
  v49(v45, v44);
  return v48 & 1;
}

uint64_t Siri_Nlu_Internal_UaapParser_UaaPParserResponse.hashValue.getter()
{
  sub_1C2019A64();
  OUTLINED_FUNCTION_1_22();
  sub_1C1D505C8(&qword_1EF72D820, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
  sub_1C201992C();
  return sub_1C2019A70();
}

unint64_t sub_1C1ECFCB0()
{
  static Siri_Nlu_Internal_UaapParser_UaaPParserResponse.protoMessageName.getter();
  return 0xD000000000000030;
}

uint64_t sub_1C1ECFCD4()
{
  return Siri_Nlu_Internal_UaapParser_UaaPParserResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1ECFCE8()
{
  return Siri_Nlu_Internal_UaapParser_UaaPParserResponse.traverse<A>(visitor:)();
}

uint64_t sub_1C1ECFCFC()
{
  sub_1C1D505C8(&qword_1EF72D8D8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
  return sub_1C20194C4();
}

uint64_t sub_1C1ECFD50()
{
  sub_1C1D505C8(&qword_1EF72D830, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
  return sub_1C2019608();
}

uint64_t sub_1C1ECFD94()
{
  sub_1C1D505C8(&qword_1EF72D830, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
  return sub_1C2019614();
}

uint64_t sub_1C1ECFDE8()
{
  return sub_1C1D505C8(&qword_1EF72D828, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
}

uint64_t sub_1C1ECFE14()
{
  return sub_1C1D505C8(&qword_1EF72D830, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
}

uint64_t sub_1C1ECFE40()
{
  return sub_1C1D505C8(&qword_1EF72D820, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
}

uint64_t sub_1C1ECFE6C()
{
  return sub_1C1D505C8(&qword_1EF72D838, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse);
}

void sub_1C1ECFE98(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_UaapParser_UaaPParserResponse.requestID.getter(a1);
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_UaapParser_UaaPParserResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ECFEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_8();
    if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v6;
      v8 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
      v8 = *(int *)(a3 + 24);
    }
    __swift_getEnumTagSinglePayload(a1 + v8, a2, v7);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_UaapParser_UaaPParserResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ECFF64(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_8();
    if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
    {
      v9 = v8;
      v10 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
      v10 = *(int *)(a4 + 24);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + v10, a2, a2, v9);
  }
}

uint64_t OUTLINED_FUNCTION_1_22()
{
  return type metadata accessor for Siri_Nlu_Internal_UaapParser_UaaPParserResponse();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_Tokenisation.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_26_1(*(int *)(v0 + 20));
  OUTLINED_FUNCTION_26_1(*(int *)(v1 + 24));
  OUTLINED_FUNCTION_9_1();
  v2 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_98(v2, v3, v4, v5);
}

uint64_t type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723B10);
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.originalUtterance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 20));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED0094()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.originalUtterance.setter();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.originalUtterance.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_56_11();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.originalUtterance.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(int *)(OUTLINED_FUNCTION_54_10(a1) + 20);
  *(_DWORD *)(v1 + 24) = v2;
  v3 = OUTLINED_FUNCTION_12_2(v2);
  if (v3)
  {
    v5 = *v4;
    v6 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 8) = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_Nlv4Parser_Tokenisation.hasOriginalUtterance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 20));
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_Tokenisation.clearOriginalUtterance()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.normalisedUtterance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 24));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED01D4()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.normalisedUtterance.setter();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.normalisedUtterance.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_56_11();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.normalisedUtterance.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(int *)(OUTLINED_FUNCTION_54_10(a1) + 24);
  *(_DWORD *)(v1 + 24) = v2;
  v3 = OUTLINED_FUNCTION_12_2(v2);
  if (v3)
  {
    v5 = *v4;
    v6 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *(_QWORD *)v1 = v5;
  *(_QWORD *)(v1 + 8) = v6;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_Nlv4Parser_Tokenisation.hasNormalisedUtterance.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_Tokenisation.clearNormalisedUtterance()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.tokenChain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  sub_1C1D4A8D4(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_1EF7233D0);
  v5 = OUTLINED_FUNCTION_9_1();
  v6 = OUTLINED_FUNCTION_5_1((uint64_t)v3);
  if (v8)
  {
    OUTLINED_FUNCTION_59_0(MEMORY[0x1E0DEE9D8]);
    OUTLINED_FUNCTION_26_1(*(int *)(v5 + 24));
    OUTLINED_FUNCTION_26_1(*(int *)(v5 + 28));
    OUTLINED_FUNCTION_171(v9, &qword_1EF7233D0);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_Tokenisation.tokenChain.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;

  v1 = v0 + *(int *)(type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0) + 28);
  sub_1C1D48944(v1, &qword_1EF7233D0);
  v2 = OUTLINED_FUNCTION_132();
  sub_1C1D4A900(v2, v3, v4);
  v5 = OUTLINED_FUNCTION_9_1();
  return OUTLINED_FUNCTION_98(v1, 0, 1, v5);
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.tokenChain.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v3[1] = v5;
  v6 = OUTLINED_FUNCTION_9_1();
  v3[2] = v6;
  v3[3] = OUTLINED_FUNCTION_19_1();
  v7 = (char *)OUTLINED_FUNCTION_19_1();
  v3[4] = v7;
  v8 = *(int *)(type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0) + 28);
  *((_DWORD *)v3 + 10) = v8;
  sub_1C1D4A8D4(v1 + v8, (uint64_t)v5, &qword_1EF7233D0);
  v9 = OUTLINED_FUNCTION_5_1((uint64_t)v5);
  if (v11)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    v12 = &v7[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    OUTLINED_FUNCTION_35_1(*(int *)(v6 + 28));
    OUTLINED_FUNCTION_32_0(v13, &qword_1EF7233D0);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v9, v10, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED04CC(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 8);
  v6 = **(_QWORD **)a1 + *(int *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_1C1D4A92C(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    OUTLINED_FUNCTION_38_1(v7, &qword_1EF7233D0);
    sub_1C1D4A900((uint64_t)v3, v6, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    OUTLINED_FUNCTION_95();
    sub_1C1D48A10((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
  }
  else
  {
    OUTLINED_FUNCTION_38_1(a1, &qword_1EF7233D0);
    sub_1C1D4A900((uint64_t)v4, v6, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    OUTLINED_FUNCTION_95();
  }
  free(v4);
  free(v3);
  free(v5);
  OUTLINED_FUNCTION_10_2(v2);
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.hasTokenChain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_23_5();
  v4 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(v3);
  sub_1C1D4A8D4(v0 + *(int *)(v4 + 28), v1, &qword_1EF7233D0);
  v5 = OUTLINED_FUNCTION_9_1();
  __swift_getEnumTagSinglePayload(v1, 1, v5);
  sub_1C1D48944(v1, &qword_1EF7233D0);
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_Tokenisation.clearTokenChain()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF7233D0);
  OUTLINED_FUNCTION_9_1();
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_Internal_Nlv4Parser_Tokenisation.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_29_2();
  v5 = OUTLINED_FUNCTION_59();
  v6 = OUTLINED_FUNCTION_5_1((uint64_t)v4);
  if (v8)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_53_0(*(int *)(v5 + 20));
    OUTLINED_FUNCTION_57_0();
    *(_BYTE *)(a1 + v9) = 6;
    OUTLINED_FUNCTION_171(v10, &qword_1ED79FCE0);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723D08);
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.setter(uint64_t a1)
{
  return sub_1C1ED1680(a1, &qword_1ED79FCE0, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID);
}

uint64_t sub_1C1ED0754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._StorageClass(0);
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = sub_1C1ED27EC(v2);
    swift_release();
  }
  return swift_retain();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._StorageClass(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF723CD0);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v3 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  OUTLINED_FUNCTION_55_0((uint64_t)v5);
  v6 = type metadata accessor for Siri_Nlu_External_UUID();
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_6_3(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)(v2 + 48) = v7;
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_12_3();
  v8 = OUTLINED_FUNCTION_5_1(v0);
  if (v10)
  {
    OUTLINED_FUNCTION_69_0();
    OUTLINED_FUNCTION_41_1(*(int *)(v1 + 20));
    OUTLINED_FUNCTION_37_2();
    v7[v11] = 6;
    OUTLINED_FUNCTION_32_0(v12, &qword_1ED79FCE0);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v8, v9, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED08A4(uint64_t a1, char a2)
{
  sub_1C1D53038(a1, a2, (void (*)(void *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.setter, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasRequestID.getter()
{
  return sub_1C1ED0AB0(&qword_1ED79FCE0, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearRequestID()()
{
  sub_1C1ED0B80(&qword_1ED79FCE0, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v0);
  OUTLINED_FUNCTION_3_0();
  v3 = v2 - v1;
  OUTLINED_FUNCTION_0_21();
  v5 = v4
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  OUTLINED_FUNCTION_24_0();
  v6 = OUTLINED_FUNCTION_16_1();
  sub_1C1D4A8D4(v6, v7, &qword_1EF723B20);
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  v8 = OUTLINED_FUNCTION_5_1(v3);
  if (v10)
  {
    OUTLINED_FUNCTION_69_0();
    v11 = OUTLINED_FUNCTION_15_1();
    v14 = OUTLINED_FUNCTION_17_2(v5, v12, v13, v11);
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF723B20);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v8, v9, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.setter(uint64_t a1)
{
  return sub_1C1ED1680(a1, &qword_1EF723B20, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.modify()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_55_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(v5);
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_6_3(v6);
  *(_QWORD *)(v1 + 48) = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_0_21();
  v8 = v7
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_12_3();
  v9 = OUTLINED_FUNCTION_5_1(v0);
  if (v11)
  {
    OUTLINED_FUNCTION_69_0();
    v12 = OUTLINED_FUNCTION_15_1();
    v15 = OUTLINED_FUNCTION_17_2(v8, v13, v14, v12);
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF723B20);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v9, v10, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED0A80(uint64_t a1, char a2)
{
  sub_1C1D53038(a1, a2, (void (*)(void *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.setter, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasTokenisedUtterance.getter()
{
  return sub_1C1ED0AB0(&qword_1EF723B20, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

BOOL sub_1C1ED0AB0(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_3_0();
  v9 = v8 - v7;
  OUTLINED_FUNCTION_0_21();
  v11 = v10 + *a2;
  OUTLINED_FUNCTION_24_0();
  sub_1C1D4A8D4(v11, v9, a1);
  v12 = a3(0);
  v13 = __swift_getEnumTagSinglePayload(v9, 1, v12) != 1;
  sub_1C1D48944(v9, a1);
  return v13;
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearTokenisedUtterance()()
{
  sub_1C1ED0B80(&qword_1EF723B20, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

uint64_t sub_1C1ED0B80(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  v6 = OUTLINED_FUNCTION_23_5();
  v7 = *(int *)(type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(v6) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_12();
    v8 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v2 + v7) = sub_1C1ED27EC(v8);
    OUTLINED_FUNCTION_16_2();
  }
  v9 = a2(0);
  OUTLINED_FUNCTION_17_2(v3, v10, v11, v9);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  OUTLINED_FUNCTION_47_1();
  sub_1C1D53F5C(v12, v13, v14);
  swift_endAccess();
  return swift_release();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_29_2();
  v3 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  v4 = OUTLINED_FUNCTION_5_1((uint64_t)v2);
  if (v6)
  {
    OUTLINED_FUNCTION_59_0(MEMORY[0x1E0DEE9D8]);
    OUTLINED_FUNCTION_57_0();
    OUTLINED_FUNCTION_53_0(v7);
    OUTLINED_FUNCTION_53_0(*(int *)(v3 + 32));
    OUTLINED_FUNCTION_26_1(*(int *)(v3 + 36));
    OUTLINED_FUNCTION_171(v8, &qword_1EF723908);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.setter(uint64_t a1)
{
  return sub_1C1ED1680(a1, &qword_1EF723908, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v3 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  OUTLINED_FUNCTION_55_0((uint64_t)v5);
  v6 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_6_3(v6);
  *(_QWORD *)(v2 + 48) = OUTLINED_FUNCTION_19_1();
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_12_3();
  v7 = OUTLINED_FUNCTION_5_1(v0);
  if (v9)
  {
    OUTLINED_FUNCTION_58_0(MEMORY[0x1E0DEE9D8]);
    OUTLINED_FUNCTION_37_2();
    OUTLINED_FUNCTION_41_1(v10);
    OUTLINED_FUNCTION_41_1(*(int *)(v1 + 32));
    OUTLINED_FUNCTION_35_1(*(int *)(v1 + 36));
    OUTLINED_FUNCTION_32_0(v11, &qword_1EF723908);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v7, v8, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED0E20(uint64_t a1, char a2)
{
  sub_1C1D53038(a1, a2, (void (*)(void *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.setter, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasEmbeddings.getter()
{
  return sub_1C1ED0AB0(&qword_1EF723908, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearEmbeddings()()
{
  sub_1C1ED0B80(&qword_1EF723908, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.matchingSpans.getter()
{
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_66_0();
}

void sub_1C1ED0EA8()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.matchingSpans.setter();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.matchingSpans.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if ((OUTLINED_FUNCTION_45_10() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_12();
    v3 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v1 + v2) = OUTLINED_FUNCTION_73_12(v3);
    OUTLINED_FUNCTION_16_2();
  }
  v4 = (_QWORD *)(*(_QWORD *)(v1 + v2)
                + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
  OUTLINED_FUNCTION_2_1();
  *v4 = v0;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.matchingSpans.modify()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_44_10((uint64_t)v1);
  v3 = (_QWORD *)(v2
                + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
  OUTLINED_FUNCTION_24_0();
  *(_QWORD *)(v0 + 72) = *v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_101();
}

void sub_1C1ED0F98(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      OUTLINED_FUNCTION_4_12();
      v6 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v5 + v4) = sub_1C1ED27EC(v6);
      OUTLINED_FUNCTION_16_2();
    }
    OUTLINED_FUNCTION_64_8();
    v8 = (_QWORD *)(v7
                  + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
    OUTLINED_FUNCTION_2_1();
    *v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 80);
      OUTLINED_FUNCTION_4_12();
      v11 = OUTLINED_FUNCTION_40();
      *(_QWORD *)(v10 + v9) = sub_1C1ED27EC(v11);
      OUTLINED_FUNCTION_16_2();
    }
    OUTLINED_FUNCTION_64_8();
    v13 = (_QWORD *)(v12
                   + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
    OUTLINED_FUNCTION_2_1();
    *v13 = v3;
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_2((void *)v2);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_29_2();
  v5 = type metadata accessor for Siri_Nlu_External_TurnInput(0);
  v6 = OUTLINED_FUNCTION_5_1((uint64_t)v4);
  if (v8)
  {
    OUTLINED_FUNCTION_40_0();
    v9 = *(int *)(v5 + 20);
    if (qword_1ED79DF80 != -1)
      swift_once();
    *(_QWORD *)(a1 + v9) = qword_1ED79FF38;
    v10 = swift_retain();
    OUTLINED_FUNCTION_171(v10, &qword_1ED79DF88);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, type metadata accessor for Siri_Nlu_External_TurnInput);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.setter(uint64_t a1)
{
  return sub_1C1ED1680(a1, &qword_1ED79DF88, type metadata accessor for Siri_Nlu_External_TurnInput, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_55_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_External_TurnInput(v6);
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_6_3(v7);
  v8 = (char *)OUTLINED_FUNCTION_19_1();
  *(_QWORD *)(v2 + 48) = v8;
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_12_3();
  v9 = OUTLINED_FUNCTION_5_1(v0);
  if (v11)
  {
    OUTLINED_FUNCTION_69_0();
    v12 = *(int *)(v1 + 20);
    if (qword_1ED79DF80 != -1)
      swift_once();
    *(_QWORD *)&v8[v12] = qword_1ED79FF38;
    v13 = swift_retain();
    OUTLINED_FUNCTION_32_0(v13, &qword_1ED79DF88);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v9, v10, type metadata accessor for Siri_Nlu_External_TurnInput);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED129C(uint64_t a1, char a2)
{
  sub_1C1D53038(a1, a2, (void (*)(void *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.setter, type metadata accessor for Siri_Nlu_External_TurnInput);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasTurnInput.getter()
{
  return sub_1C1ED0AB0(&qword_1ED79DF88, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput, type metadata accessor for Siri_Nlu_External_TurnInput);
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearTurnInput()()
{
  sub_1C1ED0B80(&qword_1ED79DF88, type metadata accessor for Siri_Nlu_External_TurnInput);
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.maxNumParses.getter()
{
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_66_0();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.maxNumParses.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((OUTLINED_FUNCTION_45_10() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_12();
    v3 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v1 + v2) = OUTLINED_FUNCTION_73_12(v3);
    OUTLINED_FUNCTION_16_2();
  }
  v4 = *(_QWORD *)(v1 + v2)
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)v4 = v0;
  *(_BYTE *)(v4 + 8) = 0;
  OUTLINED_FUNCTION_13_1();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.maxNumParses.modify()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_17_1();
  OUTLINED_FUNCTION_44_10((uint64_t)v1);
  v3 = (uint64_t *)(v2
                 + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses);
  OUTLINED_FUNCTION_24_0();
  v4 = *v3;
  if (*((_BYTE *)v3 + 8))
    v4 = 0;
  *(_QWORD *)(v0 + 72) = v4;
  OUTLINED_FUNCTION_101();
}

void sub_1C1ED13F4(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    OUTLINED_FUNCTION_4_12();
    v8 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v7 + v6) = OUTLINED_FUNCTION_73_12(v8);
    OUTLINED_FUNCTION_16_2();
  }
LABEL_4:
  OUTLINED_FUNCTION_64_8();
  v10 = v9
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)v10 = v4;
  *(_BYTE *)(v10 + 8) = 0;
  OUTLINED_FUNCTION_10_2((void *)v3);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasMaxNumParses.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_0_21();
  v1 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  OUTLINED_FUNCTION_24_0();
  return (*(_BYTE *)(v1 + 8) & 1) == 0;
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearMaxNumParses()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(OUTLINED_FUNCTION_67_5() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_12();
    v2 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v0 + v1) = sub_1C1ED27EC(v2);
    OUTLINED_FUNCTION_16_2();
  }
  v3 = *(_QWORD *)(v0 + v1)
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  OUTLINED_FUNCTION_2_1();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_29_2();
  v5 = (int *)type metadata accessor for Siri_Nlu_External_RequestID();
  v6 = OUTLINED_FUNCTION_5_1((uint64_t)v4);
  if (v8)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_26_1(v5[5]);
    v9 = OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_63_0(v9);
    OUTLINED_FUNCTION_26_1(v10);
    OUTLINED_FUNCTION_26_1(v5[8]);
    OUTLINED_FUNCTION_26_1(v5[9]);
    OUTLINED_FUNCTION_26_1(v5[10]);
    *(_BYTE *)(a1 + v5[11]) = 6;
    OUTLINED_FUNCTION_171(v11, &qword_1ED79FEF8);
  }
  else
  {
    OUTLINED_FUNCTION_31_2(v6, v7, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.setter(uint64_t a1)
{
  return sub_1C1ED1680(a1, &qword_1ED79FEF8, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID);
}

uint64_t sub_1C1ED1680(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_87();
  v12 = v10 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - v14;
  v16 = *(int *)(OUTLINED_FUNCTION_67_5() + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    OUTLINED_FUNCTION_4_12();
    v17 = OUTLINED_FUNCTION_40();
    *(_QWORD *)(v4 + v16) = sub_1C1ED27EC(v17);
    OUTLINED_FUNCTION_16_2();
  }
  v18 = *(_QWORD *)(v4 + v16);
  sub_1C1D4A900(a1, (uint64_t)v15, a3);
  v19 = a3(0);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v19);
  OUTLINED_FUNCTION_47_1();
  sub_1C1D4A958(v20, v21, v22);
  v23 = v18 + *a4;
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40();
  sub_1C1D53F5C(v12, v23, a2);
  swift_endAccess();
  return swift_release();
}

void Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.modify()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = OUTLINED_FUNCTION_23_3();
  OUTLINED_FUNCTION_27_3((uint64_t)v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  OUTLINED_FUNCTION_55_0((uint64_t)v5);
  v6 = type metadata accessor for Siri_Nlu_External_RequestID();
  *(_QWORD *)(v2 + 40) = OUTLINED_FUNCTION_6_3(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  *(_QWORD *)(v2 + 48) = v7;
  OUTLINED_FUNCTION_0_21();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_12_3();
  v8 = OUTLINED_FUNCTION_5_1(v0);
  if (v10)
  {
    OUTLINED_FUNCTION_69_0();
    v11 = &v7[v1[5]];
    *v11 = 0;
    v11[1] = 0;
    v12 = OUTLINED_FUNCTION_59();
    OUTLINED_FUNCTION_63_0(v12);
    OUTLINED_FUNCTION_35_1(v13);
    OUTLINED_FUNCTION_35_1(v1[8]);
    OUTLINED_FUNCTION_35_1(v1[9]);
    OUTLINED_FUNCTION_35_1(v1[10]);
    v7[v1[11]] = 6;
    OUTLINED_FUNCTION_32_0(v14, &qword_1ED79FEF8);
  }
  else
  {
    OUTLINED_FUNCTION_24_1(v8, v9, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED18B0(uint64_t a1, char a2)
{
  sub_1C1D53038(a1, a2, (void (*)(void *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.setter, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
}

BOOL Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hasNluRequestID.getter()
{
  return sub_1C1ED0AB0(&qword_1ED79FEF8, &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
}

Swift::Void __swiftcall Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.clearNluRequestID()()
{
  sub_1C1ED0B80(&qword_1ED79FEF8, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
}

uint64_t (*Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v2 = *(int *)(OUTLINED_FUNCTION_67_5() + 20);
  if (qword_1EF723CC0 != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = qword_1EF723CB8;
  return swift_retain();
}

unint64_t static Siri_Nlu_Internal_Nlv4Parser_Tokenisation.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_1C1ED198C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF723AE0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF723AE0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "original_utterance";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "normalised_utterance";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "token_chain";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_Nlv4Parser_Tokenisation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF723AF8, (uint64_t)qword_1EF723AE0, a1);
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_Tokenisation.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1C20194DC();
    if (v0 || (v2 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        OUTLINED_FUNCTION_56();
        sub_1C1ED1C84();
        break;
      case 2:
        OUTLINED_FUNCTION_56();
        sub_1C1ED1C24();
        break;
      case 1:
        OUTLINED_FUNCTION_56();
        sub_1C1ED1BC4();
        break;
    }
  }
  return result;
}

uint64_t sub_1C1ED1BC4()
{
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  return sub_1C2019578();
}

uint64_t sub_1C1ED1C24()
{
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  return sub_1C2019578();
}

uint64_t sub_1C1ED1C84()
{
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  type metadata accessor for Siri_Nlu_Internal_TokenChain();
  sub_1C1D488DC(&qword_1EF7233C0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_TokenChain, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TokenChain);
  return sub_1C20195B4();
}

void Siri_Nlu_Internal_Nlv4Parser_Tokenisation.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  OUTLINED_FUNCTION_3_0();
  v6 = v5 - v4;
  v7 = type metadata accessor for Siri_Nlu_Internal_TokenChain();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_3_0();
  v11 = v10 - v9;
  v12 = (int *)type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  if (!*(_QWORD *)(v0 + v12[5] + 8) || (OUTLINED_FUNCTION_14_2(), (v2 = v1) == 0))
  {
    if (!*(_QWORD *)(v0 + v12[6] + 8) || (OUTLINED_FUNCTION_14_2(), (v2 = v1) == 0))
    {
      sub_1C1D4A8D4(v0 + v12[7], v6, &qword_1EF7233D0);
      if (__swift_getEnumTagSinglePayload(v6, 1, v7) == 1)
      {
        sub_1C1D48944(v6, &qword_1EF7233D0);
      }
      else
      {
        sub_1C1D4A900(v6, v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
        sub_1C1D488DC(&qword_1EF7233C0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_TokenChain, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_TokenChain);
        sub_1C20196D4();
        sub_1C1D48A10(v11, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
        if (v2)
          return;
      }
      sub_1C2019464();
    }
  }
}

void static Siri_Nlu_Internal_Nlv4Parser_Tokenisation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = OUTLINED_FUNCTION_8();
  v60 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_87();
  v59 = (char *)(v5 - v6);
  MEMORY[0x1E0C80A78](v7);
  v58 = (char *)&v55 - v8;
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_3_0();
  v57 = v11 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724AC0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_3_0();
  v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_87();
  v20 = v18 - v19;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v55 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v55 - v25;
  v27 = (int *)type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  v28 = v27[5];
  v61 = a1;
  v62 = a2;
  v29 = (_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a1 + v28 + 8);
  v31 = (_QWORD *)(a2 + v28);
  v32 = v31[1];
  if (!v30)
  {
    v56 = v4;
    if (v32)
      goto LABEL_30;
LABEL_10:
    v34 = v27[6];
    v35 = (_QWORD *)(v61 + v34);
    v36 = *(_QWORD *)(v61 + v34 + 8);
    v37 = (_QWORD *)(v62 + v34);
    v38 = v37[1];
    if (v36)
    {
      if (!v38)
        goto LABEL_30;
      v39 = *v35 == *v37 && v36 == v38;
      if (!v39 && (sub_1C2019A10() & 1) == 0)
        goto LABEL_30;
    }
    else if (v38)
    {
      goto LABEL_30;
    }
    OUTLINED_FUNCTION_54_3(v61 + v27[7], (uint64_t)v26);
    OUTLINED_FUNCTION_54_3(v62 + v27[7], (uint64_t)v24);
    v40 = v16 + *(int *)(v12 + 48);
    OUTLINED_FUNCTION_54_3((uint64_t)v26, v16);
    v41 = OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_54_3(v41, v42);
    OUTLINED_FUNCTION_10_3(v16);
    if (v33)
    {
      sub_1C1D48944((uint64_t)v24, &qword_1EF7233D0);
      sub_1C1D48944((uint64_t)v26, &qword_1EF7233D0);
      v43 = OUTLINED_FUNCTION_10_3(v40);
      v44 = v56;
      if (v33)
      {
        OUTLINED_FUNCTION_38_1(v43, &qword_1EF7233D0);
        goto LABEL_29;
      }
    }
    else
    {
      sub_1C1D4A8D4(v16, v20, &qword_1EF7233D0);
      OUTLINED_FUNCTION_10_3(v40);
      if (!v45)
      {
        v48 = v57;
        sub_1C1D4A900(v40, v57, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
        v49 = static Siri_Nlu_Internal_TokenChain.== infix(_:_:)(v20, v48);
        sub_1C1D48A10(v48, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
        OUTLINED_FUNCTION_39_0((uint64_t)v24);
        OUTLINED_FUNCTION_39_0((uint64_t)v26);
        sub_1C1D48A10(v20, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
        OUTLINED_FUNCTION_39_0(v16);
        v44 = v56;
        if ((v49 & 1) == 0)
          goto LABEL_30;
LABEL_29:
        v50 = v60;
        v51 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
        v52 = v58;
        v51(v58, v61, v44);
        v53 = v59;
        v51(v59, v62, v44);
        sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        sub_1C2019944();
        v54 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
        v54((uint64_t)v53, v44);
        v54((uint64_t)v52, v44);
        goto LABEL_30;
      }
      v46 = OUTLINED_FUNCTION_132();
      sub_1C1D48944(v46, v47);
      sub_1C1D48944((uint64_t)v26, &qword_1EF7233D0);
      sub_1C1D48A10(v20, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    }
    OUTLINED_FUNCTION_38_1(v43, &qword_1EF724AC0);
    goto LABEL_30;
  }
  if (v32)
  {
    v56 = v4;
    v33 = *v29 == *v31 && v30 == v32;
    if (v33 || (sub_1C2019A10() & 1) != 0)
      goto LABEL_10;
  }
LABEL_30:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_Tokenisation.hashValue.getter()
{
  return sub_1C1E79234((void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

unint64_t sub_1C1ED22C8()
{
  static Siri_Nlu_Internal_Nlv4Parser_Tokenisation.protoMessageName.getter();
  return 0xD00000000000002ALL;
}

uint64_t sub_1C1ED22EC()
{
  return Siri_Nlu_Internal_Nlv4Parser_Tokenisation.decodeMessage<A>(decoder:)();
}

void sub_1C1ED2300()
{
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.traverse<A>(visitor:)();
}

uint64_t sub_1C1ED2314()
{
  sub_1C1D488DC(&qword_1EF72D910, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  return sub_1C20194C4();
}

uint64_t sub_1C1ED2368()
{
  sub_1C1D488DC(&qword_1EF723B00, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  return sub_1C2019608();
}

uint64_t sub_1C1ED23AC()
{
  sub_1C1D488DC(&qword_1EF723B00, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t sub_1C1ED241C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF723CE0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF723CE0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A4D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "request_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "tokenised_utterance";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "embeddings";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "matching_spans";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "turn_input";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "max_num_parses";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "nlu_request_id";
  *((_QWORD *)v21 + 1) = 14;
  v21[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF723CF8, (uint64_t)qword_1EF723CE0, a1);
}

uint64_t sub_1C1ED2698()
{
  uint64_t result;

  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._StorageClass(0);
  swift_allocObject();
  result = sub_1C1ED26D4();
  qword_1EF723CB8 = result;
  return result;
}

uint64_t sub_1C1ED26D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  v2 = type metadata accessor for Siri_Nlu_External_UUID();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  v4 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  v6 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v6);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans) = MEMORY[0x1E0DEE9D8];
  v7 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  v8 = type metadata accessor for Siri_Nlu_External_TurnInput(0);
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  v11 = type metadata accessor for Siri_Nlu_External_RequestID();
  __swift_storeEnumTagSinglePayload(v10, 1, 1, v11);
  return v0;
}

uint64_t sub_1C1ED27EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEF8);
  MEMORY[0x1E0C80A78](v3);
  v46 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79DF88);
  MEMORY[0x1E0C80A78](v5);
  v45 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723908);
  MEMORY[0x1E0C80A78](v7);
  v43 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723B20);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  v16 = type metadata accessor for Siri_Nlu_External_UUID();
  __swift_storeEnumTagSinglePayload(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  v18 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  v20 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  __swift_storeEnumTagSinglePayload(v19, 1, 1, v20);
  v21 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans) = MEMORY[0x1E0DEE9D8];
  v22 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  v42 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  v23 = type metadata accessor for Siri_Nlu_External_TurnInput(0);
  __swift_storeEnumTagSinglePayload(v22, 1, 1, v23);
  v24 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  v44 = v1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  v26 = type metadata accessor for Siri_Nlu_External_RequestID();
  __swift_storeEnumTagSinglePayload(v25, 1, 1, v26);
  v27 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  swift_beginAccess();
  sub_1C1D4A8D4(v27, (uint64_t)v14, &qword_1ED79FCE0);
  swift_beginAccess();
  sub_1C1D53F5C((uint64_t)v14, v15, &qword_1ED79FCE0);
  swift_endAccess();
  v28 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  swift_beginAccess();
  sub_1C1D4A8D4(v28, (uint64_t)v11, &qword_1EF723B20);
  swift_beginAccess();
  sub_1C1D53F5C((uint64_t)v11, v17, &qword_1EF723B20);
  swift_endAccess();
  v29 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  swift_beginAccess();
  v30 = v43;
  sub_1C1D4A8D4(v29, v43, &qword_1EF723908);
  swift_beginAccess();
  sub_1C1D53F5C(v30, v19, &qword_1EF723908);
  swift_endAccess();
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans);
  swift_beginAccess();
  v32 = *v31;
  swift_beginAccess();
  *v21 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  swift_beginAccess();
  v34 = v45;
  sub_1C1D4A8D4(v33, v45, &qword_1ED79DF88);
  v35 = v42;
  swift_beginAccess();
  sub_1C1D53F5C(v34, v35, &qword_1ED79DF88);
  swift_endAccess();
  v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses);
  swift_beginAccess();
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  swift_beginAccess();
  *(_QWORD *)v24 = v37;
  *(_BYTE *)(v24 + 8) = (_BYTE)v36;
  v38 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  swift_beginAccess();
  v39 = v46;
  sub_1C1D4A8D4(v38, v46, &qword_1ED79FEF8);
  swift_release();
  v40 = v44;
  swift_beginAccess();
  sub_1C1D53F5C(v39, v40, &qword_1ED79FEF8);
  swift_endAccess();
  return v1;
}

uint64_t sub_1C1ED2D24()
{
  uint64_t v0;

  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID, &qword_1ED79FCE0);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance, &qword_1EF723B20);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings, &qword_1EF723908);
  swift_bridgeObjectRelease();
  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput, &qword_1ED79DF88);
  sub_1C1D48944(v0+ OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID, &qword_1ED79FEF8);
  return v0;
}

uint64_t sub_1C1ED2DC0()
{
  sub_1C1ED2D24();
  return swift_deallocClassInstance();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_1C1ED0754();
  swift_release();
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
  v6 = OUTLINED_FUNCTION_40();
  sub_1C1ED2E58(v6, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1C1ED2E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void (*v16)(_QWORD);

  result = sub_1C20194DC();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
          v16 = (void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID;
          goto LABEL_12;
        case 2:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
          v16 = (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation;
          goto LABEL_12;
        case 3:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
          v16 = (void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor;
          goto LABEL_12;
        case 4:
          sub_1C1ED303C();
          break;
        case 5:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
          v16 = (void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_TurnInput;
          goto LABEL_12;
        case 6:
          sub_1C1ED30F0();
          break;
        case 7:
          v11 = a2;
          v12 = a1;
          v13 = a3;
          v14 = a4;
          v15 = &OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
          v16 = (void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID;
LABEL_12:
          sub_1C1D5AE30(v11, v12, v13, v14, (uint64_t)v15, v16);
          break;
        default:
          break;
      }
      result = sub_1C20194DC();
    }
  }
  return result;
}

uint64_t sub_1C1ED303C()
{
  swift_beginAccess();
  type metadata accessor for Siri_Nlu_Internal_MatchingSpan(0);
  sub_1C1D488DC(&qword_1EF7234A8, type metadata accessor for Siri_Nlu_Internal_MatchingSpan, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_MatchingSpan);
  sub_1C20195A8();
  return swift_endAccess();
}

uint64_t sub_1C1ED30F0()
{
  swift_beginAccess();
  sub_1C201959C();
  return swift_endAccess();
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
  v7 = swift_retain();
  sub_1C1ED3200(v7, a1, a2, a3);
  result = swift_release();
  if (!v3)
  {
    OUTLINED_FUNCTION_47_1();
    return sub_1C2019464();
  }
  return result;
}

void sub_1C1ED3200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a4;
  v54 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEF8);
  MEMORY[0x1E0C80A78](v5);
  v45 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Siri_Nlu_External_RequestID();
  MEMORY[0x1E0C80A78](v46);
  v44 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79DF88);
  MEMORY[0x1E0C80A78](v8);
  v48 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Siri_Nlu_External_TurnInput(0);
  MEMORY[0x1E0C80A78](v49);
  v47 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723908);
  MEMORY[0x1E0C80A78](v11);
  v51 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  MEMORY[0x1E0C80A78](v52);
  v50 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723B20);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Siri_Nlu_External_UUID();
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a1;
  v26 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  swift_beginAccess();
  sub_1C1D4A8D4(v26, (uint64_t)v22, &qword_1ED79FCE0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23) == 1)
  {
    sub_1C1D48944((uint64_t)v22, &qword_1ED79FCE0);
    v27 = v53;
  }
  else
  {
    sub_1C1D4A900((uint64_t)v22, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
    sub_1C1D488DC(&qword_1ED79FCD0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UUID, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UUID);
    v28 = v53;
    sub_1C20196D4();
    v27 = v28;
    sub_1C1D48A10((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
    if (v28)
      return;
  }
  v29 = v56
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  swift_beginAccess();
  sub_1C1D4A8D4(v29, (uint64_t)v16, &qword_1EF723B20);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    sub_1C1D48944((uint64_t)v16, &qword_1EF723B20);
  }
  else
  {
    sub_1C1D4A900((uint64_t)v16, (uint64_t)v19, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
    sub_1C1D488DC(&qword_1EF723B00, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
    sub_1C20196D4();
    sub_1C1D48A10((uint64_t)v19, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
    if (v27)
      return;
  }
  v30 = v56
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  swift_beginAccess();
  v31 = v51;
  sub_1C1D4A8D4(v30, v51, &qword_1EF723908);
  if (__swift_getEnumTagSinglePayload(v31, 1, v52) == 1)
  {
    sub_1C1D48944(v31, &qword_1EF723908);
  }
  else
  {
    v32 = v31;
    v33 = v50;
    sub_1C1D4A900(v32, v50, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
    sub_1C1D488DC(&qword_1EF7238E8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
    sub_1C20196D4();
    sub_1C1D48A10(v33, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
    if (v27)
      return;
  }
  v34 = v56
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__matchingSpans;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v34 + 16)
    || (type metadata accessor for Siri_Nlu_Internal_MatchingSpan(0),
        sub_1C1D488DC(&qword_1EF7234A8, type metadata accessor for Siri_Nlu_Internal_MatchingSpan, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_MatchingSpan), swift_bridgeObjectRetain(), sub_1C20196BC(), swift_bridgeObjectRelease(), !v27))
  {
    v35 = v56
        + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
    swift_beginAccess();
    v36 = v48;
    sub_1C1D4A8D4(v35, v48, &qword_1ED79DF88);
    if (__swift_getEnumTagSinglePayload(v36, 1, v49) == 1)
    {
      sub_1C1D48944(v36, &qword_1ED79DF88);
    }
    else
    {
      v37 = v36;
      v38 = v47;
      sub_1C1D4A900(v37, v47, type metadata accessor for Siri_Nlu_External_TurnInput);
      sub_1C1D488DC(&qword_1ED79FF88, type metadata accessor for Siri_Nlu_External_TurnInput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_TurnInput);
      sub_1C20196D4();
      sub_1C1D48A10(v38, type metadata accessor for Siri_Nlu_External_TurnInput);
      if (v27)
        return;
    }
    v39 = v56
        + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
    swift_beginAccess();
    if ((*(_BYTE *)(v39 + 8) & 1) != 0 || (sub_1C20196B0(), !v27))
    {
      v40 = v56
          + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
      swift_beginAccess();
      v41 = v45;
      sub_1C1D4A8D4(v40, v45, &qword_1ED79FEF8);
      if (__swift_getEnumTagSinglePayload(v41, 1, v46) == 1)
      {
        sub_1C1D48944(v41, &qword_1ED79FEF8);
      }
      else
      {
        v42 = v41;
        v43 = v44;
        sub_1C1D4A900(v42, v44, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
        sub_1C1D488DC(&qword_1ED79FED8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_External_RequestID, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_RequestID);
        sub_1C20196D4();
        sub_1C1D48A10(v43, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
      }
    }
  }
}

void static Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;

  v4 = OUTLINED_FUNCTION_8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_87();
  v8 = (char *)(v6 - v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - v10;
  v12 = *(int *)(type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0) + 20);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a2 + v12);
  if (v13 == v14
    || (swift_retain(), swift_retain(), v15 = sub_1C1ED3B4C(v13, v14), swift_release(), swift_release(), v15))
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v11, a1, v4);
    v16(v8, a2, v4);
    sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    sub_1C2019944();
    v17 = *(void (**)(uint64_t))(v5 + 8);
    v18 = OUTLINED_FUNCTION_132();
    v17(v18);
    ((void (*)(char *, uint64_t))v17)(v11, v4);
  }
  OUTLINED_FUNCTION_0();
}

BOOL sub_1C1ED3B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int EnumTagSinglePayload;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = a2;
  v105 = type metadata accessor for Siri_Nlu_External_RequestID();
  MEMORY[0x1E0C80A78](v105);
  v102 = (uint64_t)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724C10);
  MEMORY[0x1E0C80A78](v104);
  v106 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FEF8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v103 = (uint64_t)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v108 = (uint64_t)&v101 - v8;
  v111 = type metadata accessor for Siri_Nlu_External_TurnInput(0);
  MEMORY[0x1E0C80A78](v111);
  v107 = (uint64_t)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF7248B8);
  MEMORY[0x1E0C80A78](v110);
  v112 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79DF88);
  v12 = MEMORY[0x1E0C80A78](v11);
  v109 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v114 = (uint64_t)&v101 - v14;
  v118 = type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor();
  MEMORY[0x1E0C80A78](v118);
  v113 = (uint64_t *)((char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724C18);
  MEMORY[0x1E0C80A78](v117);
  v119 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723908);
  v18 = MEMORY[0x1E0C80A78](v17);
  v115 = (uint64_t *)((char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v122 = (char *)&v101 - v20;
  v125 = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
  MEMORY[0x1E0C80A78](v125);
  v116 = (uint64_t)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724D20);
  MEMORY[0x1E0C80A78](v123);
  v126 = (uint64_t)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF723B20);
  v24 = MEMORY[0x1E0C80A78](v23);
  v120 = (uint64_t)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v124 = (uint64_t)&v101 - v26;
  v27 = type metadata accessor for Siri_Nlu_External_UUID();
  MEMORY[0x1E0C80A78](v27);
  v121 = (uint64_t)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7247C0);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED79FCE0);
  v33 = MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v101 - v36;
  v38 = a1;
  v39 = a1
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  swift_beginAccess();
  sub_1C1D4A8D4(v39, (uint64_t)v37, &qword_1ED79FCE0);
  v40 = v127;
  v41 = v127
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__requestID;
  swift_beginAccess();
  v42 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_1C1D4A8D4((uint64_t)v37, (uint64_t)v31, &qword_1ED79FCE0);
  sub_1C1D4A8D4(v41, v42, &qword_1ED79FCE0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C1D48944((uint64_t)v37, &qword_1ED79FCE0);
    v43 = v38;
    if (__swift_getEnumTagSinglePayload(v42, 1, v27) == 1)
    {
      sub_1C1D48944((uint64_t)v31, &qword_1ED79FCE0);
      goto LABEL_8;
    }
LABEL_6:
    v44 = &qword_1EF7247C0;
    v45 = (uint64_t)v31;
LABEL_22:
    sub_1C1D48944(v45, v44);
    goto LABEL_23;
  }
  sub_1C1D4A8D4((uint64_t)v31, (uint64_t)v35, &qword_1ED79FCE0);
  if (__swift_getEnumTagSinglePayload(v42, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C1D48944((uint64_t)v37, &qword_1ED79FCE0);
    sub_1C1D48A10((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
    goto LABEL_6;
  }
  v46 = v121;
  sub_1C1D4A900(v42, v121, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
  v43 = v38;
  swift_retain();
  swift_retain();
  v47 = static Siri_Nlu_External_UUID.== infix(_:_:)((uint64_t)v35, v46);
  sub_1C1D48A10(v46, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
  sub_1C1D48944((uint64_t)v37, &qword_1ED79FCE0);
  sub_1C1D48A10((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID);
  sub_1C1D48944((uint64_t)v31, &qword_1ED79FCE0);
  if ((v47 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  v48 = v43
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  swift_beginAccess();
  v49 = v124;
  sub_1C1D4A8D4(v48, v124, &qword_1EF723B20);
  v50 = v40
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__tokenisedUtterance;
  swift_beginAccess();
  v51 = v126;
  v52 = v126 + *(int *)(v123 + 48);
  sub_1C1D4A8D4(v49, v126, &qword_1EF723B20);
  sub_1C1D4A8D4(v50, v52, &qword_1EF723B20);
  v53 = v125;
  if (__swift_getEnumTagSinglePayload(v51, 1, v125) == 1)
  {
    sub_1C1D48944(v49, &qword_1EF723B20);
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v52, 1, v53);
    v55 = (uint64_t)v122;
    if (EnumTagSinglePayload == 1)
    {
      sub_1C1D48944(v51, &qword_1EF723B20);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v56 = v120;
  sub_1C1D4A8D4(v51, v120, &qword_1EF723B20);
  v57 = __swift_getEnumTagSinglePayload(v52, 1, v53);
  v55 = (uint64_t)v122;
  if (v57 == 1)
  {
    sub_1C1D48944(v49, &qword_1EF723B20);
    sub_1C1D48A10(v56, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
LABEL_13:
    v44 = &qword_1EF724D20;
    v45 = v51;
    goto LABEL_22;
  }
  v58 = v56;
  v59 = v116;
  sub_1C1D4A900(v52, v116, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  static Siri_Nlu_Internal_Nlv4Parser_Tokenisation.== infix(_:_:)(v58, v59);
  v61 = v60;
  sub_1C1D48A10(v59, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  sub_1C1D48944(v49, &qword_1EF723B20);
  sub_1C1D48A10(v58, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
  sub_1C1D48944(v51, &qword_1EF723B20);
  if ((v61 & 1) == 0)
    goto LABEL_23;
LABEL_15:
  v62 = v43
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  swift_beginAccess();
  sub_1C1D4A8D4(v62, v55, &qword_1EF723908);
  v63 = v40
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__embeddings;
  swift_beginAccess();
  v64 = v119;
  v65 = v119 + *(int *)(v117 + 48);
  sub_1C1D4A8D4(v55, v119, &qword_1EF723908);
  v66 = v64;
  sub_1C1D4A8D4(v63, v65, &qword_1EF723908);
  v67 = v118;
  if (__swift_getEnumTagSinglePayload(v64, 1, v118) == 1)
  {
    sub_1C1D48944(v55, &qword_1EF723908);
    if (__swift_getEnumTagSinglePayload(v65, 1, v67) == 1)
    {
      sub_1C1D48944(v64, &qword_1EF723908);
      goto LABEL_26;
    }
LABEL_20:
    v44 = &qword_1EF724C18;
LABEL_21:
    v45 = v66;
    goto LABEL_22;
  }
  v68 = v64;
  v69 = v115;
  sub_1C1D4A8D4(v68, (uint64_t)v115, &qword_1EF723908);
  if (__swift_getEnumTagSinglePayload(v65, 1, v67) == 1)
  {
    sub_1C1D48944(v55, &qword_1EF723908);
    sub_1C1D48A10((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
    goto LABEL_20;
  }
  v71 = v113;
  sub_1C1D4A900(v65, (uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
  v72 = static Siri_Nlu_Internal_NLv4EmbeddingTensor.== infix(_:_:)(v69, v71);
  sub_1C1D48A10((uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
  sub_1C1D48944(v55, &qword_1EF723908);
  sub_1C1D48A10((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
  sub_1C1D48944(v66, &qword_1EF723908);
  if ((v72 & 1) == 0)
    goto LABEL_23;
LABEL_26:
  swift_beginAccess();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C1D40D44();
  v74 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v74 & 1) == 0)
    goto LABEL_23;
  v75 = v43
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  swift_beginAccess();
  v76 = v114;
  sub_1C1D4A8D4(v75, v114, &qword_1ED79DF88);
  v77 = v40
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__turnInput;
  swift_beginAccess();
  v78 = v112;
  v79 = v112 + *(int *)(v110 + 48);
  sub_1C1D4A8D4(v76, v112, &qword_1ED79DF88);
  v66 = v78;
  sub_1C1D4A8D4(v77, v79, &qword_1ED79DF88);
  v80 = v111;
  if (__swift_getEnumTagSinglePayload(v78, 1, v111) == 1)
  {
    sub_1C1D48944(v114, &qword_1ED79DF88);
    if (__swift_getEnumTagSinglePayload(v79, 1, v80) == 1)
    {
      sub_1C1D48944(v78, &qword_1ED79DF88);
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  v81 = v109;
  sub_1C1D4A8D4(v78, v109, &qword_1ED79DF88);
  if (__swift_getEnumTagSinglePayload(v79, 1, v80) == 1)
  {
    sub_1C1D48944(v114, &qword_1ED79DF88);
    sub_1C1D48A10(v81, type metadata accessor for Siri_Nlu_External_TurnInput);
LABEL_32:
    v44 = (uint64_t *)&unk_1EF7248B8;
    goto LABEL_21;
  }
  v82 = v107;
  sub_1C1D4A900(v79, v107, type metadata accessor for Siri_Nlu_External_TurnInput);
  static Siri_Nlu_External_TurnInput.== infix(_:_:)();
  v84 = v83;
  sub_1C1D48A10(v82, type metadata accessor for Siri_Nlu_External_TurnInput);
  sub_1C1D48944(v114, &qword_1ED79DF88);
  sub_1C1D48A10(v81, type metadata accessor for Siri_Nlu_External_TurnInput);
  sub_1C1D48944(v78, &qword_1ED79DF88);
  if ((v84 & 1) == 0)
    goto LABEL_23;
LABEL_34:
  v85 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses);
  swift_beginAccess();
  v86 = *v85;
  v87 = v40;
  v88 = *((_BYTE *)v85 + 8);
  v89 = v87;
  v90 = v87
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__maxNumParses;
  swift_beginAccess();
  if ((v88 & 1) != 0)
  {
    v91 = v89;
    if ((*(_BYTE *)(v90 + 8) & 1) != 0)
      goto LABEL_39;
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v90 + 8) & 1) != 0)
    goto LABEL_23;
  v91 = v89;
  if (v86 != *(_QWORD *)v90)
    goto LABEL_23;
LABEL_39:
  v92 = v43
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  swift_beginAccess();
  v93 = v108;
  sub_1C1D4A8D4(v92, v108, &qword_1ED79FEF8);
  v94 = v91
      + OBJC_IVAR____TtCV12SiriNLUTypes46Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequestP33_213882D7DA20741D131C3E8D875D2EAB13_StorageClass__nluRequestID;
  swift_beginAccess();
  v95 = v106;
  v96 = v106 + *(int *)(v104 + 48);
  sub_1C1D4A8D4(v93, v106, &qword_1ED79FEF8);
  sub_1C1D4A8D4(v94, v96, &qword_1ED79FEF8);
  v97 = v105;
  if (__swift_getEnumTagSinglePayload(v95, 1, v105) != 1)
  {
    v98 = v103;
    sub_1C1D4A8D4(v95, v103, &qword_1ED79FEF8);
    if (__swift_getEnumTagSinglePayload(v96, 1, v97) == 1)
    {
      swift_release();
      swift_release();
      sub_1C1D48944(v108, &qword_1ED79FEF8);
      sub_1C1D48A10(v98, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
      goto LABEL_44;
    }
    v99 = v102;
    sub_1C1D4A900(v96, v102, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
    v100 = static Siri_Nlu_External_RequestID.== infix(_:_:)(v98, v99);
    swift_release();
    swift_release();
    sub_1C1D48A10(v99, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
    sub_1C1D48944(v108, &qword_1ED79FEF8);
    sub_1C1D48A10(v98, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID);
    sub_1C1D48944(v95, &qword_1ED79FEF8);
    return (v100 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_1C1D48944(v108, &qword_1ED79FEF8);
  if (__swift_getEnumTagSinglePayload(v96, 1, v97) != 1)
  {
LABEL_44:
    sub_1C1D48944(v95, &qword_1EF724C10);
    return 0;
  }
  sub_1C1D48944(v95, &qword_1ED79FEF8);
  return 1;
}

uint64_t Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.hashValue.getter()
{
  return sub_1C1E79234((void (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
}

unint64_t sub_1C1ED49C8()
{
  static Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.protoMessageName.getter();
  return 0xD00000000000002FLL;
}

uint64_t sub_1C1ED49E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1C1ED49F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1C1ED4A0C()
{
  sub_1C1D488DC(&qword_1EF72D908, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
  return sub_1C20194C4();
}

uint64_t sub_1C1ED4A60()
{
  sub_1C1D488DC(&qword_1EF72D8F8, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
  return sub_1C2019608();
}

uint64_t sub_1C1ED4AA4()
{
  sub_1C1D488DC(&qword_1EF72D8F8, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
  return sub_1C2019614();
}

void sub_1C1ED4AF4()
{
  sub_1C1D488DC(&qword_1EF723B08, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

void sub_1C1ED4B20()
{
  sub_1C1D488DC(&qword_1EF723B00, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

void sub_1C1ED4B4C()
{
  sub_1C1D488DC(&qword_1EF72D8E0, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

void sub_1C1ED4B78()
{
  sub_1C1D488DC(&qword_1EF72D8F0, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
}

void sub_1C1ED4BA4()
{
  sub_1C1D488DC(&qword_1EF723D00, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
}

void sub_1C1ED4BD0()
{
  sub_1C1D488DC(&qword_1EF72D8F8, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
}

void sub_1C1ED4BFC()
{
  sub_1C1D488DC(&qword_1EF72D8E8, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
}

void sub_1C1ED4C28()
{
  sub_1C1D488DC(&qword_1EF72D900, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest);
}

void sub_1C1ED4C58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.originalUtterance.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED4C7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.normalisedUtterance.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED4CA0()
{
  Siri_Nlu_Internal_Nlv4Parser_Tokenisation.tokenChain.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_Tokenisation.tokenChain.setter);
}

void sub_1C1ED4CE0(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_UUID, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.requestID.setter);
}

void sub_1C1ED4D20()
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.tokenisedUtterance.setter);
}

void sub_1C1ED4D60()
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.embeddings.setter);
}

void sub_1C1ED4DA0()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.matchingSpans.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED4DC4(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_TurnInput, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.turnInput.setter);
}

void sub_1C1ED4E04()
{
  _QWORD *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.maxNumParses.getter();
  *v0 = v1;
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED4E24()
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.maxNumParses.setter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED4E44(uint64_t a1@<X8>)
{
  Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1ED4E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D59D90(a1, a2, a3, a4, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_External_RequestID, (uint64_t (*)(char *))Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest.nluRequestID.setter);
}

char *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, (char *)a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *(_QWORD *)v11 = *v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = (uint64_t *)((char *)a2 + v10);
    v16 = v15[1];
    *(_QWORD *)v14 = *v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = a3[7];
    v18 = &a1[v17];
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = (int *)type metadata accessor for Siri_Nlu_Internal_TokenChain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, (uint64_t)v20))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v18 = *v19;
      v23 = v20[5];
      v24 = &v18[v23];
      v25 = (char *)v19 + v23;
      swift_bridgeObjectRetain();
      v8(v24, v25, v7);
      v26 = v20[6];
      v27 = &v18[v26];
      v28 = (_QWORD *)((char *)v19 + v26);
      v29 = v28[1];
      *(_QWORD *)v27 = *v28;
      *((_QWORD *)v27 + 1) = v29;
      v30 = v20[7];
      v31 = &v18[v30];
      v32 = (_QWORD *)((char *)v19 + v30);
      v33 = v32[1];
      *(_QWORD *)v31 = *v32;
      *((_QWORD *)v31 + 1) = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, (uint64_t)v20);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for Siri_Nlu_Internal_TokenChain();
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for Siri_Nlu_Internal_TokenChain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, (uint64_t)v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v17 = *v18;
    v21 = v19[5];
    v22 = (char *)v17 + v21;
    v23 = (char *)v18 + v21;
    swift_bridgeObjectRetain();
    v7((uint64_t)v22, (uint64_t)v23, v6);
    v24 = v19[6];
    v25 = (_QWORD *)((char *)v17 + v24);
    v26 = (_QWORD *)((char *)v18 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = v19[7];
    v29 = (_QWORD *)((char *)v17 + v28);
    v30 = (_QWORD *)((char *)v18 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, (uint64_t)v19);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  int EnumTagSinglePayload;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = (int *)type metadata accessor for Siri_Nlu_Internal_TokenChain();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, (uint64_t)v18);
  v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, (uint64_t)v18);
  if (!EnumTagSinglePayload)
  {
    if (!v20)
    {
      *v16 = *v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8((uint64_t)v16 + v18[5], (uint64_t)v17 + v18[5], v6);
      v33 = v18[6];
      v34 = (_QWORD *)((char *)v16 + v33);
      v35 = (_QWORD *)((char *)v17 + v33);
      *v34 = *v35;
      v34[1] = v35[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36 = v18[7];
      v37 = (_QWORD *)((char *)v16 + v36);
      v38 = (_QWORD *)((char *)v17 + v36);
      *v37 = *v38;
      v37[1] = v38[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D48A10((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  *v16 = *v17;
  v21 = v18[5];
  v22 = (char *)v16 + v21;
  v23 = (char *)v17 + v21;
  v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v24(v22, v23, v6);
  v25 = v18[6];
  v26 = (_QWORD *)((char *)v16 + v25);
  v27 = (_QWORD *)((char *)v17 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  v28 = v18[7];
  v29 = (_QWORD *)((char *)v16 + v28);
  v30 = (_QWORD *)((char *)v17 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, (uint64_t)v18);
  return a1;
}

char *initializeWithTake for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;

  v6 = sub_1C201947C();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = (int *)type metadata accessor for Siri_Nlu_Internal_TokenChain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v7(&v10[v12[5]], &v11[v12[5]], v6);
    *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
    *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, (uint64_t)v12);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  int EnumTagSinglePayload;
  int v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for Siri_Nlu_Internal_TokenChain();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, (uint64_t)v22);
  v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, (uint64_t)v22);
  if (!EnumTagSinglePayload)
  {
    if (!v24)
    {
      *v20 = *v21;
      swift_bridgeObjectRelease();
      v8((uint64_t)v20 + v22[5], (uint64_t)v21 + v22[5], v6);
      v27 = v22[6];
      v28 = (_QWORD *)((char *)v20 + v27);
      v29 = (_QWORD *)((char *)v21 + v27);
      v31 = *v29;
      v30 = v29[1];
      *v28 = v31;
      v28[1] = v30;
      swift_bridgeObjectRelease();
      v32 = v22[7];
      v33 = (_QWORD *)((char *)v20 + v32);
      v34 = (_QWORD *)((char *)v21 + v32);
      v36 = *v34;
      v35 = v34[1];
      *v33 = v36;
      v33[1] = v35;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D48A10((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  *v20 = *v21;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)v20 + v22[5], (char *)v21 + v22[5], v6);
  *(_OWORD *)((char *)v20 + v22[6]) = *(_OWORD *)((char *)v21 + v22[6]);
  *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)((char *)v21 + v22[7]);
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, (uint64_t)v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_Nlv4Parser_Tokenisation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ED5750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 2147483646)
    {
      OUTLINED_FUNCTION_101();
      return;
    }
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    v8 = a1 + *(int *)(a3 + 28);
  }
  OUTLINED_FUNCTION_10_4(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_Nlv4Parser_Tokenisation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ED57F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      OUTLINED_FUNCTION_101();
      return;
    }
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF7233D0);
    v10 = a1 + *(int *)(a4 + 28);
  }
  OUTLINED_FUNCTION_12_1(v10, a2, a2, v9);
}

void sub_1C1ED5884()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, (unint64_t *)&qword_1EF7233D8, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_TokenChain);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1ED5930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    OUTLINED_FUNCTION_10_4(a1, a2, v4);
  else
    OUTLINED_FUNCTION_101();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1ED59A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    OUTLINED_FUNCTION_12_1(a1, a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    OUTLINED_FUNCTION_101();
  }
}

uint64_t sub_1C1ED5A00()
{
  return type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._StorageClass(0);
}

void sub_1C1ED5A08()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_1C1D4D44C(319, (unint64_t *)&qword_1ED7A06E0, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_UUID);
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF723B28, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation);
    if (v1 <= 0x3F)
    {
      sub_1C1D4D44C(319, &qword_1EF723910, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_NLv4EmbeddingTensor);
      if (v2 <= 0x3F)
      {
        sub_1C1D4D44C(319, &qword_1ED79FF98, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_TurnInput);
        if (v3 <= 0x3F)
        {
          sub_1C1D4D44C(319, (unint64_t *)&qword_1ED79FF00, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_RequestID);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest._StorageClass(0);
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_44_10(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  *v1 = a1;
  *(_QWORD *)(a1 + 80) = v2;
  result = type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(result + 20);
  return result;
}

uint64_t OUTLINED_FUNCTION_45_10()
{
  type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_54_10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
}

uint64_t OUTLINED_FUNCTION_56_11()
{
  return type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_Tokenisation(0);
}

uint64_t OUTLINED_FUNCTION_67_5()
{
  return type metadata accessor for Siri_Nlu_Internal_Nlv4Parser_NLv4ParserRequest(0);
}

uint64_t OUTLINED_FUNCTION_73_12(uint64_t a1)
{
  return sub_1C1ED27EC(a1);
}

void sub_1C1ED5C0C(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D444B4);
}

void sub_1C1ED5C20(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D4F5B0);
}

void sub_1C1ED5C34(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D6C3F8);
}

void sub_1C1ED5C48(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D7F4E0);
}

void sub_1C1ED5C5C(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D7F5C4);
}

void sub_1C1ED5C70(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D7F684);
}

void sub_1C1ED5C84(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D7F78C);
}

void sub_1C1ED5C98(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1D7F870);
}

void sub_1C1ED5CAC(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1D8B624);
}

void sub_1C1ED5CC0(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1D90268);
}

void sub_1C1ED5CD4(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1D94778);
}

void sub_1C1ED5CE8(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA09B8);
}

void sub_1C1ED5CFC(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA0A78);
}

void sub_1C1ED5D10(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA0B38);
}

void sub_1C1ED5D24(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA0C64);
}

void sub_1C1ED5D38(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA0D48);
}

void sub_1C1ED5D4C(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA0E08);
}

void sub_1C1ED5D60(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1DA8014);
}

void sub_1C1ED5D74(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3B9D4);
}

void sub_1C1ED5D88(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3BAB8);
}

void sub_1C1ED5D9C(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3BB9C);
}

void sub_1C1ED5DB0(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3BC5C);
}

void sub_1C1ED5DC4(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1E3BD64);
}

void sub_1C1ED5DD8(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3BE48);
}

void sub_1C1ED5DEC(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3BF2C);
}

void sub_1C1ED5E00(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E3C010);
}

void sub_1C1ED5E14(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1E79424);
}

void sub_1C1ED5E28(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1E80C24);
}

void sub_1C1ED5E3C(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1EC512C);
}

void sub_1C1ED5E50(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1EC51EC);
}

void sub_1C1ED5E64(uint64_t a1)
{
  sub_1C1ED5E78(a1, (void (*)(uint64_t))sub_1C1EC52F4);
}

void sub_1C1ED5E78(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_213_2();
  a2(v3);
  OUTLINED_FUNCTION_48_12();
  OUTLINED_FUNCTION_174_3();
  OUTLINED_FUNCTION_124_3();
}

void sub_1C1ED5EB4(uint64_t a1)
{
  sub_1C1ED5EC8(a1, (void (*)(uint64_t))sub_1C1EC53B4);
}

void sub_1C1ED5EC8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_213_2();
  a2(v3);
  OUTLINED_FUNCTION_48_12();
  OUTLINED_FUNCTION_174_3();
  OUTLINED_FUNCTION_124_3();
}

void sub_1C1ED5F00(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3C010);
}

void sub_1C1ED5F14(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D8B624);
}

void sub_1C1ED5F28(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3BC5C);
}

void sub_1C1ED5F3C(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3BB9C);
}

void sub_1C1ED5F50(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D7F684);
}

void sub_1C1ED5F64(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D7F5C4);
}

void sub_1C1ED5F78(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D4F5B0);
}

void sub_1C1ED5F8C(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3BF2C);
}

void sub_1C1ED5FA0(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E79424);
}

void sub_1C1ED5FB4(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D7F78C);
}

void sub_1C1ED5FC8(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1EC52F4);
}

void sub_1C1ED5FDC(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1EC53B4);
}

void sub_1C1ED5FF0(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA8014);
}

void sub_1C1ED6004(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3BE48);
}

void sub_1C1ED6018(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3B9D4);
}

void sub_1C1ED602C(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1E3BAB8);
}

void sub_1C1ED6040(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1EC51EC);
}

void sub_1C1ED6054(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1EC512C);
}

void sub_1C1ED6068(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1E3BD64);
}

void sub_1C1ED607C(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1D94778);
}

void sub_1C1ED6090(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D7F4E0);
}

void sub_1C1ED60A4(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1D7F870);
}

void sub_1C1ED60B8(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D444B4);
}

void sub_1C1ED60CC(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1D90268);
}

void sub_1C1ED60E0(uint64_t a1, uint64_t a2)
{
  sub_1C1ED60F4(a1, a2, (void (*)(uint64_t))sub_1C1E80C24);
}

void sub_1C1ED60F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1C2019A64();
  a3(v4);
  OUTLINED_FUNCTION_48_12();
  OUTLINED_FUNCTION_174_3();
  OUTLINED_FUNCTION_124_3();
}

void sub_1C1ED6130(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1D6C3F8);
}

void sub_1C1ED6144(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA0D48);
}

void sub_1C1ED6158(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA0E08);
}

void sub_1C1ED616C(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA0A78);
}

void sub_1C1ED6180(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA09B8);
}

void sub_1C1ED6194(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA0B38);
}

void sub_1C1ED61A8(uint64_t a1, uint64_t a2)
{
  sub_1C1ED61BC(a1, a2, (void (*)(uint64_t))sub_1C1DA0C64);
}

void sub_1C1ED61BC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1C2019A64();
  a3(v4);
  OUTLINED_FUNCTION_48_12();
  OUTLINED_FUNCTION_174_3();
  OUTLINED_FUNCTION_124_3();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.currentUserQuery.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72DD30);
}

void sub_1C1ED6214(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.currentUserQuery.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.currentUserQuery.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.currentUserQuery.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_118_3(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasCurrentUserQuery.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearCurrentUserQuery()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.turnContext.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_49_0(*(int *)(v4 + 28));
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  v5 = OUTLINED_FUNCTION_5_1(v1);
  if (v7)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    *a1 = MEMORY[0x1E0DEE9D8];
    a1[1] = v8;
    a1[2] = v8;
    a1[3] = v8;
    v9 = OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_171(v9, &qword_1EF72DA98);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.turnContext.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = OUTLINED_FUNCTION_153_4();
  OUTLINED_FUNCTION_68_1(v0, &qword_1EF72DA98);
  OUTLINED_FUNCTION_142_1(v1, v2, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  v3 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.init()(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v2;
  a1[2] = v2;
  a1[3] = v2;
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72E2B8);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.turnContext.modify()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(v6);
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_14_0(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_125_5((uint64_t)v8);
  OUTLINED_FUNCTION_18_0(*(int *)(v9 + 28));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    *v1 = MEMORY[0x1E0DEE9D8];
    v1[1] = v13;
    v1[2] = v13;
    v1[3] = v13;
    v14 = OUTLINED_FUNCTION_134_1();
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF72DA98);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v10, v11, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED647C()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasTurnContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_124(v0 + *(int *)(v3 + 28), v1);
  v4 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  __swift_getEnumTagSinglePayload(v1, 1, v4);
  OUTLINED_FUNCTION_15_2(v1);
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearTurnContext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF72DA98);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterServiceRequest.conversationHistory.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.requestID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  if (OUTLINED_FUNCTION_12_2(*(int *)(v0 + 32)))
    OUTLINED_FUNCTION_29_1();
  else
    OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED6590()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.requestID.setter();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.requestID.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_173_4();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.requestID.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_118_3(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 32)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasRequestID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 32));
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearRequestID()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.trpCandidateID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  if (OUTLINED_FUNCTION_12_2(*(int *)(v0 + 36)))
    OUTLINED_FUNCTION_29_1();
  else
    OUTLINED_FUNCTION_28_2();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED66BC()
{
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.trpCandidateID.setter();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.trpCandidateID.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_173_4();
  OUTLINED_FUNCTION_11_1();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.trpCandidateID.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_118_3(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 36)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasTrpCandidateID.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 36));
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearTrpCandidateID()()
{
  _QWORD *v0;

  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.probingResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v2 = OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_49_0(*(int *)(v2 + 40));
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  v3 = OUTLINED_FUNCTION_5_1(v0);
  if (v5)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_156_2();
    type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    v6 = OUTLINED_FUNCTION_9_0();
    v10 = __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
    OUTLINED_FUNCTION_171(v10, &qword_1EF72DAA0);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v3, v4, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.probingResult.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = OUTLINED_FUNCTION_153_4();
  OUTLINED_FUNCTION_68_1(v0, &qword_1EF72DAA0);
  OUTLINED_FUNCTION_142_1(v1, v2, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  v3 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_64_2();
  v1 = v0 + *(int *)(OUTLINED_FUNCTION_177_5() + 20);
  v2 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  OUTLINED_FUNCTION_17_2(v1, v3, v4, v2);
  type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v5 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_12_1(v5, v6, v7, v8);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72E210);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72DDF0);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72DE80);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.probingResult.modify()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v2 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_179_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(v5);
  *(_QWORD *)(v1 + 24) = OUTLINED_FUNCTION_14_0(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  v8 = OUTLINED_FUNCTION_125_5((uint64_t)v7);
  OUTLINED_FUNCTION_18_0(*(int *)(v8 + 40));
  v9 = OUTLINED_FUNCTION_5_1(v0);
  if (v11)
  {
    OUTLINED_FUNCTION_69_0();
    OUTLINED_FUNCTION_156_2();
    v12 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    v13 = OUTLINED_FUNCTION_30_2(v12);
    OUTLINED_FUNCTION_32_0(v13, &qword_1EF72DAA0);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v9, v10, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED69C8()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasProbingResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_124(v0 + *(int *)(v3 + 40), v1);
  v4 = OUTLINED_FUNCTION_177_5();
  __swift_getEnumTagSinglePayload(v1, 1, v4);
  OUTLINED_FUNCTION_15_2(v1);
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearProbingResult()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF72DAA0);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.queryDecorationOutput.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_49_0(*(int *)(v4 + 44));
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v5 = OUTLINED_FUNCTION_5_1(v1);
  if (v7)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    *a1 = MEMORY[0x1E0DEE9D8];
    a1[1] = v8;
    a1[2] = v8;
    a1[3] = v8;
    a1[4] = v8;
    v9 = OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_171(v9, &qword_1EF72DAA8);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.queryDecorationOutput.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = OUTLINED_FUNCTION_153_4();
  OUTLINED_FUNCTION_68_1(v0, &qword_1EF72DAA8);
  OUTLINED_FUNCTION_142_1(v1, v2, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v3 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_98(v3, v4, v5, v6);
}

void Siri_Nlu_External_NluRouter_QueryDecorationOutput.init()(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v2;
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v2;
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72E170);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.queryDecorationOutput.modify()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t DecorationOutput;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(v6);
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_14_0(DecorationOutput);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_125_5((uint64_t)v8);
  OUTLINED_FUNCTION_18_0(*(int *)(v9 + 44));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    *v1 = MEMORY[0x1E0DEE9D8];
    v1[1] = v13;
    v1[2] = v13;
    v1[3] = v13;
    v1[4] = v13;
    v14 = OUTLINED_FUNCTION_134_1();
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF72DAA8);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v10, v11, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED6C5C()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hasQueryDecorationOutput.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t DecorationOutput;

  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_124(v0 + *(int *)(v3 + 44), v1);
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  __swift_getEnumTagSinglePayload(v1, 1, DecorationOutput);
  OUTLINED_FUNCTION_15_2(v1);
  OUTLINED_FUNCTION_101();
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterServiceRequest.clearQueryDecorationOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  OUTLINED_FUNCTION_32_0(v0, &qword_1EF72DAA8);
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v1 = OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.unknownFields.getter()
{
  return sub_1C1ED6E18();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1C1ED6E54(a1, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterServiceRequest.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_176_5();
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = MEMORY[0x1E0DEE9D8];
  v2 = (int *)OUTLINED_FUNCTION_176_5();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_26_1(v2[6]);
  v3 = (uint64_t)a1 + v2[7];
  v4 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  OUTLINED_FUNCTION_17_2(v3, v5, v6, v4);
  OUTLINED_FUNCTION_26_1(v2[8]);
  OUTLINED_FUNCTION_26_1(v2[9]);
  v7 = (uint64_t)a1 + v2[10];
  v8 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  OUTLINED_FUNCTION_17_2(v7, v9, v10, v8);
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v11 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_12_1(v11, v12, v13, v14);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLParseResponse.userParses.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLParseResponse.unknownFields.getter()
{
  return sub_1C1ED6E18();
}

uint64_t sub_1C1ED6E18()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v0 = OUTLINED_FUNCTION_253();
  v1(v0);
  OUTLINED_FUNCTION_8();
  v2 = OUTLINED_FUNCTION_70_3();
  return OUTLINED_FUNCTION_99(v2, v3, v4, v5);
}

uint64_t Siri_Nlu_External_NluRouter_NLParseResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1C1ED6E54(a1, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

uint64_t sub_1C1ED6E54(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_58_1(a1, a2);
  OUTLINED_FUNCTION_8();
  v2 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v2, v3, v4, v5);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLParseResponse.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_NLParseResponse.init()(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_PommesResponse.metadataDomainName.getter()
{
  sub_1C1D72A80(type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void sub_1C1ED6EF0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_PommesResponse.metadataDomainName.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_PommesResponse.metadataDomainName.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19300(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void Siri_Nlu_External_NluRouter_PommesResponse.metadataDomainName.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 20)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_PommesResponse.hasMetadataDomainName.getter()
{
  return sub_1C1D72B90(type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_PommesResponse.clearMetadataDomainName()()
{
  sub_1C1D72BB8(type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
}

uint64_t (*Siri_Nlu_External_NluRouter_PommesResponse.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_PommesResponse.init()(uint64_t a1@<X8>)
{
  sub_1C1ED7698(a1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_253();
  v1 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(v0);
  OUTLINED_FUNCTION_183_3(*(int *)(v1 + 20));
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72DF10);
}

void sub_1C1ED6FF4(char *a1)
{
  char v1;

  v1 = *a1;
  Siri_Nlu_External_NluRouter_RetrievedContext.type.setter(&v1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.type.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0) + 20)) = v2;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.type.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  v2 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0);
  OUTLINED_FUNCTION_182_0(*(int *)(v2 + 20));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_RetrievedContext.hasType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0) + 20)) != 3;
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.clearType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0) + 20)) = 3;
}

void Siri_Nlu_External_NluRouter_RetrievedContext.typedValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_166_1();
  v4 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(v3);
  OUTLINED_FUNCTION_45(v1 + *(int *)(v4 + 24), v0);
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  v5 = OUTLINED_FUNCTION_5_1(v0);
  if (v7)
  {
    OUTLINED_FUNCTION_69_0();
    v8 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    v9 = OUTLINED_FUNCTION_30_2(v8);
    OUTLINED_FUNCTION_32_0(v9, &qword_1EF724830);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.typedValue.setter(uint64_t a1)
{
  return sub_1C1ED7D04(a1, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.init()()
{
  return sub_1C1DCA910((void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72DFB0);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1)
{
  return sub_1C1D517D8(a1, (uint64_t *)&unk_1EF72E048);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.typedValue.modify()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v2 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_179_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v5);
  *(_QWORD *)(v1 + 24) = OUTLINED_FUNCTION_14_0(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  v8 = OUTLINED_FUNCTION_213((uint64_t)v7);
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(v8);
  OUTLINED_FUNCTION_18_0(*(int *)(v9 + 24));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    OUTLINED_FUNCTION_69_0();
    v13 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    v14 = OUTLINED_FUNCTION_30_2(v13);
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF724830);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v10, v11, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED7270()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.hasTypedValue.getter()
{
  sub_1C1ED7EAC(&qword_1EF724830);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.clearTypedValue()()
{
  sub_1C1ED7F30(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

uint64_t (*Siri_Nlu_External_NluRouter_RetrievedContext.unknownFields.modify())(void)
{
  return nullsub_1;
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_RetrievedContext::ContextType __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.init()()
{
  _BYTE *v0;
  SiriNLUTypes::Siri_Nlu_External_NluRouter_RetrievedContext::ContextType result;

  *v0 = 0;
  return result;
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_RetrievedContext::ContextType_optional __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  if (rawValue == 50)
    v2 = 2;
  else
    v2 = 3;
  if (rawValue == 1)
    v3 = 1;
  else
    v3 = v2;
  if (!rawValue)
    v3 = 0;
  *v1 = v3;
  return (SiriNLUTypes::Siri_Nlu_External_NluRouter_RetrievedContext::ContextType_optional)rawValue;
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.rawValue.getter()
{
  char *v0;

  return qword_1C20457E8[*v0];
}

BOOL sub_1C1ED731C(char *a1, char *a2)
{
  return sub_1C1D3FC9C(*a1, *a2);
}

void sub_1C1ED7328()
{
  unsigned __int8 *v0;

  sub_1C1ED5EC8(*v0, (void (*)(uint64_t))sub_1C1EDE348);
}

uint64_t sub_1C1ED7350()
{
  sub_1C1EDE28C();
  return sub_1C20194D0();
}

void sub_1C1ED7388(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED61BC(a1, *v1, (void (*)(uint64_t))sub_1C1EDE348);
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_RetrievedContext::ContextType_optional sub_1C1ED73BC(Swift::Int *a1)
{
  return Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.init(rawValue:)(*a1);
}

void sub_1C1ED73C4(uint64_t *a1@<X8>)
{
  *a1 = Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.rawValue.getter();
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.primitive.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_166_1();
  v4 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v3);
  OUTLINED_FUNCTION_45(v1 + *(int *)(v4 + 20), v0);
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  v5 = OUTLINED_FUNCTION_5_1(v0);
  if (v7)
  {
    OUTLINED_FUNCTION_69_0();
    v8 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    v9 = OUTLINED_FUNCTION_30_2(v8);
    OUTLINED_FUNCTION_32_0(v9, &qword_1EF724820);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.primitive.setter(uint64_t a1)
{
  return sub_1C1ED7B44(a1, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.init()()
{
  return sub_1C1DCA910((void (*)(_QWORD))type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72E0E0);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.primitive.modify()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v2 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v2);
  v3 = OUTLINED_FUNCTION_46_0();
  v4 = OUTLINED_FUNCTION_43_0(v3);
  v5 = OUTLINED_FUNCTION_179_0((uint64_t)v4);
  v6 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v5);
  *(_QWORD *)(v1 + 24) = OUTLINED_FUNCTION_14_0(v6);
  v7 = OUTLINED_FUNCTION_19_1();
  v8 = OUTLINED_FUNCTION_213((uint64_t)v7);
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v8);
  OUTLINED_FUNCTION_18_0(*(int *)(v9 + 20));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    OUTLINED_FUNCTION_69_0();
    v13 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    v14 = OUTLINED_FUNCTION_30_2(v13);
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF724820);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v10, v11, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED756C()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.hasPrimitive.getter()
{
  sub_1C1ED7794(&qword_1EF724820);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.clearPrimitive()()
{
  sub_1C1ED7818(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

uint64_t (*Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.app.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  OUTLINED_FUNCTION_49_0(*(int *)(v3 + 20));
  v4 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  v5 = OUTLINED_FUNCTION_5_1((uint64_t)v2);
  if (v7)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_26_1(*(int *)(v4 + 20));
    OUTLINED_FUNCTION_171(v8, &qword_1EF72DAB0);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.app.setter(uint64_t a1)
{
  return sub_1C1ED7B44(a1, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.init()(uint64_t a1@<X8>)
{
  sub_1C1ED7698(a1);
}

void sub_1C1ED7698(uint64_t a1@<X8>)
{
  _QWORD *v2;

  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v2 = (_QWORD *)(a1 + *(int *)(OUTLINED_FUNCTION_90_0() + 20));
  *v2 = 0;
  v2[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.app.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v4);
  v5 = OUTLINED_FUNCTION_46_0();
  v6 = OUTLINED_FUNCTION_43_0(v5);
  v7 = OUTLINED_FUNCTION_179_0((uint64_t)v6);
  v8 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(v7);
  *(_QWORD *)(v3 + 24) = OUTLINED_FUNCTION_14_0(v8);
  v9 = OUTLINED_FUNCTION_19_1();
  v10 = OUTLINED_FUNCTION_213((uint64_t)v9);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v10);
  OUTLINED_FUNCTION_18_0(*(int *)(v11 + 20));
  v12 = OUTLINED_FUNCTION_5_1(v0);
  if (v14)
  {
    v15 = OUTLINED_FUNCTION_69_0();
    v16 = (_QWORD *)(v2 + *(int *)(v1 + 20));
    *v16 = 0;
    v16[1] = 0;
    OUTLINED_FUNCTION_32_0(v15, &qword_1EF72DAB0);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v12, v13, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED7764()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.hasApp.getter()
{
  sub_1C1ED7794(&qword_1EF72DAB0);
}

void sub_1C1ED7794(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_102(a1);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_162_2(*(int *)(v3 + 20));
  v4 = OUTLINED_FUNCTION_90_0();
  __swift_getEnumTagSinglePayload(v1, 1, v4);
  OUTLINED_FUNCTION_39_0(v1);
  OUTLINED_FUNCTION_27_1();
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.clearApp()()
{
  sub_1C1ED7818(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

uint64_t sub_1C1ED7818(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OUTLINED_FUNCTION_53_3(a1);
  OUTLINED_FUNCTION_102_1(*(int *)(v1 + 20));
  OUTLINED_FUNCTION_90_0();
  v2 = OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_1(v2, v3, v4, v5);
}

uint64_t (*Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.unknownFields.modify())(void)
{
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.bundleIdentifier.getter()
{
  sub_1C1D72A80(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1ED7870(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.bundleIdentifier.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19300(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.bundleIdentifier.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 20)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.hasBundleIdentifier.getter()
{
  return sub_1C1D72B90(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.clearBundleIdentifier()()
{
  sub_1C1D72BB8(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

uint64_t (*Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_64_2();
  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0) + 20)) = 3;
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  v1 = OUTLINED_FUNCTION_9_0();
  return OUTLINED_FUNCTION_98(v1, v2, v3, v4);
}

void *static Siri_Nlu_External_NluRouter_RetrievedContext.ContextType.allCases.getter()
{
  return &unk_1E7BA6670;
}

void sub_1C1ED797C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA6670;
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.requiredContext.modify())(void)
{
  return nullsub_1;
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.originalRankedTools.modify())(void)
{
  return nullsub_1;
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.adjustedRankedTools.modify())(void)
{
  return nullsub_1;
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.originalRankedSpans.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_QueryDecorationOutput.adjustedRankedSpans.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_NluRouter_QueryDecorationOutput.adjustedRankedSpans.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.adjustedRankedSpans.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_QueryDecorationOutput.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v0 = OUTLINED_FUNCTION_253();
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(v0);
  OUTLINED_FUNCTION_8();
  v1 = OUTLINED_FUNCTION_70_3();
  return OUTLINED_FUNCTION_99(v1, v2, v3, v4);
}

uint64_t Siri_Nlu_External_NluRouter_QueryDecorationOutput.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t (*Siri_Nlu_External_NluRouter_QueryDecorationOutput.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.nlParseResponse.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_110_5();
  OUTLINED_FUNCTION_49_0(*(int *)(v4 + 20));
  type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  v5 = OUTLINED_FUNCTION_5_1(v1);
  if (v7)
  {
    *a1 = MEMORY[0x1E0DEE9D8];
    v8 = OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_171(v8, &qword_1EF72DAB8);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.nlParseResponse.setter(uint64_t a1)
{
  return sub_1C1ED7B44(a1, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

uint64_t sub_1C1ED7B44(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = OUTLINED_FUNCTION_82_0(a1, a2);
  OUTLINED_FUNCTION_102_1(*(int *)(v3 + 20));
  OUTLINED_FUNCTION_257_0(v2);
  OUTLINED_FUNCTION_90_0();
  v4 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.nlParseResponse.modify()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v3);
  v4 = OUTLINED_FUNCTION_46_0();
  v5 = OUTLINED_FUNCTION_43_0(v4);
  v6 = OUTLINED_FUNCTION_179_0((uint64_t)v5);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(v6);
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_14_0(v7);
  v8 = OUTLINED_FUNCTION_19_1();
  v9 = OUTLINED_FUNCTION_180_5((uint64_t)v8);
  OUTLINED_FUNCTION_18_0(*(int *)(v9 + 20));
  v10 = OUTLINED_FUNCTION_5_1(v0);
  if (v12)
  {
    *v1 = MEMORY[0x1E0DEE9D8];
    v13 = OUTLINED_FUNCTION_134_1();
    OUTLINED_FUNCTION_32_0(v13, &qword_1EF72DAB8);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v10, v11, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED7C14()
{
  sub_1C1ED7DE4();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.hasNlParseResponse.getter()
{
  sub_1C1ED7794(&qword_1EF72DAB8);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.clearNlParseResponse()()
{
  sub_1C1ED7818(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.pommesResponse.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v2 = OUTLINED_FUNCTION_110_5();
  OUTLINED_FUNCTION_49_0(*(int *)(v2 + 24));
  v3 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v4 = OUTLINED_FUNCTION_5_1(v0);
  if (v6)
  {
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_26_1(*(int *)(v3 + 20));
    OUTLINED_FUNCTION_171(v7, &qword_1EF72DAC0);
  }
  else
  {
    OUTLINED_FUNCTION_108_1(v4, v5, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  }
  OUTLINED_FUNCTION_101();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.pommesResponse.setter(uint64_t a1)
{
  return sub_1C1ED7D04(a1, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

uint64_t sub_1C1ED7D04(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = OUTLINED_FUNCTION_82_0(a1, a2);
  OUTLINED_FUNCTION_102_1(*(int *)(v3 + 24));
  OUTLINED_FUNCTION_257_0(v2);
  OUTLINED_FUNCTION_90_0();
  v4 = OUTLINED_FUNCTION_31_1();
  return OUTLINED_FUNCTION_12_1(v4, v5, v6, v7);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.pommesResponse.modify()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = OUTLINED_FUNCTION_34_1();
  OUTLINED_FUNCTION_50_0(v4);
  v5 = OUTLINED_FUNCTION_46_0();
  v6 = OUTLINED_FUNCTION_43_0(v5);
  v7 = OUTLINED_FUNCTION_179_0((uint64_t)v6);
  v8 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(v7);
  *(_QWORD *)(v3 + 24) = OUTLINED_FUNCTION_14_0(v8);
  v9 = OUTLINED_FUNCTION_19_1();
  v10 = OUTLINED_FUNCTION_180_5((uint64_t)v9);
  OUTLINED_FUNCTION_18_0(*(int *)(v10 + 24));
  v11 = OUTLINED_FUNCTION_5_1(v0);
  if (v13)
  {
    v14 = OUTLINED_FUNCTION_69_0();
    v15 = (_QWORD *)(v2 + *(int *)(v1 + 20));
    *v15 = 0;
    v15[1] = 0;
    OUTLINED_FUNCTION_32_0(v14, &qword_1EF72DAC0);
  }
  else
  {
    OUTLINED_FUNCTION_20_7(v11, v12, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  }
  OUTLINED_FUNCTION_27_1();
}

void sub_1C1ED7DD0()
{
  sub_1C1ED7DE4();
}

void sub_1C1ED7DE4()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t (*v2)(_QWORD);
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v7;

  OUTLINED_FUNCTION_42_3();
  v2 = v1;
  v3 = *(void **)v0;
  v4 = *(void **)(*(_QWORD *)v0 + 24);
  v5 = *(void **)(*(_QWORD *)v0 + 32);
  v6 = *(void **)(*(_QWORD *)v0 + 8);
  if ((v7 & 1) != 0)
  {
    sub_1C1D4B348(*(_QWORD *)(*(_QWORD *)v0 + 32), (uint64_t)v4, v1);
    OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_639((uint64_t)v4);
    OUTLINED_FUNCTION_23_1();
    sub_1C1D6C358((uint64_t)v5, v2);
  }
  else
  {
    OUTLINED_FUNCTION_57_1();
    OUTLINED_FUNCTION_639((uint64_t)v5);
    OUTLINED_FUNCTION_23_1();
  }
  free(v5);
  free(v4);
  free(v6);
  free(v3);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.hasPommesResponse.getter()
{
  sub_1C1ED7EAC(&qword_1EF72DAC0);
}

void sub_1C1ED7EAC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_102(a1);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v2);
  v3 = OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_162_2(*(int *)(v3 + 24));
  v4 = OUTLINED_FUNCTION_90_0();
  __swift_getEnumTagSinglePayload(v1, 1, v4);
  OUTLINED_FUNCTION_39_0(v1);
  OUTLINED_FUNCTION_27_1();
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.clearPommesResponse()()
{
  sub_1C1ED7F30(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

uint64_t sub_1C1ED7F30(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OUTLINED_FUNCTION_53_3(a1);
  OUTLINED_FUNCTION_102_1(*(int *)(v1 + 24));
  OUTLINED_FUNCTION_90_0();
  v2 = OUTLINED_FUNCTION_92_0();
  return OUTLINED_FUNCTION_12_1(v2, v3, v4, v5);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.unknownFields.modify())(void)
{
  return nullsub_1;
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnContext.activeTasks.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.executedTasks.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnContext.executedTasks.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.systemDialogActs.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.systemDialogActs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnContext.systemDialogActs.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.salientEntities.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.salientEntities.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnContext.salientEntities.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v0 = OUTLINED_FUNCTION_253();
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(v0);
  OUTLINED_FUNCTION_8();
  v1 = OUTLINED_FUNCTION_70_3();
  return OUTLINED_FUNCTION_99(v1, v2, v3, v4);
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t (*Siri_Nlu_External_NluRouter_NLRouterTurnContext.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_RequestSummary.userQuery.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72E358);
}

void sub_1C1ED80F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_RequestSummary.userQuery.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_RequestSummary.userQuery.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
}

void Siri_Nlu_External_NluRouter_RequestSummary.userQuery.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = OUTLINED_FUNCTION_88_0(a1);
  v3 = type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(v2);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v3 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v4;
  v1[1] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_RequestSummary.hasUserQuery.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_RequestSummary.clearUserQuery()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
}

uint64_t Siri_Nlu_External_NluRouter_RequestSummary.turnSummaries.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_External_NluRouter_RequestSummary.turnSummaries.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_External_NluRouter_RequestSummary.turnSummaries.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_External_NluRouter_RequestSummary.unknownFields.getter()
{
  return sub_1C1ED6E18();
}

uint64_t Siri_Nlu_External_NluRouter_RequestSummary.unknownFields.setter(uint64_t a1)
{
  return sub_1C1ED6E54(a1, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
}

uint64_t (*Siri_Nlu_External_NluRouter_RequestSummary.unknownFields.modify())(void)
{
  type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(0);
  return nullsub_1;
}

void Siri_Nlu_External_NluRouter_RequestSummary.init()(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = MEMORY[0x1E0DEE9D8];
  v1 = type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(0);
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_26_1(*(int *)(v1 + 24));
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_TurnSummary.executedQuery.getter()
{
  sub_1C1D72A80(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

uint64_t type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(uint64_t a1)
{
  return sub_1C1D517D8(a1, qword_1EF72E3F0);
}

void sub_1C1ED8274(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_TurnSummary.executedQuery.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_TurnSummary.executedQuery.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19300(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void Siri_Nlu_External_NluRouter_TurnSummary.executedQuery.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_169_1(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 20)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_TurnSummary.hasExecutedQuery.getter()
{
  return sub_1C1D72B90(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_TurnSummary.clearExecutedQuery()()
{
  sub_1C1D72BB8(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void Siri_Nlu_External_NluRouter_TurnSummary.responseText.getter()
{
  sub_1C1E19390(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void sub_1C1ED8324(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_External_NluRouter_TurnSummary.responseText.setter(v1, v2);
}

void Siri_Nlu_External_NluRouter_TurnSummary.responseText.setter(uint64_t a1, uint64_t a2)
{
  sub_1C1E19410(a1, a2, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void Siri_Nlu_External_NluRouter_TurnSummary.responseText.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = OUTLINED_FUNCTION_169_1(a1);
  if (OUTLINED_FUNCTION_105_0(*(int *)(v2 + 24)))
    OUTLINED_FUNCTION_23_2();
  else
    OUTLINED_FUNCTION_22_1();
  *v1 = v3;
  v1[1] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_TurnSummary.hasResponseText.getter()
{
  return sub_1C1E19488(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_TurnSummary.clearResponseText()()
{
  sub_1C1E194B0(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void Siri_Nlu_External_NluRouter_TurnSummary.executionSource.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_253();
  v1 = type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(v0);
  OUTLINED_FUNCTION_183_3(*(int *)(v1 + 28));
  OUTLINED_FUNCTION_82();
}

void sub_1C1ED83EC(char *a1)
{
  char v1;

  v1 = *a1;
  Siri_Nlu_External_NluRouter_TurnSummary.executionSource.setter(&v1);
}

void Siri_Nlu_External_NluRouter_TurnSummary.executionSource.setter(char *a1)
{
  uint64_t v1;
  char v2;

  v2 = *a1;
  *(_BYTE *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0) + 28)) = v2;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_TurnSummary.executionSource.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  v2 = type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0);
  OUTLINED_FUNCTION_182_0(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_External_NluRouter_TurnSummary.hasExecutionSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0) + 28)) != 3;
}

Swift::Void __swiftcall Siri_Nlu_External_NluRouter_TurnSummary.clearExecutionSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0) + 28)) = 3;
}

uint64_t (*Siri_Nlu_External_NluRouter_TurnSummary.unknownFields.modify())(void)
{
  return nullsub_1;
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_TurnSummary::ExecutionSource __swiftcall Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.init()()
{
  _BYTE *v0;
  SiriNLUTypes::Siri_Nlu_External_NluRouter_TurnSummary::ExecutionSource result;

  *v0 = 0;
  return result;
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_TurnSummary::ExecutionSource_optional __swiftcall Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SiriNLUTypes::Siri_Nlu_External_NluRouter_TurnSummary::ExecutionSource_optional)rawValue;
}

uint64_t Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void sub_1C1ED8508()
{
  unsigned __int8 *v0;

  sub_1C1ED5EC8(*v0, (void (*)(uint64_t))sub_1C1EDE42C);
}

uint64_t sub_1C1ED8530()
{
  sub_1C1EDE2C8();
  return sub_1C20194D0();
}

void sub_1C1ED8568(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_1C1ED61BC(a1, *v1, (void (*)(uint64_t))sub_1C1EDE42C);
}

SiriNLUTypes::Siri_Nlu_External_NluRouter_TurnSummary::ExecutionSource_optional sub_1C1ED8598(Swift::Int *a1)
{
  return Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.init(rawValue:)(*a1);
}

void sub_1C1ED85A0(uint64_t *a1@<X8>)
{
  *a1 = Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.rawValue.getter();
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_External_NluRouter_TurnSummary.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_64_2();
  v1 = type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0);
  OUTLINED_FUNCTION_26_1(*(int *)(v1 + 20));
  OUTLINED_FUNCTION_26_1(*(int *)(v2 + 24));
  *(_BYTE *)(v0 + *(int *)(v3 + 28)) = 3;
  OUTLINED_FUNCTION_82();
}

void *static Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource.allCases.getter()
{
  return &unk_1E7BA6698;
}

void sub_1C1ED8608(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7BA6698;
}

unint64_t static Siri_Nlu_External_NluRouter_NLRouterServiceRequest.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(51);
}

uint64_t sub_1C1ED8630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D918);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D918);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A4D0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "current_user_query";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "turn_context";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "conversation_history";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "request_id";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "trp_candidate_id";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "probing_result";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "query_decoration_output";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_NLRouterServiceRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724718, (uint64_t)qword_1EF72D918, a1);
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_298_0();
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1ED8998();
          break;
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EDD708();
          break;
        case 4:
          OUTLINED_FUNCTION_56();
          sub_1C1ED8A2C();
          break;
        case 5:
          OUTLINED_FUNCTION_56();
          sub_1C1ED8A8C();
          break;
        case 6:
          OUTLINED_FUNCTION_56();
          sub_1C1ED8AEC();
          break;
        case 7:
          OUTLINED_FUNCTION_56();
          sub_1C1ED8B80();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

uint64_t sub_1C1ED8998()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  sub_1C1D488DC(&qword_1EF72DAE0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  return sub_1C20195B4();
}

uint64_t sub_1C1ED8A2C()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  return sub_1C2019578();
}

uint64_t sub_1C1ED8A8C()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  return sub_1C2019578();
}

uint64_t sub_1C1ED8AEC()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  sub_1C1D488DC(&qword_1EF72DAD8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  return sub_1C20195B4();
}

uint64_t sub_1C1ED8B80()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
  type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  sub_1C1D488DC(&qword_1EF72DAD0, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  return sub_1C20195B4();
}

void Siri_Nlu_External_NluRouter_NLRouterServiceRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t DecorationOutput;
  uint64_t v28;
  uint64_t v29;
  int *v30;

  OUTLINED_FUNCTION_40_2();
  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_108(v6, (uint64_t)v24);
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_23();
  v28 = v11;
  v12 = OUTLINED_FUNCTION_55();
  v29 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(v12);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_150_1(v14, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v15);
  v16 = OUTLINED_FUNCTION_37();
  v17 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(v16);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v18);
  v19 = OUTLINED_FUNCTION_166_1();
  v30 = (int *)type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(v19);
  if (!*(_QWORD *)(v1 + v30[6] + 8) || (OUTLINED_FUNCTION_112_4(), (v4 = v2) == 0))
  {
    sub_1C1D48918(v1 + v30[7], v3, &qword_1EF72DA98);
    if (__swift_getEnumTagSinglePayload(v3, 1, v17) == 1)
    {
      sub_1C1D48944(v3, &qword_1EF72DA98);
    }
    else
    {
      v24 = v9;
      sub_1C1E10758(v3, v0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
      sub_1C1D488DC(&qword_1EF72DAE0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
      OUTLINED_FUNCTION_111_5();
      v4 = v2;
      v9 = v24;
      sub_1C1D6C358(v0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
      if (v2)
        goto LABEL_19;
    }
    if (!*(_QWORD *)(*(_QWORD *)v1 + 16)
      || (type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(0),
          sub_1C1D488DC(&qword_1EF72DAC8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary), v2 = v4, sub_1C20196BC(), !v4))
    {
      if (!*(_QWORD *)(v1 + v30[8] + 8) || (OUTLINED_FUNCTION_112_4(), !v2))
      {
        if (!*(_QWORD *)(v1 + v30[9] + 8) || (OUTLINED_FUNCTION_112_4(), !v2))
        {
          v20 = v28;
          sub_1C1D48918(v1 + v30[10], v28, &qword_1EF72DAA0);
          if (__swift_getEnumTagSinglePayload(v20, 1, v29) == 1)
          {
            sub_1C1D48944(v20, &qword_1EF72DAA0);
          }
          else
          {
            v21 = v20;
            v22 = v25;
            sub_1C1E10758(v21, v25, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
            sub_1C1D488DC(&qword_1EF72DAD8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
            OUTLINED_FUNCTION_111_5();
            sub_1C1D6C358(v22, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
            if (v2)
              goto LABEL_19;
          }
          v23 = v26;
          sub_1C1D48918(v1 + v30[11], v26, &qword_1EF72DAA8);
          if (__swift_getEnumTagSinglePayload(v23, 1, DecorationOutput) == 1)
          {
            sub_1C1D48944(v23, &qword_1EF72DAA8);
LABEL_18:
            sub_1C2019464();
            goto LABEL_19;
          }
          sub_1C1E10758(v23, (uint64_t)v9, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
          sub_1C1D488DC(&qword_1EF72DAD0, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
          OUTLINED_FUNCTION_111_5();
          sub_1C1D6C358((uint64_t)v9, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
          if (!v2)
            goto LABEL_18;
        }
      }
    }
  }
LABEL_19:
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_NLRouterServiceRequest.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  int *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t DecorationOutput;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  OUTLINED_FUNCTION_5();
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_8();
  v119 = *(_QWORD *)(v6 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_28();
  v118 = v8;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v9);
  OUTLINED_FUNCTION_175_0();
  v117 = v10;
  v11 = OUTLINED_FUNCTION_55();
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(v11);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_23();
  v116 = v13;
  v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAE8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_23();
  v124 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_28();
  v120 = v17;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v18);
  v126 = (char *)&v114 - v19;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v20);
  OUTLINED_FUNCTION_175_0();
  v127 = v21;
  v22 = OUTLINED_FUNCTION_55();
  v131 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(v22);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v23);
  OUTLINED_FUNCTION_23();
  v121 = v24;
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAF0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_108(v26, (uint64_t)v114);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v27);
  OUTLINED_FUNCTION_28();
  v125 = v28;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v29);
  v129 = (uint64_t)&v114 - v30;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v31);
  OUTLINED_FUNCTION_175_0();
  v130 = v32;
  v33 = OUTLINED_FUNCTION_55();
  v34 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(v33);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v35);
  OUTLINED_FUNCTION_138();
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAF8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v37);
  OUTLINED_FUNCTION_223_0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
  OUTLINED_FUNCTION_2();
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v114 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v114 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v114 - v45;
  v47 = OUTLINED_FUNCTION_176_5();
  v48 = *(int *)(v47 + 24);
  v133 = v5;
  v134 = v3;
  v49 = *(_QWORD *)(v3 + v48 + 8);
  if (!*(_QWORD *)(v5 + v48 + 8))
  {
    v115 = v6;
    if (v49)
      goto LABEL_40;
LABEL_10:
    v55 = v133;
    v56 = (int *)v47;
    sub_1C1D48918(v133 + *(int *)(v47 + 28), (uint64_t)v46, &qword_1EF72DA98);
    v114 = v56;
    OUTLINED_FUNCTION_12_4(v134 + v56[7], (uint64_t)v44);
    v57 = v0 + *(int *)(v36 + 48);
    OUTLINED_FUNCTION_12_4((uint64_t)v46, v0);
    OUTLINED_FUNCTION_12_4((uint64_t)v44, v57);
    OUTLINED_FUNCTION_9(v0, 1, v34);
    if (v52)
    {
      OUTLINED_FUNCTION_166((uint64_t)v44);
      OUTLINED_FUNCTION_166((uint64_t)v46);
      v58 = OUTLINED_FUNCTION_9(v57, 1, v34);
      if (v52)
      {
        OUTLINED_FUNCTION_171(v58, &qword_1EF72DA98);
        goto LABEL_21;
      }
    }
    else
    {
      sub_1C1D48918(v0, (uint64_t)v41, &qword_1EF72DA98);
      OUTLINED_FUNCTION_9(v57, 1, v34);
      if (!v59)
      {
        sub_1C1E10758(v57, v1, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
        v62 = static Siri_Nlu_External_NluRouter_NLRouterTurnContext.== infix(_:_:)(v41, v1);
        OUTLINED_FUNCTION_180_1(v1);
        OUTLINED_FUNCTION_152((uint64_t)v44);
        OUTLINED_FUNCTION_152((uint64_t)v46);
        OUTLINED_FUNCTION_180_1((uint64_t)v41);
        OUTLINED_FUNCTION_152(v0);
        if ((v62 & 1) == 0)
          goto LABEL_40;
LABEL_21:
        v63 = v55;
        v64 = v134;
        sub_1C1D42F90();
        if ((v65 & 1) == 0)
          goto LABEL_40;
        v66 = v114;
        v67 = v114[8];
        v68 = *(_QWORD *)(v64 + v67 + 8);
        if (*(_QWORD *)(v63 + v67 + 8))
        {
          if (!v68)
            goto LABEL_40;
          OUTLINED_FUNCTION_4(v63 + v67);
          if (!v52 || v69 != v70)
          {
            v72 = OUTLINED_FUNCTION_13();
            v66 = v114;
            if ((v72 & 1) == 0)
              goto LABEL_40;
          }
        }
        else if (v68)
        {
          goto LABEL_40;
        }
        v73 = v66[9];
        v74 = *(_QWORD *)(v134 + v73 + 8);
        if (*(_QWORD *)(v133 + v73 + 8))
        {
          if (!v74)
            goto LABEL_40;
          OUTLINED_FUNCTION_4(v133 + v73);
          if (!v52 || v75 != v76)
          {
            v78 = OUTLINED_FUNCTION_13();
            v66 = v114;
            if ((v78 & 1) == 0)
              goto LABEL_40;
          }
        }
        else if (v74)
        {
          goto LABEL_40;
        }
        v79 = v130;
        v80 = v66;
        sub_1C1D48918(v133 + v66[10], v130, &qword_1EF72DAA0);
        v81 = v134;
        v82 = v129;
        OUTLINED_FUNCTION_12_4(v134 + v80[10], v129);
        v83 = v132;
        v84 = v132 + *(int *)(v128 + 48);
        OUTLINED_FUNCTION_12_4(v79, v132);
        OUTLINED_FUNCTION_12_4(v82, v84);
        v85 = v131;
        OUTLINED_FUNCTION_9(v83, 1, v131);
        if (v52)
        {
          OUTLINED_FUNCTION_166(v82);
          OUTLINED_FUNCTION_166(v79);
          OUTLINED_FUNCTION_9(v84, 1, v85);
          v88 = (uint64_t)v126;
          v87 = v127;
          if (v52)
          {
            sub_1C1D48944(v83, &qword_1EF72DAA0);
LABEL_51:
            v95 = v114;
            OUTLINED_FUNCTION_12_4(v133 + v114[11], v87);
            OUTLINED_FUNCTION_12_4(v81 + v95[11], v88);
            v83 = v124;
            v96 = v124 + *(int *)(v122 + 48);
            v97 = OUTLINED_FUNCTION_62_1();
            OUTLINED_FUNCTION_12_4(v97, v98);
            OUTLINED_FUNCTION_12_4(v88, v96);
            v99 = DecorationOutput;
            OUTLINED_FUNCTION_9(v83, 1, DecorationOutput);
            if (v52)
            {
              OUTLINED_FUNCTION_166(v88);
              OUTLINED_FUNCTION_166(v87);
              OUTLINED_FUNCTION_9(v96, 1, v99);
              if (v52)
              {
                sub_1C1D48944(v83, &qword_1EF72DAA8);
                goto LABEL_62;
              }
            }
            else
            {
              v101 = v120;
              OUTLINED_FUNCTION_73_5(v83, v100, &qword_1EF72DAA8);
              OUTLINED_FUNCTION_9(v96, 1, v99);
              if (!v102)
              {
                v104 = v116;
                OUTLINED_FUNCTION_188_2(v96);
                OUTLINED_FUNCTION_199();
                static Siri_Nlu_External_NluRouter_QueryDecorationOutput.== infix(_:_:)();
                v106 = v105;
                OUTLINED_FUNCTION_180_1(v104);
                OUTLINED_FUNCTION_39_0(v88);
                OUTLINED_FUNCTION_39_0(v87);
                OUTLINED_FUNCTION_180_1(v101);
                OUTLINED_FUNCTION_39_0(v83);
                if ((v106 & 1) == 0)
                  goto LABEL_40;
LABEL_62:
                v107 = v114;
                v108 = v115;
                v109 = v119;
                v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16);
                v111 = v117;
                v110(v117, v133 + v114[5], v115);
                v112 = v118;
                v110(v118, v81 + v107[5], v108);
                sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
                OUTLINED_FUNCTION_62_1();
                sub_1C2019944();
                v113 = *(void (**)(uint64_t, uint64_t))(v109 + 8);
                v113(v112, v108);
                v113(v111, v108);
                goto LABEL_40;
              }
              OUTLINED_FUNCTION_15_2(v88);
              OUTLINED_FUNCTION_15_2(v87);
              OUTLINED_FUNCTION_194_4(v103, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
            }
            v60 = &qword_1EF72DAE8;
            goto LABEL_60;
          }
        }
        else
        {
          v89 = v125;
          OUTLINED_FUNCTION_73_5(v83, v86, &qword_1EF72DAA0);
          OUTLINED_FUNCTION_9(v84, 1, v85);
          v88 = (uint64_t)v126;
          v87 = v127;
          if (!v90)
          {
            v92 = v121;
            OUTLINED_FUNCTION_188_2(v84);
            OUTLINED_FUNCTION_199();
            static Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.== infix(_:_:)();
            v94 = v93;
            OUTLINED_FUNCTION_180_1(v92);
            OUTLINED_FUNCTION_39_0(v82);
            OUTLINED_FUNCTION_39_0(v79);
            OUTLINED_FUNCTION_180_1(v89);
            OUTLINED_FUNCTION_39_0(v83);
            if ((v94 & 1) == 0)
              goto LABEL_40;
            goto LABEL_51;
          }
          OUTLINED_FUNCTION_15_2(v82);
          OUTLINED_FUNCTION_15_2(v79);
          OUTLINED_FUNCTION_194_4(v91, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
        }
        v60 = &qword_1EF72DAF0;
LABEL_60:
        v61 = v83;
        goto LABEL_19;
      }
      OUTLINED_FUNCTION_15_2((uint64_t)v44);
      OUTLINED_FUNCTION_15_2((uint64_t)v46);
      sub_1C1D6C358((uint64_t)v41, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
    }
    v60 = &qword_1EF72DAF8;
    v61 = v0;
LABEL_19:
    sub_1C1D48944(v61, v60);
    goto LABEL_40;
  }
  if (v49)
  {
    v115 = v6;
    OUTLINED_FUNCTION_4(v5 + v48);
    v52 = v52 && v50 == v51;
    if (v52)
      goto LABEL_10;
    v53 = v47;
    v54 = sub_1C2019A10();
    v47 = v53;
    if ((v54 & 1) != 0)
      goto LABEL_10;
  }
LABEL_40:
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterServiceRequest.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, &qword_1EF72DB00, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

unint64_t sub_1C1ED9868()
{
  static Siri_Nlu_External_NluRouter_NLRouterServiceRequest.protoMessageName.getter();
  return 0xD000000000000033;
}

void sub_1C1ED988C()
{
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.decodeMessage<A>(decoder:)();
}

void sub_1C1ED98A0()
{
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.traverse<A>(visitor:)();
}

uint64_t sub_1C1ED98B4()
{
  sub_1C1D488DC(&qword_1EF72E488, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
  return sub_1C20194C4();
}

uint64_t sub_1C1ED9908()
{
  sub_1C1D488DC(&qword_1EF72DC18, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
  return sub_1C2019608();
}

uint64_t sub_1C1ED994C()
{
  sub_1C1D488DC(&qword_1EF72DC18, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_NLParseResponse.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(44);
}

uint64_t sub_1C1ED99B8()
{
  return sub_1C1EDB6D8();
}

uint64_t static Siri_Nlu_External_NluRouter_NLParseResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724720, (uint64_t)&unk_1EF72D930, a1);
}

void Siri_Nlu_External_NluRouter_NLParseResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
        OUTLINED_FUNCTION_97_3();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_26_2();
}

void Siri_Nlu_External_NluRouter_NLParseResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_230_0();
  OUTLINED_FUNCTION_165_2();
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for Siri_Nlu_External_UserParse(0),
        sub_1C1D488DC(&qword_1EF723390, type metadata accessor for Siri_Nlu_External_UserParse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_UserParse), OUTLINED_FUNCTION_170_4(), !v1))
  {
    type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
    OUTLINED_FUNCTION_107_1();
  }
  OUTLINED_FUNCTION_225();
}

#error "1C1ED9B34: call analysis failed (funcsize=42)"

uint64_t Siri_Nlu_External_NluRouter_NLParseResponse.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, &qword_1EF72DB08, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

unint64_t sub_1C1ED9BBC()
{
  static Siri_Nlu_External_NluRouter_NLParseResponse.protoMessageName.getter();
  return 0xD00000000000002CLL;
}

void sub_1C1ED9BE0()
{
  Siri_Nlu_External_NluRouter_NLParseResponse.decodeMessage<A>(decoder:)();
}

void sub_1C1ED9BF4()
{
  Siri_Nlu_External_NluRouter_NLParseResponse.traverse<A>(visitor:)();
}

uint64_t sub_1C1ED9C08()
{
  sub_1C1D488DC(&qword_1EF72E480, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
  return sub_1C20194C4();
}

uint64_t sub_1C1ED9C5C()
{
  sub_1C1D488DC(&qword_1EF72DB78, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
  return sub_1C2019608();
}

uint64_t sub_1C1ED9CA0()
{
  sub_1C1D488DC(&qword_1EF72DB78, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_PommesResponse.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(43);
}

uint64_t sub_1C1ED9D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D948);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D948);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C202A2C0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 4;
  *(_QWORD *)v5 = "metadata_domain_name";
  *(_QWORD *)(v5 + 8) = 20;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF20];
  v7 = sub_1C20198F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_PommesResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724728, (uint64_t)qword_1EF72D948, a1);
}

void Siri_Nlu_External_NluRouter_PommesResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 4)
        OUTLINED_FUNCTION_454();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

uint64_t Siri_Nlu_External_NluRouter_PommesResponse.traverse<A>(visitor:)()
{
  return sub_1C1EDB85C();
}

void static Siri_Nlu_External_NluRouter_PommesResponse.== infix(_:_:)()
{
  sub_1C1EDB8CC();
}

uint64_t Siri_Nlu_External_NluRouter_PommesResponse.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, &qword_1EF72DB10, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
}

unint64_t sub_1C1ED9EC0()
{
  static Siri_Nlu_External_NluRouter_PommesResponse.protoMessageName.getter();
  return 0xD00000000000002BLL;
}

void sub_1C1ED9EE4()
{
  Siri_Nlu_External_NluRouter_PommesResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1ED9EF8()
{
  return Siri_Nlu_External_NluRouter_PommesResponse.traverse<A>(visitor:)();
}

uint64_t sub_1C1ED9F0C()
{
  sub_1C1D488DC(&qword_1EF72E478, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
  return sub_1C20194C4();
}

uint64_t sub_1C1ED9F60()
{
  sub_1C1D488DC(&qword_1EF72DB70, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
  return sub_1C2019608();
}

uint64_t sub_1C1ED9FA4()
{
  sub_1C1D488DC(&qword_1EF72DB70, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_RetrievedContext.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(45);
}

uint64_t sub_1C1EDA010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D960);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D960);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 3;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 5;
  *(_QWORD *)v11 = "typed_value";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_RetrievedContext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724730, (uint64_t)qword_1EF72D960, a1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_230_0();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 5)
      {
        sub_1C1EDC388();
      }
      else if (v1 == 3)
      {
        OUTLINED_FUNCTION_56();
        sub_1C1EDA224();
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

uint64_t sub_1C1EDA224()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0);
  sub_1C1EDE28C();
  return sub_1C2019518();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_47_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v4);
  v5 = OUTLINED_FUNCTION_22_4();
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v5);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_37();
  v8 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(v7);
  if (*(_BYTE *)(v2 + *(int *)(v8 + 20)) == 3 || (sub_1C1EDE28C(), OUTLINED_FUNCTION_145_1(), (v0 = v1) == 0))
  {
    sub_1C1D48918(v2 + *(int *)(v8 + 24), v3, &qword_1EF724830);
    v9 = OUTLINED_FUNCTION_99_5();
    if (v10)
    {
      OUTLINED_FUNCTION_137_2(v9, &qword_1EF724830);
LABEL_7:
      OUTLINED_FUNCTION_31_3();
      goto LABEL_8;
    }
    OUTLINED_FUNCTION_374();
    OUTLINED_FUNCTION_177_2(&qword_1EF72DB18, v11, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_77_6();
    OUTLINED_FUNCTION_82_1();
    if (!v0)
      goto LABEL_7;
  }
LABEL_8:
  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_5();
  v4 = v3;
  v6 = v5;
  v41 = OUTLINED_FUNCTION_8();
  v7 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  OUTLINED_FUNCTION_12_9(v8, v40[0]);
  MEMORY[0x1E0C80A78](v9);
  v42 = (uint64_t)v40 - v10;
  v11 = OUTLINED_FUNCTION_55();
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v11);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v13);
  OUTLINED_FUNCTION_150_1(v14, v40[0]);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724838);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v16);
  OUTLINED_FUNCTION_138();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_144_0();
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v40 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = OUTLINED_FUNCTION_214();
  v23 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(v22);
  v24 = v23;
  v25 = *(int *)(v23 + 20);
  v26 = *(char *)(v6 + v25);
  v44 = v4;
  v27 = *(char *)(v4 + v25);
  if (v26 == 3)
  {
    if ((_DWORD)v27 != 3)
      goto LABEL_17;
  }
  else if ((_DWORD)v27 == 3 || qword_1C20457E8[v26] != qword_1C20457E8[v27])
  {
    goto LABEL_17;
  }
  v40[0] = v7;
  OUTLINED_FUNCTION_43_3(v6 + *(int *)(v23 + 24), v2);
  OUTLINED_FUNCTION_43_3(v44 + *(int *)(v24 + 24), (uint64_t)v21);
  v28 = v0 + *(int *)(v15 + 48);
  OUTLINED_FUNCTION_43_3(v2, v0);
  OUTLINED_FUNCTION_43_3((uint64_t)v21, v28);
  v29 = OUTLINED_FUNCTION_9(v0, 1, v12);
  if (v32)
  {
    OUTLINED_FUNCTION_39_0((uint64_t)v21);
    OUTLINED_FUNCTION_39_0(v2);
    v31 = OUTLINED_FUNCTION_9(v28, 1, v12);
    if (v32)
    {
      OUTLINED_FUNCTION_38_1(v31, &qword_1EF724830);
LABEL_16:
      v38 = v42;
      OUTLINED_FUNCTION_54_2(v42, v6);
      v39 = v43;
      OUTLINED_FUNCTION_54_2(v43, v44);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_181(v39);
      OUTLINED_FUNCTION_181(v38);
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_116_1(v29, v30, &qword_1EF724830);
  OUTLINED_FUNCTION_9(v28, 1, v12);
  if (v32)
  {
    OUTLINED_FUNCTION_166((uint64_t)v21);
    OUTLINED_FUNCTION_166(v2);
    OUTLINED_FUNCTION_214_0(v33, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
LABEL_14:
    OUTLINED_FUNCTION_38_1(v31, &qword_1EF724838);
    goto LABEL_17;
  }
  sub_1C1E10758(v28, v40[1], type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.== infix(_:_:)();
  v35 = v34;
  v36 = OUTLINED_FUNCTION_199();
  sub_1C1D6C358(v36, v37);
  OUTLINED_FUNCTION_189_0((uint64_t)v21);
  OUTLINED_FUNCTION_189_0(v2);
  sub_1C1D6C358(v1, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  OUTLINED_FUNCTION_189_0(v0);
  if ((v35 & 1) != 0)
    goto LABEL_16;
LABEL_17:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, &qword_1EF72DB28, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

unint64_t sub_1C1EDA6DC()
{
  static Siri_Nlu_External_NluRouter_RetrievedContext.protoMessageName.getter();
  return 0xD00000000000002DLL;
}

void sub_1C1EDA6F8()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.decodeMessage<A>(decoder:)();
}

void sub_1C1EDA70C()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDA720()
{
  sub_1C1D488DC(&qword_1EF72E470, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDA774()
{
  sub_1C1D488DC(&qword_1EF72DB60, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
  return sub_1C2019608();
}

uint64_t sub_1C1EDA7B8()
{
  sub_1C1D488DC(&qword_1EF72DB60, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
  return sub_1C2019614();
}

uint64_t sub_1C1EDA80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D978);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D978);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "CONTEXT_TYPE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "CONTEXT_TYPE_APP_IN_FOCUS_BUNDLE_ID";
  *((_QWORD *)v11 + 1) = 35;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 50;
  *(_QWORD *)v13 = "CONTEXT_TYPE_OTHER";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_RetrievedContext.ContextType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724738, (uint64_t)qword_1EF72D978, a1);
}

uint64_t sub_1C1EDA9B4()
{
  uint64_t result;

  result = sub_1C201998C();
  qword_1EF72D990 = 0xD00000000000002DLL;
  *(_QWORD *)algn_1EF72D998 = 0x80000001C2051E20;
  return result;
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724740);
}

uint64_t sub_1C1EDAA44()
{
  return sub_1C1EDB6D8();
}

uint64_t static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724748, (uint64_t)&unk_1EF72D9A0, a1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_230_0();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
        OUTLINED_FUNCTION_85_8();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_47_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v2 = OUTLINED_FUNCTION_22_4();
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v2);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_37();
  v5 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v4);
  OUTLINED_FUNCTION_113_3(v5);
  v6 = OUTLINED_FUNCTION_99_5();
  if (v7)
  {
    OUTLINED_FUNCTION_137_2(v6, &qword_1EF724820);
LABEL_5:
    OUTLINED_FUNCTION_31_3();
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_374();
  OUTLINED_FUNCTION_177_2(&qword_1EF72DB30, v8, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  OUTLINED_FUNCTION_77_6();
  OUTLINED_FUNCTION_82_1();
  if (!v0)
    goto LABEL_5;
LABEL_6:
  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  v36 = OUTLINED_FUNCTION_8();
  v40 = *(_QWORD *)(v36 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_9(v9, v35[0]);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v35 - v11;
  v12 = OUTLINED_FUNCTION_55();
  v13 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v12);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_195_1(v15, v35[0]);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724828);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_144_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_86();
  MEMORY[0x1E0C80A78](v20);
  v21 = OUTLINED_FUNCTION_214();
  v22 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(v21);
  v23 = *(int *)(v22 + 20);
  v35[2] = v7;
  OUTLINED_FUNCTION_124(v7 + v23, v3);
  v24 = *(int *)(v22 + 20);
  v37 = v5;
  OUTLINED_FUNCTION_124(v5 + v24, v0);
  v25 = (uint64_t *)(v1 + *(int *)(v16 + 48));
  OUTLINED_FUNCTION_124(v3, v1);
  OUTLINED_FUNCTION_124(v0, (uint64_t)v25);
  v26 = OUTLINED_FUNCTION_9(v1, 1, v13);
  if (v29)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    v28 = OUTLINED_FUNCTION_9((uint64_t)v25, 1, v13);
    if (v29)
    {
      OUTLINED_FUNCTION_38_1(v28, &qword_1EF724820);
LABEL_11:
      OUTLINED_FUNCTION_19_8();
      v34 = v39;
      OUTLINED_FUNCTION_54_2(v39, v37);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_181(v34);
      OUTLINED_FUNCTION_181((uint64_t)v25);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_116_1(v26, v27, &qword_1EF724820);
  OUTLINED_FUNCTION_9((uint64_t)v25, 1, v13);
  if (v29)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    OUTLINED_FUNCTION_214_0(v30, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
LABEL_9:
    OUTLINED_FUNCTION_38_1(v28, &qword_1EF724828);
    goto LABEL_12;
  }
  v31 = v35[1];
  OUTLINED_FUNCTION_257_0((uint64_t)v25);
  static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.== infix(_:_:)();
  v33 = v32;
  OUTLINED_FUNCTION_34_8(v31);
  v25 = &qword_1EF724820;
  OUTLINED_FUNCTION_189_0(v0);
  OUTLINED_FUNCTION_189_0(v3);
  OUTLINED_FUNCTION_34_8(v2);
  OUTLINED_FUNCTION_189_0(v1);
  if ((v33 & 1) != 0)
    goto LABEL_11;
LABEL_12:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, &qword_1EF72DB38, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

void sub_1C1EDAE50()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.decodeMessage<A>(decoder:)();
}

void sub_1C1EDAE64()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDAE78()
{
  sub_1C1D488DC(&qword_1EF72E468, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDAECC()
{
  sub_1C1D488DC(&qword_1EF72DB18, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  return sub_1C2019608();
}

uint64_t sub_1C1EDAF10()
{
  sub_1C1D488DC(&qword_1EF72DB18, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
  return sub_1C2019614();
}

uint64_t sub_1C1EDAF64()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EF724740 != -1)
    swift_once();
  v1 = qword_1EF72D990;
  v2 = *(_QWORD *)algn_1EF72D998;
  swift_bridgeObjectRetain();
  result = sub_1C201998C();
  qword_1EF72D9B8 = v1;
  unk_1EF72D9C0 = v2;
  return result;
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724750);
}

uint64_t sub_1C1EDB018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72D9C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72D9C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C202A2C0;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 17;
  *(_QWORD *)v5 = "app";
  *(_QWORD *)(v5 + 8) = 3;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = sub_1C20198F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724758, (uint64_t)qword_1EF72D9C8, a1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_230_0();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 17)
        OUTLINED_FUNCTION_85_8();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_47_2();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v1);
  v2 = OUTLINED_FUNCTION_22_4();
  type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(v2);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v3);
  v4 = OUTLINED_FUNCTION_37();
  v5 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v4);
  OUTLINED_FUNCTION_113_3(v5);
  v6 = OUTLINED_FUNCTION_99_5();
  if (v7)
  {
    OUTLINED_FUNCTION_137_2(v6, &qword_1EF72DAB0);
LABEL_5:
    OUTLINED_FUNCTION_31_3();
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_374();
  OUTLINED_FUNCTION_177_2(&qword_1EF72DB40, v8, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  OUTLINED_FUNCTION_120_1();
  OUTLINED_FUNCTION_77_6();
  OUTLINED_FUNCTION_82_1();
  if (!v0)
    goto LABEL_5;
LABEL_6:
  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35[3];
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_5();
  v5 = v4;
  v7 = v6;
  v36 = OUTLINED_FUNCTION_8();
  v40 = *(_QWORD *)(v36 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_12_9(v9, v35[0]);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)v35 - v11;
  v12 = OUTLINED_FUNCTION_55();
  v13 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(v12);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_195_1(v15, v35[0]);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DB48);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v17);
  OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_144_0();
  MEMORY[0x1E0C80A78](v19);
  OUTLINED_FUNCTION_86();
  MEMORY[0x1E0C80A78](v20);
  v21 = OUTLINED_FUNCTION_214();
  v22 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(v21);
  v23 = *(int *)(v22 + 20);
  v35[2] = v7;
  OUTLINED_FUNCTION_124(v7 + v23, v3);
  v24 = *(int *)(v22 + 20);
  v37 = v5;
  OUTLINED_FUNCTION_124(v5 + v24, v0);
  v25 = (uint64_t *)(v1 + *(int *)(v16 + 48));
  OUTLINED_FUNCTION_124(v3, v1);
  OUTLINED_FUNCTION_124(v0, (uint64_t)v25);
  v26 = OUTLINED_FUNCTION_9(v1, 1, v13);
  if (v29)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    v28 = OUTLINED_FUNCTION_9((uint64_t)v25, 1, v13);
    if (v29)
    {
      OUTLINED_FUNCTION_38_1(v28, &qword_1EF72DAB0);
LABEL_11:
      OUTLINED_FUNCTION_19_8();
      v34 = v39;
      OUTLINED_FUNCTION_54_2(v39, v37);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_12();
      OUTLINED_FUNCTION_181(v34);
      OUTLINED_FUNCTION_181((uint64_t)v25);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_116_1(v26, v27, &qword_1EF72DAB0);
  OUTLINED_FUNCTION_9((uint64_t)v25, 1, v13);
  if (v29)
  {
    OUTLINED_FUNCTION_15_2(v0);
    OUTLINED_FUNCTION_15_2(v3);
    OUTLINED_FUNCTION_214_0(v30, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
LABEL_9:
    OUTLINED_FUNCTION_38_1(v28, &qword_1EF72DB48);
    goto LABEL_12;
  }
  v31 = v35[1];
  OUTLINED_FUNCTION_257_0((uint64_t)v25);
  static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.== infix(_:_:)();
  v33 = v32;
  OUTLINED_FUNCTION_34_8(v31);
  v25 = &qword_1EF72DAB0;
  OUTLINED_FUNCTION_189_0(v0);
  OUTLINED_FUNCTION_189_0(v3);
  OUTLINED_FUNCTION_34_8(v2);
  OUTLINED_FUNCTION_189_0(v1);
  if ((v33 & 1) != 0)
    goto LABEL_11;
LABEL_12:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, &qword_1EF72DB50, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void sub_1C1EDB504()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.decodeMessage<A>(decoder:)();
}

void sub_1C1EDB518()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDB52C()
{
  sub_1C1D488DC(&qword_1EF72E460, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDB580()
{
  sub_1C1D488DC(&qword_1EF72DB30, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  return sub_1C2019608();
}

uint64_t sub_1C1EDB5C4()
{
  sub_1C1D488DC(&qword_1EF72DB30, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
  return sub_1C2019614();
}

uint64_t sub_1C1EDB618()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EF724750 != -1)
    swift_once();
  v1 = qword_1EF72D9B8;
  v2 = unk_1EF72D9C0;
  swift_bridgeObjectRetain();
  result = sub_1C201998C();
  qword_1EF72D9E0 = v1;
  *(_QWORD *)algn_1EF72D9E8 = v2;
  return result;
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.protoMessageName.getter()
{
  sub_1C1DB2B34(&qword_1EF724760);
}

uint64_t sub_1C1EDB6B8()
{
  return sub_1C1EDB6D8();
}

uint64_t sub_1C1EDB6D8()
{
  unsigned int *v0;
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_42_3();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_1C2019914();
  __swift_allocate_value_buffer(v8, v7);
  v9 = OUTLINED_FUNCTION_199();
  __swift_project_value_buffer(v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C202A2C0;
  v15 = v14 + v13 + *(int *)(v11 + 48);
  *(_QWORD *)(v14 + v13) = 1;
  *(_QWORD *)v15 = v5;
  *(_QWORD *)(v15 + 8) = v3;
  *(_BYTE *)(v15 + 16) = 2;
  v16 = *v1;
  v17 = sub_1C20198F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724768, (uint64_t)&unk_1EF72D9F0, a1);
}

void Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
        OUTLINED_FUNCTION_454();
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.traverse<A>(visitor:)()
{
  return sub_1C1EDB85C();
}

uint64_t sub_1C1EDB85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v2 = OUTLINED_FUNCTION_227();
  if (!*(_QWORD *)(v1 + *(int *)(v3(v2) + 20) + 8))
    return OUTLINED_FUNCTION_31_3();
  result = OUTLINED_FUNCTION_14_2();
  if (!v0)
    return OUTLINED_FUNCTION_31_3();
  return result;
}

void static Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.== infix(_:_:)()
{
  sub_1C1EDB8CC();
}

void sub_1C1EDB8CC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_437();
  MEMORY[0x1E0C80A78](v4);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v5);
  v6 = OUTLINED_FUNCTION_158_0();
  v3(v6);
  OUTLINED_FUNCTION_22_3();
  if (!v9)
  {
    if (v7)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_4(v8);
    v12 = v12 && v10 == v11;
    if (v12 || (OUTLINED_FUNCTION_13() & 1) != 0)
    {
LABEL_11:
      OUTLINED_FUNCTION_310();
      OUTLINED_FUNCTION_287();
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_216(v0);
      OUTLINED_FUNCTION_216(v1);
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, &qword_1EF72DB58, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EDB9C8()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EDB9DC()
{
  return Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDB9F0()
{
  sub_1C1D488DC(&qword_1EF72E458, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDBA44()
{
  sub_1C1D488DC(&qword_1EF72DB40, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  return sub_1C2019608();
}

uint64_t sub_1C1EDBA88()
{
  sub_1C1D488DC(&qword_1EF72DB40, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_QueryDecorationOutput.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(50);
}

uint64_t sub_1C1EDBAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA08);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202E540;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 3;
  *(_QWORD *)v7 = "required_context";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 5;
  *(_QWORD *)v11 = "original_ranked_tools";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 6;
  *(_QWORD *)v13 = "adjusted_ranked_tools";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 7;
  *(_QWORD *)v15 = "original_ranked_spans";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "adjusted_ranked_spans";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_QueryDecorationOutput._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724770, (uint64_t)qword_1EF72DA08, a1);
}

void Siri_Nlu_External_NluRouter_QueryDecorationOutput.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EDD708();
          break;
        case 5:
        case 6:
        case 7:
        case 8:
          sub_1C2019554();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_External_NluRouter_QueryDecorationOutput.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext(0),
        sub_1C1D488DC(&qword_1EF72DB60, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext), sub_1C20196BC(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16) || (OUTLINED_FUNCTION_73_13(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16) || (OUTLINED_FUNCTION_73_13(), !v1))
      {
        if (!*(_QWORD *)(v0[3] + 16) || (OUTLINED_FUNCTION_73_13(), !v1))
        {
          if (!*(_QWORD *)(v0[4] + 16) || (OUTLINED_FUNCTION_73_13(), !v1))
          {
            type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
            OUTLINED_FUNCTION_352();
            sub_1C2019464();
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_26_2();
}

void static Siri_Nlu_External_NluRouter_QueryDecorationOutput.== infix(_:_:)()
{
  uint64_t v0;
  _QWORD **v1;
  _QWORD **v2;
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t DecorationOutput;

  OUTLINED_FUNCTION_42_3();
  v2 = v1;
  v4 = v3;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_437();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_102_5();
  sub_1C1D43400();
  if ((v7 & 1) != 0)
  {
    sub_1C1D40D58(v4[1], v2[1]);
    if ((v8 & 1) != 0)
    {
      sub_1C1D40D58(v4[2], v2[2]);
      if ((v9 & 1) != 0)
      {
        sub_1C1D40D58(v4[3], v2[3]);
        if ((v10 & 1) != 0)
        {
          sub_1C1D40D58(v4[4], v2[4]);
          if ((v11 & 1) != 0)
          {
            DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
            OUTLINED_FUNCTION_84_7(*(int *)(DecorationOutput + 36));
            OUTLINED_FUNCTION_93_1(*(int *)(DecorationOutput + 36));
            sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
            OUTLINED_FUNCTION_7_1();
            OUTLINED_FUNCTION_83_4();
            OUTLINED_FUNCTION_285(v0);
          }
        }
      }
    }
  }
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_External_NluRouter_QueryDecorationOutput.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, &qword_1EF72DB68, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
}

unint64_t sub_1C1EDBFE8()
{
  static Siri_Nlu_External_NluRouter_QueryDecorationOutput.protoMessageName.getter();
  return 0xD000000000000032;
}

void sub_1C1EDC00C()
{
  Siri_Nlu_External_NluRouter_QueryDecorationOutput.decodeMessage<A>(decoder:)();
}

void sub_1C1EDC020()
{
  Siri_Nlu_External_NluRouter_QueryDecorationOutput.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDC034()
{
  sub_1C1D488DC(&qword_1EF72E450, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDC088()
{
  sub_1C1D488DC(&qword_1EF72DAD0, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  return sub_1C2019608();
}

uint64_t sub_1C1EDC0CC()
{
  sub_1C1D488DC(&qword_1EF72DAD0, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(54);
}

uint64_t sub_1C1EDC138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA20);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "nl_parse_response";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pommes_response";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724778, (uint64_t)qword_1EF72DA20, a1);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_40_2();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 2)
      {
        OUTLINED_FUNCTION_41_4();
        sub_1C1EDC388();
      }
      else if (v1 == 1)
      {
        OUTLINED_FUNCTION_41_4();
        sub_1C1EDC34C();
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

void sub_1C1EDC34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_50_5(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_163_0();
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_2_3();
}

void sub_1C1EDC388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_50_5(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_163_0();
  OUTLINED_FUNCTION_41_0();
  OUTLINED_FUNCTION_50_2();
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t EnumTagSinglePayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_40_2();
  v3 = v0;
  v25 = v4;
  v26 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v6);
  v7 = OUTLINED_FUNCTION_22_4();
  v24 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(v7);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v8);
  OUTLINED_FUNCTION_108(v9, v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  sub_1C1D48918(v3 + *(int *)(v17 + 20), (uint64_t)v12, &qword_1EF72DAB8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13) == 1)
  {
    sub_1C1D48944((uint64_t)v12, &qword_1EF72DAB8);
    v18 = v3;
  }
  else
  {
    sub_1C1E10758((uint64_t)v12, (uint64_t)v16, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
    sub_1C1D488DC(&qword_1EF72DB78, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
    sub_1C20196D4();
    v19 = OUTLINED_FUNCTION_199();
    sub_1C1D6C358(v19, v20);
    v18 = v3;
    if (v1)
      goto LABEL_8;
  }
  sub_1C1D48918(v18 + *(int *)(v17 + 24), v2, &qword_1EF72DAC0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v24);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_137_2(EnumTagSinglePayload, &qword_1EF72DAC0);
LABEL_7:
    OUTLINED_FUNCTION_107_1();
    goto LABEL_8;
  }
  v22 = v23;
  sub_1C1E10758(v2, v23, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  sub_1C1D488DC(&qword_1EF72DB70, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
  sub_1C20196D4();
  sub_1C1D6C358(v22, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  if (!v1)
    goto LABEL_7;
LABEL_8:
  OUTLINED_FUNCTION_324();
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t (*v69)(_QWORD);
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  OUTLINED_FUNCTION_5();
  v2 = v1;
  v4 = v3;
  v81 = OUTLINED_FUNCTION_8();
  v79 = *(_QWORD *)(v81 - 8);
  OUTLINED_FUNCTION_6();
  MEMORY[0x1E0C80A78](v5);
  OUTLINED_FUNCTION_28();
  v78 = v6;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v7);
  OUTLINED_FUNCTION_175_0();
  v77 = v8;
  v9 = OUTLINED_FUNCTION_55();
  v86 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(v9);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v10);
  OUTLINED_FUNCTION_23();
  v76 = v11;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DB80);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v12);
  OUTLINED_FUNCTION_23();
  v87 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v14);
  OUTLINED_FUNCTION_28();
  v80 = v15;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v16);
  v84 = (uint64_t)&v76 - v17;
  OUTLINED_FUNCTION_29();
  MEMORY[0x1E0C80A78](v18);
  OUTLINED_FUNCTION_175_0();
  v85 = v19;
  v20 = OUTLINED_FUNCTION_55();
  v21 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(v20);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v22);
  OUTLINED_FUNCTION_23();
  v82 = (uint64_t *)v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DB88);
  OUTLINED_FUNCTION_2();
  MEMORY[0x1E0C80A78](v25);
  OUTLINED_FUNCTION_223_0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
  OUTLINED_FUNCTION_2();
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (uint64_t *)((char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v76 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v76 - v33;
  v35 = OUTLINED_FUNCTION_177_5();
  v36 = *(int *)(v35 + 20);
  v88 = v4;
  OUTLINED_FUNCTION_27_4(v4 + v36, (uint64_t)v34);
  v37 = *(int *)(v35 + 20);
  v89 = v2;
  OUTLINED_FUNCTION_27_4(v2 + v37, (uint64_t)v32);
  v38 = v0 + *(int *)(v24 + 48);
  OUTLINED_FUNCTION_27_4((uint64_t)v34, v0);
  OUTLINED_FUNCTION_27_4((uint64_t)v32, v38);
  OUTLINED_FUNCTION_9(v0, 1, v21);
  if (v50)
  {
    OUTLINED_FUNCTION_189_0((uint64_t)v32);
    OUTLINED_FUNCTION_189_0((uint64_t)v34);
    v40 = OUTLINED_FUNCTION_9(v38, 1, v21);
    if (v50)
    {
      OUTLINED_FUNCTION_171(v40, &qword_1EF72DAB8);
      goto LABEL_6;
    }
LABEL_14:
    v52 = &qword_1EF72DB88;
    v53 = v0;
LABEL_23:
    sub_1C1D48944(v53, v52);
    goto LABEL_24;
  }
  OUTLINED_FUNCTION_73_5(v0, v39, &qword_1EF72DAB8);
  OUTLINED_FUNCTION_9(v38, 1, v21);
  if (v50)
  {
    OUTLINED_FUNCTION_15_2((uint64_t)v32);
    OUTLINED_FUNCTION_15_2((uint64_t)v34);
    OUTLINED_FUNCTION_194_4(v51, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
    goto LABEL_14;
  }
  v54 = v82;
  sub_1C1E10758(v38, (uint64_t)v82, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
  sub_1C1D40F70(*v29, *v54, v55, v56, v57, v58, v59, v60, v76, v77, v78, v79, v80, v81, (uint64_t)v82, v83, v84, v85, v86,
    v87);
  if ((v61 & 1) == 0)
  {
    OUTLINED_FUNCTION_34_8((uint64_t)v54);
    OUTLINED_FUNCTION_166((uint64_t)v32);
    OUTLINED_FUNCTION_166((uint64_t)v34);
    OUTLINED_FUNCTION_34_8((uint64_t)v29);
    v53 = v0;
    v52 = &qword_1EF72DAB8;
    goto LABEL_23;
  }
  sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  OUTLINED_FUNCTION_165();
  v62 = sub_1C2019944();
  sub_1C1D6C358((uint64_t)v54, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
  OUTLINED_FUNCTION_69((uint64_t)v32);
  OUTLINED_FUNCTION_69((uint64_t)v34);
  sub_1C1D6C358((uint64_t)v29, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
  OUTLINED_FUNCTION_69(v0);
  if ((v62 & 1) == 0)
    goto LABEL_24;
LABEL_6:
  v41 = v88;
  v42 = v85;
  OUTLINED_FUNCTION_45(v88 + *(int *)(v35 + 24), v85);
  v43 = v89;
  v44 = v89 + *(int *)(v35 + 24);
  v45 = v84;
  OUTLINED_FUNCTION_45(v44, v84);
  v46 = v87;
  v47 = v87 + *(int *)(v83 + 48);
  OUTLINED_FUNCTION_45(v42, v87);
  OUTLINED_FUNCTION_45(v45, v47);
  v48 = v86;
  OUTLINED_FUNCTION_9(v46, 1, v86);
  if (v50)
  {
    sub_1C1D48944(v45, &qword_1EF72DAC0);
    sub_1C1D48944(v42, &qword_1EF72DAC0);
    v49 = OUTLINED_FUNCTION_9(v47, 1, v48);
    if (v50)
    {
      OUTLINED_FUNCTION_32_0(v49, &qword_1EF72DAC0);
LABEL_26:
      v70 = v79;
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16);
      v72 = v81;
      v71(v77, v41, v81);
      v73 = v78;
      v71(v78, v43, v72);
      sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      sub_1C2019944();
      v74 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
      v74(v73, v72);
      v75 = OUTLINED_FUNCTION_62_1();
      ((void (*)(uint64_t))v74)(v75);
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  v63 = v80;
  sub_1C1D48918(v46, v80, &qword_1EF72DAC0);
  OUTLINED_FUNCTION_9(v47, 1, v48);
  if (v64)
  {
    OUTLINED_FUNCTION_166(v45);
    OUTLINED_FUNCTION_166(v42);
    sub_1C1D6C358(v63, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
LABEL_21:
    v52 = &qword_1EF72DB80;
    v53 = v46;
    goto LABEL_23;
  }
  v65 = v76;
  sub_1C1E10758(v47, v76, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  static Siri_Nlu_External_NluRouter_PommesResponse.== infix(_:_:)();
  v67 = v66;
  sub_1C1D6C358(v65, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
  OUTLINED_FUNCTION_39_0(v45);
  OUTLINED_FUNCTION_39_0(v42);
  v68 = OUTLINED_FUNCTION_62_1();
  sub_1C1D6C358(v68, v69);
  OUTLINED_FUNCTION_39_0(v46);
  if ((v67 & 1) != 0)
    goto LABEL_26;
LABEL_24:
  OUTLINED_FUNCTION_230();
  OUTLINED_FUNCTION_0();
}

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, &qword_1EF72DB90, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

unint64_t sub_1C1EDCBFC()
{
  static Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.protoMessageName.getter();
  return 0xD000000000000036;
}

void sub_1C1EDCC18()
{
  Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.decodeMessage<A>(decoder:)();
}

void sub_1C1EDCC2C()
{
  Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDCC40()
{
  sub_1C1D488DC(&qword_1EF72E448, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDCC94()
{
  sub_1C1D488DC(&qword_1EF72DAD8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  return sub_1C2019608();
}

uint64_t sub_1C1EDCCD8()
{
  sub_1C1D488DC(&qword_1EF72DAD8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_NLRouterTurnContext.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(48);
}

uint64_t sub_1C1EDCD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA38);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "active_tasks";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "executed_tasks";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "system_dialog_acts";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "salient_entities";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_NLRouterTurnContext._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724780, (uint64_t)qword_1EF72DA38, a1);
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  OUTLINED_FUNCTION_230_0();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
          OUTLINED_FUNCTION_41_4();
          sub_1C1EDD708();
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1EDCFD0();
          break;
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EDD050();
          break;
        case 4:
          OUTLINED_FUNCTION_56();
          sub_1C1EDD0D0();
          break;
        default:
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

uint64_t sub_1C1EDCFD0()
{
  type metadata accessor for Siri_Nlu_External_Task(0);
  sub_1C1D488DC(&qword_1EF723230, type metadata accessor for Siri_Nlu_External_Task, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_Task);
  return sub_1C20195A8();
}

uint64_t sub_1C1EDD050()
{
  type metadata accessor for Siri_Nlu_External_SystemDialogAct(0);
  sub_1C1D488DC(&qword_1EF723798, type metadata accessor for Siri_Nlu_External_SystemDialogAct, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct);
  return sub_1C20195A8();
}

uint64_t sub_1C1EDD0D0()
{
  type metadata accessor for Siri_Nlu_External_EntityCandidate(0);
  sub_1C1D488DC(&qword_1ED7A0398, type metadata accessor for Siri_Nlu_External_EntityCandidate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_EntityCandidate);
  return sub_1C20195A8();
}

void Siri_Nlu_External_NluRouter_NLRouterTurnContext.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for Siri_Nlu_External_Task(0),
        sub_1C1D488DC(&qword_1EF723230, type metadata accessor for Siri_Nlu_External_Task, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_Task), OUTLINED_FUNCTION_44_11(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for Siri_Nlu_External_Task(0),
          sub_1C1D488DC(&qword_1EF723230, type metadata accessor for Siri_Nlu_External_Task, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_Task), OUTLINED_FUNCTION_120_1(), OUTLINED_FUNCTION_44_11(), !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16)
        || (type metadata accessor for Siri_Nlu_External_SystemDialogAct(0),
            sub_1C1D488DC(&qword_1EF723798, type metadata accessor for Siri_Nlu_External_SystemDialogAct, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_SystemDialogAct), OUTLINED_FUNCTION_44_11(), !v1))
      {
        if (!*(_QWORD *)(v0[3] + 16)
          || (type metadata accessor for Siri_Nlu_External_EntityCandidate(0),
              sub_1C1D488DC(&qword_1ED7A0398, type metadata accessor for Siri_Nlu_External_EntityCandidate, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_EntityCandidate), OUTLINED_FUNCTION_120_1(), OUTLINED_FUNCTION_44_11(), !v1))
        {
          type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
          OUTLINED_FUNCTION_352();
          sub_1C2019464();
        }
      }
    }
  }
  OUTLINED_FUNCTION_26_2();
}

#error "1C1EDD314: call analysis failed (funcsize=54)"

uint64_t Siri_Nlu_External_NluRouter_NLRouterTurnContext.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, &qword_1EF72DB98, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
}

unint64_t sub_1C1EDD3CC()
{
  static Siri_Nlu_External_NluRouter_NLRouterTurnContext.protoMessageName.getter();
  return 0xD000000000000030;
}

void sub_1C1EDD3F0()
{
  Siri_Nlu_External_NluRouter_NLRouterTurnContext.decodeMessage<A>(decoder:)();
}

void sub_1C1EDD404()
{
  Siri_Nlu_External_NluRouter_NLRouterTurnContext.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDD418()
{
  sub_1C1D488DC(&qword_1EF72E440, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDD46C()
{
  sub_1C1D488DC(&qword_1EF72DAE0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  return sub_1C2019608();
}

uint64_t sub_1C1EDD4B0()
{
  sub_1C1D488DC(&qword_1EF72DAE0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_RequestSummary.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(43);
}

uint64_t sub_1C1EDD51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA50);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A850;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "user_query";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "turn_summaries";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_RequestSummary._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724788, (uint64_t)qword_1EF72DA50, a1);
}

void Siri_Nlu_External_NluRouter_RequestSummary.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_230_0();
  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 2)
      {
        OUTLINED_FUNCTION_97_3();
      }
      else if (v1 == 1)
      {
        v3 = OUTLINED_FUNCTION_56();
        sub_1C1E395F4(v3, v4, v5, v6, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary);
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_225();
}

void sub_1C1EDD708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_50_5(v0, v1, v2, v3, v4);
  OUTLINED_FUNCTION_41_0();
  sub_1C20195A8();
  OUTLINED_FUNCTION_2_3();
}

void Siri_Nlu_External_NluRouter_RequestSummary.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_165_2();
  if (!*(_QWORD *)(v1 + *(int *)(type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(0) + 24) + 8)
    || (v2 = v0, sub_1C2019698(), !v0))
  {
    if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
      || (type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0),
          sub_1C1D488DC(&qword_1EF72DBA0, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary), OUTLINED_FUNCTION_170_4(), !v2))
    {
      OUTLINED_FUNCTION_107_1();
    }
  }
  OUTLINED_FUNCTION_2_3();
}

void static Siri_Nlu_External_NluRouter_RequestSummary.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;

  OUTLINED_FUNCTION_42_3();
  v5 = v4;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_158_0();
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary(v8);
  OUTLINED_FUNCTION_22_3();
  if (!v12)
  {
    if (v10)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (v10)
  {
    OUTLINED_FUNCTION_4(v11);
    v15 = v15 && v13 == v14;
    if (v15 || (OUTLINED_FUNCTION_13() & 1) != 0)
    {
LABEL_10:
      sub_1C1D43278();
      if ((v16 & 1) != 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5 + *(int *)(v9 + 20), v1);
        OUTLINED_FUNCTION_93_1(*(int *)(v9 + 20));
        sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        OUTLINED_FUNCTION_7_1();
        OUTLINED_FUNCTION_216(v0);
        OUTLINED_FUNCTION_216(v2);
      }
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_External_NluRouter_RequestSummary.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, &qword_1EF72DBA8, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
}

unint64_t sub_1C1EDD94C()
{
  static Siri_Nlu_External_NluRouter_RequestSummary.protoMessageName.getter();
  return 0xD00000000000002BLL;
}

void sub_1C1EDD970()
{
  Siri_Nlu_External_NluRouter_RequestSummary.decodeMessage<A>(decoder:)();
}

void sub_1C1EDD984()
{
  Siri_Nlu_External_NluRouter_RequestSummary.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDD998()
{
  sub_1C1D488DC(&qword_1EF72E438, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDD9EC()
{
  sub_1C1D488DC(&qword_1EF72DAC8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
  return sub_1C2019608();
}

uint64_t sub_1C1EDDA30()
{
  sub_1C1D488DC(&qword_1EF72DAC8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
  return sub_1C2019614();
}

unint64_t static Siri_Nlu_External_NluRouter_TurnSummary.protoMessageName.getter()
{
  return OUTLINED_FUNCTION_106_0(40);
}

uint64_t sub_1C1EDDA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA68);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "executed_query";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF20];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "response_text";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "execution_source";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_TurnSummary._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724790, (uint64_t)qword_1EF72DA68, a1);
}

void Siri_Nlu_External_NluRouter_TurnSummary.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = OUTLINED_FUNCTION_6_4();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EDDCB8();
          break;
        case 2:
          OUTLINED_FUNCTION_298_0();
          break;
        case 1:
          OUTLINED_FUNCTION_454();
          break;
      }
      v1 = OUTLINED_FUNCTION_36_3();
    }
  }
  OUTLINED_FUNCTION_22_2();
}

uint64_t sub_1C1EDDCB8()
{
  type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0);
  sub_1C1EDE2C8();
  return sub_1C2019518();
}

uint64_t Siri_Nlu_External_NluRouter_TurnSummary.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t result;

  v2 = OUTLINED_FUNCTION_227();
  v3 = (int *)type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(v2);
  if (!*(_QWORD *)(v1 + v3[5] + 8) || (result = OUTLINED_FUNCTION_14_2(), !v0))
  {
    if (!*(_QWORD *)(v1 + v3[6] + 8) || (result = OUTLINED_FUNCTION_14_2(), !v0))
    {
      if (*(_BYTE *)(v1 + v3[7]) == 3)
        return OUTLINED_FUNCTION_31_3();
      sub_1C1EDE2C8();
      result = OUTLINED_FUNCTION_145_1();
      if (!v0)
        return OUTLINED_FUNCTION_31_3();
    }
  }
  return result;
}

void static Siri_Nlu_External_NluRouter_TurnSummary.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;

  OUTLINED_FUNCTION_42_3();
  v3 = v2;
  v5 = v4;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125_1();
  MEMORY[0x1E0C80A78](v6);
  OUTLINED_FUNCTION_8_1();
  MEMORY[0x1E0C80A78](v7);
  v8 = OUTLINED_FUNCTION_158_0();
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(v8);
  OUTLINED_FUNCTION_22_3();
  if (!v12)
  {
    if (v10)
      goto LABEL_26;
LABEL_10:
    OUTLINED_FUNCTION_22_3();
    if (v18)
    {
      if (!v16)
        goto LABEL_26;
      OUTLINED_FUNCTION_4(v17);
      v21 = v15 && v19 == v20;
      if (!v21 && (OUTLINED_FUNCTION_13() & 1) == 0)
        goto LABEL_26;
    }
    else if (v16)
    {
      goto LABEL_26;
    }
    v22 = *(int *)(v9 + 28);
    v23 = *(unsigned __int8 *)(v5 + v22);
    v24 = *(unsigned __int8 *)(v3 + v22);
    if (v23 == 3)
    {
      if (v24 != 3)
        goto LABEL_26;
    }
    else if (v24 == 3 || v23 != v24)
    {
      goto LABEL_26;
    }
    OUTLINED_FUNCTION_310();
    OUTLINED_FUNCTION_287();
    sub_1C1D488DC(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    OUTLINED_FUNCTION_7_1();
    OUTLINED_FUNCTION_216(v0);
    OUTLINED_FUNCTION_216(v1);
    goto LABEL_26;
  }
  if (v10)
  {
    OUTLINED_FUNCTION_4(v11);
    v15 = v15 && v13 == v14;
    if (v15 || (OUTLINED_FUNCTION_13() & 1) != 0)
      goto LABEL_10;
  }
LABEL_26:
  OUTLINED_FUNCTION_11_0();
}

uint64_t Siri_Nlu_External_NluRouter_TurnSummary.hashValue.getter()
{
  return sub_1C1EDDF3C(type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, &qword_1EF72DBB8, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
}

uint64_t sub_1C1EDDF3C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  OUTLINED_FUNCTION_213_2();
  a1(0);
  sub_1C1D488DC(a2, a1, a3);
  sub_1C201992C();
  return sub_1C2019A70();
}

unint64_t sub_1C1EDDFB8()
{
  static Siri_Nlu_External_NluRouter_TurnSummary.protoMessageName.getter();
  return 0xD000000000000028;
}

void sub_1C1EDDFD4()
{
  Siri_Nlu_External_NluRouter_TurnSummary.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EDDFE8()
{
  return Siri_Nlu_External_NluRouter_TurnSummary.traverse<A>(visitor:)();
}

uint64_t sub_1C1EDDFFC()
{
  sub_1C1D488DC(&qword_1EF72E430, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
  return sub_1C20194C4();
}

uint64_t sub_1C1EDE050()
{
  sub_1C1D488DC(&qword_1EF72DBA0, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
  return sub_1C2019608();
}

uint64_t sub_1C1EDE094()
{
  sub_1C1D488DC(&qword_1EF72DBA0, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
  return sub_1C2019614();
}

uint64_t sub_1C1EDE0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72DA80);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72DA80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C202A2F0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "EXECUTION_SOURCE_UNSET";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "EXECUTION_SOURCE_SIRI_X";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "EXECUTION_SOURCE_PLANNER";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C1D40CD8(&qword_1EF724798, (uint64_t)qword_1EF72DA80, a1);
}

unint64_t sub_1C1EDE28C()
{
  unint64_t result;

  result = qword_1EF72DB20;
  if (!qword_1EF72DB20)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType, &type metadata for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType);
    atomic_store(result, (unint64_t *)&qword_1EF72DB20);
  }
  return result;
}

unint64_t sub_1C1EDE2C8()
{
  unint64_t result;

  result = qword_1EF72DBB0;
  if (!qword_1EF72DBB0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource, &type metadata for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource);
    atomic_store(result, (unint64_t *)&qword_1EF72DBB0);
  }
  return result;
}

unint64_t sub_1C1EDE308()
{
  unint64_t result;

  result = qword_1EF72DBC0;
  if (!qword_1EF72DBC0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType, &type metadata for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType);
    atomic_store(result, (unint64_t *)&qword_1EF72DBC0);
  }
  return result;
}

unint64_t sub_1C1EDE348()
{
  unint64_t result;

  result = qword_1EF72DBC8;
  if (!qword_1EF72DBC8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType, &type metadata for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType);
    atomic_store(result, (unint64_t *)&qword_1EF72DBC8);
  }
  return result;
}

unint64_t sub_1C1EDE388()
{
  unint64_t result;

  result = qword_1EF72DBD0;
  if (!qword_1EF72DBD0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType, &type metadata for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType);
    atomic_store(result, (unint64_t *)&qword_1EF72DBD0);
  }
  return result;
}

void sub_1C1EDE3C4()
{
  sub_1C1D7F910(&qword_1EF72DBD8, &qword_1EF72DBE0);
}

unint64_t sub_1C1EDE3EC()
{
  unint64_t result;

  result = qword_1EF72DBE8;
  if (!qword_1EF72DBE8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource, &type metadata for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource);
    atomic_store(result, (unint64_t *)&qword_1EF72DBE8);
  }
  return result;
}

unint64_t sub_1C1EDE42C()
{
  unint64_t result;

  result = qword_1EF72DBF0;
  if (!qword_1EF72DBF0)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource, &type metadata for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource);
    atomic_store(result, (unint64_t *)&qword_1EF72DBF0);
  }
  return result;
}

unint64_t sub_1C1EDE46C()
{
  unint64_t result;

  result = qword_1EF72DBF8;
  if (!qword_1EF72DBF8)
  {
    result = MEMORY[0x1C3BB7668](&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource, &type metadata for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource);
    atomic_store(result, (unint64_t *)&qword_1EF72DBF8);
  }
  return result;
}

void sub_1C1EDE4A8()
{
  sub_1C1D7F910(&qword_1EF72DC00, &qword_1EF72DC08);
}

void sub_1C1EDE4CC()
{
  sub_1C1D488DC(&qword_1EF72DC10, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void sub_1C1EDE4F8()
{
  sub_1C1D488DC(&qword_1EF72DC18, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void sub_1C1EDE524()
{
  sub_1C1D488DC(&qword_1EF72DB00, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void sub_1C1EDE550()
{
  sub_1C1D488DC(&qword_1EF72DC20, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest);
}

void sub_1C1EDE57C()
{
  sub_1C1D488DC(&qword_1EF72DC28, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

void sub_1C1EDE5A8()
{
  sub_1C1D488DC(&qword_1EF72DB78, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

void sub_1C1EDE5D4()
{
  sub_1C1D488DC(&qword_1EF72DB08, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

void sub_1C1EDE600()
{
  sub_1C1D488DC(&qword_1EF72DC30, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLParseResponse);
}

void sub_1C1EDE62C()
{
  sub_1C1D488DC(&qword_1EF72DC38, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void sub_1C1EDE658()
{
  sub_1C1D488DC(&qword_1EF72DB70, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void sub_1C1EDE684()
{
  sub_1C1D488DC(&qword_1EF72DB10, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void sub_1C1EDE6B0()
{
  sub_1C1D488DC(&qword_1EF72DC40, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_PommesResponse);
}

void sub_1C1EDE6DC()
{
  sub_1C1D488DC(&qword_1EF72DC48, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

void sub_1C1EDE708()
{
  sub_1C1D488DC(&qword_1EF72DB60, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

void sub_1C1EDE734()
{
  sub_1C1D488DC(&qword_1EF72DB28, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

void sub_1C1EDE760()
{
  sub_1C1D488DC(&qword_1EF72DC50, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext);
}

void sub_1C1EDE78C()
{
  sub_1C1D488DC(&qword_1EF72DC58, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

void sub_1C1EDE7B8()
{
  sub_1C1D488DC(&qword_1EF72DB18, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

void sub_1C1EDE7E4()
{
  sub_1C1D488DC(&qword_1EF72DB38, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

void sub_1C1EDE810()
{
  sub_1C1D488DC(&qword_1EF72DC60, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
}

void sub_1C1EDE83C()
{
  sub_1C1D488DC(&qword_1EF72DC68, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void sub_1C1EDE868()
{
  sub_1C1D488DC(&qword_1EF72DB30, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void sub_1C1EDE894()
{
  sub_1C1D488DC(&qword_1EF72DB50, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void sub_1C1EDE8C0()
{
  sub_1C1D488DC(&qword_1EF72DC70, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

void sub_1C1EDE8EC()
{
  sub_1C1D488DC(&qword_1EF72DC78, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EDE918()
{
  sub_1C1D488DC(&qword_1EF72DB40, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EDE944()
{
  sub_1C1D488DC(&qword_1EF72DB58, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EDE970()
{
  sub_1C1D488DC(&qword_1EF72DC80, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EDE99C()
{
  sub_1C1D488DC(&qword_1EF72DC88, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
}

void sub_1C1EDE9C8()
{
  sub_1C1D488DC(&qword_1EF72DAD0, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
}

void sub_1C1EDE9F4()
{
  sub_1C1D488DC(&qword_1EF72DB68, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
}

void sub_1C1EDEA20()
{
  sub_1C1D488DC(&qword_1EF72DC90, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
}

void sub_1C1EDEA4C()
{
  sub_1C1D488DC(&qword_1EF72DC98, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

void sub_1C1EDEA78()
{
  sub_1C1D488DC(&qword_1EF72DAD8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

void sub_1C1EDEAA4()
{
  sub_1C1D488DC(&qword_1EF72DB90, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

void sub_1C1EDEAD0()
{
  sub_1C1D488DC(&qword_1EF72DCA0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
}

void sub_1C1EDEAFC()
{
  sub_1C1D488DC(&qword_1EF72DCA8, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
}

void sub_1C1EDEB28()
{
  sub_1C1D488DC(&qword_1EF72DAE0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
}

void sub_1C1EDEB54()
{
  sub_1C1D488DC(&qword_1EF72DB98, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
}

void sub_1C1EDEB80()
{
  sub_1C1D488DC(&qword_1EF72DCB0, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
}

void sub_1C1EDEBAC()
{
  sub_1C1D488DC(&qword_1EF72DCB8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
}

void sub_1C1EDEBD8()
{
  sub_1C1D488DC(&qword_1EF72DAC8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
}

void sub_1C1EDEC04()
{
  sub_1C1D488DC(&qword_1EF72DBA8, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
}

void sub_1C1EDEC30()
{
  sub_1C1D488DC(&qword_1EF72DCC0, type metadata accessor for Siri_Nlu_External_NluRouter_RequestSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_RequestSummary);
}

void sub_1C1EDEC5C()
{
  sub_1C1D488DC(&qword_1EF72DCC8, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void sub_1C1EDEC88()
{
  sub_1C1D488DC(&qword_1EF72DBA0, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void sub_1C1EDECB4()
{
  sub_1C1D488DC(&qword_1EF72DBB8, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void sub_1C1EDECE0()
{
  sub_1C1D488DC(&qword_1EF72DCD0, type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary, (uint64_t)&protocol conformance descriptor for Siri_Nlu_External_NluRouter_TurnSummary);
}

void sub_1C1EDED0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.currentUserQuery.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDED30(_QWORD *a1@<X8>)
{
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.turnContext.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_NLRouterServiceRequest.turnContext.setter);
}

void sub_1C1EDED70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.requestID.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDED94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.trpCandidateID.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDEDB8()
{
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.probingResult.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_NLRouterServiceRequest.probingResult.setter);
}

void sub_1C1EDEDF8(_QWORD *a1@<X8>)
{
  Siri_Nlu_External_NluRouter_NLRouterServiceRequest.queryDecorationOutput.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_NLRouterServiceRequest.queryDecorationOutput.setter);
}

void sub_1C1EDEE38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_PommesResponse.metadataDomainName.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDEE5C()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.type.getter();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDEE7C()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.typedValue.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_RetrievedContext.typedValue.setter);
}

void sub_1C1EDEEBC()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.primitive.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.primitive.setter);
}

void sub_1C1EDEEFC()
{
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.app.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.app.setter);
}

void sub_1C1EDEF3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App.bundleIdentifier.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDEF60(_QWORD *a1@<X8>)
{
  Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.nlParseResponse.getter(a1);
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.nlParseResponse.setter);
}

void sub_1C1EDEFA0()
{
  Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.pommesResponse.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t sub_1C1EDEFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C1D4B0DC(a1, a2, a3, a4, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse, (uint64_t (*)(char *))Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult.pommesResponse.setter);
}

void sub_1C1EDEFE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_RequestSummary.userQuery.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDF004()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_TurnSummary.executedQuery.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDF028()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_30_1();
  Siri_Nlu_External_NluRouter_TurnSummary.responseText.getter();
  *v0 = v1;
  v0[1] = v2;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EDF04C()
{
  Siri_Nlu_External_NluRouter_TurnSummary.executionSource.getter();
  OUTLINED_FUNCTION_82();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t DecorationOutput;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v67;
  char *__dsta;
  char *__dst;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  void (*v72)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v7 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v19[1];
      *v18 = *v19;
      v18[1] = v22;
      v70 = v11;
      v23 = v19[3];
      v18[2] = v19[2];
      v18[3] = v23;
      v24 = *(int *)(v20 + 32);
      __dsta = (char *)v18 + v24;
      v25 = (char *)v19 + v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = v70;
      swift_bridgeObjectRetain();
      v12(__dsta, v25, v70);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    v26 = a3[8];
    v27 = a3[9];
    v28 = (uint64_t *)((char *)v7 + v26);
    v29 = (uint64_t *)((char *)a2 + v26);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (uint64_t *)((char *)v7 + v27);
    v32 = (uint64_t *)((char *)a2 + v27);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = a3[10];
    v35 = (char *)v7 + v34;
    v36 = (char *)a2 + v34;
    v37 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v12(v35, v36, v11);
      v39 = *(int *)(v37 + 20);
      __dst = &v35[v39];
      v40 = v12;
      v41 = &v36[v39];
      v42 = v11;
      v43 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
      v71 = v40;
      if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v43))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
        memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v41;
        v45 = *(int *)(v43 + 20);
        v67 = &__dst[v45];
        v46 = &v41[v45];
        swift_bridgeObjectRetain();
        v40(v67, v46, v42);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v43);
      }
      v47 = *(int *)(v37 + 24);
      v48 = &v35[v47];
      v49 = &v36[v47];
      v50 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v49, 1, v50))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        v11 = v42;
      }
      else
      {
        v11 = v42;
        v71(v48, v49, v42);
        v52 = *(int *)(v50 + 20);
        v53 = &v48[v52];
        v54 = &v49[v52];
        v55 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v55;
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v48, 0, 1, v50);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
      v12 = v71;
    }
    v56 = a3[11];
    v57 = (uint64_t *)((char *)v7 + v56);
    v58 = (uint64_t *)((char *)a2 + v56);
    DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, DecorationOutput))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = v58[1];
      *v57 = *v58;
      v57[1] = v61;
      v62 = v58[3];
      v57[2] = v58[2];
      v57[3] = v62;
      v57[4] = v58[4];
      v63 = *(int *)(DecorationOutput + 36);
      v72 = v12;
      v64 = (char *)v57 + v63;
      v65 = (char *)v58 + v63;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72(v64, v65, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, DecorationOutput);
    }
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DecorationOutput;
  uint64_t result;
  void (*v17)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_1C201947C();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v17(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + a2[7];
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17(v6 + *(int *)(v7 + 32), v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + a2[10];
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9))
  {
    v17(v8, v5);
    v10 = v8 + *(int *)(v9 + 20);
    v11 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
    if (!__swift_getEnumTagSinglePayload(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      v17(v10 + *(int *)(v11 + 20), v5);
    }
    v12 = v8 + *(int *)(v9 + 24);
    v13 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    if (!__swift_getEnumTagSinglePayload(v12, 1, v13))
    {
      v17(v12, v5);
      swift_bridgeObjectRelease();
    }
  }
  v14 = a1 + a2[11];
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  result = __swift_getEnumTagSinglePayload(v14, 1, DecorationOutput);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v17)(v14 + *(int *)(DecorationOutput + 36), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t DecorationOutput;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v65;
  char *__dsta;
  char *__dst;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  void (*v70)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = v17[1];
    *v16 = *v17;
    v16[1] = v20;
    v68 = v9;
    v21 = v17[3];
    v16[2] = v17[2];
    v16[3] = v21;
    v22 = *(int *)(v18 + 32);
    __dsta = (char *)v16 + v22;
    v23 = (char *)v17 + v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = v68;
    swift_bridgeObjectRetain();
    v10(__dsta, v23, v68);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  v24 = a3[8];
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (_QWORD *)((char *)a1 + v25);
  v30 = (_QWORD *)((char *)a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = a3[10];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v10(v33, v34, v9);
    v37 = *(int *)(v35 + 20);
    __dst = &v33[v37];
    v38 = v10;
    v39 = &v34[v37];
    v40 = v9;
    v41 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
    v69 = v38;
    if (__swift_getEnumTagSinglePayload((uint64_t)v39, 1, v41))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
      memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v39;
      v43 = *(int *)(v41 + 20);
      v65 = &__dst[v43];
      v44 = &v39[v43];
      swift_bridgeObjectRetain();
      v38(v65, v44, v40);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v41);
    }
    v45 = *(int *)(v35 + 24);
    v46 = &v33[v45];
    v47 = &v34[v45];
    v48 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      v9 = v40;
    }
    else
    {
      v9 = v40;
      v69(v46, v47, v40);
      v50 = *(int *)(v48 + 20);
      v51 = &v46[v50];
      v52 = &v47[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v48);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
    v10 = v69;
  }
  v54 = a3[11];
  v55 = (_QWORD *)((char *)a1 + v54);
  v56 = (_QWORD *)((char *)a2 + v54);
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, DecorationOutput))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v59 = v56[1];
    *v55 = *v56;
    v55[1] = v59;
    v60 = v56[3];
    v55[2] = v56[2];
    v55[3] = v60;
    v55[4] = v56[4];
    v61 = *(int *)(DecorationOutput + 36);
    v70 = v10;
    v62 = (char *)v55 + v61;
    v63 = (char *)v56 + v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70(v62, v63, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, DecorationOutput);
  }
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  size_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t DecorationOutput;
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  void (*v96)(char *, char *, uint64_t);
  void (*v97)(char *, char *, uint64_t);
  void (*v98)(char *, char *, uint64_t);
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v102 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v102 + 24);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (EnumTagSinglePayload)
  {
    if (!v19)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v15[2] = v16[2];
      v15[3] = v16[3];
      v20 = *(int *)(v17 + 32);
      v21 = (char *)v16 + v20;
      v94 = (char *)v15 + v20;
      v97 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v97(v94, v21, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_1C1D6C358((uint64_t)v15, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *v15 = *v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[2] = v16[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[3] = v16[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10((char *)v15 + *(int *)(v17 + 32), (char *)v16 + *(int *)(v17 + 32), v9);
LABEL_7:
  v23 = a3[8];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = a3[9];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = a3[10];
  v30 = (uint64_t)a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  v33 = __swift_getEnumTagSinglePayload(v30, 1, v32);
  v34 = __swift_getEnumTagSinglePayload(v31, 1, v32);
  if (v33)
  {
    if (!v34)
    {
      v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
      v98 = v10;
      v95(v30, v31, v9);
      v35 = *(int *)(v32 + 20);
      v36 = (_QWORD *)(v30 + v35);
      v37 = (_QWORD *)(v31 + v35);
      v38 = v9;
      v39 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
      v100 = v38;
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v39))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        v41 = (void (*)(char *, char *, uint64_t))v95;
      }
      else
      {
        *v36 = *v37;
        v54 = *(int *)(v39 + 20);
        v93 = (char *)v36 + v54;
        v55 = (char *)v37 + v54;
        swift_bridgeObjectRetain();
        v56 = v38;
        v41 = (void (*)(char *, char *, uint64_t))v95;
        v95((uint64_t)v93, (uint64_t)v55, v56);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v39);
      }
      v57 = *(int *)(v32 + 24);
      v58 = (char *)(v30 + v57);
      v59 = (char *)(v31 + v57);
      v60 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        v9 = v100;
      }
      else
      {
        v9 = v100;
        v41(v58, v59, v100);
        v62 = *(int *)(v60 + 20);
        v63 = &v58[v62];
        v64 = &v59[v62];
        *(_QWORD *)v63 = *(_QWORD *)v64;
        *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
      }
      v10 = v98;
      v65 = v30;
      v66 = v32;
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  if (v34)
  {
    sub_1C1D6C358(v30, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
LABEL_13:
    v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0) - 8) + 64);
    v43 = (void *)v30;
    v44 = (const void *)v31;
LABEL_14:
    memcpy(v43, v44, v42);
    goto LABEL_25;
  }
  v99 = v10;
  v101 = v9;
  v10((char *)v30, (char *)v31, v9);
  v45 = *(int *)(v32 + 20);
  v46 = (_QWORD *)(v30 + v45);
  v47 = (_QWORD *)(v31 + v45);
  v48 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  v49 = __swift_getEnumTagSinglePayload((uint64_t)v46, 1, v48);
  v50 = __swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48);
  if (v49)
  {
    if (!v50)
    {
      *v46 = *v47;
      v51 = *(int *)(v48 + 20);
      v52 = (char *)v46 + v51;
      v53 = (char *)v47 + v51;
      v96 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
      swift_bridgeObjectRetain();
      v96(v52, v53, v101);
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v48);
LABEL_36:
      v10 = v99;
      goto LABEL_37;
    }
LABEL_35:
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_36;
  }
  if (v50)
  {
    sub_1C1D6C358((uint64_t)v46, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
    goto LABEL_35;
  }
  *v46 = *v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v88 = *(int *)(v48 + 20);
  v89 = (char *)v47 + v88;
  v10 = v99;
  v99((char *)v46 + v88, v89, v101);
LABEL_37:
  v79 = *(int *)(v32 + 24);
  v80 = v30 + v79;
  v81 = v31 + v79;
  v82 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v83 = __swift_getEnumTagSinglePayload(v80, 1, v82);
  v84 = __swift_getEnumTagSinglePayload(v81, 1, v82);
  if (v83)
  {
    v9 = v101;
    if (!v84)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16))(v80, v81, v101);
      v85 = *(int *)(v82 + 20);
      v86 = (_QWORD *)(v80 + v85);
      v87 = (_QWORD *)(v81 + v85);
      *v86 = *v87;
      v86[1] = v87[1];
      swift_bridgeObjectRetain();
      v65 = v80;
      v66 = v82;
LABEL_24:
      __swift_storeEnumTagSinglePayload(v65, 0, 1, v66);
      goto LABEL_25;
    }
    goto LABEL_42;
  }
  v9 = v101;
  if (v84)
  {
    sub_1C1D6C358(v80, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
LABEL_42:
    v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0) - 8) + 64);
    v43 = (void *)v80;
    v44 = (const void *)v81;
    goto LABEL_14;
  }
  v10((char *)v80, (char *)v81, v101);
  v90 = *(int *)(v82 + 20);
  v91 = (_QWORD *)(v80 + v90);
  v92 = (_QWORD *)(v81 + v90);
  *v91 = *v92;
  v91[1] = v92[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_25:
  v67 = a3[11];
  v68 = (char *)a1 + v67;
  v69 = (char *)a2 + v67;
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v71 = __swift_getEnumTagSinglePayload((uint64_t)v68, 1, DecorationOutput);
  v72 = __swift_getEnumTagSinglePayload((uint64_t)v69, 1, DecorationOutput);
  if (!v71)
  {
    if (!v72)
    {
      *(_QWORD *)v68 = *(_QWORD *)v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v68 + 2) = *((_QWORD *)v69 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v68 + 4) = *((_QWORD *)v69 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10(&v68[*(int *)(DecorationOutput + 36)], &v69[*(int *)(DecorationOutput + 36)], v9);
      return a1;
    }
    sub_1C1D6C358((uint64_t)v68, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
    goto LABEL_30;
  }
  if (v72)
  {
LABEL_30:
    v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
  *((_QWORD *)v68 + 2) = *((_QWORD *)v69 + 2);
  *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
  *((_QWORD *)v68 + 4) = *((_QWORD *)v69 + 4);
  v73 = *(int *)(DecorationOutput + 36);
  v74 = &v68[v73];
  v75 = &v69[v73];
  v103 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v103(v74, v75, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v68, 0, 1, DecorationOutput);
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t DecorationOutput;
  uint64_t v37;
  __int128 v38;
  void (*v40)(char *, char *, uint64_t);
  char *__dst;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v13[1];
    *v12 = *v13;
    v12[1] = v16;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  v17 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  v18 = a3[10];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v10(v19, v20, v9);
    v23 = *(int *)(v21 + 20);
    __dst = &v19[v23];
    v24 = &v20[v23];
    v25 = v10;
    v26 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
    v40 = v25;
    if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v26))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      *(_QWORD *)__dst = *(_QWORD *)v24;
      v25(&__dst[*(int *)(v26 + 20)], &v24[*(int *)(v26 + 20)], v9);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v26);
    }
    v28 = *(int *)(v21 + 24);
    v29 = &v19[v28];
    v30 = &v20[v28];
    v31 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      v10 = v40;
    }
    else
    {
      v10 = v40;
      v40(v29, v30, v9);
      *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
      __swift_storeEnumTagSinglePayload((uint64_t)v29, 0, 1, v31);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
  }
  v33 = a3[11];
  v34 = (_OWORD *)((char *)a1 + v33);
  v35 = (_OWORD *)((char *)a2 + v33);
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v35, 1, DecorationOutput))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = v35[1];
    *v34 = *v35;
    v34[1] = v38;
    *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
    v10((char *)v34 + *(int *)(DecorationOutput + 36), (char *)v35 + *(int *)(DecorationOutput + 36), v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v34, 0, 1, DecorationOutput);
  }
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int EnumTagSinglePayload;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  size_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t DecorationOutput;
  int v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  _QWORD *__dst;
  void (*v86)(char *, char *, uint64_t);
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v20);
  v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20);
  if (EnumTagSinglePayload)
  {
    if (!v22)
    {
      v23 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1) = v23;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_1C1D6C358((uint64_t)v18, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *v18 = *v19;
  swift_bridgeObjectRelease();
  v18[1] = v19[1];
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  swift_bridgeObjectRelease();
  v18[3] = v19[3];
  swift_bridgeObjectRelease();
  v11((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
LABEL_7:
  v25 = a3[8];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = a3[9];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  v35 = a3[10];
  v36 = (uint64_t)a1 + v35;
  v37 = (uint64_t)a2 + v35;
  v38 = type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
  v39 = __swift_getEnumTagSinglePayload(v36, 1, v38);
  v40 = __swift_getEnumTagSinglePayload(v37, 1, v38);
  if (v39)
  {
    if (!v40)
    {
      v86 = v11;
      v88 = v10;
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
      v41(v36, v37, v9);
      v42 = *(int *)(v38 + 20);
      __dst = (_QWORD *)(v36 + v42);
      v43 = (_QWORD *)(v37 + v42);
      v44 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
      v83 = (void (*)(char *, char *, uint64_t))v41;
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
        memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        *__dst = *v43;
        v41((uint64_t)__dst + *(int *)(v44 + 20), (uint64_t)v43 + *(int *)(v44 + 20), v9);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v44);
      }
      v56 = *(int *)(v38 + 24);
      v57 = (char *)(v36 + v56);
      v58 = (char *)(v37 + v56);
      v59 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
      v10 = v88;
      if (__swift_getEnumTagSinglePayload((uint64_t)v58, 1, v59))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        v83(v57, v58, v9);
        *(_OWORD *)&v57[*(int *)(v59 + 20)] = *(_OWORD *)&v58[*(int *)(v59 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v57, 0, 1, v59);
      }
      v11 = v86;
      v61 = v36;
      v62 = v38;
      goto LABEL_24;
    }
    goto LABEL_13;
  }
  if (v40)
  {
    sub_1C1D6C358(v36, type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
LABEL_13:
    v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0) - 8) + 64);
    v47 = (void *)v36;
    v48 = (const void *)v37;
LABEL_14:
    memcpy(v47, v48, v46);
    goto LABEL_25;
  }
  v87 = v11;
  v89 = v10;
  v11((char *)v36, (char *)v37, v9);
  v49 = *(int *)(v38 + 20);
  v50 = v36 + v49;
  v51 = (char *)(v37 + v49);
  v52 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  v84 = (char *)v50;
  LODWORD(v50) = __swift_getEnumTagSinglePayload(v50, 1, v52);
  v53 = __swift_getEnumTagSinglePayload((uint64_t)v51, 1, v52);
  if ((_DWORD)v50)
  {
    if (!v53)
    {
      *(_QWORD *)v84 = *(_QWORD *)v51;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v84[*(int *)(v52 + 20)], &v51[*(int *)(v52 + 20)], v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v84, 0, 1, v52);
      goto LABEL_37;
    }
    v54 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8) - 8) + 64);
    v55 = v84;
LABEL_35:
    memcpy(v55, v51, v54);
LABEL_37:
    v11 = v87;
    goto LABEL_38;
  }
  if (v53)
  {
    sub_1C1D6C358((uint64_t)v84, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
    v54 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8) - 8) + 64);
    v55 = v84;
    goto LABEL_35;
  }
  *(_QWORD *)v84 = *(_QWORD *)v51;
  swift_bridgeObjectRelease();
  v11 = v87;
  v87(&v84[*(int *)(v52 + 20)], &v51[*(int *)(v52 + 20)], v9);
LABEL_38:
  v72 = *(int *)(v38 + 24);
  v73 = v36 + v72;
  v74 = v37 + v72;
  v75 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v76 = __swift_getEnumTagSinglePayload(v73, 1, v75);
  v77 = __swift_getEnumTagSinglePayload(v74, 1, v75);
  if (v76)
  {
    v10 = v89;
    if (!v77)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v73, v74, v9);
      *(_OWORD *)(v73 + *(int *)(v75 + 20)) = *(_OWORD *)(v74 + *(int *)(v75 + 20));
      v61 = v73;
      v62 = v75;
LABEL_24:
      __swift_storeEnumTagSinglePayload(v61, 0, 1, v62);
      goto LABEL_25;
    }
    goto LABEL_43;
  }
  v10 = v89;
  if (v77)
  {
    sub_1C1D6C358(v73, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
LABEL_43:
    v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0) - 8) + 64);
    v47 = (void *)v73;
    v48 = (const void *)v74;
    goto LABEL_14;
  }
  v11((char *)v73, (char *)v74, v9);
  v78 = *(int *)(v75 + 20);
  v79 = (_QWORD *)(v73 + v78);
  v80 = (uint64_t *)(v74 + v78);
  v82 = *v80;
  v81 = v80[1];
  *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
LABEL_25:
  v63 = a3[11];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  DecorationOutput = type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput(0);
  v67 = __swift_getEnumTagSinglePayload((uint64_t)v64, 1, DecorationOutput);
  v68 = __swift_getEnumTagSinglePayload((uint64_t)v65, 1, DecorationOutput);
  if (!v67)
  {
    if (!v68)
    {
      *(_QWORD *)v64 = *(_QWORD *)v65;
      swift_bridgeObjectRelease();
      *((_QWORD *)v64 + 1) = *((_QWORD *)v65 + 1);
      swift_bridgeObjectRelease();
      *((_QWORD *)v64 + 2) = *((_QWORD *)v65 + 2);
      swift_bridgeObjectRelease();
      *((_QWORD *)v64 + 3) = *((_QWORD *)v65 + 3);
      swift_bridgeObjectRelease();
      *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
      swift_bridgeObjectRelease();
      v11(&v64[*(int *)(DecorationOutput + 36)], &v65[*(int *)(DecorationOutput + 36)], v9);
      return a1;
    }
    sub_1C1D6C358((uint64_t)v64, type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
    goto LABEL_30;
  }
  if (v68)
  {
LABEL_30:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    return a1;
  }
  v69 = *((_OWORD *)v65 + 1);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *((_OWORD *)v64 + 1) = v69;
  *((_QWORD *)v64 + 4) = *((_QWORD *)v65 + 4);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v64[*(int *)(DecorationOutput + 36)], &v65[*(int *)(DecorationOutput + 36)], v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, DecorationOutput);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterServiceRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EE0D58()
{
  int *v0;
  int *v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_209();
  if (v2)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v1 = v0;
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_52_0();
    if (v2)
    {
      v3 = v1[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
      OUTLINED_FUNCTION_52_0();
      if (v4)
      {
        v3 = v1[7];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
        OUTLINED_FUNCTION_52_0();
        if (v5)
        {
          v3 = v1[10];
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
          v3 = v1[11];
        }
      }
    }
    v6 = OUTLINED_FUNCTION_363(v3);
    OUTLINED_FUNCTION_10_4(v6, v7, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterServiceRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EE0E08()
{
  char v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_52_2();
  if (v0)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_53_1();
    if (!v0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DA98);
      OUTLINED_FUNCTION_53_1();
      if (!v1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA0);
        OUTLINED_FUNCTION_53_1();
        if (!v2)
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAA8);
      }
    }
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v3, v4, v5, v6);
  }
}

void sub_1C1EE0EB0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF72DD40, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnContext);
    if (v1 <= 0x3F)
    {
      sub_1C1D4D44C(319, &qword_1EF72DD48, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult);
      if (v2 <= 0x3F)
      {
        sub_1C1D4D44C(319, qword_1EF72DD50, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_QueryDecorationOutput);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLParseResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLParseResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_PommesResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_PommesResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_RetrievedContext(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v15 = *(int *)(v12 + 20);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v18 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v8(v16, v17, v7);
        v20 = *(int *)(v18 + 20);
        v21 = &v16[v20];
        v22 = &v17[v20];
        v23 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
        if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v8(v21, v22, v7);
          v25 = *(int *)(v23 + 20);
          v26 = &v21[v25];
          v27 = &v22[v25];
          v28 = *((_QWORD *)v27 + 1);
          *(_QWORD *)v26 = *(_QWORD *)v27;
          *((_QWORD *)v26 + 1) = v28;
          swift_bridgeObjectRetain();
          __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    v9 = v6 + *(int *)(v7 + 20);
    v10 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    result = __swift_getEnumTagSinglePayload(v9, 1, v10);
    if (!(_DWORD)result)
    {
      v5(v9, v4);
      v11 = v9 + *(int *)(v10 + 20);
      v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      result = __swift_getEnumTagSinglePayload(v11, 1, v12);
      if (!(_DWORD)result)
      {
        v5(v11, v4);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      v18 = *(int *)(v16 + 20);
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v19, (uint64_t)v20, v6);
        v23 = *(int *)(v21 + 20);
        v24 = &v19[v23];
        v25 = &v20[v23];
        v26 = *((_QWORD *)v25 + 1);
        *(_QWORD *)v24 = *(_QWORD *)v25;
        *((_QWORD *)v24 + 1) = v26;
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload(v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v15(v10, v11, v6);
      v16 = *(int *)(v12 + 20);
      v17 = (char *)(v10 + v16);
      v18 = v11 + v16;
      v19 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
      if (__swift_getEnumTagSinglePayload(v18, 1, v19))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
        v21 = v17;
        v22 = (const void *)v18;
LABEL_5:
        memcpy(v21, v22, v20);
LABEL_22:
        v45 = v10;
        v46 = v12;
LABEL_23:
        __swift_storeEnumTagSinglePayload(v45, 0, 1, v46);
        return a1;
      }
      v15((uint64_t)v17, v18, v6);
      v35 = *(int *)(v19 + 20);
      v36 = &v17[v35];
      v37 = (char *)(v18 + v35);
      v38 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v15((uint64_t)v36, (uint64_t)v37, v6);
        v40 = *(int *)(v38 + 20);
        v41 = &v36[v40];
        v42 = &v37[v40];
        *(_QWORD *)v41 = *(_QWORD *)v42;
        *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      v43 = (uint64_t)v17;
      v44 = v19;
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
LABEL_8:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830) - 8) + 64);
    v24 = (void *)v10;
    v25 = (const void *)v11;
    goto LABEL_9;
  }
  v8(v10, v11, v6);
  v26 = *(int *)(v12 + 20);
  v10 += v26;
  v27 = v11 + v26;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  v28 = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v29 = __swift_getEnumTagSinglePayload(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v30(v10, v27, v6);
      v31 = *(int *)(v12 + 20);
      v32 = (char *)(v10 + v31);
      v33 = v27 + v31;
      v34 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload(v33, 1, v34))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
        v21 = v32;
        v22 = (const void *)v33;
        goto LABEL_5;
      }
      v30((uint64_t)v32, v33, v6);
      v57 = *(int *)(v34 + 20);
      v58 = &v32[v57];
      v59 = (_QWORD *)(v33 + v57);
      *(_QWORD *)v58 = *v59;
      *((_QWORD *)v58 + 1) = v59[1];
      swift_bridgeObjectRetain();
      v43 = (uint64_t)v32;
      v44 = v34;
LABEL_21:
      __swift_storeEnumTagSinglePayload(v43, 0, 1, v44);
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
LABEL_18:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
    v24 = (void *)v10;
    v25 = (const void *)v27;
    goto LABEL_9;
  }
  v8(v10, v27, v6);
  v48 = *(int *)(v12 + 20);
  v49 = v10 + v48;
  v50 = v27 + v48;
  v51 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  v52 = __swift_getEnumTagSinglePayload(v49, 1, v51);
  v53 = __swift_getEnumTagSinglePayload(v50, 1, v51);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v49, v50, v6);
      v54 = *(int *)(v51 + 20);
      v55 = (_QWORD *)(v49 + v54);
      v56 = (_QWORD *)(v50 + v54);
      *v55 = *v56;
      v55[1] = v56[1];
      swift_bridgeObjectRetain();
      v45 = v49;
      v46 = v51;
      goto LABEL_23;
    }
  }
  else
  {
    if (!v53)
    {
      v8(v49, v50, v6);
      v60 = *(int *)(v51 + 20);
      v61 = (_QWORD *)(v49 + v60);
      v62 = (_QWORD *)(v50 + v60);
      *v61 = *v62;
      v61[1] = v62[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358(v49, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
  v24 = (void *)v49;
  v25 = (const void *)v50;
LABEL_9:
  memcpy(v24, v25, v23);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      v18 = *(int *)(v16 + 20);
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v19, (uint64_t)v20, v6);
        *(_OWORD *)&v19[*(int *)(v21 + 20)] = *(_OWORD *)&v20[*(int *)(v21 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_NluRouter_RetrievedContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  size_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload(v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v15(v10, v11, v6);
      v16 = *(int *)(v12 + 20);
      v17 = (char *)(v10 + v16);
      v18 = v11 + v16;
      v19 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
      if (__swift_getEnumTagSinglePayload(v18, 1, v19))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
        v21 = v17;
        v22 = (const void *)v18;
LABEL_5:
        memcpy(v21, v22, v20);
LABEL_22:
        v42 = v10;
        v43 = v12;
LABEL_23:
        __swift_storeEnumTagSinglePayload(v42, 0, 1, v43);
        return a1;
      }
      v15((uint64_t)v17, v18, v6);
      v35 = *(int *)(v19 + 20);
      v36 = &v17[v35];
      v37 = (char *)(v18 + v35);
      v38 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v15((uint64_t)v36, (uint64_t)v37, v6);
        *(_OWORD *)&v36[*(int *)(v38 + 20)] = *(_OWORD *)&v37[*(int *)(v38 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      v40 = (uint64_t)v17;
      v41 = v19;
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if (v14)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
LABEL_8:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830) - 8) + 64);
    v24 = (void *)v10;
    v25 = (const void *)v11;
    goto LABEL_9;
  }
  v8(v10, v11, v6);
  v26 = *(int *)(v12 + 20);
  v10 += v26;
  v27 = v11 + v26;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  v28 = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v29 = __swift_getEnumTagSinglePayload(v27, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v30(v10, v27, v6);
      v31 = *(int *)(v12 + 20);
      v32 = (char *)(v10 + v31);
      v33 = v27 + v31;
      v34 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload(v33, 1, v34))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
        v21 = v32;
        v22 = (const void *)v33;
        goto LABEL_5;
      }
      v30((uint64_t)v32, v33, v6);
      *(_OWORD *)&v32[*(int *)(v34 + 20)] = *(_OWORD *)(v33 + *(int *)(v34 + 20));
      v40 = (uint64_t)v32;
      v41 = v34;
LABEL_21:
      __swift_storeEnumTagSinglePayload(v40, 0, 1, v41);
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  if (v29)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
LABEL_18:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
    v24 = (void *)v10;
    v25 = (const void *)v27;
    goto LABEL_9;
  }
  v8(v10, v27, v6);
  v45 = *(int *)(v12 + 20);
  v46 = v10 + v45;
  v47 = v27 + v45;
  v48 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  v49 = __swift_getEnumTagSinglePayload(v46, 1, v48);
  v50 = __swift_getEnumTagSinglePayload(v47, 1, v48);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v46, v47, v6);
      *(_OWORD *)(v46 + *(int *)(v48 + 20)) = *(_OWORD *)(v47 + *(int *)(v48 + 20));
      v42 = v46;
      v43 = v48;
      goto LABEL_23;
    }
  }
  else
  {
    if (!v50)
    {
      v8(v46, v47, v6);
      v51 = *(int *)(v48 + 20);
      v52 = (_QWORD *)(v46 + v51);
      v53 = (uint64_t *)(v47 + v51);
      v55 = *v53;
      v54 = v53[1];
      *v52 = v55;
      v52[1] = v54;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358(v46, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
  v24 = (void *)v46;
  v25 = (const void *)v47;
LABEL_9:
  memcpy(v24, v25, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EE1F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_52_0();
  if (v7)
  {
    v8 = v6;
    v9 = a1;
  }
  else
  {
    if ((_DWORD)a2 == 252)
    {
      OUTLINED_FUNCTION_101();
      return;
    }
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
    v9 = a1 + *(int *)(a3 + 24);
  }
  OUTLINED_FUNCTION_10_4(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EE1FFC(uint64_t a1, char a2, int a3, uint64_t a4)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v8)
  {
    OUTLINED_FUNCTION_165();
  }
  else
  {
    if (a3 == 252)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
      OUTLINED_FUNCTION_101();
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724830);
  }
  OUTLINED_FUNCTION_132_0();
  OUTLINED_FUNCTION_12_1(v9, v10, v11, v12);
}

void sub_1C1EE2070()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, qword_1EF72DF20, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType()
{
  return &type metadata for Siri_Nlu_External_NluRouter_RetrievedContext.ContextType;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v15 = *(int *)(v12 + 20);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v18 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v16, (uint64_t *)v17, v7);
        v20 = *(int *)(v18 + 20);
        v21 = &v16[v20];
        v22 = &v17[v20];
        v23 = *((_QWORD *)v22 + 1);
        *(_QWORD *)v21 = *(_QWORD *)v22;
        *((_QWORD *)v21 + 1) = v23;
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    v9 = v6 + *(int *)(v7 + 20);
    v10 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    result = __swift_getEnumTagSinglePayload(v9, 1, v10);
    if (!(_DWORD)result)
    {
      v5(v9, v4);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      v18 = *(int *)(v16 + 20);
      v19 = &v14[v18];
      v20 = &v15[v18];
      v21 = *((_QWORD *)v20 + 1);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = v21;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload(v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      v15(v10, v11, v6);
      v16 = *(int *)(v12 + 20);
      v17 = (char *)(v10 + v16);
      v18 = (char *)(v11 + v16);
      v19 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v15((uint64_t)v17, (uint64_t)v18, v6);
        v35 = *(int *)(v19 + 20);
        v36 = &v17[v35];
        v37 = &v18[v35];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      }
      v33 = v10;
      v34 = v12;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v14)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
LABEL_7:
    v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
    v22 = (void *)v10;
    v23 = (const void *)v11;
    goto LABEL_8;
  }
  v8(v10, v11, v6);
  v24 = *(int *)(v12 + 20);
  v25 = v10 + v24;
  v26 = v11 + v24;
  v27 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  v28 = __swift_getEnumTagSinglePayload(v25, 1, v27);
  v29 = __swift_getEnumTagSinglePayload(v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v25, v26, v6);
      v30 = *(int *)(v27 + 20);
      v31 = (_QWORD *)(v25 + v30);
      v32 = (_QWORD *)(v26 + v30);
      *v31 = *v32;
      v31[1] = v32[1];
      swift_bridgeObjectRetain();
      v33 = v25;
      v34 = v27;
LABEL_14:
      __swift_storeEnumTagSinglePayload(v33, 0, 1, v34);
      return a1;
    }
  }
  else
  {
    if (!v29)
    {
      v8(v25, v26, v6);
      v39 = *(int *)(v27 + 20);
      v40 = (_QWORD *)(v25 + v39);
      v41 = (_QWORD *)(v26 + v39);
      *v40 = *v41;
      v40[1] = v41[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358(v25, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
  v22 = (void *)v25;
  v23 = (const void *)v26;
LABEL_8:
  memcpy(v22, v23, v21);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v14, (uint64_t)v15, v6);
      *(_OWORD *)&v14[*(int *)(v16 + 20)] = *(_OWORD *)&v15[*(int *)(v16 + 20)];
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload(v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v15(v10, v11, v6);
      v16 = *(int *)(v12 + 20);
      v17 = (char *)(v10 + v16);
      v18 = (char *)(v11 + v16);
      v19 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v15((uint64_t)v17, (uint64_t)v18, v6);
        *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
        __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      }
      v30 = v10;
      v31 = v12;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v14)
  {
    sub_1C1D6C358(v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
LABEL_7:
    v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF724820) - 8) + 64);
    v22 = (void *)v10;
    v23 = (const void *)v11;
    goto LABEL_8;
  }
  v8(v10, v11, v6);
  v24 = *(int *)(v12 + 20);
  v25 = v10 + v24;
  v26 = v11 + v24;
  v27 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  v28 = __swift_getEnumTagSinglePayload(v25, 1, v27);
  v29 = __swift_getEnumTagSinglePayload(v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v25, v26, v6);
      *(_OWORD *)(v25 + *(int *)(v27 + 20)) = *(_OWORD *)(v26 + *(int *)(v27 + 20));
      v30 = v25;
      v31 = v27;
LABEL_14:
      __swift_storeEnumTagSinglePayload(v30, 0, 1, v31);
      return a1;
    }
  }
  else
  {
    if (!v29)
    {
      v8(v25, v26, v6);
      v33 = *(int *)(v27 + 20);
      v34 = (_QWORD *)(v25 + v33);
      v35 = (uint64_t *)(v26 + v33);
      v37 = *v35;
      v36 = v35[1];
      *v34 = v37;
      v34[1] = v36;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358(v25, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0) - 8) + 64);
  v22 = (void *)v25;
  v23 = (const void *)v26;
LABEL_8:
  memcpy(v22, v23, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE2B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_41Tm_0(a1, a2, a3, &qword_1EF724820);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE2B80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_42Tm_0(a1, a2, a3, a4, &qword_1EF724820);
}

void sub_1C1EE2B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C1EE32C8(a1, a2, a3, qword_1EF72DFC0, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue);
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v15 = *(int *)(v12 + 20);
      v16 = &v10[v15];
      v17 = &v11[v15];
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v18;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  result = __swift_getEnumTagSinglePayload(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v13 = *(int *)(v11 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v20 = *(int *)(v12 + 20);
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358((uint64_t)v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v15 = *(int *)(v12 + 20);
  v16 = &v10[v15];
  v17 = &v11[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    *(_OWORD *)&v9[*(int *)(v11 + 20)] = *(_OWORD *)&v10[*(int *)(v11 + 20)];
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    if (!v14)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v17 = *(int *)(v12 + 20);
      v18 = &v10[v17];
      v19 = &v11[v17];
      v21 = *(_QWORD *)v19;
      v20 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358((uint64_t)v10, type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE31C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_41Tm_0(a1, a2, a3, &qword_1EF72DAB0);
}

uint64_t __swift_get_extra_inhabitant_index_41Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_52_0();
  if (v9)
  {
    v10 = v8;
    v11 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v11 = a1 + *(int *)(a3 + 20);
  }
  return OUTLINED_FUNCTION_10_4(v11, a2, v10);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE3238(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_42Tm_0(a1, a2, a3, a4, &qword_1EF72DAB0);
}

uint64_t __swift_store_extra_inhabitant_index_42Tm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(*(_QWORD *)(OUTLINED_FUNCTION_8() - 8) + 84) == a3)
    OUTLINED_FUNCTION_165();
  else
    __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_132_0();
  return __swift_storeEnumTagSinglePayload(v6, v7, v8, v9);
}

void sub_1C1EE32B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C1EE32C8(a1, a2, a3, qword_1EF72E058, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App);
}

void sub_1C1EE32C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  OUTLINED_FUNCTION_355();
  if (v7 <= 0x3F)
  {
    sub_1C1D4D44C(319, a4, a5);
    if (v8 <= 0x3F)
      OUTLINED_FUNCTION_466();
  }
}

void _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwCP_0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  if ((*(_DWORD *)(*(_QWORD *)(a3 - 8) + 80) & 0x20000) != 0)
  {
    *a1 = *a2;
    swift_retain();
  }
  else
  {
    v5 = OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_78(v5);
    OUTLINED_FUNCTION_186_3((_QWORD *)((char *)a2 + *(int *)(a3 + 20)));
  }
  OUTLINED_FUNCTION_101();
}

uint64_t _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  OUTLINED_FUNCTION_12_2(*(int *)(a2 + 20));
  return swift_bridgeObjectRelease();
}

void _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwcp_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_239(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16));
  OUTLINED_FUNCTION_158_2();
  OUTLINED_FUNCTION_186_3(v3);
  OUTLINED_FUNCTION_101();
}

void _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwca_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_239(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24));
  OUTLINED_FUNCTION_158_2();
  *v4 = *v3;
  v4[1] = v3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_101();
}

void _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_239(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32));
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  OUTLINED_FUNCTION_101();
}

void _s12SiriNLUTypes42Siri_Nlu_External_NluRouter_PommesResponseVwta_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_239(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40));
  OUTLINED_FUNCTION_158_2();
  v4 = *v3;
  v5 = v3[1];
  *v6 = v4;
  v6[1] = v5;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_101();
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RetrievedContext.TypedValue.PrimitiveValue.App()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE3564()
{
  uint64_t result;
  unint64_t v1;

  result = OUTLINED_FUNCTION_355();
  if (v1 <= 0x3F)
  {
    OUTLINED_FUNCTION_466();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_QueryDecorationOutput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v5;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_QueryDecorationOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_1C201947C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Siri_Nlu_External_NluRouter_QueryDecorationOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_External_NluRouter_QueryDecorationOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_QueryDecorationOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_External_NluRouter_QueryDecorationOutput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_QueryDecorationOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EE399C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_209();
  if (v1)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_363(*(int *)(v2 + 36));
    OUTLINED_FUNCTION_10_4(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_QueryDecorationOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EE39EC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_52_2();
  if (v0)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v1, v2, v3, v4);
  }
}

uint64_t sub_1C1EE3A30()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v10 = *v11;
      v15 = *(int *)(v12 + 20);
      v16 = (char *)v10 + v15;
      v17 = (char *)v11 + v15;
      swift_bridgeObjectRetain();
      v8((uint64_t *)v16, (uint64_t *)v17, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    v18 = *(int *)(a3 + 24);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v19, (uint64_t *)v20, v7);
      v23 = *(int *)(v21 + 20);
      v24 = &v19[v23];
      v25 = &v20[v23];
      v26 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v26;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = sub_1C201947C();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
  }
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  result = __swift_getEnumTagSinglePayload(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v13 = *(int *)(v11 + 20);
    v14 = (char *)v9 + v13;
    v15 = (char *)v10 + v13;
    swift_bridgeObjectRetain();
    v7((uint64_t)v14, (uint64_t)v15, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v16 = *(int *)(a3 + 24);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v17, (uint64_t)v18, v6);
    v21 = *(int *)(v19 + 20);
    v22 = &v17[v21];
    v23 = &v18[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = sub_1C201947C();
  v33 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 24);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (EnumTagSinglePayload)
  {
    if (!v13)
    {
      *v9 = *v10;
      v14 = *(int *)(v11 + 20);
      v15 = (char *)v9 + v14;
      v16 = (char *)v10 + v14;
      v17 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
      swift_bridgeObjectRetain();
      v17(v15, v16, v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1C1D6C358((uint64_t)v9, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *v9 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
LABEL_7:
  v19 = *(int *)(a3 + 24);
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v22);
  v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22);
  if (!v23)
  {
    if (!v24)
    {
      v7((uint64_t)v20, (uint64_t)v21, v6);
      v30 = *(int *)(v22 + 20);
      v31 = &v20[v30];
      v32 = &v21[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358((uint64_t)v20, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v20, v21, v6);
  v25 = *(int *)(v22 + 20);
  v26 = &v20[v25];
  v27 = &v21[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1C201947C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v9 = *v10;
    v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    *(_OWORD *)&v14[*(int *)(v16 + 20)] = *(_OWORD *)&v15[*(int *)(v16 + 20)];
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int EnumTagSinglePayload;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_1C201947C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (EnumTagSinglePayload)
  {
    if (!v14)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v10[*(int *)(v12 + 20)], &v11[*(int *)(v12 + 20)], v6);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_1C1D6C358((uint64_t)v10, type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v10 = *(_QWORD *)v11;
  swift_bridgeObjectRelease();
  v8((uint64_t)&v10[*(int *)(v12 + 20)], (uint64_t)&v11[*(int *)(v12 + 20)], v6);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse(0);
  v20 = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (!v20)
  {
    if (!v21)
    {
      v8((uint64_t)v17, (uint64_t)v18, v6);
      v24 = *(int *)(v19 + 20);
      v25 = &v17[v24];
      v26 = &v18[v24];
      v28 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1);
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C1D6C358((uint64_t)v17, type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  *(_OWORD *)&v17[*(int *)(v19 + 20)] = *(_OWORD *)&v18[*(int *)(v19 + 20)];
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE44CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_52_0();
  if (v9)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    OUTLINED_FUNCTION_52_0();
    if (v9)
    {
      v7 = v10;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
      v11 = *(int *)(a3 + 24);
    }
    v8 = a1 + v11;
  }
  return OUTLINED_FUNCTION_10_4(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE4550()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v0)
  {
    OUTLINED_FUNCTION_165();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAB8);
    OUTLINED_FUNCTION_53_1();
    if (!v0)
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF72DAC0);
  }
  OUTLINED_FUNCTION_132_0();
  return OUTLINED_FUNCTION_12_1(v1, v2, v3, v4);
}

void sub_1C1EE45C8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1C201947C();
  if (v0 <= 0x3F)
  {
    sub_1C1D4D44C(319, &qword_1EF72E220, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse);
    if (v1 <= 0x3F)
    {
      sub_1C1D4D44C(319, qword_1EF72E228, (void (*)(uint64_t))type metadata accessor for Siri_Nlu_External_NluRouter_PommesResponse);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_NLRouterTurnContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    v7 = *(int *)(a3 + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1C201947C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t destroy for Siri_Nlu_External_NluRouter_NLRouterTurnContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1C201947C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Siri_Nlu_External_NluRouter_NLRouterTurnContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_External_NluRouter_NLRouterTurnContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Siri_Nlu_External_NluRouter_NLRouterTurnContext(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_External_NluRouter_NLRouterTurnContext(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterTurnContext()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1C1EE4A18()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_209();
  if (v1)
  {
    OUTLINED_FUNCTION_39_2();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v2 = v0;
    OUTLINED_FUNCTION_8();
    v3 = OUTLINED_FUNCTION_363(*(int *)(v2 + 32));
    OUTLINED_FUNCTION_10_4(v3, v4, v5);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_NLRouterTurnContext()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EE4A68()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_52_2();
  if (v0)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v1, v2, v3, v4);
  }
}

uint64_t sub_1C1EE4AAC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RequestSummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_RequestSummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_36Tm()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_52_2();
  if (v0)
  {
    OUTLINED_FUNCTION_359();
    OUTLINED_FUNCTION_101();
  }
  else
  {
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v1, v2, v3, v4);
  }
}

uint64_t sub_1C1EE4B8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Siri_Nlu_External_NluRouter_TurnSummary(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C201947C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for Siri_Nlu_External_NluRouter_TurnSummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Siri_Nlu_External_NluRouter_TurnSummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Siri_Nlu_External_NluRouter_TurnSummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Siri_Nlu_External_NluRouter_TurnSummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_External_NluRouter_TurnSummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_index_37Tm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_8();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    OUTLINED_FUNCTION_10_4(a1, a2, v4);
  else
    OUTLINED_FUNCTION_101();
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_External_NluRouter_TurnSummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_index_38Tm_0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_53_1();
  if (v7)
  {
    OUTLINED_FUNCTION_165();
    OUTLINED_FUNCTION_132_0();
    OUTLINED_FUNCTION_12_1(v8, v9, v10, v11);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
    OUTLINED_FUNCTION_101();
  }
}

uint64_t sub_1C1EE4FF0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s12SiriNLUTypes39Siri_Nlu_External_NluRouter_TurnSummaryV15ExecutionSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C1EE50B8 + 4 * byte_1C2044186[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C1EE50EC + 4 * byte_1C2044181[v4]))();
}

uint64_t sub_1C1EE50EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EE50F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C1EE50FCLL);
  return result;
}

uint64_t sub_1C1EE5108(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C1EE5110);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C1EE5114(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C1EE511C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource()
{
  return &type metadata for Siri_Nlu_External_NluRouter_TurnSummary.ExecutionSource;
}

uint64_t OUTLINED_FUNCTION_44_11()
{
  return sub_1C20196BC();
}

uint64_t OUTLINED_FUNCTION_46_9()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_47_7()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_48_12()
{
  return sub_1C201992C();
}

uint64_t OUTLINED_FUNCTION_50_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(0);
}

uint64_t OUTLINED_FUNCTION_73_13()
{
  return sub_1C2019674();
}

uint64_t OUTLINED_FUNCTION_77_6()
{
  return sub_1C20196D4();
}

uint64_t OUTLINED_FUNCTION_83_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_84_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3 + a1, v1);
}

void OUTLINED_FUNCTION_85_8()
{
  sub_1C1EDC34C();
}

void OUTLINED_FUNCTION_97_3()
{
  sub_1C1EDD708();
}

uint64_t OUTLINED_FUNCTION_102_5()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t OUTLINED_FUNCTION_110_5()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
}

uint64_t OUTLINED_FUNCTION_111_5()
{
  return sub_1C20196D4();
}

uint64_t OUTLINED_FUNCTION_112_4()
{
  return sub_1C2019698();
}

uint64_t OUTLINED_FUNCTION_118_3(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_125_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

void OUTLINED_FUNCTION_142_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_1C1E10758(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_145_1()
{
  return sub_1C2019638();
}

void OUTLINED_FUNCTION_150_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_153_4()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_156_2()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Siri_Nlu_External_NluRouter_NLParseResponse(0);
  return __swift_storeEnumTagSinglePayload(v0, 1, 1, v1);
}

void OUTLINED_FUNCTION_162_2(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  sub_1C1D48918(v1 + a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_169_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return type metadata accessor for Siri_Nlu_External_NluRouter_TurnSummary(0);
}

uint64_t OUTLINED_FUNCTION_170_4()
{
  return sub_1C20196BC();
}

uint64_t OUTLINED_FUNCTION_173_4()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_174_3()
{
  return sub_1C2019A70();
}

uint64_t OUTLINED_FUNCTION_176_5()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterServiceRequest(0);
}

uint64_t OUTLINED_FUNCTION_177_5()
{
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
}

uint64_t OUTLINED_FUNCTION_180_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return type metadata accessor for Siri_Nlu_External_NluRouter_NLRouterTurnProbingResult(0);
}

void OUTLINED_FUNCTION_182_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v3 = *(unsigned __int8 *)(v2 + a1);
  if (v3 == 3)
    LOBYTE(v3) = 0;
  *(_BYTE *)(v1 + 12) = v3;
  *(_DWORD *)(v1 + 8) = a1;
}

void OUTLINED_FUNCTION_183_3(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  int v3;

  v3 = *(unsigned __int8 *)(v2 + a1);
  if (v3 == 3)
    LOBYTE(v3) = 0;
  *v1 = v3;
}

uint64_t OUTLINED_FUNCTION_186_3@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = a1[1];
  *v1 = *a1;
  v1[1] = v2;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_188_2(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  sub_1C1E10758(a1, v2, v1);
}

void OUTLINED_FUNCTION_194_4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1C1D6C358(v2, a2);
}

uint64_t OUTLINED_FUNCTION_213_2()
{
  return sub_1C2019A64();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.requestID.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 24));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

uint64_t type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult()
{
  uint64_t result;

  result = qword_1EF72E520;
  if (!qword_1EF72E520)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1C1EE54B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Ssu_SSUEncodingResult.requestID.setter(v1, v2);
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.requestID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_11_1();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.requestID.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_0_22() + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = OUTLINED_FUNCTION_12_2(v3);
  if (v4)
  {
    v6 = *v5;
    v7 = v4;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_Ssu_SSUEncodingResult.hasRequestID.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 24));
}

Swift::Void __swiftcall Siri_Nlu_Internal_Ssu_SSUEncodingResult.clearRequestID()()
{
  _QWORD *v0;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.ssuEncoderVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 28));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EE55F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Ssu_SSUEncodingResult.ssuEncoderVersion.setter(v1, v2);
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.ssuEncoderVersion.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_11_1();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.ssuEncoderVersion.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_0_22() + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = OUTLINED_FUNCTION_12_2(v3);
  if (v4)
  {
    v6 = *v5;
    v7 = v4;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_Ssu_SSUEncodingResult.hasSsuEncoderVersion.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 28));
}

Swift::Void __swiftcall Siri_Nlu_Internal_Ssu_SSUEncodingResult.clearSsuEncoderVersion()()
{
  _QWORD *v0;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.utterance.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_12_2(*(int *)(v0 + 32));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_82();
}

void sub_1C1EE573C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  Siri_Nlu_Internal_Ssu_SSUEncodingResult.utterance.setter(v1, v2);
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.utterance.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_11_1();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_101();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.utterance.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(OUTLINED_FUNCTION_0_22() + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = OUTLINED_FUNCTION_12_2(v3);
  if (v4)
  {
    v6 = *v5;
    v7 = v4;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_82();
}

BOOL Siri_Nlu_Internal_Ssu_SSUEncodingResult.hasUtterance.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_0_22();
  return OUTLINED_FUNCTION_5_0(*(int *)(v0 + 32));
}

Swift::Void __swiftcall Siri_Nlu_Internal_Ssu_SSUEncodingResult.clearUtterance()()
{
  _QWORD *v0;

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_10_1();
  *v0 = 0;
  v0[1] = 0;
  OUTLINED_FUNCTION_82();
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.encoding.getter()
{
  return swift_bridgeObjectRetain();
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.encoding.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  OUTLINED_FUNCTION_82();
}

uint64_t (*Siri_Nlu_Internal_Ssu_SSUEncodingResult.encoding.modify())(void)
{
  return nullsub_1;
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.unknownFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_132();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.unknownFields.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_8();
  v0 = OUTLINED_FUNCTION_16_1();
  return OUTLINED_FUNCTION_99(v0, v1, v2, v3);
}

uint64_t (*Siri_Nlu_Internal_Ssu_SSUEncodingResult.unknownFields.modify())(void)
{
  OUTLINED_FUNCTION_0_22();
  return nullsub_1;
}

void Siri_Nlu_Internal_Ssu_SSUEncodingResult.init()(_QWORD *a1@<X8>)
{
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = MEMORY[0x1E0DEE9D8];
  v2 = (int *)OUTLINED_FUNCTION_0_22();
  _s12SiriNLUTypes0A40_Nlu_Internal_NlRouter_OverrideMatchRuleV16PlannerPromptingVAEycfC_0();
  v3 = (_QWORD *)((char *)a1 + v2[6]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)((char *)a1 + v2[7]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)((char *)a1 + v2[8]);
  *v5 = 0;
  v5[1] = 0;
  OUTLINED_FUNCTION_82();
}

unint64_t static Siri_Nlu_Internal_Ssu_SSUEncodingResult.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t sub_1C1EE5988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1C2019914();
  __swift_allocate_value_buffer(v0, qword_1EF72E490);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF72E490);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C48);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED7A0C40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2029ED0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "requestId";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1C20198F0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ssuEncoderVersion";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "utterance";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "encoding";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return sub_1C20198FC();
}

uint64_t static Siri_Nlu_Internal_Ssu_SSUEncodingResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1EF7247A0 != -1)
    swift_once();
  v2 = sub_1C2019914();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EF72E490);
  return OUTLINED_FUNCTION_99(a1, v3, v2, *(uint64_t (**)(void))(*(_QWORD *)(v2 - 8) + 16));
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1C20194DC();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          OUTLINED_FUNCTION_56();
          sub_1C1EE5C7C();
          break;
        case 2:
          OUTLINED_FUNCTION_56();
          sub_1C1EE5CDC();
          break;
        case 3:
          OUTLINED_FUNCTION_56();
          sub_1C1EE5D3C();
          break;
        case 4:
          sub_1C2019524();
          break;
        default:
          break;
      }
      result = sub_1C20194DC();
    }
  }
  return result;
}

uint64_t sub_1C1EE5C7C()
{
  type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult();
  return sub_1C2019578();
}

uint64_t sub_1C1EE5CDC()
{
  type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult();
  return sub_1C2019578();
}

uint64_t sub_1C1EE5D3C()
{
  type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult();
  return sub_1C2019578();
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t result;

  v2 = v1;
  v3 = (int *)type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult();
  if (!*(_QWORD *)(v0 + v3[6] + 8) || (result = OUTLINED_FUNCTION_4_13(), (v2 = v1) == 0))
  {
    if (!*(_QWORD *)(v0 + v3[7] + 8) || (result = OUTLINED_FUNCTION_4_13(), (v2 = v1) == 0))
    {
      if (!*(_QWORD *)(v0 + v3[8] + 8) || (result = OUTLINED_FUNCTION_4_13(), (v2 = v1) == 0))
      {
        if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
          return sub_1C2019464();
        result = sub_1C2019644();
        if (!v2)
          return sub_1C2019464();
      }
    }
  }
  return result;
}

uint64_t static Siri_Nlu_Internal_Ssu_SSUEncodingResult.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v36;

  v4 = OUTLINED_FUNCTION_8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v36 - v9;
  v11 = OUTLINED_FUNCTION_0_22();
  OUTLINED_FUNCTION_22_3();
  if (!v14)
  {
    if (v12)
      goto LABEL_30;
    goto LABEL_10;
  }
  if (!v12)
    goto LABEL_30;
  OUTLINED_FUNCTION_4(v13);
  v17 = v17 && v15 == v16;
  if (v17 || (v18 = 0, (OUTLINED_FUNCTION_13() & 1) != 0))
  {
LABEL_10:
    OUTLINED_FUNCTION_22_3();
    if (v21)
    {
      if (!v19)
        goto LABEL_30;
      OUTLINED_FUNCTION_4(v20);
      if (!v17 || v22 != v23)
      {
        v18 = 0;
        if ((OUTLINED_FUNCTION_13() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v19)
    {
      goto LABEL_30;
    }
    OUTLINED_FUNCTION_22_3();
    if (v27)
    {
      if (!v25)
        goto LABEL_30;
      OUTLINED_FUNCTION_4(v26);
      if (!v17 || v28 != v29)
      {
        v18 = 0;
        if ((OUTLINED_FUNCTION_13() & 1) == 0)
          return v18 & 1;
      }
    }
    else if (v25)
    {
      goto LABEL_30;
    }
    if ((sub_1C1D45428(*a1, *a2) & 1) != 0)
    {
      v31 = (char *)a1 + *(int *)(v11 + 20);
      v32 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v32(v10, v31, v4);
      v32(v8, (char *)a2 + *(int *)(v11 + 20), v4);
      sub_1C1D505C8(&qword_1EF7247C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v18 = sub_1C2019944();
      v33 = *(void (**)(uint64_t))(v5 + 8);
      v34 = OUTLINED_FUNCTION_132();
      v33(v34);
      ((void (*)(char *, uint64_t))v33)(v10, v4);
      return v18 & 1;
    }
LABEL_30:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t Siri_Nlu_Internal_Ssu_SSUEncodingResult.hashValue.getter()
{
  sub_1C2019A64();
  OUTLINED_FUNCTION_0_22();
  sub_1C1D505C8(&qword_1EF72E4A8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
  sub_1C201992C();
  return sub_1C2019A70();
}

unint64_t sub_1C1EE60C4()
{
  static Siri_Nlu_Internal_Ssu_SSUEncodingResult.protoMessageName.getter();
  return 0xD000000000000027;
}

uint64_t sub_1C1EE60E8()
{
  return Siri_Nlu_Internal_Ssu_SSUEncodingResult.decodeMessage<A>(decoder:)();
}

uint64_t sub_1C1EE60FC()
{
  return Siri_Nlu_Internal_Ssu_SSUEncodingResult.traverse<A>(visitor:)();
}

uint64_t sub_1C1EE6110()
{
  sub_1C1D505C8(&qword_1EF72E568, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
  return sub_1C20194C4();
}

uint64_t sub_1C1EE6164()
{
  sub_1C1D505C8(&qword_1EF72E4B8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
  return sub_1C2019608();
}

uint64_t sub_1C1EE61A8()
{
  sub_1C1D505C8(&qword_1EF72E4B8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
  return sub_1C2019614();
}

uint64_t sub_1C1EE61FC()
{
  return sub_1C1D505C8(&qword_1EF72E4B0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
}

uint64_t sub_1C1EE6228()
{
  return sub_1C1D505C8(&qword_1EF72E4B8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
}

uint64_t sub_1C1EE6254()
{
  return sub_1C1D505C8(&qword_1EF72E4A8, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
}

uint64_t sub_1C1EE6280()
{
  return sub_1C1D505C8(&qword_1EF72E4C0, (uint64_t (*)(uint64_t))type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult, (uint64_t)&protocol conformance descriptor for Siri_Nlu_Internal_Ssu_SSUEncodingResult);
}

void sub_1C1EE62AC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  Siri_Nlu_Internal_Ssu_SSUEncodingResult.requestID.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EE62D4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  Siri_Nlu_Internal_Ssu_SSUEncodingResult.ssuEncoderVersion.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_82();
}

void sub_1C1EE62FC(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  Siri_Nlu_Internal_Ssu_SSUEncodingResult.utterance.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_82();
}

uint64_t *initializeBufferWithCopyOfBuffer for Siri_Nlu_Internal_Ssu_SSUEncodingResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1C201947C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v7 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v7 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[8];
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Siri_Nlu_Internal_Ssu_SSUEncodingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C201947C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Siri_Nlu_Internal_Ssu_SSUEncodingResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (_QWORD *)((char *)a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)((char *)a1 + v12);
  v17 = (_QWORD *)((char *)a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Siri_Nlu_Internal_Ssu_SSUEncodingResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for Siri_Nlu_Internal_Ssu_SSUEncodingResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for Siri_Nlu_Internal_Ssu_SSUEncodingResult(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C201947C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Siri_Nlu_Internal_Ssu_SSUEncodingResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C1EE67C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_8();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Siri_Nlu_Internal_Ssu_SSUEncodingResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1C1EE6840(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_101();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_8();
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t sub_1C1EE68A0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C201947C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return type metadata accessor for Siri_Nlu_Internal_Ssu_SSUEncodingResult();
}

uint64_t OUTLINED_FUNCTION_4_13()
{
  return sub_1C2019698();
}

void sirinluexternal::LegacyNLContext::~LegacyNLContext(sirinluexternal::LegacyNLContext *this)
{
  sirinluexternal::LegacyNLContext::~LegacyNLContext(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAE238;
  v8 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::LegacyNLContext::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  std::allocator<std::string> *v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  std::__split_buffer<std::string>::pointer end;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  std::string *v69;
  unint64_t v70;
  std::string *value;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int64x2_t v75;
  std::string *v76;
  std::string::size_type v77;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (std::vector<std::string> *)&this[2].u64[1];
  v9 = (std::allocator<std::string> *)&this[3].u64[1];
  v10 = (std::allocator<std::string> *)&this[2];
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v16 = *(_BYTE *)(v11 + v2);
      v14 |= (unint64_t)(v16 & 0x7F) << v12;
      if ((v16 & 0x80) == 0)
        break;
      v12 += 7;
      v2 = v15;
      v17 = v13++ > 8;
      if (v17)
        goto LABEL_20;
    }
LABEL_26:
    if ((v14 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v14 >> 3))
    {
      case 1u:
        this[4].i8[8] |= 2u;
        v24 = *((_QWORD *)a2 + 1);
        if (v24 >= *((_QWORD *)a2 + 2))
        {
          v27 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v25 = v24 + 1;
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
          *((_QWORD *)a2 + 1) = v25;
          v27 = v26 != 0;
        }
        this[4].i8[4] = v27;
        goto LABEL_21;
      case 2u:
        this[4].i8[8] |= 8u;
        v36 = *((_QWORD *)a2 + 1);
        if (v36 >= *((_QWORD *)a2 + 2))
        {
          v39 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v37 = v36 + 1;
          v38 = *(unsigned __int8 *)(*(_QWORD *)a2 + v36);
          *((_QWORD *)a2 + 1) = v37;
          v39 = v38 != 0;
        }
        this[4].i8[6] = v39;
        goto LABEL_21;
      case 3u:
        v43 = (_QWORD *)operator new();
        v43[1] = 0;
        v43[2] = 0;
        *v43 = 0;
        v44 = this->i64[1];
        this->i64[1] = (uint64_t)v43;
        if (v44)
          std::default_delete<std::string>::operator()[abi:ne180100](v44);
        goto LABEL_79;
      case 4u:
        this[4].i8[8] |= 4u;
        v45 = *((_QWORD *)a2 + 1);
        if (v45 >= *((_QWORD *)a2 + 2))
        {
          v48 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
          *((_QWORD *)a2 + 1) = v46;
          v48 = v47 != 0;
        }
        this[4].i8[5] = v48;
        goto LABEL_21;
      case 5u:
        v49 = (_QWORD *)operator new();
        v50 = v49;
        *v49 = &off_1E7BB0538;
        v49[1] = 0;
        v52 = (_QWORD *)this[1].i64[1];
        v51 = this[2].u64[0];
        if ((unint64_t)v52 >= v51)
        {
          v63 = this[1].i64[0];
          v64 = ((uint64_t)v52 - v63) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v65 = v51 - v63;
          v66 = v65 >> 2;
          if (v65 >> 2 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v67 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          __v.__end_cap_.__value_ = v10;
          if (v67)
            v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v67);
          else
            v68 = 0;
          v70 = v67 + 8 * v64;
          value = (std::string *)(v67 + 8 * v68);
          __v.__end_cap_.__value_ = value;
          *(_QWORD *)v70 = v50;
          end = (std::__split_buffer<std::string>::pointer)(v70 + 8);
          __v.__end_ = (std::__split_buffer<std::string>::pointer)(v70 + 8);
          v73 = (_QWORD *)this[1].i64[0];
          v72 = (_QWORD *)this[1].i64[1];
          if (v72 == v73)
          {
            v75 = vdupq_n_s64((unint64_t)v72);
          }
          else
          {
            do
            {
              v74 = *--v72;
              *v72 = 0;
              *(_QWORD *)(v70 - 8) = v74;
              v70 -= 8;
            }
            while (v72 != v73);
            v75 = this[1];
            end = __v.__end_;
            value = __v.__end_cap_.__value_;
          }
          this[1].i64[0] = v70;
          this[1].i64[1] = (uint64_t)end;
          *(int64x2_t *)&__v.__begin_ = v75;
          v76 = (std::string *)this[2].i64[0];
          this[2].i64[0] = (uint64_t)value;
          __v.__end_cap_.__value_ = v76;
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v75.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *v52 = v49;
          end = (std::__split_buffer<std::string>::pointer)(v52 + 1);
        }
        this[1].i64[1] = (uint64_t)end;
        v77 = end[-1].__r_.__value_.__r.__words[2];
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(std::string::size_type, PB::Reader *))(*(_QWORD *)v77 + 16))(v77, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_21:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 7u:
        this[4].i8[8] |= 1u;
        v28 = *((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        v30 = *(_QWORD *)a2;
        if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
        {
          v31 = 0;
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = v28 + 1;
            *((_QWORD *)a2 + 1) = v28 + 1;
            v35 = *(_BYTE *)(v30 + v28);
            v33 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              goto LABEL_92;
            v31 += 7;
            v28 = v34;
            v17 = v32++ > 8;
          }
          while (!v17);
LABEL_53:
          LODWORD(v33) = 0;
          goto LABEL_92;
        }
        v54 = 0;
        v55 = 0;
        v33 = 0;
        if (v29 <= v28)
          v29 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v29 == v28)
          {
            LODWORD(v33) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v56 = v28 + 1;
            v57 = *(_BYTE *)(v30 + v28);
            *((_QWORD *)a2 + 1) = v56;
            v33 |= (unint64_t)(v57 & 0x7F) << v54;
            if (v57 < 0)
            {
              v54 += 7;
              v28 = v56;
              v17 = v55++ > 8;
              if (v17)
                goto LABEL_53;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v33) = 0;
          }
          break;
        }
LABEL_92:
        this[4].i32[0] = v33;
        goto LABEL_21;
      case 8u:
        v41 = (char *)this[3].i64[0];
        v40 = this[3].u64[1];
        if ((unint64_t)v41 >= v40)
        {
          v58 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (char *)v8->__begin_) >> 3);
          v59 = v58 + 1;
          if (v58 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v60 > v59)
            v59 = 2 * v60;
          if (v60 >= 0x555555555555555)
            v61 = 0xAAAAAAAAAAAAAAALL;
          else
            v61 = v59;
          __v.__end_cap_.__value_ = v9;
          if (v61)
            v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v61);
          else
            v62 = 0;
          v69 = (std::string *)(v61 + 24 * v58);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v61;
          __v.__begin_ = v69;
          __v.__end_cap_.__value_ = (std::string *)(v61 + 24 * v62);
          v69->__r_.__value_.__r.__words[0] = 0;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v69 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v42 = (_QWORD *)this[3].i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v41 = 0;
          *((_QWORD *)v41 + 1) = 0;
          *((_QWORD *)v41 + 2) = 0;
          v42 = v41 + 24;
          this[3].i64[0] = (uint64_t)(v41 + 24);
        }
        this[3].i64[0] = (uint64_t)v42;
LABEL_79:
        PB::Reader::read();
        goto LABEL_21;
      default:
        goto LABEL_20;
    }
  }
  v18 = 0;
  v19 = 0;
  v14 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v20 = v2 + 1;
    v21 = *(_BYTE *)(v11 + v2);
    *((_QWORD *)a2 + 1) = v20;
    v14 |= (unint64_t)(v21 & 0x7F) << v18;
    if ((v21 & 0x80) == 0)
      goto LABEL_26;
    v18 += 7;
    v2 = v20;
    v17 = v19++ > 8;
  }
  while (!v17);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

void sub_1C1EE6F1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::LegacyNLContext::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  v4 = *(_BYTE *)(this + 72);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 72);
  }
  if ((v4 & 8) != 0)
    this = PB::Writer::write(a2);
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    this = PB::Writer::write(a2);
  v5 = *(const PB::Base ***)(v3 + 16);
  v6 = *(const PB::Base ***)(v3 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v9 = *(_QWORD *)(v3 + 40);
  v8 = *(_QWORD *)(v3 + 48);
  while (v9 != v8)
  {
    this = PB::Writer::write();
    v9 += 24;
  }
  return this;
}

uint64_t sirinluexternal::LegacyNLContext::formatText(sirinluexternal::LegacyNLContext *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 72);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dictation_prompt");
    v5 = *((_BYTE *)this + 72);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((_BYTE *)this + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "legacy_context_source");
  if ((*((_BYTE *)this + 72) & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "listen_after_speaking");
LABEL_5:
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "rendered_texts");
  }
  v9 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); v9 != i; v9 += 24)
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 72) & 8) != 0)
    PB::TextFormatter::format(a2, "strict_prompt");
  return PB::TextFormatter::endObject(a2);
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB720CLL);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::__split_buffer<std::string>::pointer v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7BA5D18, MEMORY[0x1E0DE42D0]);
}

void sub_1C1EE7344(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

double sirinluexternal::LegacyNLContext::LegacyNLContext(sirinluexternal::LegacyNLContext *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE238;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE238;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

sirinluexternal::LegacyNLContext *sirinluexternal::LegacyNLContext::LegacyNLContext(sirinluexternal::LegacyNLContext *this, const sirinluexternal::LegacyNLContext *a2)
{
  uint64_t *v4;
  std::vector<std::string> *v5;
  char v6;
  char v7;
  char v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  const siricommon::StringValue **v15;
  const siricommon::StringValue **i;
  const siricommon::StringValue *v17;
  siricommon::StringValue *v18;
  unint64_t v19;
  siricommon::StringValue **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  siricommon::StringValue **v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  siricommon::StringValue *v32;
  int64x2_t v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  int64x2_t v38;
  unint64_t v39;
  char *v40;

  *(_QWORD *)this = &off_1E7BAE238;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (std::vector<std::string> *)((char *)this + 40);
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  if ((*((_BYTE *)a2 + 72) & 2) == 0)
  {
    v6 = 8;
    if ((*((_BYTE *)a2 + 72) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_BYTE *)a2 + 68);
  *((_BYTE *)this + 72) = 2;
  *((_BYTE *)this + 68) = v7;
  v6 = 10;
  if ((*((_BYTE *)a2 + 72) & 8) != 0)
  {
LABEL_5:
    v8 = *((_BYTE *)a2 + 70);
    *((_BYTE *)this + 72) = v6;
    *((_BYTE *)this + 70) = v8;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *v4;
    *v4 = (uint64_t)v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  if ((*((_BYTE *)a2 + 72) & 4) != 0)
  {
    v14 = *((_BYTE *)a2 + 69);
    *((_BYTE *)this + 72) |= 4u;
    *((_BYTE *)this + 69) = v14;
  }
  v15 = (const siricommon::StringValue **)*((_QWORD *)a2 + 2);
  for (i = (const siricommon::StringValue **)*((_QWORD *)a2 + 3); v15 != i; ++v15)
  {
    v17 = *v15;
    v18 = (siricommon::StringValue *)operator new();
    siricommon::StringValue::StringValue(v18, v17);
    v20 = (siricommon::StringValue **)*((_QWORD *)this + 3);
    v19 = *((_QWORD *)this + 4);
    if ((unint64_t)v20 >= v19)
    {
      v22 = *((_QWORD *)this + 2);
      v23 = ((uint64_t)v20 - v22) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v24 = v19 - v22;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      v40 = (char *)this + 32;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v26);
      else
        v27 = 0;
      v28 = (siricommon::StringValue **)(v26 + 8 * v23);
      v29 = v26 + 8 * v27;
      v39 = v29;
      *v28 = v18;
      v21 = v28 + 1;
      v38.i64[1] = (uint64_t)(v28 + 1);
      v31 = (_QWORD *)*((_QWORD *)this + 2);
      v30 = (_QWORD *)*((_QWORD *)this + 3);
      if (v30 == v31)
      {
        v33 = vdupq_n_s64((unint64_t)v30);
      }
      else
      {
        do
        {
          v32 = (siricommon::StringValue *)*--v30;
          *v30 = 0;
          *--v28 = v32;
        }
        while (v30 != v31);
        v33 = *((int64x2_t *)this + 1);
        v21 = (_QWORD *)v38.i64[1];
        v29 = v39;
      }
      *((_QWORD *)this + 2) = v28;
      *((_QWORD *)this + 3) = v21;
      v38 = v33;
      v34 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v29;
      v39 = v34;
      v37 = v33.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *v20 = v18;
      v21 = v20 + 1;
    }
    *((_QWORD *)this + 3) = v21;
  }
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v35 = *((_DWORD *)a2 + 16);
    *((_BYTE *)this + 72) |= 1u;
    *((_DWORD *)this + 16) = v35;
  }
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 5), *((__int128 **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  return this;
}

void sub_1C1EE77B8(void *a1)
{
  __clang_call_terminate(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  std::string *end;
  __int128 *v16;
  uint64_t v17;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_25;
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555
        ? 0xAAAAAAAAAAAAAAALL
        : v10;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
LABEL_25:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v11);
    a1->__begin_ = v12;
    a1->__end_ = v12;
    a1->__end_cap_.__value_ = &v12[v13];
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, v12);
LABEL_16:
    a1->__end_ = v14;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v16 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v17 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v17 -= 24;
      }
      while (v17);
      begin = a1->__end_;
    }
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v16, a3, begin);
    goto LABEL_16;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1C1EE7A18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C1EE7ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t sirinluexternal::LegacyNLContext::operator=(uint64_t a1, const sirinluexternal::LegacyNLContext *a2)
{
  sirinluexternal::LegacyNLContext *v3;
  _BYTE v5[80];

  if ((const sirinluexternal::LegacyNLContext *)a1 != a2)
  {
    sirinluexternal::LegacyNLContext::LegacyNLContext((sirinluexternal::LegacyNLContext *)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::LegacyNLContext *)v5, v3);
    sirinluexternal::LegacyNLContext::~LegacyNLContext((sirinluexternal::LegacyNLContext *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::LegacyNLContext *a2, sirinluexternal::LegacyNLContext *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 68);
  *(_BYTE *)(this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 70);
  *(_BYTE *)(this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 69);
  *(_BYTE *)(this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  return this;
}

uint64_t sirinluexternal::LegacyNLContext::LegacyNLContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BAE238;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = (void **)(a1 + 16);
  v7 = *(_QWORD **)(a1 + 16);
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v9 = v7;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t sirinluexternal::LegacyNLContext::operator=(uint64_t a1, uint64_t a2)
{
  sirinluexternal::LegacyNLContext *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    sirinluexternal::LegacyNLContext::LegacyNLContext((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::LegacyNLContext *)v5, v3);
    sirinluexternal::LegacyNLContext::~LegacyNLContext((sirinluexternal::LegacyNLContext *)v5);
  }
  return a1;
}

BOOL sirinluexternal::LegacyNLContext::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  v4 = *(_BYTE *)(a1 + 72);
  v5 = *(_BYTE *)(a2 + 72);
  if ((v4 & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(unsigned __int8 *)(a1 + 68) != *(unsigned __int8 *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_28;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_28:
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if (PB::PtrVector<siricommon::StringValue>::operator==(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24)))
  {
    if ((v4 & 1) != 0)
    {
      if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
        return 0;
    }
    else if ((v5 & 1) != 0)
    {
      return 0;
    }
    return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(*(unsigned __int8 **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(unsigned __int8 **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  return 0;
}

uint64_t PB::PtrVector<siricommon::StringValue>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = siricommon::StringValue::operator==(*(_QWORD *)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == a2;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

BOOL std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BOOL8 result;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  v5 = a1;
  if (a1 == a2)
    return 1;
  v6 = a3;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v5, v6);
    if (!result)
      break;
    v5 += 24;
    v6 += 24;
  }
  while (v5 != a2);
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unint64_t sirinluexternal::LegacyNLContext::hash_value(sirinluexternal::LegacyNLContext *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((_BYTE *)this + 72);
  if ((v2 & 2) != 0)
  {
    v3 = *((unsigned __int8 *)this + 68);
    if ((*((_BYTE *)this + 72) & 8) != 0)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 72) & 8) != 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 70);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v5);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      v7 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v6 = 0;
    if ((v2 & 4) == 0)
      goto LABEL_8;
  }
  v7 = *((unsigned __int8 *)this + 69);
LABEL_11:
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 3);
  if (v8 == v9)
  {
    v10 = 0;
    if ((v2 & 1) == 0)
    {
LABEL_17:
      v12 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if (v11)
        v11 = std::__string_hash<char>::operator()[abi:ne180100](v11);
      v10 ^= v11;
      v8 += 8;
    }
    while (v8 != v9);
    if ((v2 & 1) == 0)
      goto LABEL_17;
  }
  v12 = *((int *)this + 16);
LABEL_20:
  v13 = *((_QWORD *)this + 5);
  v14 = *((_QWORD *)this + 6);
  if (v13 == v14)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v15 ^= std::__string_hash<char>::operator()[abi:ne180100](v13);
      v13 += 24;
    }
    while (v13 != v14);
  }
  return v4 ^ v3 ^ v6 ^ v7 ^ v10 ^ v12 ^ v15;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::~NLv4ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAE288;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAE288;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAE288;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF498;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "response");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse(_QWORD *this)
{
  *this = &off_1E7BAE288;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAE288;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v4;
  sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAE288;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::ContextFeaturizerResponse *)operator new();
    v5 = sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::ContextFeaturizerResponse(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor ***)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAE288;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::NLv4ContextFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAE288;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAE288;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAE288;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::ContextFeaturizerResponse::operator==(v2, v3);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse *this)
{
  uint64_t v1;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v1 + 8)) != 0)
    return sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v2);
  else
    return 0;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4ContextFeaturizerResponse::makeResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF498;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRICOMMONUInt64ValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALUserCancelledReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalspanmatch::SpanMatchRequest::~SpanMatchRequest(sirinluinternalspanmatch::SpanMatchRequest *this)
{
  sirinluinternalspanmatch::SpanMatchRequest::~SpanMatchRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BAE2D8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::readFrom(sirinluinternalspanmatch::SpanMatchRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0140;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_QWORD *)(v20 + 40) = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 3);
        }
        break;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB13B0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_QWORD *)(v20 + 104) = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      case 3u:
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v24 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v23;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100](v24);
        PB::Reader::read();
        goto LABEL_35;
      case 4u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0CB8;
        *(_QWORD *)(v20 + 24) = 0;
        v25 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_35:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_35;
  return result;
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[2];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if (v3[4])
    this = PB::Writer::write();
  v6 = (const PB::Base *)v3[1];
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::formatText(sirinluinternalspanmatch::SpanMatchRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "asrId");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "nl_context");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "token_chain");
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalspanmatch::SpanMatchRequest::SpanMatchRequest(sirinluinternalspanmatch::SpanMatchRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE2D8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE2D8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternalspanmatch::SpanMatchRequest *sirinluinternalspanmatch::SpanMatchRequest::SpanMatchRequest(sirinluinternalspanmatch::SpanMatchRequest *this, const sirinluinternalspanmatch::SpanMatchRequest *a2)
{
  uint64_t *v4;
  sirinluinternal::TokenChain *v5;
  sirinluinternal::TokenChain *v6;
  uint64_t v7;
  sirinluexternal::NLContext *v8;
  sirinluexternal::NLContext *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E7BAE2D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (sirinluinternal::TokenChain *)operator new();
    v6 = sirinluinternal::TokenChain::TokenChain(v5, *((const sirinluinternal::TokenChain **)a2 + 3));
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v8 = (sirinluexternal::NLContext *)operator new();
    v9 = sirinluexternal::NLContext::NLContext(v8, *((const sirinluexternal::SystemDialogAct ****)a2 + 2));
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v11 = (std::string *)operator new();
    v12 = v11;
    v13 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
    }
    v15 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v15)
      std::default_delete<std::string>::operator()[abi:ne180100](v15);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v16 = operator new();
    v17 = sirinluexternal::UUID::UUID(v16, *((const sirinluexternal::UUID **)a2 + 1));
    v18 = *v4;
    *v4 = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::operator=(uint64_t a1, const sirinluinternalspanmatch::SpanMatchRequest *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternalspanmatch::SpanMatchRequest *)a1 != a2)
  {
    sirinluinternalspanmatch::SpanMatchRequest::SpanMatchRequest((sirinluinternalspanmatch::SpanMatchRequest *)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternalspanmatch::SpanMatchRequest::~SpanMatchRequest((sirinluinternalspanmatch::SpanMatchRequest *)v6);
  }
  return a1;
}

_QWORD *sirinluinternalspanmatch::swap(_QWORD *this, sirinluinternalspanmatch::SpanMatchRequest *a2, sirinluinternalspanmatch::SpanMatchRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::SpanMatchRequest(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BAE2D8;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a2[3];
  a2[3] = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[2];
  a2[2] = 0;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[4];
  a2[4] = 0;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  v11 = a2[1];
  a2[1] = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

uint64_t sirinluinternalspanmatch::SpanMatchRequest::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternalspanmatch::SpanMatchRequest::SpanMatchRequest((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternalspanmatch::SpanMatchRequest::~SpanMatchRequest((sirinluinternalspanmatch::SpanMatchRequest *)v6);
  }
  return a1;
}

BOOL sirinluinternalspanmatch::SpanMatchRequest::operator==(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v4 = (_QWORD *)a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluinternal::TokenChain::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (uint64_t *)a1[2];
  v7 = a2[2];
  if (v6)
  {
    if (!v7 || (sirinluexternal::NLContext::operator==(v6, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = (unsigned __int8 *)a1[4];
  v9 = (unsigned __int8 **)a2[4];
  if (!v8)
  {
    if (!v9)
      goto LABEL_31;
    return 0;
  }
  if (!v9)
    return 0;
  v10 = v8[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v8[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v9[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a2[4];
  else
    v14 = *v9;
  if ((v10 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
      goto LABEL_31;
    return 0;
  }
  if (v8[23])
  {
    while (*v8 == *v14)
    {
      ++v8;
      ++v14;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v16 = a1[1];
  v17 = a2[1];
  result = (v16 | v17) == 0;
  if (v16)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
    return sirinluexternal::UUID::operator==(a1[1], v17);
  return result;
}

unint64_t sirinluinternalspanmatch::SpanMatchRequest::hash_value(sirinluinternalspanmatch::SpanMatchRequest *this)
{
  sirinluinternal::TokenChain *v2;
  unint64_t v3;
  sirinluexternal::NLContext *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 3);
  if (v2)
    v3 = sirinluinternal::TokenChain::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluexternal::NLContext *)*((_QWORD *)this + 2);
  if (v4)
    v5 = sirinluexternal::NLContext::hash_value(v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 28) & 1) != 0)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 28) & 2) != 0)
      {
LABEL_12:
        v9 = *(_QWORD *)(v7 + 16);
        if ((*(_BYTE *)(v7 + 28) & 4) != 0)
        {
LABEL_13:
          v10 = *(int *)(v7 + 24);
LABEL_17:
          v7 = v9 ^ v8 ^ v10;
          return v5 ^ v3 ^ v6 ^ v7;
        }
LABEL_16:
        v10 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      v8 = 0;
      if ((*(_BYTE *)(v7 + 28) & 2) != 0)
        goto LABEL_12;
    }
    v9 = 0;
    if ((*(_BYTE *)(v7 + 28) & 4) != 0)
      goto LABEL_13;
    goto LABEL_16;
  }
  return v5 ^ v3 ^ v6 ^ v7;
}

_QWORD *sirinluinternalspanmatch::SpanMatchRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalspanmatch::SpanMatchRequest::makeNlContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB13B0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_QWORD *)(v2 + 104) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalspanmatch::SpanMatchRequest::makeAsrId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::Task::~Task(sirinluexternal::Task *this)
{
  sirinluexternal::Task::~Task(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAE328;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::Task::readFrom(sirinluexternal::Task *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0C18;
        *(_DWORD *)(v20 + 16) = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 1);
        }
      }
      else if ((_DWORD)v19 == 2)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB2398;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0CB8;
        *(_QWORD *)(v20 + 24) = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 3);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::Task::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6);
  return this;
}

uint64_t sirinluexternal::Task::formatText(sirinluexternal::Task *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "score");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::Task::Task(_QWORD *this)
{
  *this = &off_1E7BAE328;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAE328;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternal::Task *sirinluexternal::Task::Task(sirinluexternal::Task *this, const sirinluexternal::Task *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E7BAE328;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 3));
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 2));
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = operator new();
    v12 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v11 = &off_1E7BB0C18;
    *(_DWORD *)(v11 + 16) = 0;
    if ((*(_BYTE *)(v12 + 16) & 1) != 0)
    {
      v13 = *(_QWORD *)(v12 + 8);
      *(_BYTE *)(v11 + 16) = 1;
      *(_QWORD *)(v11 + 8) = v13;
    }
    v14 = *v4;
    *v4 = v11;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return this;
}

uint64_t sirinluexternal::Task::operator=(uint64_t a1, const sirinluexternal::Task *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluexternal::Task *)a1 != a2)
  {
    sirinluexternal::Task::Task((sirinluexternal::Task *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternal::Task::~Task((sirinluexternal::Task *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::Task *a2, sirinluexternal::Task *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

_QWORD *sirinluexternal::Task::Task(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E7BAE328;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[3];
  a2[3] = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[2];
  a2[2] = 0;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[1];
  a2[1] = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sirinluexternal::Task::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternal::Task::Task(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternal::Task::~Task((sirinluexternal::Task *)&v6);
  }
  return a1;
}

BOOL sirinluexternal::Task::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[2];
  v7 = (_QWORD *)a2[2];
  if (v6)
  {
    if (!v7 || (sirinluexternal::UsoGraph::operator==(v6, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v9 = a1[1];
  v10 = a2[1];
  result = (v9 | v10) == 0;
  if (v9 && v10)
  {
    if ((*(_BYTE *)(v9 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v10 + 16) & 1) != 0 && *(double *)(v9 + 8) == *(double *)(v10 + 8))
        return 1;
    }
    else if ((*(_BYTE *)(v10 + 16) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sirinluexternal::Task::hash_value(sirinluexternal::Task *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 2);
  if (v7)
    v7 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v7);
  v8 = *((double *)this + 1);
  if (v8 != 0.0)
  {
    if ((*(_BYTE *)(*(_QWORD *)&v8 + 16) & 1) != 0)
    {
      v8 = *(double *)(*(_QWORD *)&v8 + 8);
      if (v8 == 0.0)
        v8 = 0.0;
    }
    else
    {
      v8 = 0.0;
    }
  }
  return v7 ^ v6 ^ *(_QWORD *)&v8;
}

_QWORD *sirinluexternal::Task::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[3])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::Task::makeTask(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::Task::makeScore(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0C18;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UserWantedToUndo::~UserWantedToUndo(sirinluexternal::UserWantedToUndo *this)
{
  sirinluexternal::UserWantedToUndo::~UserWantedToUndo(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAE378;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserWantedToUndo::readFrom(sirinluexternal::UserWantedToUndo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserWantedToUndo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserWantedToUndo::formatText(sirinluexternal::UserWantedToUndo *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reference");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserWantedToUndo::UserWantedToUndo(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAE378;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAE378;
  return this;
}

sirinluexternal::UserWantedToUndo *sirinluexternal::UserWantedToUndo::UserWantedToUndo(sirinluexternal::UserWantedToUndo *this, const sirinluexternal::UserWantedToUndo *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BAE378;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserWantedToUndo::operator=(uint64_t a1, const sirinluexternal::UserWantedToUndo *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserWantedToUndo *)a1 != a2)
  {
    sirinluexternal::UserWantedToUndo::UserWantedToUndo((sirinluexternal::UserWantedToUndo *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserWantedToUndo::~UserWantedToUndo((sirinluexternal::UserWantedToUndo *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserWantedToUndo *a2, sirinluexternal::UserWantedToUndo *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::UserWantedToUndo::UserWantedToUndo(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAE378;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::UserWantedToUndo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserWantedToUndo *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAE378;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserWantedToUndo::~UserWantedToUndo((sirinluexternal::UserWantedToUndo *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserWantedToUndo::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserWantedToUndo::hash_value(sirinluexternal::UserWantedToUndo *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserWantedToUndo::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserWantedToUndo::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALAsrAlternativeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRICOMMONFloatValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRICOMMONFloatValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRICOMMONFloatValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (SIRICOMMONFloatValueReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalssu::SSUEncodingResult::~SSUEncodingResult(sirinluinternalssu::SSUEncodingResult *this)
{
  sirinluinternalssu::SSUEncodingResult::~SSUEncodingResult(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E7BAE3C8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

BOOL sirinluinternalssu::SSUEncodingResult::readFrom(sirinluinternalssu::SSUEncodingResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v19;
        if (v20)
          goto LABEL_28;
        goto LABEL_29;
      case 2u:
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v20 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v21;
        if (v20)
          goto LABEL_28;
        goto LABEL_29;
      case 3u:
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v20 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v22;
        if (v20)
LABEL_28:
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
LABEL_29:
        PB::Reader::read();
        break;
      case 4u:
        if ((v11 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          while (v23 < v24 && !*((_BYTE *)a2 + 24))
          {
            v26 = (char *)*((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 3);
            if ((unint64_t)v26 >= v25)
            {
              v28 = (char *)*((_QWORD *)this + 1);
              v29 = (v26 - v28) >> 2;
              v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62)
                goto LABEL_83;
              v31 = v25 - (_QWORD)v28;
              if (v31 >> 1 > v30)
                v30 = v31 >> 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                v32 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32)
              {
                v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v32);
                v28 = (char *)*((_QWORD *)this + 1);
                v26 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v33 = 0;
              }
              v34 = (_DWORD *)(v32 + 4 * v29);
              *v34 = 0;
              v27 = v34 + 1;
              while (v26 != v28)
              {
                v35 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *--v34 = v35;
              }
              *((_QWORD *)this + 1) = v34;
              *((_QWORD *)this + 2) = v27;
              *((_QWORD *)this + 3) = v32 + 4 * v33;
              if (v28)
                operator delete(v28);
            }
            else
            {
              *(_DWORD *)v26 = 0;
              v27 = v26 + 4;
            }
            *((_QWORD *)this + 2) = v27;
            v36 = *((_QWORD *)a2 + 1);
            if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v27 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v36);
            v24 = *((_QWORD *)a2 + 2);
            v23 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v23;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v38 = (char *)*((_QWORD *)this + 2);
          v37 = *((_QWORD *)this + 3);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*((_QWORD *)this + 1);
            v41 = (v38 - v40) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
LABEL_83:
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44);
              v40 = (char *)*((_QWORD *)this + 1);
              v38 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v45 = 0;
            }
            v46 = (_DWORD *)(v44 + 4 * v41);
            *v46 = 0;
            v39 = v46 + 1;
            while (v38 != v40)
            {
              v47 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *--v46 = v47;
            }
            *((_QWORD *)this + 1) = v46;
            *((_QWORD *)this + 2) = v39;
            *((_QWORD *)this + 3) = v44 + 4 * v45;
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v38 = 0;
            v39 = v38 + 4;
          }
          *((_QWORD *)this + 2) = v39;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_30:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_30;
  return 0;
}

_QWORD *sirinluinternalssu::SSUEncodingResult::writeTo(_QWORD *this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;

  v3 = this;
  if (this[4])
    this = (_QWORD *)PB::Writer::write();
  if (v3[5])
    this = (_QWORD *)PB::Writer::write();
  if (v3[6])
    this = (_QWORD *)PB::Writer::write();
  v5 = (float *)v3[1];
  v4 = (float *)v3[2];
  while (v5 != v4)
  {
    v6 = *v5++;
    this = (_QWORD *)PB::Writer::write(a2, v6);
  }
  return this;
}

uint64_t sirinluinternalssu::SSUEncodingResult::formatText(sirinluinternalssu::SSUEncodingResult *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "encoding", v7);
  }
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

double sirinluinternalssu::SSUEncodingResult::SSUEncodingResult(sirinluinternalssu::SSUEncodingResult *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE3C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE3C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

sirinluinternalssu::SSUEncodingResult *sirinluinternalssu::SSUEncodingResult::SSUEncodingResult(sirinluinternalssu::SSUEncodingResult *this, const sirinluinternalssu::SSUEncodingResult *a2)
{
  _QWORD *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E7BAE3C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 5);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v15 = (std::string *)operator new();
    v16 = v15;
    v17 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
    }
    else
    {
      v18 = *v17;
      v15->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
    }
    v19 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v16;
    if (v19)
      std::default_delete<std::string>::operator()[abi:ne180100](v19);
  }
  if (this != a2)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v4, *((char **)a2 + 1), *((char **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

_QWORD *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  void **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      goto LABEL_23;
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62)
LABEL_23:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v12;
    v13 = a3 - v6;
    if (v13)
      result = memmove(result, v6, v13);
    v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v14 = (void **)(result + 1);
  v15 = (_BYTE *)result[1];
  v16 = (v15 - v9) >> 2;
  if (v16 >= a4)
  {
    v13 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  v17 = &__src[4 * v16];
  if (v15 != v9)
  {
    result = memmove((void *)*result, __src, v15 - v9);
    v9 = (char *)*v14;
  }
  v13 = a3 - v17;
  if (v13)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v14 = &v9[v13];
  return result;
}

uint64_t sirinluinternalssu::SSUEncodingResult::operator=(uint64_t a1, const sirinluinternalssu::SSUEncodingResult *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((const sirinluinternalssu::SSUEncodingResult *)a1 != a2)
  {
    sirinluinternalssu::SSUEncodingResult::SSUEncodingResult((sirinluinternalssu::SSUEncodingResult *)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    v10 = v3;
    sirinluinternalssu::SSUEncodingResult::~SSUEncodingResult((sirinluinternalssu::SSUEncodingResult *)v7);
  }
  return a1;
}

_QWORD *sirinluinternalssu::swap(_QWORD *this, sirinluinternalssu::SSUEncodingResult *a2, sirinluinternalssu::SSUEncodingResult *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  return this;
}

uint64_t sirinluinternalssu::SSUEncodingResult::SSUEncodingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E7BAE3C8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  v11 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalssu::SSUEncodingResult::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    sirinluinternalssu::SSUEncodingResult::SSUEncodingResult((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    v10 = v3;
    sirinluinternalssu::SSUEncodingResult::~SSUEncodingResult((sirinluinternalssu::SSUEncodingResult *)v7);
  }
  return a1;
}

BOOL sirinluinternalssu::SSUEncodingResult::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float v29;
  _BOOL8 result;
  BOOL v31;

  v4 = (unsigned __int8 *)a1[4];
  v5 = (unsigned __int8 **)a2[4];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[4];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (unsigned __int8 *)a1[5];
  v12 = (unsigned __int8 **)a2[5];
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a2[5];
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  v18 = (unsigned __int8 *)a1[6];
  v19 = (unsigned __int8 **)a2[6];
  if (!v18)
  {
    if (!v19)
      goto LABEL_54;
    return 0;
  }
  if (!v19)
    return 0;
  v20 = v18[23];
  if ((v20 & 0x80u) == 0)
    v21 = (unsigned __int8 *)v18[23];
  else
    v21 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
  v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
  v23 = (char)v22;
  if ((char)v22 < 0)
    v22 = v19[1];
  if (v21 != v22)
    return 0;
  if (v23 >= 0)
    v24 = (unsigned __int8 *)a2[6];
  else
    v24 = *v19;
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v18, v24, *((_QWORD *)v18 + 1)))
      return 0;
  }
  else if (v18[23])
  {
    while (*v18 == *v24)
    {
      ++v18;
      ++v24;
      if (!--v20)
        goto LABEL_54;
    }
    return 0;
  }
LABEL_54:
  v26 = a1[1];
  v25 = a1[2];
  v27 = (float *)a2[1];
  if (v25 - v26 != a2[2] - (_QWORD)v27)
    return 0;
  if (v26 == v25)
    return 1;
  v28 = v26 + 4;
  do
  {
    v29 = *v27++;
    result = *(float *)(v28 - 4) == v29;
    v31 = *(float *)(v28 - 4) != v29 || v28 == v25;
    v28 += 4;
  }
  while (!v31);
  return result;
}

unint64_t sirinluinternalssu::SSUEncodingResult::hash_value(sirinluinternalssu::SSUEncodingResult *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  return v5 ^ v3 ^ v6 ^ PBHashBytes();
}

void sirinluinternalnlv4_parser::NLv4ParserResponse::~NLv4ParserResponse(sirinluinternalnlv4_parser::NLv4ParserResponse *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE418;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::readFrom(sirinluinternalnlv4_parser::NLv4ParserResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::formatText(sirinluinternalnlv4_parser::NLv4ParserResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "hypotheses");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::UserParse>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB18F0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_DWORD *)(result + 88) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1EECE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse(_QWORD *this)
{
  *this = &off_1E7BAE418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAE418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalnlv4_parser::NLv4ParserResponse *sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse(sirinluinternalnlv4_parser::NLv4ParserResponse *this, const sirinluinternalnlv4_parser::NLv4ParserResponse *a2)
{
  sirinluexternal::UserParse ***v3;
  const sirinluexternal::UUID ***v4;
  const sirinluexternal::UUID ***v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserParse ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAE418;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(v3, *v4++);
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse const&>(sirinluexternal::UserParse ***a1, const sirinluexternal::UUID **a2)
{
  sirinluexternal::UserParse *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::UserParse **v7;
  sirinluexternal::UserParse **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::UserParse **v14;
  unint64_t v15;
  sirinluexternal::UserParse **v16;
  sirinluexternal::UserParse **v17;
  sirinluexternal::UserParse *v18;
  int64x2_t v19;
  sirinluexternal::UserParse **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::UserParse *)operator new();
  result = (uint64_t)sirinluexternal::UserParse::UserParse(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::UserParse **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::UserParse **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::UserParse **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1EED0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::operator=(uint64_t a1, const sirinluinternalnlv4_parser::NLv4ParserResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternalnlv4_parser::NLv4ParserResponse *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternalnlv4_parser::NLv4ParserResponse *)a1 != a2)
  {
    sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse((sirinluinternalnlv4_parser::NLv4ParserResponse *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BAE418;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalnlv4_parser::swap(_QWORD *this, sirinluinternalnlv4_parser::NLv4ParserResponse *a2, sirinluinternalnlv4_parser::NLv4ParserResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BAE418;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BAE418;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

void std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluinternalnlv4_parser::NLv4ParserResponse *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BAE418;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BAE418;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalnlv4_parser::NLv4ParserResponse::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserParse>::operator==((uint64_t *)(a1 + 8), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
}

BOOL PB::PtrVector<sirinluexternal::UserParse>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::UserParse::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sirinluinternalnlv4_parser::NLv4ParserResponse::hash_value(sirinluinternalnlv4_parser::NLv4ParserResponse *this)
{
  sirinluexternal::UserParse **v1;
  sirinluexternal::UserParse **v2;
  uint64_t v3;
  sirinluexternal::UserParse *v4;

  v1 = (sirinluexternal::UserParse **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserParse **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserParse::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sirinluexternal::RequestID::~RequestID(sirinluexternal::RequestID *this)
{
  sirinluexternal::RequestID::~RequestID(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BAE468;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RequestID::readFrom(sirinluexternal::RequestID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          v21 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v20;
          if (v21)
            goto LABEL_37;
          goto LABEL_38;
        case 2u:
          v22 = (_QWORD *)operator new();
          *v22 = &off_1E7BB0CB8;
          v22[3] = 0;
          v23 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = (_QWORD *)*((_QWORD *)this + 4);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 3u:
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v21 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v24;
          if (v21)
            goto LABEL_37;
          goto LABEL_38;
        case 4u:
          v25 = (_QWORD *)operator new();
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          v21 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v25;
          if (v21)
            goto LABEL_37;
          goto LABEL_38;
        case 5u:
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          v21 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v26;
          if (v21)
            goto LABEL_37;
          goto LABEL_38;
        case 0xBu:
          v27 = (_QWORD *)operator new();
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          v21 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v27;
          if (v21)
LABEL_37:
            std::default_delete<std::string>::operator()[abi:ne180100](v21);
LABEL_38:
          PB::Reader::read();
          goto LABEL_39;
        case 0xCu:
          *((_BYTE *)this + 60) |= 1u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_61;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          v37 = 0;
          v38 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v29 + 1;
              v40 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v39;
              v34 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v29 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_57;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_61:
          *((_DWORD *)this + 14) = v34;
          goto LABEL_39;
        default:
          goto LABEL_19;
      }
      goto LABEL_39;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_39:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluexternal::RequestID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 48))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 24))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 40))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::RequestID::formatText(sirinluexternal::RequestID *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "nlu_request_id");
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "requester");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::RequestID::RequestID(sirinluexternal::RequestID *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE468;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE468;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

sirinluexternal::RequestID *sirinluexternal::RequestID::RequestID(sirinluexternal::RequestID *this, const sirinluexternal::RequestID *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  int v33;

  *(_QWORD *)this = &off_1E7BAE468;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v10 = operator new();
    v11 = sirinluexternal::UUID::UUID(v10, *((const sirinluexternal::UUID **)a2 + 4));
    v12 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v13 = (std::string *)operator new();
    v14 = v13;
    v15 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
    }
    else
    {
      v16 = *v15;
      v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v16;
    }
    v17 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v14;
    if (v17)
      std::default_delete<std::string>::operator()[abi:ne180100](v17);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v18 = (std::string *)operator new();
    v19 = v18;
    v20 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v21;
    }
    v22 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v19;
    if (v22)
      std::default_delete<std::string>::operator()[abi:ne180100](v22);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v23 = (std::string *)operator new();
    v24 = v23;
    v25 = (__int128 *)*((_QWORD *)a2 + 5);
    if (*((char *)v25 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23->__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
    }
    v27 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v24;
    if (v27)
      std::default_delete<std::string>::operator()[abi:ne180100](v27);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v28 = (std::string *)operator new();
    v29 = v28;
    v30 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
    }
    else
    {
      v31 = *v30;
      v28->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
    }
    v32 = *v4;
    *v4 = (uint64_t)v29;
    if (v32)
      std::default_delete<std::string>::operator()[abi:ne180100](v32);
  }
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v33 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v33;
  }
  return this;
}

uint64_t sirinluexternal::RequestID::operator=(uint64_t a1, const sirinluexternal::RequestID *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((const sirinluexternal::RequestID *)a1 != a2)
  {
    sirinluexternal::RequestID::RequestID((sirinluexternal::RequestID *)&v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    sirinluexternal::RequestID::~RequestID((sirinluexternal::RequestID *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RequestID *a2, sirinluexternal::RequestID *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)(this + 60);
  *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  LODWORD(v9) = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  return this;
}

uint64_t sirinluexternal::RequestID::RequestID(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_1E7BAE468;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100](v10);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  if (v12)
    std::default_delete<std::string>::operator()[abi:ne180100](v12);
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v13;
  if (v14)
    std::default_delete<std::string>::operator()[abi:ne180100](v14);
  v15 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v16 = *v4;
  *v4 = v15;
  if (v16)
    std::default_delete<std::string>::operator()[abi:ne180100](v16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t sirinluexternal::RequestID::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sirinluexternal::RequestID::RequestID((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    v11 = v5;
    sirinluexternal::RequestID::~RequestID((sirinluexternal::RequestID *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::RequestID::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a2 + 32);
  if (v11)
  {
    if (!v12 || !sirinluexternal::UUID::operator==(v11, v12))
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = *(unsigned __int8 **)(a1 + 48);
  v14 = *(unsigned __int8 ***)(a2 + 48);
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = *(unsigned __int8 **)(a2 + 48);
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_42;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_42:
  v20 = *(unsigned __int8 **)(a1 + 24);
  v21 = *(unsigned __int8 **)(a2 + 24);
  if (v20)
  {
    if (!v21 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v20, v21))
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  v22 = *(unsigned __int8 **)(a1 + 40);
  v23 = *(unsigned __int8 **)(a2 + 40);
  if (v22)
  {
    if (!v23 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v24 = *(unsigned __int8 **)(a1 + 8);
  v25 = *(unsigned __int8 **)(a2 + 8);
  if (v24)
  {
    if (!v25 || !std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v24, v25))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 60) & 1) == 0;
  if ((*(_BYTE *)(a1 + 60) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 60) & 1) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
}

unint64_t sirinluexternal::RequestID::hash_value(sirinluexternal::RequestID *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 4);
  if (!v4)
  {
    v8 = 0;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v4 + 28) & 1) == 0)
  {
    v5 = 0;
    if ((*(_BYTE *)(v4 + 28) & 2) != 0)
      goto LABEL_7;
LABEL_11:
    v6 = 0;
    if ((*(_BYTE *)(v4 + 28) & 4) != 0)
      goto LABEL_8;
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_BYTE *)(v4 + 28) & 2) == 0)
    goto LABEL_11;
LABEL_7:
  v6 = *(_QWORD *)(v4 + 16);
  if ((*(_BYTE *)(v4 + 28) & 4) == 0)
    goto LABEL_12;
LABEL_8:
  v7 = *(int *)(v4 + 24);
LABEL_13:
  v8 = v6 ^ v5 ^ v7;
LABEL_14:
  v9 = *((_QWORD *)this + 6);
  if (v9)
    v10 = std::__string_hash<char>::operator()[abi:ne180100](v9);
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 3);
  if (v11)
    v12 = std::__string_hash<char>::operator()[abi:ne180100](v11);
  else
    v12 = 0;
  v13 = *((_QWORD *)this + 5);
  if (v13)
    v14 = std::__string_hash<char>::operator()[abi:ne180100](v13);
  else
    v14 = 0;
  v15 = *((_QWORD *)this + 1);
  if (v15)
    v15 = std::__string_hash<char>::operator()[abi:ne180100](v15);
  if ((*((_BYTE *)this + 60) & 1) != 0)
    v16 = *((int *)this + 14);
  else
    v16 = 0;
  return v8 ^ v3 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16;
}

_QWORD *sirinluexternal::RequestID::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::EntityCandidate::~EntityCandidate(sirinluexternal::EntityCandidate *this)
{
  sirinluexternal::EntityCandidate::~EntityCandidate(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BAE4B8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 2);
    v10 = (void *)*((_QWORD *)this + 1);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v8;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::EntityCandidate::readFrom(sirinluexternal::EntityCandidate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  void (**v9)(sirinluexternal::UsoGraph *__hidden);
  void (**v10)(siricommon::DoubleValue *__hidden);
  void (**v11)(sirinluexternal::RRGroupIdentifier *__hidden);
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(sirinluexternal::RRGroupIdentifier *__hidden);
  void (**v31)(siricommon::DoubleValue *__hidden);
  void (**v32)(sirinluexternal::UsoGraph *__hidden);
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int64x2_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  unint64_t v55;
  char *v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 24;
  v9 = &off_1E7BB2398;
  v10 = &off_1E7BB0C18;
  v11 = &off_1E7BAF358;
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_22:
      if ((v15 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          v24 = operator new();
          *(_QWORD *)v24 = v9;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_OWORD *)(v24 + 56) = 0u;
          *(_OWORD *)(v24 + 72) = 0u;
          *(_OWORD *)(v24 + 88) = 0u;
          *(_OWORD *)(v24 + 104) = 0u;
          *(_OWORD *)(v24 + 120) = 0u;
          v25 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v24;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v24 = *((_QWORD *)this + 5);
          }
          goto LABEL_38;
        case 2u:
          v24 = operator new();
          *(_QWORD *)v24 = v10;
          *(_DWORD *)(v24 + 16) = 0;
          v29 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v24;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v24 = *((_QWORD *)this + 9);
          }
          goto LABEL_38;
        case 3u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB0538;
          *(_QWORD *)(v24 + 8) = 0;
          v27 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v24;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v24 = *((_QWORD *)this + 6);
          }
          goto LABEL_38;
        case 4u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB0538;
          *(_QWORD *)(v24 + 8) = 0;
          v28 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v24;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v24 = *((_QWORD *)this + 4);
          }
          goto LABEL_38;
        case 5u:
          v24 = operator new();
          *(_QWORD *)v24 = v11;
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 20) = 0;
          v26 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v24;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v24 = *((_QWORD *)this + 7);
          }
          goto LABEL_38;
        case 6u:
          v30 = v11;
          v31 = v10;
          v32 = v9;
          v33 = (_QWORD *)operator new();
          v34 = v33;
          v33[1] = 0;
          v33[2] = 0;
          *v33 = &off_1E7BAF108;
          v36 = (_QWORD *)*((_QWORD *)this + 2);
          v35 = *((_QWORD *)this + 3);
          if ((unint64_t)v36 >= v35)
          {
            v39 = *((_QWORD *)this + 1);
            v40 = ((uint64_t)v36 - v39) >> 3;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v41 = v35 - v39;
            v42 = v41 >> 2;
            if (v41 >> 2 <= (unint64_t)(v40 + 1))
              v42 = v40 + 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            v56 = v8;
            if (v43)
              v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v43);
            else
              v44 = 0;
            v45 = (_QWORD *)(v43 + 8 * v40);
            v46 = v43 + 8 * v44;
            v55 = v46;
            *v45 = v34;
            v37 = v45 + 1;
            v54.i64[1] = (uint64_t)(v45 + 1);
            v48 = (_QWORD *)*((_QWORD *)this + 1);
            v47 = (_QWORD *)*((_QWORD *)this + 2);
            if (v47 == v48)
            {
              v50 = vdupq_n_s64((unint64_t)v47);
            }
            else
            {
              do
              {
                v49 = *--v47;
                *v47 = 0;
                *--v45 = v49;
              }
              while (v47 != v48);
              v50 = *(int64x2_t *)((char *)this + 8);
              v37 = (_QWORD *)v54.i64[1];
              v46 = v55;
            }
            *((_QWORD *)this + 1) = v45;
            *((_QWORD *)this + 2) = v37;
            v54 = v50;
            v51 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v46;
            v55 = v51;
            v53 = v50.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            *v36 = v33;
            v37 = v36 + 1;
          }
          *((_QWORD *)this + 2) = v37;
          v52 = *(v37 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v52 + 16))(v52, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v9 = v32;
          v10 = v31;
          v11 = v30;
          goto LABEL_41;
        case 7u:
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E7BB1A30;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_QWORD *)(v24 + 40) = 0;
          v38 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v24;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v24 = *((_QWORD *)this + 8);
          }
LABEL_38:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v24 + 16))(v24, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_41;
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_22;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_41:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1EEE8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::EntityCandidate::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base **v9;
  const PB::Base **v10;
  const PB::Base *v11;
  const PB::Base *v12;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[9];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[6];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[4];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[7];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base **)v3[1];
  v10 = (const PB::Base **)v3[2];
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v11);
  }
  v12 = (const PB::Base *)v3[8];
  if (v12)
    return PB::Writer::writeSubmessage(a2, v12);
  return this;
}

uint64_t sirinluexternal::EntityCandidate::formatText(sirinluexternal::EntityCandidate *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "annotations");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "app_bundle_id");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "entity");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "entity_id");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "group_id");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "metadata");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "score");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::EntityCandidate::EntityCandidate(sirinluexternal::EntityCandidate *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE4B8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE4B8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluexternal::EntityCandidate *sirinluexternal::EntityCandidate::EntityCandidate(sirinluexternal::EntityCandidate *this, const sirinluexternal::EntityCandidate *a2)
{
  int64x2_t *v4;
  sirinluexternal::UsoGraph *v5;
  sirinluexternal::UsoGraph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  siricommon::StringValue *v12;
  siricommon::StringValue *v13;
  uint64_t v14;
  siricommon::StringValue *v15;
  siricommon::StringValue *v16;
  uint64_t v17;
  sirinluexternal::RRGroupIdentifier *v18;
  sirinluexternal::RRGroupIdentifier *v19;
  uint64_t v20;
  const siricommon::StringValue ***v21;
  const siricommon::StringValue ***i;
  const siricommon::StringValue **v23;
  sirinluexternal::RRAnnotation *v24;
  unint64_t v25;
  sirinluexternal::RRAnnotation **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  sirinluexternal::RRAnnotation **v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  sirinluexternal::RRAnnotation *v37;
  int64x2_t v38;
  unint64_t v39;
  sirinluexternal::RRMetadata *v40;
  sirinluexternal::RRMetadata *v41;
  uint64_t v42;
  uint64_t v44;
  int64x2_t v45;
  unint64_t v46;
  char *v47;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAE4B8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)a2 + 5))
  {
    v5 = (sirinluexternal::UsoGraph *)operator new();
    v6 = sirinluexternal::UsoGraph::UsoGraph(v5, *((const sirinluexternal::SemVer ***)a2 + 5));
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v8 = operator new();
    v9 = *((_QWORD *)a2 + 9);
    *(_QWORD *)v8 = &off_1E7BB0C18;
    *(_DWORD *)(v8 + 16) = 0;
    if ((*(_BYTE *)(v9 + 16) & 1) != 0)
    {
      v10 = *(_QWORD *)(v9 + 8);
      *(_BYTE *)(v8 + 16) = 1;
      *(_QWORD *)(v8 + 8) = v10;
    }
    v11 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v8;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v12 = (siricommon::StringValue *)operator new();
    v13 = siricommon::StringValue::StringValue(v12, *((const siricommon::StringValue **)a2 + 6));
    v14 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v15 = (siricommon::StringValue *)operator new();
    v16 = siricommon::StringValue::StringValue(v15, *((const siricommon::StringValue **)a2 + 4));
    v17 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v18 = (sirinluexternal::RRGroupIdentifier *)operator new();
    v19 = sirinluexternal::RRGroupIdentifier::RRGroupIdentifier(v18, *((const siricommon::StringValue ***)a2 + 7));
    v20 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = (const siricommon::StringValue ***)*((_QWORD *)a2 + 1);
  for (i = (const siricommon::StringValue ***)*((_QWORD *)a2 + 2); v21 != i; ++v21)
  {
    v23 = *v21;
    v24 = (sirinluexternal::RRAnnotation *)operator new();
    sirinluexternal::RRAnnotation::RRAnnotation(v24, v23);
    v26 = (sirinluexternal::RRAnnotation **)*((_QWORD *)this + 2);
    v25 = *((_QWORD *)this + 3);
    if ((unint64_t)v26 >= v25)
    {
      v28 = ((uint64_t)v26 - v4->i64[0]) >> 3;
      if ((unint64_t)(v28 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v29 = v25 - v4->i64[0];
      v30 = v29 >> 2;
      if (v29 >> 2 <= (unint64_t)(v28 + 1))
        v30 = v28 + 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v47 = (char *)this + 24;
      if (v31)
        v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v31);
      else
        v32 = 0;
      v33 = (sirinluexternal::RRAnnotation **)(v31 + 8 * v28);
      v34 = v31 + 8 * v32;
      v46 = v34;
      *v33 = v24;
      v27 = v33 + 1;
      v45.i64[1] = (uint64_t)(v33 + 1);
      v36 = (_QWORD *)*((_QWORD *)this + 1);
      v35 = (_QWORD *)*((_QWORD *)this + 2);
      if (v35 == v36)
      {
        v38 = vdupq_n_s64((unint64_t)v35);
      }
      else
      {
        do
        {
          v37 = (sirinluexternal::RRAnnotation *)*--v35;
          *v35 = 0;
          *--v33 = v37;
        }
        while (v35 != v36);
        v38 = *v4;
        v27 = (_QWORD *)v45.i64[1];
        v34 = v46;
      }
      *((_QWORD *)this + 1) = v33;
      *((_QWORD *)this + 2) = v27;
      v45 = v38;
      v39 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v34;
      v46 = v39;
      v44 = v38.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v44);
    }
    else
    {
      *v26 = v24;
      v27 = v26 + 1;
    }
    *((_QWORD *)this + 2) = v27;
  }
  if (*((_QWORD *)a2 + 8))
  {
    v40 = (sirinluexternal::RRMetadata *)operator new();
    v41 = sirinluexternal::RRMetadata::RRMetadata(v40, *((const sirinluexternal::RRBoundingBox ***)a2 + 8));
    v42 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v41;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  return this;
}

void sub_1C1EEEF84(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::EntityCandidate::operator=(uint64_t a1, const sirinluexternal::EntityCandidate *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluexternal::EntityCandidate *)a1 != a2)
  {
    sirinluexternal::EntityCandidate::EntityCandidate((sirinluexternal::EntityCandidate *)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    sirinluexternal::EntityCandidate::~EntityCandidate((sirinluexternal::EntityCandidate *)&v9);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::EntityCandidate *a2, sirinluexternal::EntityCandidate *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v3;
  v4 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  return this;
}

uint64_t sirinluexternal::EntityCandidate::EntityCandidate(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_1E7BAE4B8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (_QWORD *)*v4;
  if (*v4)
  {
    v16 = *(_QWORD **)(a1 + 16);
    v17 = (_QWORD *)*v4;
    if (v16 != v15)
    {
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      while (v16 != v15);
      v17 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v15;
    operator delete(v17);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v20 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return a1;
}

uint64_t sirinluexternal::EntityCandidate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluexternal::EntityCandidate::EntityCandidate((uint64_t)&v9, a2);
    v3 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    sirinluexternal::EntityCandidate::~EntityCandidate((sirinluexternal::EntityCandidate *)&v9);
  }
  return a1;
}

uint64_t sirinluexternal::EntityCandidate::operator==(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)a1[5];
  v5 = *(_QWORD **)(a2 + 40);
  if (v4)
  {
    if (!v5 || (sirinluexternal::UsoGraph::operator==(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[9];
  v7 = *(_QWORD *)(a2 + 72);
  if (v6)
  {
    if (!v7)
      return 0;
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v7 + 16) & 1) == 0 || *(double *)(v6 + 8) != *(double *)(v7 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[6];
  v9 = *(_QWORD *)(a2 + 48);
  if (v8)
  {
    if (!v9 || (siricommon::StringValue::operator==(v8, v9) & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = a1[4];
  v11 = *(_QWORD *)(a2 + 32);
  if (v10)
  {
    if (!v11 || (siricommon::StringValue::operator==(v10, v11) & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = a1[7];
  v13 = *(_QWORD *)(a2 + 56);
  if (!v12)
  {
    if (!v13)
      goto LABEL_28;
    return 0;
  }
  if (!v13 || !sirinluexternal::RRGroupIdentifier::operator==(v12, v13))
    return 0;
LABEL_28:
  result = PB::PtrVector<sirinluexternal::RRAnnotation>::operator==(a1[1], a1[2], *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    v15 = a1[8];
    v16 = *(_QWORD *)(a2 + 64);
    result = (v15 | v16) == 0;
    if (v15)
    {
      if (v16)
        return sirinluexternal::RRMetadata::operator==(a1[8], v16);
    }
  }
  return result;
}

uint64_t PB::PtrVector<sirinluexternal::RRAnnotation>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::RRAnnotation::operator==(*(_QWORD *)(v6 - 8), v7);
    if ((_DWORD)result)
      v9 = v6 == a2;
    else
      v9 = 1;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::EntityCandidate::hash_value(sirinluexternal::EntityCandidate *this)
{
  sirinluexternal::UsoGraph *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  sirinluexternal::RRGroupIdentifier *v13;
  unint64_t v14;
  sirinluexternal::RRAnnotation **v15;
  sirinluexternal::RRAnnotation **v16;
  uint64_t v17;
  sirinluexternal::RRAnnotation *v18;
  unint64_t v19;

  v2 = (sirinluexternal::UsoGraph *)*((_QWORD *)this + 5);
  if (v2)
    v3 = sirinluexternal::UsoGraph::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4 && (*(_BYTE *)(v4 + 16) & 1) != 0)
  {
    v6 = *(double *)(v4 + 8);
    if (v6 == 0.0)
      v5 = 0.0;
    else
      v5 = v6;
  }
  else
  {
    v5 = 0.0;
  }
  v7 = *((_QWORD *)this + 6);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    v9 = std::__string_hash<char>::operator()[abi:ne180100](v8);
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 4);
  if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
    v12 = std::__string_hash<char>::operator()[abi:ne180100](v11);
  else
    v12 = 0;
  v13 = (sirinluexternal::RRGroupIdentifier *)*((_QWORD *)this + 7);
  if (v13)
    v14 = sirinluexternal::RRGroupIdentifier::hash_value(v13);
  else
    v14 = 0;
  v15 = (sirinluexternal::RRAnnotation **)*((_QWORD *)this + 1);
  v16 = (sirinluexternal::RRAnnotation **)*((_QWORD *)this + 2);
  if (v15 == v16)
  {
    v17 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = *v15++;
      v17 ^= sirinluexternal::RRAnnotation::hash_value(v18);
    }
    while (v15 != v16);
  }
  v19 = *((_QWORD *)this + 8);
  if (v19)
    v19 = sirinluexternal::RRMetadata::hash_value((sirinluexternal::RRMetadata *)v19);
  return *(_QWORD *)&v5 ^ v3 ^ v9 ^ v12 ^ v19 ^ v14 ^ v17;
}

_QWORD *sirinluexternal::EntityCandidate::makeEntity(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::EntityCandidate::makeScore(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0C18;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::EntityCandidate::makeEntityId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::EntityCandidate::makeAppBundleId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::EntityCandidate::makeGroupId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF358;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::EntityCandidate::makeMetadata(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[8])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1A30;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALUserStatedTaskReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUsoGraph *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALUsoOntologyVocabularyReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALSemVer *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALSemVer);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALSemVerReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SIRINLUEXTERNALSemVer *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(a1, "addElementNames:", v17);
LABEL_25:

    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UserCancelled::~UserCancelled(sirinluexternal::UserCancelled *this)
{
  sirinluexternal::UserCancelled::~UserCancelled(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAE508;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UserCancelled::readFrom(sirinluexternal::UserCancelled *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB2398;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB0CB8;
        *(_QWORD *)(v19 + 24) = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 2);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UserCancelled::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::UserCancelled::formatText(sirinluexternal::UserCancelled *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "reference");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "task_id");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UserCancelled::UserCancelled(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAE508;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAE508;
  return this;
}

sirinluexternal::UserCancelled *sirinluexternal::UserCancelled::UserCancelled(sirinluexternal::UserCancelled *this, const sirinluexternal::UserCancelled *a2)
{
  sirinluexternal::UsoGraph **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::UsoGraph *v8;
  sirinluexternal::UsoGraph *v9;
  sirinluexternal::UsoGraph *v10;

  *(_QWORD *)this = &off_1E7BAE508;
  *((_QWORD *)this + 1) = 0;
  v4 = (sirinluexternal::UsoGraph **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (sirinluexternal::UsoGraph *)operator new();
    v9 = sirinluexternal::UsoGraph::UsoGraph(v8, *((const sirinluexternal::SemVer ***)a2 + 1));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(sirinluexternal::UsoGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::UserCancelled::operator=(uint64_t a1, const sirinluexternal::UserCancelled *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluexternal::UserCancelled *)a1 != a2)
  {
    sirinluexternal::UserCancelled::UserCancelled((sirinluexternal::UserCancelled *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::UserCancelled::~UserCancelled((sirinluexternal::UserCancelled *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UserCancelled *a2, sirinluexternal::UserCancelled *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluexternal::UserCancelled::UserCancelled(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAE508;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternal::UserCancelled::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::UserCancelled *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAE508;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::UserCancelled::~UserCancelled((sirinluexternal::UserCancelled *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::UserCancelled::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return sirinluexternal::UsoGraph::operator==(*(_QWORD **)(a1 + 8), (_QWORD *)v7);
  return result;
}

unint64_t sirinluexternal::UserCancelled::hash_value(sirinluexternal::UserCancelled *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 28) & 1) == 0)
  {
    v2 = 0;
    if ((*(_BYTE *)(v1 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v3 = 0;
    if ((*(_BYTE *)(v1 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *(int *)(v1 + 24);
LABEL_10:
  v5 = v3 ^ v2 ^ v4;
LABEL_11:
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v6);
  return v6 ^ v5;
}

_QWORD *sirinluexternal::UserCancelled::makeTaskId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UserCancelled::makeReference(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUEXTERNALUserParseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_37;
        goto LABEL_50;
      case 2u:
        v18 = objc_alloc_init(SIRINLUEXTERNALUserDialogAct);
        objc_msgSend((id)a1, "addUserDialogActs:", v18);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALUserDialogActReadFrom((id *)&v18->super.super.isa, a2))
        {
          goto LABEL_50;
        }
        goto LABEL_37;
      case 3u:
        *(_BYTE *)(a1 + 72) |= 2u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        v27 = 16;
        goto LABEL_47;
      case 4u:
        PBReaderReadString();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v22;

        goto LABEL_48;
      case 5u:
        v18 = objc_alloc_init(SIRINLUEXTERNALRepetitionResult);
        objc_storeStrong((id *)(a1 + 56), v18);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALRepetitionResultReadFrom((uint64_t)v18, a2))
          goto LABEL_50;
        goto LABEL_37;
      case 6u:
        v18 = objc_alloc_init(SIRINLUEXTERNALParser);
        objc_storeStrong((id *)(a1 + 40), v18);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALParserReadFrom((uint64_t)v18, a2))
          goto LABEL_50;
        goto LABEL_37;
      case 7u:
        *(_BYTE *)(a1 + 72) |= 1u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        v27 = 8;
LABEL_47:
        *(_QWORD *)(a1 + v27) = v21;
        goto LABEL_48;
      case 8u:
        v18 = objc_alloc_init(SIRINLUEXTERNALCorrectionOutcome);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALCorrectionOutcomeReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_48:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_48;
    }
  }
}

BOOL SIRINLUEXTERNALUserRejectedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALAsrTokenInformationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
          goto LABEL_24;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_24;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
LABEL_24:
          v21 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 4u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 64) |= 0x20u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
              *(_QWORD *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                v15 = v23++ >= 9;
                if (v15)
                {
                  v24 = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_80:
          v71 = v24 != 0;
          v72 = 60;
          goto LABEL_89;
        case 5u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_BYTE *)(a1 + 64) |= 0x40u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v15 = v30++ >= 9;
                if (v15)
                {
                  v31 = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_84:
          v71 = v31 != 0;
          v72 = 61;
          goto LABEL_89;
        case 6u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 64) |= 0x80u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v38 |= (unint64_t)(v42 & 0x7F) << v36;
              if (v42 < 0)
              {
                v36 += 7;
                v15 = v37++ >= 9;
                if (v15)
                {
                  v38 = 0;
                  goto LABEL_88;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_88:
          v71 = v38 != 0;
          v72 = 62;
LABEL_89:
          *(_BYTE *)(a1 + v72) = v71;
          continue;
        case 7u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v45 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v45 = 0;
          }
          *(_QWORD *)(a1 + 8) = v45;
          continue;
        case 8u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 64) |= 2u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                v15 = v47++ >= 9;
                if (v15)
                {
                  LODWORD(v48) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v48) = 0;
LABEL_93:
          v73 = 16;
          goto LABEL_106;
        case 9u:
          v53 = 0;
          v54 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 64) |= 4u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            v57 = v56 + 1;
            if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v57;
              v48 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v15 = v54++ >= 9;
                if (v15)
                {
                  LODWORD(v48) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v48) = 0;
LABEL_97:
          v73 = 20;
          goto LABEL_106;
        case 0xAu:
          v59 = 0;
          v60 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 64) |= 0x10u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              v48 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v15 = v60++ >= 9;
                if (v15)
                {
                  LODWORD(v48) = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v48) = 0;
LABEL_101:
          v73 = 56;
          goto LABEL_106;
        case 0xBu:
          v65 = 0;
          v66 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 64) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v67 = *v3;
        v68 = *(_QWORD *)(a2 + v67);
        v69 = v68 + 1;
        if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v4))
          break;
        v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
        *(_QWORD *)(a2 + v67) = v69;
        v48 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0)
          goto LABEL_103;
        v65 += 7;
        v15 = v66++ >= 9;
        if (v15)
        {
          LODWORD(v48) = 0;
          goto LABEL_105;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_103:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v48) = 0;
LABEL_105:
      v73 = 24;
LABEL_106:
      *(_DWORD *)(a1 + v73) = v48;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALTOKENIZERTokenizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SIRINLUINTERNALTokenChain *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2))
          goto LABEL_33;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
LABEL_26:
    PBReaderRecallMark();
LABEL_28:

    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALUserAcceptedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalqueryrewrite::QRResponse::~QRResponse(sirinluinternalqueryrewrite::QRResponse *this)
{
  sirinluinternalqueryrewrite::QRResponse::~QRResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAE558;
  v8 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    v5 = (void *)*((_QWORD *)this + 1);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v3;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRResponse::readFrom(sirinluinternalqueryrewrite::QRResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int64x2_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int64x2_t v57;
  unint64_t v58;
  char *v59;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (_QWORD *)((char *)this + 40);
  v9 = (char *)this + 24;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_QWORD *)operator new();
          *v22 = &off_1E7BB0CB8;
          v22[3] = 0;
          v23 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = (_QWORD *)*((_QWORD *)this + 4);
          }
          goto LABEL_34;
        case 2u:
          v32 = (_QWORD *)operator new();
          v33 = v32;
          *v32 = &off_1E7BAE8B8;
          v32[1] = 0;
          v32[3] = 0;
          v32[4] = 0;
          v35 = (_QWORD *)*((_QWORD *)this + 2);
          v34 = *((_QWORD *)this + 3);
          if ((unint64_t)v35 >= v34)
          {
            v41 = *((_QWORD *)this + 1);
            v42 = ((uint64_t)v35 - v41) >> 3;
            if ((unint64_t)(v42 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v43 = v34 - v41;
            v44 = v43 >> 2;
            if (v43 >> 2 <= (unint64_t)(v42 + 1))
              v44 = v42 + 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v44;
            v59 = v9;
            if (v45)
              v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v45);
            else
              v46 = 0;
            v47 = (_QWORD *)(v45 + 8 * v42);
            v48 = v45 + 8 * v46;
            v58 = v48;
            *v47 = v33;
            v36 = v47 + 1;
            v57.i64[1] = (uint64_t)(v47 + 1);
            v50 = (_QWORD *)*((_QWORD *)this + 1);
            v49 = (_QWORD *)*((_QWORD *)this + 2);
            if (v49 == v50)
            {
              v52 = vdupq_n_s64((unint64_t)v49);
            }
            else
            {
              do
              {
                v51 = *--v49;
                *v49 = 0;
                *--v47 = v51;
              }
              while (v49 != v50);
              v52 = *(int64x2_t *)((char *)this + 8);
              v36 = (_QWORD *)v57.i64[1];
              v48 = v58;
            }
            *((_QWORD *)this + 1) = v47;
            *((_QWORD *)this + 2) = v36;
            v57 = v52;
            v53 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v48;
            v58 = v53;
            v56 = v52.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v56);
          }
          else
          {
            *v35 = v32;
            v36 = v35 + 1;
          }
          *((_QWORD *)this + 2) = v36;
          v54 = *(v36 - 1);
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v54 + 16))(v54, a2) & 1) != 0)
          {
            goto LABEL_36;
          }
          return 0;
        case 3u:
          *((_BYTE *)this + 68) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_66;
              v27 += 7;
              v24 = v30;
              v16 = v28++ > 8;
            }
            while (!v16);
LABEL_45:
            LODWORD(v29) = 0;
            goto LABEL_66;
          }
          v37 = 0;
          v38 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v24 + 1;
              v40 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v39;
              v29 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v24 = v39;
                v16 = v38++ > 8;
                if (v16)
                  goto LABEL_45;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_66:
          *((_DWORD *)this + 16) = v29;
          goto LABEL_67;
        case 4u:
          PB::PtrVector<sirinluinternal::RewriteHypothesis>::emplace_back<>(v8);
          v22 = *(_QWORD **)(*((_QWORD *)this + 6) - 8);
LABEL_34:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
LABEL_36:
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_67;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_67:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1EF5888(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalqueryrewrite::QRResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base ***)(v3 + 8);
  v6 = *(const PB::Base ***)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if ((*(_BYTE *)(v3 + 68) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v9 = *(const PB::Base ***)(v3 + 40);
  v8 = *(const PB::Base ***)(v3 + 48);
  while (v9 != v8)
  {
    v10 = *v9++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRResponse::formatText(sirinluinternalqueryrewrite::QRResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "qr_hypotheses");
  }
  if ((*((_BYTE *)this + 68) & 1) != 0)
    PB::TextFormatter::format(a2, "repetition_type");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "request_id");
  v9 = (uint64_t *)*((_QWORD *)this + 5);
  v10 = (uint64_t *)*((_QWORD *)this + 6);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "rewrite_hypotheses");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *PB::PtrVector<sirinluinternal::RewriteHypothesis>::emplace_back<>(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = (_QWORD *)operator new();
  v3 = result;
  *result = &off_1E7BB1D30;
  result[1] = 0;
  result[3] = 0;
  result[4] = 0;
  v4 = a1[2];
  v5 = (_QWORD *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - *a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = (_QWORD *)*a1;
    v14 = (_QWORD *)a1[1];
    if (v14 == (_QWORD *)*a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (_QWORD *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = (_QWORD *)std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1EF5B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternalqueryrewrite::QRResponse::QRResponse(sirinluinternalqueryrewrite::QRResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE558;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE558;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

sirinluinternalqueryrewrite::QRResponse *sirinluinternalqueryrewrite::QRResponse::QRResponse(sirinluinternalqueryrewrite::QRResponse *this, const sirinluexternal::UUID **a2)
{
  int64x2_t *v4;
  sirinluinternal::RewriteHypothesis ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const sirinluexternal::UUID ***v9;
  const sirinluexternal::UUID ***i;
  const sirinluexternal::UUID **v11;
  sirinluinternalqueryrewrite::QRHypothesis *v12;
  unint64_t v13;
  sirinluinternalqueryrewrite::QRHypothesis **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  sirinluinternalqueryrewrite::QRHypothesis **v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  sirinluinternalqueryrewrite::QRHypothesis *v25;
  int64x2_t v26;
  unint64_t v27;
  int v28;
  const sirinluexternal::UUID ***v29;
  const sirinluexternal::UUID ***v30;
  uint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  char *v35;

  *(_QWORD *)this = &off_1E7BAE558;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (sirinluinternal::RewriteHypothesis ***)((char *)this + 40);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a2[4])
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, a2[4]);
    v8 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = (const sirinluexternal::UUID ***)a2[1];
  for (i = (const sirinluexternal::UUID ***)a2[2]; v9 != i; ++v9)
  {
    v11 = *v9;
    v12 = (sirinluinternalqueryrewrite::QRHypothesis *)operator new();
    sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(v12, v11);
    v14 = (sirinluinternalqueryrewrite::QRHypothesis **)*((_QWORD *)this + 2);
    v13 = *((_QWORD *)this + 3);
    if ((unint64_t)v14 >= v13)
    {
      v16 = ((uint64_t)v14 - v4->i64[0]) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v17 = v13 - v4->i64[0];
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v35 = (char *)this + 24;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v19);
      else
        v20 = 0;
      v21 = (sirinluinternalqueryrewrite::QRHypothesis **)(v19 + 8 * v16);
      v22 = v19 + 8 * v20;
      v34 = v22;
      *v21 = v12;
      v15 = v21 + 1;
      v33.i64[1] = (uint64_t)(v21 + 1);
      v24 = (_QWORD *)*((_QWORD *)this + 1);
      v23 = (_QWORD *)*((_QWORD *)this + 2);
      if (v23 == v24)
      {
        v26 = vdupq_n_s64((unint64_t)v23);
      }
      else
      {
        do
        {
          v25 = (sirinluinternalqueryrewrite::QRHypothesis *)*--v23;
          *v23 = 0;
          *--v21 = v25;
        }
        while (v23 != v24);
        v26 = *v4;
        v15 = (_QWORD *)v33.i64[1];
        v22 = v34;
      }
      *((_QWORD *)this + 1) = v21;
      *((_QWORD *)this + 2) = v15;
      v33 = v26;
      v27 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v22;
      v34 = v27;
      v32 = v26.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v32);
    }
    else
    {
      *v14 = v12;
      v15 = v14 + 1;
    }
    *((_QWORD *)this + 2) = v15;
  }
  if ((*((_BYTE *)a2 + 68) & 1) != 0)
  {
    v28 = *((_DWORD *)a2 + 16);
    *((_BYTE *)this + 68) |= 1u;
    *((_DWORD *)this + 16) = v28;
  }
  v30 = (const sirinluexternal::UUID ***)a2[5];
  v29 = (const sirinluexternal::UUID ***)a2[6];
  while (v30 != v29)
    PB::PtrVector<sirinluinternal::RewriteHypothesis>::emplace_back<sirinluinternal::RewriteHypothesis const&>(v5, *v30++);
  return this;
}

void sub_1C1EF5E6C(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t PB::PtrVector<sirinluinternal::RewriteHypothesis>::emplace_back<sirinluinternal::RewriteHypothesis const&>(sirinluinternal::RewriteHypothesis ***a1, const sirinluexternal::UUID **a2)
{
  sirinluinternal::RewriteHypothesis *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternal::RewriteHypothesis **v7;
  sirinluinternal::RewriteHypothesis **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternal::RewriteHypothesis **v14;
  unint64_t v15;
  sirinluinternal::RewriteHypothesis **v16;
  sirinluinternal::RewriteHypothesis **v17;
  sirinluinternal::RewriteHypothesis *v18;
  int64x2_t v19;
  sirinluinternal::RewriteHypothesis **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternal::RewriteHypothesis *)operator new();
  result = (uint64_t)sirinluinternal::RewriteHypothesis::RewriteHypothesis(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternal::RewriteHypothesis **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternal::RewriteHypothesis **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternal::RewriteHypothesis **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1EF5FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalqueryrewrite::QRResponse::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRResponse::QRResponse((sirinluinternalqueryrewrite::QRResponse *)v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v3;
    v10 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v6;
    sirinluinternalqueryrewrite::QRResponse::~QRResponse((sirinluinternalqueryrewrite::QRResponse *)v8);
  }
  return a1;
}

uint64_t sirinluinternalqueryrewrite::swap(uint64_t this, sirinluinternalqueryrewrite::QRResponse *a2, sirinluinternalqueryrewrite::QRResponse *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(this + 68);
  *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRResponse::QRResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E7BAE558;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_QWORD *)*v4;
  if (*v4)
  {
    v8 = *(_QWORD **)(a1 + 16);
    v9 = (_QWORD *)*v4;
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRResponse::QRResponse((uint64_t)v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v3;
    v10 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v12;
    v12 = v6;
    sirinluinternalqueryrewrite::QRResponse::~QRResponse((sirinluinternalqueryrewrite::QRResponse *)v8);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v8 = *(uint64_t **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (!sirinluinternalqueryrewrite::QRHypothesis::operator==(*v7, *v8))
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 68) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 68) & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 68) & 1) != 0)
    {
      return 0;
    }
    return PB::PtrVector<sirinluinternal::RewriteHypothesis>::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  return 0;
}

BOOL PB::PtrVector<sirinluinternal::RewriteHypothesis>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternal::RewriteHypothesis::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRResponse::hash_value(sirinluinternalqueryrewrite::QRResponse *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternalqueryrewrite::QRHypothesis **v7;
  sirinluinternalqueryrewrite::QRHypothesis **v8;
  uint64_t v9;
  sirinluinternalqueryrewrite::QRHypothesis *v10;
  uint64_t v11;
  sirinluinternal::RewriteHypothesis **v12;
  sirinluinternal::RewriteHypothesis **v13;
  uint64_t v14;
  sirinluinternal::RewriteHypothesis *v15;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternalqueryrewrite::QRHypothesis **)*((_QWORD *)this + 1);
  v8 = (sirinluinternalqueryrewrite::QRHypothesis **)*((_QWORD *)this + 2);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 ^= sirinluinternalqueryrewrite::QRHypothesis::hash_value(v10);
    }
    while (v7 != v8);
  }
  if ((*((_BYTE *)this + 68) & 1) != 0)
    v11 = *((int *)this + 16);
  else
    v11 = 0;
  v13 = (sirinluinternal::RewriteHypothesis **)*((_QWORD *)this + 5);
  v12 = (sirinluinternal::RewriteHypothesis **)*((_QWORD *)this + 6);
  if (v13 == v12)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v13++;
      v14 ^= sirinluinternal::RewriteHypothesis::hash_value(v15);
    }
    while (v13 != v12);
  }
  return v9 ^ v6 ^ v11 ^ v14;
}

_QWORD *sirinluinternalqueryrewrite::QRResponse::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternal::OvertonKGSpanData::~OvertonKGSpanData(sirinluinternal::OvertonKGSpanData *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE5A8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE5A8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE5A8;
  v2 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::OvertonKGSpanData::readFrom(sirinluinternal::OvertonKGSpanData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (std::vector<std::string> *)((char *)this + 16);
    v9 = (std::allocator<std::string> *)((char *)this + 32);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_27;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        v24 = (char *)*((_QWORD *)this + 3);
        v23 = *((_QWORD *)this + 4);
        if ((unint64_t)v24 >= v23)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (char *)v8->__begin_) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x555555555555555)
            v29 = 0xAAAAAAAAAAAAAAALL;
          else
            v29 = v27;
          __v.__end_cap_.__value_ = v9;
          if (v29)
            v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v29);
          else
            v30 = 0;
          v31 = (std::string *)(v29 + 24 * v26);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v29;
          __v.__begin_ = v31;
          __v.__end_cap_.__value_ = (std::string *)(v29 + 24 * v30);
          v31->__r_.__value_.__r.__words[0] = 0;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v31 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v25 = (_QWORD *)*((_QWORD *)this + 3);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v24 = 0;
          *((_QWORD *)v24 + 1) = 0;
          v25 = v24 + 24;
          *((_QWORD *)v24 + 2) = 0;
        }
        *((_QWORD *)this + 3) = v25;
        PB::Reader::read();
      }
      else if ((v13 >> 3) == 1)
      {
        *((_BYTE *)this + 40) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
      if (v16)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::OvertonKGSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 8));
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  while (v3 != v4)
  {
    this = PB::Writer::write();
    v3 += 24;
  }
  return this;
}

uint64_t sirinluinternal::OvertonKGSpanData::formatText(sirinluinternal::OvertonKGSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t i;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 1));
  v5 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternal::OvertonKGSpanData::OvertonKGSpanData(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAE5A8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAE5A8;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

sirinluinternal::OvertonKGSpanData *sirinluinternal::OvertonKGSpanData::OvertonKGSpanData(sirinluinternal::OvertonKGSpanData *this, const sirinluinternal::OvertonKGSpanData *a2)
{
  std::vector<std::string> *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAE5A8;
  *((_QWORD *)this + 2) = 0;
  v3 = (std::vector<std::string> *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 40) = 1;
    *((_QWORD *)this + 1) = v4;
  }
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *((std::string **)a2 + 2), *((__int128 **)a2 + 3), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  return this;
}

uint64_t sirinluinternal::OvertonKGSpanData::operator=(uint64_t a1, const sirinluinternal::OvertonKGSpanData *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(sirinluinternal::OvertonKGSpanData *__hidden);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  void **v13;

  if ((const sirinluinternal::OvertonKGSpanData *)a1 != a2)
  {
    sirinluinternal::OvertonKGSpanData::OvertonKGSpanData((sirinluinternal::OvertonKGSpanData *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v6;
    v8 = &off_1E7BAE5A8;
    v13 = (void **)&v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double sirinluinternal::swap(sirinluinternal *this, sirinluinternal::OvertonKGSpanData *a2, sirinluinternal::OvertonKGSpanData *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  return result;
}

uint64_t sirinluinternal::OvertonKGSpanData::OvertonKGSpanData(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_1E7BAE5A8;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_1E7BAE5A8;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_OWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 16));
  *v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternal::OvertonKGSpanData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  void (**v11)(sirinluinternal::OvertonKGSpanData *__hidden);
  uint64_t v12;
  std::vector<std::string> v13;
  int v14;
  std::vector<std::string> *v15;

  if (a1 != a2)
  {
    v11 = &off_1E7BAE5A8;
    memset(&v13, 0, sizeof(v13));
    v14 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v12 = *(_QWORD *)(a2 + 8);
    std::vector<std::string>::__vdeallocate(&v13);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v14;
    v14 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;
    v12 = v7;
    v8 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)&v13.__begin_ = v8;
    v9 = *(std::string **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v13.__end_cap_.__value_ = v9;
    v11 = &off_1E7BAE5A8;
    v15 = &v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

BOOL sirinluinternal::OvertonKGSpanData::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v2 = *(unsigned __int8 **)(a1 + 16);
  v3 = *(unsigned __int8 **)(a1 + 24);
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v3 - v2 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v2, v4);
    if (!result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t sirinluinternal::OvertonKGSpanData::hash_value(sirinluinternal::OvertonKGSpanData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    if (*((double *)this + 1) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 1);
  }
  else
  {
    v1 = 0;
  }
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v4 ^= std::__string_hash<char>::operator()[abi:ne180100](v2);
      v2 += 24;
    }
    while (v2 != v3);
  }
  return v4 ^ v1;
}

uint64_t SIRINLUINTERNALITFMITFMHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v26;

      }
      else if ((_DWORD)v18 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        *(_DWORD *)(a1 + 12) = v30;
      }
      else if ((_DWORD)v18 == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_35;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            LODWORD(v21) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 8) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalpsc::PSCServiceRequest::~PSCServiceRequest(sirinluinternalpsc::PSCServiceRequest *this)
{
  sirinluinternalpsc::PSCServiceRequest::~PSCServiceRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAE5F8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v8 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalpsc::PSCServiceRequest::readFrom(sirinluinternalpsc::PSCServiceRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_22:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB0CB8;
        *(_QWORD *)(v21 + 24) = 0;
        v22 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *((_QWORD *)this + 7);
        }
        break;
      case 2u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE788;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        v23 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v21;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v21 = *((_QWORD *)this + 8);
        }
        break;
      case 3u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB1DD0;
        *(_DWORD *)(v21 + 64) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v21 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v21 = *(_QWORD *)(*((_QWORD *)this + 4) - 8);
        break;
      case 5u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB16E8;
        *(_DWORD *)(v21 + 148) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 104) = 0u;
        *(_QWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 136) = 0;
        v25 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v21 = *((_QWORD *)this + 9);
        }
        break;
      case 6u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE238;
        *(_DWORD *)(v21 + 72) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 52) = 0u;
        v26 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v21;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v21 = *((_QWORD *)this + 2);
        }
        break;
      case 7u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE468;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_QWORD *)(v21 + 56) = 0;
        v27 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v21;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v21 = *((_QWORD *)this + 6);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_40:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_22;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_40;
  return result;
}

uint64_t sirinluinternalpsc::PSCServiceRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 56);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[8];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base **)v3[3];
  v8 = (const PB::Base **)v3[4];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = (const PB::Base *)v3[9];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[2];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[6];
  if (v12)
    return PB::Writer::writeSubmessage(a2, v12);
  return this;
}

uint64_t sirinluinternalpsc::PSCServiceRequest::formatText(sirinluinternalpsc::PSCServiceRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embeddings");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "legacy_context");
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "matching_spans");
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "nlu_request_id");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "request_id");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "tokenised_utterance");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "turn_input");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB1540;
  *(_DWORD *)(result + 80) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1EF7F14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternalpsc::PSCServiceRequest::PSCServiceRequest(sirinluinternalpsc::PSCServiceRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE5F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE5F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluinternalpsc::PSCServiceRequest *sirinluinternalpsc::PSCServiceRequest::PSCServiceRequest(sirinluinternalpsc::PSCServiceRequest *this, const sirinluinternalpsc::PSCServiceRequest *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  sirinluinternal::MatchingSpan ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  sirinluinternalnlv4_parser::Tokenisation *v9;
  sirinluinternalnlv4_parser::Tokenisation *v10;
  uint64_t v11;
  char **v12;
  sirinluinternal::NLv4EmbeddingTensor *v13;
  sirinluinternal::NLv4EmbeddingTensor *v14;
  const sirinluinternal::MatchingSpan **v15;
  const sirinluinternal::MatchingSpan **v16;
  sirinluexternal::TurnInput *v17;
  sirinluexternal::TurnInput *v18;
  uint64_t v19;
  sirinluexternal::LegacyNLContext *v20;
  sirinluexternal::LegacyNLContext *v21;
  uint64_t v22;
  sirinluexternal::RequestID *v23;
  sirinluexternal::RequestID *v24;
  uint64_t v25;

  *(_QWORD *)this = &off_1E7BAE5F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v5 = (sirinluinternal::MatchingSpan ***)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)a2 + 7))
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, *((const sirinluexternal::UUID **)a2 + 7));
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v9 = (sirinluinternalnlv4_parser::Tokenisation *)operator new();
    v10 = sirinluinternalnlv4_parser::Tokenisation::Tokenisation(v9, *((const sirinluinternalnlv4_parser::Tokenisation **)a2 + 8));
    v11 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v12 = (char **)operator new();
    v13 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v12, *((char ***)a2 + 1));
    v14 = *v4;
    *v4 = v13;
    if (v14)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 3);
  v16 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 4);
  while (v15 != v16)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(v5, *v15++);
  if (*((_QWORD *)a2 + 9))
  {
    v17 = (sirinluexternal::TurnInput *)operator new();
    v18 = sirinluexternal::TurnInput::TurnInput(v17, *((const sirinluexternal::TurnInput **)a2 + 9));
    v19 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v20 = (sirinluexternal::LegacyNLContext *)operator new();
    v21 = sirinluexternal::LegacyNLContext::LegacyNLContext(v20, *((const sirinluexternal::LegacyNLContext **)a2 + 2));
    v22 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v23 = (sirinluexternal::RequestID *)operator new();
    v24 = sirinluexternal::RequestID::RequestID(v23, *((const sirinluexternal::RequestID **)a2 + 6));
    v25 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  return this;
}

uint64_t PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>(sirinluinternal::MatchingSpan ***a1, const sirinluinternal::MatchingSpan *a2)
{
  sirinluinternal::MatchingSpan *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternal::MatchingSpan **v7;
  sirinluinternal::MatchingSpan **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternal::MatchingSpan **v14;
  unint64_t v15;
  sirinluinternal::MatchingSpan **v16;
  sirinluinternal::MatchingSpan **v17;
  sirinluinternal::MatchingSpan *v18;
  int64x2_t v19;
  sirinluinternal::MatchingSpan **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternal::MatchingSpan *)operator new();
  result = (uint64_t)sirinluinternal::MatchingSpan::MatchingSpan(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternal::MatchingSpan **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternal::MatchingSpan **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternal::MatchingSpan **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1EF83A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalpsc::PSCServiceRequest::operator=(uint64_t a1, const sirinluinternalpsc::PSCServiceRequest *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluinternalpsc::PSCServiceRequest *)a1 != a2)
  {
    sirinluinternalpsc::PSCServiceRequest::PSCServiceRequest((sirinluinternalpsc::PSCServiceRequest *)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalpsc::PSCServiceRequest::~PSCServiceRequest((sirinluinternalpsc::PSCServiceRequest *)&v9);
  }
  return a1;
}

_QWORD *sirinluinternalpsc::swap(_QWORD *this, sirinluinternalpsc::PSCServiceRequest *a2, sirinluinternalpsc::PSCServiceRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v3;
  v4 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  return this;
}

uint64_t sirinluinternalpsc::PSCServiceRequest::PSCServiceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = &off_1E7BAE5F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *v4;
  *v4 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return a1;
}

uint64_t sirinluinternalpsc::PSCServiceRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluinternalpsc::PSCServiceRequest::PSCServiceRequest((uint64_t)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalpsc::PSCServiceRequest::~PSCServiceRequest((sirinluinternalpsc::PSCServiceRequest *)&v9);
  }
  return a1;
}

BOOL sirinluinternalpsc::PSCServiceRequest::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[7];
  v5 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[8];
  v7 = *(_QWORD **)(a2 + 64);
  if (v6)
  {
    if (!v7 || !sirinluinternalnlv4_parser::Tokenisation::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[1];
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 3, *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  if (!result)
    return result;
  v11 = a1[9];
  v12 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
    if (!v12 || (sirinluexternal::TurnInput::operator==(v11, v12) & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = a1[2];
  v14 = *(_QWORD *)(a2 + 16);
  if (!v13)
  {
    if (!v14)
      goto LABEL_29;
    return 0;
  }
  if (!v14 || !sirinluexternal::LegacyNLContext::operator==(v13, v14))
    return 0;
LABEL_29:
  v15 = a1[6];
  v16 = *(_QWORD *)(a2 + 48);
  result = (v15 | v16) == 0;
  if (v15)
  {
    if (v16)
      return sirinluexternal::RequestID::operator==(a1[6], v16);
  }
  return result;
}

BOOL PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternal::MatchingSpan::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalpsc::PSCServiceRequest::hash_value(sirinluinternalpsc::PSCServiceRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternalnlv4_parser::Tokenisation *v7;
  unint64_t v8;
  sirinluinternal::NLv4EmbeddingTensor *v9;
  unint64_t v10;
  sirinluinternal::MatchingSpan **v11;
  sirinluinternal::MatchingSpan **v12;
  uint64_t v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluexternal::TurnInput *v15;
  unint64_t v16;
  sirinluexternal::LegacyNLContext *v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternalnlv4_parser::Tokenisation *)*((_QWORD *)this + 8);
  if (v7)
    v8 = sirinluinternalnlv4_parser::Tokenisation::hash_value(v7);
  else
    v8 = 0;
  v9 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 1);
  if (v9)
    v10 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v9);
  else
    v10 = 0;
  v11 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 3);
  v12 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 4);
  if (v11 == v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  v15 = (sirinluexternal::TurnInput *)*((_QWORD *)this + 9);
  if (v15)
    v16 = sirinluexternal::TurnInput::hash_value(v15);
  else
    v16 = 0;
  v17 = (sirinluexternal::LegacyNLContext *)*((_QWORD *)this + 2);
  if (v17)
    v18 = sirinluexternal::LegacyNLContext::hash_value(v17);
  else
    v18 = 0;
  v19 = *((_QWORD *)this + 6);
  if (v19)
    v19 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v19);
  return v8 ^ v6 ^ v16 ^ v18 ^ v19 ^ v10 ^ v13;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeTokenisedUtterance(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAE788;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeEmbeddings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeLegacyContext(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE238;
    *(_DWORD *)(v2 + 72) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 52) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalpsc::PSCServiceRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALRewriteTokenReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_40;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_51:
          v45 = 32;
          goto LABEL_56;
        case 3u:
          v28 = 0;
          v29 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          while (2)
          {
            v30 = *v3;
            v31 = *(_QWORD *)(a2 + v30);
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
              *(_QWORD *)(a2 + v30) = v32;
              v23 |= (unint64_t)(v33 & 0x7F) << v28;
              if (v33 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_55:
          v45 = 16;
LABEL_56:
          *(_DWORD *)(a1 + v45) = v23;
          continue;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          *(_QWORD *)(a1 + 8) = v36;
          continue;
        case 5u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
LABEL_40:
          v37 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 6u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          *(_BYTE *)(a1 + 52) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        v43 = v42 + 1;
        if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
        *(_QWORD *)(a2 + v41) = v43;
        v40 |= (unint64_t)(v44 & 0x7F) << v38;
        if ((v44 & 0x80) == 0)
          goto LABEL_58;
        v38 += 7;
        v15 = v39++ >= 9;
        if (v15)
        {
          v40 = 0;
          goto LABEL_60;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
      if (*(_BYTE *)(a2 + *v5))
        v40 = 0;
LABEL_60:
      *(_BYTE *)(a1 + 48) = v40 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALDelegatedUserDialogActReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  SIRICOMMONStringValue *v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_42;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_44:
        *(_DWORD *)(a1 + 8) = v19;
        goto LABEL_45;
      case 2u:
        v24 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_47;
        goto LABEL_40;
      case 3u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v25;

        goto LABEL_45;
      case 4u:
        v24 = objc_alloc_init(SIRINLUEXTERNALSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v24);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSpanReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_47;
        goto LABEL_40;
      case 5u:
        v24 = objc_alloc_init(SIRINLUEXTERNALRewriteMessage);
        objc_storeStrong((id *)(a1 + 40), v24);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRewriteMessageReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_47;
        goto LABEL_40;
      case 6u:
        v24 = objc_alloc_init(SIRINLUEXTERNALReferenceContext);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALReferenceContextReadFrom((uint64_t)v24, a2))
        {
LABEL_40:
          PBReaderRecallMark();

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

void sirinluexternal::SystemGaveOptions::~SystemGaveOptions(sirinluexternal::SystemGaveOptions *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE648;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE648;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAE648;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemGaveOptions::readFrom(sirinluexternal::SystemGaveOptions *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<>(v8);
        v20 = *(_QWORD *)(*((_QWORD *)this + 2) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SystemGaveOptions::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5))
    v5 = *v2++;
  return this;
}

uint64_t sirinluexternal::SystemGaveOptions::formatText(sirinluexternal::SystemGaveOptions *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "choices");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB14F0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_QWORD *)(result + 88) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1EFB1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sirinluexternal::SystemGaveOptions::SystemGaveOptions(_QWORD *this)
{
  *this = &off_1E7BAE648;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAE648;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternal::SystemGaveOptions *sirinluexternal::SystemGaveOptions::SystemGaveOptions(sirinluexternal::SystemGaveOptions *this, const sirinluexternal::SystemGaveOptions *a2)
{
  sirinluexternal::UserDialogAct ***v3;
  const sirinluexternal::UserDialogAct **v4;
  const sirinluexternal::UserDialogAct **v5;

  *((_QWORD *)this + 1) = 0;
  v3 = (sirinluexternal::UserDialogAct ***)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAE648;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (const sirinluexternal::UserDialogAct **)*((_QWORD *)a2 + 1);
  v5 = (const sirinluexternal::UserDialogAct **)*((_QWORD *)a2 + 2);
  while (v4 != v5)
    PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>(v3, *v4++);
  return this;
}

uint64_t PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>(sirinluexternal::UserDialogAct ***a1, const sirinluexternal::UserDialogAct *a2)
{
  sirinluexternal::UserDialogAct *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternal::UserDialogAct **v7;
  sirinluexternal::UserDialogAct **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternal::UserDialogAct **v14;
  unint64_t v15;
  sirinluexternal::UserDialogAct **v16;
  sirinluexternal::UserDialogAct **v17;
  sirinluexternal::UserDialogAct *v18;
  int64x2_t v19;
  sirinluexternal::UserDialogAct **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternal::UserDialogAct *)operator new();
  result = (uint64_t)sirinluexternal::UserDialogAct::UserDialogAct(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternal::UserDialogAct **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternal::UserDialogAct **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternal::UserDialogAct **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1EFB3FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::SystemGaveOptions::operator=(uint64_t a1, const sirinluexternal::SystemGaveOptions *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluexternal::SystemGaveOptions *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluexternal::SystemGaveOptions *)a1 != a2)
  {
    sirinluexternal::SystemGaveOptions::SystemGaveOptions((sirinluexternal::SystemGaveOptions *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BAE648;
    v9 = (void **)&v7;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::SystemGaveOptions *a2, sirinluexternal::SystemGaveOptions *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluexternal::SystemGaveOptions::SystemGaveOptions(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = &off_1E7BAE648;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = &off_1E7BAE648;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::SystemGaveOptions::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(sirinluexternal::SystemGaveOptions *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = &off_1E7BAE648;
    v10 = 0uLL;
    v11 = 0;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = &off_1E7BAE648;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluexternal::SystemGaveOptions::operator==(uint64_t a1, uint64_t a2)
{
  return PB::PtrVector<sirinluexternal::UserDialogAct>::operator==((uint64_t *)(a1 + 8), *(_QWORD ***)(a2 + 8), *(_QWORD *)(a2 + 16));
}

BOOL PB::PtrVector<sirinluexternal::UserDialogAct>::operator==(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::UserDialogAct::operator==(*(_QWORD **)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sirinluexternal::SystemGaveOptions::hash_value(sirinluexternal::SystemGaveOptions *this)
{
  sirinluexternal::UserDialogAct **v1;
  sirinluexternal::UserDialogAct **v2;
  uint64_t v3;
  sirinluexternal::UserDialogAct *v4;

  v1 = (sirinluexternal::UserDialogAct **)*((_QWORD *)this + 1);
  v2 = (sirinluexternal::UserDialogAct **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= sirinluexternal::UserDialogAct::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void sirinluinternalqueryrewrite::QRRequest::~QRRequest(sirinluinternalqueryrewrite::QRRequest *this)
{
  sirinluinternalqueryrewrite::QRRequest::~QRRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E7BAE698;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 7);
    v6 = (void *)*((_QWORD *)this + 6);
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v4;
    operator delete(v6);
  }
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (_QWORD *)*((_QWORD *)this + 2);
  if (v10)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 3);
    v12 = (void *)*((_QWORD *)this + 2);
    if (v11 != v10)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v10;
    operator delete(v12);
  }
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRRequest::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  int64x2_t *v9;
  void (**v10)(sirinluinternalqueryrewrite::QRInteraction *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(sirinluinternalqueryrewrite::QRInteraction *__hidden);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int64x2_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  int64x2_t *v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = this + 4;
  v9 = this + 2;
  v10 = &off_1E7BAFBD0;
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          v23 = operator new();
          *(_QWORD *)v23 = &off_1E7BB0CB8;
          *(_QWORD *)(v23 + 24) = 0;
          v24 = this[4].i64[1];
          this[4].i64[1] = v23;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v23 = this[4].i64[1];
          }
          goto LABEL_37;
        case 2u:
          v34 = operator new();
          v35 = v34;
          v26 = v10;
          *(_QWORD *)v34 = v10;
          *(_DWORD *)(v34 + 76) = 0;
          *(_OWORD *)(v34 + 8) = 0u;
          *(_OWORD *)(v34 + 24) = 0u;
          *(_OWORD *)(v34 + 40) = 0u;
          *(_QWORD *)(v34 + 56) = 0;
          v37 = (uint64_t *)this[1].i64[1];
          v36 = this[2].u64[0];
          if ((unint64_t)v37 >= v36)
          {
            v45 = this[1].i64[0];
            v46 = ((uint64_t)v37 - v45) >> 3;
            if ((unint64_t)(v46 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v47 = v36 - v45;
            v48 = v47 >> 2;
            if (v47 >> 2 <= (unint64_t)(v46 + 1))
              v48 = v46 + 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            v69 = v9;
            if (v49)
              v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v49);
            else
              v50 = 0;
            v57 = (uint64_t *)(v49 + 8 * v46);
            v58 = v49 + 8 * v50;
            v68 = v58;
            *v57 = v35;
            v31 = v57 + 1;
            v67.i64[1] = (uint64_t)(v57 + 1);
            v60 = (_QWORD *)this[1].i64[0];
            v59 = (_QWORD *)this[1].i64[1];
            if (v59 == v60)
            {
              v62 = vdupq_n_s64((unint64_t)v59);
            }
            else
            {
              do
              {
                v61 = *--v59;
                *v59 = 0;
                *--v57 = v61;
              }
              while (v59 != v60);
              v62 = this[1];
              v31 = (_QWORD *)v67.i64[1];
              v58 = v68;
            }
            this[1].i64[0] = (uint64_t)v57;
            this[1].i64[1] = (uint64_t)v31;
            v67 = v62;
            v64 = this[2].i64[0];
            this[2].i64[0] = v58;
            v68 = v64;
            v66 = v62.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v66);
          }
          else
          {
            *v37 = v34;
            v31 = v37 + 1;
          }
          this[1].i64[1] = (uint64_t)v31;
          goto LABEL_70;
        case 3u:
          v26 = v10;
          v27 = operator new();
          v28 = v27;
          *(_QWORD *)v27 = &off_1E7BAE6E8;
          *(_DWORD *)(v27 + 76) = 0;
          *(_OWORD *)(v27 + 8) = 0u;
          *(_OWORD *)(v27 + 24) = 0u;
          *(_OWORD *)(v27 + 40) = 0u;
          *(_QWORD *)(v27 + 56) = 0;
          v30 = (uint64_t *)this[3].i64[1];
          v29 = this[4].u64[0];
          if ((unint64_t)v30 >= v29)
          {
            v39 = this[3].i64[0];
            v40 = ((uint64_t)v30 - v39) >> 3;
            if ((unint64_t)(v40 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v41 = v29 - v39;
            v42 = v41 >> 2;
            if (v41 >> 2 <= (unint64_t)(v40 + 1))
              v42 = v40 + 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            v69 = v8;
            if (v43)
              v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v43);
            else
              v44 = 0;
            v51 = (uint64_t *)(v43 + 8 * v40);
            v52 = v43 + 8 * v44;
            v68 = v52;
            *v51 = v28;
            v31 = v51 + 1;
            v67.i64[1] = (uint64_t)(v51 + 1);
            v54 = (_QWORD *)this[3].i64[0];
            v53 = (_QWORD *)this[3].i64[1];
            if (v53 == v54)
            {
              v56 = vdupq_n_s64((unint64_t)v53);
            }
            else
            {
              do
              {
                v55 = *--v53;
                *v53 = 0;
                *--v51 = v55;
              }
              while (v53 != v54);
              v56 = this[3];
              v31 = (_QWORD *)v67.i64[1];
              v52 = v68;
            }
            this[3].i64[0] = (uint64_t)v51;
            this[3].i64[1] = (uint64_t)v31;
            v67 = v56;
            v63 = this[4].i64[0];
            this[4].i64[0] = v52;
            v68 = v63;
            v66 = v56.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v66);
          }
          else
          {
            *v30 = v27;
            v31 = v30 + 1;
          }
          this[3].i64[1] = (uint64_t)v31;
LABEL_70:
          v65 = *(v31 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v65 + 16))(v65, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v10 = v26;
          goto LABEL_73;
        case 4u:
          v32 = (_QWORD *)operator new();
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          v33 = this[5].i64[0];
          this[5].i64[0] = (uint64_t)v32;
          if (v33)
            std::default_delete<std::string>::operator()[abi:ne180100](v33);
          PB::Reader::read();
          goto LABEL_73;
        case 5u:
          v23 = operator new();
          *(_QWORD *)v23 = &off_1E7BB0CB8;
          *(_QWORD *)(v23 + 24) = 0;
          v25 = this[2].i64[1];
          this[2].i64[1] = v23;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v23 = this[2].i64[1];
          }
          goto LABEL_37;
        case 6u:
          v23 = operator new();
          *(_QWORD *)v23 = &off_1E7BAE468;
          *(_OWORD *)(v23 + 8) = 0u;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_QWORD *)(v23 + 56) = 0;
          v38 = this->i64[1];
          this->i64[1] = v23;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v23 = this->i64[1];
          }
LABEL_37:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_73;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_73:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1C1EFBC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalqueryrewrite::QRRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 72);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base **)v3[2];
  v6 = (const PB::Base **)v3[3];
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = (const PB::Base **)v3[6];
  v9 = (const PB::Base **)v3[7];
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  if (v3[10])
    this = PB::Writer::write();
  v11 = (const PB::Base *)v3[5];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[1];
  if (v12)
    return PB::Writer::writeSubmessage(a2, v12);
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRRequest::formatText(sirinluinternalqueryrewrite::QRRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "cdm_request_id");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "interactions");
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "nlu_request_id");
  v10 = (uint64_t *)*((_QWORD *)this + 6);
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  while (v10 != v11)
  {
    v12 = *v10++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "original_interactions");
  }
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "requestId");
  if (*((_QWORD *)this + 10))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalqueryrewrite::QRRequest::QRRequest(sirinluinternalqueryrewrite::QRRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE698;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE698;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

sirinluinternalqueryrewrite::QRRequest *sirinluinternalqueryrewrite::QRRequest::QRRequest(sirinluinternalqueryrewrite::QRRequest *this, const sirinluexternal::UUID **a2)
{
  sirinluexternal::RequestID **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const sirinluinternalqueryrewrite::QRInteraction **v8;
  const sirinluinternalqueryrewrite::QRInteraction **i;
  const sirinluinternalqueryrewrite::QRInteraction *v10;
  sirinluinternalqueryrewrite::QRInteraction *v11;
  unint64_t v12;
  sirinluinternalqueryrewrite::QRInteraction **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  sirinluinternalqueryrewrite::QRInteraction **v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  sirinluinternalqueryrewrite::QRInteraction *v25;
  int64x2_t v26;
  unint64_t v27;
  const sirinluinternal::RewriteInteraction **v28;
  const sirinluinternal::RewriteInteraction **j;
  const sirinluinternal::RewriteInteraction *v30;
  sirinluinternal::RewriteInteraction *v31;
  unint64_t v32;
  sirinluinternal::RewriteInteraction **v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  sirinluinternal::RewriteInteraction **v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  sirinluinternal::RewriteInteraction *v45;
  int64x2_t v46;
  unint64_t v47;
  std::string *v48;
  std::string *v49;
  const sirinluexternal::UUID *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  sirinluexternal::RequestID *v56;
  sirinluexternal::RequestID *v57;
  sirinluexternal::RequestID *v58;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  char *v63;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::RequestID **)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAE698;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (a2[9])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[9]);
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  v8 = (const sirinluinternalqueryrewrite::QRInteraction **)a2[2];
  for (i = (const sirinluinternalqueryrewrite::QRInteraction **)a2[3]; v8 != i; ++v8)
  {
    v10 = *v8;
    v11 = (sirinluinternalqueryrewrite::QRInteraction *)operator new();
    sirinluinternalqueryrewrite::QRInteraction::QRInteraction(v11, v10);
    v13 = (sirinluinternalqueryrewrite::QRInteraction **)*((_QWORD *)this + 3);
    v12 = *((_QWORD *)this + 4);
    if ((unint64_t)v13 >= v12)
    {
      v15 = *((_QWORD *)this + 2);
      v16 = ((uint64_t)v13 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v17 = v12 - v15;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v63 = (char *)this + 32;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v19);
      else
        v20 = 0;
      v21 = (sirinluinternalqueryrewrite::QRInteraction **)(v19 + 8 * v16);
      v22 = v19 + 8 * v20;
      v62 = v22;
      *v21 = v11;
      v14 = v21 + 1;
      v61.i64[1] = (uint64_t)(v21 + 1);
      v24 = (_QWORD *)*((_QWORD *)this + 2);
      v23 = (_QWORD *)*((_QWORD *)this + 3);
      if (v23 == v24)
      {
        v26 = vdupq_n_s64((unint64_t)v23);
      }
      else
      {
        do
        {
          v25 = (sirinluinternalqueryrewrite::QRInteraction *)*--v23;
          *v23 = 0;
          *--v21 = v25;
        }
        while (v23 != v24);
        v26 = *((int64x2_t *)this + 1);
        v14 = (_QWORD *)v61.i64[1];
        v22 = v62;
      }
      *((_QWORD *)this + 2) = v21;
      *((_QWORD *)this + 3) = v14;
      v61 = v26;
      v27 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v22;
      v62 = v27;
      v60 = v26.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v60);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 1;
    }
    *((_QWORD *)this + 3) = v14;
  }
  v28 = (const sirinluinternal::RewriteInteraction **)a2[6];
  for (j = (const sirinluinternal::RewriteInteraction **)a2[7]; v28 != j; ++v28)
  {
    v30 = *v28;
    v31 = (sirinluinternal::RewriteInteraction *)operator new();
    sirinluinternal::RewriteInteraction::RewriteInteraction(v31, v30);
    v33 = (sirinluinternal::RewriteInteraction **)*((_QWORD *)this + 7);
    v32 = *((_QWORD *)this + 8);
    if ((unint64_t)v33 >= v32)
    {
      v35 = *((_QWORD *)this + 6);
      v36 = ((uint64_t)v33 - v35) >> 3;
      if ((unint64_t)(v36 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v37 = v32 - v35;
      v38 = v37 >> 2;
      if (v37 >> 2 <= (unint64_t)(v36 + 1))
        v38 = v36 + 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v39 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v39 = v38;
      v63 = (char *)this + 64;
      if (v39)
        v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v39);
      else
        v40 = 0;
      v41 = (sirinluinternal::RewriteInteraction **)(v39 + 8 * v36);
      v42 = v39 + 8 * v40;
      v62 = v42;
      *v41 = v31;
      v34 = v41 + 1;
      v61.i64[1] = (uint64_t)(v41 + 1);
      v44 = (_QWORD *)*((_QWORD *)this + 6);
      v43 = (_QWORD *)*((_QWORD *)this + 7);
      if (v43 == v44)
      {
        v46 = vdupq_n_s64((unint64_t)v43);
      }
      else
      {
        do
        {
          v45 = (sirinluinternal::RewriteInteraction *)*--v43;
          *v43 = 0;
          *--v41 = v45;
        }
        while (v43 != v44);
        v46 = *((int64x2_t *)this + 3);
        v34 = (_QWORD *)v61.i64[1];
        v42 = v62;
      }
      *((_QWORD *)this + 6) = v41;
      *((_QWORD *)this + 7) = v34;
      v61 = v46;
      v47 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v42;
      v62 = v47;
      v60 = v46.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v60);
    }
    else
    {
      *v33 = v31;
      v34 = v33 + 1;
    }
    *((_QWORD *)this + 7) = v34;
  }
  if (a2[10])
  {
    v48 = (std::string *)operator new();
    v49 = v48;
    v50 = a2[10];
    if (*((char *)v50 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v50, *((_QWORD *)v50 + 1));
    }
    else
    {
      v51 = *(_OWORD *)v50;
      v48->__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v51;
    }
    v52 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v49;
    if (v52)
      std::default_delete<std::string>::operator()[abi:ne180100](v52);
  }
  if (a2[5])
  {
    v53 = operator new();
    v54 = sirinluexternal::UUID::UUID(v53, a2[5]);
    v55 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v54;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  }
  if (a2[1])
  {
    v56 = (sirinluexternal::RequestID *)operator new();
    v57 = sirinluexternal::RequestID::RequestID(v56, a2[1]);
    v58 = *v4;
    *v4 = v57;
    if (v58)
      (*(void (**)(sirinluexternal::RequestID *))(*(_QWORD *)v58 + 8))(v58);
  }
  return this;
}

void sub_1C1EFC3D4(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternalqueryrewrite::QRRequest::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRRequest::QRRequest((sirinluinternalqueryrewrite::QRRequest *)v9, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v4 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    v13 = v4;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v11 = v3;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    sirinluinternalqueryrewrite::QRRequest::~QRRequest((sirinluinternalqueryrewrite::QRRequest *)v9);
  }
  return a1;
}

_QWORD *sirinluinternalqueryrewrite::swap(_QWORD *this, sirinluinternalqueryrewrite::QRRequest *a2, sirinluinternalqueryrewrite::QRRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v10;
  v11 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRRequest::QRRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = &off_1E7BAE698;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  v5 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (_QWORD *)*v5;
  if (*v5)
  {
    v9 = *(_QWORD **)(a1 + 24);
    v10 = (_QWORD *)*v5;
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (_QWORD *)*v5;
    }
    *(_QWORD *)(a1 + 24) = v8;
    operator delete(v10);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v13 = *(_QWORD **)(a1 + 48);
  if (v13)
  {
    v14 = (void **)(a1 + 48);
    v15 = *(_QWORD **)(a1 + 56);
    v16 = *(void **)(a1 + 48);
    if (v15 != v13)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      while (v15 != v13);
      v16 = *v14;
    }
    *(_QWORD *)(a1 + 56) = v13;
    operator delete(v16);
    *v14 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  if (v20)
    std::default_delete<std::string>::operator()[abi:ne180100](v20);
  v21 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v22 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v24 = *v4;
  *v4 = v23;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRRequest::QRRequest((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v4 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v5 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v14;
    v13 = v4;
    v14 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v11 = v3;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    sirinluinternalqueryrewrite::QRRequest::~QRRequest((sirinluinternalqueryrewrite::QRRequest *)v9);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRRequest::operator==(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1[9];
  v5 = a2[9];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = (uint64_t *)a1[2];
  v6 = (uint64_t *)a1[3];
  v8 = (uint64_t *)a2[2];
  if ((char *)v6 - (char *)v7 != a2[3] - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    result = sirinluinternalqueryrewrite::QRInteraction::operator==(*v7, *v8);
    if (!result)
      return result;
    ++v7;
    ++v8;
  }
  v11 = (uint64_t *)a1[6];
  v10 = (uint64_t *)a1[7];
  v12 = (uint64_t *)a2[6];
  if ((char *)v10 - (char *)v11 != a2[7] - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    result = sirinluinternal::RewriteInteraction::operator==(*v11, *v12);
    if (!result)
      return result;
    ++v11;
    ++v12;
  }
  v13 = (unsigned __int8 *)a1[10];
  v14 = (unsigned __int8 **)a2[10];
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = (unsigned __int8 *)a2[10];
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_34;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_34:
  v20 = a1[5];
  v21 = a2[5];
  if (!v20)
  {
    if (!v21)
      goto LABEL_39;
    return 0;
  }
  if (!v21 || !sirinluexternal::UUID::operator==(v20, v21))
    return 0;
LABEL_39:
  v22 = a1[1];
  v23 = a2[1];
  result = (v22 | v23) == 0;
  if (v22)
  {
    if (v23)
      return sirinluexternal::RequestID::operator==(a1[1], v23);
  }
  return result;
}

unint64_t sirinluinternalqueryrewrite::QRRequest::hash_value(sirinluinternalqueryrewrite::QRRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternalqueryrewrite::QRInteraction **v7;
  sirinluinternalqueryrewrite::QRInteraction **v8;
  uint64_t v9;
  sirinluinternalqueryrewrite::QRInteraction *v10;
  sirinluinternal::RewriteInteraction **v11;
  sirinluinternal::RewriteInteraction **v12;
  uint64_t v13;
  sirinluinternal::RewriteInteraction *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = *((_QWORD *)this + 9);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternalqueryrewrite::QRInteraction **)*((_QWORD *)this + 2);
  v8 = (sirinluinternalqueryrewrite::QRInteraction **)*((_QWORD *)this + 3);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 ^= sirinluinternalqueryrewrite::QRInteraction::hash_value(v10);
    }
    while (v7 != v8);
  }
  v11 = (sirinluinternal::RewriteInteraction **)*((_QWORD *)this + 6);
  v12 = (sirinluinternal::RewriteInteraction **)*((_QWORD *)this + 7);
  if (v11 == v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v13 ^= sirinluinternal::RewriteInteraction::hash_value(v14);
    }
    while (v11 != v12);
  }
  v15 = *((_QWORD *)this + 10);
  if (v15)
    v16 = std::__string_hash<char>::operator()[abi:ne180100](v15);
  else
    v16 = 0;
  v17 = *((_QWORD *)this + 5);
  if (!v17)
  {
    v21 = 0;
    goto LABEL_34;
  }
  if ((*(_BYTE *)(v17 + 28) & 1) == 0)
  {
    v18 = 0;
    if ((*(_BYTE *)(v17 + 28) & 2) != 0)
      goto LABEL_27;
LABEL_31:
    v19 = 0;
    if ((*(_BYTE *)(v17 + 28) & 4) != 0)
      goto LABEL_28;
LABEL_32:
    v20 = 0;
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(v17 + 8);
  if ((*(_BYTE *)(v17 + 28) & 2) == 0)
    goto LABEL_31;
LABEL_27:
  v19 = *(_QWORD *)(v17 + 16);
  if ((*(_BYTE *)(v17 + 28) & 4) == 0)
    goto LABEL_32;
LABEL_28:
  v20 = *(int *)(v17 + 24);
LABEL_33:
  v21 = v19 ^ v18 ^ v20;
LABEL_34:
  v22 = *((_QWORD *)this + 1);
  if (v22)
    v22 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v22);
  return v9 ^ v6 ^ v21 ^ v22 ^ v13 ^ v16;
}

_QWORD *sirinluinternalqueryrewrite::QRRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[9])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalqueryrewrite::QRRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalqueryrewrite::QRRequest::makeCdmRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternal::RewriteInteraction::~RewriteInteraction(sirinluinternal::RewriteInteraction *this)
{
  sirinluinternal::RewriteInteraction::~RewriteInteraction(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAE6E8;
  v8 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::RewriteInteraction::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  int64x2_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  uint64_t v60;
  int64x2_t v61;
  unint64_t v62;
  int64x2_t *v63;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)&this[2].i64[1];
  v9 = this + 2;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = v22;
          *(_QWORD *)v22 = &off_1E7BB1940;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 48) = 0u;
          *(_OWORD *)(v22 + 64) = 0u;
          *(_DWORD *)(v22 + 80) = 0;
          v25 = (uint64_t *)this[1].i64[1];
          v24 = this[2].u64[0];
          if ((unint64_t)v25 >= v24)
          {
            v46 = this[1].i64[0];
            v47 = ((uint64_t)v25 - v46) >> 3;
            if ((unint64_t)(v47 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v48 = v24 - v46;
            v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1))
              v49 = v47 + 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            v63 = v9;
            if (v50)
              v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v50);
            else
              v51 = 0;
            v52 = (uint64_t *)(v50 + 8 * v47);
            v53 = v50 + 8 * v51;
            v62 = v53;
            *v52 = v23;
            v26 = v52 + 1;
            v61.i64[1] = (uint64_t)(v52 + 1);
            v55 = (_QWORD *)this[1].i64[0];
            v54 = (_QWORD *)this[1].i64[1];
            if (v54 == v55)
            {
              v57 = vdupq_n_s64((unint64_t)v54);
            }
            else
            {
              do
              {
                v56 = *--v54;
                *v54 = 0;
                *--v52 = v56;
              }
              while (v54 != v55);
              v57 = this[1];
              v26 = (_QWORD *)v61.i64[1];
              v53 = v62;
            }
            this[1].i64[0] = (uint64_t)v52;
            this[1].i64[1] = (uint64_t)v26;
            v61 = v57;
            v58 = this[2].i64[0];
            this[2].i64[0] = v53;
            v62 = v58;
            v60 = v57.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v60);
          }
          else
          {
            *v25 = v22;
            v26 = v25 + 1;
          }
          this[1].i64[1] = (uint64_t)v26;
          v41 = *(v26 - 1);
          goto LABEL_63;
        case 2u:
          PB::PtrVector<sirinluinternal::Token>::emplace_back<>(v8);
          v41 = *(_QWORD *)(this[3].i64[0] - 8);
LABEL_63:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v41 + 16))(v41, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 3u:
          v35 = (_QWORD *)operator new();
          v35[1] = 0;
          v35[2] = 0;
          *v35 = 0;
          v36 = this->i64[1];
          this->i64[1] = (uint64_t)v35;
          if (v36)
            std::default_delete<std::string>::operator()[abi:ne180100](v36);
          PB::Reader::read();
          goto LABEL_70;
        case 4u:
          this[4].i8[12] |= 2u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) = v38;
            v40 = v39 != 0;
          }
          this[4].i8[8] = v40;
          goto LABEL_70;
        case 5u:
          this[4].i8[12] |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_69;
              v30 += 7;
              v27 = v33;
              v16 = v31++ > 8;
            }
            while (!v16);
LABEL_45:
            v32 = 0;
            goto LABEL_69;
          }
          v42 = 0;
          v43 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v44 = v27 + 1;
              v45 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v44;
              v32 |= (unint64_t)(v45 & 0x7F) << v42;
              if (v45 < 0)
              {
                v42 += 7;
                v27 = v44;
                v16 = v43++ > 8;
                if (v16)
                  goto LABEL_45;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
            }
            break;
          }
LABEL_69:
          this[4].i64[0] = v32;
          goto LABEL_70;
        default:
          goto LABEL_20;
      }
      goto LABEL_70;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_70:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1EFD064(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::RewriteInteraction::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  char v10;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v7 = *(const PB::Base ***)(v3 + 40);
  v8 = *(const PB::Base ***)(v3 + 48);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  v10 = *(_BYTE *)(v3 + 76);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2);
    v10 = *(_BYTE *)(v3 + 76);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluinternal::RewriteInteraction::formatText(sirinluinternal::RewriteInteraction *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "original_utterances");
  }
  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "siri_response");
  }
  v11 = *((_BYTE *)this + 76);
  if ((v11 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "start_timestamp");
    v11 = *((_BYTE *)this + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(a2, "tap2edit");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluinternal::Token>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB1F28;
  *(_DWORD *)(result + 92) = 0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1EFD37C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternal::RewriteInteraction::RewriteInteraction(sirinluinternal::RewriteInteraction *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE6E8;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE6E8;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

sirinluinternal::RewriteInteraction *sirinluinternal::RewriteInteraction::RewriteInteraction(sirinluinternal::RewriteInteraction *this, const sirinluinternal::RewriteInteraction *a2)
{
  sirinluinternal::Token ***v4;
  const sirinluexternal::UUID ***v5;
  const sirinluexternal::UUID ***i;
  const sirinluexternal::UUID **v7;
  sirinluinternal::RewriteUtterance *v8;
  unint64_t v9;
  sirinluinternal::RewriteUtterance **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  sirinluinternal::RewriteUtterance **v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  sirinluinternal::RewriteUtterance *v22;
  int64x2_t v23;
  unint64_t v24;
  const sirinluinternal::Token **v25;
  const sirinluinternal::Token **v26;
  std::string *v27;
  std::string *v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t v37;
  int64x2_t v38;
  unint64_t v39;
  char *v40;

  *(_QWORD *)this = &off_1E7BAE6E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v36 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = (sirinluinternal::Token ***)((char *)this + 40);
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  v5 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  for (i = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 3); v5 != i; ++v5)
  {
    v7 = *v5;
    v8 = (sirinluinternal::RewriteUtterance *)operator new();
    sirinluinternal::RewriteUtterance::RewriteUtterance(v8, v7);
    v10 = (sirinluinternal::RewriteUtterance **)*((_QWORD *)this + 3);
    v9 = *((_QWORD *)this + 4);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *((_QWORD *)this + 2);
      v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v9 - v12;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v40 = (char *)this + 32;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v16);
      else
        v17 = 0;
      v18 = (sirinluinternal::RewriteUtterance **)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      v39 = v19;
      *v18 = v8;
      v11 = v18 + 1;
      v38.i64[1] = (uint64_t)(v18 + 1);
      v21 = (_QWORD *)*((_QWORD *)this + 2);
      v20 = (_QWORD *)*((_QWORD *)this + 3);
      if (v20 == v21)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = (sirinluinternal::RewriteUtterance *)*--v20;
          *v20 = 0;
          *--v18 = v22;
        }
        while (v20 != v21);
        v23 = *((int64x2_t *)this + 1);
        v11 = (_QWORD *)v38.i64[1];
        v19 = v39;
      }
      *((_QWORD *)this + 2) = v18;
      *((_QWORD *)this + 3) = v11;
      v38 = v23;
      v24 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v19;
      v39 = v24;
      v37 = v23.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *v10 = v8;
      v11 = v10 + 1;
    }
    *((_QWORD *)this + 3) = v11;
  }
  v25 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 5);
  v26 = (const sirinluinternal::Token **)*((_QWORD *)a2 + 6);
  while (v25 != v26)
    PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>(v4, *v25++);
  if (*((_QWORD *)a2 + 1))
  {
    v27 = (std::string *)operator new();
    v28 = v27;
    v29 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v29, *((_QWORD *)v29 + 1));
    }
    else
    {
      v30 = *v29;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)v29 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v31 = *v36;
    *v36 = (uint64_t)v28;
    if (v31)
      std::default_delete<std::string>::operator()[abi:ne180100](v31);
  }
  v32 = *((_BYTE *)a2 + 76);
  if ((v32 & 2) != 0)
  {
    v33 = *((_BYTE *)a2 + 72);
    *((_BYTE *)this + 76) |= 2u;
    *((_BYTE *)this + 72) = v33;
    v32 = *((_BYTE *)a2 + 76);
  }
  if ((v32 & 1) != 0)
  {
    v34 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 76) |= 1u;
    *((_QWORD *)this + 8) = v34;
  }
  return this;
}

void sub_1C1EFD6D8(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t PB::PtrVector<sirinluinternal::Token>::emplace_back<sirinluinternal::Token const&>(sirinluinternal::Token ***a1, const sirinluinternal::Token *a2)
{
  sirinluinternal::Token *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternal::Token **v7;
  sirinluinternal::Token **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternal::Token **v14;
  unint64_t v15;
  sirinluinternal::Token **v16;
  sirinluinternal::Token **v17;
  sirinluinternal::Token *v18;
  int64x2_t v19;
  sirinluinternal::Token **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternal::Token *)operator new();
  result = (uint64_t)sirinluinternal::Token::Token(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternal::Token **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternal::Token **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternal::Token **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1EFD838(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::RewriteInteraction::operator=(uint64_t a1, const sirinluinternal::RewriteInteraction *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if ((const sirinluinternal::RewriteInteraction *)a1 != a2)
  {
    sirinluinternal::RewriteInteraction::RewriteInteraction((sirinluinternal::RewriteInteraction *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = v16;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    v15 = v4;
    v16 = v5;
    sirinluinternal::RewriteInteraction::~RewriteInteraction((sirinluinternal::RewriteInteraction *)&v11);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::RewriteInteraction *a2, sirinluinternal::RewriteInteraction *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v3 = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *(_QWORD *)(this + 56);
  v10 = *(_QWORD *)(this + 64);
  v11 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(this + 64) = v11;
  *((_QWORD *)a2 + 7) = v9;
  v12 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  v13 = *(_BYTE *)(this + 72);
  *(_BYTE *)(this + 72) = *((_BYTE *)a2 + 72);
  *((_QWORD *)a2 + 1) = v12;
  *((_BYTE *)a2 + 72) = v13;
  *((_QWORD *)a2 + 8) = v10;
  return this;
}

uint64_t sirinluinternal::RewriteInteraction::RewriteInteraction(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E7BAE6E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (_QWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  v5 = a1 + 16;
  v6 = *(_QWORD **)(a1 + 16);
  v7 = (_QWORD *)(a2 + 16);
  if (v6)
  {
    v8 = *(_QWORD **)(a1 + 24);
    v9 = *(void **)(a1 + 16);
    if (v8 != v6)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v6);
      v9 = *(void **)v5;
    }
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v9);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100](v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t sirinluinternal::RewriteInteraction::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    sirinluinternal::RewriteInteraction::RewriteInteraction((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v18;
    v18 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 64);
    v6 = v16;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v9;
    v15 = v4;
    v16 = v5;
    sirinluinternal::RewriteInteraction::~RewriteInteraction((sirinluinternal::RewriteInteraction *)&v11);
  }
  return a1;
}

BOOL sirinluinternal::RewriteInteraction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BOOL8 result;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v3 = *(uint64_t **)(a1 + 16);
  v2 = *(uint64_t **)(a1 + 24);
  v4 = *(uint64_t **)(a2 + 16);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 24) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    result = sirinluinternal::RewriteUtterance::operator==(*v3, *v4);
    if (!result)
      return result;
    ++v3;
    ++v4;
  }
  result = PB::PtrVector<sirinluinternal::Token>::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48));
  if (result)
  {
    v8 = *(unsigned __int8 **)(a1 + 8);
    v9 = *(unsigned __int8 ***)(a2 + 8);
    if (v8)
    {
      if (!v9)
        return 0;
      v10 = v8[23];
      if ((v10 & 0x80u) == 0)
        v11 = (unsigned __int8 *)v8[23];
      else
        v11 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
      v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = v9[1];
      if (v11 != v12)
        return 0;
      if (v13 >= 0)
        v14 = *(unsigned __int8 **)(a2 + 8);
      else
        v14 = *v9;
      if ((v10 & 0x80) == 0)
      {
        if (v8[23])
        {
          while (*v8 == *v14)
          {
            ++v8;
            ++v14;
            if (!--v10)
              goto LABEL_23;
          }
          return 0;
        }
LABEL_23:
        if ((*(_BYTE *)(a1 + 76) & 2) != 0)
        {
          if ((*(_BYTE *)(a2 + 76) & 2) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72))
            return 0;
        }
        else if ((*(_BYTE *)(a2 + 76) & 2) != 0)
        {
          return 0;
        }
        result = (*(_BYTE *)(a2 + 76) & 1) == 0;
        if ((*(_BYTE *)(a1 + 76) & 1) == 0)
          return result;
        return (*(_BYTE *)(a2 + 76) & 1) != 0 && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
      }
      if (!memcmp(*(const void **)v8, v14, *((_QWORD *)v8 + 1)))
        goto LABEL_23;
    }
    else if (!v9)
    {
      goto LABEL_23;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<sirinluinternal::Token>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternal::Token::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternal::RewriteInteraction::hash_value(sirinluinternal::RewriteInteraction *this)
{
  sirinluinternal::RewriteUtterance **v2;
  sirinluinternal::RewriteUtterance **v3;
  uint64_t v4;
  sirinluinternal::RewriteUtterance *v5;
  sirinluinternal::Token **v6;
  sirinluinternal::Token **v7;
  uint64_t v8;
  sirinluinternal::Token *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (sirinluinternal::RewriteUtterance **)*((_QWORD *)this + 2);
  v3 = (sirinluinternal::RewriteUtterance **)*((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *v2++;
      v4 ^= sirinluinternal::RewriteUtterance::hash_value(v5);
    }
    while (v2 != v3);
  }
  v6 = (sirinluinternal::Token **)*((_QWORD *)this + 5);
  v7 = (sirinluinternal::Token **)*((_QWORD *)this + 6);
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6++;
      v8 ^= sirinluinternal::Token::hash_value(v9);
    }
    while (v6 != v7);
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
    v10 = std::__string_hash<char>::operator()[abi:ne180100](v10);
  if ((*((_BYTE *)this + 76) & 2) != 0)
  {
    v11 = *((unsigned __int8 *)this + 72);
    if ((*((_BYTE *)this + 76) & 1) != 0)
      goto LABEL_15;
LABEL_17:
    v12 = 0;
    return v8 ^ v4 ^ v10 ^ v11 ^ v12;
  }
  v11 = 0;
  if ((*((_BYTE *)this + 76) & 1) == 0)
    goto LABEL_17;
LABEL_15:
  v12 = *((_QWORD *)this + 8);
  return v8 ^ v4 ^ v10 ^ v11 ^ v12;
}

void sirinluinternal::OverrideCollection::~OverrideCollection(sirinluinternal::OverrideCollection *this)
{
  sirinluinternal::OverrideCollection::~OverrideCollection(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E7BAE738;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 7);
    v5 = (void *)*((_QWORD *)this + 6);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v3;
    operator delete(v5);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 3);
    v10 = (void *)*((_QWORD *)this + 2);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v8;
    operator delete(v10);
  }
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100](v13);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::OverrideCollection::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  int64x2_t *v9;
  void (**v10)(sirinluinternal::ParseOverride *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void (**v31)(sirinluinternal::ParseOverride *__hidden);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int64x2_t v65;
  uint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  int64x2_t v77;
  unint64_t v78;
  int64x2_t *v79;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = this + 2;
  v9 = this + 4;
  v10 = &off_1E7BAEBD0;
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          this[5].i8[0] |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_83;
              v26 += 7;
              v23 = v29;
              v17 = v27++ > 8;
            }
            while (!v17);
LABEL_54:
            v28 = 0;
            goto LABEL_83;
          }
          v50 = 0;
          v51 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              v28 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v52 = v23 + 1;
              v53 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v52;
              v28 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v23 = v52;
                v17 = v51++ > 8;
                if (v17)
                  goto LABEL_54;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v28 = 0;
            }
            break;
          }
LABEL_83:
          this[2].i64[1] = v28;
          goto LABEL_84;
        case 2u:
          v43 = (_QWORD *)operator new();
          v43[1] = 0;
          v43[2] = 0;
          *v43 = 0;
          v38 = this->i64[1];
          this->i64[1] = (uint64_t)v43;
          if (v38)
            goto LABEL_38;
          goto LABEL_39;
        case 3u:
          v37 = (_QWORD *)operator new();
          v37[1] = 0;
          v37[2] = 0;
          *v37 = 0;
          v38 = this[4].i64[1];
          this[4].i64[1] = (uint64_t)v37;
          if (v38)
LABEL_38:
            std::default_delete<std::string>::operator()[abi:ne180100](v38);
LABEL_39:
          PB::Reader::read();
          goto LABEL_84;
        case 4u:
          v39 = operator new();
          v40 = v39;
          v31 = v10;
          *(_QWORD *)v39 = v10;
          *(_OWORD *)(v39 + 16) = 0u;
          *(_OWORD *)(v39 + 32) = 0u;
          *(_OWORD *)(v39 + 48) = 0u;
          *(_DWORD *)(v39 + 64) = 1;
          *(_BYTE *)(v39 + 68) = 1;
          *(_DWORD *)(v39 + 72) = 0;
          v42 = (uint64_t *)this[3].i64[1];
          v41 = this[4].u64[0];
          if ((unint64_t)v42 >= v41)
          {
            v54 = this[3].i64[0];
            v55 = ((uint64_t)v42 - v54) >> 3;
            if ((unint64_t)(v55 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v56 = v41 - v54;
            v57 = v56 >> 2;
            if (v56 >> 2 <= (unint64_t)(v55 + 1))
              v57 = v55 + 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            v79 = v9;
            if (v58)
              v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v58);
            else
              v59 = 0;
            v66 = (uint64_t *)(v58 + 8 * v55);
            v67 = v58 + 8 * v59;
            v78 = v67;
            *v66 = v40;
            v36 = v66 + 1;
            v77.i64[1] = (uint64_t)(v66 + 1);
            v69 = (_QWORD *)this[3].i64[0];
            v68 = (_QWORD *)this[3].i64[1];
            if (v68 == v69)
            {
              v71 = vdupq_n_s64((unint64_t)v68);
            }
            else
            {
              do
              {
                v70 = *--v68;
                *v68 = 0;
                *--v66 = v70;
              }
              while (v68 != v69);
              v71 = this[3];
              v36 = (_QWORD *)v77.i64[1];
              v67 = v78;
            }
            this[3].i64[0] = (uint64_t)v66;
            this[3].i64[1] = (uint64_t)v36;
            v77 = v71;
            v73 = this[4].i64[0];
            this[4].i64[0] = v67;
            v78 = v73;
            v76 = v71.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v76);
          }
          else
          {
            *v42 = v39;
            v36 = v42 + 1;
          }
          this[3].i64[1] = (uint64_t)v36;
          goto LABEL_77;
        case 5u:
          v31 = v10;
          v32 = operator new();
          v33 = v32;
          *(_QWORD *)v32 = &off_1E7BB0DF8;
          *(_OWORD *)(v32 + 16) = 0u;
          *(_OWORD *)(v32 + 32) = 0u;
          *(_OWORD *)(v32 + 48) = 0u;
          *(_DWORD *)(v32 + 64) = 0;
          *(_BYTE *)(v32 + 68) = 1;
          *(_DWORD *)(v32 + 72) = 0;
          v35 = (uint64_t *)this[1].i64[1];
          v34 = this[2].u64[0];
          if ((unint64_t)v35 >= v34)
          {
            v44 = this[1].i64[0];
            v45 = ((uint64_t)v35 - v44) >> 3;
            if ((unint64_t)(v45 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v46 = v34 - v44;
            v47 = v46 >> 2;
            if (v46 >> 2 <= (unint64_t)(v45 + 1))
              v47 = v45 + 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            v79 = v8;
            if (v48)
              v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v48);
            else
              v49 = 0;
            v60 = (uint64_t *)(v48 + 8 * v45);
            v61 = v48 + 8 * v49;
            v78 = v61;
            *v60 = v33;
            v36 = v60 + 1;
            v77.i64[1] = (uint64_t)(v60 + 1);
            v63 = (_QWORD *)this[1].i64[0];
            v62 = (_QWORD *)this[1].i64[1];
            if (v62 == v63)
            {
              v65 = vdupq_n_s64((unint64_t)v62);
            }
            else
            {
              do
              {
                v64 = *--v62;
                *v62 = 0;
                *--v60 = v64;
              }
              while (v62 != v63);
              v65 = this[1];
              v36 = (_QWORD *)v77.i64[1];
              v61 = v78;
            }
            this[1].i64[0] = (uint64_t)v60;
            this[1].i64[1] = (uint64_t)v36;
            v77 = v65;
            v72 = this[2].i64[0];
            this[2].i64[0] = v61;
            v78 = v72;
            v76 = v65.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v76);
          }
          else
          {
            *v35 = v32;
            v36 = v35 + 1;
          }
          this[1].i64[1] = (uint64_t)v36;
LABEL_77:
          v74 = *(v36 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v74 + 16))(v74, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v10 = v31;
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_84;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_84:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1EFE378(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::OverrideCollection::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 80) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  if (v3[1])
    this = PB::Writer::write();
  if (v3[9])
    this = PB::Writer::write();
  v4 = (const PB::Base **)v3[6];
  v5 = (const PB::Base **)v3[7];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  v8 = (const PB::Base **)v3[2];
  v7 = (const PB::Base **)v3[3];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  return this;
}

uint64_t sirinluinternal::OverrideCollection::formatText(sirinluinternal::OverrideCollection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "component_overrides");
  }
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "creation_timestamp_ms_since_unix_epoch");
  v8 = (uint64_t *)*((_QWORD *)this + 6);
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "parse_overrides");
  }
  if (*((_QWORD *)this + 9))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::OverrideCollection::OverrideCollection(sirinluinternal::OverrideCollection *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE738;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE738;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

sirinluinternal::OverrideCollection *sirinluinternal::OverrideCollection::OverrideCollection(sirinluinternal::OverrideCollection *this, const sirinluinternal::OverrideCollection *a2)
{
  uint64_t *v4;
  int64x2_t *v5;
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  const sirinluinternal::ParseOverride **v17;
  const sirinluinternal::ParseOverride **i;
  const sirinluinternal::ParseOverride *v19;
  sirinluinternal::ParseOverride *v20;
  unint64_t v21;
  sirinluinternal::ParseOverride **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  sirinluinternal::ParseOverride **v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  sirinluinternal::ParseOverride *v33;
  int64x2_t v34;
  unint64_t v35;
  const sirinluinternal::ComponentOverride **v36;
  const sirinluinternal::ComponentOverride **j;
  const sirinluinternal::ComponentOverride *v38;
  sirinluinternal::ComponentOverride *v39;
  unint64_t v40;
  sirinluinternal::ComponentOverride **v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  sirinluinternal::ComponentOverride **v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  sirinluinternal::ComponentOverride *v53;
  int64x2_t v54;
  unint64_t v55;
  uint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  char *v60;

  *(_QWORD *)this = &off_1E7BAE738;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *((_OWORD *)this + 3) = 0u;
  v5 = (int64x2_t *)((char *)this + 48);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  if ((*((_BYTE *)a2 + 80) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 5);
    *((_BYTE *)this + 80) = 1;
    *((_QWORD *)this + 5) = v6;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v7 = (std::string *)operator new();
    v8 = v7;
    v9 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v10;
    }
    v11 = *v4;
    *v4 = (uint64_t)v8;
    if (v11)
      std::default_delete<std::string>::operator()[abi:ne180100](v11);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = (__int128 *)*((_QWORD *)a2 + 9);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v16 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v13;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100](v16);
  }
  v17 = (const sirinluinternal::ParseOverride **)*((_QWORD *)a2 + 6);
  for (i = (const sirinluinternal::ParseOverride **)*((_QWORD *)a2 + 7); v17 != i; ++v17)
  {
    v19 = *v17;
    v20 = (sirinluinternal::ParseOverride *)operator new();
    sirinluinternal::ParseOverride::ParseOverride(v20, v19);
    v22 = (sirinluinternal::ParseOverride **)*((_QWORD *)this + 7);
    v21 = *((_QWORD *)this + 8);
    if ((unint64_t)v22 >= v21)
    {
      v24 = ((uint64_t)v22 - v5->i64[0]) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v21 - v5->i64[0];
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v60 = (char *)this + 64;
      if (v27)
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v27);
      else
        v28 = 0;
      v29 = (sirinluinternal::ParseOverride **)(v27 + 8 * v24);
      v30 = v27 + 8 * v28;
      v59 = v30;
      *v29 = v20;
      v23 = v29 + 1;
      v58.i64[1] = (uint64_t)(v29 + 1);
      v32 = (_QWORD *)*((_QWORD *)this + 6);
      v31 = (_QWORD *)*((_QWORD *)this + 7);
      if (v31 == v32)
      {
        v34 = vdupq_n_s64((unint64_t)v31);
      }
      else
      {
        do
        {
          v33 = (sirinluinternal::ParseOverride *)*--v31;
          *v31 = 0;
          *--v29 = v33;
        }
        while (v31 != v32);
        v34 = *v5;
        v23 = (_QWORD *)v58.i64[1];
        v30 = v59;
      }
      *((_QWORD *)this + 6) = v29;
      *((_QWORD *)this + 7) = v23;
      v58 = v34;
      v35 = *((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v30;
      v59 = v35;
      v57 = v34.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v57);
    }
    else
    {
      *v22 = v20;
      v23 = v22 + 1;
    }
    *((_QWORD *)this + 7) = v23;
  }
  v36 = (const sirinluinternal::ComponentOverride **)*((_QWORD *)a2 + 2);
  for (j = (const sirinluinternal::ComponentOverride **)*((_QWORD *)a2 + 3); v36 != j; ++v36)
  {
    v38 = *v36;
    v39 = (sirinluinternal::ComponentOverride *)operator new();
    sirinluinternal::ComponentOverride::ComponentOverride(v39, v38);
    v41 = (sirinluinternal::ComponentOverride **)*((_QWORD *)this + 3);
    v40 = *((_QWORD *)this + 4);
    if ((unint64_t)v41 >= v40)
    {
      v43 = *((_QWORD *)this + 2);
      v44 = ((uint64_t)v41 - v43) >> 3;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v45 = v40 - v43;
      v46 = v45 >> 2;
      if (v45 >> 2 <= (unint64_t)(v44 + 1))
        v46 = v44 + 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v60 = (char *)this + 32;
      if (v47)
        v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v47);
      else
        v48 = 0;
      v49 = (sirinluinternal::ComponentOverride **)(v47 + 8 * v44);
      v50 = v47 + 8 * v48;
      v59 = v50;
      *v49 = v39;
      v42 = v49 + 1;
      v58.i64[1] = (uint64_t)(v49 + 1);
      v52 = (_QWORD *)*((_QWORD *)this + 2);
      v51 = (_QWORD *)*((_QWORD *)this + 3);
      if (v51 == v52)
      {
        v54 = vdupq_n_s64((unint64_t)v51);
      }
      else
      {
        do
        {
          v53 = (sirinluinternal::ComponentOverride *)*--v51;
          *v51 = 0;
          *--v49 = v53;
        }
        while (v51 != v52);
        v54 = *((int64x2_t *)this + 1);
        v42 = (_QWORD *)v58.i64[1];
        v50 = v59;
      }
      *((_QWORD *)this + 2) = v49;
      *((_QWORD *)this + 3) = v42;
      v58 = v54;
      v55 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v50;
      v59 = v55;
      v57 = v54.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v57);
    }
    else
    {
      *v41 = v39;
      v42 = v41 + 1;
    }
    *((_QWORD *)this + 3) = v42;
  }
  return this;
}

void sub_1C1EFE9E0(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t sirinluinternal::OverrideCollection::operator=(uint64_t a1, const sirinluinternal::OverrideCollection *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if ((const sirinluinternal::OverrideCollection *)a1 != a2)
  {
    sirinluinternal::OverrideCollection::OverrideCollection((sirinluinternal::OverrideCollection *)v11, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 48);
    v5 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v6;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v15 = v4;
    v16 = v5;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v8;
    v13 = v9;
    sirinluinternal::OverrideCollection::~OverrideCollection((sirinluinternal::OverrideCollection *)v11);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::OverrideCollection *a2, sirinluinternal::OverrideCollection *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v5;
  v6 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v12 = *(_QWORD *)(this + 32);
  v11 = *(_QWORD *)(this + 40);
  v13 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(this + 40) = v13;
  *((_QWORD *)a2 + 4) = v12;
  *((_QWORD *)a2 + 5) = v11;
  return this;
}

uint64_t sirinluinternal::OverrideCollection::OverrideCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_1E7BAE738;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = a1 + 48;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = *(_QWORD **)(a1 + 48);
  if (v9)
  {
    v10 = *(_QWORD **)(a1 + 56);
    v11 = *(void **)(a1 + 48);
    if (v10 != v9)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      while (v10 != v9);
      v11 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v11);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v14 = *(_QWORD **)(a1 + 16);
  if (v14)
  {
    v15 = (void **)(a1 + 16);
    v16 = *(_QWORD **)(a1 + 24);
    v17 = *(void **)(a1 + 16);
    if (v16 != v14)
    {
      do
      {
        v19 = *--v16;
        v18 = v19;
        *v16 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      while (v16 != v14);
      v17 = *v15;
    }
    *(_QWORD *)(a1 + 24) = v14;
    operator delete(v17);
    *v15 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sirinluinternal::OverrideCollection::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if (a1 != a2)
  {
    sirinluinternal::OverrideCollection::OverrideCollection((uint64_t)v11, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 48);
    v5 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v6;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v15 = v4;
    v16 = v5;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v8;
    v13 = v9;
    sirinluinternal::OverrideCollection::~OverrideCollection((sirinluinternal::OverrideCollection *)v11);
  }
  return a1;
}

uint64_t sirinluinternal::OverrideCollection::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 1) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 1) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_23:
  v11 = *(unsigned __int8 **)(a1 + 72);
  v12 = *(unsigned __int8 ***)(a2 + 72);
  if (!v11)
  {
    if (!v12)
      goto LABEL_40;
    return 0;
  }
  if (!v12)
    return 0;
  v13 = v11[23];
  if ((v13 & 0x80u) == 0)
    v14 = (unsigned __int8 *)v11[23];
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
  v16 = (char)v15;
  if ((char)v15 < 0)
    v15 = v12[1];
  if (v14 != v15)
    return 0;
  if (v16 >= 0)
    v17 = *(unsigned __int8 **)(a2 + 72);
  else
    v17 = *v12;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
      return 0;
  }
  else if (v11[23])
  {
    while (*v11 == *v17)
    {
      ++v11;
      ++v17;
      if (!--v13)
        goto LABEL_40;
    }
    return 0;
  }
LABEL_40:
  v19 = *(uint64_t **)(a1 + 48);
  v18 = *(uint64_t **)(a1 + 56);
  v20 = *(uint64_t **)(a2 + 48);
  if ((char *)v18 - (char *)v19 != *(_QWORD *)(a2 + 56) - (_QWORD)v20)
    return 0;
  while (v19 != v18)
  {
    if (!sirinluinternal::ParseOverride::operator==(*v19, *v20))
      return 0;
    ++v19;
    ++v20;
    v18 = *(uint64_t **)(a1 + 56);
  }
  return PB::PtrVector<sirinluinternal::ComponentOverride>::operator==((uint64_t **)(a1 + 16), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t PB::PtrVector<sirinluinternal::ComponentOverride>::operator==(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  if ((char *)v3 - (char *)*a1 != a3 - (_QWORD)a2)
    return 0;
  if (v4 == v3)
    return 1;
  v5 = a2;
  do
  {
    result = sirinluinternal::ComponentOverride::operator==(*v4, *v5);
    if (!(_DWORD)result)
      break;
    ++v4;
    ++v5;
  }
  while (v4 != a1[1]);
  return result;
}

unint64_t sirinluinternal::OverrideCollection::hash_value(sirinluinternal::OverrideCollection *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  sirinluinternal::ParseOverride **v7;
  sirinluinternal::ParseOverride **v8;
  uint64_t v9;
  sirinluinternal::ParseOverride *v10;
  sirinluinternal::ComponentOverride **v11;
  sirinluinternal::ComponentOverride **v12;
  uint64_t v13;
  sirinluinternal::ComponentOverride *v14;

  if ((*((_BYTE *)this + 80) & 1) != 0)
    v2 = *((_QWORD *)this + 5);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  else
    v6 = 0;
  v7 = (sirinluinternal::ParseOverride **)*((_QWORD *)this + 6);
  v8 = (sirinluinternal::ParseOverride **)*((_QWORD *)this + 7);
  if (v7 == v8)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *v7++;
      v9 ^= sirinluinternal::ParseOverride::hash_value(v10);
    }
    while (v7 != v8);
  }
  v12 = (sirinluinternal::ComponentOverride **)*((_QWORD *)this + 2);
  v11 = (sirinluinternal::ComponentOverride **)*((_QWORD *)this + 3);
  if (v12 == v11)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v12++;
      v13 ^= sirinluinternal::ComponentOverride::hash_value(v14);
    }
    while (v12 != v11);
  }
  return v4 ^ v2 ^ v6 ^ v9 ^ v13;
}

BOOL SIRINLUEXTERNALNLU_ROUTERNLRouterServiceRequestReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContext *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 2;
        goto LABEL_30;
      case 2u:
        v19 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContext);
        objc_storeStrong(a1 + 7, v19);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContextReadFrom(v19, a2))
          goto LABEL_41;
        goto LABEL_36;
      case 3u:
        v19 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERRequestSummary);
        objc_msgSend(a1, "addConversationHistory:", v19);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLU_ROUTERRequestSummaryReadFrom(v19, a2))
          goto LABEL_41;
        goto LABEL_36;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 5;
        goto LABEL_30;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 6;
LABEL_30:
        v19 = (SIRINLUEXTERNALNLU_ROUTERNLRouterTurnContext *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_37;
      case 6u:
        v19 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterTurnProbingResult);
        objc_storeStrong(a1 + 3, v19);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALNLU_ROUTERNLRouterTurnProbingResultReadFrom((uint64_t)v19, a2))
        {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 7u:
        v19 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERQueryDecorationOutput);
        objc_storeStrong(a1 + 4, v19);
        if (PBReaderPlaceMark() && SIRINLUEXTERNALNLU_ROUTERQueryDecorationOutputReadFrom(v19, a2))
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

void sirinluinternalnlv4_parser::Tokenisation::~Tokenisation(sirinluinternalnlv4_parser::Tokenisation *this)
{
  sirinluinternalnlv4_parser::Tokenisation::~Tokenisation(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAE788;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalnlv4_parser::Tokenisation::readFrom(sirinluinternalnlv4_parser::Tokenisation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_21;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_19;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) != 3)
        break;
      v23 = operator new();
      *(_QWORD *)v23 = &off_1E7BB0140;
      *(_OWORD *)(v23 + 8) = 0u;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_QWORD *)(v23 + 40) = 0;
      v24 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v23;
      if (v24)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v23 = *((_QWORD *)this + 3);
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if ((_DWORD)v20 == 2)
    {
      v25 = (_QWORD *)operator new();
      v25[1] = 0;
      v25[2] = 0;
      *v25 = 0;
      v22 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v25;
      if (!v22)
      {
LABEL_34:
        PB::Reader::read();
        goto LABEL_35;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
LABEL_19:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_35;
      }
      v21 = (_QWORD *)operator new();
      v21[1] = 0;
      v21[2] = 0;
      *v21 = 0;
      v22 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v21;
      if (!v22)
        goto LABEL_34;
    }
    std::default_delete<std::string>::operator()[abi:ne180100](v22);
    goto LABEL_34;
  }
  return v4 == 0;
}

uint64_t sirinluinternalnlv4_parser::Tokenisation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 8))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 24);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluinternalnlv4_parser::Tokenisation::formatText(sirinluinternalnlv4_parser::Tokenisation *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "token_chain");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalnlv4_parser::Tokenisation::Tokenisation(_QWORD *this)
{
  *this = &off_1E7BAE788;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAE788;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalnlv4_parser::Tokenisation *sirinluinternalnlv4_parser::Tokenisation::Tokenisation(sirinluinternalnlv4_parser::Tokenisation *this, const sirinluinternalnlv4_parser::Tokenisation *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  sirinluinternal::TokenChain *v15;
  sirinluinternal::TokenChain *v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E7BAE788;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *v4;
    *v4 = (uint64_t)v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v15 = (sirinluinternal::TokenChain *)operator new();
    v16 = sirinluinternal::TokenChain::TokenChain(v15, *((const sirinluinternal::TokenChain **)a2 + 3));
    v17 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return this;
}

uint64_t sirinluinternalnlv4_parser::Tokenisation::operator=(uint64_t a1, const sirinluinternalnlv4_parser::Tokenisation *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluinternalnlv4_parser::Tokenisation *)a1 != a2)
  {
    sirinluinternalnlv4_parser::Tokenisation::Tokenisation((sirinluinternalnlv4_parser::Tokenisation *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    sirinluinternalnlv4_parser::Tokenisation::~Tokenisation((sirinluinternalnlv4_parser::Tokenisation *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalnlv4_parser::swap(_QWORD *this, sirinluinternalnlv4_parser::Tokenisation *a2, sirinluinternalnlv4_parser::Tokenisation *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *sirinluinternalnlv4_parser::Tokenisation::Tokenisation(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E7BAE788;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[2];
  a2[2] = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = a2[1];
  a2[1] = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = a2[3];
  a2[3] = 0;
  v10 = a1[3];
  a1[3] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sirinluinternalnlv4_parser::Tokenisation::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternalnlv4_parser::Tokenisation::Tokenisation(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    sirinluinternalnlv4_parser::Tokenisation::~Tokenisation((sirinluinternalnlv4_parser::Tokenisation *)&v6);
  }
  return a1;
}

BOOL sirinluinternalnlv4_parser::Tokenisation::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  v4 = (unsigned __int8 *)a1[2];
  v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[2];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  v12 = (unsigned __int8 *)a1[1];
  v13 = (unsigned __int8 **)a2[1];
  if (!v12)
  {
    if (!v13)
      goto LABEL_38;
    return 0;
  }
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a2[1];
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1)))
      goto LABEL_38;
    return 0;
  }
  if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14)
        goto LABEL_38;
    }
    return 0;
  }
LABEL_38:
  v19 = a1[3];
  v20 = a2[3];
  result = (v19 | v20) == 0;
  if (v19)
    v21 = v20 == 0;
  else
    v21 = 1;
  if (!v21)
    return sirinluinternal::TokenChain::operator==((_QWORD *)a1[3], v20);
  return result;
}

unint64_t sirinluinternalnlv4_parser::Tokenisation::hash_value(sirinluinternalnlv4_parser::Tokenisation *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v6 = sirinluinternal::TokenChain::hash_value((sirinluinternal::TokenChain *)v6);
  return v5 ^ v3 ^ v6;
}

_QWORD *sirinluinternalnlv4_parser::Tokenisation::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalcdm_planner::CDMTranscriptEvent::~CDMTranscriptEvent(void ***this)
{
  sirinluexternalcdm_planner::CDMTranscriptEvent::~CDMTranscriptEvent(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  *this = (void **)&off_1E7BAE7D8;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 3, 0);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 2, 0);
  v2 = (uint64_t)this[1];
  this[1] = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base((PB::Base *)this);
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::readFrom(sirinluexternalcdm_planner::CDMTranscriptEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  void ***v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void ***)((char *)this + 24);
    v9 = (void ***)((char *)this + 16);
    do
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          v16 = v18++ > 8;
          if (v16)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_26;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v24 = (_QWORD *)operator new();
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        v25 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v24;
        if (v25)
          std::default_delete<std::string>::operator()[abi:ne180100](v25);
        PB::Reader::read();
      }
      else
      {
        if ((_DWORD)v21 == 2)
        {
          v26 = operator new();
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(v26 + 8) = 0;
          v27 = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v26);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](&v27, 0);
        }
        else
        {
          if ((_DWORD)v21 != 1)
          {
LABEL_26:
            result = PB::Reader::skip(a2);
            if (!(_DWORD)result)
              return result;
            goto LABEL_33;
          }
          v22 = operator new();
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          v27 = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v9, (void **)v22);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](&v27, 0);
        }
        PB::Reader::read();
      }
LABEL_33:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 24))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::formatText(sirinluexternalcdm_planner::CDMTranscriptEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

void ***std::unique_ptr<PB::Data>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

_QWORD *sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent(_QWORD *this)
{
  *this = &off_1E7BAE7D8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAE7D8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluexternalcdm_planner::CDMTranscriptEvent *sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent(sirinluexternalcdm_planner::CDMTranscriptEvent *this, const sirinluexternalcdm_planner::CDMTranscriptEvent *a2)
{
  uint64_t *v4;
  void ***v5;
  void ***v6;
  void **v7;
  void **v8;
  std::string *v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  void **v15;

  *(_QWORD *)this = &off_1E7BAE7D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v5 = (void ***)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v6 = (void ***)((char *)this + 24);
  if (*((_QWORD *)a2 + 2))
  {
    v7 = (void **)operator new();
    PB::Data::Data();
    v15 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v7);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v15, 0);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v8 = (void **)operator new();
    PB::Data::Data();
    v15 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v6, v8);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v15, 0);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *v4;
    *v4 = (uint64_t)v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::operator=(uint64_t a1, const sirinluexternalcdm_planner::CDMTranscriptEvent *a2)
{
  uint64_t v3;
  __int128 v4;
  void **v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluexternalcdm_planner::CDMTranscriptEvent *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent((sirinluexternalcdm_planner::CDMTranscriptEvent *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternalcdm_planner::CDMTranscriptEvent::~CDMTranscriptEvent(&v6);
  }
  return a1;
}

_QWORD *sirinluexternalcdm_planner::swap(_QWORD *this, sirinluexternalcdm_planner::CDMTranscriptEvent *a2, sirinluexternalcdm_planner::CDMTranscriptEvent *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent(uint64_t a1, _QWORD *a2)
{
  void ***v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (void ***)(a1 + 24);
  *(_QWORD *)a1 = &off_1E7BAE7D8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (void **)a2[2];
  a2[2] = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 16), v5);
  v6 = (void **)a2[3];
  a2[3] = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v6);
  v7 = a2[1];
  a2[1] = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  void **v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternalcdm_planner::CDMTranscriptEvent::CDMTranscriptEvent((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluexternalcdm_planner::CDMTranscriptEvent::~CDMTranscriptEvent(&v6);
  }
  return a1;
}

uint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = a2[2];
  if (a1[2])
  {
    if (!v4 || (PB::Data::operator==() & 1) == 0 && a1[2] | a2[2])
      return 0;
  }
  else if (v4)
  {
    return 0;
  }
  v5 = a2[3];
  if (a1[3])
  {
    if (!v5 || (PB::Data::operator==() & 1) == 0 && a1[3] | a2[3])
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (unsigned __int8 *)a1[1];
  v7 = (unsigned __int8 **)a2[1];
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)a2[1];
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluexternalcdm_planner::CDMTranscriptEvent::hash_value(sirinluexternalcdm_planner::CDMTranscriptEvent *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (*((_QWORD *)this + 2))
    v2 = PBHashBytes();
  else
    v2 = 0;
  if (*((_QWORD *)this + 3))
    v3 = PBHashBytes();
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v3 ^ v2 ^ v4;
}

uint64_t SIRINLUINTERNALSSUSSUResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUserParse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUserParse);
        objc_msgSend(a1, "addHypotheses:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUserParseReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__prescribedTool;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__prescribedTool;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__prescribedTool;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__queryType;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__queryType;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata__queryType;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluinternalqueryrewrite::QRUtterance::~QRUtterance(sirinluinternalqueryrewrite::QRUtterance *this)
{
  sirinluinternalqueryrewrite::QRUtterance::~QRUtterance(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &off_1E7BAE868;
  v4 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v4 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::readFrom(sirinluinternalqueryrewrite::QRUtterance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 16);
  v9 = (uint64_t **)((char *)this + 56);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_QWORD *)operator new();
          *v22 = &off_1E7BB0CB8;
          v22[3] = 0;
          v23 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = (_QWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_32;
        case 2u:
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v25 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v24;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100](v25);
          PB::Reader::read();
          goto LABEL_39;
        case 3u:
          PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<>(v9);
          v26 = *((_QWORD *)this + 8);
          goto LABEL_31;
        case 4u:
          PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<>(v8);
          v26 = *((_QWORD *)this + 3);
LABEL_31:
          v22 = *(_QWORD **)(v26 - 8);
LABEL_32:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 5u:
          *((_BYTE *)this + 80) |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v27);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_39;
        default:
          goto LABEL_20;
      }
      goto LABEL_39;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_39:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 48))
    this = PB::Writer::write();
  v5 = *(const PB::Base ***)(v3 + 56);
  v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(const PB::Base ***)(v3 + 16);
  v9 = *(const PB::Base ***)(v3 + 24);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  if ((*(_BYTE *)(v3 + 80) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 40));
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::formatText(sirinluinternalqueryrewrite::QRUtterance *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "asr_id");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "asr_utterance_tokens");
  }
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 5));
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 8);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "utterance_tokens");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAFB80;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F02CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternalqueryrewrite::QRUtterance::QRUtterance(sirinluinternalqueryrewrite::QRUtterance *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE868;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE868;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

sirinluinternalqueryrewrite::QRUtterance *sirinluinternalqueryrewrite::QRUtterance::QRUtterance(sirinluinternalqueryrewrite::QRUtterance *this, const sirinluexternal::UUID **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  const sirinluexternal::UUID *v11;
  __int128 v12;
  uint64_t v13;
  const sirinluinternalqueryrewrite::QRToken **v14;
  const sirinluinternalqueryrewrite::QRToken **i;
  const sirinluinternalqueryrewrite::QRToken **v16;
  const sirinluinternalqueryrewrite::QRToken **j;
  const sirinluexternal::UUID *v18;

  *(_QWORD *)this = &off_1E7BAE868;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *((_OWORD *)this + 3) = 0u;
  v5 = (uint64_t *)((char *)this + 48);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  if (a2[1])
  {
    v6 = operator new();
    v7 = sirinluexternal::UUID::UUID(v6, a2[1]);
    v8 = *v4;
    *v4 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (a2[6])
  {
    v9 = (std::string *)operator new();
    v10 = v9;
    v11 = a2[6];
    if (*((char *)v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    v13 = *v5;
    *v5 = (uint64_t)v10;
    if (v13)
      std::default_delete<std::string>::operator()[abi:ne180100](v13);
  }
  v14 = (const sirinluinternalqueryrewrite::QRToken **)a2[7];
  for (i = (const sirinluinternalqueryrewrite::QRToken **)a2[8]; v14 != i; ++v14)
    PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<sirinluinternalqueryrewrite::QRToken const&>((sirinluinternalqueryrewrite::QRToken ***)this + 7, *v14);
  v16 = (const sirinluinternalqueryrewrite::QRToken **)a2[2];
  for (j = (const sirinluinternalqueryrewrite::QRToken **)a2[3]; v16 != j; ++v16)
    PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<sirinluinternalqueryrewrite::QRToken const&>((sirinluinternalqueryrewrite::QRToken ***)this + 2, *v16);
  if (((_BYTE)a2[10] & 1) != 0)
  {
    v18 = a2[5];
    *((_BYTE *)this + 80) |= 1u;
    *((_QWORD *)this + 5) = v18;
  }
  return this;
}

uint64_t PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::emplace_back<sirinluinternalqueryrewrite::QRToken const&>(sirinluinternalqueryrewrite::QRToken ***a1, const sirinluinternalqueryrewrite::QRToken *a2)
{
  sirinluinternalqueryrewrite::QRToken *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternalqueryrewrite::QRToken **v7;
  sirinluinternalqueryrewrite::QRToken **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternalqueryrewrite::QRToken **v14;
  unint64_t v15;
  sirinluinternalqueryrewrite::QRToken **v16;
  sirinluinternalqueryrewrite::QRToken **v17;
  sirinluinternalqueryrewrite::QRToken *v18;
  int64x2_t v19;
  sirinluinternalqueryrewrite::QRToken **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternalqueryrewrite::QRToken *)operator new();
  result = (uint64_t)sirinluinternalqueryrewrite::QRToken::QRToken(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternalqueryrewrite::QRToken **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternalqueryrewrite::QRToken **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternalqueryrewrite::QRToken **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F03054(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluinternalqueryrewrite::QRUtterance::QRUtterance((sirinluinternalqueryrewrite::QRUtterance *)v11, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 48);
    v5 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v7;
    v13 = v8;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v9;
    sirinluinternalqueryrewrite::QRUtterance::~QRUtterance((sirinluinternalqueryrewrite::QRUtterance *)v11);
  }
  return a1;
}

double sirinluinternalqueryrewrite::swap(sirinluinternalqueryrewrite *this, sirinluinternalqueryrewrite::QRUtterance *a2, sirinluinternalqueryrewrite::QRUtterance *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  result = *((double *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::QRUtterance(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E7BAE868;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternalqueryrewrite::QRUtterance::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v11[8];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRUtterance::QRUtterance((uint64_t)v11, a2);
    v3 = v16;
    v4 = *(_OWORD *)(a1 + 48);
    v5 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v3;
    v6 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v17;
    v17 = v6;
    v15 = v4;
    v16 = v5;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v12 = v7;
    v13 = v8;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v9;
    sirinluinternalqueryrewrite::QRUtterance::~QRUtterance((sirinluinternalqueryrewrite::QRUtterance *)v11);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRUtterance::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 48);
  v7 = *(unsigned __int8 ***)(a2 + 48);
  if (!v6)
  {
    if (!v7)
      goto LABEL_26;
    return 0;
  }
  if (!v7)
    return 0;
  v8 = v6[23];
  if ((v8 & 0x80u) == 0)
    v9 = (unsigned __int8 *)v6[23];
  else
    v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v11 = (char)v10;
  if ((char)v10 < 0)
    v10 = v7[1];
  if (v9 != v10)
    return 0;
  if (v11 >= 0)
    v12 = *(unsigned __int8 **)(a2 + 48);
  else
    v12 = *v7;
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
      goto LABEL_26;
    return 0;
  }
  if (v6[23])
  {
    while (*v6 == *v12)
    {
      ++v6;
      ++v12;
      if (!--v8)
        goto LABEL_26;
    }
    return 0;
  }
LABEL_26:
  result = PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::operator==(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(uint64_t **)(a2 + 56), *(_QWORD *)(a2 + 64));
  if (result)
  {
    result = PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::operator==(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
    if (result)
    {
      result = (*(_BYTE *)(a2 + 80) & 1) == 0;
      if ((*(_BYTE *)(a1 + 80) & 1) != 0)
        return (*(_BYTE *)(a2 + 80) & 1) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
    }
  }
  return result;
}

BOOL PB::PtrVector<sirinluinternalqueryrewrite::QRToken>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternalqueryrewrite::QRToken::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalqueryrewrite::QRUtterance::hash_value(sirinluinternalqueryrewrite::QRUtterance *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  sirinluinternalqueryrewrite::QRToken **v9;
  sirinluinternalqueryrewrite::QRToken **v10;
  uint64_t v11;
  sirinluinternalqueryrewrite::QRToken *v12;
  sirinluinternalqueryrewrite::QRToken **v13;
  sirinluinternalqueryrewrite::QRToken **v14;
  uint64_t v15;
  sirinluinternalqueryrewrite::QRToken *v16;
  double v17;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 6);
  if (v7)
    v8 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  else
    v8 = 0;
  v9 = (sirinluinternalqueryrewrite::QRToken **)*((_QWORD *)this + 7);
  v10 = (sirinluinternalqueryrewrite::QRToken **)*((_QWORD *)this + 8);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 ^= sirinluinternalqueryrewrite::QRToken::hash_value(v12);
    }
    while (v9 != v10);
  }
  v13 = (sirinluinternalqueryrewrite::QRToken **)*((_QWORD *)this + 2);
  v14 = (sirinluinternalqueryrewrite::QRToken **)*((_QWORD *)this + 3);
  if (v13 == v14)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *v13++;
      v15 ^= sirinluinternalqueryrewrite::QRToken::hash_value(v16);
    }
    while (v13 != v14);
  }
  if ((*((_BYTE *)this + 80) & 1) != 0)
  {
    v17 = *((double *)this + 5);
    if (v17 == 0.0)
      v17 = 0.0;
  }
  else
  {
    v17 = 0.0;
  }
  return v8 ^ v6 ^ *(_QWORD *)&v17 ^ v11 ^ v15;
}

_QWORD *sirinluinternalqueryrewrite::QRUtterance::makeAsrId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis(sirinluinternalqueryrewrite::QRHypothesis *this)
{
  sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAE8B8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::readFrom(sirinluinternalqueryrewrite::QRHypothesis *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_25:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v21 = (_QWORD *)operator new();
        *v21 = &off_1E7BB0CB8;
        v21[3] = 0;
        v22 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_20:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 2u:
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v24 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v23;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100](v24);
        PB::Reader::read();
        goto LABEL_20;
      case 3u:
        *((_BYTE *)this + 36) |= 1u;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 4u:
        *((_BYTE *)this + 36) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v27 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0)
              goto LABEL_56;
            v29 += 7;
            v26 = v32;
            v14 = v30++ > 8;
          }
          while (!v14);
LABEL_51:
          LODWORD(v31) = 0;
          goto LABEL_56;
        }
        v34 = 0;
        v35 = 0;
        v31 = 0;
        if (v27 <= v26)
          v27 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v27 == v26)
          {
            LODWORD(v31) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v36 = v26 + 1;
            v37 = *(_BYTE *)(v28 + v26);
            *((_QWORD *)a2 + 1) = v36;
            v31 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              v26 = v36;
              v14 = v35++ > 8;
              if (v14)
                goto LABEL_51;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v31) = 0;
          }
          break;
        }
LABEL_56:
        *((_DWORD *)this + 8) = v31;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_25;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_20;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 24))
    this = PB::Writer::write();
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16));
    v5 = *(_BYTE *)(v3 + 36);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::formatText(sirinluinternalqueryrewrite::QRHypothesis *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "asr_id");
  v6 = *((_BYTE *)this + 36);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 2));
    v6 = *((_BYTE *)this + 36);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "rewrite_type");
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(_QWORD *this)
{
  *this = &off_1E7BAE8B8;
  this[1] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

{
  *this = &off_1E7BAE8B8;
  this[1] = 0;
  this[3] = 0;
  this[4] = 0;
  return this;
}

sirinluinternalqueryrewrite::QRHypothesis *sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(sirinluinternalqueryrewrite::QRHypothesis *this, const sirinluexternal::UUID **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluexternal::UUID *v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  const sirinluexternal::UUID *v14;
  int v15;

  *(_QWORD *)this = &off_1E7BAE8B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (uint64_t *)((char *)this + 24);
  *((_QWORD *)this + 4) = 0;
  if (a2[1])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[1]);
    v7 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[3])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[3];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *v4;
    *v4 = (uint64_t)v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  v13 = *((_BYTE *)a2 + 36);
  if ((v13 & 1) != 0)
  {
    v14 = a2[2];
    *((_BYTE *)this + 36) |= 1u;
    *((_QWORD *)this + 2) = v14;
    v13 = *((_BYTE *)a2 + 36);
  }
  if ((v13 & 2) != 0)
  {
    v15 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) |= 2u;
    *((_DWORD *)this + 8) = v15;
  }
  return this;
}

const sirinluexternal::UUID **sirinluinternalqueryrewrite::QRHypothesis::operator=(const sirinluexternal::UUID **a1, const sirinluexternal::UUID **a2)
{
  const sirinluexternal::UUID *v3;
  const sirinluexternal::UUID *v4;
  const sirinluexternal::UUID *v5;
  const sirinluexternal::UUID *v6;
  char v8[8];
  const sirinluexternal::UUID *v9;
  const sirinluexternal::UUID *v10;
  const sirinluexternal::UUID *v11;
  const sirinluexternal::UUID *v12;

  if (a1 != a2)
  {
    sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis((sirinluinternalqueryrewrite::QRHypothesis *)v8, a2);
    v3 = a1[1];
    a1[1] = v9;
    v9 = v3;
    v4 = a1[3];
    a1[3] = v11;
    v11 = v4;
    v5 = a1[2];
    a1[2] = v10;
    v10 = v5;
    v6 = a1[4];
    a1[4] = v12;
    v12 = v6;
    sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis((sirinluinternalqueryrewrite::QRHypothesis *)v8);
  }
  return a1;
}

double sirinluinternalqueryrewrite::swap(sirinluinternalqueryrewrite *this, sirinluinternalqueryrewrite::QRHypothesis *a2, sirinluinternalqueryrewrite::QRHypothesis *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  return result;
}

uint64_t sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E7BAE8B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

_QWORD *sirinluinternalqueryrewrite::QRHypothesis::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != (_QWORD *)a2)
  {
    sirinluinternalqueryrewrite::QRHypothesis::QRHypothesis((uint64_t)v8, a2);
    v3 = a1[1];
    a1[1] = v9;
    v9 = v3;
    v4 = a1[3];
    a1[3] = v11;
    v11 = v4;
    v5 = a1[2];
    a1[2] = v10;
    v10 = v5;
    v6 = a1[4];
    a1[4] = v12;
    v12 = v6;
    sirinluinternalqueryrewrite::QRHypothesis::~QRHypothesis((sirinluinternalqueryrewrite::QRHypothesis *)v8);
  }
  return a1;
}

BOOL sirinluinternalqueryrewrite::QRHypothesis::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 24);
  v7 = *(unsigned __int8 ***)(a2 + 24);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 24);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 36) & 2) == 0;
  if ((*(_BYTE *)(a1 + 36) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

unint64_t sirinluinternalqueryrewrite::QRHypothesis::hash_value(sirinluinternalqueryrewrite::QRHypothesis *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v7 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v8 = *((double *)this + 2);
    if (v8 == 0.0)
      v8 = 0.0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_15;
LABEL_19:
    v9 = 0;
    return v7 ^ v6 ^ *(_QWORD *)&v8 ^ v9;
  }
  v8 = 0.0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_19;
LABEL_15:
  v9 = *((int *)this + 8);
  return v7 ^ v6 ^ *(_QWORD *)&v8 ^ v9;
}

_QWORD *sirinluinternalqueryrewrite::QRHypothesis::makeAsrId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALCCQROverrideTemplateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALRewriteMessage *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALRewriteMessage);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRewriteMessageReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F04830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F049B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F04AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F04BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F04D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F04E58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F04F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F050D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F05240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F053C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F05484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F05514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F056C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F057D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAE908;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::readFrom(sirinluexternalnlu_router::NLRouterRewriteUtterance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_QWORD *)operator new();
          *v20 = &off_1E7BB0CB8;
          v20[3] = 0;
          v21 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = (_QWORD *)*((_QWORD *)this + 3);
          }
          goto LABEL_37;
        case 2u:
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v23 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v22;
          if (v23)
            std::default_delete<std::string>::operator()[abi:ne180100](v23);
          PB::Reader::read();
          goto LABEL_51;
        case 3u:
          *((_BYTE *)this + 36) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_50;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v29) = 0;
            goto LABEL_50;
          }
          v33 = 0;
          v34 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v35 = v24 + 1;
              v36 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v35;
              v29 |= (unint64_t)(v36 & 0x7F) << v33;
              if (v36 < 0)
              {
                v33 += 7;
                v24 = v35;
                v14 = v34++ > 8;
                if (v14)
                  goto LABEL_46;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_50:
          *((_DWORD *)this + 8) = v29;
          goto LABEL_51;
        case 4u:
          v20 = (_QWORD *)operator new();
          *v20 = &off_1E7BB0FA0;
          v20[1] = 0;
          v32 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v20;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v20 = (_QWORD *)*((_QWORD *)this + 1);
          }
LABEL_37:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_51;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_51:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::formatText(sirinluexternalnlu_router::NLRouterRewriteUtterance *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction_outcome");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "routing_decision");
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "utterance_id");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE908;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE908;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluexternalnlu_router::NLRouterRewriteUtterance *sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(sirinluexternalnlu_router::NLRouterRewriteUtterance *this, const sirinluexternal::UUID **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluexternal::UUID *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const sirinluexternal::UUID *v15;
  int v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E7BAE908;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2[3])
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, a2[3]);
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[2];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v13 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 36) |= 1u;
    *((_DWORD *)this + 8) = v13;
  }
  if (a2[1])
  {
    v14 = operator new();
    v15 = a2[1];
    *(_QWORD *)v14 = &off_1E7BB0FA0;
    *(_QWORD *)(v14 + 8) = 0;
    if ((*((_BYTE *)v15 + 12) & 1) != 0)
    {
      v16 = *((_DWORD *)v15 + 2);
      *(_BYTE *)(v14 + 12) = 1;
      *(_DWORD *)(v14 + 8) = v16;
    }
    v17 = *v4;
    *v4 = v14;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::operator=(uint64_t a1, const sirinluexternal::UUID **a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const sirinluexternal::UUID **)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance((sirinluexternalnlu_router::NLRouterRewriteUtterance *)v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance((sirinluexternalnlu_router::NLRouterRewriteUtterance *)v7);
  }
  return a1;
}

uint64_t sirinluexternalnlu_router::swap(uint64_t this, sirinluexternalnlu_router::NLRouterRewriteUtterance *a2, sirinluexternalnlu_router::NLRouterRewriteUtterance *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E7BAE908;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:ne180100](v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance((uint64_t)v7, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluexternalnlu_router::NLRouterRewriteUtterance::~NLRouterRewriteUtterance((sirinluexternalnlu_router::NLRouterRewriteUtterance *)v7);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLRouterRewriteUtterance::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 16);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a2 + 8);
  result = (v13 | v14) == 0;
  if (v13 && v14)
  {
    if ((*(_BYTE *)(v13 + 12) & 1) != 0)
      return (*(_BYTE *)(v14 + 12) & 1) != 0 && *(_DWORD *)(v13 + 8) == *(_DWORD *)(v14 + 8);
    return (*(_BYTE *)(v14 + 12) & 1) == 0;
  }
  return result;
}

unint64_t sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(sirinluexternalnlu_router::NLRouterRewriteUtterance *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 2);
  if (v7)
    v7 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    v8 = *((int *)this + 8);
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 12) & 1) != 0)
      v9 = *(int *)(v9 + 8);
    else
      v9 = 0;
  }
  return v7 ^ v6 ^ v8 ^ v9;
}

_QWORD *sirinluexternalnlu_router::NLRouterRewriteUtterance::makeUtteranceId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[3])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternalnlu_router::NLRouterRewriteUtterance::makeCorrectionOutcome(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0FA0;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::SystemDialogAct::~SystemDialogAct(sirinluexternal::SystemDialogAct *this)
{
  sirinluexternal::SystemDialogAct::~SystemDialogAct(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E7BAE958;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemDialogAct::readFrom(sirinluexternal::SystemDialogAct *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BB0CB8;
        v20[3] = 0;
        v21 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = (_QWORD *)*((_QWORD *)this + 2);
        }
        break;
      case 2u:
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = &off_1E7BB0250;
        v23 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = (_QWORD *)*((_QWORD *)this + 5);
        }
        break;
      case 3u:
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BAEFF8;
        v20[1] = 0;
        v24 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = (_QWORD *)*((_QWORD *)this + 4);
        }
        break;
      case 4u:
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BAE648;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v25 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v20 = (_QWORD *)*((_QWORD *)this + 1);
        }
        break;
      case 5u:
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BB22A8;
        *(_OWORD *)(v20 + 1) = 0u;
        *(_OWORD *)(v20 + 3) = 0u;
        v26 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v20 = (_QWORD *)*((_QWORD *)this + 3);
        }
        break;
      case 6u:
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = &off_1E7BB18A0;
        v27 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v20;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v20 = (_QWORD *)*((_QWORD *)this + 8);
        }
        break;
      case 7u:
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BAF7D0;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v28 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v20;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v20 = (_QWORD *)*((_QWORD *)this + 7);
        }
        break;
      default:
        if ((v11 >> 3) != 101)
          goto LABEL_19;
        v20 = (_QWORD *)operator new();
        *v20 = &off_1E7BB0538;
        v20[1] = 0;
        v22 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = (_QWORD *)*((_QWORD *)this + 6);
        }
        break;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_43:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_43;
  return result;
}

uint64_t sirinluexternal::SystemDialogAct::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[5];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[4];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[1];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[3];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  v9 = (const PB::Base *)v3[8];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = (const PB::Base *)v3[7];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[6];
  if (v11)
    return PB::Writer::writeSubmessage(a2, v11);
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::formatText(sirinluexternal::SystemDialogAct *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "gave_options");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "id_a");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "informed");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "offered");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "prompted");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "rendered_text");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "reported_failure");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "reported_success");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::SystemDialogAct::SystemDialogAct(sirinluexternal::SystemDialogAct *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE958;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE958;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

sirinluexternal::SystemDialogAct *sirinluexternal::SystemDialogAct::SystemDialogAct(sirinluexternal::SystemDialogAct *this, const sirinluexternal::SystemDialogAct *a2)
{
  sirinluexternal::SystemGaveOptions **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluexternal::SystemPrompted *v8;
  sirinluexternal::SystemPrompted *v9;
  uint64_t v10;
  sirinluexternal::SystemOffered *v11;
  sirinluexternal::SystemOffered *v12;
  uint64_t v13;
  sirinluexternal::SystemGaveOptions *v14;
  sirinluexternal::SystemGaveOptions *v15;
  sirinluexternal::SystemGaveOptions *v16;
  sirinluexternal::SystemInformed *v17;
  sirinluexternal::SystemInformed *v18;
  uint64_t v19;
  sirinluexternal::SystemReportedSuccess *v20;
  sirinluexternal::SystemReportedSuccess *v21;
  uint64_t v22;
  sirinluexternal::SystemReportedFailure *v23;
  sirinluexternal::SystemReportedFailure *v24;
  uint64_t v25;
  siricommon::StringValue *v26;
  siricommon::StringValue *v27;
  uint64_t v28;

  *(_QWORD *)this = &off_1E7BAE958;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluexternal::SystemGaveOptions **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 2));
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v8 = (sirinluexternal::SystemPrompted *)operator new();
    v9 = sirinluexternal::SystemPrompted::SystemPrompted(v8, *((const sirinluexternal::SystemPrompted **)a2 + 5));
    v10 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v11 = (sirinluexternal::SystemOffered *)operator new();
    v12 = sirinluexternal::SystemOffered::SystemOffered(v11, *((const sirinluexternal::UserDialogAct ***)a2 + 4));
    v13 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v14 = (sirinluexternal::SystemGaveOptions *)operator new();
    v15 = sirinluexternal::SystemGaveOptions::SystemGaveOptions(v14, *((const sirinluexternal::SystemGaveOptions **)a2 + 1));
    v16 = *v4;
    *v4 = v15;
    if (v16)
      (*(void (**)(sirinluexternal::SystemGaveOptions *))(*(_QWORD *)v16 + 8))(v16);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v17 = (sirinluexternal::SystemInformed *)operator new();
    v18 = sirinluexternal::SystemInformed::SystemInformed(v17, *((const sirinluexternal::UUID ***)a2 + 3));
    v19 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v20 = (sirinluexternal::SystemReportedSuccess *)operator new();
    v21 = sirinluexternal::SystemReportedSuccess::SystemReportedSuccess(v20, *((const sirinluexternal::SystemReportedSuccess **)a2 + 8));
    v22 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*((_QWORD *)a2 + 7))
  {
    v23 = (sirinluexternal::SystemReportedFailure *)operator new();
    v24 = sirinluexternal::SystemReportedFailure::SystemReportedFailure(v23, *((const sirinluexternal::SystemReportedFailure **)a2 + 7));
    v25 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v26 = (siricommon::StringValue *)operator new();
    v27 = siricommon::StringValue::StringValue(v26, *((const siricommon::StringValue **)a2 + 6));
    v28 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::operator=(uint64_t a1, const sirinluexternal::SystemDialogAct *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if ((const sirinluexternal::SystemDialogAct *)a1 != a2)
  {
    sirinluexternal::SystemDialogAct::SystemDialogAct((sirinluexternal::SystemDialogAct *)v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v3;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v12;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    v12 = v5;
    sirinluexternal::SystemDialogAct::~SystemDialogAct((sirinluexternal::SystemDialogAct *)v8);
  }
  return a1;
}

_QWORD *sirinluexternal::swap(_QWORD *this, sirinluexternal::SystemDialogAct *a2, sirinluexternal::SystemDialogAct *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return this;
}

uint64_t sirinluexternal::SystemDialogAct::SystemDialogAct(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_1E7BAE958;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a2[2];
  a2[2] = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[5];
  a2[5] = 0;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[4];
  a2[4] = 0;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a2[1];
  a2[1] = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = a2[3];
  a2[3] = 0;
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a2[8];
  a2[8] = 0;
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = a2[7];
  a2[7] = 0;
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = a2[6];
  a2[6] = 0;
  v20 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return a1;
}

uint64_t sirinluexternal::SystemDialogAct::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if ((_QWORD *)a1 != a2)
  {
    sirinluexternal::SystemDialogAct::SystemDialogAct((uint64_t)v8, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v3;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v12;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v11;
    v11 = v6;
    v12 = v5;
    sirinluexternal::SystemDialogAct::~SystemDialogAct((sirinluexternal::SystemDialogAct *)v8);
  }
  return a1;
}

uint64_t sirinluexternal::SystemDialogAct::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = a1[2];
  v5 = a2[2];
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[5];
  v7 = a2[5];
  if (v6)
  {
    if (!v7 || (sirinluexternal::SystemPrompted::operator==(v6, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[4];
  v9 = a2[4];
  if (v8)
  {
    if (!v9 || !sirinluexternal::SystemOffered::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = a1[1];
  v11 = a2[1];
  if (v10)
  {
    if (!v11
      || !PB::PtrVector<sirinluexternal::UserDialogAct>::operator==((uint64_t *)(v10 + 8), *(_QWORD ***)(v11 + 8), *(_QWORD *)(v11 + 16)))
    {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  v12 = (_QWORD *)a1[3];
  v13 = a2[3];
  if (v12)
  {
    if (!v13 || (sirinluexternal::SystemInformed::operator==(v12, v13) & 1) == 0)
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = a1[8];
  v15 = a2[8];
  if (v14)
  {
    if (!v15 || (sirinluexternal::SystemReportedSuccess::operator==(v14, v15) & 1) == 0)
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = (_QWORD *)a1[7];
  v17 = (_QWORD *)a2[7];
  if (!v16)
  {
    if (!v17)
      goto LABEL_34;
    return 0;
  }
  if (!v17 || (sirinluexternal::SystemReportedFailure::operator==(v16, v17) & 1) == 0)
    return 0;
LABEL_34:
  v18 = a1[6];
  v19 = a2[6];
  result = (v18 | v19) == 0;
  if (v18)
  {
    if (v19)
      return siricommon::StringValue::operator==(a1[6], v19);
  }
  return result;
}

unint64_t sirinluexternal::SystemDialogAct::hash_value(sirinluexternal::SystemDialogAct *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluexternal::SystemPrompted *v7;
  unint64_t v8;
  uint64_t v9;
  sirinluexternal::UserDialogAct *v10;
  unint64_t v11;
  uint64_t v12;
  sirinluexternal::UserDialogAct **v13;
  sirinluexternal::UserDialogAct **v14;
  uint64_t v15;
  sirinluexternal::UserDialogAct *v16;
  sirinluexternal::SystemInformed *v17;
  uint64_t v18;
  sirinluexternal::SystemReportedSuccess *v19;
  unint64_t v20;
  sirinluexternal::SystemReportedFailure *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluexternal::SystemPrompted *)*((_QWORD *)this + 5);
  if (v7)
    v8 = sirinluexternal::SystemPrompted::hash_value(v7);
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 4);
  if (v9 && (v10 = *(sirinluexternal::UserDialogAct **)(v9 + 8)) != 0)
    v11 = sirinluexternal::UserDialogAct::hash_value(v10);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 1);
  if (!v12
    || (v13 = *(sirinluexternal::UserDialogAct ***)(v12 + 8),
        v14 = *(sirinluexternal::UserDialogAct ***)(v12 + 16),
        v13 == v14))
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = *v13++;
      v15 ^= sirinluexternal::UserDialogAct::hash_value(v16);
    }
    while (v13 != v14);
  }
  v17 = (sirinluexternal::SystemInformed *)*((_QWORD *)this + 3);
  if (v17)
    v18 = sirinluexternal::SystemInformed::hash_value(v17);
  else
    v18 = 0;
  v19 = (sirinluexternal::SystemReportedSuccess *)*((_QWORD *)this + 8);
  if (v19)
    v20 = sirinluexternal::SystemReportedSuccess::hash_value(v19);
  else
    v20 = 0;
  v21 = (sirinluexternal::SystemReportedFailure *)*((_QWORD *)this + 7);
  if (v21)
    v22 = sirinluexternal::SystemReportedFailure::hash_value(v21);
  else
    v22 = 0;
  v23 = *((_QWORD *)this + 6);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
      v24 = std::__string_hash<char>::operator()[abi:ne180100](v24);
  }
  else
  {
    v24 = 0;
  }
  return v8 ^ v6 ^ v18 ^ v20 ^ v22 ^ v24 ^ v11 ^ v15;
}

_QWORD *sirinluexternal::SystemDialogAct::makeIdA(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makePrompted(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB0250;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeOffered(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAEFF8;
    v2[1] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeGaveOptions(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAE648;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeInformed(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB22A8;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeReportedSuccess(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E7BB18A0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeReportedFailure(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF7D0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::SystemDialogAct::makeRenderedText(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[6])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALSPANMATCHSpanMatchRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALTokenChain *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2))
          goto LABEL_30;
        goto LABEL_35;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALNLContext);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALNLContextReadFrom((id *)&v17->super.super.isa, a2))
          goto LABEL_35;
        goto LABEL_30;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v17 = *(SIRINLUINTERNALTokenChain **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v18;
        goto LABEL_31;
      case 4u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_35:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

BOOL SIRINLUEXTERNALRRBoundingBoxReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__xCoordinate;
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__yCoordinate;
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__width;
          goto LABEL_41;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___SIRINLUEXTERNALRRBoundingBox__height;
LABEL_41:
          *(_QWORD *)(a1 + *v27) = v20;
          goto LABEL_42;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALCONTEXTUPDATEContextUpdateResponseReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundle *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundle);
        objc_msgSend(a1, "addReformedTurnInputBundles:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALCONTEXTUPDATEReformedTurnInputBundleReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
    objc_storeStrong(a1 + 2, v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void siricommon::UInt64Value::~UInt64Value(siricommon::UInt64Value *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::UInt64Value::readFrom(siricommon::UInt64Value *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_29;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v3)
        {
          v26 = 0;
          v27 = 0;
          v23 = 0;
          if (v3 <= v19)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v19)
            {
              v23 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v28 = v19 + 1;
            v29 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v28;
            v23 |= (unint64_t)(v29 & 0x7F) << v26;
            if ((v29 & 0x80) == 0)
              break;
            v26 += 7;
            v19 = v28;
            v14 = v27++ > 8;
            if (v14)
            {
              v23 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v23 = 0;
LABEL_42:
          v2 = v28;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v2 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v2;
            v14 = v22++ > 8;
            if (v14)
            {
              v23 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_QWORD *)this + 1) = v23;
      }
      else
      {
LABEL_29:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_29;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::UInt64Value::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 16) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t siricommon::UInt64Value::formatText(siricommon::UInt64Value *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 16) & 1) != 0)
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAE9A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAE9A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t this, const siricommon::UInt64Value *a2)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BAE9A8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BAE9A8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 16) = 1;
    *(_QWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::UInt64Value::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v7[0] = &off_1E7BAE9A8;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8[0] = &off_1E7BAE9A8;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::UInt64Value *a2, siricommon::UInt64Value *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

uint64_t siricommon::UInt64Value::UInt64Value(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BAE9A8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BAE9A8;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

BOOL siricommon::UInt64Value::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 16);
  result = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t siricommon::UInt64Value::hash_value(siricommon::UInt64Value *this)
{
  if ((*((_BYTE *)this + 16) & 1) != 0)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

void sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this)
{
  sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E7BAE9F8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalitfm::ITFMParserRequest::readFrom(sirinluinternalitfm::ITFMParserRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 16);
  while (1)
  {
    v9 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_22:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB0CB8;
        *(_QWORD *)(v21 + 24) = 0;
        v22 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *((_QWORD *)this + 7);
        }
        break;
      case 2u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE788;
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        v23 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v21;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v21 = *((_QWORD *)this + 8);
        }
        break;
      case 3u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB1DD0;
        *(_DWORD *)(v21 + 64) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v21;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v21 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<>(v8);
        v21 = *(_QWORD *)(*((_QWORD *)this + 3) - 8);
        break;
      case 5u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BB16E8;
        *(_DWORD *)(v21 + 148) = 0;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_OWORD *)(v21 + 104) = 0u;
        *(_QWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 136) = 0;
        v25 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v21;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v21 = *((_QWORD *)this + 9);
        }
        break;
      case 6u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAF268;
        *(_QWORD *)(v21 + 8) = 0;
        *(_DWORD *)(v21 + 16) = 0;
        v26 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v21;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v21 = *((_QWORD *)this + 6);
        }
        break;
      case 7u:
        v21 = operator new();
        *(_QWORD *)v21 = &off_1E7BAE468;
        *(_OWORD *)(v21 + 8) = 0u;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_QWORD *)(v21 + 56) = 0;
        v27 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v21;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v21 = *((_QWORD *)this + 5);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_40:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v16 = 0;
  v17 = 0;
  v12 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v18 = v2 + 1;
    v19 = *(_BYTE *)(v9 + v2);
    *((_QWORD *)a2 + 1) = v18;
    v12 |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      goto LABEL_22;
    v16 += 7;
    v2 = v18;
    v15 = v17++ > 8;
  }
  while (!v15);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_40;
  return result;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 56);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[8];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base **)v3[2];
  v8 = (const PB::Base **)v3[3];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = (const PB::Base *)v3[9];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = (const PB::Base *)v3[6];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = (const PB::Base *)v3[5];
  if (v12)
    return PB::Writer::writeSubmessage(a2, v12);
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::formatText(sirinluinternalitfm::ITFMParserRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embeddings");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "matching_spans");
  }
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "nlu_request_id");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "parser");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "request_id");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "tokenised_utterance");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "turn_input");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAE9F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAE9F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluinternalitfm::ITFMParserRequest *sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(sirinluinternalitfm::ITFMParserRequest *this, const sirinluinternalitfm::ITFMParserRequest *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sirinluinternalnlv4_parser::Tokenisation *v8;
  sirinluinternalnlv4_parser::Tokenisation *v9;
  uint64_t v10;
  char **v11;
  sirinluinternal::NLv4EmbeddingTensor *v12;
  sirinluinternal::NLv4EmbeddingTensor *v13;
  const sirinluinternal::MatchingSpan **v14;
  const sirinluinternal::MatchingSpan **i;
  sirinluexternal::TurnInput *v16;
  sirinluexternal::TurnInput *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  sirinluexternal::RequestID *v26;
  sirinluexternal::RequestID *v27;
  uint64_t v28;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAE9F8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (*((_QWORD *)a2 + 7))
  {
    v5 = operator new();
    v6 = sirinluexternal::UUID::UUID(v5, *((const sirinluexternal::UUID **)a2 + 7));
    v7 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 8))
  {
    v8 = (sirinluinternalnlv4_parser::Tokenisation *)operator new();
    v9 = sirinluinternalnlv4_parser::Tokenisation::Tokenisation(v8, *((const sirinluinternalnlv4_parser::Tokenisation **)a2 + 8));
    v10 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = (char **)operator new();
    v12 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v11, *((char ***)a2 + 1));
    v13 = *v4;
    *v4 = v12;
    if (v13)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 2);
  for (i = (const sirinluinternal::MatchingSpan **)*((_QWORD *)a2 + 3); v14 != i; ++v14)
    PB::PtrVector<sirinluinternal::MatchingSpan>::emplace_back<sirinluinternal::MatchingSpan const&>((sirinluinternal::MatchingSpan ***)this + 2, *v14);
  if (*((_QWORD *)a2 + 9))
  {
    v16 = (sirinluexternal::TurnInput *)operator new();
    v17 = sirinluexternal::TurnInput::TurnInput(v16, *((const sirinluexternal::TurnInput **)a2 + 9));
    v18 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v19 = operator new();
    v20 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v19 = &off_1E7BAF268;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = 0;
    v21 = *(_BYTE *)(v20 + 16);
    if ((v21 & 1) != 0)
    {
      v23 = *(_DWORD *)(v20 + 8);
      *(_BYTE *)(v19 + 16) = 1;
      *(_DWORD *)(v19 + 8) = v23;
      v22 = 3;
      if ((v21 & 2) == 0)
        goto LABEL_21;
    }
    else
    {
      v22 = 2;
      if ((*(_BYTE *)(v20 + 16) & 2) == 0)
      {
LABEL_21:
        v25 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v19;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        goto LABEL_23;
      }
    }
    v24 = *(_DWORD *)(v20 + 12);
    *(_BYTE *)(v19 + 16) = v22;
    *(_DWORD *)(v19 + 12) = v24;
    goto LABEL_21;
  }
LABEL_23:
  if (*((_QWORD *)a2 + 5))
  {
    v26 = (sirinluexternal::RequestID *)operator new();
    v27 = sirinluexternal::RequestID::RequestID(v26, *((const sirinluexternal::RequestID **)a2 + 5));
    v28 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::operator=(uint64_t a1, const sirinluinternalitfm::ITFMParserRequest *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if ((const sirinluinternalitfm::ITFMParserRequest *)a1 != a2)
  {
    sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest((sirinluinternalitfm::ITFMParserRequest *)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest((sirinluinternalitfm::ITFMParserRequest *)&v9);
  }
  return a1;
}

_QWORD *sirinluinternalitfm::swap(_QWORD *this, sirinluinternalitfm::ITFMParserRequest *a2, sirinluinternalitfm::ITFMParserRequest *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v3;
  v4 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  return this;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_1E7BAE9F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

uint64_t sirinluinternalitfm::ITFMParserRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sirinluinternalitfm::ITFMParserRequest::ITFMParserRequest((uint64_t)&v9, a2);
    v3 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    sirinluinternalitfm::ITFMParserRequest::~ITFMParserRequest((sirinluinternalitfm::ITFMParserRequest *)&v9);
  }
  return a1;
}

BOOL sirinluinternalitfm::ITFMParserRequest::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[7];
  v5 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    if (!v5 || !sirinluexternal::UUID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (_QWORD *)a1[8];
  v7 = *(_QWORD **)(a2 + 64);
  if (v6)
  {
    if (!v7 || !sirinluinternalnlv4_parser::Tokenisation::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[1];
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluinternal::MatchingSpan>::operator==(a1 + 2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (!result)
    return result;
  v11 = a1[9];
  v12 = *(_QWORD *)(a2 + 72);
  if (v11)
  {
    if (!v12 || (sirinluexternal::TurnInput::operator==(v11, v12) & 1) == 0)
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = a1[6];
  v14 = *(_QWORD *)(a2 + 48);
  if (!v13)
  {
    if (!v14)
      goto LABEL_29;
    return 0;
  }
  if (!v14 || !sirinluexternal::Parser::operator==(v13, v14))
    return 0;
LABEL_29:
  v15 = a1[5];
  v16 = *(_QWORD *)(a2 + 40);
  result = (v15 | v16) == 0;
  if (v15)
  {
    if (v16)
      return sirinluexternal::RequestID::operator==(a1[5], v16);
  }
  return result;
}

unint64_t sirinluinternalitfm::ITFMParserRequest::hash_value(sirinluinternalitfm::ITFMParserRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluinternalnlv4_parser::Tokenisation *v7;
  unint64_t v8;
  sirinluinternal::NLv4EmbeddingTensor *v9;
  unint64_t v10;
  sirinluinternal::MatchingSpan **v11;
  sirinluinternal::MatchingSpan **v12;
  uint64_t v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluexternal::TurnInput *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = *((_QWORD *)this + 7);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 28) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 28) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 28) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 28) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 28) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(int *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = (sirinluinternalnlv4_parser::Tokenisation *)*((_QWORD *)this + 8);
  if (v7)
    v8 = sirinluinternalnlv4_parser::Tokenisation::hash_value(v7);
  else
    v8 = 0;
  v9 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 1);
  if (v9)
    v10 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v9);
  else
    v10 = 0;
  v11 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 2);
  v12 = (sirinluinternal::MatchingSpan **)*((_QWORD *)this + 3);
  if (v11 == v12)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11++;
      v13 ^= sirinluinternal::MatchingSpan::hash_value(v14);
    }
    while (v11 != v12);
  }
  v15 = (sirinluexternal::TurnInput *)*((_QWORD *)this + 9);
  if (v15)
    v16 = sirinluexternal::TurnInput::hash_value(v15);
  else
    v16 = 0;
  v17 = *((_QWORD *)this + 6);
  if (!v17)
  {
    v20 = 0;
    goto LABEL_33;
  }
  if ((*(_BYTE *)(v17 + 16) & 1) != 0)
  {
    v18 = *(int *)(v17 + 8);
    if ((*(_BYTE *)(v17 + 16) & 2) != 0)
      goto LABEL_28;
LABEL_31:
    v19 = 0;
    goto LABEL_32;
  }
  v18 = 0;
  if ((*(_BYTE *)(v17 + 16) & 2) == 0)
    goto LABEL_31;
LABEL_28:
  v19 = *(int *)(v17 + 12);
LABEL_32:
  v20 = v19 ^ v18;
LABEL_33:
  v21 = *((_QWORD *)this + 5);
  if (v21)
    v21 = sirinluexternal::RequestID::hash_value((sirinluexternal::RequestID *)v21);
  return v8 ^ v6 ^ v16 ^ v20 ^ v21 ^ v10 ^ v13;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeRequestId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeTokenisedUtterance(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAE788;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeEmbeddings(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeTurnInput(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB16E8;
    *(_DWORD *)(v2 + 148) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 128) = 0;
    *(_QWORD *)(v2 + 136) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeParser(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF268;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalitfm::ITFMParserRequest::makeNluRequestId(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE468;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void siricommon::BytesValue::~BytesValue(void ***this)
{
  *this = (void **)&off_1E7BAEA48;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

{
  *this = (void **)&off_1E7BAEA48;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  *this = (void **)&off_1E7BAEA48;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

uint64_t siricommon::BytesValue::readFrom(siricommon::BytesValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  void **v21;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (void ***)((char *)this + 8);
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
        v21 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v7, (void **)v19);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v21, 0);
        PB::Reader::read();
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::BytesValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t siricommon::BytesValue::formatText(siricommon::BytesValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *siricommon::BytesValue::BytesValue(_QWORD *this)
{
  *this = &off_1E7BAEA48;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAEA48;
  this[1] = 0;
  return this;
}

siricommon::BytesValue *siricommon::BytesValue::BytesValue(siricommon::BytesValue *this, const siricommon::BytesValue *a2)
{
  void ***v3;
  void **v4;
  void **v6;

  *(_QWORD *)this = &off_1E7BAEA48;
  *((_QWORD *)this + 1) = 0;
  v3 = (void ***)((char *)this + 8);
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (void **)operator new();
    PB::Data::Data();
    v6 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v3, v4);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v6, 0);
  }
  return this;
}

void ***siricommon::BytesValue::operator=(void ***a1, const siricommon::BytesValue *a2)
{
  void **v3;
  void (**v5)(siricommon::BytesValue *__hidden);
  void **v6;

  if (a1 != (void ***)a2)
  {
    siricommon::BytesValue::BytesValue((siricommon::BytesValue *)&v5, a2);
    v3 = a1[1];
    a1[1] = v6;
    v5 = &off_1E7BAEA48;
    v6 = v3;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v6, 0);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::BytesValue *a2, siricommon::BytesValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

uint64_t siricommon::BytesValue::BytesValue(uint64_t a1, uint64_t a2)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E7BAEA48;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(void ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &off_1E7BAEA48;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(void ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

uint64_t siricommon::BytesValue::operator=(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  void (**v6)(siricommon::BytesValue *__hidden);
  void **v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAEA48;
    v7 = 0;
    v3 = *(void ***)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v7, v3);
    v4 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v6 = &off_1E7BAEA48;
    v7 = v4;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v7, 0);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

BOOL siricommon::BytesValue::operator==(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a1 + 8))
    return *(_QWORD *)(a2 + 8) == 0;
  if (!*(_QWORD *)(a2 + 8))
    return 0;
  if ((PB::Data::operator==() & 1) != 0)
    return 1;
  return !*(_QWORD *)(a1 + 8) && *(_QWORD *)(a2 + 8) == 0;
}

uint64_t siricommon::BytesValue::hash_value(siricommon::BytesValue *this)
{
  if (*((_QWORD *)this + 1))
    return PBHashBytes();
  else
    return 0;
}

uint64_t SIRINLUEXTERNALRRGroupIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRICOMMONStringValue *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 16) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRICOMMONStringValue);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRICOMMONStringValueReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F0BD88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0BDE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0BE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0BEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0BF5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0BFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0C080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C0D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C198(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0C208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C2C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0C330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F0C384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F0C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::SubwordTokenChain::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  unint64_t v44;
  int64x2_t *v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = this + 2;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_27;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v23 = operator new();
        v24 = v23;
        *(_QWORD *)v23 = &off_1E7BB0EE0;
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        v26 = (uint64_t *)this[1].i64[1];
        v25 = this[2].u64[0];
        if ((unint64_t)v26 >= v25)
        {
          v28 = this[1].i64[0];
          v29 = ((uint64_t)v26 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v30 = v25 - v28;
          v31 = v30 >> 2;
          if (v30 >> 2 <= (unint64_t)(v29 + 1))
            v31 = v29 + 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          v45 = v8;
          if (v32)
            v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v32);
          else
            v33 = 0;
          v34 = (uint64_t *)(v32 + 8 * v29);
          v35 = v32 + 8 * v33;
          v44 = v35;
          *v34 = v24;
          v27 = v34 + 1;
          v43.i64[1] = (uint64_t)(v34 + 1);
          v37 = (_QWORD *)this[1].i64[0];
          v36 = (_QWORD *)this[1].i64[1];
          if (v36 == v37)
          {
            v39 = vdupq_n_s64((unint64_t)v36);
          }
          else
          {
            do
            {
              v38 = *--v36;
              *v36 = 0;
              *--v34 = v38;
            }
            while (v36 != v37);
            v39 = this[1];
            v27 = (_QWORD *)v43.i64[1];
            v35 = v44;
          }
          this[1].i64[0] = (uint64_t)v34;
          this[1].i64[1] = (uint64_t)v27;
          v43 = v39;
          v40 = this[2].i64[0];
          this[2].i64[0] = v35;
          v44 = v40;
          v42 = v39.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          *v26 = v23;
          v27 = v26 + 1;
        }
        this[1].i64[1] = (uint64_t)v27;
        v41 = *(v27 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v41 + 16))(v41, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v12 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = this->i64[1];
        this->i64[1] = (uint64_t)v20;
        if (v21)
          std::default_delete<std::string>::operator()[abi:ne180100](v21);
        PB::Reader::read();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1F0C71C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::SubwordTokenChain::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v5 = *(const PB::Base ***)(v3 + 16);
  v4 = *(const PB::Base ***)(v3 + 24);
  while (v5 != v4)
  {
    v6 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  return this;
}

uint64_t sirinluinternal::SubwordTokenChain::formatText(sirinluinternal::SubwordTokenChain *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "subword_tokens");
  }
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::SubwordTokenChain *a2, sirinluinternal::SubwordTokenChain *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  return this;
}

BOOL sirinluinternal::SubwordTokenChain::operator==(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  BOOL v18;

  v4 = (unsigned __int8 *)a1[1];
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = a1[2];
  v12 = a1[3];
  v14 = a2 + 16;
  v13 = *(uint64_t **)(a2 + 16);
  if (v12 - v11 != *(_QWORD *)(v14 + 8) - (_QWORD)v13)
    return 0;
  if (v11 == v12)
    return 1;
  v15 = v11 + 8;
  do
  {
    v16 = *v13++;
    result = sirinluinternal::SubwordToken::operator==(*(_QWORD *)(v15 - 8), v16);
    v18 = !result || v15 == v12;
    v15 += 8;
  }
  while (!v18);
  return result;
}

unint64_t sirinluinternal::SubwordTokenChain::hash_value(sirinluinternal::SubwordTokenChain *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluinternal::SubwordToken **v4;
  sirinluinternal::SubwordToken **v5;
  uint64_t v6;
  sirinluinternal::SubwordToken *v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v5 = (sirinluinternal::SubwordToken **)*((_QWORD *)this + 2);
  v4 = (sirinluinternal::SubwordToken **)*((_QWORD *)this + 3);
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v5++;
      v6 ^= sirinluinternal::SubwordToken::hash_value(v7);
    }
    while (v5 != v4);
  }
  return v6 ^ v3;
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATENLv4ExecutedHandcraftedRulesReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRules);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATESNLPHandcraftedRulesReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::Span::~Span(sirinluexternal::Span *this)
{
  sirinluexternal::Span::~Span(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E7BAEAE8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

BOOL sirinluexternal::Span::readFrom(sirinluexternal::Span *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  unint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  char v92;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v58 = v10++ > 8;
        if (v58)
          goto LABEL_19;
      }
LABEL_25:
      if ((v11 & 7) != 4)
      {
        switch((v11 >> 3))
        {
          case 1u:
            v19 = (_QWORD *)operator new();
            v19[1] = 0;
            v19[2] = 0;
            *v19 = 0;
            v20 = *((_QWORD *)this + 5);
            *((_QWORD *)this + 5) = v19;
            if (v20)
              goto LABEL_30;
            goto LABEL_31;
          case 2u:
            v21 = (_QWORD *)operator new();
            v21[1] = 0;
            v21[2] = 0;
            *v21 = 0;
            v20 = *((_QWORD *)this + 4);
            *((_QWORD *)this + 4) = v21;
            if (v20)
LABEL_30:
              std::default_delete<std::string>::operator()[abi:ne180100](v20);
LABEL_31:
            PB::Reader::read();
            goto LABEL_20;
          case 3u:
            *((_BYTE *)this + 72) |= 4u;
            v22 = *((_QWORD *)a2 + 1);
            v23 = *((_QWORD *)a2 + 2);
            v24 = *(_QWORD *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)a2 + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_128;
                v25 += 7;
                v22 = v28;
                v58 = v26++ > 8;
              }
              while (!v58);
LABEL_104:
              LODWORD(v27) = 0;
              goto LABEL_128;
            }
            v63 = 0;
            v64 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v23 == v22)
              {
                LODWORD(v27) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v65 = v22 + 1;
                v66 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)a2 + 1) = v65;
                v27 |= (unint64_t)(v66 & 0x7F) << v63;
                if (v66 < 0)
                {
                  v63 += 7;
                  v22 = v65;
                  v58 = v64++ > 8;
                  if (v58)
                    goto LABEL_104;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
              }
              break;
            }
LABEL_128:
            *((_DWORD *)this + 17) = v27;
            goto LABEL_20;
          case 4u:
            *((_BYTE *)this + 72) |= 2u;
            v30 = *((_QWORD *)a2 + 1);
            v31 = *((_QWORD *)a2 + 2);
            v32 = *(_QWORD *)a2;
            if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
            {
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v36 = v30 + 1;
                *((_QWORD *)a2 + 1) = v30 + 1;
                v37 = *(_BYTE *)(v32 + v30);
                v35 |= (unint64_t)(v37 & 0x7F) << v33;
                if ((v37 & 0x80) == 0)
                  goto LABEL_131;
                v33 += 7;
                v30 = v36;
                v58 = v34++ > 8;
              }
              while (!v58);
LABEL_111:
              LODWORD(v35) = 0;
              goto LABEL_131;
            }
            v67 = 0;
            v68 = 0;
            v35 = 0;
            if (v31 <= v30)
              v31 = *((_QWORD *)a2 + 1);
            while (2)
            {
              if (v31 == v30)
              {
                LODWORD(v35) = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v69 = v30 + 1;
                v70 = *(_BYTE *)(v32 + v30);
                *((_QWORD *)a2 + 1) = v69;
                v35 |= (unint64_t)(v70 & 0x7F) << v67;
                if (v70 < 0)
                {
                  v67 += 7;
                  v30 = v69;
                  v58 = v68++ > 8;
                  if (v58)
                    goto LABEL_111;
                  continue;
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
              }
              break;
            }
LABEL_131:
            *((_DWORD *)this + 16) = v35;
            goto LABEL_20;
          case 5u:
            v38 = operator new();
            *(_QWORD *)v38 = &off_1E7BB2398;
            *(_OWORD *)(v38 + 8) = 0u;
            *(_OWORD *)(v38 + 24) = 0u;
            *(_OWORD *)(v38 + 40) = 0u;
            *(_OWORD *)(v38 + 56) = 0u;
            *(_OWORD *)(v38 + 72) = 0u;
            *(_OWORD *)(v38 + 88) = 0u;
            *(_OWORD *)(v38 + 104) = 0u;
            *(_OWORD *)(v38 + 120) = 0u;
            v39 = *((_QWORD *)this + 7);
            *((_QWORD *)this + 7) = v38;
            if (v39)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
              v38 = *((_QWORD *)this + 7);
            }
            if (PB::Reader::placeMark()
              && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v38 + 16))(v38, a2) & 1) != 0)
            {
              goto LABEL_50;
            }
            return 0;
          case 6u:
            *((_BYTE *)this + 72) |= 1u;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *((_QWORD *)a2 + 2))
            {
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v40);
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
            goto LABEL_20;
          case 7u:
            if ((v11 & 7) == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
              {
                v41 = (char *)*((_QWORD *)this + 2);
                while (1)
                {
                  v42 = *((_QWORD *)this + 3);
                  if ((unint64_t)v41 >= v42)
                  {
                    v43 = (char *)*((_QWORD *)this + 1);
                    v44 = (v41 - v43) >> 2;
                    v45 = v44 + 1;
                    if ((unint64_t)(v44 + 1) >> 62)
                      goto LABEL_162;
                    v46 = v42 - (_QWORD)v43;
                    if (v46 >> 1 > v45)
                      v45 = v46 >> 1;
                    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                      v47 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v47 = v45;
                    if (v47)
                    {
                      v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v47);
                      v43 = (char *)*((_QWORD *)this + 1);
                      v41 = (char *)*((_QWORD *)this + 2);
                    }
                    else
                    {
                      v48 = 0;
                    }
                    v49 = (_DWORD *)(v47 + 4 * v44);
                    *v49 = 0;
                    v50 = (char *)(v49 + 1);
                    while (v41 != v43)
                    {
                      v51 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *--v49 = v51;
                    }
                    *((_QWORD *)this + 1) = v49;
                    *((_QWORD *)this + 2) = v50;
                    *((_QWORD *)this + 3) = v47 + 4 * v48;
                    if (v43)
                      operator delete(v43);
                    v41 = v50;
                  }
                  else
                  {
                    *(_DWORD *)v41 = 0;
                    v41 += 4;
                  }
                  *((_QWORD *)this + 2) = v41;
                  v53 = *((_QWORD *)a2 + 1);
                  v52 = *((_QWORD *)a2 + 2);
                  v54 = *(_QWORD *)a2;
                  v55 = 0;
                  v56 = 0;
                  v57 = 0;
                  v58 = v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v52;
                  if (v58)
                    break;
                  while (1)
                  {
                    v60 = v53 + 1;
                    *((_QWORD *)a2 + 1) = v53 + 1;
                    v62 = *(_BYTE *)(v54 + v53);
                    v57 |= (unint64_t)(v62 & 0x7F) << v55;
                    if ((v62 & 0x80) == 0)
                      break;
                    v55 += 7;
                    v53 = v60;
                    v58 = v56++ > 8;
                    if (v58)
                      goto LABEL_92;
                  }
LABEL_95:
                  *((_DWORD *)v41 - 1) = v57;
                  if (v60 >= v52 || *((_BYTE *)a2 + 24))
                    goto LABEL_50;
                }
                if (v52 <= v53)
                  v59 = *((_QWORD *)a2 + 1);
                else
                  v59 = *((_QWORD *)a2 + 2);
                while (v59 != v53)
                {
                  v60 = v53 + 1;
                  v61 = *(_BYTE *)(v54 + v53);
                  *((_QWORD *)a2 + 1) = v60;
                  v57 |= (unint64_t)(v61 & 0x7F) << v55;
                  if ((v61 & 0x80) == 0)
                  {
                    if (*((_BYTE *)a2 + 24))
                      LODWORD(v57) = 0;
                    goto LABEL_95;
                  }
                  v55 += 7;
                  v53 = v60;
                  v58 = v56++ > 8;
                  if (v58)
                  {
LABEL_92:
                    LODWORD(v57) = 0;
                    goto LABEL_95;
                  }
                }
                *((_BYTE *)a2 + 24) = 1;
                *((_DWORD *)v41 - 1) = 0;
              }
LABEL_50:
              PB::Reader::recallMark();
            }
            else
            {
              v72 = (char *)*((_QWORD *)this + 2);
              v71 = *((_QWORD *)this + 3);
              if ((unint64_t)v72 >= v71)
              {
                v74 = (char *)*((_QWORD *)this + 1);
                v75 = (v72 - v74) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
LABEL_162:
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v77 = v71 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v78);
                  v74 = (char *)*((_QWORD *)this + 1);
                  v72 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v79 = 0;
                }
                v80 = (_DWORD *)(v78 + 4 * v75);
                *v80 = 0;
                v73 = v80 + 1;
                while (v72 != v74)
                {
                  v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *--v80 = v81;
                }
                *((_QWORD *)this + 1) = v80;
                *((_QWORD *)this + 2) = v73;
                *((_QWORD *)this + 3) = v78 + 4 * v79;
                if (v74)
                  operator delete(v74);
              }
              else
              {
                *(_DWORD *)v72 = 0;
                v73 = v72 + 4;
              }
              *((_QWORD *)this + 2) = v73;
              v82 = *((_QWORD *)a2 + 1);
              v83 = *((_QWORD *)a2 + 2);
              v84 = *(_QWORD *)a2;
              v85 = 0;
              v86 = 0;
              if (v82 > 0xFFFFFFFFFFFFFFF5 || v82 + 10 > v83)
              {
                v90 = 0;
                if (v83 <= v82)
                  v83 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v83 == v82)
                  {
                    LODWORD(v90) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  v88 = v82 + 1;
                  v89 = *(_BYTE *)(v84 + v82);
                  *((_QWORD *)a2 + 1) = v88;
                  v90 |= (unint64_t)(v89 & 0x7F) << v85;
                  if ((v89 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v82 = v88;
                  v58 = v86++ > 8;
                  if (v58)
                  {
LABEL_153:
                    LODWORD(v90) = 0;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v90) = 0;
              }
              else
              {
                v90 = 0;
                while (1)
                {
                  v91 = v82 + 1;
                  *((_QWORD *)a2 + 1) = v82 + 1;
                  v92 = *(_BYTE *)(v84 + v82);
                  v90 |= (unint64_t)(v92 & 0x7F) << v85;
                  if ((v92 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v82 = v91;
                  v58 = v86++ > 8;
                  if (v58)
                    goto LABEL_153;
                }
              }
LABEL_157:
              *(v73 - 1) = v90;
            }
LABEL_20:
            v2 = *((_QWORD *)a2 + 1);
            v3 = *((_QWORD *)a2 + 2);
            v4 = *((unsigned __int8 *)a2 + 24);
            if (v2 >= v3 || v4 != 0)
              return v4 == 0;
            continue;
          default:
            goto LABEL_19;
        }
      }
      v4 = 0;
      return v4 == 0;
    }
    break;
  }
  v14 = 0;
  v15 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v16 = v2 + 1;
    v17 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v16;
    v11 |= (unint64_t)(v17 & 0x7F) << v14;
    if ((v17 & 0x80) == 0)
      goto LABEL_25;
    v14 += 7;
    v2 = v16;
    v58 = v15++ > 8;
  }
  while (!v58);
LABEL_19:
  if ((PB::Reader::skip(a2) & 1) != 0)
    goto LABEL_20;
  return 0;
}

uint64_t sirinluexternal::Span::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  if (*(_QWORD *)(this + 40))
    this = PB::Writer::write();
  if (*(_QWORD *)(v3 + 32))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 72);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 48));
  v7 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v7 != v6)
  {
    v7 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

uint64_t sirinluexternal::Span::formatText(sirinluexternal::Span *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 72) & 2) != 0)
    PB::TextFormatter::format(a2, "end_token_index");
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "matcher_names");
  }
  v7 = *((_BYTE *)this + 72);
  if ((v7 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "score", *((double *)this + 6));
    v7 = *((_BYTE *)this + 72);
  }
  if ((v7 & 4) != 0)
    PB::TextFormatter::format(a2, "start_token_index");
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "uso_graph");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::Span::Span(sirinluexternal::Span *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAEAE8;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAEAE8;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluexternal::Span *sirinluexternal::Span::Span(sirinluexternal::Span *this, const sirinluexternal::Span *a2)
{
  _QWORD *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  sirinluexternal::UsoGraph *v18;
  sirinluexternal::UsoGraph *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  void *v35;
  char *v36;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7BAEAE8;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (*((_QWORD *)a2 + 5))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 5);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  v15 = *((_BYTE *)a2 + 72);
  if ((v15 & 4) != 0)
  {
    v16 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 72) |= 4u;
    *((_DWORD *)this + 17) = v16;
    v15 = *((_BYTE *)a2 + 72);
  }
  if ((v15 & 2) != 0)
  {
    v17 = *((_DWORD *)a2 + 16);
    *((_BYTE *)this + 72) |= 2u;
    *((_DWORD *)this + 16) = v17;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v18 = (sirinluexternal::UsoGraph *)operator new();
    v19 = sirinluexternal::UsoGraph::UsoGraph(v18, *((const sirinluexternal::SemVer ***)a2 + 7));
    v20 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v21 = *((_QWORD *)a2 + 6);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 6) = v21;
  }
  if (this != a2)
  {
    v22 = (char *)*((_QWORD *)a2 + 1);
    v23 = (_BYTE *)*((_QWORD *)a2 + 2);
    v24 = v23 - v22;
    v25 = (v23 - v22) >> 2;
    v26 = *((_QWORD *)this + 3);
    v27 = (char *)*((_QWORD *)this + 1);
    if (v25 <= (v26 - (uint64_t)v27) >> 2)
    {
      v30 = (void **)((char *)this + 16);
      v32 = (_BYTE *)*((_QWORD *)this + 2);
      v33 = (v32 - v27) >> 2;
      if (v33 < v25)
      {
        v34 = &v22[4 * v33];
        if (v32 != v27)
        {
          memmove(*((void **)this + 1), v22, v32 - v27);
          v27 = (char *)*v30;
        }
        v24 = v23 - v34;
        if (v23 == v34)
          goto LABEL_42;
        v35 = v27;
        v36 = v34;
        goto LABEL_41;
      }
    }
    else
    {
      if (v27)
      {
        *((_QWORD *)this + 2) = v27;
        operator delete(v27);
        v26 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_44;
      v28 = v26 >> 1;
      if (v26 >> 1 <= v25)
        v28 = (v23 - v22) >> 2;
      v29 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v28;
      if (v29 >> 62)
LABEL_44:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v29);
      *((_QWORD *)this + 2) = v27;
      v30 = (void **)((char *)this + 16);
      *((_QWORD *)this + 1) = v27;
      *((_QWORD *)this + 3) = &v27[4 * v31];
    }
    if (v23 == v22)
    {
LABEL_42:
      *v30 = &v27[v24];
      return this;
    }
    v35 = v27;
    v36 = v22;
LABEL_41:
    memmove(v35, v36, v24);
    goto LABEL_42;
  }
  return this;
}

uint64_t sirinluexternal::Span::operator=(uint64_t a1, const sirinluexternal::Span *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((const sirinluexternal::Span *)a1 != a2)
  {
    sirinluexternal::Span::Span((sirinluexternal::Span *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    v17 = v5;
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v16;
    v16 = v6;
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v8;
    v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v9;
    sirinluexternal::Span::~Span((sirinluexternal::Span *)&v11);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::Span *a2, sirinluexternal::Span *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  LODWORD(v5) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v5;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  result = *((double *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((double *)a2 + 6) = result;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t sirinluexternal::Span::Span(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E7BAEAE8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v11 = *(void **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 16) = v11;
    operator delete(v11);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluexternal::Span::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    sirinluexternal::Span::Span((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    v17 = v5;
    v6 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v16;
    v16 = v6;
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v8;
    v9 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v9;
    sirinluexternal::Span::~Span((sirinluexternal::Span *)&v11);
  }
  return a1;
}

BOOL sirinluexternal::Span::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  char v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  _BOOL8 result;
  BOOL v28;

  v4 = *(unsigned __int8 **)(a1 + 40);
  v5 = *(unsigned __int8 ***)(a2 + 40);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 40);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 32);
  v12 = *(unsigned __int8 ***)(a2 + 32);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 32);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  v18 = *(_BYTE *)(a1 + 72);
  v19 = *(_BYTE *)(a2 + 72);
  if ((v18 & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 4) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  v20 = *(_QWORD **)(a1 + 56);
  v21 = *(_QWORD **)(a2 + 56);
  if (v20)
  {
    if (!v21 || (sirinluexternal::UsoGraph::operator==(v20, v21) & 1) == 0)
      return 0;
  }
  else if (v21)
  {
    return 0;
  }
  if ((v18 & 1) != 0)
  {
    if ((v19 & 1) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v19 & 1) != 0)
  {
    return 0;
  }
  v23 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  v24 = *(int **)(a2 + 8);
  if (v22 - v23 != *(_QWORD *)(a2 + 16) - (_QWORD)v24)
    return 0;
  if (v23 == v22)
    return 1;
  v25 = v23 + 4;
  do
  {
    v26 = *v24++;
    result = *(_DWORD *)(v25 - 4) == v26;
    v28 = *(_DWORD *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

unint64_t sirinluexternal::Span::hash_value(sirinluexternal::Span *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;

  v2 = *((_QWORD *)this + 5);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  else
    v5 = 0;
  v6 = *((_BYTE *)this + 72);
  if ((v6 & 4) != 0)
  {
    v7 = *((unsigned int *)this + 17);
    if ((*((_BYTE *)this + 72) & 2) != 0)
      goto LABEL_9;
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 72) & 2) != 0)
    {
LABEL_9:
      v8 = *((unsigned int *)this + 16);
      goto LABEL_12;
    }
  }
  v8 = 0;
LABEL_12:
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v9 = sirinluexternal::UsoGraph::hash_value((sirinluexternal::UsoGraph *)v9);
    v6 = *((_BYTE *)this + 72);
  }
  if ((v6 & 1) != 0)
  {
    v10 = *((double *)this + 6);
    if (v10 == 0.0)
      v10 = 0.0;
  }
  else
  {
    v10 = 0.0;
  }
  return v5 ^ v3 ^ v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10 ^ PBHashBytes();
}

_QWORD *sirinluexternal::Span::makeUsoGraph(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB2398;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALOVERRIDESOverridesRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  SIRINLUINTERNALTokenChain *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(SIRINLUINTERNALTokenChain **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v17;
        goto LABEL_37;
      case 2u:
        v18 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v18, a2))
          goto LABEL_41;
        goto LABEL_36;
      case 3u:
        v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_41;
        goto LABEL_36;
      case 4u:
        v18 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        objc_msgSend((id)a1, "addSystemDialogActs:", v18);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v18->super.super.isa, a2))
        {
          goto LABEL_41;
        }
        goto LABEL_36;
      case 5u:
        v18 = objc_alloc_init(SIRINLUEXTERNALTurnContext);
        objc_storeStrong((id *)(a1 + 40), v18);
        if (!PBReaderPlaceMark() || !SIRINLUEXTERNALTurnContextReadFrom((uint64_t)v18, a2))
          goto LABEL_41;
        goto LABEL_36;
      case 6u:
        v18 = objc_alloc_init(SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessing);
        objc_msgSend((id)a1, "addInputs:", v18);
        if (PBReaderPlaceMark()
          && SIRINLUINTERNALOVERRIDESTurnInputAndPreprocessingReadFrom((uint64_t)v18, a2))
        {
LABEL_36:
          PBReaderRecallMark();
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

uint64_t SIRINLUINTERNALUtteranceRuleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  SIRINLUINTERNALCompareOptions *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

        goto LABEL_39;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_38:
        *(_DWORD *)(a1 + 32) = v22;
        goto LABEL_39;
      case 3u:
        v26 = objc_alloc_init(SIRINLUINTERNALCompareOptions);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALCompareOptionsReadFrom((uint64_t)v26, a2))
          goto LABEL_41;
        goto LABEL_34;
      case 4u:
        v26 = objc_alloc_init(SIRINLUINTERNALAdjacentSpans);
        objc_msgSend((id)a1, "addSpansForNamedCaptureGroups:", v26);
        if (PBReaderPlaceMark() && SIRINLUINTERNALAdjacentSpansReadFrom(v26, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_39;
    }
  }
}

uint64_t SIRINLUEXTERNALNLU_ROUTERNLRouterServiceResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtterance *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_51;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_53:
        v35 = 24;
        goto LABEL_62;
      case 2u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_57:
        v35 = 40;
        goto LABEL_62;
      case 3u:
        v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtterance);
        objc_msgSend((id)a1, "addSiriXRewriteUtterances:", v29);
        goto LABEL_37;
      case 4u:
        v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtterance);
        objc_msgSend((id)a1, "addQueryRewrites:", v29);
LABEL_37:
        if (!PBReaderPlaceMark()
          || (SIRINLUEXTERNALNLU_ROUTERNLRouterRewriteUtteranceReadFrom((uint64_t)v29, a2) & 1) == 0)
        {
          goto LABEL_65;
        }
        goto LABEL_49;
      case 5u:
        v30 = 0;
        v31 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_61:
        v35 = 28;
LABEL_62:
        *(_DWORD *)(a1 + v35) = v19;
        goto LABEL_63;
      case 6u:
        v29 = objc_alloc_init(SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadata);
        objc_storeStrong((id *)(a1 + 8), v29);
        if (PBReaderPlaceMark()
          && SIRINLUEXTERNALNLU_ROUTERNLRoutingGenAIMetadataReadFrom((uint64_t)v29, a2))
        {
LABEL_49:
          PBReaderRecallMark();

LABEL_63:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_65:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
    }
  }
}

void sirinluinternal::ParseOverride::~ParseOverride(void ***this)
{
  sirinluinternal::ParseOverride::~ParseOverride(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;
  uint64_t v3;
  void **v4;

  *this = (void **)&off_1E7BAEBD0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 7, 0);
  v2 = this[6];
  this[6] = 0;
  if (v2)
    (*((void (**)(void **))*v2 + 1))(v2);
  v4 = (void **)(this + 3);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (uint64_t)this[2];
  this[2] = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base((PB::Base *)this);
}

uint64_t sirinluinternal::ParseOverride::readFrom(sirinluinternal::ParseOverride *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  void **v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 56);
  v9 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v15 = *(_BYTE *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0)
        break;
      v11 += 7;
      v2 = v14;
      v16 = v12++ > 8;
      if (v16)
        goto LABEL_20;
    }
LABEL_26:
    if ((v13 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        v23 = (_QWORD *)operator new();
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v23;
        if (v24)
          std::default_delete<std::string>::operator()[abi:ne180100](v24);
        PB::Reader::read();
        goto LABEL_21;
      case 2u:
        *((_BYTE *)this + 72) |= 4u;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v25);
          *((_QWORD *)a2 + 1) = v26;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 68) = v28;
        goto LABEL_21;
      case 3u:
        *((_BYTE *)this + 72) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_73;
            v32 += 7;
            v29 = v35;
            v16 = v33++ > 8;
          }
          while (!v16);
LABEL_62:
          v34 = 0;
          goto LABEL_73;
        }
        v48 = 0;
        v49 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v30 == v29)
          {
            v34 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v50 = v29 + 1;
            v51 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v50;
            v34 |= (unint64_t)(v51 & 0x7F) << v48;
            if (v51 < 0)
            {
              v48 += 7;
              v29 = v50;
              v16 = v49++ > 8;
              if (v16)
                goto LABEL_62;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v34 = 0;
          }
          break;
        }
LABEL_73:
        *((_QWORD *)this + 1) = v34;
        goto LABEL_21;
      case 4u:
        *((_BYTE *)this + 72) |= 2u;
        v37 = *((_QWORD *)a2 + 1);
        v38 = *((_QWORD *)a2 + 2);
        v39 = *(_QWORD *)a2;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)a2 + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_77;
            v40 += 7;
            v37 = v43;
            v16 = v41++ > 8;
          }
          while (!v16);
LABEL_69:
          LODWORD(v42) = 0;
          goto LABEL_77;
        }
        v52 = 0;
        v53 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v54 = v37 + 1;
            v55 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)a2 + 1) = v54;
            v42 |= (unint64_t)(v55 & 0x7F) << v52;
            if (v55 < 0)
            {
              v52 += 7;
              v37 = v54;
              v16 = v53++ > 8;
              if (v16)
                goto LABEL_69;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_77:
        *((_DWORD *)this + 16) = v42;
        goto LABEL_21;
      case 6u:
        v45 = operator new();
        *(_QWORD *)v45 = &off_1E7BB18F0;
        *(_OWORD *)(v45 + 16) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_OWORD *)(v45 + 56) = 0u;
        *(_OWORD *)(v45 + 72) = 0u;
        *(_DWORD *)(v45 + 88) = 0;
        v46 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v45;
        if (v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          v45 = *((_QWORD *)this + 6);
        }
        goto LABEL_50;
      case 7u:
        PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>(v9);
        v45 = *(_QWORD *)(*((_QWORD *)this + 4) - 8);
LABEL_50:
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v45 + 16))(v45, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
LABEL_21:
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v4 = *((unsigned __int8 *)a2 + 24);
        if (v2 >= v3 || v4 != 0)
          return v4 == 0;
        break;
      case 8u:
        v47 = operator new();
        *(_QWORD *)v47 = 0;
        *(_QWORD *)(v47 + 8) = 0;
        v56 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v47);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v56, 0);
        PB::Reader::read();
        goto LABEL_21;
      default:
        goto LABEL_20;
    }
  }
  v17 = 0;
  v18 = 0;
  v13 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v19 = v2 + 1;
    v20 = *(_BYTE *)(v10 + v2);
    *((_QWORD *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0)
      goto LABEL_26;
    v17 += 7;
    v2 = v19;
    v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_21;
  return result;
}

uint64_t sirinluinternal::ParseOverride::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;

  v3 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2);
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_5:
      if ((v4 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 1) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 72) & 2) != 0)
LABEL_6:
    this = PB::Writer::writeVarInt(a2);
LABEL_7:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base ***)(v3 + 24);
  v7 = *(const PB::Base ***)(v3 + 32);
  while (v6 != v7)
  {
    v8 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v8);
  }
  if (*(_QWORD *)(v3 + 56))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternal::ParseOverride::formatText(sirinluinternal::ParseOverride *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "creation_timestamp_ms_since_unix_epoch");
    v5 = *((_BYTE *)this + 72);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(a2, "enabled");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "nlu_request_rules");
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "parse");
  if ((*((_BYTE *)this + 72) & 2) != 0)
    PB::TextFormatter::format(a2, "parser_identifier");
  if (*((_QWORD *)this + 7))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BB1BC8;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F12B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternal::ParseOverride::ParseOverride(sirinluinternal::ParseOverride *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAEBD0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAEBD0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  return result;
}

sirinluinternal::ParseOverride *sirinluinternal::ParseOverride::ParseOverride(sirinluinternal::ParseOverride *this, const sirinluinternal::ParseOverride *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  int v11;
  sirinluexternal::UserParse *v12;
  sirinluexternal::UserParse *v13;
  uint64_t v14;
  const sirinluinternal::NluRequestRule **v15;
  const sirinluinternal::NluRequestRule **i;
  void **v17;
  char v19;
  uint64_t v20;
  void **v21;

  *(_QWORD *)this = &off_1E7BAEBD0;
  *((_OWORD *)this + 1) = 0u;
  v4 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((_BYTE *)this + 68) = 1;
  *((_DWORD *)this + 18) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  v10 = *((_BYTE *)a2 + 72);
  if ((v10 & 4) == 0)
  {
    if ((*((_BYTE *)a2 + 72) & 1) == 0)
      goto LABEL_9;
LABEL_20:
    v20 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 1) = v20;
    if ((*((_BYTE *)a2 + 72) & 2) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v19 = *((_BYTE *)a2 + 68);
  *((_BYTE *)this + 72) |= 4u;
  *((_BYTE *)this + 68) = v19;
  v10 = *((_BYTE *)a2 + 72);
  if ((v10 & 1) != 0)
    goto LABEL_20;
LABEL_9:
  if ((v10 & 2) != 0)
  {
LABEL_10:
    v11 = *((_DWORD *)a2 + 16);
    *((_BYTE *)this + 72) |= 2u;
    *((_DWORD *)this + 16) = v11;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 6))
  {
    v12 = (sirinluexternal::UserParse *)operator new();
    v13 = sirinluexternal::UserParse::UserParse(v12, *((const sirinluexternal::UUID ***)a2 + 6));
    v14 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = (const sirinluinternal::NluRequestRule **)*((_QWORD *)a2 + 3);
  for (i = (const sirinluinternal::NluRequestRule **)*((_QWORD *)a2 + 4); v15 != i; ++v15)
    PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>((sirinluinternal::NluRequestRule ***)this + 3, *v15);
  if (*((_QWORD *)a2 + 7))
  {
    v17 = (void **)operator new();
    PB::Data::Data();
    v21 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 7, v17);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v21, 0);
  }
  return this;
}

uint64_t PB::PtrVector<sirinluinternal::NluRequestRule>::emplace_back<sirinluinternal::NluRequestRule const&>(sirinluinternal::NluRequestRule ***a1, const sirinluinternal::NluRequestRule *a2)
{
  sirinluinternal::NluRequestRule *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternal::NluRequestRule **v7;
  sirinluinternal::NluRequestRule **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternal::NluRequestRule **v14;
  unint64_t v15;
  sirinluinternal::NluRequestRule **v16;
  sirinluinternal::NluRequestRule **v17;
  sirinluinternal::NluRequestRule *v18;
  int64x2_t v19;
  sirinluinternal::NluRequestRule **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternal::NluRequestRule *)operator new();
  result = (uint64_t)sirinluinternal::NluRequestRule::NluRequestRule(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternal::NluRequestRule **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternal::NluRequestRule **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternal::NluRequestRule **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F12F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternal::ParseOverride::operator=(uint64_t a1, const sirinluinternal::ParseOverride *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  void **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;
  int v17;

  if ((const sirinluinternal::ParseOverride *)a1 != a2)
  {
    sirinluinternal::ParseOverride::ParseOverride((sirinluinternal::ParseOverride *)&v10, a2);
    v3 = v13;
    v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v16;
    v16 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v7;
    v12 = v4;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v14;
    v14 = v8;
    sirinluinternal::ParseOverride::~ParseOverride(&v10);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::ParseOverride *a2, sirinluinternal::ParseOverride *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 68);
  *(_BYTE *)(this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v3;
  v5 = *(_QWORD *)(this + 8);
  v4 = *(_QWORD *)(this + 16);
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v6;
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v7 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  return this;
}

uint64_t sirinluinternal::ParseOverride::ParseOverride(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)a1 = &off_1E7BAEBD0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(void ***)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 56), v8);
  return a1;
}

uint64_t sirinluinternal::ParseOverride::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  void **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    sirinluinternal::ParseOverride::ParseOverride((uint64_t)&v10, a2);
    v3 = v13;
    v4 = *(_OWORD *)(a1 + 16);
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    v17 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 68);
    *(_BYTE *)(a1 + 68) = v16;
    v16 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v7;
    v12 = v4;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v14;
    v14 = v8;
    sirinluinternal::ParseOverride::~ParseOverride(&v10);
  }
  return a1;
}

uint64_t sirinluinternal::ParseOverride::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 4) == 0 || *(unsigned __int8 *)(a1 + 68) != *(unsigned __int8 *)(a2 + 68))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a2 + 48);
  if (!v11)
  {
    if (!v12)
      goto LABEL_42;
    return 0;
  }
  if (!v12 || !sirinluexternal::UserParse::operator==(v11, v12))
    return 0;
LABEL_42:
  result = PB::PtrVector<sirinluinternal::NluRequestRule>::operator==((uint64_t *)(a1 + 24), *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)(a1 + 56))
      return *(_QWORD *)(a2 + 56) == 0;
    if (*(_QWORD *)(a2 + 56))
    {
      if ((PB::Data::operator==() & 1) != 0)
        return 1;
      if (!*(_QWORD *)(a1 + 56))
        return *(_QWORD *)(a2 + 56) == 0;
    }
    return 0;
  }
  return result;
}

BOOL PB::PtrVector<sirinluinternal::NluRequestRule>::operator==(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  v3 = *a1;
  v4 = a1[1];
  if (v4 - *a1 != a3 - (_QWORD)a2)
    return 0;
  if (v3 == v4)
    return 1;
  v5 = a2;
  v6 = v3 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternal::NluRequestRule::operator==(*(_QWORD **)(v6 - 8), v7);
    v9 = !result || v6 == v4;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternal::ParseOverride::hash_value(sirinluinternal::ParseOverride *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  sirinluexternal::UserParse *v7;
  unint64_t v8;
  sirinluinternal::NluRequestRule **v9;
  sirinluinternal::NluRequestRule **v10;
  uint64_t v11;
  sirinluinternal::NluRequestRule *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  if ((*((_BYTE *)this + 72) & 4) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 72) & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    if ((*((_BYTE *)this + 72) & 2) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  v4 = *((unsigned __int8 *)this + 68);
  if ((*((_BYTE *)this + 72) & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 72) & 2) != 0)
  {
LABEL_7:
    v6 = *((int *)this + 16);
    goto LABEL_11;
  }
LABEL_10:
  v6 = 0;
LABEL_11:
  v7 = (sirinluexternal::UserParse *)*((_QWORD *)this + 6);
  if (v7)
    v8 = sirinluexternal::UserParse::hash_value(v7);
  else
    v8 = 0;
  v9 = (sirinluinternal::NluRequestRule **)*((_QWORD *)this + 3);
  v10 = (sirinluinternal::NluRequestRule **)*((_QWORD *)this + 4);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 ^= sirinluinternal::NluRequestRule::hash_value(v12);
    }
    while (v9 != v10);
  }
  if (*((_QWORD *)this + 7))
    v13 = PBHashBytes();
  else
    v13 = 0;
  return v4 ^ v3 ^ v5 ^ v6 ^ v13 ^ v8 ^ v11;
}

_QWORD *sirinluinternal::ParseOverride::makeParse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB18F0;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_DWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest(sirinluinternalembedding::EmbeddingRequest *this)
{
  sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAEC20;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalembedding::EmbeddingRequest::readFrom(sirinluinternalembedding::EmbeddingRequest *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = operator new();
        *(_QWORD *)v22 = &off_1E7BB0140;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(_QWORD *)(v22 + 40) = 0;
        v23 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_26:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_26;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  if (*(_QWORD *)(this + 8))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(a2, v4);
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::formatText(sirinluinternalembedding::EmbeddingRequest *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "token_chain");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAEC20;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAEC20;
  return this;
}

sirinluinternalembedding::EmbeddingRequest *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(sirinluinternalembedding::EmbeddingRequest *this, const sirinluinternalembedding::EmbeddingRequest *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  sirinluinternal::TokenChain *v10;
  sirinluinternal::TokenChain *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BAEC20;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *v4;
    *v4 = (uint64_t)v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = (sirinluinternal::TokenChain *)operator new();
    v11 = sirinluinternal::TokenChain::TokenChain(v10, *((const sirinluinternal::TokenChain **)a2 + 2));
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingRequest *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalembedding::EmbeddingRequest *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest((sirinluinternalembedding::EmbeddingRequest *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest((sirinluinternalembedding::EmbeddingRequest *)v5);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingRequest *a2, sirinluinternalembedding::EmbeddingRequest *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BAEC20;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100](v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingRequest::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingRequest::EmbeddingRequest(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalembedding::EmbeddingRequest::~EmbeddingRequest((sirinluinternalembedding::EmbeddingRequest *)&v5);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingRequest::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_21;
    return 0;
  }
  if (!v5)
    return 0;
  v6 = v4[23];
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)v4[23];
  else
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v5[1];
  if (v7 != v8)
    return 0;
  if (v9 >= 0)
    v10 = *(unsigned __int8 **)(a2 + 8);
  else
    v10 = *v5;
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
      goto LABEL_21;
    return 0;
  }
  if (v4[23])
  {
    while (*v4 == *v10)
    {
      ++v4;
      ++v10;
      if (!--v6)
        goto LABEL_21;
    }
    return 0;
  }
LABEL_21:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a2 + 16);
  result = (v12 | v13) == 0;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
    return sirinluinternal::TokenChain::operator==(*(_QWORD **)(a1 + 16), v13);
  return result;
}

unint64_t sirinluinternalembedding::EmbeddingRequest::hash_value(sirinluinternalembedding::EmbeddingRequest *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = sirinluinternal::TokenChain::hash_value((sirinluinternal::TokenChain *)v4);
  return v4 ^ v3;
}

_QWORD *sirinluinternalembedding::EmbeddingRequest::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E7BAEC70;
  v3 = (void **)((char *)this + 40);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::readFrom(sirinluexternalnlu_router::NLRouterServiceResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 16);
  v9 = (uint64_t **)((char *)this + 40);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 76) |= 1u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_77;
              v25 += 7;
              v22 = v28;
              v16 = v26++ > 8;
            }
            while (!v16);
LABEL_59:
            LODWORD(v27) = 0;
            goto LABEL_77;
          }
          v49 = 0;
          v50 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v51 = v22 + 1;
              v52 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v51;
              v27 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v22 = v51;
                v16 = v50++ > 8;
                if (v16)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_77:
          *((_DWORD *)this + 16) = v27;
          goto LABEL_86;
        case 2u:
          *((_BYTE *)this + 76) |= 4u;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_81;
              v33 += 7;
              v30 = v36;
              v16 = v34++ > 8;
            }
            while (!v16);
LABEL_66:
            LODWORD(v35) = 0;
            goto LABEL_81;
          }
          v53 = 0;
          v54 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v55 = v30 + 1;
              v56 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)a2 + 1) = v55;
              v35 |= (unint64_t)(v56 & 0x7F) << v53;
              if (v56 < 0)
              {
                v53 += 7;
                v30 = v55;
                v16 = v54++ > 8;
                if (v16)
                  goto LABEL_66;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v35) = 0;
            }
            break;
          }
LABEL_81:
          *((_DWORD *)this + 18) = v35;
          goto LABEL_86;
        case 3u:
          PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>(v9);
          v38 = *((_QWORD *)this + 6);
          goto LABEL_40;
        case 4u:
          PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>(v8);
          v38 = *((_QWORD *)this + 3);
LABEL_40:
          v39 = *(_QWORD *)(v38 - 8);
          goto LABEL_50;
        case 5u:
          *((_BYTE *)this + 76) |= 2u;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          v42 = *(_QWORD *)a2;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)a2 + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_85;
              v43 += 7;
              v40 = v46;
              v16 = v44++ > 8;
            }
            while (!v16);
LABEL_73:
            LODWORD(v45) = 0;
            goto LABEL_85;
          }
          v57 = 0;
          v58 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v59 = v40 + 1;
              v60 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)a2 + 1) = v59;
              v45 |= (unint64_t)(v60 & 0x7F) << v57;
              if (v60 < 0)
              {
                v57 += 7;
                v40 = v59;
                v16 = v58++ > 8;
                if (v16)
                  goto LABEL_73;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_85:
          *((_DWORD *)this + 17) = v45;
          goto LABEL_86;
        case 6u:
          v39 = operator new();
          *(_QWORD *)v39 = &off_1E7BB0190;
          *(_QWORD *)(v39 + 8) = 0;
          *(_DWORD *)(v39 + 16) = 0;
          v48 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v39;
          if (v48)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
            v39 = *((_QWORD *)this + 1);
          }
LABEL_50:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v39 + 16))(v39, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_86;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_86:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base *v11;

  v3 = this;
  v4 = *(_BYTE *)(this + 76);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 76);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base ***)(v3 + 40);
  v6 = *(const PB::Base ***)(v3 + 48);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  v8 = *(const PB::Base ***)(v3 + 16);
  v9 = *(const PB::Base ***)(v3 + 24);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  if ((*(_BYTE *)(v3 + 76) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v11 = *(const PB::Base **)(v3 + 8);
  if (v11)
    return PB::Writer::writeSubmessage(a2, v11);
  return this;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::formatText(sirinluexternalnlu_router::NLRouterServiceResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "gen_ai_metadata");
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "query_rewrites");
  }
  v9 = *((_BYTE *)this + 76);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "routingDecisionSource");
    v9 = *((_BYTE *)this + 76);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(a2, "routing_decision");
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v11 = (uint64_t *)*((_QWORD *)this + 6);
  while (v10 != v11)
  {
    v12 = *v10++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "siri_x_rewrite_utterances");
  }
  if ((*((_BYTE *)this + 76) & 4) != 0)
    PB::TextFormatter::format(a2, "status");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAE908;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F14510(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAEC70;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAEC70;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

sirinluexternalnlu_router::NLRouterServiceResponse *sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(sirinluexternalnlu_router::NLRouterServiceResponse *this, const sirinluexternalnlu_router::NLRouterServiceResponse *a2)
{
  uint64_t *v4;
  sirinluexternalnlu_router::NLRouterRewriteUtterance ***v5;
  char v6;
  int v7;
  int v8;
  const sirinluexternal::UUID ***v9;
  const sirinluexternal::UUID ***v10;
  const sirinluexternal::UUID ***v11;
  const sirinluexternal::UUID ***i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;
  int v19;
  uint64_t v20;

  *(_QWORD *)this = &off_1E7BAEC70;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (sirinluexternalnlu_router::NLRouterRewriteUtterance ***)((char *)this + 40);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 76) & 1) == 0)
  {
    v6 = 4;
    if ((*((_BYTE *)a2 + 76) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 76) = 1;
  *((_DWORD *)this + 16) = v7;
  v6 = 5;
  if ((*((_BYTE *)a2 + 76) & 4) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 18);
    *((_BYTE *)this + 76) = v6;
    *((_DWORD *)this + 18) = v8;
  }
LABEL_6:
  v9 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 5);
  v10 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 6);
  while (v9 != v10)
    PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>(v5, *v9++);
  v11 = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 2);
  for (i = (const sirinluexternal::UUID ***)*((_QWORD *)a2 + 3); v11 != i; ++v11)
    PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>((sirinluexternalnlu_router::NLRouterRewriteUtterance ***)this + 2, *v11);
  if ((*((_BYTE *)a2 + 76) & 2) != 0)
  {
    v13 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 76) |= 2u;
    *((_DWORD *)this + 17) = v13;
  }
  if (*((_QWORD *)a2 + 1))
  {
    v14 = operator new();
    v15 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v14 = &off_1E7BB0190;
    *(_QWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 16) = 0;
    v16 = *(_BYTE *)(v15 + 16);
    if ((v16 & 1) != 0)
    {
      v18 = *(_DWORD *)(v15 + 8);
      *(_BYTE *)(v14 + 16) = 1;
      *(_DWORD *)(v14 + 8) = v18;
      v17 = 3;
      if ((v16 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v17 = 2;
      if ((*(_BYTE *)(v15 + 16) & 2) == 0)
      {
LABEL_19:
        v20 = *v4;
        *v4 = v14;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        return this;
      }
    }
    v19 = *(_DWORD *)(v15 + 12);
    *(_BYTE *)(v14 + 16) = v17;
    *(_DWORD *)(v14 + 12) = v19;
    goto LABEL_19;
  }
  return this;
}

uint64_t PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::emplace_back<sirinluexternalnlu_router::NLRouterRewriteUtterance const&>(sirinluexternalnlu_router::NLRouterRewriteUtterance ***a1, const sirinluexternal::UUID **a2)
{
  sirinluexternalnlu_router::NLRouterRewriteUtterance *v4;
  uint64_t result;
  unint64_t v6;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v7;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v14;
  unint64_t v15;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v16;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v17;
  sirinluexternalnlu_router::NLRouterRewriteUtterance *v18;
  int64x2_t v19;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluexternalnlu_router::NLRouterRewriteUtterance *)operator new();
  result = (uint64_t)sirinluexternalnlu_router::NLRouterRewriteUtterance::NLRouterRewriteUtterance(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F148AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::operator=(uint64_t a1, const sirinluexternalnlu_router::NLRouterServiceResponse *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  if ((const sirinluexternalnlu_router::NLRouterServiceResponse *)a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse((sirinluexternalnlu_router::NLRouterServiceResponse *)&v9, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse((sirinluexternalnlu_router::NLRouterServiceResponse *)&v9);
  }
  return a1;
}

double sirinluexternalnlu_router::swap(sirinluexternalnlu_router *this, sirinluexternalnlu_router::NLRouterServiceResponse *a2, sirinluexternalnlu_router::NLRouterServiceResponse *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  result = *((double *)a2 + 8);
  v12 = *((_QWORD *)this + 8);
  *((double *)this + 8) = result;
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E7BAEC70;
  v4 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (_OWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 40));
  *v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  v6 = *(_DWORD *)(a2 + 68);
  v7 = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 8) = 0u;
  *(_DWORD *)(a1 + 68) = v6;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  if (a1 != a2)
  {
    sirinluexternalnlu_router::NLRouterServiceResponse::NLRouterServiceResponse((uint64_t)&v9, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = v14;
    v14 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    sirinluexternalnlu_router::NLRouterServiceResponse::~NLRouterServiceResponse((sirinluexternalnlu_router::NLRouterServiceResponse *)&v9);
  }
  return a1;
}

BOOL sirinluexternalnlu_router::NLRouterServiceResponse::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 76);
  v5 = *(_BYTE *)(a2 + 76);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 1) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 76) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 76) & 4) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 76) & 4) != 0)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(uint64_t **)(a2 + 40), *(_QWORD *)(a2 + 48));
  if (result)
  {
    result = PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
    if (result)
    {
      if ((v4 & 2) != 0)
      {
        if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
          return 0;
      }
      else if ((v5 & 2) != 0)
      {
        return 0;
      }
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a2 + 8);
      result = (v7 | v8) == 0;
      if (v7)
      {
        if (v8)
          return sirinluexternalnlu_router::NLRoutingGenAIMetadata::operator==(*(_QWORD *)(a1 + 8), v8);
      }
    }
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternalnlu_router::NLRouterRewriteUtterance>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternalnlu_router::NLRouterRewriteUtterance::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

uint64_t sirinluexternalnlu_router::NLRouterServiceResponse::hash_value(sirinluexternalnlu_router::NLRouterServiceResponse *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v5;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v6;
  uint64_t v7;
  sirinluexternalnlu_router::NLRouterRewriteUtterance *v8;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v9;
  sirinluexternalnlu_router::NLRouterRewriteUtterance **v10;
  uint64_t v11;
  sirinluexternalnlu_router::NLRouterRewriteUtterance *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_BYTE *)this + 76);
  if ((v2 & 1) != 0)
  {
    v3 = *((int *)this + 16);
    if ((*((_BYTE *)this + 76) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 76) & 4) != 0)
    {
LABEL_3:
      v4 = *((int *)this + 18);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v5 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((_QWORD *)this + 5);
  v6 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((_QWORD *)this + 6);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v7 ^= sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(v8);
    }
    while (v5 != v6);
  }
  v9 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((_QWORD *)this + 2);
  v10 = (sirinluexternalnlu_router::NLRouterRewriteUtterance **)*((_QWORD *)this + 3);
  if (v9 == v10)
  {
    v11 = 0;
    if ((v2 & 2) == 0)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v9++;
      v11 ^= sirinluexternalnlu_router::NLRouterRewriteUtterance::hash_value(v12);
    }
    while (v9 != v10);
    if ((v2 & 2) == 0)
      goto LABEL_15;
  }
  v13 = *((int *)this + 17);
LABEL_18:
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 16) & 1) != 0)
    {
      v15 = *(int *)(v14 + 8);
      if ((*(_BYTE *)(v14 + 16) & 2) != 0)
        goto LABEL_21;
    }
    else
    {
      v15 = 0;
      if ((*(_BYTE *)(v14 + 16) & 2) != 0)
      {
LABEL_21:
        v16 = *(int *)(v14 + 12);
LABEL_24:
        v14 = v16 ^ v15;
        return v4 ^ v3 ^ v13 ^ v14 ^ v7 ^ v11;
      }
    }
    v16 = 0;
    goto LABEL_24;
  }
  return v4 ^ v3 ^ v13 ^ v14 ^ v7 ^ v11;
}

_QWORD *sirinluexternalnlu_router::NLRouterServiceResponse::makeGenAiMetadata(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0190;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse(sirinluinternaltokenizer::TokenizerResponse *this)
{
  sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAECC0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::readFrom(sirinluinternaltokenizer::TokenizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0CB8;
        *(_QWORD *)(v20 + 24) = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 1);
        }
      }
      else
      {
        if ((_DWORD)v19 == 2)
        {
          v24 = (_QWORD *)operator new();
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          v25 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v24;
          if (v25)
            std::default_delete<std::string>::operator()[abi:ne180100](v25);
          PB::Reader::read();
          goto LABEL_36;
        }
        if ((_DWORD)v19 != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_36;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0140;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_QWORD *)(v20 + 40) = 0;
        v21 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 3);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_36:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::formatText(sirinluinternaltokenizer::TokenizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "asrId");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "token_chain");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(_QWORD *this)
{
  *this = &off_1E7BAECC0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAECC0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternaltokenizer::TokenizerResponse *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(sirinluinternaltokenizer::TokenizerResponse *this, const sirinluinternal::TokenChain **a2)
{
  uint64_t *v4;
  sirinluinternal::TokenChain *v5;
  sirinluinternal::TokenChain *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluinternal::TokenChain *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E7BAECC0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2[3])
  {
    v5 = (sirinluinternal::TokenChain *)operator new();
    v6 = sirinluinternal::TokenChain::TokenChain(v5, a2[3]);
    v7 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[2];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  if (a2[1])
  {
    v13 = operator new();
    v14 = sirinluexternal::UUID::UUID(v13, a2[1]);
    v15 = *v4;
    *v4 = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return this;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::operator=(uint64_t a1, const sirinluinternal::TokenChain **a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const sirinluinternal::TokenChain **)a1 != a2)
  {
    sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse((sirinluinternaltokenizer::TokenizerResponse *)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse((sirinluinternaltokenizer::TokenizerResponse *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternaltokenizer::swap(_QWORD *this, sirinluinternaltokenizer::TokenizerResponse *a2, sirinluinternaltokenizer::TokenizerResponse *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

_QWORD *sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E7BAECC0;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  v5 = a2[3];
  a2[3] = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[2];
  a2[2] = 0;
  v8 = a1[2];
  a1[2] = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  v9 = a2[1];
  a2[1] = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sirinluinternaltokenizer::TokenizerResponse::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    sirinluinternaltokenizer::TokenizerResponse::~TokenizerResponse((sirinluinternaltokenizer::TokenizerResponse *)&v6);
  }
  return a1;
}

BOOL sirinluinternaltokenizer::TokenizerResponse::operator==(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v4 = (_QWORD *)a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !sirinluinternal::TokenChain::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = (unsigned __int8 *)a1[2];
  v7 = (unsigned __int8 **)a2[2];
  if (!v6)
  {
    if (!v7)
      goto LABEL_26;
    return 0;
  }
  if (!v7)
    return 0;
  v8 = v6[23];
  if ((v8 & 0x80u) == 0)
    v9 = (unsigned __int8 *)v6[23];
  else
    v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v11 = (char)v10;
  if ((char)v10 < 0)
    v10 = v7[1];
  if (v9 != v10)
    return 0;
  if (v11 >= 0)
    v12 = (unsigned __int8 *)a2[2];
  else
    v12 = *v7;
  if ((v8 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
      goto LABEL_26;
    return 0;
  }
  if (v6[23])
  {
    while (*v6 == *v12)
    {
      ++v6;
      ++v12;
      if (!--v8)
        goto LABEL_26;
    }
    return 0;
  }
LABEL_26:
  v14 = a1[1];
  v15 = a2[1];
  result = (v14 | v15) == 0;
  if (v14)
    v16 = v15 == 0;
  else
    v16 = 1;
  if (!v16)
    return sirinluexternal::UUID::operator==(a1[1], v15);
  return result;
}

unint64_t sirinluinternaltokenizer::TokenizerResponse::hash_value(sirinluinternaltokenizer::TokenizerResponse *this)
{
  sirinluinternal::TokenChain *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 3);
  if (v2)
    v3 = sirinluinternal::TokenChain::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 28) & 1) != 0)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if ((*(_BYTE *)(v5 + 28) & 2) != 0)
      {
LABEL_9:
        v7 = *(_QWORD *)(v5 + 16);
        if ((*(_BYTE *)(v5 + 28) & 4) != 0)
        {
LABEL_10:
          v8 = *(int *)(v5 + 24);
LABEL_14:
          v5 = v7 ^ v6 ^ v8;
          return v4 ^ v3 ^ v5;
        }
LABEL_13:
        v8 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      v6 = 0;
      if ((*(_BYTE *)(v5 + 28) & 2) != 0)
        goto LABEL_9;
    }
    v7 = 0;
    if ((*(_BYTE *)(v5 + 28) & 4) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  return v4 ^ v3 ^ v5;
}

_QWORD *sirinluinternaltokenizer::TokenizerResponse::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternaltokenizer::TokenizerResponse::makeAsrId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0CB8;
    v2[3] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUINTERNALPLAN_GENERATIONPlanGenerationResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPair *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPair *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addPlans:", v17);
LABEL_25:

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPair);
    objc_msgSend(a1, "addMappings:", v17);
    if (!PBReaderPlaceMark()
      || !SIRINLUINTERNALPLAN_GENERATIONVariableEventIdPairReadFrom((uint64_t)v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMentionDetectorSpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALPSCPSCServiceResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_DWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALUsoEdgeLabelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  SIRINLUEXTERNALUsoLabel *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(SIRINLUEXTERNALUsoLabel);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUsoLabelReadFrom((uint64_t)v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v25 = 0;
          v26 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
              break;
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v20 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_45;
            v25 += 7;
            v14 = v26++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_47;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_47:
          v31 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_41;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_43;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_43:
          v31 = 20;
        }
        *(_DWORD *)(a1 + v31) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F182FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PB::Writer *a9)
{
  uint64_t v9;
  void *v10;

  std::unique_ptr<PB::Writer>::reset[abi:ne180100](&a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1)
{
  PB::Writer *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

void sirinluinternal::InternalSpanData::~InternalSpanData(sirinluinternal::InternalSpanData *this)
{
  sirinluinternal::InternalSpanData::~InternalSpanData(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAED10;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::InternalSpanData::readFrom(sirinluinternal::InternalSpanData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0628;
        *(_DWORD *)(v20 + 28) = 0;
        v21 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 5);
        }
        break;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB1990;
        *(_DWORD *)(v20 + 16) = 0;
        v22 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 4);
        }
        break;
      case 3u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAE5A8;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 40) = 0;
        v23 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 3);
        }
        break;
      case 4u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB03C8;
        *(_DWORD *)(v20 + 16) = 0;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      case 5u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0A88;
        *(_DWORD *)(v20 + 24) = 0;
        v25 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_36:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_36;
  return result;
}

uint64_t sirinluinternal::InternalSpanData::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[4];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[3];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[1];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[2];
  if (v8)
    return PB::Writer::writeSubmessage(a2, v8);
  return this;
}

uint64_t sirinluinternal::InternalSpanData::formatText(sirinluinternal::InternalSpanData *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "mention_detector_span_data");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "mention_resolver_span_data");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "overton_kg_span_data");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "plum_span_data");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "siri_vocabulary_span_data");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::InternalSpanData::InternalSpanData(sirinluinternal::InternalSpanData *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAED10;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAED10;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

sirinluinternal::InternalSpanData *sirinluinternal::InternalSpanData::InternalSpanData(sirinluinternal::InternalSpanData *this, const sirinluinternal::SiriVocabularySpanData **a2)
{
  uint64_t *v4;
  sirinluinternal::SiriVocabularySpanData *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const sirinluinternal::SiriVocabularySpanData *v10;
  uint64_t v11;
  uint64_t v12;
  sirinluinternal::OvertonKGSpanData *v13;
  sirinluinternal::OvertonKGSpanData *v14;
  uint64_t v15;
  uint64_t v16;
  const sirinluinternal::SiriVocabularySpanData *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const sirinluinternal::SiriVocabularySpanData *v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_1E7BAED10;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (a2[5])
  {
    v5 = (sirinluinternal::SiriVocabularySpanData *)operator new();
    v6 = sirinluinternal::SiriVocabularySpanData::SiriVocabularySpanData(v5, a2[5]);
    v7 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v8;
    if (v7)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 8))(v7, v6);
  }
  if (a2[4])
  {
    v9 = operator new();
    v10 = a2[4];
    *(_QWORD *)v9 = &off_1E7BB1990;
    *(_DWORD *)(v9 + 16) = 0;
    if ((*((_BYTE *)v10 + 16) & 1) != 0)
    {
      v11 = *((_QWORD *)v10 + 1);
      *(_BYTE *)(v9 + 16) = 1;
      *(_QWORD *)(v9 + 8) = v11;
    }
    v12 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v9;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (a2[3])
  {
    v13 = (sirinluinternal::OvertonKGSpanData *)operator new();
    v14 = sirinluinternal::OvertonKGSpanData::OvertonKGSpanData(v13, a2[3]);
    v15 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (a2[1])
  {
    v16 = operator new();
    v17 = a2[1];
    *(_QWORD *)v16 = &off_1E7BB03C8;
    *(_DWORD *)(v16 + 16) = 0;
    if ((*((_BYTE *)v17 + 16) & 1) != 0)
    {
      v18 = *((_QWORD *)v17 + 1);
      *(_BYTE *)(v16 + 16) = 1;
      *(_QWORD *)(v16 + 8) = v18;
    }
    v19 = *v4;
    *v4 = v16;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (a2[2])
  {
    v20 = operator new();
    v21 = a2[2];
    *(_QWORD *)v20 = &off_1E7BB0A88;
    *(_DWORD *)(v20 + 24) = 0;
    v22 = *((_BYTE *)v21 + 24);
    if ((v22 & 1) != 0)
    {
      v24 = *((_QWORD *)v21 + 1);
      *(_BYTE *)(v20 + 24) = 1;
      *(_QWORD *)(v20 + 8) = v24;
      v23 = 3;
      if ((v22 & 2) == 0)
        goto LABEL_23;
    }
    else
    {
      v23 = 2;
      if ((*((_BYTE *)v21 + 24) & 2) == 0)
      {
LABEL_23:
        v26 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        return this;
      }
    }
    v25 = *((_QWORD *)v21 + 2);
    *(_BYTE *)(v20 + 24) = v23;
    *(_QWORD *)(v20 + 16) = v25;
    goto LABEL_23;
  }
  return this;
}

uint64_t sirinluinternal::InternalSpanData::operator=(uint64_t a1, const sirinluinternal::SiriVocabularySpanData **a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const sirinluinternal::SiriVocabularySpanData **)a1 != a2)
  {
    sirinluinternal::InternalSpanData::InternalSpanData((sirinluinternal::InternalSpanData *)&v7, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluinternal::InternalSpanData::~InternalSpanData((sirinluinternal::InternalSpanData *)&v7);
  }
  return a1;
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::InternalSpanData *a2, sirinluinternal::InternalSpanData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v3;
  v4 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  return this;
}

uint64_t sirinluinternal::InternalSpanData::InternalSpanData(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = &off_1E7BAED10;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = a2[5];
  a2[5] = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[4];
  a2[4] = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[3];
  a2[3] = 0;
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a2[1];
  a2[1] = 0;
  v12 = *v4;
  *v4 = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = a2[2];
  a2[2] = 0;
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

uint64_t sirinluinternal::InternalSpanData::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternal::InternalSpanData::InternalSpanData((uint64_t)&v7, a2);
    v3 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    sirinluinternal::InternalSpanData::~InternalSpanData((sirinluinternal::InternalSpanData *)&v7);
  }
  return a1;
}

BOOL sirinluinternal::InternalSpanData::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;

  v4 = a1[5];
  v5 = a2[5];
  if (v4)
  {
    if (!v5 || !sirinluinternal::SiriVocabularySpanData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a1[4];
  v7 = a2[4];
  if (v6)
  {
    if (!v7)
      return 0;
    if ((*(_BYTE *)(v6 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v7 + 16) & 1) == 0 || *(double *)(v6 + 8) != *(double *)(v7 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  v8 = a1[3];
  v9 = a2[3];
  if (v8)
  {
    if (!v9 || !sirinluinternal::OvertonKGSpanData::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = a1[1];
  v11 = a2[1];
  if (!v10)
  {
    if (!v11)
      goto LABEL_29;
    return 0;
  }
  if (!v11)
    return 0;
  if ((*(_BYTE *)(v10 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(v11 + 16) & 1) == 0 || *(double *)(v10 + 8) != *(double *)(v11 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(v11 + 16) & 1) != 0)
  {
    return 0;
  }
LABEL_29:
  v12 = a1[2];
  v13 = a2[2];
  result = (v12 | v13) == 0;
  if (v12)
  {
    if (v13)
      return sirinluinternal::MentionResolverSpanData::operator==(a1[2], v13);
  }
  return result;
}

unint64_t sirinluinternal::InternalSpanData::hash_value(sirinluinternal::InternalSpanData *this)
{
  sirinluinternal::SiriVocabularySpanData *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;

  v2 = (sirinluinternal::SiriVocabularySpanData *)*((_QWORD *)this + 5);
  if (v2)
    v3 = sirinluinternal::SiriVocabularySpanData::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4 && (*(_BYTE *)(v4 + 16) & 1) != 0)
  {
    v6 = *(double *)(v4 + 8);
    if (v6 == 0.0)
      v5 = 0.0;
    else
      v5 = v6;
  }
  else
  {
    v5 = 0.0;
  }
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v7 = sirinluinternal::OvertonKGSpanData::hash_value((sirinluinternal::OvertonKGSpanData *)v7);
  v8 = *((double *)this + 1);
  if (v8 != 0.0)
  {
    if ((*(_BYTE *)(*(_QWORD *)&v8 + 16) & 1) != 0)
    {
      v8 = *(double *)(*(_QWORD *)&v8 + 8);
      if (v8 == 0.0)
        v8 = 0.0;
    }
    else
    {
      v8 = 0.0;
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 24) & 1) != 0)
    {
      v10 = *(double *)(v9 + 8);
      if (v10 == 0.0)
        v10 = 0.0;
      if ((*(_BYTE *)(v9 + 24) & 2) != 0)
        goto LABEL_20;
    }
    else
    {
      v10 = 0.0;
      if ((*(_BYTE *)(v9 + 24) & 2) != 0)
      {
LABEL_20:
        v11 = *(double *)(v9 + 16);
        if (v11 == 0.0)
          v11 = 0.0;
        goto LABEL_27;
      }
    }
    v11 = 0.0;
LABEL_27:
    v9 = *(_QWORD *)&v11 ^ *(_QWORD *)&v10;
  }
  return *(_QWORD *)&v5 ^ v3 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
}

_QWORD *sirinluinternal::InternalSpanData::makeSiriVocabularySpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0628;
    *(_DWORD *)(v2 + 28) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::InternalSpanData::makePlumSpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1990;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::InternalSpanData::makeOvertonKgSpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAE5A8;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::InternalSpanData::makeMentionDetectorSpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB03C8;
    *(_DWORD *)(v2 + 16) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::InternalSpanData::makeMentionResolverSpanData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0A88;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAED60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_28;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v22;
        if (v23)
          std::default_delete<std::string>::operator()[abi:ne180100](v23);
        PB::Reader::read();
      }
      else if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAEE20;
        v19[1] = 0;
        v19[2] = 0;
        v19[3] = 0;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 2);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_28:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_28;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "rules");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAED60;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAED60;
  return this;
}

sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **a2)
{
  uint64_t *v4;
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *v5;
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BAED60;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[2])
  {
    v5 = (sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)operator new();
    v6 = sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(v5, a2[2]);
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[1])
  {
    v8 = (std::string *)operator new();
    v9 = v8;
    v10 = a2[1];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v8->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
    }
    v12 = *v4;
    *v4 = (uint64_t)v9;
    if (v12)
      std::default_delete<std::string>::operator()[abi:ne180100](v12);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules **)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAED60;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::~ITFMExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  result = v7 == 0;
  if (!v6)
    return result;
  if (!v7)
    return 0;
  v9 = v6[23];
  if ((v9 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v6[23];
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v7[1];
  if (v10 != v11)
    return 0;
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a2 + 8);
  else
    v13 = *v7;
  if ((v9 & 0x80) != 0)
    return !memcmp(*(const void **)v6, v13, *((_QWORD *)v6 + 1));
  if (!v6[23])
    return 1;
  v14 = v9 - 1;
  do
  {
    v16 = *v6++;
    v15 = v16;
    v18 = *v13++;
    v17 = v18;
    v20 = v14-- != 0;
    result = v15 == v17;
  }
  while (v15 == v17 && v20);
  return result;
}

unint64_t sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 2);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 8), v4 = *(_QWORD *)(v2 + 16), v3 == v4))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v5 ^= std::__string_hash<char>::operator()[abi:ne180100](v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
    v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  return v6 ^ v5;
}

_QWORD *sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::makeRules(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAEE20;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL SIRINLUEXTERNALSystemDialogActGroupReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALSystemDialogAct *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogAct);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALSystemDialogActReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALSystemDialogActGroup);
    objc_msgSend(a1, "addChildActs:", v17);
    if (!PBReaderPlaceMark() || (SIRINLUEXTERNALSystemDialogActGroupReadFrom(v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUEXTERNALRepetitionResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__asrHypothesisIndex;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___SIRINLUEXTERNALRepetitionResult__repetitionType;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::UsoEntitySpan::~UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
  sirinluexternal::UsoEntitySpan::~UsoEntitySpan(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = &off_1E7BAEDD0;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 10);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 11);
    v5 = (void *)*((_QWORD *)this + 10);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v3;
    operator delete(v5);
  }
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (_QWORD *)*((_QWORD *)this + 1);
  if (v14)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 2);
    v16 = (void *)*((_QWORD *)this + 1);
    if (v15 != v14)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v14;
    operator delete(v16);
  }
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoEntitySpan::readFrom(sirinluexternal::UsoEntitySpan *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  char *v9;
  void (**v10)(sirinluexternal::MatchInfo *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(sirinluexternal::MatchInfo *__hidden);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  int64x2_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  int64x2_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v93;
  int64x2_t v94;
  unint64_t v95;
  char *v96;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (char *)this + 24;
  v9 = (char *)this + 96;
  v10 = &off_1E7BB1E20;
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 120) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_113;
              v26 += 7;
              v23 = v29;
              v17 = v27++ > 8;
            }
            while (!v17);
LABEL_72:
            LODWORD(v28) = 0;
            goto LABEL_113;
          }
          v61 = 0;
          v62 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v63 = v23 + 1;
              v64 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)a2 + 1) = v63;
              v28 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                v23 = v63;
                v17 = v62++ > 8;
                if (v17)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_113:
          *((_DWORD *)this + 28) = v28;
          goto LABEL_114;
        case 2u:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BB0538;
          *(_QWORD *)(v31 + 8) = 0;
          v44 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = v31;
          if (v44)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            v31 = *((_QWORD *)this + 7);
          }
          goto LABEL_54;
        case 3u:
          *((_BYTE *)this + 120) |= 2u;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          v36 = *(_QWORD *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_110;
              v37 += 7;
              v34 = v40;
              v17 = v38++ > 8;
            }
            while (!v17);
LABEL_65:
            LODWORD(v39) = 0;
            goto LABEL_110;
          }
          v57 = 0;
          v58 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v59 = v34 + 1;
              v60 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)a2 + 1) = v59;
              v39 |= (unint64_t)(v60 & 0x7F) << v57;
              if (v60 < 0)
              {
                v57 += 7;
                v34 = v59;
                v17 = v58++ > 8;
                if (v17)
                  goto LABEL_65;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_110:
          *((_DWORD *)this + 29) = v39;
          goto LABEL_114;
        case 4u:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BB0538;
          *(_QWORD *)(v31 + 8) = 0;
          v42 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v31;
          if (v42)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
            v31 = *((_QWORD *)this + 5);
          }
          goto LABEL_54;
        case 5u:
          v31 = operator new();
          *(_QWORD *)v31 = v10;
          *(_DWORD *)(v31 + 100) = 0;
          *(_OWORD *)(v31 + 8) = 0u;
          *(_OWORD *)(v31 + 24) = 0u;
          *(_OWORD *)(v31 + 40) = 0u;
          *(_OWORD *)(v31 + 56) = 0u;
          *(_OWORD *)(v31 + 72) = 0u;
          *(_QWORD *)(v31 + 88) = 0;
          v32 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v31;
          if (v32)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v31 = *((_QWORD *)this + 6);
          }
          goto LABEL_54;
        case 6u:
          v45 = v10;
          v46 = operator new();
          v47 = v46;
          *(_QWORD *)v46 = &off_1E7BAFEA0;
          *(_OWORD *)(v46 + 8) = 0u;
          *(_OWORD *)(v46 + 24) = 0u;
          v49 = (uint64_t *)*((_QWORD *)this + 11);
          v48 = *((_QWORD *)this + 12);
          if ((unint64_t)v49 >= v48)
          {
            v65 = *((_QWORD *)this + 10);
            v66 = ((uint64_t)v49 - v65) >> 3;
            if ((unint64_t)(v66 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v67 = v48 - v65;
            v68 = v67 >> 2;
            if (v67 >> 2 <= (unint64_t)(v66 + 1))
              v68 = v66 + 1;
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            v96 = v9;
            if (v69)
              v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v69);
            else
              v70 = 0;
            v77 = (uint64_t *)(v69 + 8 * v66);
            v78 = v69 + 8 * v70;
            v95 = v78;
            *v77 = v47;
            v50 = v77 + 1;
            v94.i64[1] = (uint64_t)(v77 + 1);
            v80 = (_QWORD *)*((_QWORD *)this + 10);
            v79 = (_QWORD *)*((_QWORD *)this + 11);
            if (v79 == v80)
            {
              v82 = vdupq_n_s64((unint64_t)v79);
            }
            else
            {
              do
              {
                v81 = *--v79;
                *v79 = 0;
                *--v77 = v81;
              }
              while (v79 != v80);
              v82 = *((int64x2_t *)this + 5);
              v50 = (_QWORD *)v94.i64[1];
              v78 = v95;
            }
            *((_QWORD *)this + 10) = v77;
            *((_QWORD *)this + 11) = v50;
            v94 = v82;
            v89 = *((_QWORD *)this + 12);
            *((_QWORD *)this + 12) = v78;
            v95 = v89;
            v93 = v82.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v93);
          }
          else
          {
            *v49 = v46;
            v50 = v49 + 1;
          }
          *((_QWORD *)this + 11) = v50;
          goto LABEL_103;
        case 7u:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BAF448;
          *(_DWORD *)(v31 + 12) = 0;
          v51 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = v31;
          if (v51)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
            v31 = *((_QWORD *)this + 13);
          }
          goto LABEL_54;
        case 8u:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BAF448;
          *(_DWORD *)(v31 + 12) = 0;
          v43 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v31;
          if (v43)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
            v31 = *((_QWORD *)this + 4);
          }
          goto LABEL_54;
        case 9u:
          v45 = v10;
          v53 = (_QWORD *)operator new();
          v54 = v53;
          v53[1] = 0;
          v53[2] = 0;
          *v53 = &off_1E7BB0858;
          v56 = (_QWORD *)*((_QWORD *)this + 2);
          v55 = *((_QWORD *)this + 3);
          if ((unint64_t)v56 >= v55)
          {
            v71 = *((_QWORD *)this + 1);
            v72 = ((uint64_t)v56 - v71) >> 3;
            if ((unint64_t)(v72 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v73 = v55 - v71;
            v74 = v73 >> 2;
            if (v73 >> 2 <= (unint64_t)(v72 + 1))
              v74 = v72 + 1;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v74;
            v96 = v8;
            if (v75)
              v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v75);
            else
              v76 = 0;
            v83 = (_QWORD *)(v75 + 8 * v72);
            v84 = v75 + 8 * v76;
            v95 = v84;
            *v83 = v54;
            v50 = v83 + 1;
            v94.i64[1] = (uint64_t)(v83 + 1);
            v86 = (_QWORD *)*((_QWORD *)this + 1);
            v85 = (_QWORD *)*((_QWORD *)this + 2);
            if (v85 == v86)
            {
              v88 = vdupq_n_s64((unint64_t)v85);
            }
            else
            {
              do
              {
                v87 = *--v85;
                *v85 = 0;
                *--v83 = v87;
              }
              while (v85 != v86);
              v88 = *(int64x2_t *)((char *)this + 8);
              v50 = (_QWORD *)v94.i64[1];
              v84 = v95;
            }
            *((_QWORD *)this + 1) = v83;
            *((_QWORD *)this + 2) = v50;
            v94 = v88;
            v90 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v84;
            v95 = v90;
            v93 = v88.i64[0];
            std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v93);
          }
          else
          {
            *v56 = v53;
            v50 = v56 + 1;
          }
          *((_QWORD *)this + 2) = v50;
LABEL_103:
          v91 = *(v50 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v91 + 16))(v91, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v10 = v45;
          goto LABEL_114;
        case 0xAu:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BB0538;
          *(_QWORD *)(v31 + 8) = 0;
          v33 = *((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v31;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v31 = *((_QWORD *)this + 8);
          }
          goto LABEL_54;
        case 0xBu:
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E7BB1738;
          *(_QWORD *)(v31 + 8) = 0;
          v52 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v31;
          if (v52)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
            v31 = *((_QWORD *)this + 9);
          }
LABEL_54:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v31 + 16))(v31, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_114;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_114:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1C1F1B554(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::UsoEntitySpan::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base **v12;
  const PB::Base **v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;

  v3 = this;
  if ((*(_BYTE *)(this + 120) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(const PB::Base **)(v3 + 56);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 120) & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 48);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base ***)(v3 + 80);
  v8 = *(const PB::Base ***)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = *(const PB::Base **)(v3 + 104);
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = *(const PB::Base **)(v3 + 32);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = *(const PB::Base ***)(v3 + 8);
  v13 = *(const PB::Base ***)(v3 + 16);
  while (v12 != v13)
  {
    v14 = *v12++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  v15 = *(const PB::Base **)(v3 + 64);
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15);
  v16 = *(const PB::Base **)(v3 + 72);
  if (v16)
    return PB::Writer::writeSubmessage(a2, v16);
  return this;
}

uint64_t sirinluexternal::UsoEntitySpan::formatText(sirinluexternal::UsoEntitySpan *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "alternatives");
  }
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "end_index");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "label");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "match_info");
  if ((*((_BYTE *)this + 120) & 1) != 0)
    PB::TextFormatter::format(a2, "node_index");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "origin_app_id");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "origin_entity_id");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "payload_attachment_info");
  v14 = (uint64_t *)*((_QWORD *)this + 10);
  v15 = (uint64_t *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "properties");
  }
  if ((*((_BYTE *)this + 120) & 2) != 0)
    PB::TextFormatter::format(a2, "source_component");
  v17 = *((_QWORD *)this + 13);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "start_index");
  return PB::TextFormatter::endObject(a2);
}

double sirinluexternal::UsoEntitySpan::UsoEntitySpan(sirinluexternal::UsoEntitySpan *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAEDD0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAEDD0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

sirinluexternal::UsoEntitySpan *sirinluexternal::UsoEntitySpan::UsoEntitySpan(sirinluexternal::UsoEntitySpan *this, const sirinluexternal::UsoEntitySpan *a2)
{
  int64x2_t *v4;
  int v5;
  siricommon::StringValue *v6;
  siricommon::StringValue *v7;
  uint64_t v8;
  int v9;
  siricommon::StringValue *v10;
  siricommon::StringValue *v11;
  uint64_t v12;
  sirinluexternal::MatchInfo *v13;
  sirinluexternal::MatchInfo *matched;
  uint64_t v15;
  const sirinluexternal::SpanProperty **v16;
  const sirinluexternal::SpanProperty **i;
  const sirinluexternal::SpanProperty *v18;
  sirinluexternal::SpanProperty *v19;
  unint64_t v20;
  sirinluexternal::SpanProperty **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  sirinluexternal::SpanProperty **v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  sirinluexternal::SpanProperty *v33;
  int64x2_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  const sirinluexternal::AsrAlternative **v44;
  const sirinluexternal::AsrAlternative **j;
  const sirinluexternal::AsrAlternative *v46;
  sirinluexternal::AsrAlternative *v47;
  unint64_t v48;
  sirinluexternal::AsrAlternative **v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  sirinluexternal::AsrAlternative **v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  sirinluexternal::AsrAlternative *v60;
  int64x2_t v61;
  unint64_t v62;
  siricommon::StringValue *v63;
  siricommon::StringValue *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v71;
  int64x2_t v72;
  unint64_t v73;
  char *v74;

  *(_QWORD *)this = &off_1E7BAEDD0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (int64x2_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  if ((*((_BYTE *)a2 + 120) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 28);
    *((_BYTE *)this + 120) = 1;
    *((_DWORD *)this + 28) = v5;
  }
  if (*((_QWORD *)a2 + 7))
  {
    v6 = (siricommon::StringValue *)operator new();
    v7 = siricommon::StringValue::StringValue(v6, *((const siricommon::StringValue **)a2 + 7));
    v8 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((*((_BYTE *)a2 + 120) & 2) != 0)
  {
    v9 = *((_DWORD *)a2 + 29);
    *((_BYTE *)this + 120) |= 2u;
    *((_DWORD *)this + 29) = v9;
  }
  if (*((_QWORD *)a2 + 5))
  {
    v10 = (siricommon::StringValue *)operator new();
    v11 = siricommon::StringValue::StringValue(v10, *((const siricommon::StringValue **)a2 + 5));
    v12 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 6))
  {
    v13 = (sirinluexternal::MatchInfo *)operator new();
    matched = sirinluexternal::MatchInfo::MatchInfo(v13, *((const sirinluexternal::MatchInfo **)a2 + 6));
    v15 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = matched;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = (const sirinluexternal::SpanProperty **)*((_QWORD *)a2 + 10);
  for (i = (const sirinluexternal::SpanProperty **)*((_QWORD *)a2 + 11); v16 != i; ++v16)
  {
    v18 = *v16;
    v19 = (sirinluexternal::SpanProperty *)operator new();
    sirinluexternal::SpanProperty::SpanProperty(v19, v18);
    v21 = (sirinluexternal::SpanProperty **)*((_QWORD *)this + 11);
    v20 = *((_QWORD *)this + 12);
    if ((unint64_t)v21 >= v20)
    {
      v23 = *((_QWORD *)this + 10);
      v24 = ((uint64_t)v21 - v23) >> 3;
      if ((unint64_t)(v24 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = v20 - v23;
      v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1))
        v26 = v24 + 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      v74 = (char *)this + 96;
      if (v27)
        v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v27);
      else
        v28 = 0;
      v29 = (sirinluexternal::SpanProperty **)(v27 + 8 * v24);
      v30 = v27 + 8 * v28;
      v73 = v30;
      *v29 = v19;
      v22 = v29 + 1;
      v72.i64[1] = (uint64_t)(v29 + 1);
      v32 = (_QWORD *)*((_QWORD *)this + 10);
      v31 = (_QWORD *)*((_QWORD *)this + 11);
      if (v31 == v32)
      {
        v34 = vdupq_n_s64((unint64_t)v31);
      }
      else
      {
        do
        {
          v33 = (sirinluexternal::SpanProperty *)*--v31;
          *v31 = 0;
          *--v29 = v33;
        }
        while (v31 != v32);
        v34 = *((int64x2_t *)this + 5);
        v22 = (_QWORD *)v72.i64[1];
        v30 = v73;
      }
      *((_QWORD *)this + 10) = v29;
      *((_QWORD *)this + 11) = v22;
      v72 = v34;
      v35 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v30;
      v73 = v35;
      v71 = v34.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v71);
    }
    else
    {
      *v21 = v19;
      v22 = v21 + 1;
    }
    *((_QWORD *)this + 11) = v22;
  }
  if (*((_QWORD *)a2 + 13))
  {
    v36 = operator new();
    v37 = *((_QWORD *)a2 + 13);
    *(_QWORD *)v36 = &off_1E7BAF448;
    *(_DWORD *)(v36 + 12) = 0;
    if ((*(_BYTE *)(v37 + 12) & 1) != 0)
    {
      v38 = *(_DWORD *)(v37 + 8);
      *(_BYTE *)(v36 + 12) = 1;
      *(_DWORD *)(v36 + 8) = v38;
    }
    v39 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v36;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v40 = operator new();
    v41 = *((_QWORD *)a2 + 4);
    *(_QWORD *)v40 = &off_1E7BAF448;
    *(_DWORD *)(v40 + 12) = 0;
    if ((*(_BYTE *)(v41 + 12) & 1) != 0)
    {
      v42 = *(_DWORD *)(v41 + 8);
      *(_BYTE *)(v40 + 12) = 1;
      *(_DWORD *)(v40 + 8) = v42;
    }
    v43 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v40;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  v44 = (const sirinluexternal::AsrAlternative **)*((_QWORD *)a2 + 1);
  for (j = (const sirinluexternal::AsrAlternative **)*((_QWORD *)a2 + 2); v44 != j; ++v44)
  {
    v46 = *v44;
    v47 = (sirinluexternal::AsrAlternative *)operator new();
    sirinluexternal::AsrAlternative::AsrAlternative(v47, v46);
    v49 = (sirinluexternal::AsrAlternative **)*((_QWORD *)this + 2);
    v48 = *((_QWORD *)this + 3);
    if ((unint64_t)v49 >= v48)
    {
      v51 = ((uint64_t)v49 - v4->i64[0]) >> 3;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v52 = v48 - v4->i64[0];
      v53 = v52 >> 2;
      if (v52 >> 2 <= (unint64_t)(v51 + 1))
        v53 = v51 + 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      v74 = (char *)this + 24;
      if (v54)
        v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v54);
      else
        v55 = 0;
      v56 = (sirinluexternal::AsrAlternative **)(v54 + 8 * v51);
      v57 = v54 + 8 * v55;
      v73 = v57;
      *v56 = v47;
      v50 = v56 + 1;
      v72.i64[1] = (uint64_t)(v56 + 1);
      v59 = (_QWORD *)*((_QWORD *)this + 1);
      v58 = (_QWORD *)*((_QWORD *)this + 2);
      if (v58 == v59)
      {
        v61 = vdupq_n_s64((unint64_t)v58);
      }
      else
      {
        do
        {
          v60 = (sirinluexternal::AsrAlternative *)*--v58;
          *v58 = 0;
          *--v56 = v60;
        }
        while (v58 != v59);
        v61 = *v4;
        v50 = (_QWORD *)v72.i64[1];
        v57 = v73;
      }
      *((_QWORD *)this + 1) = v56;
      *((_QWORD *)this + 2) = v50;
      v72 = v61;
      v62 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v57;
      v73 = v62;
      v71 = v61.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v71);
    }
    else
    {
      *v49 = v47;
      v50 = v49 + 1;
    }
    *((_QWORD *)this + 2) = v50;
  }
  if (*((_QWORD *)a2 + 8))
  {
    v63 = (siricommon::StringValue *)operator new();
    v64 = siricommon::StringValue::StringValue(v63, *((const siricommon::StringValue **)a2 + 8));
    v65 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v64;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  if (*((_QWORD *)a2 + 9))
  {
    v66 = operator new();
    v67 = *((_QWORD *)a2 + 9);
    *(_QWORD *)v66 = &off_1E7BB1738;
    *(_QWORD *)(v66 + 8) = 0;
    if ((*(_BYTE *)(v67 + 12) & 1) != 0)
    {
      v68 = *(_DWORD *)(v67 + 8);
      *(_BYTE *)(v66 + 12) = 1;
      *(_DWORD *)(v66 + 8) = v68;
    }
    v69 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v66;
    if (v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  }
  return this;
}

void sub_1C1F1BF58(void *a1)
{
  __clang_call_terminate(a1);
}

sirinluexternal *sirinluexternal::UsoEntitySpan::operator=(sirinluexternal *a1, const sirinluexternal::UsoEntitySpan *a2)
{
  sirinluexternal::UsoEntitySpan *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    sirinluexternal::UsoEntitySpan::UsoEntitySpan((sirinluexternal::UsoEntitySpan *)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::UsoEntitySpan *)v5, v3);
    sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)v5);
  }
  return a1;
}

double sirinluexternal::swap(sirinluexternal *this, sirinluexternal::UsoEntitySpan *a2, sirinluexternal::UsoEntitySpan *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  result = *((double *)a2 + 14);
  v6 = *((_QWORD *)this + 14);
  *((double *)this + 14) = result;
  *((_QWORD *)a2 + 14) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v9;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v11;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v17;
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v18;
  return result;
}

uint64_t sirinluexternal::UsoEntitySpan::UsoEntitySpan(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = &off_1E7BAEDD0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (_QWORD *)*v9;
  if (*v9)
  {
    v13 = *(_QWORD **)(a1 + 88);
    v14 = (_QWORD *)*v9;
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      while (v13 != v12);
      v14 = (_QWORD *)*v9;
    }
    *(_QWORD *)(a1 + 88) = v12;
    operator delete(v14);
    *v9 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v18 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v20 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (_QWORD *)*v4;
  if (*v4)
  {
    v22 = *(_QWORD **)(a1 + 16);
    v23 = (_QWORD *)*v4;
    if (v22 != v21)
    {
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      while (v22 != v21);
      v23 = (_QWORD *)*v4;
    }
    *(_QWORD *)(a1 + 16) = v21;
    operator delete(v23);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v26 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v27 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v29 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  return a1;
}

sirinluexternal *sirinluexternal::UsoEntitySpan::operator=(sirinluexternal *a1, uint64_t a2)
{
  sirinluexternal::UsoEntitySpan *v3;
  _BYTE v5[128];

  if (a1 != (sirinluexternal *)a2)
  {
    sirinluexternal::UsoEntitySpan::UsoEntitySpan((uint64_t)v5, a2);
    sirinluexternal::swap(a1, (sirinluexternal::UsoEntitySpan *)v5, v3);
    sirinluexternal::UsoEntitySpan::~UsoEntitySpan((sirinluexternal::UsoEntitySpan *)v5);
  }
  return a1;
}

BOOL sirinluexternal::UsoEntitySpan::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_BYTE *)(a1 + 120);
  v5 = *(_BYTE *)(a2 + 120);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 1) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 120) & 1) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (!v7 || (siricommon::StringValue::operator==(v6, v7) & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    if (!v9 || (siricommon::StringValue::operator==(v8, v9) & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    if (!v11 || !sirinluexternal::MatchInfo::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  result = PB::PtrVector<sirinluexternal::SpanProperty>::operator==(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD ***)(a2 + 80), *(_QWORD *)(a2 + 88));
  if (result)
  {
    v13 = *(_QWORD *)(a1 + 104);
    v14 = *(_QWORD *)(a2 + 104);
    if (v13)
    {
      if (!v14)
        return 0;
      if ((*(_BYTE *)(v13 + 12) & 1) != 0)
      {
        if ((*(_BYTE *)(v14 + 12) & 1) == 0 || *(_DWORD *)(v13 + 8) != *(_DWORD *)(v14 + 8))
          return 0;
      }
      else if ((*(_BYTE *)(v14 + 12) & 1) != 0)
      {
        return 0;
      }
    }
    else if (v14)
    {
      return 0;
    }
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a2 + 32);
    if (v15)
    {
      if (!v16)
        return 0;
      if ((*(_BYTE *)(v15 + 12) & 1) != 0)
      {
        if ((*(_BYTE *)(v16 + 12) & 1) == 0 || *(_DWORD *)(v15 + 8) != *(_DWORD *)(v16 + 8))
          return 0;
      }
      else if ((*(_BYTE *)(v16 + 12) & 1) != 0)
      {
        return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
    result = PB::PtrVector<sirinluexternal::AsrAlternative>::operator==(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16));
    if (result)
    {
      v17 = *(_QWORD *)(a1 + 64);
      v18 = *(_QWORD *)(a2 + 64);
      if (v17)
      {
        if (!v18 || (siricommon::StringValue::operator==(v17, v18) & 1) == 0)
          return 0;
      }
      else if (v18)
      {
        return 0;
      }
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(_QWORD *)(a2 + 72);
      result = (v19 | v20) == 0;
      if (v19)
      {
        if (v20)
        {
          if ((*(_BYTE *)(v19 + 12) & 1) != 0)
            return (*(_BYTE *)(v20 + 12) & 1) != 0 && *(_DWORD *)(v19 + 8) == *(_DWORD *)(v20 + 8);
          return (*(_BYTE *)(v20 + 12) & 1) == 0;
        }
      }
    }
  }
  return result;
}

BOOL PB::PtrVector<sirinluexternal::SpanProperty>::operator==(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  _QWORD **v5;
  uint64_t v6;
  _QWORD *v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::SpanProperty::operator==(*(_QWORD **)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

BOOL PB::PtrVector<sirinluexternal::AsrAlternative>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluexternal::AsrAlternative::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluexternal::UsoEntitySpan::hash_value(sirinluexternal::UsoEntitySpan *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  sirinluexternal::MatchInfo *v9;
  uint64_t v10;
  sirinluexternal::SpanProperty **v11;
  sirinluexternal::SpanProperty **v12;
  uint64_t v13;
  sirinluexternal::SpanProperty *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  sirinluexternal::AsrAlternative **v19;
  sirinluexternal::AsrAlternative **v20;
  uint64_t v21;
  sirinluexternal::AsrAlternative *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;

  v2 = *((_BYTE *)this + 120);
  if ((v2 & 1) != 0)
    v3 = *((unsigned int *)this + 28);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 7);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    v27 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_7;
LABEL_9:
    v28 = 0;
    goto LABEL_10;
  }
  v27 = std::__string_hash<char>::operator()[abi:ne180100](v5);
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_7:
  v28 = *((int *)this + 29);
LABEL_10:
  v6 = *((_QWORD *)this + 5);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    v8 = std::__string_hash<char>::operator()[abi:ne180100](v7);
  else
    v8 = 0;
  v9 = (sirinluexternal::MatchInfo *)*((_QWORD *)this + 6);
  if (v9)
    v10 = sirinluexternal::MatchInfo::hash_value(v9);
  else
    v10 = 0;
  v12 = (sirinluexternal::SpanProperty **)*((_QWORD *)this + 10);
  v11 = (sirinluexternal::SpanProperty **)*((_QWORD *)this + 11);
  if (v12 == v11)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v12++;
      v13 ^= sirinluexternal::SpanProperty::hash_value(v14);
    }
    while (v12 != v11);
  }
  v15 = *((_QWORD *)this + 13);
  if (v15 && (*(_BYTE *)(v15 + 12) & 1) != 0)
    v16 = *(unsigned int *)(v15 + 8);
  else
    v16 = 0;
  v17 = *((_QWORD *)this + 4);
  if (v17 && (*(_BYTE *)(v17 + 12) & 1) != 0)
    v18 = *(unsigned int *)(v17 + 8);
  else
    v18 = 0;
  v20 = (sirinluexternal::AsrAlternative **)*((_QWORD *)this + 1);
  v19 = (sirinluexternal::AsrAlternative **)*((_QWORD *)this + 2);
  if (v20 == v19)
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = *v20++;
      v21 ^= sirinluexternal::AsrAlternative::hash_value(v22);
    }
    while (v20 != v19);
  }
  v23 = *((_QWORD *)this + 8);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
      v24 = std::__string_hash<char>::operator()[abi:ne180100](v24);
  }
  else
  {
    v24 = 0;
  }
  v25 = *((_QWORD *)this + 9);
  if (v25)
  {
    if ((*(_BYTE *)(v25 + 12) & 1) != 0)
      v25 = *(int *)(v25 + 8);
    else
      v25 = 0;
  }
  return v27 ^ v3 ^ v28 ^ v8 ^ v10 ^ v13 ^ v16 ^ v24 ^ v25 ^ v18 ^ v21;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeOriginAppId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[7])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeLabel(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[5])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeMatchInfo(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1E20;
    *(_DWORD *)(v2 + 100) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_QWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeStartIndex(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF448;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeEndIndex(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF448;
    *(_DWORD *)(v2 + 12) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makeOriginEntityId(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[8])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[8];
    v1[8] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::UsoEntitySpan::makePayloadAttachmentInfo(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[9])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB1738;
    v2[1] = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::~SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEE20;
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEE20;
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEE20;
  v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::readFrom(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  std::vector<std::string> *v8;
  std::allocator<std::string> *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::string *v30;
  std::__split_buffer<std::string> __v;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (std::vector<std::string> *)((char *)this + 8);
    v9 = (std::allocator<std::string> *)((char *)this + 24);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_25;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        v22 = (char *)*((_QWORD *)this + 2);
        v21 = *((_QWORD *)this + 3);
        if ((unint64_t)v22 >= v21)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (char *)v8->__begin_) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (unint64_t)v8->__begin_) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          __v.__end_cap_.__value_ = v9;
          if (v28)
            v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v28);
          else
            v29 = 0;
          v30 = (std::string *)(v28 + 24 * v25);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = (std::string *)(v28 + 24 * v29);
          v30->__r_.__value_.__r.__words[0] = 0;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(v8, &__v);
          v23 = (_QWORD *)*((_QWORD *)this + 2);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          v23 = v22 + 24;
          *((_QWORD *)v22 + 2) = 0;
        }
        *((_QWORD *)this + 2) = v23;
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
      if (v16)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(this + 8);
  for (i = *(_QWORD *)(this + 16); v2 != i; v2 += 24)
    this = PB::Writer::write();
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::formatText(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t i;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); v5 != i; v5 += 24)
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(_QWORD *this)
{
  *this = &off_1E7BAEE20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_1E7BAEE20;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2)
{
  std::vector<std::string> *v3;

  *(_QWORD *)this = &off_1E7BAEE20;
  *((_QWORD *)this + 1) = 0;
  v3 = (std::vector<std::string> *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *((std::string **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = &off_1E7BAEE20;
    v9 = (void **)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *sirinluinternalsnlp_intermediate::swap(_QWORD *this, sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a2, sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_1E7BAEE20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(_QWORD *)a1 = &off_1E7BAEE20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  void (**v9)(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *__hidden);
  std::vector<std::string> v10;
  std::vector<std::string> *v11;

  if (a1 != a2)
  {
    v9 = &off_1E7BAEE20;
    memset(&v10, 0, sizeof(v10));
    std::vector<std::string>::__vdeallocate(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)&v10.__begin_ = v6;
    v7 = *(std::string **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v10.__end_cap_.__value_ = v7;
    v11 = &v10;
    v9 = &off_1E7BAEE20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 **)(a1 + 16);
  v4 = *(unsigned __int8 **)(a2 + 8);
  if (v3 - v2 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v2, v4);
    if (!result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::hash_value(sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v3 ^= std::__string_hash<char>::operator()[abi:ne180100](v1);
    v1 += 24;
  }
  while (v1 != v2);
  return v3;
}

BOOL SIRINLUEXTERNALUserWantedToProceedReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALMENTION_RESOLVERMentionResolverResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SIRINLUINTERNALMatchingSpan *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMentions:", v18);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_33:

          return 0;
        }
LABEL_27:
        PBReaderRecallMark();
LABEL_28:

        goto LABEL_30;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_33;
        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v19 = objc_claimAutoreleasedReturnValue();
    v18 = *(SIRINLUINTERNALMatchingSpan **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v19;
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL SIRINLUINTERNALOverrideMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t SIRINLUINTERNALSiriVocabularySpanDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        v32 = 8;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 28) |= 4u;
            while (1)
            {
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
                break;
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_37;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v21) = 0;
LABEL_39:
            *(_DWORD *)(a1 + 24) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        *(_BYTE *)(a1 + 28) |= 2u;
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        v32 = 16;
      }
      *(_QWORD *)(a1 + v32) = v28;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRUtteranceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_29;
        goto LABEL_37;
      case 2u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v20;

        goto LABEL_35;
      case 3u:
        v18 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRToken);
        objc_msgSend((id)a1, "addUtteranceTokens:", v18);
        goto LABEL_27;
      case 4u:
        v18 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRToken);
        objc_msgSend((id)a1, "addAsrUtteranceTokens:", v18);
LABEL_27:
        if (PBReaderPlaceMark()
          && (SIRINLUINTERNALQUERYREWRITEQRTokenReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      case 5u:
        *(_BYTE *)(a1 + 48) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_35;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_35;
    }
  }
}

void sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput(sirinluinternalembedding::EmbeddingTensorOutput *this)
{
  sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BAEE90;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::readFrom(sirinluinternalembedding::EmbeddingTensorOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_QWORD *)operator new();
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          v21 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v20;
          if (v21)
            std::default_delete<std::string>::operator()[abi:ne180100](v21);
          PB::Reader::read();
          goto LABEL_55;
        case 2u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BB1DD0;
          *(_DWORD *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          v23 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = *((_QWORD *)this + 2);
          }
          goto LABEL_30;
        case 3u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BB1DD0;
          *(_DWORD *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          v24 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v22 = *((_QWORD *)this + 4);
          }
LABEL_30:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 4u:
          *((_BYTE *)this + 44) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_54;
              v28 += 7;
              v25 = v31;
              v14 = v29++ > 8;
            }
            while (!v14);
LABEL_48:
            v30 = 0;
            goto LABEL_54;
          }
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v25 + 1;
              v40 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v39;
              v30 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v25 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_48;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v30 = 0;
            }
            break;
          }
LABEL_54:
          *((_QWORD *)this + 1) = v30;
          goto LABEL_55;
        case 5u:
          *((_BYTE *)this + 44) |= 2u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 >= *((_QWORD *)a2 + 2))
          {
            v36 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v34 = v33 + 1;
            v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v33);
            *((_QWORD *)a2 + 1) = v34;
            v36 = v35 != 0;
          }
          *((_BYTE *)this + 40) = v36;
          goto LABEL_55;
        default:
          goto LABEL_19;
      }
      goto LABEL_55;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_55:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  char v6;

  v3 = this;
  if (*(_QWORD *)(this + 24))
    this = PB::Writer::write();
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_BYTE *)(v3 + 44);
  if ((v6 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v6 = *(_BYTE *)(v3 + 44);
  }
  if ((v6 & 2) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::formatText(sirinluinternalembedding::EmbeddingTensorOutput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "embedding_dim");
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embedding_tensor");
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 44) & 2) != 0)
    PB::TextFormatter::format(a2, "is_stable_embeddings_version");
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "sentence_embedding_tensor");
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAEE90;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAEE90;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

sirinluinternalembedding::EmbeddingTensorOutput *sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(sirinluinternalembedding::EmbeddingTensorOutput *this, const sirinluinternalembedding::EmbeddingTensorOutput *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  char **v10;
  sirinluinternal::NLv4EmbeddingTensor *v11;
  sirinluinternal::NLv4EmbeddingTensor *v12;
  char **v13;
  sirinluinternal::NLv4EmbeddingTensor *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  *(_QWORD *)this = &off_1E7BAEE90;
  *((_QWORD *)this + 2) = 0;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 16);
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  if (*((_QWORD *)a2 + 3))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 3);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v10 = (char **)operator new();
    v11 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v10, *((char ***)a2 + 2));
    v12 = *v4;
    *v4 = v11;
    if (v12)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v13 = (char **)operator new();
    v14 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v13, *((char ***)a2 + 4));
    v15 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *((_BYTE *)a2 + 44);
  if ((v16 & 1) != 0)
  {
    v17 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 44) |= 1u;
    *((_QWORD *)this + 1) = v17;
    v16 = *((_BYTE *)a2 + 44);
  }
  if ((v16 & 2) != 0)
  {
    v18 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 2u;
    *((_BYTE *)this + 40) = v18;
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingTensorOutput *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;

  if ((const sirinluinternalembedding::EmbeddingTensorOutput *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput((sirinluinternalembedding::EmbeddingTensorOutput *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v6;
    sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput((sirinluinternalembedding::EmbeddingTensorOutput *)&v8);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingTensorOutput *a2, sirinluinternalembedding::EmbeddingTensorOutput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v6 = *(_QWORD *)(this + 8);
  v5 = *(_QWORD *)(this + 16);
  v7 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v7;
  *((_QWORD *)a2 + 2) = v5;
  v8 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  *((_QWORD *)a2 + 1) = v6;
  LOBYTE(v8) = *(_BYTE *)(this + 40);
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v8;
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_1E7BAEE90;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingTensorOutput::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v12;
    v12 = v6;
    sirinluinternalembedding::EmbeddingTensorOutput::~EmbeddingTensorOutput((sirinluinternalembedding::EmbeddingTensorOutput *)&v8);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingTensorOutput::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 24);
  v5 = *(unsigned __int8 ***)(a2 + 24);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 24);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    if (!v12 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v11, v12))
      return 0;
  }
  else if (v12)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a2 + 32);
  if (v13)
  {
    if (!v14 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v13, v14))
      return 0;
  }
  else if (v14)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 44) & 2) == 0;
  if ((*(_BYTE *)(a1 + 44) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 44) & 2) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
}

unint64_t sirinluinternalembedding::EmbeddingTensorOutput::hash_value(sirinluinternalembedding::EmbeddingTensorOutput *this)
{
  uint64_t v2;
  unint64_t v3;
  sirinluinternal::NLv4EmbeddingTensor *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 2);
  if (v4)
    v5 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v4);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 4);
  if (v6)
    v6 = sirinluinternal::NLv4EmbeddingTensor::hash_value((sirinluinternal::NLv4EmbeddingTensor *)v6);
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v7 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_11;
LABEL_13:
    v8 = 0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8;
  }
  v7 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_13;
LABEL_11:
  v8 = *((unsigned __int8 *)this + 40);
  return v5 ^ v3 ^ v6 ^ v7 ^ v8;
}

_QWORD *sirinluinternalembedding::EmbeddingTensorOutput::makeEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalembedding::EmbeddingTensorOutput::makeSentenceEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternal::PlanOverrideValue::~PlanOverrideValue(sirinluinternal::PlanOverrideValue *this)
{
  sirinluinternal::PlanOverrideValue::~PlanOverrideValue(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAEEE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::PlanOverrideValue::readFrom(sirinluinternal::PlanOverrideValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternal::PlanOverrideValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternal::PlanOverrideValue::formatText(sirinluinternal::PlanOverrideValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternal::PlanOverrideValue::PlanOverrideValue(_QWORD *this)
{
  *this = &off_1E7BAEEE0;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAEEE0;
  this[1] = 0;
  return this;
}

sirinluinternal::PlanOverrideValue *sirinluinternal::PlanOverrideValue::PlanOverrideValue(sirinluinternal::PlanOverrideValue *this, const sirinluinternal::PlanOverrideValue *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BAEEE0;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const sirinluinternal::PlanOverrideValue *sirinluinternal::PlanOverrideValue::operator=(const sirinluinternal::PlanOverrideValue *a1, const sirinluinternal::PlanOverrideValue *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sirinluinternal::PlanOverrideValue::PlanOverrideValue((sirinluinternal::PlanOverrideValue *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    sirinluinternal::PlanOverrideValue::~PlanOverrideValue((sirinluinternal::PlanOverrideValue *)&v5);
  }
  return a1;
}

uint64_t sirinluinternal::swap(uint64_t this, sirinluinternal::PlanOverrideValue *a2, sirinluinternal::PlanOverrideValue *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternal::PlanOverrideValue::PlanOverrideValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAEEE0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAEEE0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluinternal::PlanOverrideValue::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAEEE0;
    v6[1] = v4;
    sirinluinternal::PlanOverrideValue::~PlanOverrideValue((sirinluinternal::PlanOverrideValue *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::PlanOverrideValue::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluinternal::PlanOverrideValue::hash_value(sirinluinternal::PlanOverrideValue *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

void sub_1C1F217AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C1F21944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F21AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C1F21BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F21D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F21F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C1F222F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F22498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F225D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1C1F226F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F227F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F228F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F229F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F22B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F22C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F22D54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F22F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F2333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C1F235C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F23824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F23B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F23D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F23E64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F23FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F2419C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F242BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C1F243E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1C1F244B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F24C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,uint64_t a53)
{
  void *v53;
  void *v54;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;

  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a50);
  v56 = a52;
  if (a52)
  {
    p_shared_owners = (unint64_t *)&a52->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = a53;
  a53 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  if (a14)
  {
    v60 = (unint64_t *)&a14->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }

  _Unwind_Resume(a1);
}

void sub_1C1F25460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F25674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F25820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F25A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F25CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F25F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F26044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F261DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F26330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F264E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C1F265BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F26964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F26B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PB::Writer *a9, char a10)
{
  void *v10;

  std::unique_ptr<PB::Writer>::reset[abi:ne180100](&a9);
  sirinluexternal::UsoGraph::~UsoGraph((sirinluexternal::UsoGraph *)&a10);
  _Unwind_Resume(a1);
}

void sub_1C1F26E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F2713C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F27210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F272D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F277DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F27B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F27D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F281CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1C1F28498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F286C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F28954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F28C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C1F28EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F29238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C1F2963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F29798(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2983C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F298E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F29F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F2A188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2A788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C1F2AB64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2ABE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2ACF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AD78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AE00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AE88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AF10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2AF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F2B310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C1F2B46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2B5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2B6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2B730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2B7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2B91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2BB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2BD50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C1F2BFA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C1F2C7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C1F2CA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C1F2CAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1C3BB7050]();
    JUMPOUT(0x1C3BB720CLL);
  }
  return result;
}

uint64_t std::shared_ptr<siri::ontology::UsoVocabManager>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sirinluexternal::UtteranceAlignment::~UtteranceAlignment(sirinluexternal::UtteranceAlignment *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEF58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEF58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E7BAEF58;
  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UtteranceAlignment::readFrom(sirinluexternal::UtteranceAlignment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  int64x2_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  char *v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (char *)this + 24;
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_26:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        *((_BYTE *)this + 40) |= 2u;
        v36 = *((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        v38 = *(_QWORD *)a2;
        if (v36 > 0xFFFFFFFFFFFFFFF5 || v36 + 10 > v37)
        {
          v50 = 0;
          v51 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_81;
            }
            v52 = v36 + 1;
            v53 = *(_BYTE *)(v38 + v36);
            *((_QWORD *)a2 + 1) = v52;
            v41 |= (unint64_t)(v53 & 0x7F) << v50;
            if ((v53 & 0x80) == 0)
              break;
            v50 += 7;
            v36 = v52;
            v15 = v51++ > 8;
            if (v15)
            {
LABEL_60:
              LODWORD(v41) = 0;
              goto LABEL_81;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v41) = 0;
        }
        else
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (1)
          {
            v42 = v36 + 1;
            *((_QWORD *)a2 + 1) = v36 + 1;
            v43 = *(_BYTE *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0)
              break;
            v39 += 7;
            v36 = v42;
            v15 = v40++ > 8;
            if (v15)
              goto LABEL_60;
          }
        }
LABEL_81:
        *((_DWORD *)this + 9) = v41;
      }
      else if ((_DWORD)v22 == 2)
      {
        v31 = operator new();
        v32 = v31;
        *(_QWORD *)v31 = &off_1E7BAF6E0;
        *(_DWORD *)(v31 + 32) = 0;
        v34 = (uint64_t *)*((_QWORD *)this + 2);
        v33 = *((_QWORD *)this + 3);
        if ((unint64_t)v34 >= v33)
        {
          v44 = *((_QWORD *)this + 1);
          v45 = ((uint64_t)v34 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v46 = v33 - v44;
          v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          v69 = v8;
          if (v48)
            v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v48);
          else
            v49 = 0;
          v58 = (uint64_t *)(v48 + 8 * v45);
          v59 = v48 + 8 * v49;
          v68 = v59;
          *v58 = v32;
          v35 = v58 + 1;
          v67.i64[1] = (uint64_t)(v58 + 1);
          v61 = (_QWORD *)*((_QWORD *)this + 1);
          v60 = (_QWORD *)*((_QWORD *)this + 2);
          if (v60 == v61)
          {
            v63 = vdupq_n_s64((unint64_t)v60);
          }
          else
          {
            do
            {
              v62 = *--v60;
              *v60 = 0;
              *--v58 = v62;
            }
            while (v60 != v61);
            v63 = *(int64x2_t *)((char *)this + 8);
            v35 = (_QWORD *)v67.i64[1];
            v59 = v68;
          }
          *((_QWORD *)this + 1) = v58;
          *((_QWORD *)this + 2) = v35;
          v67 = v63;
          v64 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v59;
          v68 = v64;
          v66 = v63.i64[0];
          std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v66);
        }
        else
        {
          *v34 = v31;
          v35 = v34 + 1;
        }
        *((_QWORD *)this + 2) = v35;
        v65 = *(v35 - 1);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v65 + 16))(v65, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v22 == 1)
      {
        *((_BYTE *)this + 40) |= 1u;
        v23 = *((_QWORD *)a2 + 1);
        v24 = *((_QWORD *)a2 + 2);
        v25 = *(_QWORD *)a2;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
        {
          v54 = 0;
          v55 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_84;
            }
            v56 = v23 + 1;
            v57 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)a2 + 1) = v56;
            v28 |= (unint64_t)(v57 & 0x7F) << v54;
            if ((v57 & 0x80) == 0)
              break;
            v54 += 7;
            v23 = v56;
            v15 = v55++ > 8;
            if (v15)
            {
LABEL_67:
              LODWORD(v28) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v28) = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = v23 + 1;
            *((_QWORD *)a2 + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              break;
            v26 += 7;
            v23 = v29;
            v15 = v27++ > 8;
            if (v15)
              goto LABEL_67;
          }
        }
LABEL_84:
        *((_DWORD *)this + 8) = v28;
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_26;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1C1F2D610(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluexternal::UtteranceAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  if ((*(_BYTE *)(this + 40) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

uint64_t sirinluexternal::UtteranceAlignment::formatText(sirinluexternal::UtteranceAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "asr_hypothesis_index");
    v5 = *((_BYTE *)this + 40);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "node_index");
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "spans");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAEF58;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAEF58;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

sirinluexternal::UtteranceAlignment *sirinluexternal::UtteranceAlignment::UtteranceAlignment(sirinluexternal::UtteranceAlignment *this, const sirinluexternal::UtteranceAlignment *a2)
{
  int64x2_t *v4;
  int v5;
  const sirinluexternal::UtteranceSpan **v6;
  const sirinluexternal::UtteranceSpan **i;
  const sirinluexternal::UtteranceSpan *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  int v25;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  char *v30;

  *(_QWORD *)this = &off_1E7BAEF58;
  *((_QWORD *)this + 1) = 0;
  v4 = (int64x2_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 8);
    *((_BYTE *)this + 40) = 1;
    *((_DWORD *)this + 8) = v5;
  }
  v6 = (const sirinluexternal::UtteranceSpan **)*((_QWORD *)a2 + 1);
  for (i = (const sirinluexternal::UtteranceSpan **)*((_QWORD *)a2 + 2); v6 != i; ++v6)
  {
    v8 = *v6;
    v9 = operator new();
    sirinluexternal::UtteranceSpan::UtteranceSpan(v9, v8);
    v11 = (uint64_t *)*((_QWORD *)this + 2);
    v10 = *((_QWORD *)this + 3);
    if ((unint64_t)v11 >= v10)
    {
      v13 = ((uint64_t)v11 - v4->i64[0]) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - v4->i64[0];
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v30 = (char *)this + 24;
      if (v16)
        v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v16);
      else
        v17 = 0;
      v18 = (uint64_t *)(v16 + 8 * v13);
      v19 = v16 + 8 * v17;
      v29 = v19;
      *v18 = v9;
      v12 = v18 + 1;
      v28.i64[1] = (uint64_t)(v18 + 1);
      v21 = (_QWORD *)*((_QWORD *)this + 1);
      v20 = (_QWORD *)*((_QWORD *)this + 2);
      if (v20 == v21)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          v22 = *--v20;
          *v20 = 0;
          *--v18 = v22;
        }
        while (v20 != v21);
        v23 = *v4;
        v12 = (_QWORD *)v28.i64[1];
        v19 = v29;
      }
      *((_QWORD *)this + 1) = v18;
      *((_QWORD *)this + 2) = v12;
      v28 = v23;
      v24 = *((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v19;
      v29 = v24;
      v27 = v23.i64[0];
      std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      *v11 = v9;
      v12 = v11 + 1;
    }
    *((_QWORD *)this + 2) = v12;
  }
  if ((*((_BYTE *)a2 + 40) & 2) != 0)
  {
    v25 = *((_DWORD *)a2 + 9);
    *((_BYTE *)this + 40) |= 2u;
    *((_DWORD *)this + 9) = v25;
  }
  return this;
}

void sub_1C1F2D980(void *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __clang_call_terminate(a1);
}

uint64_t sirinluexternal::UtteranceAlignment::operator=(uint64_t a1, const sirinluexternal::UtteranceAlignment *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(sirinluexternal::UtteranceAlignment *__hidden);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;

  if ((const sirinluexternal::UtteranceAlignment *)a1 != a2)
  {
    sirinluexternal::UtteranceAlignment::UtteranceAlignment((sirinluexternal::UtteranceAlignment *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v4;
    v7 = &off_1E7BAEF58;
    v12 = (void **)&v8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UtteranceAlignment *a2, sirinluexternal::UtteranceAlignment *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  LODWORD(v7) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  return this;
}

uint64_t sirinluexternal::UtteranceAlignment::UtteranceAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E7BAEF58;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t sirinluexternal::UtteranceAlignment::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(sirinluexternal::UtteranceAlignment *__hidden);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void **v12;

  if (a1 != a2)
  {
    sirinluexternal::UtteranceAlignment::UtteranceAlignment((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v4;
    v7 = &off_1E7BAEF58;
    v12 = (void **)&v8;
    std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v12);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

BOOL sirinluexternal::UtteranceAlignment::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_BYTE *)(a2 + 40);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    return 0;
  }
  v7 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v8 = *(uint64_t **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    result = sirinluexternal::UtteranceSpan::operator==(*v7, *v8);
    if (!result)
      return result;
    ++v7;
    ++v8;
  }
  result = (v5 & 2) == 0;
  if ((v4 & 2) != 0)
    return (v5 & 2) != 0 && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  return result;
}

uint64_t sirinluexternal::UtteranceAlignment::hash_value(sirinluexternal::UtteranceAlignment *this)
{
  char v2;
  uint64_t v3;
  sirinluexternal::UtteranceSpan **v4;
  sirinluexternal::UtteranceSpan **v5;
  uint64_t v6;
  sirinluexternal::UtteranceSpan *v7;
  uint64_t v8;

  v2 = *((_BYTE *)this + 40);
  if ((v2 & 1) != 0)
    v3 = *((unsigned int *)this + 8);
  else
    v3 = 0;
  v4 = (sirinluexternal::UtteranceSpan **)*((_QWORD *)this + 1);
  v5 = (sirinluexternal::UtteranceSpan **)*((_QWORD *)this + 2);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= sirinluexternal::UtteranceSpan::hash_value(v7);
    }
    while (v4 != v5);
    if ((v2 & 2) == 0)
      goto LABEL_8;
LABEL_10:
    v8 = *((unsigned int *)this + 9);
    return v6 ^ v3 ^ v8;
  }
  v6 = 0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
    goto LABEL_10;
LABEL_8:
  v8 = 0;
  return v6 ^ v3 ^ v8;
}

uint64_t SIRINLUEXTERNALUsoLabelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void siricommon::BoolValue::~BoolValue(siricommon::BoolValue *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t siricommon::BoolValue::readFrom(siricommon::BoolValue *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v19;
  BOOL v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_24;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v20 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v19 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v20 = v19 != 0;
        }
        *((_BYTE *)this + 8) = v20;
      }
      else
      {
LABEL_24:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_24;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t siricommon::BoolValue::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2);
  return this;
}

uint64_t siricommon::BoolValue::formatText(siricommon::BoolValue *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "value");
  return PB::TextFormatter::endObject(a2);
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t this)
{
  *(_QWORD *)this = &off_1E7BAEFA8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7BAEFA8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t this, const siricommon::BoolValue *a2)
{
  char v2;

  *(_QWORD *)this = &off_1E7BAEFA8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = &off_1E7BAEFA8;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t siricommon::BoolValue::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(siricommon::BoolValue *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BAEFA8;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(siricommon::BoolValue *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7BAEFA8;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t siricommon::swap(uint64_t this, siricommon::BoolValue *a2, siricommon::BoolValue *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t siricommon::BoolValue::BoolValue(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7BAEFA8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = &off_1E7BAEFA8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

BOOL siricommon::BoolValue::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t siricommon::BoolValue::hash_value(siricommon::BoolValue *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

void sub_1C1F2E610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2E66C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2E6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F2E724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F2E790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F2E7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C1F2E868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t SIRINLUINTERNALSNLP_INTERMEDIATEContextFeaturizerResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensor);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALSNLP_INTERMEDIATELinearizedTensorReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUEXTERNALPayloadAttachmentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sirinluexternal::SystemOffered::~SystemOffered(sirinluexternal::SystemOffered *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAEFF8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAEFF8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAEFF8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::SystemOffered::readFrom(sirinluexternal::SystemOffered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E7BB14F0;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_QWORD *)(v19 + 88) = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = *((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::SystemOffered::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluexternal::SystemOffered::formatText(sirinluexternal::SystemOffered *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "offered_act");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::SystemOffered::SystemOffered(_QWORD *this)
{
  *this = &off_1E7BAEFF8;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAEFF8;
  this[1] = 0;
  return this;
}

sirinluexternal::SystemOffered *sirinluexternal::SystemOffered::SystemOffered(sirinluexternal::SystemOffered *this, const sirinluexternal::UserDialogAct **a2)
{
  sirinluexternal::UserDialogAct *v4;
  sirinluexternal::UserDialogAct *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAEFF8;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluexternal::UserDialogAct *)operator new();
    v5 = sirinluexternal::UserDialogAct::UserDialogAct(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluexternal::SystemOffered::operator=(uint64_t a1, const sirinluexternal::UserDialogAct **a2)
{
  uint64_t v3;
  void (**v5)(sirinluexternal::SystemOffered *__hidden);
  uint64_t v6;

  if ((const sirinluexternal::UserDialogAct **)a1 != a2)
  {
    sirinluexternal::SystemOffered::SystemOffered((sirinluexternal::SystemOffered *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAEFF8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::SystemOffered *a2, sirinluexternal::SystemOffered *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternal::SystemOffered::SystemOffered(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAEFF8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAEFF8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluexternal::SystemOffered::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAEFF8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluexternal::SystemOffered::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluexternal::UserDialogAct::operator==((_QWORD *)v2, (_QWORD *)v3);
}

sirinluexternal::UserDialogAct *sirinluexternal::SystemOffered::hash_value(sirinluexternal::SystemOffered *this)
{
  sirinluexternal::UserDialogAct *result;

  result = (sirinluexternal::UserDialogAct *)*((_QWORD *)this + 1);
  if (result)
    return (sirinluexternal::UserDialogAct *)sirinluexternal::UserDialogAct::hash_value(result);
  return result;
}

_QWORD *sirinluexternal::SystemOffered::makeOfferedAct(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB14F0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_QWORD *)(v2 + 88) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::UsoLabel::~UsoLabel(sirinluexternal::UsoLabel *this)
{
  sirinluexternal::UsoLabel::~UsoLabel(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF048;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::UsoLabel::readFrom(sirinluexternal::UsoLabel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
          std::default_delete<std::string>::operator()[abi:ne180100](v20);
        PB::Reader::read();
      }
      else
      {
LABEL_25:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_25;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluexternal::UsoLabel::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(_QWORD *)(this + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluexternal::UsoLabel::formatText(sirinluexternal::UsoLabel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::UsoLabel::UsoLabel(_QWORD *this)
{
  *this = &off_1E7BAF048;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF048;
  this[1] = 0;
  return this;
}

sirinluexternal::UsoLabel *sirinluexternal::UsoLabel::UsoLabel(sirinluexternal::UsoLabel *this, const sirinluexternal::UsoLabel *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7BAF048;
  *((_QWORD *)this + 1) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (std::string *)operator new();
    v5 = v4;
    v6 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v8)
      std::default_delete<std::string>::operator()[abi:ne180100](v8);
  }
  return this;
}

const sirinluexternal::UsoLabel *sirinluexternal::UsoLabel::operator=(const sirinluexternal::UsoLabel *a1, const sirinluexternal::UsoLabel *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sirinluexternal::UsoLabel::UsoLabel((sirinluexternal::UsoLabel *)&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    sirinluexternal::UsoLabel::~UsoLabel((sirinluexternal::UsoLabel *)&v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::UsoLabel *a2, sirinluexternal::UsoLabel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluexternal::UsoLabel::UsoLabel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF048;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF048;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  return a1;
}

uint64_t sirinluexternal::UsoLabel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF048;
    v6[1] = v4;
    sirinluexternal::UsoLabel::~UsoLabel((sirinluexternal::UsoLabel *)v6);
  }
  return a1;
}

uint64_t sirinluexternal::UsoLabel::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t sirinluexternal::UsoLabel::hash_value(sirinluexternal::UsoLabel *this)
{
  unint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return std::__string_hash<char>::operator()[abi:ne180100](result);
  return result;
}

BOOL SIRINLUEXTERNALSystemReportedSuccessReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUEXTERNALUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SIRINLUEXTERNALUsoGraph);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || !SIRINLUEXTERNALUsoGraphReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALMENTION_RESOLVERMentionResolverRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 80;
        goto LABEL_23;
      case 2u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        v18 = 72;
LABEL_23:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_73;
        goto LABEL_60;
      case 3u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 88;
        goto LABEL_28;
      case 4u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 104;
LABEL_28:
        v22 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        goto LABEL_61;
      case 5u:
        v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 96), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2))
          goto LABEL_73;
        goto LABEL_60;
      case 6u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 7u:
        v17 = objc_alloc_init(SIRINLUEXTERNALEntityCandidate);
        objc_msgSend((id)a1, "addEntityCandidates:", v17);
        if (!PBReaderPlaceMark()
          || !SIRINLUEXTERNALEntityCandidateReadFrom((id *)&v17->super.super.isa, a2))
        {
          goto LABEL_73;
        }
        goto LABEL_60;
      case 8u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addDetectedMentions:", v17);
        goto LABEL_58;
      case 9u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 112) |= 1u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v14 = v24++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_66:
        v34 = 8;
        goto LABEL_71;
      case 0xAu:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v17);
        goto LABEL_58;
      case 0xBu:
        v29 = 0;
        v30 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 112) |= 2u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v25 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_70:
        v34 = 16;
LABEL_71:
        *(_QWORD *)(a1 + v34) = v25;
        goto LABEL_61;
      case 0xCu:
        v17 = objc_alloc_init(SIRINLUEXTERNALRequestID);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (!PBReaderPlaceMark() || (SIRINLUEXTERNALRequestIDReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_73;
        goto LABEL_60;
      case 0xDu:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addContextualSpans:", v17);
LABEL_58:
        if (PBReaderPlaceMark() && (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_60:
          PBReaderRecallMark();

LABEL_61:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_73:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_61;
    }
  }
}

void sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair(sirinluinternalplan_generation::VariableEventIdPair *this)
{
  sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAF098;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100](v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    std::default_delete<std::string>::operator()[abi:ne180100](v3);
  PB::Base::~Base(this);
}

BOOL sirinluinternalplan_generation::VariableEventIdPair::readFrom(sirinluinternalplan_generation::VariableEventIdPair *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)((char *)this + 8);
    v8 = (uint64_t *)((char *)this + 16);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          v15 = v17++ > 8;
          if (v15)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_26;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
        break;
      if ((v12 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v21 = *v8;
        *v8 = (uint64_t)v20;
        if (!v21)
          goto LABEL_30;
LABEL_29:
        std::default_delete<std::string>::operator()[abi:ne180100](v21);
LABEL_30:
        PB::Reader::read();
        goto LABEL_31;
      }
LABEL_26:
      if ((PB::Reader::skip(a2) & 1) == 0)
        return 0;
LABEL_31:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v22 = (_QWORD *)operator new();
    v22[1] = 0;
    v22[2] = 0;
    *v22 = 0;
    v21 = *v7;
    *v7 = (uint64_t)v22;
    if (v21)
      goto LABEL_29;
    goto LABEL_30;
  }
  return v4 == 0;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = this;
  if (*(_QWORD *)(this + 16))
    this = PB::Writer::write();
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return this;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::formatText(sirinluinternalplan_generation::VariableEventIdPair *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF098;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF098;
  return this;
}

sirinluinternalplan_generation::VariableEventIdPair *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(sirinluinternalplan_generation::VariableEventIdPair *this, const sirinluinternalplan_generation::VariableEventIdPair *a2)
{
  uint64_t *v4;
  std::string *v5;
  std::string *v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E7BAF098;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v5 = (std::string *)operator new();
    v6 = v5;
    v7 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
    }
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v9)
      std::default_delete<std::string>::operator()[abi:ne180100](v9);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = (__int128 *)*((_QWORD *)a2 + 1);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *v4;
    *v4 = (uint64_t)v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100](v14);
  }
  return this;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator=(uint64_t a1, const sirinluinternalplan_generation::VariableEventIdPair *a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const sirinluinternalplan_generation::VariableEventIdPair *)a1 != a2)
  {
    sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair((sirinluinternalplan_generation::VariableEventIdPair *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair((sirinluinternalplan_generation::VariableEventIdPair *)v5);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::swap(uint64_t this, sirinluinternalplan_generation::VariableEventIdPair *a2, sirinluinternalplan_generation::VariableEventIdPair *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  return this;
}

_QWORD *sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_1E7BAF098;
  a1[2] = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = a1[2];
  a1[2] = v5;
  if (v6)
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100](v8);
  return a1;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v5;
  __int128 v6;

  if (a1 != a2)
  {
    sirinluinternalplan_generation::VariableEventIdPair::VariableEventIdPair(&v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluinternalplan_generation::VariableEventIdPair::~VariableEventIdPair((sirinluinternalplan_generation::VariableEventIdPair *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalplan_generation::VariableEventIdPair::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;

  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned __int8 ***)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 16);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_21:
  v12 = *(unsigned __int8 **)(a1 + 8);
  v13 = *(unsigned __int8 ***)(a2 + 8);
  result = v13 == 0;
  if (!v12)
    return result;
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = *(unsigned __int8 **)(a2 + 8);
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
    return !memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1));
  if (!v12[23])
    return 1;
  v19 = v14 - 1;
  do
  {
    v21 = *v12++;
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t sirinluinternalplan_generation::VariableEventIdPair::hash_value(sirinluinternalplan_generation::VariableEventIdPair *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = std::__string_hash<char>::operator()[abi:ne180100](v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v4);
  return v4 ^ v3;
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRHypothesisReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  SIRINLUEXTERNALUUID *v18;
  uint64_t result;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = objc_alloc_init(SIRINLUEXTERNALUUID);
          objc_storeStrong((id *)(a1 + 16), v18);
          if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v18, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v20;

          continue;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v24 = 0;
          }
          *(_QWORD *)(a1 + 8) = v24;
          continue;
        case 4u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0)
          goto LABEL_36;
        v25 += 7;
        v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v27) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 24) = v27;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C1F341A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F343AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F344A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::Finish(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unsigned int a2, const char *a3)
{
  int v5;
  uint64_t result;

  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, 4, *((_QWORD *)this + 9));
  v5 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(this, a2);
  result = apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, v5);
  *((_BYTE *)this + 71) = 1;
  return result;
}

double apple::aiml::flatbuffers2::FlatBufferBuilder::Release(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (!*(_BYTE *)(a2 + 71))
    __assert_rtn("Finished", "flatbuffers.h", 1319, "finished");
  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)this = *(_QWORD *)a2;
  *((_BYTE *)this + 8) = v2;
  *((_QWORD *)this + 2) = v4;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 5) = (v3 + v4 - v5);
  if (v2)
  {
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  return result;
}

void apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder(apple::aiml::flatbuffers2::FlatBufferBuilder *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(*(_QWORD **)(v2 + 8));
    MEMORY[0x1C3BB720C](v2, 0x1060C40C2B13FB5);
  }
  if (*((_QWORD *)this + 5))
  {
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
    else
      MEMORY[0x1C3BB71F4](*((_QWORD *)this + 5), 0x1000C8077774924);
  }
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(*a1);
    std::__tree<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>,apple::aiml::flatbuffers2::FlatBufferBuilder::StringOffsetCompare,std::allocator<apple::aiml::flatbuffers2::Offset<apple::aiml::flatbuffers2::String>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void apple::aiml::flatbuffers2::DetachedBuffer::~DetachedBuffer(apple::aiml::flatbuffers2::DetachedBuffer *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      MEMORY[0x1C3BB71F4](v2, 0x1000C8077774924);
  }
  if (*((_BYTE *)this + 8) && *(_QWORD *)this)
    (*(void (**)(_QWORD))(**(_QWORD **)this + 8))(*(_QWORD *)this);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *v3 = 0u;
  v3[1] = 0u;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested(uint64_t this)
{
  if (*(_BYTE *)(this + 70))
    __assert_rtn("NotNested", "flatbuffers.h", 1432, "!nested");
  if (*(_DWORD *)(this + 64))
    __assert_rtn("NotNested", "flatbuffers.h", 1434, "!num_field_loc");
  return this;
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((_QWORD *)this + 9) < a3)
    *((_QWORD *)this + 9) = a3;
  return apple::aiml::flatbuffers2::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

unint64_t apple::aiml::flatbuffers2::vector_downward::ensure_space(apple::aiml::flatbuffers2::vector_downward *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v15)(apple::aiml::flatbuffers2::DefaultAllocator *__hidden);

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2 < v3 || (v6 = (unsigned __int8 *)*((_QWORD *)this + 5), v7 = v3 - (_DWORD)v6, v3 < (unint64_t)v6))
    __assert_rtn("ensure_space", "flatbuffers.h", 988, "cur_ >= scratch_ && scratch_ >= buf_");
  v8 = *((_QWORD *)this + 4);
  if (v2 - v3 < a2)
  {
    v9 = v8 - v2 + (_DWORD)v6;
    if (v8)
      v10 = v8 >> 1;
    else
      v10 = *((_QWORD *)this + 2);
    if (v10 <= a2)
      v10 = a2;
    v11 = (*((_QWORD *)this + 3) + v8 + v10 - 1) & -*((_QWORD *)this + 3);
    *((_QWORD *)this + 4) = v11;
    v12 = *(_QWORD *)this;
    if (v6)
    {
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      }
      else
      {
        v15 = &off_1E7BB1B18;
        v13 = (uint64_t)apple::aiml::flatbuffers2::Allocator::reallocate_downward((apple::aiml::flatbuffers2::Allocator *)&v15, v6, v8, v11, v9, (v3 - (_DWORD)v6));
      }
    }
    else if (v12)
    {
      v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, v11);
    }
    else
    {
      v13 = operator new[]();
    }
    LODWORD(v6) = v13;
    v8 = *((_QWORD *)this + 4);
    v2 = v13 + v8 - v9;
    *((_QWORD *)this + 5) = v13;
    *((_QWORD *)this + 6) = v2;
    *((_QWORD *)this + 7) = v13 + v7;
  }
  if ((v8 - v2 + (_DWORD)v6) >= 0x7FFFFFFF)
    __assert_rtn("ensure_space", "flatbuffers.h", 992, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");
  return a2;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unsigned int a2)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 4uLL);
  if (!a2
    || (v4 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10), v5 = v4 >= a2, v6 = v4 - a2, !v5))
  {
    __assert_rtn("ReferTo", "flatbuffers.h", 1419, "off && off <= GetSize()");
  }
  return v6 + 4;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  uint64_t v4;

  apple::aiml::flatbuffers2::FlatBufferBuilder::Align((apple::aiml::flatbuffers2::FlatBufferBuilder *)a1, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space((apple::aiml::flatbuffers2::vector_downward *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 - 4) = a2;
  v4 -= 4;
  *(_QWORD *)(a1 + 48) = v4;
  return (*(_DWORD *)(a1 + 32) - v4 + *(_DWORD *)(a1 + 40));
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::Align(apple::aiml::flatbuffers2::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((_QWORD *)this + 9) < a2)
    *((_QWORD *)this + 9) = a2;
  return apple::aiml::flatbuffers2::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

unint64_t apple::aiml::flatbuffers2::vector_downward::fill(apple::aiml::flatbuffers2::vector_downward *this, unint64_t a2)
{
  unint64_t result;
  uint64_t v5;

  result = apple::aiml::flatbuffers2::vector_downward::ensure_space(this, a2);
  *((_QWORD *)this + 6) -= a2;
  if (a2)
  {
    v5 = 0;
    do
      *(_BYTE *)(*((_QWORD *)this + 6) + v5++) = 0;
    while (a2 != v5);
  }
  return result;
}

char *apple::aiml::flatbuffers2::Allocator::reallocate_downward(apple::aiml::flatbuffers2::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  char *v12;

  if (a4 <= a3)
    __assert_rtn("reallocate_downward", "flatbuffers.h", 687, "new_size > old_size");
  v12 = (char *)(*(uint64_t (**)(apple::aiml::flatbuffers2::Allocator *, unint64_t))(*(_QWORD *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(apple::aiml::flatbuffers2::Allocator *, unsigned __int8 *, unint64_t))(*(_QWORD *)this + 24))(this, a2, a3);
  return v12;
}

void apple::aiml::flatbuffers2::DefaultAllocator::~DefaultAllocator(apple::aiml::flatbuffers2::DefaultAllocator *this)
{
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t apple::aiml::flatbuffers2::DefaultAllocator::allocate(apple::aiml::flatbuffers2::DefaultAllocator *this)
{
  return operator new[]();
}

void apple::aiml::flatbuffers2::DefaultAllocator::deallocate(apple::aiml::flatbuffers2::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2)
    JUMPOUT(0x1C3BB71F4);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::CreateString(apple::aiml::flatbuffers2::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  _BYTE *v6;
  void *v7;

  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, a3 + 1, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 1uLL);
  v6 = (_BYTE *)(*((_QWORD *)this + 6) - 1);
  *((_QWORD *)this + 6) = v6;
  *v6 = 0;
  if (a3)
  {
    apple::aiml::flatbuffers2::vector_downward::ensure_space(this, a3);
    v7 = (void *)(*((_QWORD *)this + 6) - a3);
    *((_QWORD *)this + 6) = v7;
    memcpy(v7, a2, a3);
  }
  apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a3);
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<apple::aiml::flatbuffers2::String>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, uint64_t a2, unsigned int a3)
{
  unint64_t v4;
  int v5;

  if (a3)
  {
    v4 = (unint64_t)result;
    v5 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a3);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v4, a2, v5, 0);
  }
  return result;
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::EndTable(apple::aiml::flatbuffers2::FlatBufferBuilder *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  unsigned __int16 v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int *v21;
  _DWORD *v22;

  if (!*((_BYTE *)this + 70))
    __assert_rtn("EndTable", "flatbuffers.h", 1450, "nested");
  apple::aiml::flatbuffers2::FlatBufferBuilder::Align(this, 4uLL);
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 4uLL);
  v4 = *((_QWORD *)this + 6);
  *(_DWORD *)(v4 - 4) = 0;
  v4 -= 4;
  *((_QWORD *)this + 6) = v4;
  v5 = *((_QWORD *)this + 4) - v4 + *((_QWORD *)this + 5);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v6 = 4;
  else
    v6 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v6;
  apple::aiml::flatbuffers2::vector_downward::ensure_space(this, v6);
  v7 = (void *)(*((_QWORD *)this + 6) - v6);
  *((_QWORD *)this + 6) = v7;
  bzero(v7, v6);
  v8 = v5 - a2;
  if ((v5 - a2) >= 0x10000)
    __assert_rtn("EndTable", "flatbuffers.h", 1465, "table_object_size < 0x10000");
  v9 = (unsigned __int16 *)*((_QWORD *)this + 6);
  if (!v9)
    __assert_rtn("data", "flatbuffers.h", 1016, "cur_");
  v9[1] = v8;
  *v9 = *((_WORD *)this + 34);
  v10 = *((_QWORD *)this + 7);
  if (!v10)
    __assert_rtn("scratch_end", "flatbuffers.h", 1026, "scratch_");
  v11 = *((unsigned int *)this + 16);
  v12 = v10 - 8 * v11;
  if ((_DWORD)v11)
  {
    v13 = (int *)(v10 - 8 * v11);
    do
    {
      v14 = *((unsigned __int16 *)v13 + 2);
      if (*(unsigned __int16 *)((char *)v9 + v14))
        __assert_rtn("EndTable", "flatbuffers.h", 1476, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");
      v15 = *v13;
      v13 += 2;
      *(unsigned __int16 *)((char *)v9 + v14) = v5 - v15;
    }
    while ((unint64_t)v13 < v10);
  }
  *((_QWORD *)this + 7) = v12;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v17 = *((_QWORD *)this + 4);
  v16 = *((_QWORD *)this + 5);
  LODWORD(v18) = v17 - (_DWORD)v9 + v16;
  if (*((_BYTE *)this + 81))
  {
    if (!v16)
      __assert_rtn("scratch_data", "flatbuffers.h", 1021, "buf_");
    if (v16 < v12)
    {
      v19 = *v9;
      v20 = v16 + v17;
      v21 = (unsigned int *)*((_QWORD *)this + 5);
      while (1)
      {
        v18 = *v21;
        if ((_DWORD)v19 == *(unsigned __int16 *)(v20 - v18) && !memcmp((const void *)(v20 - v18), v9, v19))
          break;
        if ((unint64_t)++v21 >= v12)
        {
          LODWORD(v18) = v17 - (_DWORD)v9 + v16;
          goto LABEL_21;
        }
      }
      v9 = (unsigned __int16 *)((char *)v9 + (v17 - (_DWORD)v9 + v16 - v5));
      *((_QWORD *)this + 6) = v9;
    }
  }
LABEL_21:
  if ((_DWORD)v18 == (_DWORD)v17 + (_DWORD)v16 - (_DWORD)v9)
  {
    apple::aiml::flatbuffers2::vector_downward::ensure_space(this, 4uLL);
    v22 = (_DWORD *)*((_QWORD *)this + 7);
    *v22 = v18;
    *((_QWORD *)this + 7) = v22 + 1;
    v17 = *((_QWORD *)this + 4);
    v16 = *((_QWORD *)this + 5);
  }
  *(_DWORD *)(v16 + v17 - v5) = v18 - v5;
  *((_BYTE *)this + 70) = 0;
  return v5;
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(unint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  if (a3 != a4 || *(_BYTE *)(result + 80))
  {
    v6 = apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>(result, a3);
    result = apple::aiml::flatbuffers2::vector_downward::ensure_space((apple::aiml::flatbuffers2::vector_downward *)v5, 8uLL);
    **(_QWORD **)(v5 + 56) = v6 | (unint64_t)(a2 << 32);
    *(_QWORD *)(v5 + 56) += 8;
    ++*(_DWORD *)(v5 + 64);
    v7 = *(unsigned __int16 *)(v5 + 68);
    if (v7 <= a2)
      LOWORD(v7) = a2;
    *(_WORD *)(v5 + 68) = v7;
  }
  return result;
}

BOOL SSUIntentParameter::Verify(SSUIntentParameter *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUIntentParameter *v5;
  uint64_t v6;
  SSUIntentParameter *v7;
  SSUIntentParameter *v8;
  uint64_t v9;
  SSUIntentParameter *v10;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (v6 = *(unsigned __int16 *)v5[4].var0) != 0)
        v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      else
        v7 = 0;
      result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          v8 = &this[-*(int *)this->var0];
          if (*(unsigned __int16 *)v8->var0 >= 7u && (v9 = *(unsigned __int16 *)v8[6].var0) != 0)
            v10 = &this[v9 + *(unsigned int *)this[v9].var0];
          else
            v10 = 0;
          result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v10->var0);
          if (result)
          {
            --*((_DWORD *)a2 + 4);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyTableStart(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v3 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *(int *)a2;
  v7 = *((_DWORD *)this + 5);
  v8 = *((_DWORD *)this + 4) + 1;
  *((_DWORD *)this + 4) = v8;
  v9 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)this + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)this + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

BOOL apple::aiml::flatbuffers2::Table::VerifyOffset(apple::aiml::flatbuffers2::Table *this, const apple::aiml::flatbuffers2::Verifier *a2, unsigned int a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;

  v3 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v3 <= a3)
    return 1;
  v4 = *(unsigned __int16 *)((char *)v3 + a3);
  if (!v4)
    return 1;
  v5 = (unint64_t)this + v4 - *(_QWORD *)a2;
  if ((v5 & 3) != 0 && *((_BYTE *)a2 + 40) != 0)
    return 0;
  result = 0;
  v8 = *((_QWORD *)a2 + 1);
  if (v8 >= 5 && v8 - 4 >= v5)
  {
    v9 = *(unsigned int *)(*(_QWORD *)a2 + v5);
    if ((int)v9 >= 1)
      return v8 - 1 >= v5 + v9;
    return 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyString(apple::aiml::flatbuffers2::Verifier *a1, const unsigned __int8 *a2)
{
  _BOOL8 result;
  unint64_t v4;
  unint64_t v6;

  if (!a2)
    return 1;
  v6 = 0;
  result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a1, a2, 1uLL, &v6);
  if (result)
  {
    v4 = *((_QWORD *)a1 + 1);
    return v4 >= 2 && v4 - 1 >= v6 && *(_BYTE *)(*(_QWORD *)a1 + v6) == 0;
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(apple::aiml::flatbuffers2::Verifier *this, const unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;

  v4 = (unint64_t)&a2[-*(_QWORD *)this];
  if ((v4 & 3) != 0 && *((_BYTE *)this + 40))
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 < 5 || v5 - 4 < v4)
    return 0;
  v7 = *(unsigned int *)a2;
  if (0x7FFFFFFF / a3 <= v7)
    return 0;
  v8 = v7 * a3 + 4;
  if (a4)
  {
    *a4 = v8 + v4;
    v5 = *((_QWORD *)this + 1);
  }
  v9 = v5 > v8;
  v10 = v5 - v8;
  return v9 && v10 >= v4;
}

void sub_1C1F35484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F355C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F356B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

BOOL SSUExampleUtterance::Verify(SSUExampleUtterance *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUExampleUtterance *v5;
  uint64_t v6;
  SSUExampleUtterance *v7;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (v6 = *(unsigned __int16 *)v5[4].var0) != 0)
        v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      else
        v7 = 0;
      result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

void sub_1C1F35974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F35A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F35B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F35BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F35D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F35FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1C1F36128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

unint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::StartVector(apple::aiml::flatbuffers2::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  apple::aiml::flatbuffers2::FlatBufferBuilder::NotNested((uint64_t)this);
  *((_BYTE *)this + 70) = 1;
  v6 = a3 * a2;
  apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, v6, 4uLL);
  return apple::aiml::flatbuffers2::FlatBufferBuilder::PreAlign(this, v6, a3);
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::EndVector(apple::aiml::flatbuffers2::FlatBufferBuilder *this, int a2)
{
  if (!*((_BYTE *)this + 70))
    __assert_rtn("EndVector", "flatbuffers.h", 1672, "nested");
  *((_BYTE *)this + 70) = 0;
  return apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, a2);
}

BOOL SSUExampleEncodedVector::Verify(SSUExampleEncodedVector *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUExampleEncodedVector *v5;
  uint64_t v6;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 < 5u
        || (v6 = *(unsigned __int16 *)v5[4].var0) == 0
        || (result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[v6 + *(unsigned int *)this[v6].var0].var0, 4uLL, 0)))
      {
        --*((_DWORD *)a2 + 4);
        return 1;
      }
    }
  }
  return result;
}

void sub_1C1F36498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F365B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F36684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F3688C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F36980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<void>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, unsigned int a2)
{
  unint64_t v2;
  int v3;

  if (a2)
  {
    v2 = (unint64_t)result;
    v3 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a2);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v2, 6, v3, 0);
  }
  return result;
}

BOOL SSUExample::Verify(SSUExample *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUExample *v5;
  unsigned int v6;
  unint64_t v7;
  SSUExampleUtterance *v8;
  int v9;
  BOOL v10;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (!result)
    return result;
  v5 = &this[-*(int *)this->var0];
  v6 = *(unsigned __int16 *)v5->var0;
  if (v6 >= 5)
  {
    if (*(_WORD *)v5[4].var0)
    {
      result = 0;
      v7 = *((_QWORD *)a2 + 1);
      if (v7 < 2 || v7 - 1 < (unint64_t)this[*(unsigned __int16 *)v5[4].var0 - *(_QWORD *)a2].var0)
        return result;
    }
  }
  result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
  if (!result)
    return result;
  if (v6 < 7)
  {
    if (v6 < 5)
      goto LABEL_22;
    goto LABEL_11;
  }
  if (!*(_WORD *)v5[6].var0)
  {
LABEL_11:
    v8 = 0;
    goto LABEL_12;
  }
  v8 = (SSUExampleUtterance *)&this[*(unsigned __int16 *)v5[6].var0
                                  + *(unsigned int *)this[*(unsigned __int16 *)v5[6].var0].var0];
LABEL_12:
  if (!*(_WORD *)v5[4].var0)
    goto LABEL_22;
  v9 = this[*(unsigned __int16 *)v5[4].var0].var0[0];
  if (v9 != 2)
  {
    v10 = v9 != 1 || v8 == 0;
    if (!v10 && !SSUExampleUtterance::Verify(v8, a2))
      return 0;
    goto LABEL_22;
  }
  if (!v8 || (result = SSUExampleEncodedVector::Verify((SSUExampleEncodedVector *)v8, a2)))
  {
LABEL_22:
    --*((_DWORD *)a2 + 4);
    return 1;
  }
  return result;
}

void sub_1C1F36C1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F36DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F36F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F3701C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F370B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F371F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F372CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C1F373D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F37470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C1F375AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C1F37AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24)
{
  void *v24;

  if (__p)
    operator delete(__p);
  if (v24)
    operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_1C1F37C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3BB720C](v7, 0x1030C40E9F947FBLL);
  apple::aiml::flatbuffers2::FlatBufferBuilder::~FlatBufferBuilder((apple::aiml::flatbuffers2::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<apple::aiml::flatbuffers2::Offset<SSUExample>>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = &v4[4 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t apple::aiml::flatbuffers2::FlatBufferBuilder::CreateVector<SSUExample>(apple::aiml::flatbuffers2::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  apple::aiml::flatbuffers2::FlatBufferBuilder::StartVector(a1, a3, 4uLL);
  if (a3)
  {
    v6 = a2 - 4;
    v7 = a3;
    do
    {
      v8 = v7 - 1;
      v9 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(a1, *(_DWORD *)(v6 + 4 * v7));
      apple::aiml::flatbuffers2::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v9);
      v7 = v8;
    }
    while (v8);
  }
  return apple::aiml::flatbuffers2::FlatBufferBuilder::EndVector(a1, a3);
}

apple::aiml::flatbuffers2::FlatBufferBuilder *apple::aiml::flatbuffers2::FlatBufferBuilder::AddOffset<apple::aiml::flatbuffers2::Vector<apple::aiml::flatbuffers2::Offset<SSUExample>>>(apple::aiml::flatbuffers2::FlatBufferBuilder *result, unsigned int a2)
{
  unint64_t v2;
  int v3;

  if (a2)
  {
    v2 = (unint64_t)result;
    v3 = apple::aiml::flatbuffers2::FlatBufferBuilder::ReferTo(result, a2);
    return (apple::aiml::flatbuffers2::FlatBufferBuilder *)apple::aiml::flatbuffers2::FlatBufferBuilder::AddElement<unsigned int>(v2, 8, v3, 0);
  }
  return result;
}

BOOL SSUIntent::Verify(SSUIntent *this, apple::aiml::flatbuffers2::Verifier *a2)
{
  _BOOL8 result;
  SSUIntent *v5;
  uint64_t v6;
  SSUIntent *v7;
  uint64_t v8;
  uint64_t v9;
  SSUIntent *v10;
  unint64_t v11;
  SSUIntent *v12;
  SSUExample *v13;
  uint64_t v14;
  uint64_t v15;

  result = apple::aiml::flatbuffers2::Verifier::VerifyTableStart(a2, this->var0);
  if (result)
  {
    result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 4u);
    if (result)
    {
      v5 = &this[-*(int *)this->var0];
      if (*(unsigned __int16 *)v5->var0 >= 5u && (v6 = *(unsigned __int16 *)v5[4].var0) != 0)
        v7 = &this[v6 + *(unsigned int *)this[v6].var0];
      else
        v7 = 0;
      result = apple::aiml::flatbuffers2::Verifier::VerifyString(a2, v7->var0);
      if (result)
      {
        result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 6u);
        if (result)
        {
          v8 = *(int *)this->var0;
          if (*(unsigned __int16 *)this[-v8].var0 < 7u)
            goto LABEL_18;
          if (*(_WORD *)this[-v8 + 6].var0)
          {
            result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v8 + 6].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v8 + 6].var0].var0].var0, 4uLL, 0);
            if (!result)
              return result;
            v8 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v8].var0 < 7u)
              goto LABEL_18;
          }
          v9 = *(unsigned __int16 *)this[-v8 + 6].var0;
          if (v9 && (v10 = &this[v9 + *(unsigned int *)this[v9].var0], *(_DWORD *)v10->var0))
          {
            v11 = 0;
            v12 = v10 + 4;
            while (SSUIntentParameter::Verify((SSUIntentParameter *)&v12[*(unsigned int *)v12->var0], a2))
            {
              ++v11;
              v12 += 4;
              if (v11 >= *(unsigned int *)v10->var0)
                goto LABEL_18;
            }
            return 0;
          }
          else
          {
LABEL_18:
            result = apple::aiml::flatbuffers2::Table::VerifyOffset((apple::aiml::flatbuffers2::Table *)this, a2, 8u);
            if (!result)
              return result;
            v13 = 0;
            v14 = *(int *)this->var0;
            if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
            {
              if (!*(_WORD *)this[-v14 + 8].var0)
                goto LABEL_23;
              result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOrString(a2, this[*(unsigned __int16 *)this[-v14 + 8].var0+ *(unsigned int *)this[*(unsigned __int16 *)this[-v14 + 8].var0].var0].var0, 4uLL, 0);
              if (!result)
                return result;
              v13 = 0;
              v14 = *(int *)this->var0;
              if (*(unsigned __int16 *)this[-v14].var0 >= 9u)
              {
LABEL_23:
                v15 = *(unsigned __int16 *)this[-v14 + 8].var0;
                if (v15)
                  v13 = (SSUExample *)&this[v15 + *(unsigned int *)this[v15].var0];
                else
                  v13 = 0;
              }
            }
            result = apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(a2, v13);
            if (result)
            {
              --*((_DWORD *)a2 + 4);
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL apple::aiml::flatbuffers2::Verifier::VerifyVectorOfTables<SSUExample>(apple::aiml::flatbuffers2::Verifier *a1, SSUExample *a2)
{
  unint64_t v4;
  SSUExample *v5;
  _BOOL8 result;

  if (!a2)
    return 1;
  if (!*(_DWORD *)a2->var0)
    return 1;
  v4 = 0;
  v5 = a2 + 4;
  do
  {
    result = SSUExample::Verify(&v5[*(unsigned int *)v5->var0], a1);
    if (!result)
      break;
    ++v4;
    v5 += 4;
  }
  while (v4 < *(unsigned int *)a2->var0);
  return result;
}

void sirinluexternal::RRAnnotation::~RRAnnotation(sirinluexternal::RRAnnotation *this)
{
  sirinluexternal::RRAnnotation::~RRAnnotation(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BAF108;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

uint64_t sirinluexternal::RRAnnotation::readFrom(sirinluexternal::RRAnnotation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_25;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_25;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BB0538;
        v19[1] = 0;
        v22 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v19;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v19 = (_QWORD *)*((_QWORD *)this + 2);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_25:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          goto LABEL_32;
        }
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BB0538;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_32:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t sirinluexternal::RRAnnotation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5);
  return this;
}

uint64_t sirinluexternal::RRAnnotation::formatText(sirinluexternal::RRAnnotation *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "key");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "value");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluexternal::RRAnnotation::RRAnnotation(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF108;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E7BAF108;
  return this;
}

sirinluexternal::RRAnnotation *sirinluexternal::RRAnnotation::RRAnnotation(sirinluexternal::RRAnnotation *this, const siricommon::StringValue **a2)
{
  siricommon::StringValue **v4;
  siricommon::StringValue *v5;
  siricommon::StringValue *v6;
  siricommon::StringValue *v7;
  siricommon::StringValue *v8;
  siricommon::StringValue *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7BAF108;
  *((_QWORD *)this + 1) = 0;
  v4 = (siricommon::StringValue **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  if (a2[1])
  {
    v5 = (siricommon::StringValue *)operator new();
    v6 = siricommon::StringValue::StringValue(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(siricommon::StringValue *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[2])
  {
    v8 = (siricommon::StringValue *)operator new();
    v9 = siricommon::StringValue::StringValue(v8, a2[2]);
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

uint64_t sirinluexternal::RRAnnotation::operator=(uint64_t a1, const siricommon::StringValue **a2)
{
  __int128 v3;
  _BYTE v5[8];
  __int128 v6;

  if ((const siricommon::StringValue **)a1 != a2)
  {
    sirinluexternal::RRAnnotation::RRAnnotation((sirinluexternal::RRAnnotation *)v5, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    v6 = v3;
    sirinluexternal::RRAnnotation::~RRAnnotation((sirinluexternal::RRAnnotation *)v5);
  }
  return a1;
}

uint64_t sirinluexternal::swap(uint64_t this, sirinluexternal::RRAnnotation *a2, sirinluexternal::RRAnnotation *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  return this;
}

_QWORD *sirinluexternal::RRAnnotation::RRAnnotation(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E7BAF108;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[2];
  a1[2] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sirinluexternal::RRAnnotation::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  void (**v6)(sirinluexternal::RRAnnotation *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E7BAF108;
    v3 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    sirinluexternal::RRAnnotation::~RRAnnotation((sirinluexternal::RRAnnotation *)&v6);
  }
  return a1;
}

uint64_t sirinluexternal::RRAnnotation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (!v5)
      goto LABEL_4;
    return 0;
  }
  if (!v5 || (siricommon::StringValue::operator==(v4, v5) & 1) == 0)
    return 0;
LABEL_4:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  result = (v6 | v7) == 0;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
    return siricommon::StringValue::operator==(*(_QWORD *)(a1 + 16), v7);
  return result;
}

unint64_t sirinluexternal::RRAnnotation::hash_value(sirinluexternal::RRAnnotation *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *((_QWORD *)this + 1);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    v4 = std::__string_hash<char>::operator()[abi:ne180100](v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v6 = std::__string_hash<char>::operator()[abi:ne180100](v6);
  }
  else
  {
    v6 = 0;
  }
  return v6 ^ v4;
}

_QWORD *sirinluexternal::RRAnnotation::makeKey(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluexternal::RRAnnotation::makeValue(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[2])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB0538;
    v2[1] = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E7BAF158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::readFrom(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v19 = (_QWORD *)operator new();
        *v19 = &off_1E7BAF620;
        v19[1] = 0;
        v20 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (_QWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v19 + 16))(v19, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_27:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_27;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2);
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::formatText(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "response");
  return PB::TextFormatter::endObject(a2);
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(_QWORD *this)
{
  *this = &off_1E7BAF158;
  this[1] = 0;
  return this;
}

{
  *this = &off_1E7BAF158;
  this[1] = 0;
  return this;
}

sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v4;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BAF158;
  *((_QWORD *)this + 1) = 0;
  if (a2[1])
  {
    v4 = (sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)operator new();
    v5 = sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(v4, a2[1]);
    v6 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return this;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator=(uint64_t a1, const sirinluinternalsnlp_intermediate::LinearizedTensor ***a2)
{
  uint64_t v3;
  void (**v5)(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *__hidden);
  uint64_t v6;

  if ((const sirinluinternalsnlp_intermediate::LinearizedTensor ***)a1 != a2)
  {
    sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)&v5, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v5 = &off_1E7BAF158;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::swap(uint64_t this, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF158;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7BAF158;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = &off_1E7BAF158;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

BOOL sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  else
    return sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::operator==(v2, v3);
}

uint64_t sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::hash_value(sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *this)
{
  uint64_t v1;
  sirinluinternalsnlp_intermediate::LinearizedTensor *v2;

  v1 = *((_QWORD *)this + 1);
  if (v1 && (v2 = *(sirinluinternalsnlp_intermediate::LinearizedTensor **)(v1 + 8)) != 0)
    return sirinluinternalsnlp_intermediate::LinearizedTensor::hash_value(v2);
  else
    return 0;
}

_QWORD *sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::makeResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[1])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAF620;
    v2[1] = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse(sirinluinternalembedding::EmbeddingResponse *this)
{
  sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E7BAF1A8;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v6 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = (void **)((char *)this + 24);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternalembedding::EmbeddingResponse::readFrom(sirinluinternalembedding::EmbeddingResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)((char *)this + 80);
  v9 = (uint64_t **)((char *)this + 24);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_22:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BB1DD0;
          *(_DWORD *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          v23 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = *((_QWORD *)this + 2);
          }
          goto LABEL_63;
        case 2u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BB0140;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_QWORD *)(v22 + 40) = 0;
          v24 = *((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v22 = *((_QWORD *)this + 14);
          }
          goto LABEL_63;
        case 3u:
          *((_BYTE *)this + 120) |= 8u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_102;
              v28 += 7;
              v25 = v31;
              v16 = v29++ > 8;
            }
            while (!v16);
LABEL_77:
            v30 = 0;
            goto LABEL_102;
          }
          v61 = 0;
          v62 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v63 = v25 + 1;
              v64 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v63;
              v30 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                v25 = v63;
                v16 = v62++ > 8;
                if (v16)
                  goto LABEL_77;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v30 = 0;
            }
            break;
          }
LABEL_102:
          *((_QWORD *)this + 8) = v30;
          goto LABEL_66;
        case 4u:
          *((_BYTE *)this + 120) |= 2u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_106;
              v36 += 7;
              v33 = v39;
              v16 = v37++ > 8;
            }
            while (!v16);
LABEL_84:
            v38 = 0;
            goto LABEL_106;
          }
          v65 = 0;
          v66 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              v38 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v67 = v33 + 1;
              v68 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v67;
              v38 |= (unint64_t)(v68 & 0x7F) << v65;
              if (v68 < 0)
              {
                v65 += 7;
                v33 = v67;
                v16 = v66++ > 8;
                if (v16)
                  goto LABEL_84;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v38 = 0;
            }
            break;
          }
LABEL_106:
          *((_QWORD *)this + 6) = v38;
          goto LABEL_66;
        case 5u:
          *((_BYTE *)this + 120) |= 1u;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_110;
              v44 += 7;
              v41 = v47;
              v16 = v45++ > 8;
            }
            while (!v16);
LABEL_91:
            v46 = 0;
            goto LABEL_110;
          }
          v69 = 0;
          v70 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              v46 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v71 = v41 + 1;
              v72 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v71;
              v46 |= (unint64_t)(v72 & 0x7F) << v69;
              if (v72 < 0)
              {
                v69 += 7;
                v41 = v71;
                v16 = v70++ > 8;
                if (v16)
                  goto LABEL_91;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v46 = 0;
            }
            break;
          }
LABEL_110:
          *((_QWORD *)this + 1) = v46;
          goto LABEL_66;
        case 6u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BB1DD0;
          *(_DWORD *)(v22 + 64) = 0;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          v49 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v22;
          if (v49)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            v22 = *((_QWORD *)this + 9);
          }
          goto LABEL_63;
        case 7u:
          PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>(v9);
          v50 = *((_QWORD *)this + 4);
          goto LABEL_62;
        case 8u:
          v22 = operator new();
          *(_QWORD *)v22 = &off_1E7BAEA98;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          v51 = *((_QWORD *)this + 13);
          *((_QWORD *)this + 13) = v22;
          if (v51)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
            v22 = *((_QWORD *)this + 13);
          }
          goto LABEL_63;
        case 9u:
          *((_BYTE *)this + 120) |= 4u;
          v52 = *((_QWORD *)a2 + 1);
          v53 = *((_QWORD *)a2 + 2);
          v54 = *(_QWORD *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)a2 + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_114;
              v55 += 7;
              v52 = v58;
              v16 = v56++ > 8;
            }
            while (!v16);
LABEL_98:
            v57 = 0;
            goto LABEL_114;
          }
          v73 = 0;
          v74 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v75 = v52 + 1;
              v76 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)a2 + 1) = v75;
              v57 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                v52 = v75;
                v16 = v74++ > 8;
                if (v16)
                  goto LABEL_98;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v57 = 0;
            }
            break;
          }
LABEL_114:
          *((_QWORD *)this + 7) = v57;
          goto LABEL_66;
        case 0xAu:
          PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>(v8);
          v50 = *((_QWORD *)this + 11);
LABEL_62:
          v22 = *(_QWORD *)(v50 - 8);
LABEL_63:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_66;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_22;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_66:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t sirinluinternalembedding::EmbeddingResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  char v6;
  const PB::Base *v7;
  const PB::Base **v8;
  const PB::Base **v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base **v12;
  const PB::Base **v13;
  const PB::Base *v14;

  v3 = this;
  v4 = *(const PB::Base **)(this + 16);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_BYTE *)(v3 + 120);
  if ((v6 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v6 = *(_BYTE *)(v3 + 120);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(v3 + 120) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 120) & 1) != 0)
LABEL_8:
    this = PB::Writer::writeVarInt(a2);
LABEL_9:
  v7 = *(const PB::Base **)(v3 + 72);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = *(const PB::Base ***)(v3 + 24);
  v9 = *(const PB::Base ***)(v3 + 32);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeSubmessage(a2, v10);
  }
  v11 = *(const PB::Base **)(v3 + 104);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  if ((*(_BYTE *)(v3 + 120) & 4) != 0)
    this = PB::Writer::writeVarInt(a2);
  v13 = *(const PB::Base ***)(v3 + 80);
  v12 = *(const PB::Base ***)(v3 + 88);
  while (v13 != v12)
  {
    v14 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v14);
  }
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::formatText(sirinluinternalembedding::EmbeddingResponse *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 120) & 1) != 0)
    PB::TextFormatter::format(a2, "embedding_dim");
  v5 = *((_QWORD *)this + 2);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embedding_tensor");
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "embedding_tensor_outputs");
  }
  v9 = *((_BYTE *)this + 120);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "num_layer");
    v9 = *((_BYTE *)this + 120);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 120) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "num_subword_token");
  if ((*((_BYTE *)this + 120) & 8) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "num_token");
LABEL_11:
  v10 = *((_QWORD *)this + 9);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "sentence_embedding_tensor");
  v11 = (uint64_t *)*((_QWORD *)this + 10);
  v12 = (uint64_t *)*((_QWORD *)this + 11);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "subword_embedding_tensor_outputs");
  }
  v14 = *((_QWORD *)this + 13);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "subword_token_chain");
  v15 = *((_QWORD *)this + 14);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "token_chain");
  return PB::TextFormatter::endObject(a2);
}

uint64_t PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<>(uint64_t **a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  _QWORD *v22;

  result = operator new();
  v3 = result;
  *(_QWORD *)result = &off_1E7BAEE90;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v10);
    else
      v11 = 0;
    v12 = (uint64_t *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v21 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = (unint64_t)a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = result;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1C1F39D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(sirinluinternalembedding::EmbeddingResponse *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAF1A8;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAF1A8;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

sirinluinternalembedding::EmbeddingResponse *sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(sirinluinternalembedding::EmbeddingResponse *this, const sirinluinternalembedding::EmbeddingResponse *a2)
{
  sirinluinternal::NLv4EmbeddingTensor **v4;
  sirinluinternal::NLv4EmbeddingTensor **v5;
  char **v6;
  sirinluinternal::NLv4EmbeddingTensor *v7;
  sirinluinternal::NLv4EmbeddingTensor *v8;
  sirinluinternal::TokenChain *v9;
  sirinluinternal::TokenChain *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char **v14;
  sirinluinternal::NLv4EmbeddingTensor *v15;
  sirinluinternal::NLv4EmbeddingTensor *v16;
  const sirinluinternalembedding::EmbeddingTensorOutput **v17;
  const sirinluinternalembedding::EmbeddingTensorOutput **i;
  sirinluinternal::SubwordTokenChain *v19;
  sirinluinternal::SubwordTokenChain *v20;
  uint64_t v21;
  uint64_t v22;
  const sirinluinternalembedding::EmbeddingTensorOutput **v23;
  const sirinluinternalembedding::EmbeddingTensorOutput **j;
  uint64_t v26;
  uint64_t v27;

  *((_OWORD *)this + 1) = 0u;
  v4 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 16);
  *(_OWORD *)((char *)this + 72) = 0u;
  v5 = (sirinluinternal::NLv4EmbeddingTensor **)((char *)this + 72);
  *(_QWORD *)this = &off_1E7BAF1A8;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  if (*((_QWORD *)a2 + 2))
  {
    v6 = (char **)operator new();
    v7 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v6, *((char ***)a2 + 2));
    v8 = *v4;
    *v4 = v7;
    if (v8)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (*((_QWORD *)a2 + 14))
  {
    v9 = (sirinluinternal::TokenChain *)operator new();
    v10 = sirinluinternal::TokenChain::TokenChain(v9, *((const sirinluinternal::TokenChain **)a2 + 14));
    v11 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *((_BYTE *)a2 + 120);
  if ((v12 & 8) == 0)
  {
    if ((*((_BYTE *)a2 + 120) & 2) == 0)
      goto LABEL_9;
LABEL_25:
    v27 = *((_QWORD *)a2 + 6);
    *((_BYTE *)this + 120) |= 2u;
    *((_QWORD *)this + 6) = v27;
    if ((*((_BYTE *)a2 + 120) & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v26 = *((_QWORD *)a2 + 8);
  *((_BYTE *)this + 120) |= 8u;
  *((_QWORD *)this + 8) = v26;
  v12 = *((_BYTE *)a2 + 120);
  if ((v12 & 2) != 0)
    goto LABEL_25;
LABEL_9:
  if ((v12 & 1) != 0)
  {
LABEL_10:
    v13 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 120) |= 1u;
    *((_QWORD *)this + 1) = v13;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 9))
  {
    v14 = (char **)operator new();
    v15 = sirinluinternal::NLv4EmbeddingTensor::NLv4EmbeddingTensor(v14, *((char ***)a2 + 9));
    v16 = *v5;
    *v5 = v15;
    if (v16)
      (*(void (**)(sirinluinternal::NLv4EmbeddingTensor *))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = (const sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)a2 + 3);
  for (i = (const sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)a2 + 4); v17 != i; ++v17)
    PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>((sirinluinternalembedding::EmbeddingTensorOutput ***)this + 3, *v17);
  if (*((_QWORD *)a2 + 13))
  {
    v19 = (sirinluinternal::SubwordTokenChain *)operator new();
    v20 = sirinluinternal::SubwordTokenChain::SubwordTokenChain(v19, *((const sirinluinternal::SubwordTokenChain **)a2 + 13));
    v21 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if ((*((_BYTE *)a2 + 120) & 4) != 0)
  {
    v22 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 120) |= 4u;
    *((_QWORD *)this + 7) = v22;
  }
  v23 = (const sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)a2 + 10);
  for (j = (const sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)a2 + 11); v23 != j; ++v23)
    PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>((sirinluinternalembedding::EmbeddingTensorOutput ***)this + 10, *v23);
  return this;
}

uint64_t PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::emplace_back<sirinluinternalembedding::EmbeddingTensorOutput const&>(sirinluinternalembedding::EmbeddingTensorOutput ***a1, const sirinluinternalembedding::EmbeddingTensorOutput *a2)
{
  sirinluinternalembedding::EmbeddingTensorOutput *v4;
  uint64_t result;
  unint64_t v6;
  sirinluinternalembedding::EmbeddingTensorOutput **v7;
  sirinluinternalembedding::EmbeddingTensorOutput **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  sirinluinternalembedding::EmbeddingTensorOutput **v14;
  unint64_t v15;
  sirinluinternalembedding::EmbeddingTensorOutput **v16;
  sirinluinternalembedding::EmbeddingTensorOutput **v17;
  sirinluinternalembedding::EmbeddingTensorOutput *v18;
  int64x2_t v19;
  sirinluinternalembedding::EmbeddingTensorOutput **v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = (sirinluinternalembedding::EmbeddingTensorOutput *)operator new();
  result = (uint64_t)sirinluinternalembedding::EmbeddingTensorOutput::EmbeddingTensorOutput(v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<siricommon::StringValue>>>(v12);
    else
      v13 = 0;
    v14 = (sirinluinternalembedding::EmbeddingTensorOutput **)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (sirinluinternalembedding::EmbeddingTensorOutput **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (sirinluinternalembedding::EmbeddingTensorOutput **)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<siricommon::StringValue>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C1F3A1E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sirinluinternalembedding::EmbeddingResponse::operator=(uint64_t a1, const sirinluinternalembedding::EmbeddingResponse *a2)
{
  sirinluinternalembedding::EmbeddingResponse *v3;
  _BYTE v5[128];

  if ((const sirinluinternalembedding::EmbeddingResponse *)a1 != a2)
  {
    sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse((sirinluinternalembedding::EmbeddingResponse *)v5, a2);
    sirinluinternalembedding::swap(a1, (sirinluinternalembedding::EmbeddingResponse *)v5, v3);
    sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse((sirinluinternalembedding::EmbeddingResponse *)v5);
  }
  return a1;
}

uint64_t sirinluinternalembedding::swap(uint64_t this, sirinluinternalembedding::EmbeddingResponse *a2, sirinluinternalembedding::EmbeddingResponse *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(this + 120);
  *(_DWORD *)(this + 120) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v7 = *(_QWORD *)(this + 8);
  v6 = *(_QWORD *)(this + 16);
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v8;
  *((_QWORD *)a2 + 2) = v6;
  v9 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v9;
  *((_QWORD *)a2 + 1) = v7;
  v10 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v14;
  v15 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v15;
  v16 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v16;
  v17 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v17;
  v18 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v18;
  return this;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E7BAF1A8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 72) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  std::vector<std::unique_ptr<sirinluexternal::UserParse>>::__vdeallocate((_QWORD *)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return a1;
}

uint64_t sirinluinternalembedding::EmbeddingResponse::operator=(uint64_t a1, uint64_t a2)
{
  sirinluinternalembedding::EmbeddingResponse *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse((uint64_t)v5, a2);
    sirinluinternalembedding::swap(a1, (sirinluinternalembedding::EmbeddingResponse *)v5, v3);
    sirinluinternalembedding::EmbeddingResponse::~EmbeddingResponse((sirinluinternalembedding::EmbeddingResponse *)v5);
  }
  return a1;
}

BOOL sirinluinternalembedding::EmbeddingResponse::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD **)(a1 + 112);
  v7 = *(_QWORD *)(a2 + 112);
  if (v6)
  {
    if (!v7 || !sirinluinternal::TokenChain::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_BYTE *)(a1 + 120);
  v9 = *(_BYTE *)(a2 + 120);
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 8) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 120) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 120) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 2) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 120) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 120) & 1) != 0)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a2 + 72);
  if (v10)
  {
    if (!v11 || !sirinluinternal::NLv4EmbeddingTensor::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(uint64_t **)(a2 + 24), *(_QWORD *)(a2 + 32)))
  {
    v12 = *(_QWORD **)(a1 + 104);
    v13 = *(_QWORD *)(a2 + 104);
    if (v12)
    {
      if (!v13 || !sirinluinternal::SubwordTokenChain::operator==(v12, v13))
        return 0;
LABEL_37:
      if ((v8 & 4) != 0)
      {
        if ((v9 & 4) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
          return 0;
      }
      else if ((v9 & 4) != 0)
      {
        return 0;
      }
      return PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(uint64_t **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    if (!v13)
      goto LABEL_37;
  }
  return 0;
}

BOOL PB::PtrVector<sirinluinternalembedding::EmbeddingTensorOutput>::operator==(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  BOOL v9;

  if (a2 - a1 != a4 - (_QWORD)a3)
    return 0;
  if (a1 == a2)
    return 1;
  v5 = a3;
  v6 = a1 + 8;
  do
  {
    v7 = *v5++;
    result = sirinluinternalembedding::EmbeddingTensorOutput::operator==(*(_QWORD *)(v6 - 8), v7);
    v9 = !result || v6 == a2;
    v6 += 8;
  }
  while (!v9);
  return result;
}

unint64_t sirinluinternalembedding::EmbeddingResponse::hash_value(sirinluinternalembedding::EmbeddingResponse *this)
{
  sirinluinternal::NLv4EmbeddingTensor *v2;
  unint64_t v3;
  sirinluinternal::TokenChain *v4;
  unint64_t v5;
  uint64_t v6;
  sirinluinternal::NLv4EmbeddingTensor *v7;
  unint64_t v8;
  sirinluinternalembedding::EmbeddingTensorOutput **v9;
  sirinluinternalembedding::EmbeddingTensorOutput **v10;
  uint64_t v11;
  sirinluinternalembedding::EmbeddingTensorOutput *v12;
  sirinluinternal::SubwordTokenChain *v13;
  unint64_t v14;
  uint64_t v15;
  sirinluinternalembedding::EmbeddingTensorOutput **v16;
  sirinluinternalembedding::EmbeddingTensorOutput **v17;
  uint64_t v18;
  sirinluinternalembedding::EmbeddingTensorOutput *v19;
  uint64_t v21;
  uint64_t v22;

  v2 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 2);
  if (v2)
    v3 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v2);
  else
    v3 = 0;
  v4 = (sirinluinternal::TokenChain *)*((_QWORD *)this + 14);
  if (v4)
    v5 = sirinluinternal::TokenChain::hash_value(v4);
  else
    v5 = 0;
  if ((*((_BYTE *)this + 120) & 8) == 0)
  {
    v22 = 0;
    if ((*((_BYTE *)this + 120) & 2) != 0)
      goto LABEL_9;
LABEL_12:
    v21 = 0;
    if ((*((_BYTE *)this + 120) & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  v22 = *((_QWORD *)this + 8);
  if ((*((_BYTE *)this + 120) & 2) == 0)
    goto LABEL_12;
LABEL_9:
  v21 = *((_QWORD *)this + 6);
  if ((*((_BYTE *)this + 120) & 1) != 0)
  {
LABEL_10:
    v6 = *((_QWORD *)this + 1);
    goto LABEL_14;
  }
LABEL_13:
  v6 = 0;
LABEL_14:
  v7 = (sirinluinternal::NLv4EmbeddingTensor *)*((_QWORD *)this + 9);
  if (v7)
    v8 = sirinluinternal::NLv4EmbeddingTensor::hash_value(v7);
  else
    v8 = 0;
  v10 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)this + 3);
  v9 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)this + 4);
  if (v10 == v9)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      v12 = *v10++;
      v11 ^= sirinluinternalembedding::EmbeddingTensorOutput::hash_value(v12);
    }
    while (v10 != v9);
  }
  v13 = (sirinluinternal::SubwordTokenChain *)*((_QWORD *)this + 13);
  if (v13)
    v14 = sirinluinternal::SubwordTokenChain::hash_value(v13);
  else
    v14 = 0;
  if ((*((_BYTE *)this + 120) & 4) != 0)
    v15 = *((_QWORD *)this + 7);
  else
    v15 = 0;
  v16 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)this + 10);
  v17 = (sirinluinternalembedding::EmbeddingTensorOutput **)*((_QWORD *)this + 11);
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v18 ^= sirinluinternalembedding::EmbeddingTensorOutput::hash_value(v19);
    }
    while (v16 != v17);
  }
  return v5 ^ v3 ^ v22 ^ v21 ^ v6 ^ v8 ^ v11 ^ v14 ^ v15 ^ v18;
}

_QWORD *sirinluinternalembedding::EmbeddingResponse::makeEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalembedding::EmbeddingResponse::makeTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[14])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0140;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[14];
    v1[14] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalembedding::EmbeddingResponse::makeSentenceEmbeddingTensor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB1DD0;
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternalembedding::EmbeddingResponse::makeSubwordTokenChain(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[13])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAEA98;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    this = (_QWORD *)v1[13];
    v1[13] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t SIRINLUINTERNALMDSUaaPParseOverrideReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SIRINLUINTERNALParseOverride *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SIRINLUINTERNALParseOverride);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALParseOverrideReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SIRINLUINTERNALUAAP_PARSERUaaPParserRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_35;
        goto LABEL_50;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALTokenChain);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (!PBReaderPlaceMark() || !SIRINLUINTERNALTokenChainReadFrom((char *)v17, a2))
          goto LABEL_50;
        goto LABEL_35;
      case 3u:
        v17 = objc_alloc_init(SIRINLUINTERNALNLv4EmbeddingTensor);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALNLv4EmbeddingTensorReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_35;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALMatchingSpan);
        objc_msgSend((id)a1, "addMatchingSpans:", v17);
        if (!PBReaderPlaceMark() || (SIRINLUINTERNALMatchingSpanReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_50;
        goto LABEL_35;
      case 5u:
        v17 = objc_alloc_init(SIRINLUEXTERNALTurnInput);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALTurnInputReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_48:
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

uint64_t SIRINLUINTERNALQUERYREWRITEQRResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SIRINLUEXTERNALUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SIRINLUEXTERNALUUID);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (SIRINLUEXTERNALUUIDReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_36;
        goto LABEL_43;
      case 2u:
        v17 = objc_alloc_init(SIRINLUINTERNALQUERYREWRITEQRHypothesis);
        objc_msgSend((id)a1, "addQrHypotheses:", v17);
        if (!PBReaderPlaceMark()
          || (SIRINLUINTERNALQUERYREWRITEQRHypothesisReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 16) = v21;
        goto LABEL_41;
      case 4u:
        v17 = objc_alloc_init(SIRINLUINTERNALRewriteHypothesis);
        objc_msgSend((id)a1, "addRewriteHypotheses:", v17);
        if (PBReaderPlaceMark() && (SIRINLUINTERNALRewriteHypothesisReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper(sirinluinternal::PreprocessingWrapper *this)
{
  sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper(this);
  JUMPOUT(0x1C3BB720CLL);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7BAF218;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

uint64_t sirinluinternal::PreprocessingWrapper::readFrom(sirinluinternal::PreprocessingWrapper *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAECC0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        v21 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *((_QWORD *)this + 4);
        }
        break;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB02A0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        v22 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *((_QWORD *)this + 3);
        }
        break;
      case 3u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BAF1A8;
        *(_OWORD *)(v20 + 16) = 0u;
        *(_OWORD *)(v20 + 32) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_DWORD *)(v20 + 120) = 0;
        v23 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E7BB0BC8;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_QWORD *)(v20 + 40) = 0;
        v24 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v20;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v20 = *((_QWORD *)this + 2);
        }
        break;
      default:
        goto LABEL_19;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_34:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v15 = 0;
  v16 = 0;
  v11 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v17 = v2 + 1;
    v18 = *(_BYTE *)(v8 + v2);
    *((_QWORD *)a2 + 1) = v17;
    v11 |= (unint64_t)(v18 & 0x7F) << v15;
    if ((v18 & 0x80) == 0)
      goto LABEL_21;
    v15 += 7;
    v2 = v17;
    v14 = v16++ > 8;
  }
  while (!v14);
LABEL_19:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_34;
  return result;
}

uint64_t sirinluinternal::PreprocessingWrapper::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = (const PB::Base *)v3[3];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[2];
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7);
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::formatText(sirinluinternal::PreprocessingWrapper *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "embedding_response");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "mention_resolver_response");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "span_match_response");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "tokenizer_response");
  return PB::TextFormatter::endObject(a2);
}

double sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(sirinluinternal::PreprocessingWrapper *this)
{
  double result;

  *(_QWORD *)this = &off_1E7BAF218;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7BAF218;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

sirinluinternal::PreprocessingWrapper *sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(sirinluinternal::PreprocessingWrapper *this, const sirinluinternal::PreprocessingWrapper *a2)
{
  sirinluinternalembedding::EmbeddingResponse **v4;
  sirinluinternaltokenizer::TokenizerResponse *v5;
  sirinluinternaltokenizer::TokenizerResponse *v6;
  uint64_t v7;
  sirinluinternalspanmatch::SpanMatchResponse *v8;
  sirinluinternalspanmatch::SpanMatchResponse *matched;
  uint64_t v10;
  sirinluinternalembedding::EmbeddingResponse *v11;
  sirinluinternalembedding::EmbeddingResponse *v12;
  sirinluinternalembedding::EmbeddingResponse *v13;
  sirinluinternalmention_resolver::MentionResolverResponse *v14;
  sirinluinternalmention_resolver::MentionResolverResponse *v15;
  uint64_t v16;

  *(_QWORD *)this = &off_1E7BAF218;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (sirinluinternalembedding::EmbeddingResponse **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
  {
    v5 = (sirinluinternaltokenizer::TokenizerResponse *)operator new();
    v6 = sirinluinternaltokenizer::TokenizerResponse::TokenizerResponse(v5, *((const sirinluinternal::TokenChain ***)a2 + 4));
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*((_QWORD *)a2 + 3))
  {
    v8 = (sirinluinternalspanmatch::SpanMatchResponse *)operator new();
    matched = sirinluinternalspanmatch::SpanMatchResponse::SpanMatchResponse(v8, *((const sirinluinternalspanmatch::SpanMatchResponse **)a2 + 3));
    v10 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = matched;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (*((_QWORD *)a2 + 1))
  {
    v11 = (sirinluinternalembedding::EmbeddingResponse *)operator new();
    v12 = sirinluinternalembedding::EmbeddingResponse::EmbeddingResponse(v11, *((const sirinluinternalembedding::EmbeddingResponse **)a2 + 1));
    v13 = *v4;
    *v4 = v12;
    if (v13)
      (*(void (**)(sirinluinternalembedding::EmbeddingResponse *))(*(_QWORD *)v13 + 8))(v13);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v14 = (sirinluinternalmention_resolver::MentionResolverResponse *)operator new();
    v15 = sirinluinternalmention_resolver::MentionResolverResponse::MentionResolverResponse(v14, *((const sirinluexternal::UUID ***)a2 + 2));
    v16 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator=(uint64_t a1, const sirinluinternal::PreprocessingWrapper *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((const sirinluinternal::PreprocessingWrapper *)a1 != a2)
  {
    sirinluinternal::PreprocessingWrapper::PreprocessingWrapper((sirinluinternal::PreprocessingWrapper *)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper((sirinluinternal::PreprocessingWrapper *)v6);
  }
  return a1;
}

_QWORD *sirinluinternal::swap(_QWORD *this, sirinluinternal::PreprocessingWrapper *a2, sirinluinternal::PreprocessingWrapper *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  return this;
}

uint64_t sirinluinternal::PreprocessingWrapper::PreprocessingWrapper(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_1E7BAF218;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = a2[4];
  a2[4] = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a2[3];
  a2[3] = 0;
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a2[1];
  a2[1] = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a2[2];
  a2[2] = 0;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  __int128 v8;

  if ((_QWORD *)a1 != a2)
  {
    sirinluinternal::PreprocessingWrapper::PreprocessingWrapper((uint64_t)v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    v8 = v3;
    sirinluinternal::PreprocessingWrapper::~PreprocessingWrapper((sirinluinternal::PreprocessingWrapper *)v6);
  }
  return a1;
}

uint64_t sirinluinternal::PreprocessingWrapper::operator==(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(uint64_t **)(a1 + 32);
  v5 = (_QWORD *)a2[4];
  if (v4)
  {
    if (!v5 || !sirinluinternaltokenizer::TokenizerResponse::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = a2[3];
  if (v6)
  {
    if (!v7
      || !PB::PtrVector<sirinluinternal::MatchingSpan>::operator==((uint64_t *)(v6 + 8), *(uint64_t **)(v7 + 8), *(_QWORD *)(v7 + 16)))
    {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = a2[1];
  if (!v8)
  {
    if (!v9)
      goto LABEL_14;
    return 0;
  }
  if (!v9 || !sirinluinternalembedding::EmbeddingResponse::operator==(v8, v9))
    return 0;
LABEL_14:
  v10 = *(_QWORD *)(a1 + 16);
  v11 = a2[2];
  result = (v10 | v11) == 0;
  if (v10)
  {
    if (v11)
      return sirinluinternalmention_resolver::MentionResolverResponse::operator==(*(uint64_t **)(a1 + 16), v11);
  }
  return result;
}

unint64_t sirinluinternal::PreprocessingWrapper::hash_value(sirinluinternal::PreprocessingWrapper *this)
{
  sirinluinternaltokenizer::TokenizerResponse *v2;
  unint64_t v3;
  uint64_t v4;
  sirinluinternal::MatchingSpan **v5;
  sirinluinternal::MatchingSpan **v6;
  uint64_t v7;
  sirinluinternal::MatchingSpan *v8;
  sirinluinternalembedding::EmbeddingResponse *v9;
  unint64_t v10;
  unint64_t v11;

  v2 = (sirinluinternaltokenizer::TokenizerResponse *)*((_QWORD *)this + 4);
  if (v2)
    v3 = sirinluinternaltokenizer::TokenizerResponse::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 3);
  if (!v4
    || (v5 = *(sirinluinternal::MatchingSpan ***)(v4 + 8), v6 = *(sirinluinternal::MatchingSpan ***)(v4 + 16), v5 == v6))
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v7 ^= sirinluinternal::MatchingSpan::hash_value(v8);
    }
    while (v5 != v6);
  }
  v9 = (sirinluinternalembedding::EmbeddingResponse *)*((_QWORD *)this + 1);
  if (v9)
    v10 = sirinluinternalembedding::EmbeddingResponse::hash_value(v9);
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 2);
  if (v11)
    v11 = sirinluinternalmention_resolver::MentionResolverResponse::hash_value((sirinluinternalmention_resolver::MentionResolverResponse *)v11);
  return v7 ^ v3 ^ v10 ^ v11;
}

_QWORD *sirinluinternal::PreprocessingWrapper::makeTokenizerResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[4])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BAECC0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::PreprocessingWrapper::makeSpanMatchResponse(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (!this[3])
  {
    v1 = this;
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E7BB02A0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::PreprocessingWrapper::makeEmbeddingResponse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BAF1A8;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_DWORD *)(v2 + 120) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *sirinluinternal::PreprocessingWrapper::makeMentionResolverResponse(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7BB0BC8;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void sirinluexternal::Parser::~Parser(sirinluexternal::Parser *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3BB720CLL);
}

uint64_t sirinluexternal::Parser::readFrom(sirinluexternal::Parser *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26 + 1;
            v39 = *(_BYTE *)(v27 + v26);
            *((_QWORD *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v26 = v38;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19 + 1;
            v35 = *(_BYTE *)(v20 + v19);
            *((_QWORD *)a2 + 1) = v34;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v19 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_59:
          v3 = v34;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

